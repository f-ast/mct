head	1.65;
access;
symbols
	v20081022-1925:1.65
	v20081015-1925:1.65
	v20081008-1925:1.65
	v20081001-1925:1.65
	v20080924-1925:1.65
	v20080917-1925:1.65
	v20080911-1728:1.65
	v20080910-1520:1.65
	v20080903-1520:1.65
	v20080827-1520:1.65
	v20080813-1520:1.65
	v20080806-1520:1.65
	v20070202-0200:1.57.2.1
	v20061120-1300:1.63
	M3_20:1.63
	v20061117-0800:1.63
	v20061027-1200:1.57.2.1
	v20061020-1000:1.57.2.1
	v20061013-1330:1.60
	v20060919-0800:1.57.2.1
	v20060907-1100:1.57.2.1
	M1_20:1.58
	v20060904-1500:1.58
	v20060824-1600:1.57
	v20060817-1500:1.57
	v20060728-0500:1.57
	v20060713-1700:1.57
	R1_0_maintenance:1.57.0.2
	R1_0:1.57
	v20060627-1200:1.57
	v20060626-1420:1.57
	v20060620-0400:1.56
	v20060616-1400:1.56
	v20060616-1200:1.56
	v20060609-1400:1.56
	v20060531-1730:1.53
	v20060530-1930:1.53
	v20060526-1200:1.52
	v20060519-1300:1.50
	v20060519-0800:1.50
	v20060512-1000:1.47
	I20060512-1000:1.47
	I20060505-1400:1.46
	I20060428-1300:1.46
	I20060424-0500:1.46
	I20060424-0300:1.46
	M6_10:1.45
	I20060407-1200:1.33
	I20060331-1000:1.32
	I20060324-0300:1.32
	I20060317-1300:1.32
	I20060317-1200:1.32
	I20060316-1300:1.31
	I20060309-1300:1.23
	M5_10:1.20
	S20060303-1600:1.20
	I20060227-1730:1.20
	I20060216-1945:1.20
	I20060210-1715:1.18
	I20060209-1815:1.18
	I20060203-0830:1.12
	I20060202-1415:1.12
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.8
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.65
date	2006.12.08.19.20.41;	author dstadnik;	state dead;
branches;
next	1.64;
commitid	49124579bb084567;

1.64
date	2006.12.06.17.49.51;	author dstadnik;	state Exp;
branches;
next	1.63;
commitid	5413457702be4567;

1.63
date	2006.10.24.11.50.11;	author dstadnik;	state Exp;
branches;
next	1.62;

1.62
date	2006.10.18.09.56.50;	author dstadnik;	state Exp;
branches;
next	1.61;

1.61
date	2006.10.17.13.08.11;	author dstadnik;	state Exp;
branches;
next	1.60;

1.60
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.59;

1.59
date	2006.09.05.17.38.16;	author dstadnik;	state Exp;
branches;
next	1.58;

1.58
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.57;

1.57
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches
	1.57.2.1;
next	1.56;

1.56
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.55;

1.55
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.54;

1.54
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.52;

1.52
date	2006.05.24.18.05.29;	author atikhomirov;	state Exp;
branches;
next	1.51;

1.51
date	2006.05.24.11.57.33;	author atikhomirov;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.17.14.22.47;	author dstadnik;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.46;

1.46
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.14.15.19.57;	author dstadnik;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.14.14.47.54;	author dstadnik;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.14.14.05.32;	author dstadnik;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.14.13.49.51;	author dstadnik;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.14.07.36.06;	author dstadnik;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.12.16.56.06;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.33;

1.33
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.17.16.52.37;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.03.15.14.39.11;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.03.14.17.04.50;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.14.13.14.55;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.03.14.11.09.47;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.14.10.27.02;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.13.22.31.59;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.03.09.13.25.10;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.07.14.09.19;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.15.13.27.40;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.14.13.06.38;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.09.16.16.00;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.08.17.15.48;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.06.14.31.00;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.06.11.00.20;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.31.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.26.13.36.42;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.16.50.57;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	;

1.57.2.1
date	2006.09.05.17.49.03;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.65
log
@migrate node label edit part to xpand templates
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.codegen.gmfgen.util.*;

public class NodeLabelEditPartGenerator
{
  protected static String nl;
  public static synchronized NodeLabelEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NodeLabelEditPartGenerator result = new NodeLabelEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.Request;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.editpolicies.NonResizableEditPolicy;" + NL + "import org.eclipse.gef.handles.NonResizableHandleKit;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " implements ITextAwareEditPart {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_14 = " parser;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_15 = " parserElements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_16 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {" + NL + "" + NL + "\t\t\tprotected List createSelectionHandles() {" + NL + "\t\t\t\tList handles = new ArrayList();" + NL + "\t\t\t\tNonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);" + NL + "\t\t\t\treturn handles;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic Command getCommand(Request request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic boolean understandsRequest(Request request) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_19 = "\", new ";
  protected final String TEXT_20 = "()); //$NON-NLS-1$";
  protected final String TEXT_21 = NL + "\t}" + NL;
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelTextHelper(";
  protected final String TEXT_24 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_25 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_26 = ") figure).getText();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_27 = ") figure).getText();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelTextHelper(";
  protected final String TEXT_28 = " figure, String text) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_29 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_30 = ") figure).setText(text);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_31 = ") figure).setText(text);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIconHelper(";
  protected final String TEXT_32 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_33 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_34 = ") figure).getIcon();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_35 = ") figure).getIcon();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelIconHelper(";
  protected final String TEXT_36 = " figure, Image icon) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_37 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_38 = ") figure).setIcon(icon);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_39 = ") figure).setIcon(icon);" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_41 = "(";
  protected final String TEXT_42 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = getLabelTextHelper(figure);" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_43 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_44 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_45 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getParserElement() {" + NL + "\t\t";
  protected final String TEXT_46 = " element = resolveSemanticElement();" + NL + "\t\treturn element != null ? element : (";
  protected final String TEXT_47 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_48 = " getLabelIcon() {";
  protected final String TEXT_49 = NL + "\t\tEObject parserElement = getParserElement();" + NL + "\t\tif (parserElement == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_50 = ".getImage(parserElement.eClass());";
  protected final String TEXT_51 = NL + "\t\treturn null;";
  protected final String TEXT_52 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = null;" + NL + "\t\tif (getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_53 = "(getParserElement())," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_55 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\tif (getParser() == null) {" + NL + "\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_56 = "(getParserElement())," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_57 = NL + "\t\treturn getParser() != null;";
  protected final String TEXT_58 = NL + "\t\treturn false;";
  protected final String TEXT_59 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_60 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_61 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_62 = " element = getParserElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_63 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_64 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_65 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_66 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_67 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_68 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_69 = " getCompletionProcessor() {" + NL + "\t\tif (getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_70 = "(getParserElement()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_71 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_72 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_73 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint =";
  protected final String TEXT_74 = NL + "\t\t\t\t";
  protected final String TEXT_75 = ".DESCRIPTION;";
  protected final String TEXT_76 = NL + "\t\t\t\t((";
  protected final String TEXT_77 = ") getModel()).getType();";
  protected final String TEXT_78 = NL + "\t\t\t";
  protected final String TEXT_79 = " hintAdapter =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_80 = "(getParserElement(), parserHint) {" + NL + "" + NL + "\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_81 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_82 = ".";
  protected final String TEXT_83 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tparser = ";
  protected final String TEXT_84 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_85 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_86 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_87 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_88 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_89 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_90 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_91 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_92 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_93 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_94 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_95 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_96 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_97 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_98 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_99 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_100 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_101 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_102 = NL + "\t\trefreshBounds();";
  protected final String TEXT_103 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_104 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_105 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_106 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_107 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_108 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_109 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_110 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_111 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_112 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_113 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_114 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_115 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_116 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_117 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_118 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_119 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t";
  protected final String TEXT_120 = " fontData = new ";
  protected final String TEXT_121 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_122 = ".BOLD : ";
  protected final String TEXT_123 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_124 = ".ITALIC : ";
  protected final String TEXT_125 = ".NORMAL));" + NL + "\t\t\tsetFont(fontData);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_126 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_127 = ") {" + NL + "\t\t\t";
  protected final String TEXT_128 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_129 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_130 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_131 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_132 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_133 = " getFontStyleOwnerView() {";
  protected final String TEXT_134 = NL + "\t\treturn (";
  protected final String TEXT_135 = ")getModel();";
  protected final String TEXT_136 = NL + "\t\treturn getPrimaryView();";
  protected final String TEXT_137 = NL + "\t }" + NL + "\t";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_140 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_141 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_142 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_143 = " size = new ";
  protected final String TEXT_144 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_145 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_146 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_147 = " loc = new ";
  protected final String TEXT_148 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_149 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_150 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_151 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = NL + "\t\tif (";
  protected final String TEXT_154 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_155 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_156 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_158 = NL;
  protected final String TEXT_159 = "\t\tif (";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_161 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_163 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_168 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_169 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_170 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_171 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = "\t\tif (";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_175 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_177 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_179 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_180 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_181 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_182 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_183 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_184 = NL;
  protected final String TEXT_185 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_186 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_187 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_188 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_189 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_190 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_191 = " createFigurePrim() {";
  protected final String TEXT_192 = NL + "\t\treturn new ";
  protected final String TEXT_193 = "();";
  protected final String TEXT_194 = NL + "\t\treturn ";
  protected final String TEXT_195 = ";";
  protected final String TEXT_196 = NL + "\t\treturn new ";
  protected final String TEXT_197 = "();";
  protected final String TEXT_198 = NL + "\t}" + NL;
  protected final String TEXT_199 = NL;
  protected final String TEXT_200 = NL + "}";
  protected final String TEXT_201 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenNodeLabel genLabel = (GenNodeLabel) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenCommonBase genHost = genLabel.getNode();
GenDiagram genDiagram = genLabel.getDiagram();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
if (genLabel.getViewmap() instanceof InnerClassViewmap) {
	importManager.registerInnerClass(((InnerClassViewmap) genLabel.getViewmap()).getClassName());
}
importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_5);
    stringBuffer.append(genLabel.getEditPartClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart"));
    stringBuffer.append(TEXT_7);
    {	GenCommonBase genCommonBase = genLabel;
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(genLabel.getEditPartClassName());
    stringBuffer.append(TEXT_16);
    {	GenCommonBase genCommonBase = genLabel;
    stringBuffer.append(TEXT_17);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_18);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    }
    }
    stringBuffer.append(TEXT_21);
    
final boolean needsRefreshBounds = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genLabel.getNode());
final boolean readOnly = genLabel.isReadOnly();
final boolean useElementIcon = genLabel.isElementIcon();
final boolean designLabel = genLabel.getModelFacet() instanceof DesignLabelModelFacet;

    stringBuffer.append(TEXT_22);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_39);
    
String labelSetterName = "setLabel"; // same assumption in NodeEditPart
String labelFigureClassName = "org.eclipse.draw2d.IFigure";
if (genLabel.getViewmap() instanceof ParentAssignedViewmap) {
	ParentAssignedViewmap viewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	if (viewmap.getSetterName() != null) {
		labelSetterName = viewmap.getSetterName();
	}
	if (viewmap.getFigureQualifiedClassName() != null) {
		labelFigureClassName = viewmap.getFigureQualifiedClassName();
	}
} // FIXME perhaps, there's no sense to have setLabel for any other viewmap than ParentAssigned?

    stringBuffer.append(TEXT_40);
    stringBuffer.append(labelSetterName);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(labelFigureClassName));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_48);
    if (useElementIcon) {
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_50);
    } else {
    stringBuffer.append(TEXT_51);
    }
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_56);
    if (!readOnly) {
    stringBuffer.append(TEXT_57);
    } else {
    stringBuffer.append(TEXT_58);
    }
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
    stringBuffer.append(TEXT_73);
    if (designLabel) {
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint"));
    stringBuffer.append(TEXT_75);
    } else {
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_77);
    }
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(genHost.getUniqueIdentifier());
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
    stringBuffer.append(TEXT_101);
    if (needsRefreshBounds) {
    stringBuffer.append(TEXT_102);
    }
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_133);
    
boolean fixedFont;
{ //namespace
Viewmap viewmap = genLabel.getViewmap();
StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
fixedFont = styleAttributes != null && styleAttributes.isFixedFont();
}
if (fixedFont) {

    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_135);
    
} else {

    stringBuffer.append(TEXT_136);
    
}

    stringBuffer.append(TEXT_137);
    stringBuffer.append(TEXT_138);
    stringBuffer.append(TEXT_139);
    if (needsRefreshBounds) {
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(TEXT_152);
     /* for handleNotificationEvent() method */ 
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
    stringBuffer.append(TEXT_169);
    } else {
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(TEXT_172);
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
    stringBuffer.append(TEXT_183);
    }
    stringBuffer.append(TEXT_184);
    if (genLabel.getViewmap() instanceof ParentAssignedViewmap) {
	final ParentAssignedViewmap viewmap = (ParentAssignedViewmap) genLabel.getViewmap();
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_186);
    stringBuffer.append((viewmap.getSetterName() == null ? "setLabel" : viewmap.getSetterName()));
    stringBuffer.append(TEXT_187);
    } else { 
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_191);
    
String figureQualifiedClassName = null;
Viewmap viewmap = genLabel.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.Label";
	}

    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_193);
    } // instanceof FigureViewmap
 else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_194);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_195);
    } // instanceof SnippetViewmap; FIXME : obtain figure class name to generate getter
 else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();

    stringBuffer.append(TEXT_196);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_197);
    }
    stringBuffer.append(TEXT_198);
    if (genLabel.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_199);
    stringBuffer.append(((InnerClassViewmap) genLabel.getViewmap()).getClassBody());
    } /* if inner */
} /*else if !ParentAssignedViewmap */ 
    stringBuffer.append(TEXT_200);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_201);
    return stringBuffer.toString();
  }
}
@


1.64
log
@[166780] NPE while editing design label
@
text
@@


1.63
log
@[156362] Dispose images created in generated edit parts
@
text
@d75 1
a75 1
  protected final String TEXT_57 = NL + "\t\treturn getEditText() != null;";
@


1.62
log
@#161380 move readOnly back to GenLabel
@
text
@d67 152
a218 152
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_51 = ".getInstance().getItemImageDescriptor(getParserElement());" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_52 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();";
  protected final String TEXT_53 = NL + "\t\treturn null;";
  protected final String TEXT_54 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = null;" + NL + "\t\tif (getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_55 = "(getParserElement())," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_57 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\tif (getParser() == null) {" + NL + "\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_58 = "(getParserElement())," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_59 = NL + "\t\treturn getEditText() != null;";
  protected final String TEXT_60 = NL + "\t\treturn false;";
  protected final String TEXT_61 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_62 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_63 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_64 = " element = getParserElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_65 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_67 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_68 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_69 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_70 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_71 = " getCompletionProcessor() {" + NL + "\t\tif (getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_72 = "(getParserElement()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_73 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_74 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_75 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint =";
  protected final String TEXT_76 = NL + "\t\t\t\t";
  protected final String TEXT_77 = ".DESCRIPTION;";
  protected final String TEXT_78 = NL + "\t\t\t\t((";
  protected final String TEXT_79 = ") getModel()).getType();";
  protected final String TEXT_80 = NL + "\t\t\t";
  protected final String TEXT_81 = " hintAdapter =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_82 = "(getParserElement(), parserHint) {" + NL + "" + NL + "\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_83 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_84 = ".";
  protected final String TEXT_85 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tparser = ";
  protected final String TEXT_86 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_87 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_88 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_89 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_90 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_91 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_92 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_93 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_94 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_96 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_97 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_98 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_99 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_100 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_101 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_102 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_103 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_104 = NL + "\t\trefreshBounds();";
  protected final String TEXT_105 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_106 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_108 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_109 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_110 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_111 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_112 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_113 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_114 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_115 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_116 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_117 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_118 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_119 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_120 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_121 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t";
  protected final String TEXT_122 = " fontData = new ";
  protected final String TEXT_123 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_124 = ".BOLD : ";
  protected final String TEXT_125 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_126 = ".ITALIC : ";
  protected final String TEXT_127 = ".NORMAL));" + NL + "\t\t\tsetFont(fontData);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_128 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_129 = ") {" + NL + "\t\t\t";
  protected final String TEXT_130 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_131 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_132 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_133 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_134 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_135 = " getFontStyleOwnerView() {";
  protected final String TEXT_136 = NL + "\t\treturn (";
  protected final String TEXT_137 = ")getModel();";
  protected final String TEXT_138 = NL + "\t\treturn getPrimaryView();";
  protected final String TEXT_139 = NL + "\t }" + NL + "\t";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_142 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_143 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_144 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_145 = " size = new ";
  protected final String TEXT_146 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_147 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_148 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_149 = " loc = new ";
  protected final String TEXT_150 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_151 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_152 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_153 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_154 = NL;
  protected final String TEXT_155 = NL + "\t\tif (";
  protected final String TEXT_156 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_158 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_159 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_160 = NL;
  protected final String TEXT_161 = "\t\tif (";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_163 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_170 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_171 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_172 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_173 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_174 = NL;
  protected final String TEXT_175 = "\t\tif (";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_177 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_179 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_180 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_181 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_182 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_183 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_184 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_185 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_188 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_189 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_190 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_191 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_192 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_193 = " createFigurePrim() {";
  protected final String TEXT_194 = NL + "\t\treturn new ";
  protected final String TEXT_195 = "();";
  protected final String TEXT_196 = NL + "\t\treturn ";
  protected final String TEXT_197 = ";";
  protected final String TEXT_198 = NL + "\t\treturn new ";
  protected final String TEXT_199 = "();";
  protected final String TEXT_200 = NL + "\t}" + NL;
a219 2
  protected final String TEXT_202 = NL + "}";
  protected final String TEXT_203 = NL;
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d359 1
a359 1
    } else {
d361 1
a361 1
    }
d363 2
a365 2
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d371 1
a371 1
    if (!readOnly) {
d373 1
a373 1
    } else {
d375 1
a375 1
    }
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d391 2
a393 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d405 1
a405 1
    if (designLabel) {
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.CommonParserHint"));
d409 1
a409 1
    } else {
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d413 1
a413 1
    }
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d423 1
a423 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d445 1
a445 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d447 1
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d461 1
a461 1
    if (needsRefreshBounds) {
d463 1
a463 1
    }
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
a520 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_135);
d530 1
a530 1
    stringBuffer.append(TEXT_136);
d532 1
a532 1
    stringBuffer.append(TEXT_137);
d536 1
a536 1
    stringBuffer.append(TEXT_138);
d540 2
d543 1
d545 1
d547 1
a547 1
    if (needsRefreshBounds) {
d549 1
a549 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d551 2
a553 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d555 1
a555 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d557 1
a557 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d559 1
a559 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d561 1
a561 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d563 1
a563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d565 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d570 1
d572 1
a572 1
     /* for handleNotificationEvent() method */ 
a577 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d579 1
a580 1
    stringBuffer.append(TEXT_159);
d582 1
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a603 1
    } else {
a604 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d606 1
d608 1
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d624 1
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d628 2
a629 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d631 1
a631 1
    }
d633 1
a633 2
    if (genLabel.getViewmap() instanceof ParentAssignedViewmap) {
	final ParentAssignedViewmap viewmap = (ParentAssignedViewmap) genLabel.getViewmap();
d635 2
a637 2
    stringBuffer.append(TEXT_188);
    stringBuffer.append((viewmap.getSetterName() == null ? "setLabel" : viewmap.getSetterName()));
d639 1
a639 1
    } else { 
a642 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_193);
d652 1
a652 1
    stringBuffer.append(TEXT_194);
d654 1
a654 1
    stringBuffer.append(TEXT_195);
d657 1
a657 1
    stringBuffer.append(TEXT_196);
d659 1
a659 1
    stringBuffer.append(TEXT_197);
d664 1
a664 1
    stringBuffer.append(TEXT_198);
d666 1
a666 1
    stringBuffer.append(TEXT_199);
d668 1
a668 1
    stringBuffer.append(TEXT_200);
d670 1
a670 1
    stringBuffer.append(TEXT_201);
d674 1
a674 1
    stringBuffer.append(TEXT_202);
d676 1
a676 1
    stringBuffer.append(TEXT_203);
@


1.61
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d285 1
a285 1
final boolean readOnly = genLabel.getModelFacet() != null && genLabel.getModelFacet().isReadOnly();
@


1.60
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d285 1
a285 1
final boolean readOnly = genLabel.isReadOnly();
@


1.59
log
@#149041 Do not allow to drag inner node labels over diagram surface
@
text
@d273 1
a273 2
for (java.util.Iterator it = genCommonBase.getCustomBehaviour().iterator(); it.hasNext();) {
	CustomBehaviour behaviour = (CustomBehaviour) it.next();
@


1.58
log
@add custom behaviour
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d34 1
a34 1
  protected final String TEXT_16 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());";
@


1.57
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d34 1
a34 1
  protected final String TEXT_16 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t}" + NL;
d36 89
a124 89
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelTextHelper(";
  protected final String TEXT_19 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_20 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_21 = ") figure).getText();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_22 = ") figure).getText();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelTextHelper(";
  protected final String TEXT_23 = " figure, String text) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_24 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_25 = ") figure).setText(text);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_26 = ") figure).setText(text);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIconHelper(";
  protected final String TEXT_27 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_28 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_29 = ") figure).getIcon();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_30 = ") figure).getIcon();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelIconHelper(";
  protected final String TEXT_31 = " figure, Image icon) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_32 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_33 = ") figure).setIcon(icon);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_34 = ") figure).setIcon(icon);" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void ";
  protected final String TEXT_36 = "(";
  protected final String TEXT_37 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = getLabelTextHelper(figure);" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_38 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_39 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_40 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getParserElement() {" + NL + "\t\t";
  protected final String TEXT_41 = " element = resolveSemanticElement();" + NL + "\t\treturn element != null ? element : (";
  protected final String TEXT_42 = ") getModel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_43 = " getLabelIcon() {";
  protected final String TEXT_44 = NL + "\t\t";
  protected final String TEXT_45 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_46 = ".getInstance().getItemImageDescriptor(getParserElement());" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_47 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();";
  protected final String TEXT_48 = NL + "\t\treturn null;";
  protected final String TEXT_49 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = null;" + NL + "\t\tif (getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_50 = "(getParserElement())," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_51 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_52 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\tif (getParser() == null) {" + NL + "\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_53 = "(getParserElement())," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_54 = NL + "\t\treturn getEditText() != null;";
  protected final String TEXT_55 = NL + "\t\treturn false;";
  protected final String TEXT_56 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_57 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_58 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_59 = " element = getParserElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_60 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_61 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_62 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_63 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_64 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_65 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_66 = " getCompletionProcessor() {" + NL + "\t\tif (getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_67 = "(getParserElement()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_68 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_69 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_70 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint =";
  protected final String TEXT_71 = NL + "\t\t\t\t";
  protected final String TEXT_72 = ".DESCRIPTION;";
  protected final String TEXT_73 = NL + "\t\t\t\t((";
  protected final String TEXT_74 = ") getModel()).getType();";
  protected final String TEXT_75 = NL + "\t\t\t";
  protected final String TEXT_76 = " hintAdapter =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_77 = "(getParserElement(), parserHint) {" + NL + "" + NL + "\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_78 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_79 = ".";
  protected final String TEXT_80 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tparser = ";
  protected final String TEXT_81 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_82 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_83 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_84 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_85 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_86 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_87 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_88 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_89 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_91 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_92 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_93 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_94 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_95 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_96 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_97 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_98 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_99 = NL + "\t\trefreshBounds();";
  protected final String TEXT_100 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_101 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_102 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_103 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_104 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_105 = ") getFontStyleOwnerView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_106 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
d126 1
a126 1
  protected final String TEXT_108 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
d131 1
a131 1
  protected final String TEXT_113 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
d134 88
a221 83
  protected final String TEXT_116 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t";
  protected final String TEXT_117 = " fontData = new ";
  protected final String TEXT_118 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_119 = ".BOLD : ";
  protected final String TEXT_120 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_121 = ".ITALIC : ";
  protected final String TEXT_122 = ".NORMAL));" + NL + "\t\t\tsetFont(fontData);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_123 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_124 = ") {" + NL + "\t\t\t";
  protected final String TEXT_125 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_126 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_127 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_128 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_129 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_130 = " getFontStyleOwnerView() {";
  protected final String TEXT_131 = NL + "\t\treturn (";
  protected final String TEXT_132 = ")getModel();";
  protected final String TEXT_133 = NL + "\t\treturn getPrimaryView();";
  protected final String TEXT_134 = NL + "\t }" + NL + "\t";
  protected final String TEXT_135 = NL;
  protected final String TEXT_136 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_137 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_138 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_139 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_140 = " size = new ";
  protected final String TEXT_141 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_142 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_143 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_144 = " loc = new ";
  protected final String TEXT_145 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_146 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_147 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_148 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = NL + "\t\tif (";
  protected final String TEXT_151 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_152 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_153 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_154 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_155 = NL;
  protected final String TEXT_156 = "\t\tif (";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_158 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_163 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_165 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_166 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_167 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_168 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_169 = NL;
  protected final String TEXT_170 = "\t\tif (";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_172 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_177 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_178 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_179 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_180 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_181 = NL;
  protected final String TEXT_182 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_183 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_184 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_185 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_186 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_187 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_188 = " createFigurePrim() {";
  protected final String TEXT_189 = NL + "\t\treturn new ";
  protected final String TEXT_190 = "();";
  protected final String TEXT_191 = NL + "\t\treturn ";
  protected final String TEXT_192 = ";";
  protected final String TEXT_193 = NL + "\t\treturn new ";
  protected final String TEXT_194 = "();";
  protected final String TEXT_195 = NL + "\t}" + NL;
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = NL + "}";
  protected final String TEXT_198 = NL;
d245 1
a245 1
importManager.registerInnerClass(((InnerClassViewmap) genLabel.getViewmap()).getClassName());
d248 1
d254 1
a254 2
    {
GenCommonBase genCommonBase = genLabel;
d270 14
d290 2
a291 2
    stringBuffer.append(TEXT_17);
    stringBuffer.append(TEXT_18);
d293 1
a293 1
    stringBuffer.append(TEXT_19);
d295 1
a295 1
    stringBuffer.append(TEXT_20);
d297 1
a297 1
    stringBuffer.append(TEXT_21);
d299 1
a299 1
    stringBuffer.append(TEXT_22);
d301 1
a301 1
    stringBuffer.append(TEXT_23);
d303 1
a303 1
    stringBuffer.append(TEXT_24);
d305 1
a305 1
    stringBuffer.append(TEXT_25);
d307 1
a307 1
    stringBuffer.append(TEXT_26);
d309 1
a309 1
    stringBuffer.append(TEXT_27);
d311 1
a311 1
    stringBuffer.append(TEXT_28);
d313 1
a313 1
    stringBuffer.append(TEXT_29);
d315 1
a315 1
    stringBuffer.append(TEXT_30);
d317 1
a317 1
    stringBuffer.append(TEXT_31);
d319 1
a319 1
    stringBuffer.append(TEXT_32);
d321 1
a321 1
    stringBuffer.append(TEXT_33);
d323 1
a323 1
    stringBuffer.append(TEXT_34);
d337 1
a337 1
    stringBuffer.append(TEXT_35);
d339 1
a339 1
    stringBuffer.append(TEXT_36);
d341 1
a341 1
    stringBuffer.append(TEXT_37);
d343 1
a343 1
    stringBuffer.append(TEXT_38);
d345 1
a345 1
    stringBuffer.append(TEXT_39);
d347 1
a347 1
    stringBuffer.append(TEXT_40);
d349 1
a349 1
    stringBuffer.append(TEXT_41);
d351 1
a351 1
    stringBuffer.append(TEXT_42);
d353 1
a353 1
    stringBuffer.append(TEXT_43);
d355 1
a355 1
    stringBuffer.append(TEXT_44);
d357 1
a357 1
    stringBuffer.append(TEXT_45);
d359 1
a359 1
    stringBuffer.append(TEXT_46);
d361 1
a361 1
    stringBuffer.append(TEXT_47);
d363 1
a363 1
    stringBuffer.append(TEXT_48);
d365 1
a365 1
    stringBuffer.append(TEXT_49);
d367 1
a367 1
    stringBuffer.append(TEXT_50);
d369 1
a369 1
    stringBuffer.append(TEXT_51);
d371 1
a371 1
    stringBuffer.append(TEXT_52);
d373 1
a373 1
    stringBuffer.append(TEXT_53);
d375 1
a375 1
    stringBuffer.append(TEXT_54);
d377 1
a377 1
    stringBuffer.append(TEXT_55);
d379 1
a379 1
    stringBuffer.append(TEXT_56);
d381 1
a381 1
    stringBuffer.append(TEXT_57);
d383 1
a383 1
    stringBuffer.append(TEXT_58);
d385 1
a385 1
    stringBuffer.append(TEXT_59);
d387 1
a387 1
    stringBuffer.append(TEXT_60);
d389 1
a389 1
    stringBuffer.append(TEXT_61);
d391 1
a391 1
    stringBuffer.append(TEXT_62);
d393 1
a393 1
    stringBuffer.append(TEXT_63);
d395 1
a395 1
    stringBuffer.append(TEXT_64);
d397 1
a397 1
    stringBuffer.append(TEXT_65);
d399 1
a399 1
    stringBuffer.append(TEXT_66);
d401 1
a401 1
    stringBuffer.append(TEXT_67);
d403 1
a403 1
    stringBuffer.append(TEXT_68);
d405 1
a405 1
    stringBuffer.append(TEXT_69);
d407 1
a407 1
    stringBuffer.append(TEXT_70);
d409 1
a409 1
    stringBuffer.append(TEXT_71);
d411 1
a411 1
    stringBuffer.append(TEXT_72);
d413 1
a413 1
    stringBuffer.append(TEXT_73);
d415 1
a415 1
    stringBuffer.append(TEXT_74);
d417 1
a417 1
    stringBuffer.append(TEXT_75);
d419 1
a419 1
    stringBuffer.append(TEXT_76);
d421 1
a421 1
    stringBuffer.append(TEXT_77);
d423 1
a423 1
    stringBuffer.append(TEXT_78);
d425 1
a425 1
    stringBuffer.append(TEXT_79);
d427 1
a427 1
    stringBuffer.append(TEXT_80);
d429 1
a429 9
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_85);
a430 2
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d436 1
a436 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d442 1
a442 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d444 1
a444 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d446 1
a446 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d450 1
a450 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d452 1
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d454 1
a454 1
    if (needsRefreshBounds) {
d456 1
a456 1
    }
d458 1
a458 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d462 1
a462 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d472 1
a472 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d490 10
d501 1
a501 1
    stringBuffer.append(TEXT_117);
d503 1
a503 1
    stringBuffer.append(TEXT_118);
d505 1
a505 1
    stringBuffer.append(TEXT_119);
d507 1
a507 1
    stringBuffer.append(TEXT_120);
d509 1
a509 1
    stringBuffer.append(TEXT_121);
d511 1
a511 1
    stringBuffer.append(TEXT_122);
d513 1
a513 1
    stringBuffer.append(TEXT_123);
d515 1
a515 1
    stringBuffer.append(TEXT_124);
d517 1
a517 1
    stringBuffer.append(TEXT_125);
d519 1
a519 1
    stringBuffer.append(TEXT_126);
d521 1
a521 1
    stringBuffer.append(TEXT_127);
d523 1
a523 1
    stringBuffer.append(TEXT_128);
d525 1
a525 1
    stringBuffer.append(TEXT_129);
d527 1
a527 1
    stringBuffer.append(TEXT_130);
d537 1
a537 1
    stringBuffer.append(TEXT_131);
d539 1
a539 1
    stringBuffer.append(TEXT_132);
d543 1
a543 1
    stringBuffer.append(TEXT_133);
a546 8
    stringBuffer.append(TEXT_134);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(TEXT_136);
    if (needsRefreshBounds) {
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a547 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
a548 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d554 1
a554 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d564 1
d566 1
a566 1
     /* for handleNotificationEvent() method */ 
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a573 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d575 1
d577 1
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a584 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a585 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d593 1
a593 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d595 1
a595 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d597 1
a597 1
    } else {
d599 1
a599 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d601 1
d603 1
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d607 1
a607 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a611 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d615 1
a615 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d619 10
d630 1
a630 1
    stringBuffer.append(TEXT_179);
d632 1
a632 1
    stringBuffer.append(TEXT_180);
d634 1
a634 1
    stringBuffer.append(TEXT_181);
d637 1
a637 1
    stringBuffer.append(TEXT_182);
d639 1
a639 1
    stringBuffer.append(TEXT_183);
d641 1
a641 1
    stringBuffer.append(TEXT_184);
d643 1
a643 1
    stringBuffer.append(TEXT_185);
d645 1
a645 1
    stringBuffer.append(TEXT_186);
d647 1
a647 1
    stringBuffer.append(TEXT_187);
d649 1
a649 1
    stringBuffer.append(TEXT_188);
d659 1
a659 1
    stringBuffer.append(TEXT_189);
d661 1
a661 1
    stringBuffer.append(TEXT_190);
d664 1
a664 1
    stringBuffer.append(TEXT_191);
d666 1
a666 1
    stringBuffer.append(TEXT_192);
d671 1
a671 1
    stringBuffer.append(TEXT_193);
d673 1
a673 1
    stringBuffer.append(TEXT_194);
d675 1
a675 1
    stringBuffer.append(TEXT_195);
d677 1
a677 1
    stringBuffer.append(TEXT_196);
d681 1
a681 1
    stringBuffer.append(TEXT_197);
d683 1
a683 1
    stringBuffer.append(TEXT_198);
@


1.57.2.1
log
@#149041 Do not allow to drag inner node labels over diagram surface
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.Request;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.editpolicies.NonResizableEditPolicy;" + NL + "import org.eclipse.gef.handles.NonResizableHandleKit;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d34 1
a34 1
  protected final String TEXT_16 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, new NonResizableEditPolicy() {" + NL + "" + NL + "\t\t\tprotected List createSelectionHandles() {" + NL + "\t\t\t\tList handles = new ArrayList();" + NL + "\t\t\t\tNonResizableHandleKit.addMoveHandle((GraphicalEditPart) getHost(), handles);" + NL + "\t\t\t\treturn handles;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic Command getCommand(Request request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic boolean understandsRequest(Request request) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL;
@


1.56
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d123 1
a123 1
  protected final String TEXT_105 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
d128 1
a128 1
  protected final String TEXT_110 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
d133 3
a135 3
  protected final String TEXT_115 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_116 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_117 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
d140 74
a213 74
  protected final String TEXT_122 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_123 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_124 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_125 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_126 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_127 = ") {" + NL + "\t\t\t";
  protected final String TEXT_128 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_129 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_130 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_131 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_132 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_133 = NL;
  protected final String TEXT_134 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_135 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_136 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_137 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_138 = " size = new ";
  protected final String TEXT_139 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_140 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_141 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_142 = " loc = new ";
  protected final String TEXT_143 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_144 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_145 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_146 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = NL + "\t\tif (";
  protected final String TEXT_149 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_150 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_151 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_152 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_153 = NL;
  protected final String TEXT_154 = "\t\tif (";
  protected final String TEXT_155 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_156 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_163 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_164 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_165 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_166 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = "\t\tif (";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_170 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_176 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_177 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_178 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_182 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_183 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_184 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_185 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_186 = " createFigurePrim() {";
  protected final String TEXT_187 = NL + "\t\treturn new ";
  protected final String TEXT_188 = "();";
  protected final String TEXT_189 = NL + "\t\treturn ";
  protected final String TEXT_190 = ";";
  protected final String TEXT_191 = NL + "\t\treturn new ";
  protected final String TEXT_192 = "();";
  protected final String TEXT_193 = NL + "\t}" + NL;
  protected final String TEXT_194 = NL;
  protected final String TEXT_195 = NL + "}";
d215 2
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d503 1
a503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d509 9
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d521 3
d525 3
a528 1
    if (needsRefreshBounds) {
a529 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d531 2
a533 2
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d535 2
a537 2
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d539 2
a541 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d543 2
a545 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d547 1
a547 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d549 1
a549 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d551 1
d553 1
a553 1
     /* for handleNotificationEvent() method */ 
a554 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d562 1
d564 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d582 2
a584 2
    stringBuffer.append(TEXT_164);
    } else {
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d588 1
d590 1
a591 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d606 4
d611 1
a611 1
    stringBuffer.append(TEXT_177);
d613 1
a613 1
    stringBuffer.append(TEXT_178);
d615 1
a615 1
    stringBuffer.append(TEXT_179);
d618 1
a618 1
    stringBuffer.append(TEXT_180);
d620 1
a620 1
    stringBuffer.append(TEXT_181);
d622 1
a622 1
    stringBuffer.append(TEXT_182);
d624 1
a624 1
    stringBuffer.append(TEXT_183);
d626 1
a626 1
    stringBuffer.append(TEXT_184);
d628 1
a628 1
    stringBuffer.append(TEXT_185);
d630 1
a630 1
    stringBuffer.append(TEXT_186);
d640 1
a640 1
    stringBuffer.append(TEXT_187);
d642 1
a642 1
    stringBuffer.append(TEXT_188);
d645 1
a645 1
    stringBuffer.append(TEXT_189);
d647 1
a647 1
    stringBuffer.append(TEXT_190);
d652 1
a652 1
    stringBuffer.append(TEXT_191);
d654 1
a654 1
    stringBuffer.append(TEXT_192);
d656 1
a656 1
    stringBuffer.append(TEXT_193);
d658 1
a658 1
    stringBuffer.append(TEXT_194);
d662 1
a662 1
    stringBuffer.append(TEXT_195);
d664 1
a664 1
    stringBuffer.append(TEXT_196);
@


1.55
log
@header comment should not be a javadoc comment
@
text
@d58 11
a68 11
  protected final String TEXT_40 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_41 = " getLabelIcon() {";
  protected final String TEXT_42 = NL + "\t\t";
  protected final String TEXT_43 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_44 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_45 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_46 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();";
  protected final String TEXT_47 = NL + "\t\treturn null;";
  protected final String TEXT_48 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_49 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_50 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
d70 145
a214 144
  protected final String TEXT_52 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_53 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_54 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_58 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_59 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_60 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_61 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_62 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_63 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_64 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_65 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_66 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_67 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_68 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_69 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_70 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_71 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_72 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_73 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_74 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_75 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_76 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_77 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_78 = ".";
  protected final String TEXT_79 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_80 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_81 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_82 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_83 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_84 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_85 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_86 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_87 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_88 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_89 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_90 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_91 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_92 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_93 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_94 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_95 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_96 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_97 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_98 = NL + "\t\trefreshBounds();";
  protected final String TEXT_99 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_100 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_101 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_102 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_103 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_104 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_105 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_106 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_107 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_108 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_109 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_110 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_111 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_112 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_113 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_114 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_115 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_116 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_117 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_118 = ".BOLD : ";
  protected final String TEXT_119 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_120 = ".ITALIC : ";
  protected final String TEXT_121 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_122 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_123 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_124 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_125 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_126 = ") {" + NL + "\t\t\t";
  protected final String TEXT_127 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_128 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_129 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_130 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_131 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_132 = NL;
  protected final String TEXT_133 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_134 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_135 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_136 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_137 = " size = new ";
  protected final String TEXT_138 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_139 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_140 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_141 = " loc = new ";
  protected final String TEXT_142 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_143 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_144 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_145 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = NL + "\t\tif (";
  protected final String TEXT_148 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_149 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_150 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_151 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = "\t\tif (";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_155 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_156 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_160 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_161 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_162 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_163 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_164 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_165 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = "\t\tif (";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_169 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_170 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_174 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_175 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_176 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_177 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_178 = NL;
  protected final String TEXT_179 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_180 = " createFigure() {" + NL + "\t\t// Parent should assign one using ";
  protected final String TEXT_181 = " method" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_182 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_183 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_184 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_185 = " createFigurePrim() {";
  protected final String TEXT_186 = NL + "\t\treturn new ";
  protected final String TEXT_187 = "();";
  protected final String TEXT_188 = NL + "\t\treturn ";
  protected final String TEXT_189 = ";";
  protected final String TEXT_190 = NL + "\t\treturn new ";
  protected final String TEXT_191 = "();";
  protected final String TEXT_192 = NL + "\t}" + NL;
  protected final String TEXT_193 = NL;
  protected final String TEXT_194 = NL + "}";
  protected final String TEXT_195 = NL;
d267 1
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d329 1
a329 1
    if (useElementIcon) {
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d333 2
d336 1
a336 1
    stringBuffer.append(TEXT_44);
d338 1
a338 1
    stringBuffer.append(TEXT_45);
d340 1
a340 1
    stringBuffer.append(TEXT_46);
d342 1
a342 1
    stringBuffer.append(TEXT_47);
a343 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d355 1
a355 1
    if (!readOnly) {
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d359 1
a359 1
    }
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d391 2
a393 2
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d399 2
d402 1
a402 1
    stringBuffer.append(TEXT_77);
d404 1
a404 1
    stringBuffer.append(TEXT_78);
d406 1
a406 1
    stringBuffer.append(TEXT_79);
d408 1
a408 1
    stringBuffer.append(TEXT_80);
a409 2
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d413 2
d416 1
a416 1
    stringBuffer.append(TEXT_84);
d418 1
a418 1
    stringBuffer.append(TEXT_85);
a419 2
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d441 2
d444 1
a444 1
    stringBuffer.append(TEXT_98);
d446 1
a446 1
    stringBuffer.append(TEXT_99);
a447 2
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d455 2
a457 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d465 2
a467 2
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d475 2
a477 2
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d489 2
d492 1
a492 1
    stringBuffer.append(TEXT_122);
d494 1
a494 1
    stringBuffer.append(TEXT_123);
d496 1
a496 1
    stringBuffer.append(TEXT_124);
d498 1
a498 1
    stringBuffer.append(TEXT_125);
d500 1
a500 1
    stringBuffer.append(TEXT_126);
d502 1
a502 1
    stringBuffer.append(TEXT_127);
d504 1
a504 1
    stringBuffer.append(TEXT_128);
d506 1
a506 1
    stringBuffer.append(TEXT_129);
d508 1
a508 1
    stringBuffer.append(TEXT_130);
a509 1
    stringBuffer.append(TEXT_131);
d512 1
a513 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d521 1
a521 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d529 2
d532 1
a532 1
    stringBuffer.append(TEXT_143);
d534 1
a534 1
    stringBuffer.append(TEXT_144);
a535 1
    stringBuffer.append(TEXT_145);
d537 1
a538 2
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d546 1
d549 1
d551 1
a551 1
    stringBuffer.append(TEXT_154);
a552 2
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d568 2
d571 1
a571 1
    stringBuffer.append(TEXT_164);
a572 1
    stringBuffer.append(TEXT_165);
d575 1
d577 1
a577 1
    stringBuffer.append(TEXT_168);
a578 2
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d594 2
d597 1
a597 1
    stringBuffer.append(TEXT_178);
d600 1
a600 1
    stringBuffer.append(TEXT_179);
d602 1
a602 1
    stringBuffer.append(TEXT_180);
d604 1
a604 1
    stringBuffer.append(TEXT_181);
a605 2
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d611 2
d622 1
a622 1
    stringBuffer.append(TEXT_186);
d624 1
a624 1
    stringBuffer.append(TEXT_187);
d627 1
a627 1
    stringBuffer.append(TEXT_188);
d629 1
a629 1
    stringBuffer.append(TEXT_189);
d634 1
a634 1
    stringBuffer.append(TEXT_190);
d636 1
a636 1
    stringBuffer.append(TEXT_191);
d638 1
a638 1
    stringBuffer.append(TEXT_192);
d640 1
a640 1
    stringBuffer.append(TEXT_193);
d644 1
a644 1
    stringBuffer.append(TEXT_194);
d646 1
a646 1
    stringBuffer.append(TEXT_195);
@


1.54
log
@fix some nls markers
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.53
log
@Correcting copyright processing
@
text
@d71 1
a71 1
  protected final String TEXT_53 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
@


1.52
log
@Do not generate unnecessary code, e.g. label figure, when parent gonna assign one.
Explicitly handle (and distinguish) figures assigned by parent (thus placed in predefined location inside parent) and those added as ordinary child figures
InnerClassViewmapProducer updated to guess uses of parent's sub-figure inside children. It's not really a InnerClassViewmapProducer and should be renamed to smth like GeneratingViewmapProducer
Tests updated to cover logic added to the producer
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d230 1
a230 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.51
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d52 162
a213 157
  protected final String TEXT_34 = ") figure).setIcon(icon);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_35 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = getLabelTextHelper(figure);" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_36 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_37 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_38 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " getLabelIcon() {";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_42 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_43 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_44 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();";
  protected final String TEXT_45 = NL + "\t\treturn null;";
  protected final String TEXT_46 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_47 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_48 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_49 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_50 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_51 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_52 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_56 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_57 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_58 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_59 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_61 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_62 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_63 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_64 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_65 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_66 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_67 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_68 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_69 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_70 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_71 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_72 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_73 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_74 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_75 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_76 = ".";
  protected final String TEXT_77 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_78 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_79 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_80 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_81 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_82 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_83 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_84 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_85 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_86 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_87 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_88 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_89 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_90 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_91 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_92 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_93 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_94 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_95 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_96 = NL + "\t\trefreshBounds();";
  protected final String TEXT_97 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_98 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_99 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_100 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_101 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_102 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_103 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_104 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_105 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_106 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_107 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_108 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_109 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_110 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_111 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_112 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_113 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_114 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_115 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_116 = ".BOLD : ";
  protected final String TEXT_117 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_118 = ".ITALIC : ";
  protected final String TEXT_119 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_120 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_121 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_122 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_123 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_124 = ") {" + NL + "\t\t\t";
  protected final String TEXT_125 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_126 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_127 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_128 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_129 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_132 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_133 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_134 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_135 = " size = new ";
  protected final String TEXT_136 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_137 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_138 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_139 = " loc = new ";
  protected final String TEXT_140 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_141 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_142 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_143 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = NL + "\t\tif (";
  protected final String TEXT_146 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_147 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_148 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_149 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = "\t\tif (";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_153 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_155 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_156 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_159 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_160 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_161 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_162 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_163 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_164 = NL;
  protected final String TEXT_165 = "\t\tif (";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_167 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_170 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_173 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_174 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_175 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_176 = NL;
  protected final String TEXT_177 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_178 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_179 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_180 = " createFigurePrim() {";
  protected final String TEXT_181 = NL + "\t\treturn new ";
  protected final String TEXT_182 = "();";
  protected final String TEXT_183 = NL + "\t\treturn ";
  protected final String TEXT_184 = ";";
  protected final String TEXT_185 = NL + "\t\treturn new ";
  protected final String TEXT_186 = "();";
  protected final String TEXT_187 = NL + "\t}" + NL;
  protected final String TEXT_188 = NL;
  protected final String TEXT_189 = NL + "}";
  protected final String TEXT_190 = NL;
d301 13
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d323 1
a323 1
    if (useElementIcon) {
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d333 1
a333 1
    } else {
d335 1
a335 1
    }
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d343 2
a345 2
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d349 1
a349 1
    if (!readOnly) {
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d353 1
a353 1
    }
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d357 2
a359 2
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d361 1
a361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d365 2
a367 2
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d381 2
a383 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d391 2
a393 2
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d397 1
a397 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d405 2
a407 2
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d423 2
a425 2
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d427 2
a429 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d435 1
a435 1
    if (needsRefreshBounds) {
d437 1
a437 1
    }
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d443 2
a445 2
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d447 2
a449 2
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d453 2
a455 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d457 2
a459 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d463 2
a465 2
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d467 2
a469 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d473 2
a475 2
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d503 1
d505 1
a506 1
    if (needsRefreshBounds) {
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d509 2
a511 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d513 2
a515 2
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d517 2
a519 2
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d521 2
a523 2
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d527 1
a527 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d529 1
d531 1
a531 1
     /* for handleNotificationEvent() method */ 
a532 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d540 1
d542 1
a543 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d548 1
a548 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d560 2
a562 2
    stringBuffer.append(TEXT_161);
    } else {
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d566 1
d568 1
a569 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d584 1
a584 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d586 2
a588 2
    stringBuffer.append(TEXT_175);
    }
d590 1
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d594 2
a595 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d599 10
d618 1
a618 1
    stringBuffer.append(TEXT_181);
d620 1
a620 1
    stringBuffer.append(TEXT_182);
d623 1
a623 1
    stringBuffer.append(TEXT_183);
d625 1
a625 1
    stringBuffer.append(TEXT_184);
d630 1
a630 1
    stringBuffer.append(TEXT_185);
d632 1
a632 1
    stringBuffer.append(TEXT_186);
d634 1
a634 1
    stringBuffer.append(TEXT_187);
d636 1
a636 1
    stringBuffer.append(TEXT_188);
d638 3
a640 2
    }
    stringBuffer.append(TEXT_189);
d642 1
a642 1
    stringBuffer.append(TEXT_190);
@


1.50
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 185
a208 184
  protected final String TEXT_6 = " extends CompartmentEditPart implements ITextAwareEditPart {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_12 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " parser;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_14 = " parserElements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t}" + NL;
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelTextHelper(";
  protected final String TEXT_18 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_20 = ") figure).getText();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_21 = ") figure).getText();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelTextHelper(";
  protected final String TEXT_22 = " figure, String text) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_24 = ") figure).setText(text);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_25 = ") figure).setText(text);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIconHelper(";
  protected final String TEXT_26 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_27 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_28 = ") figure).getIcon();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_29 = ") figure).getIcon();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelIconHelper(";
  protected final String TEXT_30 = " figure, Image icon) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_31 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_32 = ") figure).setIcon(icon);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_33 = ") figure).setIcon(icon);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_34 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = getLabelTextHelper(figure);" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_35 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_36 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_37 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_38 = " getLabelIcon() {";
  protected final String TEXT_39 = NL + "\t\t";
  protected final String TEXT_40 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_41 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_42 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_43 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();";
  protected final String TEXT_44 = NL + "\t\treturn null;";
  protected final String TEXT_45 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_46 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_47 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_48 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_49 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_50 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_51 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_55 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_56 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_57 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_58 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_59 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_60 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_61 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_62 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_63 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_64 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_65 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_66 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_67 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_68 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_69 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_70 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_71 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_72 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_73 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_74 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_75 = ".";
  protected final String TEXT_76 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_77 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_78 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_79 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_80 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_81 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_82 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_83 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_84 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_85 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_86 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_87 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_88 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_89 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_90 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_91 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_92 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_93 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_94 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_95 = NL + "\t\trefreshBounds();";
  protected final String TEXT_96 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_97 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_98 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_99 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_100 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_101 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_102 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_104 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_105 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_106 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_107 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_108 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_109 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_110 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_111 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_112 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_113 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_114 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_115 = ".BOLD : ";
  protected final String TEXT_116 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_117 = ".ITALIC : ";
  protected final String TEXT_118 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_119 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_120 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_121 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_122 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_123 = ") {" + NL + "\t\t\t";
  protected final String TEXT_124 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_125 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_126 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_127 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_128 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_131 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_132 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_133 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_134 = " size = new ";
  protected final String TEXT_135 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_136 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_137 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_138 = " loc = new ";
  protected final String TEXT_139 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_140 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_141 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_142 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = NL + "\t\tif (";
  protected final String TEXT_145 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_146 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_147 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_148 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_149 = NL;
  protected final String TEXT_150 = "\t\tif (";
  protected final String TEXT_151 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_152 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_155 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_156 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_158 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_159 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_160 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_161 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_162 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = "\t\tif (";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_166 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_170 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_172 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_173 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_174 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_175 = NL;
  protected final String TEXT_176 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_177 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_178 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_179 = " createFigurePrim() {";
  protected final String TEXT_180 = NL + "\t\treturn new ";
  protected final String TEXT_181 = "();";
  protected final String TEXT_182 = NL + "\t\treturn ";
  protected final String TEXT_183 = ";";
  protected final String TEXT_184 = NL + "\t\treturn new ";
  protected final String TEXT_185 = "();";
  protected final String TEXT_186 = NL + "\t}" + NL;
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = NL + "}";
  protected final String TEXT_189 = NL;
d238 2
a241 1
    stringBuffer.append(TEXT_7);
d243 1
d245 1
a245 1
    stringBuffer.append(TEXT_9);
a246 1
    stringBuffer.append(TEXT_10);
d248 1
d250 1
a250 1
    stringBuffer.append(TEXT_12);
d252 1
a252 1
    stringBuffer.append(TEXT_13);
d254 1
a254 1
    stringBuffer.append(TEXT_14);
d256 1
a256 1
    stringBuffer.append(TEXT_15);
a261 1
    stringBuffer.append(TEXT_16);
d263 1
a264 2
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d268 2
d271 1
a271 1
    stringBuffer.append(TEXT_21);
a272 2
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d276 2
d279 1
a279 1
    stringBuffer.append(TEXT_25);
a280 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d284 2
d287 1
a287 1
    stringBuffer.append(TEXT_29);
a288 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d292 2
d295 1
a295 1
    stringBuffer.append(TEXT_33);
d297 1
a297 1
    stringBuffer.append(TEXT_34);
d299 1
a299 1
    stringBuffer.append(TEXT_35);
d301 1
a301 1
    stringBuffer.append(TEXT_36);
d303 1
a303 1
    stringBuffer.append(TEXT_37);
d305 1
a305 1
    stringBuffer.append(TEXT_38);
d307 1
a307 1
    stringBuffer.append(TEXT_39);
d309 1
a309 1
    stringBuffer.append(TEXT_40);
d311 1
a311 1
    stringBuffer.append(TEXT_41);
d313 1
a313 1
    stringBuffer.append(TEXT_42);
d315 1
a315 1
    stringBuffer.append(TEXT_43);
d317 1
a317 1
    stringBuffer.append(TEXT_44);
d319 1
a319 1
    stringBuffer.append(TEXT_45);
d321 1
a321 1
    stringBuffer.append(TEXT_46);
a322 2
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d326 2
d329 1
a329 1
    stringBuffer.append(TEXT_50);
d331 1
a331 1
    stringBuffer.append(TEXT_51);
d333 1
a333 1
    stringBuffer.append(TEXT_52);
d335 1
a335 1
    stringBuffer.append(TEXT_53);
a336 2
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d340 2
d343 1
a343 1
    stringBuffer.append(TEXT_57);
a344 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d348 2
d351 1
a351 1
    stringBuffer.append(TEXT_61);
d353 1
a353 1
    stringBuffer.append(TEXT_62);
d355 1
a355 1
    stringBuffer.append(TEXT_63);
d357 1
a357 1
    stringBuffer.append(TEXT_64);
d359 1
a359 1
    stringBuffer.append(TEXT_65);
a360 2
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d364 2
d367 1
a367 1
    stringBuffer.append(TEXT_69);
d369 1
a369 1
    stringBuffer.append(TEXT_70);
a370 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d374 2
d377 1
a377 1
    stringBuffer.append(TEXT_74);
d379 1
a379 1
    stringBuffer.append(TEXT_75);
d381 1
a381 1
    stringBuffer.append(TEXT_76);
d383 1
a383 1
    stringBuffer.append(TEXT_77);
a384 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d388 2
d391 1
a391 1
    stringBuffer.append(TEXT_81);
d393 1
a393 1
    stringBuffer.append(TEXT_82);
a394 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d410 1
a410 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d416 2
d419 1
a419 1
    stringBuffer.append(TEXT_95);
d421 1
a421 1
    stringBuffer.append(TEXT_96);
a422 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d426 1
a426 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d430 2
a432 2
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d436 1
a436 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d440 2
a442 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d446 1
a446 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d450 2
a452 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d464 2
d467 1
a467 1
    stringBuffer.append(TEXT_119);
d469 1
a469 1
    stringBuffer.append(TEXT_120);
d471 1
a471 1
    stringBuffer.append(TEXT_121);
d473 1
a473 1
    stringBuffer.append(TEXT_122);
d475 1
a475 1
    stringBuffer.append(TEXT_123);
d477 1
a477 1
    stringBuffer.append(TEXT_124);
d479 1
a479 1
    stringBuffer.append(TEXT_125);
d481 1
a481 1
    stringBuffer.append(TEXT_126);
d483 1
a483 1
    stringBuffer.append(TEXT_127);
a484 1
    stringBuffer.append(TEXT_128);
d487 1
a488 2
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d504 2
d507 1
a507 1
    stringBuffer.append(TEXT_140);
d509 1
a509 1
    stringBuffer.append(TEXT_141);
a510 1
    stringBuffer.append(TEXT_142);
d512 1
a513 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d521 1
d524 1
d526 1
a526 1
    stringBuffer.append(TEXT_151);
a527 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d539 1
a539 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d543 2
d546 1
a546 1
    stringBuffer.append(TEXT_161);
a547 1
    stringBuffer.append(TEXT_162);
d550 1
d552 1
a552 1
    stringBuffer.append(TEXT_165);
a553 2
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d565 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d569 2
a571 1
    stringBuffer.append(TEXT_175);
a572 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d578 2
d589 1
a589 1
    stringBuffer.append(TEXT_180);
d591 1
a591 1
    stringBuffer.append(TEXT_181);
d594 1
a594 1
    stringBuffer.append(TEXT_182);
d596 1
a596 1
    stringBuffer.append(TEXT_183);
d601 1
a601 1
    stringBuffer.append(TEXT_184);
d603 1
a603 1
    stringBuffer.append(TEXT_185);
d605 1
a605 1
    stringBuffer.append(TEXT_186);
d607 1
a607 1
    stringBuffer.append(TEXT_187);
d610 1
a610 1
    stringBuffer.append(TEXT_188);
d612 1
a612 1
    stringBuffer.append(TEXT_189);
@


1.49
log
@#139127 Provide an option for labels to display node icon
@
text
@d213 2
a214 2
GenNodeLabel genLabel = (GenNodeLabel) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
@


1.48
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d35 173
a207 172
  protected final String TEXT_17 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_18 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_19 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_20 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_21 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_22 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelTextHelper(";
  protected final String TEXT_25 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_26 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_27 = ") figure).getText();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_28 = ") figure).getText();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelTextHelper(";
  protected final String TEXT_29 = " figure, String text) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_30 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_31 = ") figure).setText(text);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_32 = ") figure).setText(text);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIconHelper(";
  protected final String TEXT_33 = " figure) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_34 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_35 = ") figure).getIcon();" + NL + "\t\t} else {" + NL + "\t\t\treturn ((";
  protected final String TEXT_36 = ") figure).getIcon();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setLabelIconHelper(";
  protected final String TEXT_37 = " figure, Image icon) {" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_38 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_39 = ") figure).setIcon(icon);" + NL + "\t\t} else {" + NL + "\t\t\t((";
  protected final String TEXT_40 = ") figure).setIcon(icon);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_41 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = getLabelTextHelper(figure);" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_42 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_43 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_44 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_45 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_46 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tsetLabelTextHelper(getFigure(), text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_48 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_49 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_50 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_51 = NL + "\t\t";
  protected final String TEXT_52 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_53 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_54 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_55 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_56 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_57 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_58 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_59 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_60 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_61 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_62 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_63 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_64 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_65 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_66 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_67 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_68 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_69 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_70 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_71 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_72 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_73 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_74 = ".";
  protected final String TEXT_75 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_76 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_77 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_78 = "(this," + NL + "\t\t\t\t";
  protected final String TEXT_79 = ".getTextCellEditorClass(this)," + NL + "\t\t\t\t";
  protected final String TEXT_80 = ".getTextCellEditorLocator(this)));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_81 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_82 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_83 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_84 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_85 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_86 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_87 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_88 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_89 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_90 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_91 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_92 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_93 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_94 = NL + "\t\trefreshBounds();";
  protected final String TEXT_95 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_96 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_97 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_98 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_99 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_100 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_101 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_102 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_103 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_104 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_105 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_106 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_108 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_109 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_110 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_111 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_112 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_113 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_114 = ".BOLD : ";
  protected final String TEXT_115 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_116 = ".ITALIC : ";
  protected final String TEXT_117 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_118 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_119 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_120 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_121 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_122 = ") {" + NL + "\t\t\t";
  protected final String TEXT_123 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_124 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_125 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_126 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_127 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_128 = NL;
  protected final String TEXT_129 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_130 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_131 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_132 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_133 = " size = new ";
  protected final String TEXT_134 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_135 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_136 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_137 = " loc = new ";
  protected final String TEXT_138 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_139 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_140 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_141 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = NL + "\t\tif (";
  protected final String TEXT_144 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_145 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_146 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_147 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\t\tif (";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_151 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_155 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_156 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_158 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_159 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_160 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_161 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_162 = NL;
  protected final String TEXT_163 = "\t\tif (";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_165 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_170 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_171 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_172 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_173 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_174 = NL;
  protected final String TEXT_175 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_176 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_177 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_178 = " createFigurePrim() {";
  protected final String TEXT_179 = NL + "\t\treturn new ";
  protected final String TEXT_180 = "();";
  protected final String TEXT_181 = NL + "\t\treturn ";
  protected final String TEXT_182 = ";";
  protected final String TEXT_183 = NL + "\t\treturn new ";
  protected final String TEXT_184 = "();";
  protected final String TEXT_185 = NL + "\t}" + NL;
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = NL + "}";
  protected final String TEXT_188 = NL;
d257 1
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d271 1
d273 1
d275 2
a277 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d281 2
d284 1
a284 1
    stringBuffer.append(TEXT_28);
a285 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d289 2
d292 1
a292 1
    stringBuffer.append(TEXT_32);
a293 2
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d315 2
d318 1
a318 1
    stringBuffer.append(TEXT_45);
a319 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d323 2
d326 1
a326 1
    stringBuffer.append(TEXT_49);
d328 1
a328 1
    stringBuffer.append(TEXT_50);
d330 1
a330 1
    stringBuffer.append(TEXT_51);
d332 1
a332 1
    stringBuffer.append(TEXT_52);
a333 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d337 2
d340 1
a340 1
    stringBuffer.append(TEXT_56);
a341 2
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d345 2
d348 1
a348 1
    stringBuffer.append(TEXT_60);
d350 1
a350 1
    stringBuffer.append(TEXT_61);
d352 1
a352 1
    stringBuffer.append(TEXT_62);
d354 1
a354 1
    stringBuffer.append(TEXT_63);
d356 1
a356 1
    stringBuffer.append(TEXT_64);
a357 2
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d361 2
d364 1
a364 1
    stringBuffer.append(TEXT_68);
d366 1
a366 1
    stringBuffer.append(TEXT_69);
a367 2
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d371 2
d374 1
a374 1
    stringBuffer.append(TEXT_73);
d376 1
a376 1
    stringBuffer.append(TEXT_74);
d378 1
a378 1
    stringBuffer.append(TEXT_75);
d380 1
a380 1
    stringBuffer.append(TEXT_76);
a381 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d385 2
d388 1
a388 1
    stringBuffer.append(TEXT_80);
d390 1
a390 1
    stringBuffer.append(TEXT_81);
a391 2
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d413 2
d416 1
a416 1
    stringBuffer.append(TEXT_94);
d418 1
a418 1
    stringBuffer.append(TEXT_95);
a419 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d427 2
a429 2
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d437 2
a439 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d447 2
a449 2
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d461 2
d464 1
a464 1
    stringBuffer.append(TEXT_118);
d466 1
a466 1
    stringBuffer.append(TEXT_119);
d468 1
a468 1
    stringBuffer.append(TEXT_120);
d470 1
a470 1
    stringBuffer.append(TEXT_121);
d472 1
a472 1
    stringBuffer.append(TEXT_122);
d474 1
a474 1
    stringBuffer.append(TEXT_123);
d476 1
a476 1
    stringBuffer.append(TEXT_124);
d478 1
a478 1
    stringBuffer.append(TEXT_125);
d480 1
a480 1
    stringBuffer.append(TEXT_126);
a481 1
    stringBuffer.append(TEXT_127);
d484 1
a485 2
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d501 2
d504 1
a504 1
    stringBuffer.append(TEXT_139);
d506 1
a506 1
    stringBuffer.append(TEXT_140);
a507 1
    stringBuffer.append(TEXT_141);
d509 1
a510 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d518 1
d521 1
d523 1
a523 1
    stringBuffer.append(TEXT_150);
a524 2
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d540 2
d543 1
a543 1
    stringBuffer.append(TEXT_160);
a544 1
    stringBuffer.append(TEXT_161);
d547 1
d549 1
a549 1
    stringBuffer.append(TEXT_164);
a550 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d566 2
a568 1
    stringBuffer.append(TEXT_174);
a569 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d575 2
d586 1
a586 1
    stringBuffer.append(TEXT_179);
d588 1
a588 1
    stringBuffer.append(TEXT_180);
d591 1
a591 1
    stringBuffer.append(TEXT_181);
d593 1
a593 1
    stringBuffer.append(TEXT_182);
d598 1
a598 1
    stringBuffer.append(TEXT_183);
d600 1
a600 1
    stringBuffer.append(TEXT_184);
d602 1
a602 1
    stringBuffer.append(TEXT_185);
d604 1
a604 1
    stringBuffer.append(TEXT_186);
d607 1
a607 1
    stringBuffer.append(TEXT_187);
d609 1
a609 1
    stringBuffer.append(TEXT_188);
@


1.47
log
@#133836 Creating a child node without a label causes error
@
text
@d5 1
d254 1
a254 1
final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d479 1
a479 1
    if (!genLabel.getNode().isListLayout()) {
@


1.46
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d252 4
a255 1
    final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d322 1
a322 1
    if (!genLabel.isReadOnly()) {
@


1.45
log
@use correct cell editor locator for WrapLabels
@
text
@d25 2
a26 2
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String VISUAL_ID = \"";
  protected final String TEXT_9 = "\";";
@


1.44
log
@handle both Label and WrapLabel : continued further
@
text
@d95 108
a202 108
  protected final String TEXT_78 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_79 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_80 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_81 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_82 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_83 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_84 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_85 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_86 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_87 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_88 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_89 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_90 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_91 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_92 = NL + "\t\trefreshBounds();";
  protected final String TEXT_93 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tsetLabelTextHelper(getFigure(), getLabelText());" + NL + "\t\tsetLabelIconHelper(getFigure(), getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_94 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_96 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_97 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_98 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_99 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_100 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_101 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_102 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_103 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_104 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_105 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_106 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_107 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_108 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_109 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_110 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_111 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_112 = ".BOLD : ";
  protected final String TEXT_113 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_114 = ".ITALIC : ";
  protected final String TEXT_115 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_116 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_117 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_118 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_119 = " color) {" + NL + "\t\tgetFigure().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_120 = ") {" + NL + "\t\t\t";
  protected final String TEXT_121 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_122 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_123 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_124 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_125 = " e) {" + NL + "\t\t\t\t\te.result = getLabelTextHelper(getFigure());" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_128 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_129 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_130 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_131 = " size = new ";
  protected final String TEXT_132 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_133 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_134 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_135 = " loc = new ";
  protected final String TEXT_136 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_137 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_138 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_139 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = NL + "\t\tif (";
  protected final String TEXT_142 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_143 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_144 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_145 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = "\t\tif (";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_149 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_151 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_155 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_156 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_157 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_158 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_159 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_160 = NL;
  protected final String TEXT_161 = "\t\tif (";
  protected final String TEXT_162 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_163 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_164 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_165 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_166 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_167 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_168 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_169 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_170 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_171 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_174 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_175 = " label = createFigurePrim();" + NL + "\t\tdefaultText = getLabelTextHelper(label);" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_176 = " createFigurePrim() {";
  protected final String TEXT_177 = NL + "\t\treturn new ";
  protected final String TEXT_178 = "();";
  protected final String TEXT_179 = NL + "\t\treturn ";
  protected final String TEXT_180 = ";";
  protected final String TEXT_181 = NL + "\t\treturn new ";
  protected final String TEXT_182 = "();";
  protected final String TEXT_183 = NL + "\t}" + NL;
  protected final String TEXT_184 = NL;
  protected final String TEXT_185 = NL + "}";
d204 2
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d389 2
a391 2
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d393 2
a395 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d401 1
a401 1
    if (needsRefreshBounds) {
d403 1
a403 1
    }
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d409 2
a411 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d413 2
a415 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d419 2
a421 2
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d423 2
a425 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d429 2
a431 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d433 2
a435 2
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d439 2
a441 2
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d469 1
d471 1
a472 1
    if (!genLabel.getNode().isListLayout()) {
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d475 2
a477 2
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d479 2
a481 2
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d483 2
a485 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d487 2
a489 2
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d495 1
d497 1
a497 1
     /* for handleNotificationEvent() method */ 
a498 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d506 1
d508 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d526 2
a528 2
    stringBuffer.append(TEXT_157);
    } else {
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d532 1
d534 1
a535 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d552 2
a554 2
    stringBuffer.append(TEXT_171);
    }
d556 1
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a559 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d563 4
d576 1
a576 1
    stringBuffer.append(TEXT_177);
d578 1
a578 1
    stringBuffer.append(TEXT_178);
d581 1
a581 1
    stringBuffer.append(TEXT_179);
d583 1
a583 1
    stringBuffer.append(TEXT_180);
d588 1
a588 1
    stringBuffer.append(TEXT_181);
d590 1
a590 1
    stringBuffer.append(TEXT_182);
d592 1
a592 1
    stringBuffer.append(TEXT_183);
d594 1
a594 1
    stringBuffer.append(TEXT_184);
d597 1
a597 1
    stringBuffer.append(TEXT_185);
d599 1
a599 1
    stringBuffer.append(TEXT_186);
@


1.43
log
@handle both Label and WrapLabel : continued
@
text
@d34 66
a99 66
  protected final String TEXT_17 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_18 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_19 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_20 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_23 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_24 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_25 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_26 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_27 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_31 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_32 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_33 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_34 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tgetLabel().setText(text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_35 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_36 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_37 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_38 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_39 = NL + "\t\t";
  protected final String TEXT_40 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_41 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_42 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_43 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_44 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_45 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_46 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_47 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_48 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_49 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_50 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_51 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_52 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_53 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_54 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_55 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_56 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_57 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_58 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_59 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_60 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_61 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_64 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_65 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_66 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_67 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_68 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_69 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_70 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_71 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_72 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_73 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_74 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_75 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_76 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_77 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_78 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_79 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_80 = NL + "\t\trefreshBounds();";
  protected final String TEXT_81 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_82 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
d101 76
a176 76
  protected final String TEXT_84 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_85 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_86 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_87 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_89 = ") getFigure()).setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_90 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_91 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_92 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null && getFigure() instanceof ";
  protected final String TEXT_93 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_94 = ") getFigure()).setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_95 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_96 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_97 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_98 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_99 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_100 = ".BOLD : ";
  protected final String TEXT_101 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_102 = ".ITALIC : ";
  protected final String TEXT_103 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_104 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_105 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_106 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_107 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_108 = ") {" + NL + "\t\t\t";
  protected final String TEXT_109 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_110 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_111 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_112 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_113 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_114 = NL;
  protected final String TEXT_115 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_116 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_117 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_118 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_119 = " size = new ";
  protected final String TEXT_120 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_121 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_122 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_123 = " loc = new ";
  protected final String TEXT_124 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_125 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_126 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_127 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_128 = NL;
  protected final String TEXT_129 = NL + "\t\tif (";
  protected final String TEXT_130 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_131 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_132 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_133 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = "\t\tif (";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_137 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_138 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_139 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_140 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_141 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_142 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_143 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_144 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_145 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_146 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_147 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\t\tif (";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_151 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_155 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_156 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_157 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_158 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_159 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
d178 26
a203 18
  protected final String TEXT_161 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_162 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_163 = " label = createFigurePrim();" + NL + "\t\tif (label instanceof ";
  protected final String TEXT_164 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_165 = ") label).getText();" + NL + "\t\t} else if (label instanceof ";
  protected final String TEXT_166 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_167 = ") label).getText();" + NL + "\t\t}" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_168 = " createFigurePrim() {";
  protected final String TEXT_169 = NL + "\t\treturn new ";
  protected final String TEXT_170 = "();";
  protected final String TEXT_171 = NL + "\t\treturn ";
  protected final String TEXT_172 = ";";
  protected final String TEXT_173 = NL + "\t\treturn new ";
  protected final String TEXT_174 = "();";
  protected final String TEXT_175 = NL + "\t}" + NL;
  protected final String TEXT_176 = NL;
  protected final String TEXT_177 = NL + "}";
  protected final String TEXT_178 = NL;
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d259 1
d261 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d271 1
d273 1
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d281 1
a281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d291 1
a291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d293 1
a293 1
    if (!genLabel.isReadOnly()) {
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d297 1
a297 1
    }
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d303 2
a305 2
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d313 2
a315 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d327 2
a329 2
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d341 1
a341 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d361 1
a361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d375 1
a375 1
    if (needsRefreshBounds) {
d377 1
a377 1
    }
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d407 2
a409 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d443 1
d445 1
d447 1
a447 1
    if (!genLabel.getNode().isListLayout()) {
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d469 1
d471 1
a471 1
     /* for handleNotificationEvent() method */ 
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d481 1
d483 1
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d494 1
a494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a503 1
    } else {
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d506 1
d508 1
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d528 1
a528 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a529 1
    }
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d542 1
a542 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d544 11
d556 5
a560 1
    stringBuffer.append(TEXT_168);
d570 1
a570 1
    stringBuffer.append(TEXT_169);
d572 1
a572 1
    stringBuffer.append(TEXT_170);
d575 1
a575 1
    stringBuffer.append(TEXT_171);
d577 1
a577 1
    stringBuffer.append(TEXT_172);
d582 1
a582 1
    stringBuffer.append(TEXT_173);
d584 1
a584 1
    stringBuffer.append(TEXT_174);
d586 1
a586 1
    stringBuffer.append(TEXT_175);
d588 1
a588 1
    stringBuffer.append(TEXT_176);
d591 1
a591 1
    stringBuffer.append(TEXT_177);
d593 1
a593 1
    stringBuffer.append(TEXT_178);
@


1.42
log
@handle both Label and WrapLabel
@
text
@d37 149
a185 149
  protected final String TEXT_20 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tgetLabel().setText(text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_22 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_23 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_24 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_25 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_26 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_27 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_28 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_31 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_32 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_33 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_34 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_35 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_38 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_39 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_40 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_41 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_42 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_43 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_44 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_47 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_48 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_49 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_50 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_51 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_52 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_53 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_54 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_55 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_56 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_57 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_58 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_59 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_60 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_61 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_62 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_63 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_64 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_65 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_66 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_67 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_68 = ".";
  protected final String TEXT_69 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_70 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_71 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_72 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_73 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_74 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_75 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_76 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_77 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_78 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_79 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_80 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_81 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_82 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_83 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_84 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_85 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_86 = NL + "\t\trefreshBounds();";
  protected final String TEXT_87 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_88 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_89 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_90 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_91 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_92 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_93 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_94 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_95 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_96 = ".BOLD : ";
  protected final String TEXT_97 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_98 = ".ITALIC : ";
  protected final String TEXT_99 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_100 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_101 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_102 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_103 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_104 = ") {" + NL + "\t\t\t";
  protected final String TEXT_105 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_106 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_107 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_108 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_109 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_112 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_113 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_114 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_115 = " size = new ";
  protected final String TEXT_116 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_117 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_118 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_119 = " loc = new ";
  protected final String TEXT_120 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_121 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_122 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_123 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_124 = NL;
  protected final String TEXT_125 = NL + "\t\tif (";
  protected final String TEXT_126 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_127 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_128 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_129 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_130 = NL;
  protected final String TEXT_131 = "\t\tif (";
  protected final String TEXT_132 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_133 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_137 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_138 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_139 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_140 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_141 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_142 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_143 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = "\t\tif (";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_147 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_151 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_154 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_155 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_158 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_159 = " label = createFigurePrim();" + NL + "\t\tif (label instanceof ";
  protected final String TEXT_160 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_161 = ") label).getText();" + NL + "\t\t} else if (label instanceof ";
  protected final String TEXT_162 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_163 = ") label).getText();" + NL + "\t\t}" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_164 = " createFigurePrim() {";
  protected final String TEXT_165 = NL + "\t\treturn new ";
  protected final String TEXT_166 = "();";
  protected final String TEXT_167 = NL + "\t\treturn ";
  protected final String TEXT_168 = ";";
d188 8
a195 4
  protected final String TEXT_171 = NL + "\t}" + NL;
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = NL + "}";
  protected final String TEXT_174 = NL;
a250 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
a251 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d265 1
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d269 2
a271 2
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d277 1
d279 1
d281 1
a281 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d291 2
a293 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d295 1
a295 1
    if (!genLabel.isReadOnly()) {
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d299 1
a299 1
    }
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d343 1
a343 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d361 1
a361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d377 1
a377 1
    if (needsRefreshBounds) {
d379 1
a379 1
    }
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d403 2
a405 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d425 1
d427 1
d429 1
a429 1
    if (!genLabel.getNode().isListLayout()) {
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a432 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d445 1
a445 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d447 1
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d451 1
d453 1
a453 1
     /* for handleNotificationEvent() method */ 
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a458 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d460 2
a462 1
    stringBuffer.append(TEXT_129);
d464 1
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d480 1
a480 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d484 1
a484 1
    } else {
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d488 1
d490 1
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d494 1
a494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d510 1
a510 1
    }
d512 1
d514 7
d522 1
a522 1
    stringBuffer.append(TEXT_158);
d524 1
a524 1
    stringBuffer.append(TEXT_159);
d526 1
a526 1
    stringBuffer.append(TEXT_160);
d528 1
a528 1
    stringBuffer.append(TEXT_161);
d530 1
a530 1
    stringBuffer.append(TEXT_162);
d532 1
a532 1
    stringBuffer.append(TEXT_163);
d534 1
a534 1
    stringBuffer.append(TEXT_164);
d544 1
a544 1
    stringBuffer.append(TEXT_165);
d546 1
a546 1
    stringBuffer.append(TEXT_166);
d549 1
a549 1
    stringBuffer.append(TEXT_167);
d551 1
a551 1
    stringBuffer.append(TEXT_168);
d556 1
a556 1
    stringBuffer.append(TEXT_169);
d558 1
a558 1
    stringBuffer.append(TEXT_170);
d560 1
a560 1
    stringBuffer.append(TEXT_171);
d562 1
a562 1
    stringBuffer.append(TEXT_172);
d565 1
a565 1
    stringBuffer.append(TEXT_173);
d567 1
a567 1
    stringBuffer.append(TEXT_174);
@


1.41
log
@remove temporary label direct edit policy
@
text
@d176 6
a181 6
  protected final String TEXT_159 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_160 = " createLabel() {";
  protected final String TEXT_161 = NL + "\t\treturn new ";
  protected final String TEXT_162 = "();";
  protected final String TEXT_163 = NL + "\t\treturn ";
  protected final String TEXT_164 = ";";
d184 8
a191 4
  protected final String TEXT_167 = NL + "\t}" + NL;
  protected final String TEXT_168 = NL;
  protected final String TEXT_169 = NL + "}";
  protected final String TEXT_170 = NL;
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d515 8
d532 1
a532 1
    stringBuffer.append(TEXT_161);
d534 1
a534 1
    stringBuffer.append(TEXT_162);
d537 1
a537 1
    stringBuffer.append(TEXT_163);
d539 1
a539 1
    stringBuffer.append(TEXT_164);
d544 1
a544 1
    stringBuffer.append(TEXT_165);
d546 1
a546 1
    stringBuffer.append(TEXT_166);
d548 1
a548 1
    stringBuffer.append(TEXT_167);
d550 1
a550 1
    stringBuffer.append(TEXT_168);
d553 1
a553 1
    stringBuffer.append(TEXT_169);
d555 1
a555 1
    stringBuffer.append(TEXT_170);
@


1.40
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d21 167
a187 168
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "//import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import ";
  protected final String TEXT_5 = ".LabelDirectEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends CompartmentEditPart implements ITextAwareEditPart {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String VISUAL_ID = \"";
  protected final String TEXT_10 = "\";";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_14 = " parser;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_15 = " parserElements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_16 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t}" + NL;
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_19 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_20 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_21 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tgetLabel().setText(text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_22 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_23 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_24 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_25 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_26 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_27 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_28 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_29 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_32 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_33 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_34 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_35 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_36 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_40 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_41 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_42 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_43 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_44 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_45 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_46 = NL + "\t\t";
  protected final String TEXT_47 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_49 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_50 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_51 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_52 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_53 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_54 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_55 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_56 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_57 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_58 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_59 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_60 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_61 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_62 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_63 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_64 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_65 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_66 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_67 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_68 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_69 = ".";
  protected final String TEXT_70 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_71 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_72 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_73 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_74 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_75 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_76 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_77 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_78 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_79 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_80 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_81 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest.getExtendedData().get(";
  protected final String TEXT_82 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR) instanceof Character) {" + NL + "\t\t\t\t\t\t\tCharacter initialChar = (Character) theRequest.getExtendedData().get(";
  protected final String TEXT_83 = ".REQ_DIRECTEDIT_EXTENDEDDATA_INITIAL_CHAR);" + NL + "\t\t\t\t\t\t\tperformDirectEdit(initialChar.charValue());" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_84 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_85 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_86 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_87 = NL + "\t\trefreshBounds();";
  protected final String TEXT_88 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_89 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_91 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_92 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_93 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_94 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_95 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_96 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_97 = ".BOLD : ";
  protected final String TEXT_98 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_99 = ".ITALIC : ";
  protected final String TEXT_100 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_101 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_102 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_103 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_104 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_105 = ") {" + NL + "\t\t\t";
  protected final String TEXT_106 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_107 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_108 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_109 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_110 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_111 = NL;
  protected final String TEXT_112 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_113 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_114 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_115 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_116 = " size = new ";
  protected final String TEXT_117 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_118 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_119 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_120 = " loc = new ";
  protected final String TEXT_121 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_122 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_123 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_124 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_125 = NL;
  protected final String TEXT_126 = NL + "\t\tif (";
  protected final String TEXT_127 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_128 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_129 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_130 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_131 = NL;
  protected final String TEXT_132 = "\t\tif (";
  protected final String TEXT_133 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_134 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_137 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_138 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_139 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_140 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_141 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_142 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_143 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_144 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = "\t\tif (";
  protected final String TEXT_147 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_148 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_151 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_153 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_154 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_155 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_156 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_159 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_160 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_161 = " createLabel() {";
  protected final String TEXT_162 = NL + "\t\treturn new ";
  protected final String TEXT_163 = "();";
  protected final String TEXT_164 = NL + "\t\treturn ";
  protected final String TEXT_165 = ";";
  protected final String TEXT_166 = NL + "\t\treturn new ";
  protected final String TEXT_167 = "();";
  protected final String TEXT_168 = NL + "\t}" + NL;
  protected final String TEXT_169 = NL;
  protected final String TEXT_170 = NL + "}";
  protected final String TEXT_171 = NL;
a208 2
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
    stringBuffer.append(TEXT_5);
d214 2
a216 2
    stringBuffer.append(genLabel.getEditPartClassName());
    stringBuffer.append(TEXT_7);
d219 1
d221 1
d223 1
a223 1
    stringBuffer.append(genCommonBase.getVisualID());
a224 1
    }
d226 1
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d234 1
a234 1
    stringBuffer.append(genLabel.getEditPartClassName());
a235 1
    final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d237 1
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d251 2
a253 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d261 1
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d267 2
a269 2
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d273 1
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d281 2
d284 1
a284 1
    stringBuffer.append(TEXT_42);
a285 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d289 1
a289 1
    if (!genLabel.isReadOnly()) {
d291 1
a291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d293 1
a293 1
    }
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d337 1
a337 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d341 2
a343 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d371 1
a371 1
    if (needsRefreshBounds) {
d373 1
a373 1
    }
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d407 2
d410 1
a410 1
    stringBuffer.append(TEXT_105);
a411 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
a416 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d419 1
d421 1
a421 1
    if (!genLabel.getNode().isListLayout()) {
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a442 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d444 1
d446 1
a446 1
     /* for handleNotificationEvent() method */ 
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d456 1
d458 2
a460 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d472 1
a472 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d478 1
a478 1
    } else {
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d482 1
d484 2
a486 2
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d498 1
a498 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a503 1
    }
d505 1
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a510 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_161);
d520 2
a522 2
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_163);
d525 2
a527 2
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_165);
d532 2
d535 1
a535 1
    stringBuffer.append(figureQualifiedClassName);
d537 1
a537 1
    }
a538 2
    if (genLabel.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_169);
d541 2
a543 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_171);
@


1.39
log
@do not use hardcoded policy name
@
text
@d98 3
a100 3
  protected final String TEXT_81 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest instanceof ";
  protected final String TEXT_82 = ") {" + NL + "\t\t\t\t\t\t\tchar c = ((";
  protected final String TEXT_83 = ") theRequest).getInitialCharacter();" + NL + "\t\t\t\t\t\t\tperformDirectEdit(c);" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
d362 1
a362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d364 1
a364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
@


1.38
log
@#135694 remove temporary code
@
text
@d38 148
a185 148
  protected final String TEXT_21 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabelText(String text) {" + NL + "\t\tgetLabel().setText(text);" + NL + "\t\tObject pdEditPolicy = getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof TaiPanTextSelectionEditPolicy) {" + NL + "\t\t\t((TaiPanTextSelectionEditPolicy) pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_22 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_23 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_24 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_25 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_26 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_27 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_31 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_32 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_33 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_34 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_37 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_38 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_39 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_40 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_41 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_42 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_43 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_44 = NL + "\t\t";
  protected final String TEXT_45 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_46 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_47 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_48 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_49 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_50 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_51 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_52 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_53 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_54 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_55 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_56 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_57 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_58 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_59 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_60 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_61 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_62 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_63 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_64 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_65 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_66 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_69 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_70 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_71 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_72 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_73 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_74 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_75 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_76 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_77 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_78 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_79 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest instanceof ";
  protected final String TEXT_80 = ") {" + NL + "\t\t\t\t\t\t\tchar c = ((";
  protected final String TEXT_81 = ") theRequest).getInitialCharacter();" + NL + "\t\t\t\t\t\t\tperformDirectEdit(c);" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_82 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_83 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_84 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_85 = NL + "\t\trefreshBounds();";
  protected final String TEXT_86 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_87 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_89 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_90 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_91 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_92 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_93 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_94 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_95 = ".BOLD : ";
  protected final String TEXT_96 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_97 = ".ITALIC : ";
  protected final String TEXT_98 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_99 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_100 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_101 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_102 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t";
  protected final String TEXT_104 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_105 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_106 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_107 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_108 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_112 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_113 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_114 = " size = new ";
  protected final String TEXT_115 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_116 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_117 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_118 = " loc = new ";
  protected final String TEXT_119 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_120 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_121 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_122 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = NL + "\t\tif (";
  protected final String TEXT_125 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_126 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_127 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_128 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = "\t\tif (";
  protected final String TEXT_131 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_132 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_133 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_137 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_138 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_139 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_140 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_141 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_142 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = "\t\tif (";
  protected final String TEXT_145 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_146 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_147 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_151 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_153 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_154 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_155 = NL;
  protected final String TEXT_156 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_157 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_158 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_159 = " createLabel() {";
  protected final String TEXT_160 = NL + "\t\treturn new ";
  protected final String TEXT_161 = "();";
  protected final String TEXT_162 = NL + "\t\treturn ";
  protected final String TEXT_163 = ";";
  protected final String TEXT_164 = NL + "\t\treturn new ";
  protected final String TEXT_165 = "();";
  protected final String TEXT_166 = NL + "\t}" + NL;
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = NL + "}";
d187 2
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d248 2
a250 2
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d254 2
a256 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d258 1
d260 1
a261 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d264 1
a264 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d270 1
d272 1
a273 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a274 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d276 1
a276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d280 1
a280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d286 1
a286 1
    if (!genLabel.isReadOnly()) {
d288 1
a288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d290 1
a290 1
    }
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d294 2
a296 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d298 1
a298 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d302 2
a304 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d312 1
a312 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d314 1
a314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d318 2
a320 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d328 2
a330 2
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d334 1
a334 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d336 1
a336 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d338 1
a338 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d344 1
a344 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d346 1
a346 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d348 1
a348 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d356 2
a358 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d360 2
a362 2
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d364 1
a364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d368 1
a368 1
    if (needsRefreshBounds) {
d370 1
a370 1
    }
d372 1
a372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d374 1
a374 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d376 2
a378 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d380 2
a382 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d386 2
a388 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d390 1
a390 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d396 1
a396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d398 1
a398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d400 1
a400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d404 1
a404 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d412 1
a412 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d414 1
a414 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d416 1
d418 1
a419 1
    if (!genLabel.getNode().isListLayout()) {
a420 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d422 2
a424 2
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d426 2
a428 2
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d430 2
a432 2
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d434 2
a436 2
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d442 1
d444 1
a444 1
     /* for handleNotificationEvent() method */ 
a445 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d447 1
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d453 1
d455 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d473 2
a475 2
    stringBuffer.append(TEXT_140);
    } else {
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d479 1
d481 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d499 2
a501 2
    stringBuffer.append(TEXT_154);
    }
d503 1
d505 3
d509 1
a509 1
    stringBuffer.append(TEXT_157);
d511 1
a511 1
    stringBuffer.append(TEXT_158);
d513 1
a513 1
    stringBuffer.append(TEXT_159);
d523 1
a523 1
    stringBuffer.append(TEXT_160);
d525 1
a525 1
    stringBuffer.append(TEXT_161);
d528 1
a528 1
    stringBuffer.append(TEXT_162);
d530 1
a530 1
    stringBuffer.append(TEXT_163);
d535 1
a535 1
    stringBuffer.append(TEXT_164);
d537 1
a537 1
    stringBuffer.append(TEXT_165);
d539 1
a539 1
    stringBuffer.append(TEXT_166);
d541 1
a541 1
    stringBuffer.append(TEXT_167);
d544 1
a544 1
    stringBuffer.append(TEXT_168);
d546 1
a546 1
    stringBuffer.append(TEXT_169);
@


1.37
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.CompartmentEditPart;" + NL + "//import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "//import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import ";
d38 1
a38 1
  protected final String TEXT_21 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
d53 1
a53 1
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
a268 1
    String textDirectEditManagerClassName = importManager.getImportedName(/*org.eclipse.gmf.runtime.diagram.ui.tools*/genDiagram.getEditPartsPackageName()+".TextDirectEditManager");
d338 1
a338 1
    stringBuffer.append(textDirectEditManagerClassName);
d344 1
a344 1
    stringBuffer.append(textDirectEditManagerClassName);
d346 1
a346 1
    stringBuffer.append(textDirectEditManagerClassName);
d348 1
a348 1
    stringBuffer.append(textDirectEditManagerClassName);
d350 1
a350 1
    stringBuffer.append(textDirectEditManagerClassName);
@


1.36
log
@using M6 to generate code.
@
text
@d26 13
a38 13
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_10 = " manager;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_11 = " parser;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_12 = " parserElements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_13 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t}" + NL;
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_16 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_17 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_18 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_19 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_20 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_21 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
d41 146
a186 143
  protected final String TEXT_24 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_27 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_28 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_29 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_30 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_31 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_34 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_35 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_36 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_37 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_38 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_39 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_40 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_43 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_44 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_45 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_46 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_47 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_48 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_49 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_50 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_51 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_52 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_53 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_54 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_55 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_56 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_57 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_58 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_59 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_60 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_61 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_62 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_63 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_64 = ".";
  protected final String TEXT_65 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_66 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_67 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_68 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_69 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_70 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_71 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_72 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_73 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_74 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_75 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_76 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest instanceof ";
  protected final String TEXT_77 = ") {" + NL + "\t\t\t\t\t\t\tchar c = ((";
  protected final String TEXT_78 = ") theRequest).getInitialCharacter();" + NL + "\t\t\t\t\t\t\tperformDirectEdit(c);" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_79 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_80 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_81 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_82 = NL + "\t\trefreshBounds();";
  protected final String TEXT_83 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_84 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_85 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_86 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_87 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_88 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_89 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_90 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_91 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_92 = ".BOLD : ";
  protected final String TEXT_93 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_94 = ".ITALIC : ";
  protected final String TEXT_95 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_96 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_97 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_98 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_99 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_100 = ") {" + NL + "\t\t\t";
  protected final String TEXT_101 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_102 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_103 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_104 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_105 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_106 = NL;
  protected final String TEXT_107 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_108 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_109 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_110 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_111 = " size = new ";
  protected final String TEXT_112 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_113 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_114 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_115 = " loc = new ";
  protected final String TEXT_116 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_117 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_118 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_119 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = NL + "\t\tif (";
  protected final String TEXT_122 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_123 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_124 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_125 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = "\t\tif (";
  protected final String TEXT_128 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_129 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_130 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_131 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_132 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_133 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_136 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_137 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_139 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = "\t\tif (";
  protected final String TEXT_142 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_143 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_144 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_145 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_147 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_150 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_151 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_154 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_155 = " label = createLabel();" + NL + "\t\tdefaultText = label.getText();" + NL + "\t\treturn label;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_156 = " createLabel() {";
  protected final String TEXT_157 = NL + "\t\treturn new ";
  protected final String TEXT_158 = "();";
  protected final String TEXT_159 = NL + "\t\treturn ";
  protected final String TEXT_160 = ";";
  protected final String TEXT_161 = NL + "\t\treturn new ";
  protected final String TEXT_162 = "();";
  protected final String TEXT_163 = NL + "\t}" + NL;
  protected final String TEXT_164 = NL;
  protected final String TEXT_165 = NL + "}";
  protected final String TEXT_166 = NL;
d218 2
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
a225 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d227 1
a227 1
    stringBuffer.append(genLabel.getEditPartClassName());
d229 1
a229 1
    final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d231 1
d233 1
a233 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d235 1
a235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d237 1
a238 2
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d250 1
d252 1
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d258 1
a258 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d260 2
a262 1
    stringBuffer.append(TEXT_31);
d264 1
a264 1
    String textDirectEditManagerClassName = importManager.getImportedName(/*org.eclipse.gmf.runtime.diagram.ui.tools*/genDiagram.getEditPartsPackageName()+".TextDirectEditManager");
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a267 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d275 2
d278 1
a278 1
    stringBuffer.append(TEXT_39);
a279 2
    stringBuffer.append(TEXT_40);
    if (!genLabel.isReadOnly()) {
d283 1
a283 1
    }
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d291 1
a291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d327 1
a327 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d333 1
a333 1
    stringBuffer.append(textDirectEditManagerClassName);
d335 2
a337 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d341 1
a341 1
    stringBuffer.append(textDirectEditManagerClassName);
d343 1
a343 1
    stringBuffer.append(textDirectEditManagerClassName);
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d359 2
a361 2
    stringBuffer.append(TEXT_81);
    if (needsRefreshBounds) {
d363 1
a363 1
    }
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d401 2
d404 1
a404 1
    stringBuffer.append(TEXT_102);
a405 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d409 1
d411 1
d413 1
a413 1
    if (!genLabel.getNode().isListLayout()) {
a414 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d435 1
d437 1
a437 1
     /* for handleNotificationEvent() method */ 
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a440 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d442 1
a442 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d446 1
d448 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d468 1
a468 1
    } else {
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d472 1
d474 1
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d494 1
a494 1
    }
d496 1
d498 5
d504 1
a504 1
    stringBuffer.append(TEXT_154);
d506 1
a506 1
    stringBuffer.append(TEXT_155);
d508 1
a508 1
    stringBuffer.append(TEXT_156);
d518 1
a518 1
    stringBuffer.append(TEXT_157);
d520 1
a520 1
    stringBuffer.append(TEXT_158);
d523 1
a523 1
    stringBuffer.append(TEXT_159);
d525 1
a525 1
    stringBuffer.append(TEXT_160);
d530 1
a530 1
    stringBuffer.append(TEXT_161);
d532 1
a532 1
    stringBuffer.append(TEXT_162);
d534 1
a534 1
    stringBuffer.append(TEXT_163);
d536 1
a536 1
    stringBuffer.append(TEXT_164);
d539 1
a539 1
    stringBuffer.append(TEXT_165);
d541 1
a541 1
    stringBuffer.append(TEXT_166);
@


1.35
log
@restore generators
@
text
@d187 1
a187 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.34
log
@#134095 do not store compiled templates in cvs
@
text
@d187 1
a187 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.33
log
@Switching to eclipse M6.
@
text
@@


1.32
log
@Class names of Figures generated as inner classes may clash with well-known classes, thus we have to make sure we avoid that
@
text
@d187 1
a187 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.31
log
@generate label figures for all label types
@
text
@d207 5
a211 1
    importManager.markImportLocation(stringBuffer);
@


1.30
log
@use specified label figure in ext node labels
@
text
@d30 9
a38 9
  protected final String TEXT_13 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_14 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_15 = " figure =" + NL + "\t\t\tnew ";
  protected final String TEXT_16 = "();" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\treturn figure;" + NL + "\t}" + NL;
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_19 = " getLabel() {" + NL + "\t\treturn (";
  protected final String TEXT_20 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(";
  protected final String TEXT_21 = " figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
d41 143
a183 133
  protected final String TEXT_24 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_25 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_26 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_27 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_31 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_32 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_33 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_34 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_37 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_38 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_39 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_40 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_41 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_42 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_43 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_44 = NL + "\t\t";
  protected final String TEXT_45 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_46 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_47 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_48 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_49 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_50 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_51 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_52 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_53 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_54 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_55 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_56 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_57 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_58 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_59 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_60 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_61 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_62 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_63 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_64 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_65 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_66 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_69 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_70 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_71 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_72 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_73 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_74 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_75 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_76 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_77 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_78 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_79 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest instanceof ";
  protected final String TEXT_80 = ") {" + NL + "\t\t\t\t\t\t\tchar c = ((";
  protected final String TEXT_81 = ") theRequest).getInitialCharacter();" + NL + "\t\t\t\t\t\t\tperformDirectEdit(c);" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_82 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_83 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_84 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_85 = NL + "\t\trefreshBounds();";
  protected final String TEXT_86 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t\tObject pdEditPolicy = getEditPolicy(";
  protected final String TEXT_87 = ".PRIMARY_DRAG_ROLE);" + NL + "\t\tif (pdEditPolicy instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_89 = ") pdEditPolicy).refreshFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_90 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_91 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_92 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_93 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_94 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_95 = ".BOLD : ";
  protected final String TEXT_96 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_97 = ".ITALIC : ";
  protected final String TEXT_98 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_99 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_100 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_101 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_102 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t";
  protected final String TEXT_104 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_105 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_106 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_107 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_108 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_112 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_113 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_114 = " size = new ";
  protected final String TEXT_115 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_116 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_117 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_118 = " loc = new ";
  protected final String TEXT_119 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_120 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_121 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_122 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = NL + "\t\tif (";
  protected final String TEXT_125 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_126 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_127 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_128 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = "\t\tif (";
  protected final String TEXT_131 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_132 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_133 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_136 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_137 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_138 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_139 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_140 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_141 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_142 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_143 = NL;
  protected final String TEXT_144 = "\t\tif (";
  protected final String TEXT_145 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_146 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_147 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_150 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_151 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_152 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_153 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_154 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_155 = NL + "}";
  protected final String TEXT_156 = NL;
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d226 1
a226 1
    final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d228 1
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d246 1
d248 1
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.ImageDescriptor"));
d259 1
d261 1
a261 1
    String textDirectEditManagerClassName = importManager.getImportedName(/*org.eclipse.gmf.runtime.diagram.ui.tools*/genDiagram.getEditPartsPackageName()+".TextDirectEditManager");
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d277 1
a277 1
    if (!genLabel.isReadOnly()) {
d279 2
a281 2
    stringBuffer.append(TEXT_45);
    }
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d291 1
a291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.RunnableWithResult"));
d297 2
a299 2
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserEditStatus"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.text.contentassist.IContentAssistProcessor"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d325 1
a325 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.tools.DirectEditManager"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d339 1
a339 1
    stringBuffer.append(textDirectEditManagerClassName);
d341 1
a341 1
    stringBuffer.append(textDirectEditManagerClassName);
d343 1
a343 1
    stringBuffer.append(textDirectEditManagerClassName);
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d359 1
a359 1
    if (needsRefreshBounds) {
d361 1
a361 1
    }
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d405 1
d407 1
d409 1
a409 1
    if (!genLabel.getNode().isListLayout()) {
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
a426 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d428 1
a428 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d430 1
a430 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d432 1
d434 1
a434 1
     /* for handleNotificationEvent() method */ 
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d442 1
d444 1
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d458 1
a458 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d462 1
a462 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
a464 1
    } else {
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d468 1
d470 1
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d491 28
d520 6
a525 1
    stringBuffer.append(TEXT_155);
d527 1
a527 1
    stringBuffer.append(TEXT_156);
@


1.29
log
@provide custom text selection edit policy
@
text
@d30 6
a35 6
  protected final String TEXT_13 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicy.DIRECT_EDIT_ROLE, new LabelDirectEditPolicy());" + NL + "\t}" + NL;
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_16 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_17 = " figure =" + NL + "\t\t\tnew ";
  protected final String TEXT_18 = "();" + NL + "\t\tdefaultText = figure.getText();" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d211 1
a211 1
    final boolean needsRefreshBounds = !genLabel.getNode().isListLayout();
d213 1
d215 1
a215 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
@


1.28
log
@extend CompartmentEP to enable mouse delegation
@
text
@d103 71
a173 68
  protected final String TEXT_86 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_87 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_88 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_89 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_90 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_91 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_92 = ".BOLD : ";
  protected final String TEXT_93 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_94 = ".ITALIC : ";
  protected final String TEXT_95 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_96 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_97 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_98 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_99 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_100 = ") {" + NL + "\t\t\t";
  protected final String TEXT_101 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_102 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_103 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_104 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_105 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_106 = NL;
  protected final String TEXT_107 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_108 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_109 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_110 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_111 = " size = new ";
  protected final String TEXT_112 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_113 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_114 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_115 = " loc = new ";
  protected final String TEXT_116 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_117 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_118 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_119 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = NL + "\t\tif (";
  protected final String TEXT_122 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_123 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_124 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_125 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = "\t\tif (";
  protected final String TEXT_128 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_129 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_130 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_131 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_132 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_133 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_135 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_136 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_137 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_139 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = "\t\tif (";
  protected final String TEXT_142 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_143 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_144 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_145 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_147 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_149 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_150 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_151 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_152 = NL + "}";
  protected final String TEXT_153 = NL;
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d361 1
a361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d383 2
d386 1
a386 1
    stringBuffer.append(TEXT_102);
a387 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d391 1
d393 1
d395 1
a395 1
    if (!genLabel.getNode().isListLayout()) {
a396 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d417 1
d419 1
a419 1
     /* for handleNotificationEvent() method */ 
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a422 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d428 1
d430 1
a433 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a434 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d446 1
a446 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d450 1
a450 1
    } else {
d452 1
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d454 1
d456 1
d458 1
a458 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
a460 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d472 6
d479 1
a479 1
    stringBuffer.append(TEXT_150);
d481 1
a481 1
    stringBuffer.append(TEXT_151);
d483 1
a483 1
    stringBuffer.append(TEXT_152);
d485 1
a485 1
    stringBuffer.append(TEXT_153);
@


1.27
log
@show selection; update default text
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;" + NL + "//import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "//import org.eclipse.gmf.runtime.diagram.ui.editpolicies.LabelDirectEditPolicy;" + NL + "import ";
d24 1
a24 1
  protected final String TEXT_7 = " extends GraphicalEditPart implements ITextAwareEditPart {";
@


1.26
log
@duplicated refreshVisuals method when label's node has flow layout
@
text
@d37 134
a170 133
  protected final String TEXT_20 = ") getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshUnderline() {" + NL + "\t\t";
  protected final String TEXT_21 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_22 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_23 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
  protected final String TEXT_24 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_25 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_26 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\t//getLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_29 = " getLabelIcon() {" + NL + "\t\t";
  protected final String TEXT_30 = " element = resolveSemanticElement();" + NL + "\t\t";
  protected final String TEXT_31 = " descriptor =" + NL + "\t\t\t";
  protected final String TEXT_32 = ".getInstance().getItemImageDescriptor(element);" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ";
  protected final String TEXT_33 = ".getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_36 = " getModelChildren() {" + NL + "\t\treturn ";
  protected final String TEXT_37 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_38 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setLabel(IFigure figure) {" + NL + "\t\tunregisterVisuals();" + NL + "\t\tsetFigure(figure);" + NL + "\t\tregisterVisuals();" + NL + "\t\trefreshVisuals();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
  protected final String TEXT_39 = " element = resolveSemanticElement();" + NL + "\t\tString text = null;" + NL + "\t\tif (element != null && getParser() != null) {" + NL + "\t\t\ttext = getParser().getPrintString(new ";
  protected final String TEXT_40 = "(element)," + NL + "\t\t\t\tgetParserOptions().intValue());" + NL + "\t\t}" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\ttext = defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getEditText() {" + NL + "\t\t";
  protected final String TEXT_41 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "\t\treturn getParser().getEditString(new ";
  protected final String TEXT_42 = "(element)," + NL + "\t\t\tgetParserOptions().intValue());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = " element = resolveSemanticElement();" + NL + "\t\tif (element != null && getEditText() != null) {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_45 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_46 = " getEditTextValidator() {" + NL + "\t\treturn new ";
  protected final String TEXT_47 = "() {" + NL + "" + NL + "\t\t\tpublic String isValid(final Object value) {" + NL + "\t\t\t\tif (value instanceof String) {" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_48 = " element = resolveSemanticElement();" + NL + "\t\t\t\t\tfinal ";
  protected final String TEXT_49 = " parser = getParser();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_50 = " valid =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_51 = ") getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_52 = ".Impl() {" + NL + "" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tsetResult(parser.isValidEditString(" + NL + "\t\t\t\t\t\t\t\t\tnew ";
  protected final String TEXT_53 = "(element), (String) value));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\treturn valid.getCode() == ";
  protected final String TEXT_54 = ".EDITABLE ?" + NL + "\t\t\t\t\t\t\tnull : valid.getMessage();" + NL + "\t\t\t\t\t} catch (InterruptedException ie) {" + NL + "\t\t\t\t\t\tie.printStackTrace();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\t// shouldn't get here" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_55 = " getCompletionProcessor() {" + NL + "\t\t";
  protected final String TEXT_56 = " element = resolveSemanticElement();" + NL + "\t\tif (element == null || getParser() == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getParser().getCompletionProcessor(new ";
  protected final String TEXT_57 = "(element));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_58 = " getParserOptions() {" + NL + "\t\treturn ";
  protected final String TEXT_59 = ".NONE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_60 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((";
  protected final String TEXT_61 = ") getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_62 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_63 = " hintAdapter =" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_64 = "(element, parserHint) {" + NL + "" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_65 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_68 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_69 = " getManager() {" + NL + "\t\tif (manager == null) {" + NL + "\t\t\tsetManager(new ";
  protected final String TEXT_70 = "(this));" + NL + "\t\t}" + NL + "\t\treturn manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setManager(";
  protected final String TEXT_71 = " manager) {" + NL + "\t\tthis.manager = manager;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit() {" + NL + "\t\tgetManager().show();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEdit(";
  protected final String TEXT_72 = " eventLocation) {" + NL + "\t\tif (getManager().getClass() == ";
  protected final String TEXT_73 = ".class) {" + NL + "\t\t\t((";
  protected final String TEXT_74 = ") getManager()).show(eventLocation.getSWTPoint());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void performDirectEdit(char initialCharacter) {" + NL + "\t\t// Run the TextDirectEditManager show with the initial character" + NL + "\t\t// This will not send an extra mouse click" + NL + "\t\tif (getManager() instanceof ";
  protected final String TEXT_75 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_76 = ") getManager()).show(initialCharacter);" + NL + "\t\t} else {" + NL + "\t\t\tperformDirectEdit();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performDirectEditRequest(";
  protected final String TEXT_77 = " request) {" + NL + "\t\tfinal ";
  protected final String TEXT_78 = " theRequest = request;" + NL + "\t\ttry {" + NL + "\t\t\tgetEditingDomain().runExclusive(new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\tif (isActive() && isEditable()) {" + NL + "\t\t\t\t\t\tif (theRequest instanceof ";
  protected final String TEXT_79 = ") {" + NL + "\t\t\t\t\t\t\tchar c = ((";
  protected final String TEXT_80 = ") theRequest).getInitialCharacter();" + NL + "\t\t\t\t\t\t\tperformDirectEdit(c);" + NL + "\t\t\t\t\t\t} else if ((theRequest instanceof ";
  protected final String TEXT_81 = ") && (getEditText().equals(getLabelText()))) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_82 = " editRequest =" + NL + "\t\t\t\t\t\t\t\t(";
  protected final String TEXT_83 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();";
  protected final String TEXT_84 = NL + "\t\trefreshBounds();";
  protected final String TEXT_85 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_86 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_87 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_88 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_89 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_90 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_91 = ".BOLD : ";
  protected final String TEXT_92 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_93 = ".ITALIC : ";
  protected final String TEXT_94 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_95 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_96 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_97 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_98 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_99 = ") {" + NL + "\t\t\t";
  protected final String TEXT_100 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_101 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_102 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_103 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_104 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_108 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_109 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_110 = " size = new ";
  protected final String TEXT_111 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_112 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_113 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_114 = " loc = new ";
  protected final String TEXT_115 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_116 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_117 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_118 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = NL + "\t\tif (";
  protected final String TEXT_121 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_122 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_123 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_124 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_125 = NL;
  protected final String TEXT_126 = "\t\tif (";
  protected final String TEXT_127 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_128 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_129 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_130 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_131 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_132 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_133 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_134 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_135 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_136 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_137 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_138 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = "\t\tif (";
  protected final String TEXT_141 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_142 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_143 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_144 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_145 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_147 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_148 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_149 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_150 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_151 = NL + "}";
  protected final String TEXT_152 = NL;
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d225 2
a227 2
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d231 2
a233 1
    stringBuffer.append(TEXT_26);
d236 1
d238 1
a238 1
    stringBuffer.append(TEXT_29);
d240 1
a240 1
    stringBuffer.append(TEXT_30);
d242 1
a242 1
    stringBuffer.append(TEXT_31);
d244 1
a244 1
    stringBuffer.append(TEXT_32);
a245 1
    stringBuffer.append(TEXT_33);
d248 2
d251 1
a251 1
    stringBuffer.append(TEXT_36);
d253 1
a253 1
    stringBuffer.append(TEXT_37);
d255 1
a255 1
    stringBuffer.append(TEXT_38);
d257 1
a257 1
    stringBuffer.append(TEXT_39);
d259 1
a259 1
    stringBuffer.append(TEXT_40);
d261 1
a261 1
    stringBuffer.append(TEXT_41);
d263 1
a263 1
    stringBuffer.append(TEXT_42);
d265 1
a265 1
    stringBuffer.append(TEXT_43);
d267 1
a267 1
    stringBuffer.append(TEXT_44);
a268 2
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ICellEditorValidator"));
d272 2
d275 1
a275 1
    stringBuffer.append(TEXT_48);
a276 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParserEditStatus"));
d280 2
d283 1
a283 1
    stringBuffer.append(TEXT_52);
d285 1
a285 1
    stringBuffer.append(TEXT_53);
d287 1
a287 1
    stringBuffer.append(TEXT_54);
d289 1
a289 1
    stringBuffer.append(TEXT_55);
d291 1
a291 1
    stringBuffer.append(TEXT_56);
a292 2
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserOptions"));
d296 2
d299 1
a299 1
    stringBuffer.append(TEXT_60);
d301 1
a301 1
    stringBuffer.append(TEXT_61);
a302 2
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d306 2
d309 1
a309 1
    stringBuffer.append(TEXT_65);
d311 1
a311 1
    stringBuffer.append(TEXT_66);
d313 1
a313 1
    stringBuffer.append(TEXT_67);
d315 1
a315 1
    stringBuffer.append(TEXT_68);
a316 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(/*org.eclipse.gmf.runtime.diagram.ui.tools*/genDiagram.getEditPartsPackageName()+".TextDirectEditManager"));
d318 2
d321 1
a321 1
    stringBuffer.append(TEXT_71);
a322 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.TextDirectEditManager"));
d330 1
a330 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.internal.requests.DirectEditRequestWrapper"));
d338 1
a338 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.DirectEditRequest"));
d344 2
d347 1
a347 1
    stringBuffer.append(TEXT_84);
a348 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d352 2
a354 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d366 2
d369 1
a369 1
    stringBuffer.append(TEXT_95);
d371 1
a371 1
    stringBuffer.append(TEXT_96);
d373 1
a373 1
    stringBuffer.append(TEXT_97);
d375 1
a375 1
    stringBuffer.append(TEXT_98);
d377 1
a377 1
    stringBuffer.append(TEXT_99);
d379 1
a379 1
    stringBuffer.append(TEXT_100);
d381 1
a381 1
    stringBuffer.append(TEXT_101);
d383 1
a383 1
    stringBuffer.append(TEXT_102);
d385 1
a385 1
    stringBuffer.append(TEXT_103);
a386 1
    stringBuffer.append(TEXT_104);
d389 1
a390 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d394 1
a394 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d398 1
a398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d406 2
d409 1
a409 1
    stringBuffer.append(TEXT_116);
d411 1
a411 1
    stringBuffer.append(TEXT_117);
a412 1
    stringBuffer.append(TEXT_118);
d414 1
a415 2
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d423 1
d426 1
d428 1
a428 1
    stringBuffer.append(TEXT_127);
a429 2
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d445 2
d448 1
a448 1
    stringBuffer.append(TEXT_137);
a449 1
    stringBuffer.append(TEXT_138);
d452 1
d454 1
a454 1
    stringBuffer.append(TEXT_141);
a455 2
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d471 2
d474 1
a474 1
    stringBuffer.append(TEXT_151);
d476 1
a476 1
    stringBuffer.append(TEXT_152);
@


1.25
log
@use Labels instead of WrapLabels
@
text
@d100 70
a169 68
  protected final String TEXT_83 = ") theRequest;" + NL + "\t\t\t\t\t\t\tperformDirectEdit(editRequest.getLocation());" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tperformDirectEdit();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\te.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshLabel();" + NL + "\t\trefreshFont();" + NL + "\t\trefreshFontColor();" + NL + "\t\trefreshUnderline();" + NL + "\t\trefreshStrikeThrough();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshLabel() {" + NL + "\t\tgetLabel().setText(getLabelText());" + NL + "\t\tgetLabel().setIcon(getLabelIcon());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFont() {" + NL + "\t\t";
  protected final String TEXT_84 = " style =" + NL + "\t\t\t(";
  protected final String TEXT_85 = ") getPrimaryView().getStyle(" + NL + "\t\t\t\t";
  protected final String TEXT_86 = ".eINSTANCE.getFontStyle());" + NL + "\t\t";
  protected final String TEXT_87 = " fontData;" + NL + "\t\tif (style != null) {" + NL + "\t\t\tfontData = new ";
  protected final String TEXT_88 = "(" + NL + "\t\t\t\tstyle.getFontName(), style.getFontHeight()," + NL + "\t\t\t\t(style.isBold() ? ";
  protected final String TEXT_89 = ".BOLD : ";
  protected final String TEXT_90 = ".NORMAL) |" + NL + "\t\t\t\t(style.isItalic() ? ";
  protected final String TEXT_91 = ".ITALIC : ";
  protected final String TEXT_92 = ".NORMAL));" + NL + "\t\t} else {" + NL + "\t\t\t// initialize font to defaults" + NL + "\t\t\tfontData = ";
  protected final String TEXT_93 = ".getFontData(" + NL + "\t\t\t\t(";
  protected final String TEXT_94 = ") getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\t";
  protected final String TEXT_95 = ".PREF_DEFAULT_FONT);" + NL + "\t\t}" + NL + "\t\tsetFont(fontData);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFontColor(";
  protected final String TEXT_96 = " color) {" + NL + "\t\tgetLabel().setForegroundColor(color);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addSemanticListeners() {" + NL + "\t\tif (getParser() instanceof ";
  protected final String TEXT_97 = ") {" + NL + "\t\t\t";
  protected final String TEXT_98 = " element = resolveSemanticElement();" + NL + "\t\t\tparserElements = ((";
  protected final String TEXT_99 = ") getParser()).getSemanticElementsBeingParsed(element);" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\taddListenerFilter(\"SemanticModel\" + i, this, (";
  protected final String TEXT_100 = ") parserElements.get(i)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeSemanticListeners() {" + NL + "\t\tif (parserElements != null) {" + NL + "\t\t\tfor (int i = 0; i < parserElements.size(); i++) {" + NL + "\t\t\t\tremoveListenerFilter(\"SemanticModel\" + i); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeSemanticListeners();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_101 = " getAccessibleEditPart() {" + NL + "\t\tif (accessibleEP == null) {" + NL + "\t\t\taccessibleEP = new AccessibleGraphicalEditPart() {" + NL + "" + NL + "\t\t\t\tpublic void getName(";
  protected final String TEXT_102 = " e) {" + NL + "\t\t\t\t\te.result = getLabel().getText();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn accessibleEP;" + NL + "\t}";
  protected final String TEXT_103 = NL;
  protected final String TEXT_104 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addNotationalListeners() {" + NL + "\t\tsuper.addNotationalListeners();" + NL + "\t\taddListenerFilter(\"PrimaryView\", this, getPrimaryView()); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeNotationalListeners() {" + NL + "\t\tsuper.removeNotationalListeners();" + NL + "\t\tremoveListenerFilter(\"PrimaryView\"); //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_105 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_106 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_107 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_108 = " size = new ";
  protected final String TEXT_109 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_110 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_111 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_112 = " loc = new ";
  protected final String TEXT_113 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_114 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_115 = "(loc, size));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_116 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = NL + "\t\tif (";
  protected final String TEXT_119 = ".eINSTANCE.getSize_Width().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_120 = ".eINSTANCE.getSize_Height().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_121 = ".eINSTANCE.getLocation_X().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_122 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t}";
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = "\t\tif (";
  protected final String TEXT_125 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_126 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_127 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_128 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_129 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_130 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_131 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_132 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_133 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_134 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_135 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_136 = " event) {" + NL + "\t\tObject feature = event.getFeature();";
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = "\t\tif (";
  protected final String TEXT_139 = ".eINSTANCE.getFontStyle_FontColor().equals(feature)) {" + NL + "\t\t\tInteger c = (Integer) event.getNewValue();" + NL + "\t\t\tsetFontColor(";
  protected final String TEXT_140 = ".getInstance().getColor(c));" + NL + "\t\t} else if (";
  protected final String TEXT_141 = ".eINSTANCE.getFontStyle_Underline().equals(feature)) {" + NL + "\t\t\trefreshUnderline();" + NL + "\t\t} else if (";
  protected final String TEXT_142 = ".eINSTANCE.getFontStyle_StrikeThrough().equals(feature)) {" + NL + "\t\t\trefreshStrikeThrough();" + NL + "\t\t} else if (";
  protected final String TEXT_143 = ".eINSTANCE.getFontStyle_FontHeight().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_144 = ".eINSTANCE.getFontStyle_FontName().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_145 = ".eINSTANCE.getFontStyle_Bold().equals(feature) ||" + NL + "\t\t\t\t";
  protected final String TEXT_146 = ".eINSTANCE.getFontStyle_Italic().equals(feature)) {" + NL + "\t\t\trefreshFont();" + NL + "\t\t} else {" + NL + "\t\t\tif (getParser() != null && getParser().isAffectingEvent(event, getParserOptions().intValue())) {" + NL + "\t\t\t\trefreshLabel();" + NL + "\t\t\t}" + NL + "\t\t\tif (getParser() instanceof ISemanticParser) {" + NL + "\t\t\t\t";
  protected final String TEXT_147 = " modelParser =" + NL + "\t\t\t\t\t(";
  protected final String TEXT_148 = ") getParser();" + NL + "\t\t\t\tif (modelParser.areSemanticElementsAffected(null, event)) {" + NL + "\t\t\t\t\tremoveSemanticListeners();" + NL + "\t\t\t\t\tif (resolveSemanticElement() != null) {" + NL + "\t\t\t\t\t\taddSemanticListeners();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\trefreshLabel();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.handleNotificationEvent(event);" + NL + "\t}";
  protected final String TEXT_149 = NL + "}";
  protected final String TEXT_150 = NL;
d207 1
d342 1
a342 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.FontStyle"));
d344 2
a346 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d348 1
a348 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.FontData"));
d350 2
a352 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d362 1
a362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d364 1
a364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d368 1
a368 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d370 1
a370 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d376 1
a376 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.AccessibleEditPart"));
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.accessibility.AccessibleEvent"));
d380 1
d382 1
a383 1
    if (!genLabel.getNode().isListLayout()) {
a384 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d386 2
a388 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d390 2
a392 2
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d394 2
a396 2
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d398 2
a400 2
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d404 1
a404 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d406 1
d408 1
a408 1
     /* for handleNotificationEvent() method */ 
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d417 1
d419 1
a420 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ISemanticParser"));
d437 2
a439 2
    stringBuffer.append(TEXT_134);
    } else {
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d443 1
d445 1
a446 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramColorRegistry"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d461 4
d466 1
a466 1
    stringBuffer.append(TEXT_147);
d468 1
a468 1
    stringBuffer.append(TEXT_148);
d470 1
a470 1
    stringBuffer.append(TEXT_149);
d472 1
a472 1
    stringBuffer.append(TEXT_150);
@


1.24
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d40 1
a40 1
  protected final String TEXT_23 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\tgetLabel().setTextUnderline(style.isUnderline());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshStrikeThrough() {" + NL + "\t\t";
d43 1
a43 1
  protected final String TEXT_26 = ".eINSTANCE.getFontStyle());" + NL + "\t\tif (style != null) {" + NL + "\t\t\tgetLabel().setTextStrikeThrough(style.isStrikeThrough());" + NL + "\t\t}" + NL + "\t}";
d55 1
a55 1
  protected final String TEXT_38 = " getChildBySemanticHint(String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\t";
d209 1
a209 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d211 1
a211 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d213 1
a213 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
d215 1
a215 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
@


1.23
log
@remove warnings
@
text
@d21 147
a167 43
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends TextCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t\tsetNumIcons(1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIcon(int index) {" + NL + "\t\tImageDescriptor descriptor = ";
  protected final String TEXT_10 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_13 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_14 = " figure = super.createFigure();" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_15 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_16 = ") figure).getText();" + NL + "\t\t} else if (figure instanceof ";
  protected final String TEXT_17 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_18 = ") figure).getText();" + NL + "\t\t}" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = super.getLabelText();" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL;
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_21 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_22 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_23 = " hintAdapter = new ";
  protected final String TEXT_24 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_25 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_28 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_30 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_31 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_32 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_33 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_35 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_36 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_37 = " size = new ";
  protected final String TEXT_38 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_39 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_40 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_41 = " loc = new ";
  protected final String TEXT_42 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_43 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_44 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_45 = NL + "}";
  protected final String TEXT_46 = NL;
d174 1
a176 1
boolean isParentFlowLayout = !genLabel.getNode().isListLayout();
d187 1
d189 1
a189 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d191 1
a191 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d193 1
a193 1
    importManager.markImportLocation(stringBuffer);
a194 1
    stringBuffer.append(genLabel.getEditPartClassName());
a195 1
    stringBuffer.append(genLabel.getEditPartClassName());
d197 1
a197 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d199 1
d201 1
d203 1
a203 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a205 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d207 1
a207 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d213 1
a213 1
    if (genLabel.isReadOnly()) {
d215 1
a215 1
    }
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d219 1
a219 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d223 1
a223 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d225 1
a225 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a228 1
    stringBuffer.append(genHost.getUniqueIdentifier());
a229 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d231 1
a231 1
    if (isParentFlowLayout) {
d233 1
a233 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d235 1
a235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d245 1
a245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d263 201
d465 1
a465 1
    stringBuffer.append(TEXT_46);
@


1.22
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d38 26
a63 27
  protected final String TEXT_21 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();";
  protected final String TEXT_22 = NL + "\t\t\t";
  protected final String TEXT_23 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_24 = " hintAdapter = new ";
  protected final String TEXT_25 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_26 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_29 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_31 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_32 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_33 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_35 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_36 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_37 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_38 = " size = new ";
  protected final String TEXT_39 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_40 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_41 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_42 = " loc = new ";
  protected final String TEXT_43 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_44 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_45 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_46 = NL + "}";
  protected final String TEXT_47 = NL;
d70 1
d116 1
a116 10
    
GenCommonBase genHost;
if (genLabel instanceof GenNodeLabel) {
	genHost = ((GenNodeLabel) genLabel).getNode();
} else if (genLabel instanceof GenLinkLabel) {
	genHost = ((GenLinkLabel) genLabel).getLink();
} else {
	throw new IllegalArgumentException("Unknown label type: " + genLabel);
}

d118 1
a118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d124 1
a124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d126 1
a126 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d128 1
a128 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d132 1
a132 1
    if (isParentFlowLayout) {
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d150 1
a150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d154 1
a154 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d160 1
a160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d162 1
a162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d164 1
a164 1
    }
a165 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_47);
@


1.21
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d18 47
a64 44
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends TextCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t\tsetNumIcons(1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIcon(int index) {" + NL + "\t\tImageDescriptor descriptor = ";
  protected final String TEXT_7 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_10 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_11 = " figure = super.createFigure();" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_12 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_13 = ") figure).getText();" + NL + "\t\t} else if (figure instanceof ";
  protected final String TEXT_14 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_15 = ") figure).getText();" + NL + "\t\t}" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = super.getLabelText();" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL;
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_18 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();";
  protected final String TEXT_19 = NL + "\t\t\t";
  protected final String TEXT_20 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_21 = " hintAdapter = new ";
  protected final String TEXT_22 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_23 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_26 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_28 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_29 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_31 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_32 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_33 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_35 = " size = new ";
  protected final String TEXT_36 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_37 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_38 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_39 = " loc = new ";
  protected final String TEXT_40 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_41 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_42 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_43 = NL + "}";
  protected final String TEXT_44 = NL;
d75 4
a78 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d80 1
a80 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d82 1
a82 1
    importManager.markImportLocation(stringBuffer);
d84 1
a84 1
    stringBuffer.append(genLabel.getEditPartClassName());
d86 1
a86 1
    stringBuffer.append(genLabel.getEditPartClassName());
d88 1
a88 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d90 1
d92 1
d94 4
d99 1
a99 1
    stringBuffer.append(TEXT_10);
d101 1
a101 1
    stringBuffer.append(TEXT_11);
d103 1
a103 1
    stringBuffer.append(TEXT_12);
d105 1
a105 1
    stringBuffer.append(TEXT_13);
d107 1
a107 1
    stringBuffer.append(TEXT_14);
d109 1
a109 1
    stringBuffer.append(TEXT_15);
d111 1
a111 1
    stringBuffer.append(TEXT_16);
d113 1
a113 1
    stringBuffer.append(TEXT_17);
d115 1
a115 1
    stringBuffer.append(TEXT_18);
d126 1
a126 1
    stringBuffer.append(TEXT_19);
d128 1
a128 1
    stringBuffer.append(TEXT_20);
d130 1
a130 1
    stringBuffer.append(TEXT_21);
d132 1
a132 1
    stringBuffer.append(TEXT_22);
d134 1
a134 1
    stringBuffer.append(TEXT_23);
d136 1
a136 1
    stringBuffer.append(TEXT_24);
d138 1
a138 1
    stringBuffer.append(TEXT_25);
d140 1
a140 1
    stringBuffer.append(TEXT_26);
d142 1
a142 1
    stringBuffer.append(TEXT_27);
a143 6
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d151 1
a151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d153 1
a153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d157 4
d162 3
a164 1
    stringBuffer.append(TEXT_38);
d166 1
a166 1
    stringBuffer.append(TEXT_39);
d168 1
a168 1
    stringBuffer.append(TEXT_40);
d170 1
a170 1
    stringBuffer.append(TEXT_41);
d172 1
a172 1
    stringBuffer.append(TEXT_42);
d174 1
a174 1
    stringBuffer.append(TEXT_43);
d176 1
a176 1
    stringBuffer.append(TEXT_44);
@


1.20
log
@get editing domain from eobject
@
text
@d26 36
a61 33
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\treturn \"";
  protected final String TEXT_11 = "\";" + NL + "\t}";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = super.getLabelText();" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\treturn \"";
  protected final String TEXT_13 = "\";" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}";
  protected final String TEXT_14 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();";
  protected final String TEXT_16 = NL + "\t\t\t";
  protected final String TEXT_17 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_18 = " hintAdapter = new ";
  protected final String TEXT_19 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_20 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_21 = ".";
  protected final String TEXT_22 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_23 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_25 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_26 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_27 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_28 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_29 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_31 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_32 = " size = new ";
  protected final String TEXT_33 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_35 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_36 = " loc = new ";
  protected final String TEXT_37 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_38 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_39 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
a84 1
    if (genLabel.isReadOnly() || genLabel.getModelFacet() instanceof TextLabelModelFacet) {
d86 1
a86 5
    
}
if (genLabel.getModelFacet() instanceof TextLabelModelFacet) {
	TextLabelModelFacet modelFacet = (TextLabelModelFacet) genLabel.getModelFacet();

d88 1
a88 1
    stringBuffer.append(modelFacet.getText());
d90 1
a90 5
    
} else if (genLabel.getModelFacet() instanceof FeatureLabelModelFacet) {
	String defaultText = ((FeatureLabelModelFacet) genLabel.getModelFacet()).getDefaultText();
	if (defaultText != null) {

d92 1
a92 1
    stringBuffer.append(defaultText);
d94 1
a94 4
    
	}
}

d96 6
d103 1
a103 1
    stringBuffer.append(TEXT_15);
d114 1
a114 1
    stringBuffer.append(TEXT_16);
d116 1
a116 1
    stringBuffer.append(TEXT_17);
d118 1
a118 1
    stringBuffer.append(TEXT_18);
d120 1
a120 1
    stringBuffer.append(TEXT_19);
d122 1
a122 1
    stringBuffer.append(TEXT_20);
d124 1
a124 1
    stringBuffer.append(TEXT_21);
d126 1
a126 1
    stringBuffer.append(TEXT_22);
d128 1
a128 1
    stringBuffer.append(TEXT_23);
d130 1
a130 1
    stringBuffer.append(TEXT_24);
a131 6
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d139 1
a139 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d141 1
a141 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d145 6
d152 1
a152 1
    stringBuffer.append(TEXT_35);
d154 1
a154 1
    stringBuffer.append(TEXT_36);
d156 1
a156 1
    stringBuffer.append(TEXT_37);
d158 1
a158 1
    stringBuffer.append(TEXT_38);
d160 1
a160 1
    stringBuffer.append(TEXT_39);
d162 1
a162 1
    stringBuffer.append(TEXT_40);
d164 1
a164 1
    stringBuffer.append(TEXT_41);
@


1.19
log
@use new transactional emf api
@
text
@d39 20
a58 21
  protected final String TEXT_22 = ";" + NL + "\t\t\t\t\t\t} else if (";
  protected final String TEXT_23 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn getEditingDomain();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_24 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_26 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_27 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_28 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_29 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_30 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_31 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_32 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_33 = " size = new ";
  protected final String TEXT_34 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_35 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_36 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_37 = " loc = new ";
  protected final String TEXT_38 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_39 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_40 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_41 = NL + "}";
  protected final String TEXT_42 = NL;
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
d134 1
a134 1
    if (isParentFlowLayout) {
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d148 1
a148 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d152 1
a152 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d160 1
a160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d162 1
a162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d164 1
a164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d166 1
a166 1
    }
a167 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_42);
@


1.18
log
@Updating with new transaction API.
@
text
@d39 21
a59 20
  protected final String TEXT_22 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_23 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_25 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_26 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_27 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_28 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_29 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_31 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_32 = " size = new ";
  protected final String TEXT_33 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_35 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_36 = " loc = new ";
  protected final String TEXT_37 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_38 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_39 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
d131 2
d134 1
a134 1
    stringBuffer.append(TEXT_23);
d136 1
a136 1
    stringBuffer.append(TEXT_24);
a137 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d149 1
a149 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d153 1
a153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d157 1
a157 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d161 2
d164 1
a164 1
    stringBuffer.append(TEXT_38);
d166 1
a166 1
    stringBuffer.append(TEXT_39);
d168 1
a168 1
    stringBuffer.append(TEXT_40);
d170 1
a170 1
    stringBuffer.append(TEXT_41);
@


1.17
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d31 28
a58 18
  protected final String TEXT_14 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_15 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_16 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_17 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_18 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_19 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_20 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_21 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_22 = " size = new ";
  protected final String TEXT_23 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_24 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_25 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_26 = " loc = new ";
  protected final String TEXT_27 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_28 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_29 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_30 = NL + "}";
  protected final String TEXT_31 = NL;
d104 28
d133 1
a133 1
    stringBuffer.append(TEXT_14);
d135 1
a135 1
    stringBuffer.append(TEXT_15);
d137 1
a137 1
    stringBuffer.append(TEXT_16);
d139 1
a139 1
    stringBuffer.append(TEXT_17);
d141 1
a141 1
    stringBuffer.append(TEXT_18);
d143 1
a143 1
    stringBuffer.append(TEXT_19);
d145 1
a145 1
    stringBuffer.append(TEXT_20);
d147 1
a147 1
    stringBuffer.append(TEXT_21);
d149 1
a149 1
    stringBuffer.append(TEXT_22);
d151 1
a151 1
    stringBuffer.append(TEXT_23);
d153 1
a153 1
    stringBuffer.append(TEXT_24);
d155 1
a155 1
    stringBuffer.append(TEXT_25);
d157 1
a157 1
    stringBuffer.append(TEXT_26);
d159 1
a159 1
    stringBuffer.append(TEXT_27);
d161 1
a161 1
    stringBuffer.append(TEXT_28);
d163 1
a163 1
    stringBuffer.append(TEXT_29);
d165 1
a165 1
    stringBuffer.append(TEXT_30);
d167 1
a167 1
    stringBuffer.append(TEXT_31);
@


1.16
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d54 1
a54 1
GenNodeLabel genLabel = (GenNodeLabel) argument;
@


1.15
log
@#111949 Provide a possibility to invoke inplace for inner elements with empty name
@
text
@d69 1
a69 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.14
log
@#126533 It should be possible to specify a label with fixed text in gmfgen model
@
text
@d29 20
a48 18
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_13 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_14 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_15 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_16 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_17 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_18 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_19 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_20 = " size = new ";
  protected final String TEXT_21 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_22 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_23 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_24 = " loc = new ";
  protected final String TEXT_25 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_26 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_27 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_28 = NL + "}";
  protected final String TEXT_29 = NL;
d82 5
a86 2
    }
    if (isParentFlowLayout) {
d88 1
a88 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d90 5
a94 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d96 1
a96 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d106 4
d111 1
a111 1
    stringBuffer.append(TEXT_20);
d113 1
a113 1
    stringBuffer.append(TEXT_21);
d115 1
a115 1
    stringBuffer.append(TEXT_22);
d117 1
a117 1
    stringBuffer.append(TEXT_23);
d119 1
a119 1
    stringBuffer.append(TEXT_24);
d121 1
a121 1
    stringBuffer.append(TEXT_25);
d123 1
a123 1
    stringBuffer.append(TEXT_26);
d125 1
a125 1
    stringBuffer.append(TEXT_27);
d127 1
a127 1
    stringBuffer.append(TEXT_28);
d129 1
a129 1
    stringBuffer.append(TEXT_29);
@


1.13
log
@ImportManager moved to oeg.common
@
text
@d27 20
a46 18
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_11 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_12 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_13 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_14 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_15 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_16 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_17 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_18 = " size = new ";
  protected final String TEXT_19 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_20 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_21 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_22 = " loc = new ";
  protected final String TEXT_23 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_24 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_25 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_26 = NL + "}";
  protected final String TEXT_27 = NL;
d70 1
a70 1
    if (genLabel.isReadOnly()) {
d72 8
d82 1
a82 1
    stringBuffer.append(TEXT_10);
a83 4
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d93 4
d98 1
a98 1
    stringBuffer.append(TEXT_18);
d100 1
a100 1
    stringBuffer.append(TEXT_19);
d102 1
a102 1
    stringBuffer.append(TEXT_20);
d104 1
a104 1
    stringBuffer.append(TEXT_21);
d106 1
a106 1
    stringBuffer.append(TEXT_22);
d108 1
a108 1
    stringBuffer.append(TEXT_23);
d110 1
a110 1
    stringBuffer.append(TEXT_24);
d112 1
a112 1
    stringBuffer.append(TEXT_25);
d114 1
a114 1
    stringBuffer.append(TEXT_26);
d116 1
a116 1
    stringBuffer.append(TEXT_27);
@


1.12
log
@#125828 Generated code is bypassing parser service...
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.11
log
@#125729 Support labels based on multiple structural features
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d26 19
a44 44
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = " getParser() {" + NL + "\t\tif (parser == null) {";
  protected final String TEXT_11 = NL + "\t\t\tparser = new ";
  protected final String TEXT_12 = "(";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "().getEStructuralFeature(\"";
  protected final String TEXT_15 = "\"));";
  protected final String TEXT_16 = NL + "\t\t\t";
  protected final String TEXT_17 = " features = new ";
  protected final String TEXT_18 = "(";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t\tfeatures.add(";
  protected final String TEXT_21 = ".eINSTANCE.get";
  protected final String TEXT_22 = "().getEStructuralFeature(\"";
  protected final String TEXT_23 = "\"));";
  protected final String TEXT_24 = NL + "\t\t\tparser = new ";
  protected final String TEXT_25 = "(features);";
  protected final String TEXT_26 = "\t\t\t";
  protected final String TEXT_27 = NL + "\t\t\t((";
  protected final String TEXT_28 = ") parser).setViewPattern(\"";
  protected final String TEXT_29 = "\");";
  protected final String TEXT_30 = NL + "\t\t\t((";
  protected final String TEXT_31 = ") parser).setEditPattern(\"";
  protected final String TEXT_32 = "\");";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_34 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_36 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_37 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_38 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_39 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_40 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_41 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_42 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_43 = " size = new ";
  protected final String TEXT_44 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_45 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_46 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_47 = " loc = new ";
  protected final String TEXT_48 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_49 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_50 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_51 = NL + "}";
  protected final String TEXT_52 = NL;
a66 3
    
String accessorName = genLabel.getNode().getDomainMetaClass().getClassifierAccessorName();

d68 1
a68 6
    
{
	GenPackage genPackage = genDiagram.getDomainMetaModel();
	String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
	LabelModelFacet modelFacet = genLabel.getModelFacet();

d70 2
a71 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d73 1
a73 6
    
	String parserClassName;
	if (modelFacet instanceof FeatureModelFacet) {
		parserClassName = importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName());
		String featureName = ((FeatureModelFacet) modelFacet).getMetaFeature().getName();

d75 1
a75 1
    stringBuffer.append(parserClassName);
d77 1
a77 1
    stringBuffer.append(semanticPackageInterfaceName);
d79 1
a79 1
    stringBuffer.append(accessorName);
d81 1
a81 1
    stringBuffer.append(featureName);
d83 1
a83 5
    
	} else if (modelFacet instanceof CompositeFeatureModelFacet) {
		parserClassName = importManager.getImportedName(genDiagram.getStructuralFeaturesParserQualifiedClassName());
		java.util.List features = ((CompositeFeatureModelFacet) modelFacet).getMetaFeatures();

d85 1
a85 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d89 1
a89 1
    stringBuffer.append(features.size());
d91 1
a91 4
    
		for (java.util.Iterator it = features.iterator(); it.hasNext(); ) {
			String featureName = ((GenFeature) it.next()).getName();

d93 1
a93 1
    stringBuffer.append(semanticPackageInterfaceName);
d95 1
a95 1
    stringBuffer.append(accessorName);
d97 1
a97 1
    stringBuffer.append(featureName);
d99 1
a99 1
    		}
d101 1
a101 1
    stringBuffer.append(parserClassName);
d103 1
a103 5
    
	} else {
		throw new IllegalArgumentException();
	}

d105 1
a105 1
    	if (modelFacet.getViewPattern() != null && modelFacet.getViewPattern().length() != 0) {
a106 57
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(modelFacet.getViewPattern());
    stringBuffer.append(TEXT_29);
    
	}
	if (modelFacet.getEditPattern() != null && modelFacet.getEditPattern().length() != 0) {

    stringBuffer.append(TEXT_30);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(modelFacet.getEditPattern());
    stringBuffer.append(TEXT_32);
    	}
    stringBuffer.append(TEXT_33);
    	if (genLabel.isReadOnly()) {
    stringBuffer.append(TEXT_34);
    
	}
}

    if (isParentFlowLayout) {
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_50);
    }
    stringBuffer.append(TEXT_51);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_52);
@


1.10
log
@#125729 Support labels based on multiple structural features
@
text
@d28 43
a70 31
  protected final String TEXT_10 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = new ";
  protected final String TEXT_11 = "(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().getEStructuralFeature(\"";
  protected final String TEXT_14 = "\"));";
  protected final String TEXT_15 = NL + "\t\t\t((";
  protected final String TEXT_16 = ") parser).setViewPattern(\"";
  protected final String TEXT_17 = "\");";
  protected final String TEXT_18 = NL + "\t\t\t((";
  protected final String TEXT_19 = ") parser).setEditPattern(\"";
  protected final String TEXT_20 = "\");";
  protected final String TEXT_21 = NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_23 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_24 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_25 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_26 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_27 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_28 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_29 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_31 = " size = new ";
  protected final String TEXT_32 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_33 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_35 = " loc = new ";
  protected final String TEXT_36 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_37 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_38 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_39 = NL + "}";
  protected final String TEXT_40 = NL;
d101 1
a101 3
	FeatureModelFacet modelFacet = (FeatureModelFacet) genLabel.getModelFacet();
	String featureName = modelFacet.getMetaFeature().getName();
	String parserClassName = importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName());
d106 7
d114 24
a137 1
    stringBuffer.append(TEXT_11);
d139 1
a139 1
    stringBuffer.append(TEXT_12);
d141 1
a141 1
    stringBuffer.append(TEXT_13);
d143 11
a153 1
    stringBuffer.append(TEXT_14);
d155 1
a155 1
    stringBuffer.append(TEXT_15);
d157 1
a157 1
    stringBuffer.append(TEXT_16);
d159 1
a159 1
    stringBuffer.append(TEXT_17);
d164 1
a164 1
    stringBuffer.append(TEXT_18);
d166 1
a166 1
    stringBuffer.append(TEXT_19);
d168 1
a168 1
    stringBuffer.append(TEXT_20);
d170 1
a170 1
    stringBuffer.append(TEXT_21);
d172 1
a172 1
    stringBuffer.append(TEXT_22);
d178 1
a178 1
    stringBuffer.append(TEXT_23);
d180 1
a180 1
    stringBuffer.append(TEXT_24);
d182 1
a182 1
    stringBuffer.append(TEXT_25);
d184 1
a184 1
    stringBuffer.append(TEXT_26);
d186 1
a186 1
    stringBuffer.append(TEXT_27);
d188 1
a188 1
    stringBuffer.append(TEXT_28);
d190 1
a190 1
    stringBuffer.append(TEXT_29);
d192 1
a192 1
    stringBuffer.append(TEXT_30);
d194 1
a194 1
    stringBuffer.append(TEXT_31);
d196 1
a196 1
    stringBuffer.append(TEXT_32);
d198 1
a198 1
    stringBuffer.append(TEXT_33);
d200 1
a200 1
    stringBuffer.append(TEXT_34);
d202 1
a202 1
    stringBuffer.append(TEXT_35);
d204 1
a204 1
    stringBuffer.append(TEXT_36);
d206 1
a206 1
    stringBuffer.append(TEXT_37);
d208 1
a208 1
    stringBuffer.append(TEXT_38);
d210 1
a210 1
    stringBuffer.append(TEXT_39);
d212 1
a212 1
    stringBuffer.append(TEXT_40);
@


1.9
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.swt.graphics.Image;";
d26 33
a58 24
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = new ";
  protected final String TEXT_9 = "(";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "().getEStructuralFeature(\"";
  protected final String TEXT_12 = "\"));" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_14 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_15 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_16 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_17 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_18 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_19 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_20 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_21 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_22 = " size = new ";
  protected final String TEXT_23 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_24 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_25 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_26 = " loc = new ";
  protected final String TEXT_27 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_28 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_29 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_30 = NL + "}";
  protected final String TEXT_31 = NL;
d64 3
a66 3
GenNodeLabel label = (GenNodeLabel) argument;
GenDiagram genDiagram = label.getDiagram();
boolean isParentFlowLayout = !label.getNode().isListLayout();
d75 1
a75 1
    stringBuffer.append(label.getEditPartClassName());
d77 1
a77 1
    stringBuffer.append(label.getEditPartClassName());
d82 1
a82 3
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
String accessorName = label.getNode().getDomainMetaClass().getClassifierAccessorName();
d85 8
a92 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName()));
d94 1
a94 1
    stringBuffer.append(semanticPackageInterfaceName);
d96 1
a96 1
    stringBuffer.append(accessorName);
d98 1
a98 1
    stringBuffer.append(label.getMetaFeature().getName());
d100 1
a100 1
    if (label.isReadOnly()) {
d102 21
d124 1
a125 1
if (isParentFlowLayout) {
d127 2
a128 1
    stringBuffer.append(TEXT_14);
d130 1
a130 1
    stringBuffer.append(TEXT_15);
d132 1
a132 1
    stringBuffer.append(TEXT_16);
d134 1
a134 1
    stringBuffer.append(TEXT_17);
d136 1
a136 1
    stringBuffer.append(TEXT_18);
d138 1
a138 1
    stringBuffer.append(TEXT_19);
d140 1
a140 1
    stringBuffer.append(TEXT_20);
d142 1
a142 1
    stringBuffer.append(TEXT_21);
d144 1
a144 1
    stringBuffer.append(TEXT_22);
d146 1
a146 1
    stringBuffer.append(TEXT_23);
d148 1
a148 1
    stringBuffer.append(TEXT_24);
d150 1
a150 1
    stringBuffer.append(TEXT_25);
d152 1
a152 1
    stringBuffer.append(TEXT_26);
d154 1
a154 1
    stringBuffer.append(TEXT_27);
d156 1
a156 1
    stringBuffer.append(TEXT_28);
d158 3
a160 5
    stringBuffer.append(TEXT_29);
    
}

    stringBuffer.append(TEXT_30);
d162 1
a162 1
    stringBuffer.append(TEXT_31);
@


1.8
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d70 1
a70 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
@


1.7
log
@#123274 support read only labels
@
text
@d57 1
a57 1
boolean isParentFlowLayout = label.getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL;
@


1.6
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d31 19
a49 18
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_14 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_15 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_16 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_17 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_18 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_19 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_20 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_21 = " size = new ";
  protected final String TEXT_22 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_23 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_24 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_25 = " loc = new ";
  protected final String TEXT_26 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_27 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_28 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_29 = NL + "}";
  protected final String TEXT_30 = NL;
d86 2
d89 1
d92 1
a92 1
    stringBuffer.append(TEXT_13);
a93 2
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d105 1
a105 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d109 1
a109 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d113 1
a113 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d117 2
d120 1
a120 1
    stringBuffer.append(TEXT_27);
d122 1
a122 1
    stringBuffer.append(TEXT_28);
d126 1
a126 1
    stringBuffer.append(TEXT_29);
d128 1
a128 1
    stringBuffer.append(TEXT_30);
@


1.5
log
@#116031 avoid hardcoded class names in templates
@
text
@d30 19
a48 2
  protected final String TEXT_12 = "\"));" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
d56 1
d85 38
d124 1
a124 1
    stringBuffer.append(TEXT_13);
@


1.4
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@d21 7
a27 7
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import ";
  protected final String TEXT_4 = ".StructuralFeatureParser;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends TextCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t\tsetNumIcons(1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIcon(int index) {" + NL + "\t\tImageDescriptor descriptor = ";
  protected final String TEXT_8 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = new StructuralFeatureParser(";
d45 1
a45 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d47 1
a47 1
    importManager.markImportLocation(stringBuffer);
d51 1
a51 1
    stringBuffer.append(label.getEditPartClassName());
a52 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_8);
d58 2
@


1.3
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d58 1
a58 1
String semanticNodeInterfaceName = label.getNode().getDomainMetaClass().getName();
d63 1
a63 1
    stringBuffer.append(semanticNodeInterfaceName);
@


1.2
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d22 10
a31 12
  protected final String TEXT_4 = ".";
  protected final String TEXT_5 = ";" + NL + "import ";
  protected final String TEXT_6 = ".StructuralFeatureParser;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends TextCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t\tsetNumIcons(1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Image getLabelIcon(int index) {" + NL + "\t\tImageDescriptor descriptor = ";
  protected final String TEXT_10 = ".getInstance().getItemImageDescriptor(resolveSemanticElement());" + NL + "\t\tif (descriptor == null) {" + NL + "\t\t\tdescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t}" + NL + "\t\treturn descriptor.createImage();" + NL + "\t}";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().getEStructuralFeature(\"";
  protected final String TEXT_14 = "\"));" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_15 = NL;
d37 2
a38 2
GenNode genNode = (GenNode) argument;
GenDiagram genDiagram = genNode.getDiagram();
d45 1
a45 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d47 1
a47 1
    stringBuffer.append(genDiagram.getPluginClassName());
d49 1
a49 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d51 1
a51 1
    importManager.markImportLocation(stringBuffer);
d53 1
a53 1
    stringBuffer.append(AccessUtil.getNodeLabelEditPartClassName(genNode));
a54 4
    stringBuffer.append(AccessUtil.getNodeLabelEditPartClassName(genNode));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genDiagram.getPluginClassName());
    stringBuffer.append(TEXT_10);
d58 1
a58 1
String semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
d60 4
d65 1
a65 1
    stringBuffer.append(semanticPackageInterfaceName);
d67 1
a67 1
    stringBuffer.append(semanticNodeInterfaceName);
a68 4
    stringBuffer.append(genNode.getDomainNameFeature().getName());
    stringBuffer.append(TEXT_14);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_15);
@


1.1
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d51 1
a51 1
    stringBuffer.append(genDiagram.getEditProvidersPackageName());
@

