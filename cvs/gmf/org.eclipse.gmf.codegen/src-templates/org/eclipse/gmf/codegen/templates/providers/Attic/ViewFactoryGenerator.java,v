head	1.59;
access;
symbols
	v20081022-1925:1.59
	v20081015-1925:1.59
	v20081008-1925:1.59
	v20081001-1925:1.59
	v20080924-1925:1.59
	v20080917-1925:1.59
	v20080911-1728:1.59
	v20080910-1520:1.59
	v20080903-1520:1.59
	v20080827-1520:1.59
	v20080813-1520:1.59
	v20080806-1520:1.59
	v20070601-1400:1.55
	v20070525-1500:1.54
	v20070520-1200:1.54
	v20070518-1300:1.53
	v20070504-1000:1.51
	v20070427-0600:1.51
	v20070420-1000:1.49
	v20070413-1300:1.49
	v20070405-1100:1.49
	v20070403-1500:1.49
	v20070330-1300:1.49
	v20060330-1300:1.49
	v20070322-1100:1.49
	v20060316-0600:1.49
	v20070307-0700:1.49
	v20070301-1200:1.49
	v20070228-2000:1.49
	v20070221-1500:1.49
	v20070208-1800:1.49
	v20070202-0200:1.47
	v20070103-0300:1.49
	M4_20:1.49
	v20061222-1800:1.49
	v20061218-1200:1.49
	v20061214-0000:1.49
	v20061120-1300:1.49
	M3_20:1.49
	v20061117-0800:1.49
	v20061027-1200:1.47
	v20061020-1000:1.47
	v20061013-1330:1.48
	v20060919-0800:1.47
	v20060907-1100:1.47
	M1_20:1.47
	v20060904-1500:1.47
	v20060824-1600:1.47
	v20060817-1500:1.47
	v20060728-0500:1.47
	v20060713-1700:1.47
	R1_0_maintenance:1.47.0.2
	R1_0:1.47
	v20060627-1200:1.47
	v20060626-1420:1.47
	v20060620-0400:1.45
	v20060616-1400:1.44
	v20060616-1200:1.44
	v20060609-1400:1.44
	v20060531-1730:1.41
	v20060530-1930:1.41
	v20060526-1200:1.40
	v20060519-1300:1.40
	v20060519-0800:1.40
	v20060512-1000:1.38
	I20060512-1000:1.38
	I20060505-1400:1.37
	I20060428-1300:1.37
	I20060424-0500:1.36
	I20060424-0300:1.36
	M6_10:1.35
	I20060407-1200:1.30
	I20060331-1000:1.29
	I20060324-0300:1.29
	I20060317-1300:1.29
	I20060317-1200:1.29
	I20060316-1300:1.29
	I20060309-1300:1.27
	M5_10:1.26
	S20060303-1600:1.26
	I20060227-1730:1.24
	I20060216-1945:1.24
	I20060210-1715:1.23
	I20060209-1815:1.23
	I20060203-0830:1.19
	I20060202-1415:1.19
	I20060129-1145:1.19
	I20060127-0900:1.19
	I20060120-1530:1.19
	I20060113-1700:1.18
	M4_10:1.18
	I20060107-1100:1.16
	I20060105-1630:1.16
	I20051230-1230:1.16
	I20051223-1100:1.16
	I20051217-0925:1.15
	I20051208-2000:1.14
	I20051201-1800:1.14
	I20051124-2000:1.14
	M3_10:1.13
	I20051118-1245:1.13
	I20051111-1800:1.11
	I20051106-0900:1.10
	v20051030:1.8;
locks; strict;
comment	@# @;
expand	@k@;


1.59
date	2007.06.04.17.14.38;	author dstadnik;	state dead;
branches;
next	1.58;
commitid	54d4664487d4567;

1.58
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.57;
commitid	17ef46643bcf4567;

1.57
date	2007.06.04.15.56.46;	author dstadnik;	state Exp;
branches;
next	1.56;
commitid	20bf4664363d4567;

1.56
date	2007.06.04.15.13.45;	author dstadnik;	state Exp;
branches;
next	1.55;
commitid	27ac46642c284567;

1.55
date	2007.05.28.16.52.23;	author ashatalin;	state Exp;
branches;
next	1.54;
commitid	51cb465b08c54567;

1.54
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.53;
commitid	7de14650454a4567;

1.53
date	2007.05.18.14.56.13;	author dstadnik;	state Exp;
branches;
next	1.52;
commitid	36ed464dbe8c4567;

1.52
date	2007.05.18.10.36.21;	author atikhomirov;	state Exp;
branches;
next	1.51;
commitid	a70464d81a44567;

1.51
date	2007.04.26.13.20.22;	author atikhomirov;	state Exp;
branches;
next	1.50;
commitid	5a4f4630a7154567;

1.50
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.49;
commitid	78b462dc68e4567;

1.49
date	2006.10.24.14.49.08;	author ashatalin;	state Exp;
branches;
next	1.48;

1.48
date	2006.10.03.18.11.00;	author atikhomirov;	state Exp;
branches;
next	1.47;

1.47
date	2006.06.26.13.46.43;	author dstadnik;	state Exp;
branches;
next	1.46;

1.46
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.06.19.12.42.03;	author ashatalin;	state Exp;
branches;
next	1.44;

1.44
date	2006.06.06.17.48.31;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.42;

1.42
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.41;

1.41
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.39;

1.39
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.25.12.35.22;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.33;

1.33
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.30;

1.30
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.03.10.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.03.01.19.58.25;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.14.18.22.55;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.24.12.16.33;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.21.13.31.57;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.59
log
@rewrite node view factory generator in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.codegen.gmfgen.util.*;

public class ViewFactoryGenerator
{
  protected static String nl;
  public static synchronized ViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ViewFactoryGenerator result = new ViewFactoryGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = NL + "\t";
  protected final String TEXT_7 = NL + "\t";
  protected final String TEXT_8 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_9 = " styles = new ";
  protected final String TEXT_10 = "();";
  protected final String TEXT_11 = NL + "\t\tstyles.add(";
  protected final String TEXT_12 = ".eINSTANCE.createShapeStyle());";
  protected final String TEXT_13 = NL + "\t\tstyles.add(";
  protected final String TEXT_14 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_15 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_16 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_17 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_18 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_19 = ".getType(";
  protected final String TEXT_20 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_21 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tif (!";
  protected final String TEXT_22 = ".MODEL_ID.equals(";
  protected final String TEXT_23 = ".getModelID(containerView))) {";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = "\t\t\t";
  protected final String TEXT_26 = " shortcutAnnotation = ";
  protected final String TEXT_27 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_28 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_31 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_32 = ".colorToInteger(";
  protected final String TEXT_33 = ".";
  protected final String TEXT_34 = "));";
  protected final String TEXT_35 = NL + "\t\t";
  protected final String TEXT_36 = " diagramFacet = ";
  protected final String TEXT_37 = ".eINSTANCE.createHintedDiagramLinkStyle();";
  protected final String TEXT_38 = NL + "\t\tdiagramFacet.setHint(\"";
  protected final String TEXT_39 = "\"); // $NON-NLS-1$";
  protected final String TEXT_40 = NL + "\t\tview.getStyles().add(diagramFacet);";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_43 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_44 = ".colorToInteger(";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = "));";
  protected final String TEXT_47 = NL + "\torg.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);" + NL + "\tIAdaptable eObjectAdapter = eObject != null ? new ";
  protected final String TEXT_48 = "(eObject) : null;";
  protected final String TEXT_49 = NL + "\tIAdaptable eObjectAdapter = null;";
  protected final String TEXT_50 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_51 = ".getType(";
  protected final String TEXT_52 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_53 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_54 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_55 = ".getType(";
  protected final String TEXT_56 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_57 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_58 = NL + "\t}" + NL + "}";
  protected final String TEXT_59 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genElement.getDiagram();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

importManager.markImportLocation(stringBuffer);

final boolean isLabel = genElement instanceof GenChildLabelNode;
final boolean isShape = !isLabel;
final boolean isNode = true;

Viewmap viewmap = genElement.getViewmap();
StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
boolean fixedForeground = styleAttributes != null && styleAttributes.isFixedForeground();
boolean fixedFont = styleAttributes != null && styleAttributes.isFixedFont();

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_5);
    if (isLabel) {
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory"));
    } else if (isShape) {
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractShapeViewFactory"));
    } else {
	throw new IllegalStateException("Unknown case for " + genElement);
}
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_10);
    
if (isShape) {
	if (!fixedFont) {
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_12);
    	} else { /*all but font style*/
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_16);
    	}
}

    stringBuffer.append(TEXT_17);
    /* [++] important for the create shortcut functionality*/
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
    stringBuffer.append(TEXT_20);
    /* [--] important for the create shortcut functionality*/
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    
ColorAttributes colorAttrs = genElement.getViewmap() != null ? (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class) : null;
if (colorAttrs != null && colorAttrs.getForegroundColor() != null && colorAttrs.getForegroundColor().trim().length() > 0) {
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(colorAttrs.getForegroundColor());
    stringBuffer.append(TEXT_34);
    
}
if (isNode) {
	GenNode genNode = (GenNode) genElement;
	if (genNode.getBehaviour(OpenDiagramBehaviour.class).size() == 1) /*XXX perhaps, add size() linkStyles with different hints and process them with single policy?*/ {
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_37);
    	if (genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getDiagramKind() != null) {
    stringBuffer.append(TEXT_38);
    stringBuffer.append(genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getDiagramKind());
    stringBuffer.append(TEXT_39);
    	}
    stringBuffer.append(TEXT_40);
    	}
	if (colorAttrs != null && colorAttrs.getBackgroundColor() != null && colorAttrs.getBackgroundColor().trim().length() > 0) {
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(colorAttrs.getBackgroundColor());
    stringBuffer.append(TEXT_46);
    
	}
	List labels = genNode.getLabels();
	List genChildContainers = genNode.getCompartments();
	if (labels.size() > 0 || genChildContainers.size() > 0) {
		if (genNode.getModelFacet() != null) {

    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_48);
    
		} else {

    stringBuffer.append(TEXT_49);
    
		}
	}	
	for (int j = 0; j < labels.size(); j++) {
		GenNodeLabel label = (GenNodeLabel) labels.get(j);

    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_53);
    
	}
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenCompartment genChildContainer = (GenCompartment) genChildContainers.get(j);

    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genChildContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_57);
    
	}
}

    stringBuffer.append(TEXT_58);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_59);
    return stringBuffer.toString();
  }
}
@


1.58
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.57
log
@rewrite link view factory generator in xpand
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.56
log
@rewrite compartment view factory generator in xpand
@
text
@d27 52
a78 66
  protected final String TEXT_8 = NL + "\t";
  protected final String TEXT_9 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_10 = " styles = new ";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t\tstyles.add(";
  protected final String TEXT_13 = ".eINSTANCE.createConnectorStyle());";
  protected final String TEXT_14 = NL + "\t\tstyles.add(";
  protected final String TEXT_15 = ".eINSTANCE.createRoutingStyle());";
  protected final String TEXT_16 = NL + "\t\tstyles.add(";
  protected final String TEXT_17 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_18 = NL + "\t\tstyles.add(";
  protected final String TEXT_19 = ".eINSTANCE.createShapeStyle());";
  protected final String TEXT_20 = NL + "\t\tstyles.add(";
  protected final String TEXT_21 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_22 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_23 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_24 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_25 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_26 = ".getType(";
  protected final String TEXT_27 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_28 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tif (!";
  protected final String TEXT_29 = ".MODEL_ID.equals(";
  protected final String TEXT_30 = ".getModelID(containerView))) {";
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = "\t\t\t";
  protected final String TEXT_33 = " shortcutAnnotation = ";
  protected final String TEXT_34 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_35 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\t";
  protected final String TEXT_37 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_38 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_39 = ".colorToInteger(";
  protected final String TEXT_40 = ".";
  protected final String TEXT_41 = "));";
  protected final String TEXT_42 = NL + "\t\t";
  protected final String TEXT_43 = " diagramFacet = ";
  protected final String TEXT_44 = ".eINSTANCE.createHintedDiagramLinkStyle();";
  protected final String TEXT_45 = NL + "\t\tdiagramFacet.setHint(\"";
  protected final String TEXT_46 = "\"); // $NON-NLS-1$";
  protected final String TEXT_47 = NL + "\t\tview.getStyles().add(diagramFacet);";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_50 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_51 = ".colorToInteger(";
  protected final String TEXT_52 = ".";
  protected final String TEXT_53 = "));";
  protected final String TEXT_54 = NL + "\torg.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);" + NL + "\tIAdaptable eObjectAdapter = eObject != null ? new ";
  protected final String TEXT_55 = "(eObject) : null;";
  protected final String TEXT_56 = NL + "\tIAdaptable eObjectAdapter = null;";
  protected final String TEXT_57 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_58 = ".getType(";
  protected final String TEXT_59 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_60 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_61 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_62 = ".getType(";
  protected final String TEXT_63 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_64 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_65 = NL + "\torg.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);" + NL + "\tIAdaptable eObjectAdapter = eObject != null ? new ";
  protected final String TEXT_66 = "(eObject) : null;";
  protected final String TEXT_67 = NL + "\tIAdaptable eObjectAdapter = null;";
  protected final String TEXT_68 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_69 = ".getType(";
  protected final String TEXT_70 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_71 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_72 = NL + "\t}" + NL + "}";
  protected final String TEXT_73 = NL;
a103 1
final boolean isLink = genElement instanceof GenLink;
d105 2
a106 2
final boolean isShape = !isLink && !isLabel; // captures else
final boolean isNode = !isLink;
d116 1
a116 1
    if (isLink) {
a117 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.ConnectionViewFactory"));
    } else if (isLabel) {
    stringBuffer.append(TEXT_7);
d120 1
a120 1
    stringBuffer.append(TEXT_8);
d125 2
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d130 3
a132 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d134 1
a134 2
    if (isLink) {
    	if (!fixedForeground) {
d136 2
a138 2
    stringBuffer.append(TEXT_13);
    	} else { /*only routing, no line style*/ 
d142 1
a142 2
    	} 
    	if (!fixedFont) {
a143 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_17);
a144 5
    
} /*isLink*/
if (isLabel) {
	//no styles for label
	//FIXME: throw new IllegalStateExcpetion("Labels to be processed in the LabelTextViewFactory/LabelViewFactory");
a145 1
if (isShape) {
d147 2
a148 1
    	if (!fixedFont) {
d150 1
a150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d152 1
a152 1
    	} else { /*all but font style*/
d154 1
a154 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a159 2
    	}
} /*isShape*/ 
a160 1
    /* [++] important for the create shortcut functionality*/
d162 1
a162 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d164 1
a164 1
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
d166 1
a166 1
    /* [--] important for the create shortcut functionality*/
a167 12
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_35);
d171 1
a171 1
    stringBuffer.append(TEXT_36);
d173 1
a173 1
    stringBuffer.append(TEXT_37);
d175 1
a175 1
    stringBuffer.append(TEXT_38);
d177 1
a177 1
    stringBuffer.append(TEXT_39);
d179 1
a179 1
    stringBuffer.append(TEXT_40);
d181 1
a181 1
    stringBuffer.append(TEXT_41);
d187 1
a187 1
    stringBuffer.append(TEXT_42);
d189 1
a189 1
    stringBuffer.append(TEXT_43);
d191 1
a191 1
    stringBuffer.append(TEXT_44);
d193 1
a193 1
    stringBuffer.append(TEXT_45);
d195 1
a195 1
    stringBuffer.append(TEXT_46);
d197 1
a197 1
    stringBuffer.append(TEXT_47);
d200 1
a200 1
    stringBuffer.append(TEXT_48);
d202 1
a202 1
    stringBuffer.append(TEXT_49);
d204 1
a204 1
    stringBuffer.append(TEXT_50);
d206 1
a206 1
    stringBuffer.append(TEXT_51);
d208 1
a208 1
    stringBuffer.append(TEXT_52);
d210 1
a210 1
    stringBuffer.append(TEXT_53);
d218 1
a218 1
    stringBuffer.append(TEXT_54);
d220 1
a220 1
    stringBuffer.append(TEXT_55);
d224 1
a224 1
    stringBuffer.append(TEXT_56);
d231 1
a231 1
    stringBuffer.append(TEXT_57);
d233 1
a233 1
    stringBuffer.append(TEXT_58);
d235 1
a235 1
    stringBuffer.append(TEXT_59);
d237 1
a237 1
    stringBuffer.append(TEXT_60);
d243 1
a243 1
    stringBuffer.append(TEXT_61);
d245 1
a245 1
    stringBuffer.append(TEXT_62);
d247 1
a247 1
    stringBuffer.append(TEXT_63);
d249 1
a249 29
    stringBuffer.append(TEXT_64);
    
	}
} else if (isLink) {
	GenLink genLink = (GenLink) genElement;
	List labels = genLink.getLabels();
	if (labels.size() > 0) {
		if (genLink.getModelFacet() != null) {

    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_66);
    
		} else {

    stringBuffer.append(TEXT_67);
    
		}
	}	
	for (int j = 0; j < labels.size(); j++) {
		GenLinkLabel label = (GenLinkLabel) labels.get(j);

    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_71);
d254 1
a254 1
    stringBuffer.append(TEXT_72);
d256 1
a256 1
    stringBuffer.append(TEXT_73);
@


1.55
log
@- ViewProvider is in xpand now.
- Separating semantic part of VisualIDRegistry from pure-notation.
@
text
@d27 66
a92 95
  protected final String TEXT_8 = NL + "    ";
  protected final String TEXT_9 = NL + "\t";
  protected final String TEXT_10 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_11 = " styles = new ";
  protected final String TEXT_12 = "();";
  protected final String TEXT_13 = NL + "\t\tstyles.add(";
  protected final String TEXT_14 = ".eINSTANCE.createConnectorStyle());";
  protected final String TEXT_15 = NL + "\t\tstyles.add(";
  protected final String TEXT_16 = ".eINSTANCE.createRoutingStyle());";
  protected final String TEXT_17 = NL + "\t\tstyles.add(";
  protected final String TEXT_18 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_19 = NL + "\t\tstyles.add(";
  protected final String TEXT_20 = ".eINSTANCE.createDrawerStyle());";
  protected final String TEXT_21 = NL + "\t\tstyles.add(";
  protected final String TEXT_22 = ".eINSTANCE.createTitleStyle());";
  protected final String TEXT_23 = "\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_24 = ".eINSTANCE.createSortingStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_25 = ".eINSTANCE.createFilteringStyle());";
  protected final String TEXT_26 = NL + "\t\tstyles.add(";
  protected final String TEXT_27 = ".eINSTANCE.createShapeStyle());";
  protected final String TEXT_28 = NL + "\t\tstyles.add(";
  protected final String TEXT_29 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_30 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_31 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_32 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_33 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_34 = ".getType(";
  protected final String TEXT_35 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_37 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_38 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_39 = ".MODEL_ID.equals(";
  protected final String TEXT_40 = ".getModelID(containerView))) {";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = "\t\t\t";
  protected final String TEXT_43 = " shortcutAnnotation = ";
  protected final String TEXT_44 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_45 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_46 = NL + "\t\t";
  protected final String TEXT_47 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_48 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_49 = ".colorToInteger(";
  protected final String TEXT_50 = ".";
  protected final String TEXT_51 = "));";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = " diagramFacet = ";
  protected final String TEXT_54 = ".eINSTANCE.createHintedDiagramLinkStyle();";
  protected final String TEXT_55 = NL + "\t\tdiagramFacet.setHint(\"";
  protected final String TEXT_56 = "\"); // $NON-NLS-1$";
  protected final String TEXT_57 = NL + "\t\tview.getStyles().add(diagramFacet);";
  protected final String TEXT_58 = NL + "\t\t";
  protected final String TEXT_59 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_60 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_61 = ".colorToInteger(";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "));";
  protected final String TEXT_64 = NL + "\torg.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);" + NL + "\tIAdaptable eObjectAdapter = eObject != null ? new ";
  protected final String TEXT_65 = "(eObject) : null;";
  protected final String TEXT_66 = NL + "\tIAdaptable eObjectAdapter = null;";
  protected final String TEXT_67 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_68 = ".getType(";
  protected final String TEXT_69 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_70 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_71 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_72 = ".getType(";
  protected final String TEXT_73 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_74 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_75 = NL + "\torg.eclipse.emf.ecore.EObject eObject = (org.eclipse.emf.ecore.EObject) semanticAdapter.getAdapter(org.eclipse.emf.ecore.EObject.class);" + NL + "\tIAdaptable eObjectAdapter = eObject != null ? new ";
  protected final String TEXT_76 = "(eObject) : null;";
  protected final String TEXT_77 = NL + "\tIAdaptable eObjectAdapter = null;";
  protected final String TEXT_78 = NL + "\t\tgetViewService().createNode(eObjectAdapter, view, ";
  protected final String TEXT_79 = ".getType(";
  protected final String TEXT_80 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_81 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_82 = NL + "\t}";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_84 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_85 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_86 = " store = (";
  protected final String TEXT_87 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_88 = " fillRGB = ";
  protected final String TEXT_89 = ".getColor(store, ";
  protected final String TEXT_90 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_91 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_92 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_93 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_94 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_95 = " titleStyle = (";
  protected final String TEXT_96 = ")view.getStyle(";
  protected final String TEXT_97 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_98 = " drawerStyle = (";
  protected final String TEXT_99 = ")view.getStyle(";
  protected final String TEXT_100 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_101 = NL + "}";
  protected final String TEXT_102 = NL;
d120 2
a121 11
final boolean isDiagram = genElement instanceof GenDiagram;
final boolean isCompartment = genElement instanceof GenCompartment;
final boolean isShape = !isLink && !isLabel && !isDiagram && !isCompartment; // captures else
assert isLink || isLabel || isDiagram || isCompartment || isShape;

final boolean isNode = !isLink && !isDiagram && !isCompartment;
boolean isCompartmentWithOwnBounds = false;
if (isCompartment){
	GenCompartment genCompartment = (GenCompartment)genElement;
	isCompartmentWithOwnBounds = ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode());
}
d137 1
a137 1
    } else if (isCompartment) {
a138 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.ListCompartmentViewFactory"));
    } else if (isShape) {
    stringBuffer.append(TEXT_9);
d143 2
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a147 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_12);
d150 2
d153 2
a155 2
    stringBuffer.append(TEXT_14);
    	} else { /*only routing, no line style*/ 
a156 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_16);
d159 2
a161 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_18);
d169 1
a169 3
if (isCompartment) {
	GenCompartment genCompartment = (GenCompartment)genElement;
	if (genCompartment.isCanCollapse()) {
d171 3
d175 2
a177 5
    stringBuffer.append(TEXT_20);
    
	}
	if (genCompartment.isNeedsTitle()) {

d181 2
d184 1
a184 2
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d186 1
a186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d188 1
a188 5
    
}
if (isShape || isCompartmentWithOwnBounds) {

    	if (!fixedFont) {
d190 1
a190 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d192 1
a192 1
    	} else { /*all but font style*/
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d196 1
a196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a197 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a198 2
    	}
} /*isShape || isCompartmentWithOwnBounds*/ 
d200 1
a200 1
    /* [++] important for the create shortcut functionality*/
d202 1
a202 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d204 1
a204 1
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
a205 18
    /* [--] important for the create shortcut functionality*/
    stringBuffer.append(TEXT_36);
    	if (isCompartment){
    stringBuffer.append(TEXT_37);
    	}
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_45);
d209 1
a209 1
    stringBuffer.append(TEXT_46);
d211 1
a211 1
    stringBuffer.append(TEXT_47);
d213 1
a213 1
    stringBuffer.append(TEXT_48);
d215 1
a215 1
    stringBuffer.append(TEXT_49);
d217 1
a217 1
    stringBuffer.append(TEXT_50);
d219 1
a219 1
    stringBuffer.append(TEXT_51);
d225 1
a225 1
    stringBuffer.append(TEXT_52);
d227 1
a227 1
    stringBuffer.append(TEXT_53);
d229 1
a229 1
    stringBuffer.append(TEXT_54);
d231 1
a231 1
    stringBuffer.append(TEXT_55);
d233 1
a233 1
    stringBuffer.append(TEXT_56);
d235 1
a235 1
    stringBuffer.append(TEXT_57);
d238 1
a238 1
    stringBuffer.append(TEXT_58);
d240 1
a240 1
    stringBuffer.append(TEXT_59);
d242 1
a242 1
    stringBuffer.append(TEXT_60);
d244 1
a244 1
    stringBuffer.append(TEXT_61);
d246 1
a246 1
    stringBuffer.append(TEXT_62);
d248 1
a248 1
    stringBuffer.append(TEXT_63);
d256 1
a256 1
    stringBuffer.append(TEXT_64);
d258 1
a258 1
    stringBuffer.append(TEXT_65);
d262 1
a262 1
    stringBuffer.append(TEXT_66);
d269 1
a269 1
    stringBuffer.append(TEXT_67);
d271 1
a271 1
    stringBuffer.append(TEXT_68);
d273 1
a273 1
    stringBuffer.append(TEXT_69);
d275 1
a275 1
    stringBuffer.append(TEXT_70);
d281 1
a281 1
    stringBuffer.append(TEXT_71);
d283 1
a283 1
    stringBuffer.append(TEXT_72);
d285 1
a285 1
    stringBuffer.append(TEXT_73);
d287 1
a287 1
    stringBuffer.append(TEXT_74);
d296 1
a296 1
    stringBuffer.append(TEXT_75);
d298 1
a298 1
    stringBuffer.append(TEXT_76);
d302 1
a302 1
    stringBuffer.append(TEXT_77);
d309 1
a309 1
    stringBuffer.append(TEXT_78);
d311 1
a311 1
    stringBuffer.append(TEXT_79);
d313 1
a313 1
    stringBuffer.append(TEXT_80);
d315 1
a315 1
    stringBuffer.append(TEXT_81);
d320 1
a320 44
    stringBuffer.append(TEXT_82);
    if (isCompartmentWithOwnBounds) {
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LayoutConstraint"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.RGB"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
    stringBuffer.append(TEXT_93);
    }
if (isCompartment) {
	String titleStyleFQN = importManager.getImportedName("org.eclipse.gmf.runtime.notation.TitleStyle");
	String drawerStyleFQN = importManager.getImportedName("org.eclipse.gmf.runtime.notation.DrawerStyle");	
	String notationPackageFQN = importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage");

    stringBuffer.append(TEXT_94);
    stringBuffer.append(titleStyleFQN);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(titleStyleFQN);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(notationPackageFQN);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(drawerStyleFQN);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(drawerStyleFQN);
    stringBuffer.append(TEXT_99);
    stringBuffer.append(notationPackageFQN);
    stringBuffer.append(TEXT_100);
    }
    stringBuffer.append(TEXT_101);
d322 1
a322 1
    stringBuffer.append(TEXT_102);
@


1.54
log
@Anna Karyakina's migration fix
@
text
@d83 39
a121 33
  protected final String TEXT_64 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_65 = ".getType(";
  protected final String TEXT_66 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_67 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_68 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_69 = ".getType(";
  protected final String TEXT_70 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_71 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_72 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_73 = ".getType(";
  protected final String TEXT_74 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_75 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_76 = NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_78 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_79 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_80 = " store = (";
  protected final String TEXT_81 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_82 = " fillRGB = ";
  protected final String TEXT_83 = ".getColor(store, ";
  protected final String TEXT_84 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_85 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_86 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_87 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_88 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_89 = " titleStyle = (";
  protected final String TEXT_90 = ")view.getStyle(";
  protected final String TEXT_91 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_92 = " drawerStyle = (";
  protected final String TEXT_93 = ")view.getStyle(";
  protected final String TEXT_94 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_95 = NL + "}";
  protected final String TEXT_96 = NL;
d317 15
a332 1
	List labels = genNode.getLabels();
d336 1
a336 1
    stringBuffer.append(TEXT_64);
d338 1
a338 1
    stringBuffer.append(TEXT_65);
d340 1
a340 1
    stringBuffer.append(TEXT_66);
d342 1
a342 1
    stringBuffer.append(TEXT_67);
a344 1
	List genChildContainers = genNode.getCompartments();
d348 1
a348 1
    stringBuffer.append(TEXT_68);
d350 1
a350 1
    stringBuffer.append(TEXT_69);
d352 1
a352 1
    stringBuffer.append(TEXT_70);
d354 1
a354 1
    stringBuffer.append(TEXT_71);
d360 13
d376 1
a376 1
    stringBuffer.append(TEXT_72);
d378 1
a378 1
    stringBuffer.append(TEXT_73);
d380 1
a380 1
    stringBuffer.append(TEXT_74);
d382 1
a382 1
    stringBuffer.append(TEXT_75);
d387 1
a387 1
    stringBuffer.append(TEXT_76);
d389 1
a389 1
    stringBuffer.append(TEXT_77);
d391 1
a391 1
    stringBuffer.append(TEXT_78);
d393 1
a393 1
    stringBuffer.append(TEXT_79);
d395 1
a395 1
    stringBuffer.append(TEXT_80);
d397 1
a397 1
    stringBuffer.append(TEXT_81);
d399 1
a399 1
    stringBuffer.append(TEXT_82);
d401 1
a401 1
    stringBuffer.append(TEXT_83);
d403 1
a403 1
    stringBuffer.append(TEXT_84);
d405 1
a405 1
    stringBuffer.append(TEXT_85);
d407 1
a407 1
    stringBuffer.append(TEXT_86);
d409 1
a409 1
    stringBuffer.append(TEXT_87);
d416 1
a416 1
    stringBuffer.append(TEXT_88);
d418 1
a418 1
    stringBuffer.append(TEXT_89);
d420 1
a420 1
    stringBuffer.append(TEXT_90);
d422 1
a422 1
    stringBuffer.append(TEXT_91);
d424 1
a424 1
    stringBuffer.append(TEXT_92);
d426 1
a426 1
    stringBuffer.append(TEXT_93);
d428 1
a428 1
    stringBuffer.append(TEXT_94);
d430 1
a430 1
    stringBuffer.append(TEXT_95);
d432 1
a432 1
    stringBuffer.append(TEXT_96);
@


1.53
log
@rewrite diagram view factory in xpand
@
text
@d20 6
a25 6
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
d27 89
a115 90
  protected final String TEXT_8 = NL + "\t";
  protected final String TEXT_9 = NL + "    ";
  protected final String TEXT_10 = NL + "\t";
  protected final String TEXT_11 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_12 = " styles = new ";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL + "\t\tstyles.add(";
  protected final String TEXT_15 = ".eINSTANCE.createConnectorStyle());";
  protected final String TEXT_16 = NL + "\t\tstyles.add(";
  protected final String TEXT_17 = ".eINSTANCE.createRoutingStyle());";
  protected final String TEXT_18 = NL + "\t\tstyles.add(";
  protected final String TEXT_19 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_20 = NL + "\t\tstyles.add(";
  protected final String TEXT_21 = ".eINSTANCE.createDrawerStyle());";
  protected final String TEXT_22 = NL + "\t\tstyles.add(";
  protected final String TEXT_23 = ".eINSTANCE.createTitleStyle());";
  protected final String TEXT_24 = "\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_25 = ".eINSTANCE.createSortingStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_26 = ".eINSTANCE.createFilteringStyle());";
  protected final String TEXT_27 = NL + "\t\tstyles.add(";
  protected final String TEXT_28 = ".eINSTANCE.createShapeStyle());";
  protected final String TEXT_29 = NL + "\t\tstyles.add(";
  protected final String TEXT_30 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_31 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_32 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_33 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_34 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_35 = ".getType(";
  protected final String TEXT_36 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_37 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_38 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_39 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_40 = ".MODEL_ID.equals(";
  protected final String TEXT_41 = ".getModelID(containerView))) {";
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = "\t\t\t";
  protected final String TEXT_44 = " shortcutAnnotation = ";
  protected final String TEXT_45 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_46 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_47 = NL + "\t\t";
  protected final String TEXT_48 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_49 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_50 = ".colorToInteger(";
  protected final String TEXT_51 = ".";
  protected final String TEXT_52 = "));";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " diagramFacet = ";
  protected final String TEXT_55 = ".eINSTANCE.createHintedDiagramLinkStyle();";
  protected final String TEXT_56 = NL + "\t\tdiagramFacet.setHint(\"";
  protected final String TEXT_57 = "\"); // $NON-NLS-1$";
  protected final String TEXT_58 = NL + "\t\tview.getStyles().add(diagramFacet);";
  protected final String TEXT_59 = NL + "\t\t";
  protected final String TEXT_60 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_61 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_62 = ".colorToInteger(";
  protected final String TEXT_63 = ".";
  protected final String TEXT_64 = "));";
  protected final String TEXT_65 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_66 = ".getType(";
  protected final String TEXT_67 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_68 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_69 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_70 = ".getType(";
  protected final String TEXT_71 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_72 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_73 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_74 = ".getType(";
  protected final String TEXT_75 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_76 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_79 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_80 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_81 = " store = (";
  protected final String TEXT_82 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_83 = " fillRGB = ";
  protected final String TEXT_84 = ".getColor(store, ";
  protected final String TEXT_85 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_86 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_87 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_88 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_89 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_90 = " titleStyle = (";
  protected final String TEXT_91 = ")view.getStyle(";
  protected final String TEXT_92 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_93 = " drawerStyle = (";
  protected final String TEXT_94 = ")view.getStyle(";
  protected final String TEXT_95 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_96 = NL + "}";
  protected final String TEXT_97 = NL;
a124 1
    stringBuffer.append(TEXT_1);
d129 2
a131 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d134 1
a134 1
    stringBuffer.append(TEXT_4);
d160 2
d163 1
a163 1
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
a164 2
    if (isLink) {
    stringBuffer.append(TEXT_7);
d167 1
a167 1
    stringBuffer.append(TEXT_8);
d170 1
a170 1
    stringBuffer.append(TEXT_9);
d173 1
a173 1
    stringBuffer.append(TEXT_10);
d178 2
d181 1
a181 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a182 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_13);
d185 2
d188 2
a190 2
    stringBuffer.append(TEXT_15);
    	} else { /*only routing, no line style*/ 
a191 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_17);
d194 2
a196 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_19);
d208 2
a210 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_21);
d215 2
d218 2
a220 2
    stringBuffer.append(TEXT_23);
    	}
a223 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_26);
d229 2
d232 2
a234 2
    stringBuffer.append(TEXT_28);
    	} else { /*all but font style*/
a239 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_32);
d242 2
d245 1
a245 1
    /* [++] important for the create shortcut functionality*/
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d249 1
a249 1
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
d251 1
a251 1
    /* [--] important for the create shortcut functionality*/
d253 1
a253 1
    	if (isCompartment){
d255 1
a255 1
    	}
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a258 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d261 1
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
a266 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_46);
d270 2
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
a280 2
    stringBuffer.append(colorAttrs.getForegroundColor());
    stringBuffer.append(TEXT_52);
d286 2
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.HintedDiagramLinkStyle"));
d291 1
a291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d293 1
a293 1
    	if (genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getDiagramKind() != null) {
d295 1
a295 1
    stringBuffer.append(genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getDiagramKind());
d298 1
d300 1
a300 2
    	}
	if (colorAttrs != null && colorAttrs.getBackgroundColor() != null && colorAttrs.getBackgroundColor().trim().length() > 0) {
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
a309 2
    stringBuffer.append(colorAttrs.getBackgroundColor());
    stringBuffer.append(TEXT_64);
d316 2
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
a322 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_68);
d329 2
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName(genChildContainer.getEditPartQualifiedClassName()));
a335 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_72);
d344 2
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
a350 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_76);
d355 2
d358 1
a358 1
    if (isCompartmentWithOwnBounds) {
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LayoutConstraint"));
d362 1
a362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d368 1
a368 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.RGB"));
d370 1
a370 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d372 1
a372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d374 1
a374 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d376 1
a376 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a377 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
    stringBuffer.append(TEXT_88);
d384 2
d389 1
a389 1
    stringBuffer.append(titleStyleFQN);
d391 1
a391 1
    stringBuffer.append(notationPackageFQN);
d395 1
a395 1
    stringBuffer.append(drawerStyleFQN);
d397 1
a397 1
    stringBuffer.append(notationPackageFQN);
d399 1
a399 1
    }
a400 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_97);
@


1.52
log
@Updated OpenDiagramEditPolicy generation to utilize newly introduced (bug #159479) appropriate diagram styles instead of annotations
@
text
@d29 88
a116 97
  protected final String TEXT_10 = "    " + NL + "\t";
  protected final String TEXT_11 = NL + "\t";
  protected final String TEXT_12 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_13 = " styles = new ";
  protected final String TEXT_14 = "();";
  protected final String TEXT_15 = NL + "\t\tstyles.add(";
  protected final String TEXT_16 = ".eINSTANCE.createConnectorStyle());";
  protected final String TEXT_17 = NL + "\t\tstyles.add(";
  protected final String TEXT_18 = ".eINSTANCE.createRoutingStyle());";
  protected final String TEXT_19 = NL + "\t\tstyles.add(";
  protected final String TEXT_20 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_21 = NL + "\t\tstyles.add(";
  protected final String TEXT_22 = ".eINSTANCE.createDiagramStyle());";
  protected final String TEXT_23 = NL + "\t\tstyles.add(";
  protected final String TEXT_24 = ".eINSTANCE.createDrawerStyle());";
  protected final String TEXT_25 = NL + "\t\tstyles.add(";
  protected final String TEXT_26 = ".eINSTANCE.createTitleStyle());";
  protected final String TEXT_27 = "\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_28 = ".eINSTANCE.createSortingStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_29 = ".eINSTANCE.createFilteringStyle());";
  protected final String TEXT_30 = NL + "\t\tstyles.add(";
  protected final String TEXT_31 = ".eINSTANCE.createShapeStyle());";
  protected final String TEXT_32 = NL + "\t\tstyles.add(";
  protected final String TEXT_33 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_34 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_35 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_36 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_37 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_38 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_39 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_40 = ".getType(";
  protected final String TEXT_41 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_42 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_43 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_44 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_45 = ".MODEL_ID.equals(";
  protected final String TEXT_46 = ".getModelID(containerView))) {";
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = "\t\t\t";
  protected final String TEXT_49 = " shortcutAnnotation = ";
  protected final String TEXT_50 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_51 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_54 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_55 = ".colorToInteger(";
  protected final String TEXT_56 = ".";
  protected final String TEXT_57 = "));";
  protected final String TEXT_58 = NL + "\t\t";
  protected final String TEXT_59 = " diagramFacet = ";
  protected final String TEXT_60 = ".eINSTANCE.createHintedDiagramLinkStyle();";
  protected final String TEXT_61 = NL + "\t\tdiagramFacet.setHint(\"";
  protected final String TEXT_62 = "\"); // $NON-NLS-1$";
  protected final String TEXT_63 = NL + "\t\tview.getStyles().add(diagramFacet);";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_66 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_67 = ".colorToInteger(";
  protected final String TEXT_68 = ".";
  protected final String TEXT_69 = "));";
  protected final String TEXT_70 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_71 = ".getType(";
  protected final String TEXT_72 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_73 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_74 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_75 = ".getType(";
  protected final String TEXT_76 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_77 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_78 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_79 = ".getType(";
  protected final String TEXT_80 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_81 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_82 = NL + "\t}";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_84 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_85 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_86 = " store = (";
  protected final String TEXT_87 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_88 = " fillRGB = ";
  protected final String TEXT_89 = ".getColor(store, ";
  protected final String TEXT_90 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_91 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_92 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_93 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_94 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_95 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_96 = ".";
  protected final String TEXT_97 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_98 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_99 = " titleStyle = (";
  protected final String TEXT_100 = ")view.getStyle(";
  protected final String TEXT_101 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_102 = " drawerStyle = (";
  protected final String TEXT_103 = ")view.getStyle(";
  protected final String TEXT_104 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_105 = NL + NL + "}";
  protected final String TEXT_106 = NL;
d174 1
a174 1
    } else if (isDiagram) {
a175 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.DiagramViewFactory"));
    } else if (isShape) {
    stringBuffer.append(TEXT_11);
d180 2
d183 1
a183 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a184 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_14);
d187 2
d190 2
a192 2
    stringBuffer.append(TEXT_16);
    	} else { /*only routing, no line style*/ 
a193 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_18);
d196 2
a198 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_20);
a205 7
if (isDiagram) {

    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_22);
    
}
d210 1
a210 1
    stringBuffer.append(TEXT_23);
d212 1
a212 1
    stringBuffer.append(TEXT_24);
d217 1
a217 1
    stringBuffer.append(TEXT_25);
d219 1
a219 1
    stringBuffer.append(TEXT_26);
d221 1
a221 1
    stringBuffer.append(TEXT_27);
d223 1
a223 1
    stringBuffer.append(TEXT_28);
d225 1
a225 1
    stringBuffer.append(TEXT_29);
d231 6
d240 1
a240 1
    	} else { /*all but font style*/
d242 2
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d245 1
a245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d249 1
a249 2
    	}
} /*isShape || isCompartmentWithOwnBounds*/ 
d251 1
a251 3
    
if (isDiagram) {

d253 1
a253 3
    
} else {

d255 1
a255 1
    /* [++] important for the create shortcut functionality*/
d257 2
a259 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
a260 1
    /* [--] important for the create shortcut functionality*/
a261 1
    	if (isCompartment){
d263 1
a263 1
    	}
d265 2
a267 2
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a268 8
    stringBuffer.append(TEXT_47);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_51);
a269 2
}

d272 1
a272 1
    stringBuffer.append(TEXT_52);
d274 1
a274 1
    stringBuffer.append(TEXT_53);
d276 1
a276 1
    stringBuffer.append(TEXT_54);
d278 1
a278 1
    stringBuffer.append(TEXT_55);
d280 1
a280 1
    stringBuffer.append(TEXT_56);
d282 1
a282 1
    stringBuffer.append(TEXT_57);
d288 1
a288 1
    stringBuffer.append(TEXT_58);
d290 1
a290 1
    stringBuffer.append(TEXT_59);
d292 1
a292 1
    stringBuffer.append(TEXT_60);
d294 1
a294 1
    stringBuffer.append(TEXT_61);
d296 1
a296 1
    stringBuffer.append(TEXT_62);
d298 1
a298 1
    stringBuffer.append(TEXT_63);
d301 1
a301 1
    stringBuffer.append(TEXT_64);
d303 1
a303 1
    stringBuffer.append(TEXT_65);
d305 1
a305 1
    stringBuffer.append(TEXT_66);
d307 1
a307 1
    stringBuffer.append(TEXT_67);
d309 1
a309 1
    stringBuffer.append(TEXT_68);
d311 1
a311 1
    stringBuffer.append(TEXT_69);
d318 1
a318 1
    stringBuffer.append(TEXT_70);
d320 1
a320 1
    stringBuffer.append(TEXT_71);
d322 1
a322 1
    stringBuffer.append(TEXT_72);
d324 1
a324 1
    stringBuffer.append(TEXT_73);
d331 1
a331 1
    stringBuffer.append(TEXT_74);
d333 1
a333 1
    stringBuffer.append(TEXT_75);
d335 1
a335 1
    stringBuffer.append(TEXT_76);
d337 1
a337 1
    stringBuffer.append(TEXT_77);
d346 1
a346 1
    stringBuffer.append(TEXT_78);
d348 1
a348 1
    stringBuffer.append(TEXT_79);
d350 1
a350 1
    stringBuffer.append(TEXT_80);
d352 1
a352 1
    stringBuffer.append(TEXT_81);
d357 1
a357 1
    stringBuffer.append(TEXT_82);
d359 1
a359 1
    stringBuffer.append(TEXT_83);
d361 1
a361 1
    stringBuffer.append(TEXT_84);
d363 1
a363 1
    stringBuffer.append(TEXT_85);
d365 1
a365 1
    stringBuffer.append(TEXT_86);
d367 1
a367 1
    stringBuffer.append(TEXT_87);
d369 1
a369 1
    stringBuffer.append(TEXT_88);
d371 1
a371 1
    stringBuffer.append(TEXT_89);
d373 1
a373 1
    stringBuffer.append(TEXT_90);
d375 1
a375 1
    stringBuffer.append(TEXT_91);
d377 1
a377 1
    stringBuffer.append(TEXT_92);
d379 1
a379 1
    stringBuffer.append(TEXT_93);
a380 10
    if (isDiagram && genDiagram.getUnits() != null && genDiagram.getUnits().trim().length() > 0) {
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.MeasurementUnit"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.MeasurementUnit"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(genDiagram.getUnits().toUpperCase());
    stringBuffer.append(TEXT_97);
    }
    
d386 1
a386 1
    stringBuffer.append(TEXT_98);
d388 1
a388 1
    stringBuffer.append(TEXT_99);
d390 1
a390 1
    stringBuffer.append(TEXT_100);
d392 1
a392 1
    stringBuffer.append(TEXT_101);
d394 1
a394 1
    stringBuffer.append(TEXT_102);
d396 1
a396 1
    stringBuffer.append(TEXT_103);
d398 1
a398 1
    stringBuffer.append(TEXT_104);
d400 1
a400 1
    stringBuffer.append(TEXT_105);
d402 1
a402 1
    stringBuffer.append(TEXT_106);
@


1.51
log
@[183795] Generated shapes consume too much memory
@
text
@d79 47
a125 45
  protected final String TEXT_60 = ".eINSTANCE.createEAnnotation();" + NL + "\t\tdiagramFacet.setSource(\"";
  protected final String TEXT_61 = "\");" + NL + "\t\tview.getEAnnotations().add(diagramFacet);";
  protected final String TEXT_62 = NL + "\t\t";
  protected final String TEXT_63 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_64 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_65 = ".colorToInteger(";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "));";
  protected final String TEXT_68 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_69 = ".getType(";
  protected final String TEXT_70 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_71 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_72 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_73 = ".getType(";
  protected final String TEXT_74 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_75 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_76 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_77 = ".getType(";
  protected final String TEXT_78 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_79 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_80 = NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_82 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_83 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_84 = " store = (";
  protected final String TEXT_85 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_86 = " fillRGB = ";
  protected final String TEXT_87 = ".getColor(store, ";
  protected final String TEXT_88 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_89 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_90 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_91 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_92 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_93 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_94 = ".";
  protected final String TEXT_95 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_96 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_97 = " titleStyle = (";
  protected final String TEXT_98 = ")view.getStyle(";
  protected final String TEXT_99 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_100 = " drawerStyle = (";
  protected final String TEXT_101 = ")view.getStyle(";
  protected final String TEXT_102 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_103 = NL + NL + "}";
  protected final String TEXT_104 = NL;
d316 1
a316 1
	if (genNode.getBehaviour(OpenDiagramBehaviour.class).size() == 1) {
d318 1
a318 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d320 1
a320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
d322 1
a322 1
    stringBuffer.append(org.eclipse.gmf.codegen.gmfgen.impl.OpenDiagramBehaviourImpl.ANNOTATION_SOURCE);
d324 4
d330 1
a330 1
    stringBuffer.append(TEXT_62);
d332 1
a332 1
    stringBuffer.append(TEXT_63);
d334 1
a334 1
    stringBuffer.append(TEXT_64);
d336 1
a336 1
    stringBuffer.append(TEXT_65);
d338 1
a338 1
    stringBuffer.append(TEXT_66);
d340 1
a340 1
    stringBuffer.append(TEXT_67);
d347 1
a347 1
    stringBuffer.append(TEXT_68);
d349 1
a349 1
    stringBuffer.append(TEXT_69);
d351 1
a351 1
    stringBuffer.append(TEXT_70);
d353 1
a353 1
    stringBuffer.append(TEXT_71);
d360 1
a360 1
    stringBuffer.append(TEXT_72);
d362 1
a362 1
    stringBuffer.append(TEXT_73);
d364 1
a364 1
    stringBuffer.append(TEXT_74);
d366 1
a366 1
    stringBuffer.append(TEXT_75);
d375 1
a375 1
    stringBuffer.append(TEXT_76);
d377 1
a377 1
    stringBuffer.append(TEXT_77);
d379 1
a379 1
    stringBuffer.append(TEXT_78);
d381 1
a381 1
    stringBuffer.append(TEXT_79);
d386 1
a386 1
    stringBuffer.append(TEXT_80);
d388 1
a388 1
    stringBuffer.append(TEXT_81);
d390 1
a390 1
    stringBuffer.append(TEXT_82);
d392 1
a392 1
    stringBuffer.append(TEXT_83);
d394 1
a394 1
    stringBuffer.append(TEXT_84);
d396 1
a396 1
    stringBuffer.append(TEXT_85);
d398 1
a398 1
    stringBuffer.append(TEXT_86);
d400 1
a400 1
    stringBuffer.append(TEXT_87);
d402 1
a402 1
    stringBuffer.append(TEXT_88);
d404 1
a404 1
    stringBuffer.append(TEXT_89);
d406 1
a406 1
    stringBuffer.append(TEXT_90);
d408 1
a408 1
    stringBuffer.append(TEXT_91);
d411 1
a411 1
    stringBuffer.append(TEXT_92);
d413 1
a413 1
    stringBuffer.append(TEXT_93);
d415 1
a415 1
    stringBuffer.append(TEXT_94);
d417 1
a417 1
    stringBuffer.append(TEXT_95);
d425 1
a425 1
    stringBuffer.append(TEXT_96);
d427 1
a427 1
    stringBuffer.append(TEXT_97);
d429 1
a429 1
    stringBuffer.append(TEXT_98);
d431 1
a431 1
    stringBuffer.append(TEXT_99);
d433 1
a433 1
    stringBuffer.append(TEXT_100);
d435 1
a435 1
    stringBuffer.append(TEXT_101);
d437 1
a437 1
    stringBuffer.append(TEXT_102);
d439 1
a439 1
    stringBuffer.append(TEXT_103);
d441 1
a441 1
    stringBuffer.append(TEXT_104);
@


1.50
log
@follow consisted spacing policy
@
text
@d35 1
a35 1
  protected final String TEXT_16 = ".eINSTANCE.createRoutingStyle());";
d37 1
a37 1
  protected final String TEXT_18 = ".eINSTANCE.createFontStyle());";
d39 1
a39 1
  protected final String TEXT_20 = ".eINSTANCE.createLineStyle());";
d41 3
a43 3
  protected final String TEXT_22 = ".eINSTANCE.createPageStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_23 = ".eINSTANCE.createGuideStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_24 = ".eINSTANCE.createDescriptionStyle());";
d45 6
a50 6
  protected final String TEXT_26 = ".eINSTANCE.createDrawerStyle());";
  protected final String TEXT_27 = NL + "\t\tstyles.add(";
  protected final String TEXT_28 = ".eINSTANCE.createTitleStyle());";
  protected final String TEXT_29 = "\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_30 = ".eINSTANCE.createSortingStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_31 = ".eINSTANCE.createFilteringStyle());";
d52 72
a123 74
  protected final String TEXT_33 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_34 = NL + "\t\tstyles.add(";
  protected final String TEXT_35 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_36 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_37 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_38 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_39 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_40 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_41 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_42 = ".getType(";
  protected final String TEXT_43 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_44 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_45 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_46 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_47 = ".MODEL_ID.equals(";
  protected final String TEXT_48 = ".getModelID(containerView))) {";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = "\t\t\t";
  protected final String TEXT_51 = " shortcutAnnotation = ";
  protected final String TEXT_52 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_53 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\t";
  protected final String TEXT_55 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_56 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_57 = ".colorToInteger(";
  protected final String TEXT_58 = ".";
  protected final String TEXT_59 = "));";
  protected final String TEXT_60 = NL + "\t\t";
  protected final String TEXT_61 = " diagramFacet = ";
  protected final String TEXT_62 = ".eINSTANCE.createEAnnotation();" + NL + "\t\tdiagramFacet.setSource(\"";
  protected final String TEXT_63 = "\");" + NL + "\t\tview.getEAnnotations().add(diagramFacet);";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_66 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_67 = ".colorToInteger(";
  protected final String TEXT_68 = ".";
  protected final String TEXT_69 = "));";
  protected final String TEXT_70 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_71 = ".getType(";
  protected final String TEXT_72 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_73 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_74 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_75 = ".getType(";
  protected final String TEXT_76 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_77 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_78 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_79 = ".getType(";
  protected final String TEXT_80 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_81 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_82 = NL + "\t}";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_84 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_85 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_86 = " store = (";
  protected final String TEXT_87 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_88 = " fillRGB = ";
  protected final String TEXT_89 = ".getColor(store, ";
  protected final String TEXT_90 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_91 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_92 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_93 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_94 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_95 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_96 = ".";
  protected final String TEXT_97 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_98 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_99 = " titleStyle = (";
  protected final String TEXT_100 = ")view.getStyle(";
  protected final String TEXT_101 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_102 = " drawerStyle = (";
  protected final String TEXT_103 = ")view.getStyle(";
  protected final String TEXT_104 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_105 = NL + NL + "}";
  protected final String TEXT_106 = NL;
d196 1
d200 1
a200 1
    	if (!fixedFont) {
d204 2
a205 2
    	}
    	if (!fixedForeground) {
d211 1
a211 1
}
a220 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_24);
d227 1
a227 1
    stringBuffer.append(TEXT_25);
d229 1
a229 1
    stringBuffer.append(TEXT_26);
d234 4
d241 1
a241 1
    	}
a242 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_31);
d248 4
d255 1
a255 1
    	}
d259 2
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
a261 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_37);
    }
    stringBuffer.append(TEXT_38);
d265 1
a265 1
    stringBuffer.append(TEXT_39);
d269 4
d274 1
a274 1
    /* [++] important for the create shortcut functionality*/
d276 1
a276 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d278 1
a278 1
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
d280 1
a280 1
    /* [--] important for the create shortcut functionality*/
d282 1
a282 1
    	if (isCompartment){
d284 1
a284 1
    	}
a285 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a286 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d288 1
d290 1
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a293 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_53);
d299 1
a299 1
    stringBuffer.append(TEXT_54);
d301 1
a301 1
    stringBuffer.append(TEXT_55);
d303 1
a303 1
    stringBuffer.append(TEXT_56);
d305 1
a305 1
    stringBuffer.append(TEXT_57);
d307 1
a307 1
    stringBuffer.append(TEXT_58);
d309 1
a309 1
    stringBuffer.append(TEXT_59);
d315 1
a315 1
    stringBuffer.append(TEXT_60);
d317 1
a317 1
    stringBuffer.append(TEXT_61);
d319 1
a319 1
    stringBuffer.append(TEXT_62);
d321 1
a321 1
    stringBuffer.append(TEXT_63);
d324 1
a324 1
    stringBuffer.append(TEXT_64);
d326 1
a326 1
    stringBuffer.append(TEXT_65);
d328 1
a328 1
    stringBuffer.append(TEXT_66);
d330 1
a330 1
    stringBuffer.append(TEXT_67);
d332 1
a332 1
    stringBuffer.append(TEXT_68);
d334 1
a334 1
    stringBuffer.append(TEXT_69);
d341 1
a341 1
    stringBuffer.append(TEXT_70);
d343 1
a343 1
    stringBuffer.append(TEXT_71);
d345 1
a345 1
    stringBuffer.append(TEXT_72);
d347 1
a347 1
    stringBuffer.append(TEXT_73);
d354 1
a354 1
    stringBuffer.append(TEXT_74);
d356 1
a356 1
    stringBuffer.append(TEXT_75);
d358 1
a358 1
    stringBuffer.append(TEXT_76);
d360 1
a360 1
    stringBuffer.append(TEXT_77);
d369 1
a369 1
    stringBuffer.append(TEXT_78);
d371 1
a371 1
    stringBuffer.append(TEXT_79);
d373 1
a373 1
    stringBuffer.append(TEXT_80);
d375 1
a375 1
    stringBuffer.append(TEXT_81);
d380 1
a380 1
    stringBuffer.append(TEXT_82);
d382 1
a382 1
    stringBuffer.append(TEXT_83);
d384 1
a384 1
    stringBuffer.append(TEXT_84);
d386 1
a386 1
    stringBuffer.append(TEXT_85);
d388 1
a388 1
    stringBuffer.append(TEXT_86);
d390 1
a390 1
    stringBuffer.append(TEXT_87);
d392 1
a392 1
    stringBuffer.append(TEXT_88);
d394 1
a394 1
    stringBuffer.append(TEXT_89);
d396 1
a396 1
    stringBuffer.append(TEXT_90);
d398 1
a398 1
    stringBuffer.append(TEXT_91);
d400 1
a400 1
    stringBuffer.append(TEXT_92);
d402 1
a402 1
    stringBuffer.append(TEXT_93);
d405 1
a405 1
    stringBuffer.append(TEXT_94);
d407 1
a407 1
    stringBuffer.append(TEXT_95);
d409 1
a409 1
    stringBuffer.append(TEXT_96);
d411 1
a411 1
    stringBuffer.append(TEXT_97);
d419 1
a419 1
    stringBuffer.append(TEXT_98);
d421 1
a421 1
    stringBuffer.append(TEXT_99);
d423 1
a423 1
    stringBuffer.append(TEXT_100);
d425 1
a425 1
    stringBuffer.append(TEXT_101);
d427 1
a427 1
    stringBuffer.append(TEXT_102);
d429 1
a429 1
    stringBuffer.append(TEXT_103);
d431 1
a431 1
    stringBuffer.append(TEXT_104);
d433 1
a433 1
    stringBuffer.append(TEXT_105);
d435 1
a435 1
    stringBuffer.append(TEXT_106);
@


1.49
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d141 1
a141 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.48
log
@[119465] support for diagram partitioning
@
text
@d67 59
a125 57
  protected final String TEXT_48 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_49 = " shortcutAnnotation = ";
  protected final String TEXT_50 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_51 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_54 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_55 = ".colorToInteger(";
  protected final String TEXT_56 = ".";
  protected final String TEXT_57 = "));";
  protected final String TEXT_58 = NL + "\t\t";
  protected final String TEXT_59 = " diagramFacet = ";
  protected final String TEXT_60 = ".eINSTANCE.createEAnnotation();" + NL + "\t\tdiagramFacet.setSource(\"";
  protected final String TEXT_61 = "\");" + NL + "\t\tview.getEAnnotations().add(diagramFacet);";
  protected final String TEXT_62 = NL + "\t\t";
  protected final String TEXT_63 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_64 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_65 = ".colorToInteger(";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "));";
  protected final String TEXT_68 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_69 = ".getType(";
  protected final String TEXT_70 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_71 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_72 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_73 = ".getType(";
  protected final String TEXT_74 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_75 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_76 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_77 = ".getType(";
  protected final String TEXT_78 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_79 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_80 = NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_82 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_83 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_84 = " store = (";
  protected final String TEXT_85 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_86 = " fillRGB = ";
  protected final String TEXT_87 = ".getColor(store, ";
  protected final String TEXT_88 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_89 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_90 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_91 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_92 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_93 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_94 = ".";
  protected final String TEXT_95 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_96 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_97 = " titleStyle = (";
  protected final String TEXT_98 = ")view.getStyle(";
  protected final String TEXT_99 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_100 = " drawerStyle = (";
  protected final String TEXT_101 = ")view.getStyle(";
  protected final String TEXT_102 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_103 = NL + NL + "}";
  protected final String TEXT_104 = NL;
d290 2
d293 1
a293 1
    stringBuffer.append(TEXT_49);
d295 1
a295 1
    stringBuffer.append(TEXT_50);
d297 1
a297 1
    stringBuffer.append(TEXT_51);
d303 1
a303 1
    stringBuffer.append(TEXT_52);
d305 1
a305 1
    stringBuffer.append(TEXT_53);
d307 1
a307 1
    stringBuffer.append(TEXT_54);
d309 1
a309 1
    stringBuffer.append(TEXT_55);
d311 1
a311 1
    stringBuffer.append(TEXT_56);
d313 1
a313 1
    stringBuffer.append(TEXT_57);
d319 1
a319 1
    stringBuffer.append(TEXT_58);
d321 1
a321 1
    stringBuffer.append(TEXT_59);
d323 1
a323 1
    stringBuffer.append(TEXT_60);
d325 1
a325 1
    stringBuffer.append(TEXT_61);
d328 1
a328 1
    stringBuffer.append(TEXT_62);
d330 1
a330 1
    stringBuffer.append(TEXT_63);
d332 1
a332 1
    stringBuffer.append(TEXT_64);
d334 1
a334 1
    stringBuffer.append(TEXT_65);
d336 1
a336 1
    stringBuffer.append(TEXT_66);
d338 1
a338 1
    stringBuffer.append(TEXT_67);
d345 1
a345 1
    stringBuffer.append(TEXT_68);
d347 1
a347 1
    stringBuffer.append(TEXT_69);
d349 1
a349 1
    stringBuffer.append(TEXT_70);
d351 1
a351 1
    stringBuffer.append(TEXT_71);
d358 1
a358 1
    stringBuffer.append(TEXT_72);
d360 1
a360 1
    stringBuffer.append(TEXT_73);
d362 1
a362 1
    stringBuffer.append(TEXT_74);
d364 1
a364 1
    stringBuffer.append(TEXT_75);
d373 1
a373 1
    stringBuffer.append(TEXT_76);
d375 1
a375 1
    stringBuffer.append(TEXT_77);
d377 1
a377 1
    stringBuffer.append(TEXT_78);
d379 1
a379 1
    stringBuffer.append(TEXT_79);
d384 1
a384 1
    stringBuffer.append(TEXT_80);
d386 1
a386 1
    stringBuffer.append(TEXT_81);
d388 1
a388 1
    stringBuffer.append(TEXT_82);
d390 1
a390 1
    stringBuffer.append(TEXT_83);
d392 1
a392 1
    stringBuffer.append(TEXT_84);
d394 1
a394 1
    stringBuffer.append(TEXT_85);
d396 1
a396 1
    stringBuffer.append(TEXT_86);
d398 1
a398 1
    stringBuffer.append(TEXT_87);
d400 1
a400 1
    stringBuffer.append(TEXT_88);
d402 1
a402 1
    stringBuffer.append(TEXT_89);
d404 1
a404 1
    stringBuffer.append(TEXT_90);
d406 1
a406 1
    stringBuffer.append(TEXT_91);
d409 1
a409 1
    stringBuffer.append(TEXT_92);
d411 1
a411 1
    stringBuffer.append(TEXT_93);
d413 1
a413 1
    stringBuffer.append(TEXT_94);
d415 1
a415 1
    stringBuffer.append(TEXT_95);
d423 1
a423 1
    stringBuffer.append(TEXT_96);
d425 1
a425 1
    stringBuffer.append(TEXT_97);
d427 1
a427 1
    stringBuffer.append(TEXT_98);
d429 1
a429 1
    stringBuffer.append(TEXT_99);
d431 1
a431 1
    stringBuffer.append(TEXT_100);
d433 1
a433 1
    stringBuffer.append(TEXT_101);
d435 1
a435 1
    stringBuffer.append(TEXT_102);
d437 1
a437 1
    stringBuffer.append(TEXT_103);
d439 1
a439 1
    stringBuffer.append(TEXT_104);
@


1.47
log
@#148636 Link labels and External node's labels should have the same default font size
@
text
@d78 9
a86 9
  protected final String TEXT_59 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_60 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_61 = ".colorToInteger(";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "));";
  protected final String TEXT_64 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_65 = ".getType(";
  protected final String TEXT_66 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_67 = ".APPEND, true, getPreferencesHint());";
d95 29
a123 25
  protected final String TEXT_76 = NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_78 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_79 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_80 = " store = (";
  protected final String TEXT_81 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_82 = " fillRGB = ";
  protected final String TEXT_83 = ".getColor(store, ";
  protected final String TEXT_84 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_85 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_86 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_87 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_88 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_89 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_90 = ".";
  protected final String TEXT_91 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_92 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_93 = " titleStyle = (";
  protected final String TEXT_94 = ")view.getStyle(";
  protected final String TEXT_95 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_96 = " drawerStyle = (";
  protected final String TEXT_97 = ")view.getStyle(";
  protected final String TEXT_98 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_99 = NL + NL + "}";
  protected final String TEXT_100 = NL;
d314 9
d324 1
a324 1
    stringBuffer.append(TEXT_58);
d326 1
a326 1
    stringBuffer.append(TEXT_59);
d328 1
a328 1
    stringBuffer.append(TEXT_60);
d330 1
a330 1
    stringBuffer.append(TEXT_61);
d332 1
a332 1
    stringBuffer.append(TEXT_62);
d334 1
a334 1
    stringBuffer.append(TEXT_63);
d341 1
a341 1
    stringBuffer.append(TEXT_64);
d343 1
a343 1
    stringBuffer.append(TEXT_65);
d345 1
a345 1
    stringBuffer.append(TEXT_66);
d347 1
a347 1
    stringBuffer.append(TEXT_67);
d354 1
a354 1
    stringBuffer.append(TEXT_68);
d356 1
a356 1
    stringBuffer.append(TEXT_69);
d358 1
a358 1
    stringBuffer.append(TEXT_70);
d360 1
a360 1
    stringBuffer.append(TEXT_71);
d369 1
a369 1
    stringBuffer.append(TEXT_72);
d371 1
a371 1
    stringBuffer.append(TEXT_73);
d373 1
a373 1
    stringBuffer.append(TEXT_74);
d375 1
a375 1
    stringBuffer.append(TEXT_75);
d380 1
a380 1
    stringBuffer.append(TEXT_76);
d382 1
a382 1
    stringBuffer.append(TEXT_77);
d384 1
a384 1
    stringBuffer.append(TEXT_78);
d386 1
a386 1
    stringBuffer.append(TEXT_79);
d388 1
a388 1
    stringBuffer.append(TEXT_80);
d390 1
a390 1
    stringBuffer.append(TEXT_81);
d392 1
a392 1
    stringBuffer.append(TEXT_82);
d394 1
a394 1
    stringBuffer.append(TEXT_83);
d396 1
a396 1
    stringBuffer.append(TEXT_84);
d398 1
a398 1
    stringBuffer.append(TEXT_85);
d400 1
a400 1
    stringBuffer.append(TEXT_86);
d402 1
a402 1
    stringBuffer.append(TEXT_87);
d405 1
a405 1
    stringBuffer.append(TEXT_88);
d407 1
a407 1
    stringBuffer.append(TEXT_89);
d409 1
a409 1
    stringBuffer.append(TEXT_90);
d411 1
a411 1
    stringBuffer.append(TEXT_91);
d419 1
a419 1
    stringBuffer.append(TEXT_92);
d421 1
a421 1
    stringBuffer.append(TEXT_93);
d423 1
a423 1
    stringBuffer.append(TEXT_94);
d425 1
a425 1
    stringBuffer.append(TEXT_95);
d427 1
a427 1
    stringBuffer.append(TEXT_96);
d429 1
a429 1
    stringBuffer.append(TEXT_97);
d431 1
a431 1
    stringBuffer.append(TEXT_98);
d433 1
a433 1
    stringBuffer.append(TEXT_99);
d435 1
a435 1
    stringBuffer.append(TEXT_100);
@


1.46
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d31 1
a31 1
  protected final String TEXT_12 = NL + "{" + NL + "" + NL + "\t/*" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
d37 1
a37 1
  protected final String TEXT_18 = ".eINSTANCE.createLineStyle());";
d39 12
a50 12
  protected final String TEXT_20 = ".eINSTANCE.createPageStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_21 = ".eINSTANCE.createGuideStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_22 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_23 = NL + "\t\tstyles.add(";
  protected final String TEXT_24 = ".eINSTANCE.createDrawerStyle());";
  protected final String TEXT_25 = "\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_26 = ".eINSTANCE.createTitleStyle());";
  protected final String TEXT_27 = "\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_28 = ".eINSTANCE.createSortingStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_29 = ".eINSTANCE.createFilteringStyle());";
  protected final String TEXT_30 = NL + "\t\tstyles.add(";
  protected final String TEXT_31 = ".eINSTANCE.createFontStyle());";
d52 68
a119 66
  protected final String TEXT_33 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_34 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_35 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_36 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_37 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_38 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_39 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_40 = ".getType(";
  protected final String TEXT_41 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_42 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_43 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_44 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_45 = ".MODEL_ID.equals(";
  protected final String TEXT_46 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_47 = " shortcutAnnotation = ";
  protected final String TEXT_48 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_49 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_50 = NL + "\t\t";
  protected final String TEXT_51 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_52 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_53 = ".colorToInteger(";
  protected final String TEXT_54 = ".";
  protected final String TEXT_55 = "));";
  protected final String TEXT_56 = NL + "\t\t";
  protected final String TEXT_57 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_58 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_59 = ".colorToInteger(";
  protected final String TEXT_60 = ".";
  protected final String TEXT_61 = "));";
  protected final String TEXT_62 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_63 = ".getType(";
  protected final String TEXT_64 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_65 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_66 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_67 = ".getType(";
  protected final String TEXT_68 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_69 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_70 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_71 = ".getType(";
  protected final String TEXT_72 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_73 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_74 = NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_76 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_77 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_78 = " store = (";
  protected final String TEXT_79 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_80 = " fillRGB = ";
  protected final String TEXT_81 = ".getColor(store, ";
  protected final String TEXT_82 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_83 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_84 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_85 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_86 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_87 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_88 = ".";
  protected final String TEXT_89 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_90 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_91 = " titleStyle = (";
  protected final String TEXT_92 = ")view.getStyle(";
  protected final String TEXT_93 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_94 = " drawerStyle = (";
  protected final String TEXT_95 = ")view.getStyle(";
  protected final String TEXT_96 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_97 = NL + NL + "}";
  protected final String TEXT_98 = NL;
d191 1
a191 3
    
if (isLink) {

d195 1
a195 3
    
	if (!fixedForeground) { 

d199 8
a206 3
    	
	} //fixedForeground
} 
d210 1
a210 1
} 
d213 1
a213 1
    stringBuffer.append(TEXT_19);
d215 1
a215 1
    stringBuffer.append(TEXT_20);
d217 1
a217 1
    stringBuffer.append(TEXT_21);
d219 1
a219 1
    stringBuffer.append(TEXT_22);
d224 1
a224 8
	if (genCompartment.isCanCollapse()){

    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_24);
    
	}
	if (genCompartment.isNeedsTitle()){
d231 1
d236 2
a238 6
    stringBuffer.append(TEXT_29);
    	
} 
if (isShape || isCompartmentWithOwnBounds) {
	if (!fixedFont){

d243 2
a244 1
	}
d246 1
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d254 1
a254 3
    
}

d256 4
d263 1
a263 1
    stringBuffer.append(TEXT_37);
d267 1
a267 1
    stringBuffer.append(TEXT_38);
d269 1
a269 1
    stringBuffer.append(TEXT_39);
d271 1
a271 1
    stringBuffer.append(TEXT_40);
d273 1
a273 1
    stringBuffer.append(TEXT_41);
d275 1
a275 1
    stringBuffer.append(TEXT_42);
d277 1
a277 1
    stringBuffer.append(TEXT_43);
d279 1
a279 1
    stringBuffer.append(TEXT_44);
d281 1
a281 1
    stringBuffer.append(TEXT_45);
d283 1
a283 1
    stringBuffer.append(TEXT_46);
d285 1
a285 1
    stringBuffer.append(TEXT_47);
d287 1
a287 1
    stringBuffer.append(TEXT_48);
d289 1
a289 1
    stringBuffer.append(TEXT_49);
d295 1
a295 1
    stringBuffer.append(TEXT_50);
d297 1
a297 1
    stringBuffer.append(TEXT_51);
d299 1
a299 1
    stringBuffer.append(TEXT_52);
d301 1
a301 1
    stringBuffer.append(TEXT_53);
d303 1
a303 1
    stringBuffer.append(TEXT_54);
d305 1
a305 1
    stringBuffer.append(TEXT_55);
d311 1
a311 1
    stringBuffer.append(TEXT_56);
d313 1
a313 1
    stringBuffer.append(TEXT_57);
d315 1
a315 1
    stringBuffer.append(TEXT_58);
d317 1
a317 1
    stringBuffer.append(TEXT_59);
d319 1
a319 1
    stringBuffer.append(TEXT_60);
d321 1
a321 1
    stringBuffer.append(TEXT_61);
d328 1
a328 1
    stringBuffer.append(TEXT_62);
d330 1
a330 1
    stringBuffer.append(TEXT_63);
d332 1
a332 1
    stringBuffer.append(TEXT_64);
d334 1
a334 1
    stringBuffer.append(TEXT_65);
d341 1
a341 1
    stringBuffer.append(TEXT_66);
d343 1
a343 1
    stringBuffer.append(TEXT_67);
d345 1
a345 1
    stringBuffer.append(TEXT_68);
d347 1
a347 1
    stringBuffer.append(TEXT_69);
d356 1
a356 1
    stringBuffer.append(TEXT_70);
d358 1
a358 1
    stringBuffer.append(TEXT_71);
d360 1
a360 1
    stringBuffer.append(TEXT_72);
d362 1
a362 1
    stringBuffer.append(TEXT_73);
d367 1
a367 1
    stringBuffer.append(TEXT_74);
d369 1
a369 1
    stringBuffer.append(TEXT_75);
d371 1
a371 1
    stringBuffer.append(TEXT_76);
d373 1
a373 1
    stringBuffer.append(TEXT_77);
d375 1
a375 1
    stringBuffer.append(TEXT_78);
d377 1
a377 1
    stringBuffer.append(TEXT_79);
d379 1
a379 1
    stringBuffer.append(TEXT_80);
d381 1
a381 1
    stringBuffer.append(TEXT_81);
d383 1
a383 1
    stringBuffer.append(TEXT_82);
d385 1
a385 1
    stringBuffer.append(TEXT_83);
d387 1
a387 1
    stringBuffer.append(TEXT_84);
d389 1
a389 1
    stringBuffer.append(TEXT_85);
d392 1
a392 1
    stringBuffer.append(TEXT_86);
d394 1
a394 1
    stringBuffer.append(TEXT_87);
d396 1
a396 1
    stringBuffer.append(TEXT_88);
d398 1
a398 1
    stringBuffer.append(TEXT_89);
d406 1
a406 1
    stringBuffer.append(TEXT_90);
d408 1
a408 1
    stringBuffer.append(TEXT_91);
d410 1
a410 1
    stringBuffer.append(TEXT_92);
d412 1
a412 1
    stringBuffer.append(TEXT_93);
d414 1
a414 1
    stringBuffer.append(TEXT_94);
d416 1
a416 1
    stringBuffer.append(TEXT_95);
d418 1
a418 1
    stringBuffer.append(TEXT_96);
d420 1
a420 1
    stringBuffer.append(TEXT_97);
d422 1
a422 1
    stringBuffer.append(TEXT_98);
@


1.45
log
@[mgolubev] #145863 Colors defined in the gmfgraph model should be used by the generated polyline connections
@
text
@d50 68
a117 67
  protected final String TEXT_31 = ".eINSTANCE.createFontStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_32 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_33 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_34 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_35 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_36 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_37 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_38 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_39 = ".getType(";
  protected final String TEXT_40 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_41 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_42 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_43 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_44 = ".MODEL_ID.equals(";
  protected final String TEXT_45 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_46 = " shortcutAnnotation = ";
  protected final String TEXT_47 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_48 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_51 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_52 = ".colorToInteger(";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = "));";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_57 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_58 = ".colorToInteger(";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = "));";
  protected final String TEXT_61 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_62 = ".getType(";
  protected final String TEXT_63 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_64 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_65 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_66 = ".getType(";
  protected final String TEXT_67 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_68 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_69 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_70 = ".getType(";
  protected final String TEXT_71 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_72 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_73 = NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_75 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_76 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_77 = " store = (";
  protected final String TEXT_78 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_79 = " fillRGB = ";
  protected final String TEXT_80 = ".getColor(store, ";
  protected final String TEXT_81 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_82 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_83 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_84 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_85 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_86 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_89 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_90 = " titleStyle = (";
  protected final String TEXT_91 = ")view.getStyle(";
  protected final String TEXT_92 = ".eINSTANCE.getTitleStyle());" + NL + "\t\tif (titleStyle != null){" + NL + "\t\t\ttitleStyle.setShowTitle(true);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_93 = " drawerStyle = (";
  protected final String TEXT_94 = ")view.getStyle(";
  protected final String TEXT_95 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tdrawerStyle.setCollapsed(false);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_96 = NL + NL + "}";
  protected final String TEXT_97 = NL;
d158 5
a195 3
	Viewmap viewmap = genElement.getViewmap();
	StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
	boolean fixedForeground = styleAttributes != null && styleAttributes.isFixedForeground();
d206 1
d244 1
d249 3
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d257 2
d262 1
a262 1
    stringBuffer.append(TEXT_35);
d266 1
a266 1
    stringBuffer.append(TEXT_36);
d270 1
a270 1
    stringBuffer.append(TEXT_37);
d272 1
a272 1
    stringBuffer.append(TEXT_38);
d274 1
a274 1
    stringBuffer.append(TEXT_39);
d276 1
a276 1
    stringBuffer.append(TEXT_40);
d278 1
a278 1
    stringBuffer.append(TEXT_41);
d280 1
a280 1
    stringBuffer.append(TEXT_42);
d282 1
a282 1
    stringBuffer.append(TEXT_43);
d284 1
a284 1
    stringBuffer.append(TEXT_44);
d286 1
a286 1
    stringBuffer.append(TEXT_45);
d288 1
a288 1
    stringBuffer.append(TEXT_46);
d290 1
a290 1
    stringBuffer.append(TEXT_47);
d292 1
a292 1
    stringBuffer.append(TEXT_48);
d298 1
a298 1
    stringBuffer.append(TEXT_49);
d300 1
a300 1
    stringBuffer.append(TEXT_50);
d302 1
a302 1
    stringBuffer.append(TEXT_51);
d304 1
a304 1
    stringBuffer.append(TEXT_52);
d306 1
a306 1
    stringBuffer.append(TEXT_53);
d308 1
a308 1
    stringBuffer.append(TEXT_54);
d314 1
a314 1
    stringBuffer.append(TEXT_55);
d316 1
a316 1
    stringBuffer.append(TEXT_56);
d318 1
a318 1
    stringBuffer.append(TEXT_57);
d320 1
a320 1
    stringBuffer.append(TEXT_58);
d322 1
a322 1
    stringBuffer.append(TEXT_59);
d324 1
a324 1
    stringBuffer.append(TEXT_60);
d331 1
a331 1
    stringBuffer.append(TEXT_61);
d333 1
a333 1
    stringBuffer.append(TEXT_62);
d335 1
a335 1
    stringBuffer.append(TEXT_63);
d337 1
a337 1
    stringBuffer.append(TEXT_64);
d344 1
a344 1
    stringBuffer.append(TEXT_65);
d346 1
a346 1
    stringBuffer.append(TEXT_66);
d348 1
a348 1
    stringBuffer.append(TEXT_67);
d350 1
a350 1
    stringBuffer.append(TEXT_68);
d359 1
a359 1
    stringBuffer.append(TEXT_69);
d361 1
a361 1
    stringBuffer.append(TEXT_70);
d363 1
a363 1
    stringBuffer.append(TEXT_71);
d365 1
a365 1
    stringBuffer.append(TEXT_72);
d370 1
a370 1
    stringBuffer.append(TEXT_73);
d372 1
a372 1
    stringBuffer.append(TEXT_74);
d374 1
a374 1
    stringBuffer.append(TEXT_75);
a375 2
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d379 2
d382 1
a382 1
    stringBuffer.append(TEXT_79);
d384 1
a384 1
    stringBuffer.append(TEXT_80);
d386 1
a386 1
    stringBuffer.append(TEXT_81);
d388 1
a388 1
    stringBuffer.append(TEXT_82);
d390 1
a390 1
    stringBuffer.append(TEXT_83);
d392 1
a392 1
    stringBuffer.append(TEXT_84);
a394 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.MeasurementUnit"));
d398 2
d401 1
a401 1
    stringBuffer.append(TEXT_88);
a408 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(titleStyleFQN);
d412 2
a414 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(drawerStyleFQN);
d418 2
d421 1
a421 1
    stringBuffer.append(TEXT_95);
d423 1
a423 1
    stringBuffer.append(TEXT_96);
d425 1
a425 1
    stringBuffer.append(TEXT_97);
@


1.44
log
@[mgolubev] #143934 Compartment title is not shown on diagram
@
text
@d31 27
a57 27
  protected final String TEXT_12 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_13 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_14 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_15 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_16 = ".getType(";
  protected final String TEXT_17 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_19 = NL + "\t\tsetupCompartmentTitle(view);" + NL + "\t\tsetupCompartmentCollapsed(view);";
  protected final String TEXT_20 = "\t\t" + NL + "\t\tif (!";
  protected final String TEXT_21 = ".MODEL_ID.equals(";
  protected final String TEXT_22 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_23 = " shortcutAnnotation = ";
  protected final String TEXT_24 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_25 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_26 = NL + "\t\t";
  protected final String TEXT_27 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_28 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_29 = ".colorToInteger(";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = "));";
  protected final String TEXT_32 = NL + "\t\t";
  protected final String TEXT_33 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_34 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_35 = ".colorToInteger(";
  protected final String TEXT_36 = ".";
  protected final String TEXT_37 = "));";
  protected final String TEXT_38 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
d59 58
a116 48
  protected final String TEXT_40 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_41 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_42 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_43 = ".getType(";
  protected final String TEXT_44 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_45 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_46 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_47 = ".getType(";
  protected final String TEXT_48 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_49 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_50 = NL + "\t}";
  protected final String TEXT_51 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_52 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_53 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_54 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_55 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_56 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_57 = " store = (";
  protected final String TEXT_58 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_59 = " fillRGB = ";
  protected final String TEXT_60 = ".getColor(store, ";
  protected final String TEXT_61 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_62 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_63 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_64 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_65 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_66 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_69 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentTitle(View view) {" + NL + "\t\t";
  protected final String TEXT_70 = " titleStyle = (";
  protected final String TEXT_71 = ")view.getStyle(";
  protected final String TEXT_72 = ".eINSTANCE.getTitleStyle());";
  protected final String TEXT_73 = "\t\t" + NL + "\t\tif (titleStyle == null){" + NL + "\t\t\ttitleStyle = (";
  protected final String TEXT_74 = ") view.createStyle(";
  protected final String TEXT_75 = ".eINSTANCE.getTitleStyle());" + NL + "\t\t}" + NL + "\t\ttitleStyle.setShowTitle(true);";
  protected final String TEXT_76 = NL + "\t\tif (titleStyle != null){" + NL + "\t\t\tview.getStyles().remove(titleStyle);" + NL + "\t\t}";
  protected final String TEXT_77 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupCompartmentCollapsed(View view) {" + NL + "\t\t";
  protected final String TEXT_78 = " drawerStyle = (";
  protected final String TEXT_79 = ")view.getStyle(";
  protected final String TEXT_80 = ".eINSTANCE.getDrawerStyle());";
  protected final String TEXT_81 = "\t\t" + NL + "\t\tif (drawerStyle == null){" + NL + "\t\t\tdrawerStyle = (";
  protected final String TEXT_82 = ") view.createStyle(";
  protected final String TEXT_83 = ".eINSTANCE.getDrawerStyle());" + NL + "\t\t}" + NL + "\t\tdrawerStyle.setCollapsed(false);";
  protected final String TEXT_84 = NL + "\t\tif (drawerStyle != null){" + NL + "\t\t\tview.getStyles().remove(drawerStyle);" + NL + "\t\t}";
  protected final String TEXT_85 = NL + "\t}" + NL;
  protected final String TEXT_86 = NL + "}";
  protected final String TEXT_87 = NL;
d143 6
d150 1
a150 4
boolean isLink = genElement instanceof GenLink;
boolean isDiagram = genElement instanceof GenDiagram;
boolean isCompartment = genElement instanceof GenCompartment;
boolean isNode = !isLink && !isDiagram && !isCompartment;
d163 1
a163 1
    } else if (genElement instanceof GenChildLabelNode) {
d172 1
a172 1
    } else {
d175 3
a177 1
    }
d179 4
d184 20
d206 52
a257 1
    stringBuffer.append(TEXT_13);
d261 1
a261 1
    stringBuffer.append(TEXT_14);
d263 1
a263 1
    stringBuffer.append(TEXT_15);
d265 1
a265 1
    stringBuffer.append(TEXT_16);
d267 1
a267 1
    stringBuffer.append(TEXT_17);
d269 1
a269 1
    stringBuffer.append(TEXT_18);
d271 1
a271 1
    stringBuffer.append(TEXT_19);
d273 1
a273 1
    stringBuffer.append(TEXT_20);
d275 1
a275 1
    stringBuffer.append(TEXT_21);
d277 1
a277 1
    stringBuffer.append(TEXT_22);
d279 1
a279 1
    stringBuffer.append(TEXT_23);
d281 1
a281 1
    stringBuffer.append(TEXT_24);
d283 1
a283 1
    stringBuffer.append(TEXT_25);
d289 1
a289 1
    stringBuffer.append(TEXT_26);
d291 1
a291 1
    stringBuffer.append(TEXT_27);
d293 1
a293 1
    stringBuffer.append(TEXT_28);
d295 1
a295 1
    stringBuffer.append(TEXT_29);
d297 1
a297 1
    stringBuffer.append(TEXT_30);
d299 1
a299 1
    stringBuffer.append(TEXT_31);
d305 1
a305 1
    stringBuffer.append(TEXT_32);
d307 1
a307 1
    stringBuffer.append(TEXT_33);
d309 1
a309 1
    stringBuffer.append(TEXT_34);
d311 1
a311 1
    stringBuffer.append(TEXT_35);
d313 1
a313 1
    stringBuffer.append(TEXT_36);
d315 1
a315 1
    stringBuffer.append(TEXT_37);
d322 1
a322 1
    stringBuffer.append(TEXT_38);
d324 1
a324 1
    stringBuffer.append(TEXT_39);
d326 1
a326 1
    stringBuffer.append(TEXT_40);
d328 1
a328 1
    stringBuffer.append(TEXT_41);
d335 1
a335 1
    stringBuffer.append(TEXT_42);
d337 1
a337 1
    stringBuffer.append(TEXT_43);
d339 1
a339 1
    stringBuffer.append(TEXT_44);
d341 1
a341 1
    stringBuffer.append(TEXT_45);
d350 1
a350 1
    stringBuffer.append(TEXT_46);
d352 1
a352 1
    stringBuffer.append(TEXT_47);
d354 1
a354 1
    stringBuffer.append(TEXT_48);
d356 1
a356 1
    stringBuffer.append(TEXT_49);
d361 1
a361 1
    stringBuffer.append(TEXT_50);
d363 1
a363 7
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_54);
d365 1
a365 1
    stringBuffer.append(TEXT_55);
d367 1
a367 1
    stringBuffer.append(TEXT_56);
d369 1
a369 1
    stringBuffer.append(TEXT_57);
d371 1
a371 1
    stringBuffer.append(TEXT_58);
d373 1
a373 1
    stringBuffer.append(TEXT_59);
d375 1
a375 1
    stringBuffer.append(TEXT_60);
d377 1
a377 1
    stringBuffer.append(TEXT_61);
d379 1
a379 1
    stringBuffer.append(TEXT_62);
d381 1
a381 1
    stringBuffer.append(TEXT_63);
d383 1
a383 1
    stringBuffer.append(TEXT_64);
d386 1
a386 1
    stringBuffer.append(TEXT_65);
d388 1
a388 1
    stringBuffer.append(TEXT_66);
d390 1
a390 1
    stringBuffer.append(TEXT_67);
d392 1
a392 1
    stringBuffer.append(TEXT_68);
a398 1
	GenCompartment genCompartment = (GenCompartment)genElement;
d400 1
a400 1
    stringBuffer.append(TEXT_69);
d402 1
a402 1
    stringBuffer.append(TEXT_70);
d404 1
a404 1
    stringBuffer.append(TEXT_71);
d406 1
a406 13
    stringBuffer.append(TEXT_72);
    
if(genCompartment.isNeedsTitle()){

    stringBuffer.append(TEXT_73);
    stringBuffer.append(titleStyleFQN);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(notationPackageFQN);
    stringBuffer.append(TEXT_75);
    } else {
    stringBuffer.append(TEXT_76);
    }
    stringBuffer.append(TEXT_77);
d408 1
a408 1
    stringBuffer.append(TEXT_78);
d410 1
a410 1
    stringBuffer.append(TEXT_79);
d412 1
a412 13
    stringBuffer.append(TEXT_80);
    
if(genCompartment.isCanCollapse()){

    stringBuffer.append(TEXT_81);
    stringBuffer.append(drawerStyleFQN);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(notationPackageFQN);
    stringBuffer.append(TEXT_83);
    } else {
    stringBuffer.append(TEXT_84);
    }
    stringBuffer.append(TEXT_85);
d414 1
a414 1
    stringBuffer.append(TEXT_86);
d416 1
a416 1
    stringBuffer.append(TEXT_87);
@


1.43
log
@header comment should not be a javadoc comment
@
text
@d37 70
a106 51
  protected final String TEXT_18 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tif (!";
  protected final String TEXT_19 = ".MODEL_ID.equals(";
  protected final String TEXT_20 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_21 = " shortcutAnnotation = ";
  protected final String TEXT_22 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_23 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_24 = NL + "\t\t";
  protected final String TEXT_25 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_26 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_27 = ".colorToInteger(";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "));";
  protected final String TEXT_30 = NL + "\t\t";
  protected final String TEXT_31 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_32 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_33 = ".colorToInteger(";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = "));";
  protected final String TEXT_36 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_37 = ".getType(";
  protected final String TEXT_38 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_39 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_40 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_41 = ".getType(";
  protected final String TEXT_42 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_43 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_44 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_45 = ".getType(";
  protected final String TEXT_46 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_47 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_48 = NL + "\t}";
  protected final String TEXT_49 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_50 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_51 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_52 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_53 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_54 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_55 = " store = (";
  protected final String TEXT_56 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_57 = " fillRGB = ";
  protected final String TEXT_58 = ".getColor(store, ";
  protected final String TEXT_59 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_60 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_61 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_62 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_63 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_64 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_67 = NL + "}";
  protected final String TEXT_68 = NL;
d172 1
a172 1
    /* [++] importmant for the create shortcut functionality*/
d178 1
a178 1
    /* [--] importmant for the create shortcut functionality*/
d180 4
d185 1
a185 1
    stringBuffer.append(TEXT_19);
d187 1
a187 1
    stringBuffer.append(TEXT_20);
d189 1
a189 1
    stringBuffer.append(TEXT_21);
d191 1
a191 1
    stringBuffer.append(TEXT_22);
d193 1
a193 1
    stringBuffer.append(TEXT_23);
d199 1
a199 1
    stringBuffer.append(TEXT_24);
d201 1
a201 1
    stringBuffer.append(TEXT_25);
d203 1
a203 1
    stringBuffer.append(TEXT_26);
d205 1
a205 1
    stringBuffer.append(TEXT_27);
d207 1
a207 1
    stringBuffer.append(TEXT_28);
d209 1
a209 1
    stringBuffer.append(TEXT_29);
d215 1
a215 1
    stringBuffer.append(TEXT_30);
d217 1
a217 1
    stringBuffer.append(TEXT_31);
d219 1
a219 1
    stringBuffer.append(TEXT_32);
d221 1
a221 1
    stringBuffer.append(TEXT_33);
d223 1
a223 1
    stringBuffer.append(TEXT_34);
d225 1
a225 1
    stringBuffer.append(TEXT_35);
d232 1
a232 1
    stringBuffer.append(TEXT_36);
d234 1
a234 1
    stringBuffer.append(TEXT_37);
d236 1
a236 1
    stringBuffer.append(TEXT_38);
d238 1
a238 1
    stringBuffer.append(TEXT_39);
d245 1
a245 1
    stringBuffer.append(TEXT_40);
d247 1
a247 1
    stringBuffer.append(TEXT_41);
d249 1
a249 1
    stringBuffer.append(TEXT_42);
d251 1
a251 1
    stringBuffer.append(TEXT_43);
d260 1
a260 1
    stringBuffer.append(TEXT_44);
d262 1
a262 1
    stringBuffer.append(TEXT_45);
d264 1
a264 1
    stringBuffer.append(TEXT_46);
d266 1
a266 1
    stringBuffer.append(TEXT_47);
d271 1
a271 1
    stringBuffer.append(TEXT_48);
d273 1
a273 1
    stringBuffer.append(TEXT_49);
d275 1
a275 1
    stringBuffer.append(TEXT_50);
d277 1
a277 1
    stringBuffer.append(TEXT_51);
d279 1
a279 1
    stringBuffer.append(TEXT_52);
d281 1
a281 1
    stringBuffer.append(TEXT_53);
d283 1
a283 1
    stringBuffer.append(TEXT_54);
d285 1
a285 1
    stringBuffer.append(TEXT_55);
d287 1
a287 1
    stringBuffer.append(TEXT_56);
d289 1
a289 1
    stringBuffer.append(TEXT_57);
d291 1
a291 1
    stringBuffer.append(TEXT_58);
d293 1
a293 1
    stringBuffer.append(TEXT_59);
d295 1
a295 1
    stringBuffer.append(TEXT_60);
d297 1
a297 1
    stringBuffer.append(TEXT_61);
d299 1
a299 1
    stringBuffer.append(TEXT_62);
d302 1
a302 1
    stringBuffer.append(TEXT_63);
d304 1
a304 1
    stringBuffer.append(TEXT_64);
d306 1
a306 1
    stringBuffer.append(TEXT_65);
d308 46
a353 1
    stringBuffer.append(TEXT_66);
d355 1
a355 1
    stringBuffer.append(TEXT_67);
d357 1
a357 1
    stringBuffer.append(TEXT_68);
@


1.42
log
@fix some nls markers
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.41
log
@Correcting copyright processing
@
text
@d42 1
a42 1
  protected final String TEXT_23 = ".MODEL_ID);" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
@


1.40
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d103 1
a103 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.39
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d23 4
a26 4
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends ";
d28 60
a87 61
  protected final String TEXT_9 = NL + "\t";
  protected final String TEXT_10 = NL + "    ";
  protected final String TEXT_11 = "    " + NL + "\t";
  protected final String TEXT_12 = NL + "\t";
  protected final String TEXT_13 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_14 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_15 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tif (semanticHint == null) { ";
  protected final String TEXT_16 = NL + "\t\t\tsemanticHint = ";
  protected final String TEXT_17 = ".getType(";
  protected final String TEXT_18 = ".VISUAL_ID);" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_19 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tif (!";
  protected final String TEXT_20 = ".MODEL_ID.equals(";
  protected final String TEXT_21 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_22 = " shortcutAnnotation = ";
  protected final String TEXT_23 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_24 = ".MODEL_ID);" + NL + "\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t}";
  protected final String TEXT_25 = NL + "\t\t";
  protected final String TEXT_26 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_27 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_28 = ".colorToInteger(";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = "));";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_33 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_34 = ".colorToInteger(";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = "));";
  protected final String TEXT_37 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_38 = ".getType(";
  protected final String TEXT_39 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_40 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_41 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_42 = ".getType(";
  protected final String TEXT_43 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_44 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_45 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_46 = ".getType(";
  protected final String TEXT_47 = ".VISUAL_ID)," + NL + "\t\t\t";
  protected final String TEXT_48 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_49 = NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_51 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_52 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_53 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_54 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_55 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_56 = " store = (";
  protected final String TEXT_57 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_58 = " fillRGB = ";
  protected final String TEXT_59 = ".getColor(store, ";
  protected final String TEXT_60 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_61 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_62 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_63 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_65 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_68 = NL + "}";
  protected final String TEXT_69 = NL;
d92 5
a96 2
    GenCommonBase genElement = (GenCommonBase) ((Object[]) argument)[0];
    GenDiagram genDiagram = genElement.getDiagram();
d106 1
d108 1
a108 4
    stringBuffer.append(genDiagram.getNotationViewFactoriesPackageName());
    stringBuffer.append(TEXT_5);
    ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());

d125 2
d128 1
a128 1
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
a129 2
    if (isLink) {
    stringBuffer.append(TEXT_8);
d132 1
a132 1
    stringBuffer.append(TEXT_9);
d135 1
a135 1
    stringBuffer.append(TEXT_10);
d138 1
a138 1
    stringBuffer.append(TEXT_11);
d141 1
a141 1
    stringBuffer.append(TEXT_12);
d144 1
a144 1
    stringBuffer.append(TEXT_13);
d148 1
a148 1
    stringBuffer.append(TEXT_14);
d152 2
d155 1
a155 1
    /* [++] importmant for the create shortcut functionality*/
d157 1
a157 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d159 1
a159 1
    stringBuffer.append(genElement.getEditPartQualifiedClassName());
d161 1
a161 1
    /* [--] importmant for the create shortcut functionality*/
d163 1
a163 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d165 1
a165 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d167 1
a167 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d169 1
a169 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory"));
a170 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_24);
d176 2
d179 1
a179 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d181 1
a181 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d183 1
a183 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
d185 1
a185 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
a186 2
    stringBuffer.append(colorAttrs.getForegroundColor());
    stringBuffer.append(TEXT_30);
d192 2
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d197 1
a197 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
a202 2
    stringBuffer.append(colorAttrs.getBackgroundColor());
    stringBuffer.append(TEXT_36);
d209 2
d212 1
a212 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
a215 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_40);
d222 2
d225 1
a225 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName(genChildContainer.getEditPartQualifiedClassName()));
a228 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_44);
d237 2
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
a243 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_48);
d248 2
d251 1
a251 1
    if (isCompartmentWithOwnBounds) {
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d257 2
a259 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LayoutConstraint"));
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.RGB"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
a276 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
    stringBuffer.append(TEXT_63);
d279 2
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.MeasurementUnit"));
d286 1
a286 1
    stringBuffer.append(genDiagram.getUnits().toUpperCase());
d288 1
a288 1
    }
a289 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_69);
@


1.38
log
@#133836 Creating a child node without a label causes error
@
text
@d6 1
d119 5
a123 1
boolean isFlowLayout = isCompartment && !((GenCompartment) genElement).getNode().isListLayout();
d249 1
a249 1
    if (isFlowLayout) {
@


1.37
log
@#138341 Show all child elements in element shortcutted to the diagram of other domain
@
text
@a117 1
boolean isLeaf = genElement instanceof GenNode &&  ((GenNode) genElement).isListContainerEntry();
d126 1
a126 1
    } else if (isLeaf) {
d200 3
a202 4
	if (!isLeaf) {
		List labels = genNode.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			GenNodeLabel label = (GenNodeLabel) labels.get(j);
a211 1
		}
@


1.36
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d42 1
a42 1
  protected final String TEXT_24 = ".MODEL_ID);" + NL + "\t\t}";
@


1.35
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d35 27
a61 27
  protected final String TEXT_17 = ".VISUAL_ID;" + NL + "\t\t\tview.setType(semanticHint);" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tif (!";
  protected final String TEXT_19 = ".MODEL_ID.equals(";
  protected final String TEXT_20 = ".getModelID(containerView))) {" + NL + "\t\t\t";
  protected final String TEXT_21 = " shortcutAnnotation = ";
  protected final String TEXT_22 = ".eINSTANCE.createEAnnotation();" + NL + "\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_23 = ".MODEL_ID);" + NL + "\t\t}";
  protected final String TEXT_24 = NL + "\t\t";
  protected final String TEXT_25 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_26 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_27 = ".colorToInteger(";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "));";
  protected final String TEXT_30 = NL + "\t\t";
  protected final String TEXT_31 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_32 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_33 = ".colorToInteger(";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = "));";
  protected final String TEXT_36 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_37 = ".VISUAL_ID," + NL + "\t\t\t";
  protected final String TEXT_38 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_39 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_40 = ".VISUAL_ID," + NL + "\t\t\t";
  protected final String TEXT_41 = ".APPEND, true, getPreferencesHint());";
  protected final String TEXT_42 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_43 = ".VISUAL_ID," + NL + "\t\t\t";
d63 25
a87 21
  protected final String TEXT_45 = NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_47 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_48 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_49 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_50 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_51 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_52 = " store = (";
  protected final String TEXT_53 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_54 = " fillRGB = ";
  protected final String TEXT_55 = ".getColor(store, ";
  protected final String TEXT_56 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_57 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_58 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_59 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_60 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_61 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_64 = NL + "}";
  protected final String TEXT_65 = NL;
d151 2
d154 1
a154 1
    stringBuffer.append(TEXT_17);
d156 1
a156 1
    stringBuffer.append(TEXT_18);
d158 1
a158 1
    stringBuffer.append(TEXT_19);
d160 1
a160 1
    stringBuffer.append(TEXT_20);
d162 1
a162 1
    stringBuffer.append(TEXT_21);
d164 1
a164 1
    stringBuffer.append(TEXT_22);
d166 1
a166 1
    stringBuffer.append(TEXT_23);
d172 1
a172 1
    stringBuffer.append(TEXT_24);
d174 1
a174 1
    stringBuffer.append(TEXT_25);
d176 1
a176 1
    stringBuffer.append(TEXT_26);
d178 1
a178 1
    stringBuffer.append(TEXT_27);
d180 1
a180 1
    stringBuffer.append(TEXT_28);
d182 1
a182 1
    stringBuffer.append(TEXT_29);
d188 1
a188 1
    stringBuffer.append(TEXT_30);
d190 1
a190 1
    stringBuffer.append(TEXT_31);
d192 1
a192 1
    stringBuffer.append(TEXT_32);
d194 1
a194 1
    stringBuffer.append(TEXT_33);
d196 1
a196 1
    stringBuffer.append(TEXT_34);
d198 1
a198 1
    stringBuffer.append(TEXT_35);
d206 3
a208 1
    stringBuffer.append(TEXT_36);
d210 1
a210 1
    stringBuffer.append(TEXT_37);
d212 1
a212 1
    stringBuffer.append(TEXT_38);
d220 3
a222 1
    stringBuffer.append(TEXT_39);
d224 1
a224 1
    stringBuffer.append(TEXT_40);
d226 1
a226 1
    stringBuffer.append(TEXT_41);
d235 3
a237 1
    stringBuffer.append(TEXT_42);
d239 1
a239 1
    stringBuffer.append(TEXT_43);
d241 1
a241 1
    stringBuffer.append(TEXT_44);
d246 1
a246 1
    stringBuffer.append(TEXT_45);
d248 1
a248 1
    stringBuffer.append(TEXT_46);
d250 1
a250 1
    stringBuffer.append(TEXT_47);
d252 1
a252 1
    stringBuffer.append(TEXT_48);
d254 1
a254 1
    stringBuffer.append(TEXT_49);
d256 1
a256 1
    stringBuffer.append(TEXT_50);
d258 1
a258 1
    stringBuffer.append(TEXT_51);
d260 1
a260 1
    stringBuffer.append(TEXT_52);
d262 1
a262 1
    stringBuffer.append(TEXT_53);
d264 1
a264 1
    stringBuffer.append(TEXT_54);
d266 1
a266 1
    stringBuffer.append(TEXT_55);
d268 1
a268 1
    stringBuffer.append(TEXT_56);
d270 1
a270 1
    stringBuffer.append(TEXT_57);
d272 1
a272 1
    stringBuffer.append(TEXT_58);
d274 1
a274 1
    stringBuffer.append(TEXT_59);
d277 1
a277 1
    stringBuffer.append(TEXT_60);
d279 1
a279 1
    stringBuffer.append(TEXT_61);
d281 1
a281 1
    stringBuffer.append(TEXT_62);
d283 1
a283 1
    stringBuffer.append(TEXT_63);
d285 1
a285 1
    stringBuffer.append(TEXT_64);
d287 1
a287 1
    stringBuffer.append(TEXT_65);
@


1.34
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d24 3
a26 3
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ";
d28 26
a53 26
  protected final String TEXT_10 = NL + "\t";
  protected final String TEXT_11 = NL + "    ";
  protected final String TEXT_12 = "    " + NL + "\t";
  protected final String TEXT_13 = NL + "\t";
  protected final String TEXT_14 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_15 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_16 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_19 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_20 = "\"); //$NON-NLS-1$";
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_23 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_24 = ".colorToInteger(";
  protected final String TEXT_25 = ".";
  protected final String TEXT_26 = "));";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_29 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_30 = ".colorToInteger(";
  protected final String TEXT_31 = ".";
  protected final String TEXT_32 = "));";
  protected final String TEXT_33 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_34 = ".VISUAL_ID," + NL + "\t\t\t";
  protected final String TEXT_35 = ".APPEND, true, getPreferencesHint());";
d60 24
a83 21
  protected final String TEXT_42 = NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_44 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_45 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_46 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_47 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_48 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_49 = " store = (";
  protected final String TEXT_50 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_51 = " fillRGB = ";
  protected final String TEXT_52 = ".getColor(store, ";
  protected final String TEXT_53 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_54 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_55 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_56 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_57 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_58 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_61 = NL + "}";
  protected final String TEXT_62 = NL;
d103 7
a109 3
    stringBuffer.append(TEXT_6);
    importManager.markImportLocation(stringBuffer);
    
d117 2
d120 1
a120 1
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
a121 2
    if (isLink) {
    stringBuffer.append(TEXT_9);
d124 1
a124 1
    stringBuffer.append(TEXT_10);
d127 1
a127 1
    stringBuffer.append(TEXT_11);
d130 1
a130 1
    stringBuffer.append(TEXT_12);
d133 1
a133 1
    stringBuffer.append(TEXT_13);
d136 1
a136 1
    stringBuffer.append(TEXT_14);
d140 1
a140 1
    stringBuffer.append(TEXT_15);
d144 2
d147 1
a147 3
    
}

d149 1
d151 1
a151 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d153 1
a153 1
    stringBuffer.append(genElement.getVisualID());
d155 6
d162 2
d166 1
a166 1
    stringBuffer.append(TEXT_21);
d168 1
a168 1
    stringBuffer.append(TEXT_22);
d170 1
a170 1
    stringBuffer.append(TEXT_23);
d172 1
a172 1
    stringBuffer.append(TEXT_24);
d174 1
a174 1
    stringBuffer.append(TEXT_25);
d176 1
a176 1
    stringBuffer.append(TEXT_26);
d182 1
a182 1
    stringBuffer.append(TEXT_27);
d184 1
a184 1
    stringBuffer.append(TEXT_28);
d186 1
a186 1
    stringBuffer.append(TEXT_29);
d188 1
a188 1
    stringBuffer.append(TEXT_30);
d190 1
a190 1
    stringBuffer.append(TEXT_31);
d192 1
a192 1
    stringBuffer.append(TEXT_32);
d200 1
a200 1
    stringBuffer.append(TEXT_33);
d202 1
a202 1
    stringBuffer.append(TEXT_34);
d204 1
a204 1
    stringBuffer.append(TEXT_35);
d212 1
a212 1
    stringBuffer.append(TEXT_36);
d214 1
a214 1
    stringBuffer.append(TEXT_37);
d216 1
a216 1
    stringBuffer.append(TEXT_38);
d225 1
a225 1
    stringBuffer.append(TEXT_39);
d227 1
a227 1
    stringBuffer.append(TEXT_40);
d229 1
a229 1
    stringBuffer.append(TEXT_41);
d234 1
a234 1
    stringBuffer.append(TEXT_42);
d236 1
a236 1
    stringBuffer.append(TEXT_43);
d238 1
a238 1
    stringBuffer.append(TEXT_44);
d240 1
a240 1
    stringBuffer.append(TEXT_45);
d242 1
a242 1
    stringBuffer.append(TEXT_46);
d244 1
a244 1
    stringBuffer.append(TEXT_47);
d246 1
a246 1
    stringBuffer.append(TEXT_48);
d248 1
a248 1
    stringBuffer.append(TEXT_49);
d250 1
a250 1
    stringBuffer.append(TEXT_50);
d252 1
a252 1
    stringBuffer.append(TEXT_51);
d254 1
a254 1
    stringBuffer.append(TEXT_52);
d256 1
a256 1
    stringBuffer.append(TEXT_53);
d258 1
a258 1
    stringBuffer.append(TEXT_54);
d260 1
a260 1
    stringBuffer.append(TEXT_55);
d262 1
a262 1
    stringBuffer.append(TEXT_56);
d265 1
a265 1
    stringBuffer.append(TEXT_57);
d267 1
a267 1
    stringBuffer.append(TEXT_58);
d269 1
a269 1
    stringBuffer.append(TEXT_59);
d271 1
a271 1
    stringBuffer.append(TEXT_60);
d273 1
a273 1
    stringBuffer.append(TEXT_61);
d275 1
a275 1
    stringBuffer.append(TEXT_62);
@


1.33
log
@using M6 to generate code.
@
text
@d52 1
a52 1
  protected final String TEXT_34 = "," + NL + "\t\t\t";
d55 1
a55 1
  protected final String TEXT_37 = "," + NL + "\t\t\t";
d58 1
a58 1
  protected final String TEXT_40 = "," + NL + "\t\t\t";
d60 21
a80 24
  protected final String TEXT_42 = NL + "\t\tview.setType(";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = ");";
  protected final String TEXT_45 = NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_47 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_48 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_49 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_50 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_51 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_52 = " store = (";
  protected final String TEXT_53 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_54 = " fillRGB = ";
  protected final String TEXT_55 = ".getColor(store, ";
  protected final String TEXT_56 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_57 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_58 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_59 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_60 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_61 = " getMeasurementUnit() {" + NL + "\t\treturn ";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "_LITERAL;" + NL + "\t}";
  protected final String TEXT_64 = NL + "}";
  protected final String TEXT_65 = NL;
a181 1
			String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a182 1
			String labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d185 1
a185 1
    stringBuffer.append(labelViewId);
a193 1
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a194 1
		String compartmentViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + genChildContainer.getSemanticHintFieldName();
d197 1
a197 1
    stringBuffer.append(compartmentViewId);
a206 1
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a207 1
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d210 1
a210 1
    stringBuffer.append(labelViewId);
d216 1
a216 1
	if (genLink.getModelFacet() instanceof FeatureModelFacet || genLink.getModelFacet() == null) {
d219 1
a219 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d221 1
a221 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d223 1
a223 4
    
	}
}

d225 1
a225 1
    if (isFlowLayout) {
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d229 1
a229 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d233 1
a233 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.LayoutConstraint"));
d235 1
a235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d241 1
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.RGB"));
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.PreferenceConverter"));
d245 1
a245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants"));
a246 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities"));
    stringBuffer.append(TEXT_59);
d249 1
a249 1
    stringBuffer.append(TEXT_60);
d251 1
a251 1
    stringBuffer.append(TEXT_61);
d253 1
a253 1
    stringBuffer.append(TEXT_62);
d255 1
a255 1
    stringBuffer.append(TEXT_63);
d257 1
a257 1
    stringBuffer.append(TEXT_64);
d259 1
a259 1
    stringBuffer.append(TEXT_65);
@


1.32
log
@restore generators
@
text
@d87 1
a87 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.31
log
@#134095 do not store compiled templates in cvs
@
text
@d87 1
a87 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.30
log
@Switching to eclipse M6.
@
text
@@


1.29
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d87 1
a87 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.28
log
@respect measurement units during diagram ViewFactory code generation
@
text
@a110 1

d187 1
a187 6
			String labelViewId;
			if (label instanceof ExternalLabel) {
				labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
			} else {
				labelViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
			}
d201 1
a201 1
		String compartmentId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + genChildContainer.getSemanticHintFieldName();
d204 1
a204 1
    stringBuffer.append(compartmentId);
d216 1
a216 1
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + label.getSemanticHintLabelFieldName();
@


1.27
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d78 6
a83 2
  protected final String TEXT_60 = NL + "}";
  protected final String TEXT_61 = NL;
d272 1
d274 8
d283 1
a283 1
    stringBuffer.append(TEXT_61);
@


1.26
log
@#114175 for links
@
text
@d19 9
a27 9
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = NL + "\t";
  protected final String TEXT_7 = NL + "\t";
  protected final String TEXT_8 = NL + "    ";
  protected final String TEXT_9 = "    " + NL + "\t";
d29 22
a50 22
  protected final String TEXT_11 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */";
  protected final String TEXT_12 = NL + "\tprotected void decorateView(View view, IAdaptable semanticAdapter, String diagramKind){" + NL + "\t\tsuper.decorateView(view, semanticAdapter, diagramKind);";
  protected final String TEXT_13 = NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_16 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_17 = "\"); //$NON-NLS-1$";
  protected final String TEXT_18 = NL + "\t\t";
  protected final String TEXT_19 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_20 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_21 = ".colorToInteger(";
  protected final String TEXT_22 = ".";
  protected final String TEXT_23 = "));";
  protected final String TEXT_24 = NL + "\t\t";
  protected final String TEXT_25 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_26 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_27 = ".colorToInteger(";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "));";
  protected final String TEXT_30 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_31 = "," + NL + "\t\t\t";
  protected final String TEXT_32 = ".APPEND, true, getPreferencesHint());";
d57 23
a79 20
  protected final String TEXT_39 = NL + "\t\tview.setType(";
  protected final String TEXT_40 = ".";
  protected final String TEXT_41 = ");";
  protected final String TEXT_42 = NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_44 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_45 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_46 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_47 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_48 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_49 = " store = (";
  protected final String TEXT_50 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_51 = " fillRGB = ";
  protected final String TEXT_52 = ".getColor(store, ";
  protected final String TEXT_53 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_54 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_55 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_56 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_57 = NL + "}";
  protected final String TEXT_58 = NL;
d87 9
d97 1
a97 1
    stringBuffer.append(TEXT_2);
d99 1
a99 1
    stringBuffer.append(TEXT_3);
d110 1
a110 1
    stringBuffer.append(TEXT_4);
d112 1
a112 1
    stringBuffer.append(TEXT_5);
d114 1
a114 1
    stringBuffer.append(TEXT_6);
d117 1
a117 1
    stringBuffer.append(TEXT_7);
d120 1
a120 1
    stringBuffer.append(TEXT_8);
d123 1
a123 1
    stringBuffer.append(TEXT_9);
d126 1
a126 1
    stringBuffer.append(TEXT_10);
d129 1
a129 1
    stringBuffer.append(TEXT_11);
d133 1
a133 1
    stringBuffer.append(TEXT_12);
d137 1
a137 1
    stringBuffer.append(TEXT_13);
d141 2
a142 2
    stringBuffer.append(TEXT_14);
    stringBuffer.append(TEXT_15);
d144 1
a144 1
    stringBuffer.append(TEXT_16);
d146 1
a146 1
    stringBuffer.append(TEXT_17);
d150 1
a150 1
    stringBuffer.append(TEXT_18);
d152 1
a152 1
    stringBuffer.append(TEXT_19);
d154 1
a154 1
    stringBuffer.append(TEXT_20);
d156 1
a156 1
    stringBuffer.append(TEXT_21);
d158 1
a158 1
    stringBuffer.append(TEXT_22);
d160 1
a160 1
    stringBuffer.append(TEXT_23);
d166 1
a166 1
    stringBuffer.append(TEXT_24);
d168 1
a168 1
    stringBuffer.append(TEXT_25);
d170 1
a170 1
    stringBuffer.append(TEXT_26);
d172 1
a172 1
    stringBuffer.append(TEXT_27);
d174 1
a174 1
    stringBuffer.append(TEXT_28);
d176 1
a176 1
    stringBuffer.append(TEXT_29);
d191 1
a191 1
    stringBuffer.append(TEXT_30);
d193 1
a193 1
    stringBuffer.append(TEXT_31);
d195 1
a195 1
    stringBuffer.append(TEXT_32);
d205 1
a205 1
    stringBuffer.append(TEXT_33);
d207 1
a207 1
    stringBuffer.append(TEXT_34);
d209 1
a209 1
    stringBuffer.append(TEXT_35);
d220 1
a220 1
    stringBuffer.append(TEXT_36);
d222 1
a222 1
    stringBuffer.append(TEXT_37);
d224 1
a224 1
    stringBuffer.append(TEXT_38);
d229 1
a229 1
    stringBuffer.append(TEXT_39);
d231 1
a231 1
    stringBuffer.append(TEXT_40);
d233 1
a233 1
    stringBuffer.append(TEXT_41);
d238 1
a238 1
    stringBuffer.append(TEXT_42);
d240 1
a240 1
    stringBuffer.append(TEXT_43);
d242 1
a242 1
    stringBuffer.append(TEXT_44);
d244 1
a244 1
    stringBuffer.append(TEXT_45);
d246 1
a246 1
    stringBuffer.append(TEXT_46);
d248 1
a248 1
    stringBuffer.append(TEXT_47);
d250 1
a250 1
    stringBuffer.append(TEXT_48);
d252 1
a252 1
    stringBuffer.append(TEXT_49);
d254 1
a254 1
    stringBuffer.append(TEXT_50);
d256 1
a256 1
    stringBuffer.append(TEXT_51);
d258 1
a258 1
    stringBuffer.append(TEXT_52);
d260 1
a260 1
    stringBuffer.append(TEXT_53);
d262 1
a262 1
    stringBuffer.append(TEXT_54);
d264 1
a264 1
    stringBuffer.append(TEXT_55);
d266 1
a266 1
    stringBuffer.append(TEXT_56);
d268 1
a268 1
    stringBuffer.append(TEXT_57);
d270 1
a270 1
    stringBuffer.append(TEXT_58);
@


1.25
log
@#130014 Diagram elements created by CanonicalEditPolicy should not disappear on diagram reopenning
@
text
@d213 3
a215 2
    	}
	if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d227 1
a227 3
    	
if (isFlowLayout) {

d255 1
a255 3
    
}

@


1.24
log
@Using import manager to avoid name clashes with other classes in the same package.
@
text
@d50 1
a50 1
  protected final String TEXT_32 = ".APPEND, persisted, getPreferencesHint());";
d53 1
a53 1
  protected final String TEXT_35 = ".APPEND, persisted, getPreferencesHint());";
d56 1
a56 1
  protected final String TEXT_38 = ".APPEND, persisted, getPreferencesHint());";
@


1.23
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 5
a28 5
  protected final String TEXT_6 = NL + "\tConnectionViewFactory";
  protected final String TEXT_7 = NL + "\tAbstractLabelViewFactory";
  protected final String TEXT_8 = NL + "    ListCompartmentViewFactory";
  protected final String TEXT_9 = "    " + NL + "\tDiagramViewFactory";
  protected final String TEXT_10 = NL + "\tAbstractShapeViewFactory";
d103 1
d106 1
d109 1
d112 1
d115 1
@


1.22
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d81 1
a81 1
    GenCommonBase genElement = (GenCommonBase) argument;
@


1.21
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d126 1
a126 1
    stringBuffer.append(genDiagram.getEditorGen().getDomainGenModel().getModelName());
@


1.20
log
@ImportManager moved to oeg.common
@
text
@d126 1
a126 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
@


1.19
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.*;
@


1.18
log
@#114178
Create shortcut functionality added
@
text
@a92 1
boolean isLeaf = genElement instanceof GenChildNode &&  ((GenChildNode) genElement).isListContainerEntry();
d94 1
d96 1
a96 1
boolean isFlowLayout = isCompartment ? ((GenCompartment) genElement).getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL : false;
@


1.17
log
@#122054 support external node labels (partial fix)
@
text
@d33 44
a76 43
  protected final String TEXT_15 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_16 = "\");";
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_19 = ".eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\t";
  protected final String TEXT_20 = ".colorToInteger(";
  protected final String TEXT_21 = ".";
  protected final String TEXT_22 = "));";
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_25 = ".eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\t";
  protected final String TEXT_26 = ".colorToInteger(";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = "));";
  protected final String TEXT_29 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_30 = "," + NL + "\t\t\t";
  protected final String TEXT_31 = ".APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_32 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_33 = "," + NL + "\t\t\t";
  protected final String TEXT_34 = ".APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_35 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_36 = "," + NL + "\t\t\t";
  protected final String TEXT_37 = ".APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_38 = NL + "\t\tview.setType(";
  protected final String TEXT_39 = ".";
  protected final String TEXT_40 = ");";
  protected final String TEXT_41 = NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_43 = " createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_44 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_45 = ".eINSTANCE.createShapeStyle());" + NL + "\t\treturn styles;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_46 = " createLayoutConstraint() {" + NL + "\t\treturn ";
  protected final String TEXT_47 = ".eINSTANCE.createBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeFromPreferences(View view) {" + NL + "\t\tsuper.initializeFromPreferences(view);" + NL + "" + NL + "\t\t";
  protected final String TEXT_48 = " store = (";
  protected final String TEXT_49 = ") getPreferencesHint().getPreferenceStore();" + NL + "" + NL + "\t\t// fill color" + NL + "\t\t";
  protected final String TEXT_50 = " fillRGB = ";
  protected final String TEXT_51 = ".getColor(store, ";
  protected final String TEXT_52 = ".PREF_FILL_COLOR);" + NL + "\t\t";
  protected final String TEXT_53 = ".setStructuralFeatureValue(view, ";
  protected final String TEXT_54 = ".eINSTANCE.getFillStyle_FillColor(), ";
  protected final String TEXT_55 = ".RGBToInteger(fillRGB));" + NL + "\t}";
  protected final String TEXT_56 = NL + "}";
  protected final String TEXT_57 = NL;
d126 2
d129 1
a129 1
    stringBuffer.append(TEXT_16);
d133 1
a133 1
    stringBuffer.append(TEXT_17);
d135 1
a135 1
    stringBuffer.append(TEXT_18);
d137 1
a137 1
    stringBuffer.append(TEXT_19);
d139 1
a139 1
    stringBuffer.append(TEXT_20);
d141 1
a141 1
    stringBuffer.append(TEXT_21);
d143 1
a143 1
    stringBuffer.append(TEXT_22);
d149 1
a149 1
    stringBuffer.append(TEXT_23);
d151 1
a151 1
    stringBuffer.append(TEXT_24);
d153 1
a153 1
    stringBuffer.append(TEXT_25);
d155 1
a155 1
    stringBuffer.append(TEXT_26);
d157 1
a157 1
    stringBuffer.append(TEXT_27);
d159 1
a159 1
    stringBuffer.append(TEXT_28);
d174 1
a174 1
    stringBuffer.append(TEXT_29);
d176 1
a176 1
    stringBuffer.append(TEXT_30);
d178 1
a178 1
    stringBuffer.append(TEXT_31);
d188 1
a188 1
    stringBuffer.append(TEXT_32);
d190 1
a190 1
    stringBuffer.append(TEXT_33);
d192 1
a192 1
    stringBuffer.append(TEXT_34);
d203 1
a203 1
    stringBuffer.append(TEXT_35);
d205 1
a205 1
    stringBuffer.append(TEXT_36);
d207 1
a207 1
    stringBuffer.append(TEXT_37);
d211 1
a211 1
    stringBuffer.append(TEXT_38);
d213 1
a213 1
    stringBuffer.append(TEXT_39);
d215 1
a215 1
    stringBuffer.append(TEXT_40);
d220 1
a220 1
    stringBuffer.append(TEXT_41);
a223 2
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d227 2
d230 1
a230 1
    stringBuffer.append(TEXT_45);
d232 1
a232 1
    stringBuffer.append(TEXT_46);
a233 2
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.preference.IPreferenceStore"));
d237 2
d240 1
a240 1
    stringBuffer.append(TEXT_50);
d242 1
a242 1
    stringBuffer.append(TEXT_51);
d244 1
a244 1
    stringBuffer.append(TEXT_52);
d246 1
a246 1
    stringBuffer.append(TEXT_53);
d248 1
a248 1
    stringBuffer.append(TEXT_54);
d250 1
a250 1
    stringBuffer.append(TEXT_55);
d254 1
a254 1
    stringBuffer.append(TEXT_56);
d256 1
a256 1
    stringBuffer.append(TEXT_57);
@


1.16
log
@#121581
Fields for the compartments are named unique.
@
text
@d164 6
a169 1
			String labelTextViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d172 1
a172 1
    stringBuffer.append(labelTextViewId);
@


1.15
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d164 1
a164 1
			String labelTextViewId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelTextId(label);
d178 1
a178 1
		String compartmentId = semanticHintsClassName + '.' + genNode.getUniqueIdentifier() + "Compartments." + AccessUtil.getCompartmentId(genChildContainer);
d193 1
a193 1
		String labelViewId = semanticHintsClassName + '.' + genLink.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelId(label);
@


1.14
log
@Removing source code audit violations
@
text
@d59 17
a75 2
  protected final String TEXT_41 = NL + "\t}" + NL + "}";
  protected final String TEXT_42 = NL;
d95 2
d213 34
d248 1
a248 1
    stringBuffer.append(TEXT_42);
@


1.13
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d141 1
a141 2
	}
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
d145 1
d159 1
a171 1
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
d174 1
@


1.12
log
@#116798 create distinct package for the view factories
@
text
@d73 7
d83 1
a83 1
    if (genElement instanceof GenLink) {
d85 1
a85 1
    } else if (genElement instanceof GenChildNode) {
d87 1
a87 1
    } else if (genElement instanceof GenCompartment) {
d89 1
a89 1
    } else if (genElement instanceof GenDiagram) {
d96 1
a96 1
if (genElement instanceof GenDiagram) {
d126 1
a126 1
if (genElement instanceof GenNode) {
d143 1
a143 1
	if (!(genNode instanceof GenChildNode)) {
d169 1
a169 1
} else if (genElement instanceof GenLink) {
@


1.11
log
@#115972 generate single class with semantic hints
@
text
@d68 1
a68 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d70 1
a70 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
@


1.10
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d57 4
a60 3
  protected final String TEXT_39 = ".VIEW_TYPE);";
  protected final String TEXT_40 = NL + "\t}" + NL + "}";
  protected final String TEXT_41 = NL;
d135 1
a135 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d140 1
a140 1
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
d153 1
a153 1
		String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);
d164 1
a164 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d168 1
a168 1
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(label);
d179 1
a179 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genLink));
d181 2
d187 1
a187 1
    stringBuffer.append(TEXT_40);
d189 1
a189 1
    stringBuffer.append(TEXT_41);
@


1.9
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.draw2d.ColorConstants;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;" + NL + "import org.eclipse.gmf.runtime.notation.NotationPackage;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 1
a24 1
  protected final String TEXT_6 = NL + "\tConnectorViewFactory";
d35 25
a59 14
  protected final String TEXT_17 = NL + "\t\tViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\tFigureUtilities.colorToInteger(ColorConstants.";
  protected final String TEXT_18 = "));";
  protected final String TEXT_19 = NL + "\t\tViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\tFigureUtilities.colorToInteger(ColorConstants.";
  protected final String TEXT_20 = "));";
  protected final String TEXT_21 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_22 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_23 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_24 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_25 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_26 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_27 = NL + "\t\tview.setType(";
  protected final String TEXT_28 = ".VIEW_TYPE);";
  protected final String TEXT_29 = NL + "\t}" + NL + "}";
  protected final String TEXT_30 = NL;
d106 8
d115 1
a115 1
    stringBuffer.append(TEXT_18);
d121 9
a129 1
    stringBuffer.append(TEXT_19);
d131 1
a131 1
    stringBuffer.append(TEXT_20);
d142 1
a142 1
    stringBuffer.append(TEXT_21);
d144 3
a146 1
    stringBuffer.append(TEXT_22);
d155 1
a155 1
    stringBuffer.append(TEXT_23);
d157 3
a159 1
    stringBuffer.append(TEXT_24);
d171 1
a171 1
    stringBuffer.append(TEXT_25);
d173 3
a175 1
    stringBuffer.append(TEXT_26);
d179 1
a179 1
    stringBuffer.append(TEXT_27);
d181 1
a181 1
    stringBuffer.append(TEXT_28);
d186 1
a186 1
    stringBuffer.append(TEXT_29);
d188 1
a188 1
    stringBuffer.append(TEXT_30);
@


1.8
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.draw2d.ColorConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;" + NL + "import org.eclipse.gmf.runtime.notation.NotationPackage;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 23
a48 16
  protected final String TEXT_8 = NL + "\tAbstractShapeViewFactory";
  protected final String TEXT_9 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_10 = NL + "\t\tViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\tFigureUtilities.colorToInteger(ColorConstants.";
  protected final String TEXT_11 = "));";
  protected final String TEXT_12 = NL + "\t\tViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\tFigureUtilities.colorToInteger(ColorConstants.";
  protected final String TEXT_13 = "));";
  protected final String TEXT_14 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_15 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_16 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_17 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_18 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_19 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_20 = NL + "\t\tview.setType(";
  protected final String TEXT_21 = ".VIEW_TYPE);";
  protected final String TEXT_22 = NL + "\t}" + NL + "}";
  protected final String TEXT_23 = NL;
d68 4
d73 1
a73 1
    stringBuffer.append(TEXT_8);
d75 16
a90 1
    stringBuffer.append(TEXT_9);
d94 1
a94 1
    stringBuffer.append(TEXT_10);
d96 1
a96 1
    stringBuffer.append(TEXT_11);
d102 1
a102 1
    stringBuffer.append(TEXT_12);
d104 1
a104 1
    stringBuffer.append(TEXT_13);
d115 1
a115 1
    stringBuffer.append(TEXT_14);
d117 1
a117 1
    stringBuffer.append(TEXT_15);
d126 1
a126 1
    stringBuffer.append(TEXT_16);
d128 1
a128 1
    stringBuffer.append(TEXT_17);
d140 1
a140 1
    stringBuffer.append(TEXT_18);
d142 1
a142 1
    stringBuffer.append(TEXT_19);
d146 1
a146 1
    stringBuffer.append(TEXT_20);
d148 1
a148 1
    stringBuffer.append(TEXT_21);
d153 1
a153 1
    stringBuffer.append(TEXT_22);
d155 1
a155 1
    stringBuffer.append(TEXT_23);
@


1.7
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d95 1
a95 1
	List genChildContainers = genNode.getChildContainers();
d97 1
a97 1
		GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
@


1.6
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d46 1
a46 1
    GenBaseElement genElement = (GenBaseElement) argument;
@


1.5
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d118 1
a118 1
	if (genLink instanceof GenLinkReferenceOnly) {
@


1.4
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d32 10
a41 11
  protected final String TEXT_14 = NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_15 = ".";
  protected final String TEXT_16 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_17 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_18 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_19 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_20 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_21 = NL + "\t\tview.setType(";
  protected final String TEXT_22 = ".VIEW_TYPE);";
  protected final String TEXT_23 = NL + "\t}" + NL + "}";
  protected final String TEXT_24 = NL;
d81 2
d84 5
a88 1
		if (genElement.hasNameToEdit()) {
d90 1
a90 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genElement));
a91 2
    stringBuffer.append(AccessUtil.getNameSemanticHint(genElement));
    stringBuffer.append(TEXT_16);
d94 5
a98 6
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		List genChildContainers = genNode.getChildContainers();
		for (int j = 0; j < genChildContainers.size(); j++) {
			GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
			String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);
d100 2
a102 2
    stringBuffer.append(compartmentId);
    stringBuffer.append(TEXT_18);
a103 1
		}
d105 1
a105 2
}
if (genElement instanceof GenLink) {
d111 2
a112 2
		LinkLabel label = (LinkLabel) labels.get(j);
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelId(label);
d114 2
a116 2
    stringBuffer.append(labelViewId);
    stringBuffer.append(TEXT_20);
d120 2
a122 2
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genLink));
    stringBuffer.append(TEXT_22);
d127 2
a129 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_24);
@


1.3
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d35 4
a38 4
  protected final String TEXT_17 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, \"";
  protected final String TEXT_18 = "\"," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_19 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, \"";
  protected final String TEXT_20 = "\"," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
d91 2
d96 1
d99 1
a99 1
    stringBuffer.append(genChildContainer.getGroupID());
d107 2
d112 1
d115 1
a115 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
@


1.2
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d39 4
a42 2
  protected final String TEXT_21 = NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
d111 6
d121 1
a121 1
    stringBuffer.append(TEXT_21);
d123 1
a123 1
    stringBuffer.append(TEXT_22);
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d65 1
a65 1
ColorAttributes colorAttrs = (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class);
@

