head	1.16;
access;
symbols
	v20081022-1925:1.16
	v20081015-1925:1.16
	v20081008-1925:1.16
	v20081001-1925:1.16
	v20080924-1925:1.16
	v20080917-1925:1.16
	v20080911-1728:1.16
	v20080910-1520:1.16
	v20080903-1520:1.16
	v20080827-1520:1.16
	v20080813-1520:1.16
	v20080806-1520:1.16
	v20070605-1400:1.15
	v20070601-1400:1.14
	v20070525-1500:1.14
	v20070520-1200:1.14
	v20070518-1300:1.13
	v20070504-1000:1.13
	v20070427-0600:1.13
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070405-1100:1.12
	v20070403-1500:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070307-0700:1.12
	v20070301-1200:1.12
	v20070228-2000:1.12
	v20070221-1500:1.12
	v20070208-1800:1.12
	v20070202-0200:1.12
	v20070103-0300:1.12
	M4_20:1.12
	v20061222-1800:1.12
	v20061218-1200:1.12
	v20061214-0000:1.12
	v20061120-1300:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.12
	v20061020-1000:1.12
	v20061013-1330:1.12
	v20060919-0800:1.12
	v20060907-1100:1.12
	M1_20:1.12
	v20060904-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060728-0500:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.6
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.16
date	2007.06.07.10.59.14;	author dstadnik;	state dead;
branches;
next	1.15;
commitid	535f4667e5014567;

1.15
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	17ef46643bcf4567;

1.14
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.13;
commitid	7de14650454a4567;

1.13
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	78b462dc68e4567;

1.12
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.14.13.20.08;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.21.09.35.38;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.16
log
@rewrite command in xpand
@
text
@package org.eclipse.gmf.codegen.templates.commands;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ReorientConnectionViewCommandGenerator
{
  protected static String nl;
  public static synchronized ReorientConnectionViewCommandGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ReorientConnectionViewCommandGenerator result = new ReorientConnectionViewCommandGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractTransactionalCommand {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IAdaptable edgeAdaptor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(TransactionalEditingDomain editingDomain, String label) {" + NL + "\t\tsuper(editingDomain, label, null);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getAffectedFiles() {" + NL + "\t\tView view = (View) edgeAdaptor.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getWorkspaceFiles(view);" + NL + "\t\t}" + NL + "\t\treturn super.getAffectedFiles();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IAdaptable getEdgeAdaptor() {" + NL + "\t\treturn edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setEdgeAdaptor(IAdaptable edgeAdaptor) {" + NL + "\t\tthis.edgeAdaptor = edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info) {" + NL + "\t\tassert null != edgeAdaptor : \"Null child in ";
  protected final String TEXT_7 = "\"; //$NON-NLS-1$" + NL + "\t\tEdge edge = (Edge) getEdgeAdaptor().getAdapter(Edge.class);" + NL + "\t\tassert null != edge : \"Null edge in ";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t\tView tempView = edge.getSource();" + NL + "\t\tedge.setSource(edge.getTarget());" + NL + "\t\tedge.setTarget(tempView);" + NL + "" + NL + "\t\treturn CommandResult.newOKCommandResult();" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
    stringBuffer.append(TEXT_8);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
    return stringBuffer.toString();
  }
}
@


1.15
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.14
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.13
log
@follow consisted spacing policy
@
text
@d18 9
a26 10
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractTransactionalCommand {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IAdaptable edgeAdaptor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(TransactionalEditingDomain editingDomain, String label) {" + NL + "\t\tsuper(editingDomain, label, null);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getAffectedFiles() {" + NL + "\t\tView view = (View) edgeAdaptor.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getWorkspaceFiles(view);" + NL + "\t\t}" + NL + "\t\treturn super.getAffectedFiles();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IAdaptable getEdgeAdaptor() {" + NL + "\t\treturn edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setEdgeAdaptor(IAdaptable edgeAdaptor) {" + NL + "\t\tthis.edgeAdaptor = edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info) {" + NL + "\t\tassert null != edgeAdaptor : \"Null child in ";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "\t\tEdge edge = (Edge) getEdgeAdaptor().getAdapter(Edge.class);" + NL + "\t\tassert null != edge : \"Null edge in ";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t\tView tempView = edge.getSource();" + NL + "\t\tedge.setSource(edge.getTarget());" + NL + "\t\tedge.setTarget(tempView);" + NL + "" + NL + "\t\treturn CommandResult.newOKCommandResult();" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
a32 1
    stringBuffer.append(TEXT_1);
d37 2
a39 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d42 2
d45 1
a45 1
    importManager.markImportLocation(stringBuffer);
d53 1
a53 1
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
a54 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_10);
@


1.12
log
@header comment should not be a javadoc comment
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d40 1
a40 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.11
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.10
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d40 1
a40 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.9
log
@using M6 to generate code.
@
text
@d21 7
a27 9
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractTransactionalCommand {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IAdaptable edgeAdaptor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(TransactionalEditingDomain editingDomain, String label) {" + NL + "\t\tsuper(editingDomain, label, null);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getAffectedFiles() {" + NL + "\t\tView view = (View) edgeAdaptor.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getWorkspaceFiles(view);" + NL + "\t\t}" + NL + "\t\treturn super.getAffectedFiles();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IAdaptable getEdgeAdaptor() {" + NL + "\t\treturn edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setEdgeAdaptor(IAdaptable edgeAdaptor) {" + NL + "\t\tthis.edgeAdaptor = edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info) {" + NL + "\t\tassert null != edgeAdaptor : \"Null child in ";
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "\t\tEdge edge = (Edge) getEdgeAdaptor().getAdapter(Edge.class);" + NL + "\t\tassert null != edge : \"Null edge in ";
  protected final String TEXT_11 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t\tView tempView = edge.getSource();" + NL + "\t\tedge.setSource(edge.getTarget());" + NL + "\t\tedge.setTarget(tempView);" + NL + "" + NL + "\t\treturn CommandResult.newOKCommandResult();" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d33 1
d43 1
d45 1
a45 1
    stringBuffer.append(genDiagram.getEditCommandsPackageName());
d47 1
a47 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditCommandsPackageName());
d49 1
a49 1
    importManager.markImportLocation(stringBuffer);
d55 1
a55 1
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
a56 4
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
@


1.8
log
@restore generators
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@#134095 do not store compiled templates in cvs
@
text
@d33 1
a33 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.6
log
@Switching to eclipse M6.
@
text
@@


1.5
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@use new transactional emf api
@
text
@d18 12
a29 9
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractTransactionalCommand {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IAdaptable edgeAdaptor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(TransactionalEditingDomain editingDomain, String label) {" + NL + "\t\tsuper(editingDomain, label, null);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getAffectedFiles() {" + NL + "\t\tView view = (View) edgeAdaptor.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getWorkspaceFiles(view);" + NL + "\t\t}" + NL + "\t\treturn super.getAffectedFiles();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IAdaptable getEdgeAdaptor() {" + NL + "\t\treturn edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setEdgeAdaptor(IAdaptable edgeAdaptor) {" + NL + "\t\tthis.edgeAdaptor = edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected CommandResult doExecuteWithResult(IProgressMonitor progressMonitor, IAdaptable info) {" + NL + "\t\tassert null != edgeAdaptor : \"Null child in ";
  protected final String TEXT_7 = "\"; //$NON-NLS-1$" + NL + "\t\tEdge edge = (Edge) getEdgeAdaptor().getAdapter(Edge.class);" + NL + "\t\tassert null != edge : \"Null edge in ";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t\tView tempView = edge.getSource();" + NL + "\t\tedge.setSource(edge.getTarget());" + NL + "\t\tedge.setTarget(tempView);" + NL + "" + NL + "\t\treturn CommandResult.newOKCommandResult();" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d36 4
a39 1
    stringBuffer.append(genDiagram.getEditCommandsPackageName());
d41 1
a41 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditCommandsPackageName());
d43 1
a43 1
    importManager.markImportLocation(stringBuffer);
d45 1
a45 1
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
d47 1
a47 1
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
d49 1
a49 1
    stringBuffer.append(genDiagram.getReorientConnectionViewCommandClassName());
d53 6
d60 1
a60 1
    stringBuffer.append(TEXT_9);
@


1.3
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.util.Collection;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractModelCommand;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d22 2
a23 2
  protected final String TEXT_5 = " extends AbstractModelCommand {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IAdaptable edgeAdaptor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(String label) {" + NL + "\t\tsuper(label, null);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Collection getAffectedObjects() {" + NL + "\t\tView view = (View) edgeAdaptor.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getWorkspaceFilesFor(view);" + NL + "\t\t}" + NL + "\t\treturn super.getAffectedObjects();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IAdaptable getEdgeAdaptor() {" + NL + "\t\treturn edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setEdgeAdaptor(IAdaptable edgeAdaptor) {" + NL + "\t\tthis.edgeAdaptor = edgeAdaptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "\t\tassert null != edgeAdaptor : \"Null child in ";
d25 1
a25 1
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t\tView tempView = edge.getSource();" + NL + "\t\tedge.setSource(edge.getTarget());" + NL + "\t\tedge.setTarget(tempView);" + NL + "" + NL + "\t\treturn newOKCommandResult();" + NL + "\t}" + NL + "}";
@


1.2
log
@ImportManager moved to oeg.common
@
text
@d31 1
a31 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.1
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@

