head	1.16;
access;
symbols
	v20081022-1925:1.16
	v20081015-1925:1.16
	v20081008-1925:1.16
	v20081001-1925:1.16
	v20080924-1925:1.16
	v20080917-1925:1.16
	v20080911-1728:1.16
	v20080910-1520:1.16
	v20080903-1520:1.16
	v20080827-1520:1.16
	v20080813-1520:1.16
	v20080806-1520:1.16
	v20070504-1000:1.14
	v20070427-0600:1.14
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070405-1100:1.13
	v20070403-1500:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070307-0700:1.13
	v20070301-1200:1.13
	v20070228-2000:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.12
	v20070103-0300:1.13
	M4_20:1.13
	v20061222-1800:1.13
	v20061218-1200:1.13
	v20061214-0000:1.13
	v20061120-1300:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.12
	v20061020-1000:1.12
	v20061013-1330:1.12
	v20060919-0800:1.12
	v20060907-1100:1.12
	M1_20:1.12
	v20060904-1500:1.12
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060728-0500:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.12
	v20060531-1730:1.11
	v20060530-1930:1.11
	v20060526-1200:1.10
	v20060519-1300:1.10
	v20060519-0800:1.10
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.6
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.16
date	2007.05.10.09.23.21;	author dstadnik;	state dead;
branches;
next	1.15;
commitid	59a14642e4894567;

1.15
date	2007.05.08.14.49.25;	author dstadnik;	state Exp;
branches;
next	1.14;
commitid	475646408df44567;

1.14
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	78b462dc68e4567;

1.13
date	2006.12.11.09.58.32;	author radvorak;	state Exp;
branches;
next	1.12;
commitid	5d2a457d2bc44567;

1.12
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.01.13.14.08;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.16
log
@rewrite marker navigation provider in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class MarkerNavigationProviderGenerator
{
  protected static String nl;
  public static synchronized MarkerNavigationProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    MarkerNavigationProviderGenerator result = new MarkerNavigationProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */\t" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractModelMarkerNavigationProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String MARKER_TYPE = ";
  protected final String TEXT_7 = ".ID + \".";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t\t" + NL + "\tprotected void doGotoMarker(IMarker marker) {" + NL + "\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.core.resources.IMarker.ELEMENT_ID, null);" + NL + "\t\tif(elementId == null || !(getEditor() instanceof DiagramEditor)) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tDiagramEditor editor = (DiagramEditor) getEditor();" + NL + "\t\tMap editPartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();" + NL + "\t\tEObject targetView = editor.getDiagram().eResource().getEObject(elementId);" + NL + "\t\tif(targetView == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tEditPart targetEditPart = (EditPart)editPartRegistry.get(targetView);" + NL + "\t\tif (targetEditPart != null) {" + NL + "\t\t\t";
  protected final String TEXT_9 = ".selectElementsInDiagram(editor, Arrays.asList(new EditPart[] { targetEditPart }));" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void deleteMarkers(IResource resource) {" + NL + "\t\ttry {" + NL + "\t\t\tresource.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(\"Failed to delete validation markers\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static IMarker addMarker(IFile file, String elementId, String location, String message, int statusSeverity) {" + NL + "\t\tIMarker marker = null;" + NL + "\t\ttry {" + NL + "\t\t\tmarker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\tmarker.setAttribute(IMarker.LOCATION, location);" + NL + "\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, elementId);" + NL + "\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t}" + NL + "\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Failed to create validation marker\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn marker;\t\t" + NL + "\t}\t" + NL + "}";
  protected final String TEXT_12 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
importManager.markImportLocation(stringBuffer);

importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.Arrays");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.HashSet");
importManager.addImport("java.util.Set");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.resources.IMarker");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.runtime.CoreException");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.common.util.Diagnostic");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.validation.model.IConstraintStatus");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil");
importManager.addImport("org.eclipse.gmf.runtime.emf.ui.providers.marker.AbstractModelMarkerNavigationProvider");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getMarkerNavigationProviderClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getValidationDiagnosticMarkerType());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
    return stringBuffer.toString();
  }
}
@


1.15
log
@[178958] move code that iterates over diagnostics to location reusable in rcp
@
text
@@


1.14
log
@follow consisted spacing policy
@
text
@d26 4
a29 10
  protected final String TEXT_9 = ".selectElementsInDiagram(editor, Arrays.asList(new EditPart[] { targetEditPart }));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void createMarkers(IFile diagramFile, IStatus validationStatus, DiagramEditPart diagramEditPart) {" + NL + "\t\tif(validationStatus.isOK()) return;" + NL + "\t\t" + NL + "\t\tfinal IStatus rootStatus = validationStatus;" + NL + "\t\tList allStatuses = new ArrayList();" + NL + "\t\t";
  protected final String TEXT_10 = ".LazyElement2ViewMap element2ViewMap = new ";
  protected final String TEXT_11 = ".LazyElement2ViewMap(" + NL + "\t\t\tdiagramEditPart.getDiagramView(), collectTargetElements(rootStatus, new HashSet(), allStatuses));" + NL + "\t\t" + NL + "\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)it.next();" + NL + "\t\t\tView view = ";
  protected final String TEXT_12 = ".findView(diagramEditPart, nextStatus.getTarget(), element2ViewMap);\t\t\t" + NL + "\t\t\tIMarker newMarker = addMarker(diagramFile, view.eResource().getURIFragment(view), " + NL + "\t\t\t\t\tEMFCoreUtil.getQualifiedName(nextStatus.getTarget(), true), " + NL + "\t\t\t\t\tnextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\tif (newMarker != null) {" + NL + "\t\t\t\tadjustMarker(newMarker, nextStatus);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void createMarkers(IFile diagramFile, Diagnostic emfValidationStatus, DiagramEditPart diagramEditPart) {" + NL + "\t\tif(emfValidationStatus.getSeverity() == Diagnostic.OK) return;" + NL + "\t\t" + NL + "\t\tfinal Diagnostic rootStatus = emfValidationStatus;" + NL + "\t\tList allDiagnostics = new ArrayList();" + NL + "\t\t";
  protected final String TEXT_13 = ".LazyElement2ViewMap element2ViewMap = new ";
  protected final String TEXT_14 = ".LazyElement2ViewMap(diagramEditPart.getDiagramView(), collectTargetElements(rootStatus, new HashSet(), allDiagnostics));" + NL + "\t\t" + NL + "\t\tfor (Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\tif (data != null && !data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\tEObject element = (EObject) data.get(0);" + NL + "\t\t\t\tView view = ";
  protected final String TEXT_15 = ".findView(diagramEditPart, element, element2ViewMap);" + NL + "\t\t\t\tIMarker newMarker = addMarker(diagramFile, view.eResource().getURIFragment(view)," + NL + "\t\t\t\t\t\tEMFCoreUtil.getQualifiedName(element, true), nextDiagnostic.getMessage()," + NL + "\t\t\t\t\t\tdiagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\tif (newMarker != null) {" + NL + "\t\t\t\t\tadjustMarker(newMarker, emfValidationStatus);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void deleteMarkers(IResource resource) {" + NL + "\t\ttry {" + NL + "\t\t\tresource.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"Failed to delete validation markers\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void adjustMarker(IMarker marker, Diagnostic sourceDiagnostic) {" + NL + "\t\tassert marker != null && sourceDiagnostic != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void adjustMarker(IMarker marker, IConstraintStatus sourceStatus) {" + NL + "\t\tassert marker != null && sourceStatus != null;\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IMarker addMarker(IFile file, String elementId, String location, String message, int statusSeverity) {" + NL + "\t\tIMarker marker = null;" + NL + "\t\ttry {" + NL + "\t\t\tmarker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\tmarker.setAttribute(IMarker.LOCATION, location);" + NL + "\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, elementId);" + NL + "\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t}" + NL + "\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(\"Failed to create validation marker\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn marker;\t\t" + NL + "\t}\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\tif (diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\treturn IStatus.OK;" + NL + "\t\t} else if (diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t} else if (diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\treturn IStatus.WARNING;" + NL + "\t\t} else if (diagnosticSeverity == Diagnostic.ERROR" + NL + "\t\t\t\t|| diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\treturn IStatus.ERROR;" + NL + "\t\t}" + NL + "\t\treturn IStatus.INFO;" + NL + "\t}\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static Set collectTargetElements(IStatus status, Set targetElementCollector, List allConstraintStatuses) {" + NL + "\t\tif(status instanceof IConstraintStatus) {" + NL + "\t\t\ttargetElementCollector.add(((IConstraintStatus)status).getTarget());" + NL + "\t\t\tallConstraintStatuses.add(status);" + NL + "\t\t}" + NL + "\t\tif(status.isMultiStatus()) {" + NL + "\t\t\tIStatus[] children = status.getChildren();" + NL + "\t\t\tfor (int i = 0; i < children.length; i++) {" + NL + "\t\t\t\tcollectTargetElements(children[i], targetElementCollector, allConstraintStatuses);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn targetElementCollector;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static Set collectTargetElements(Diagnostic diagnostic, Set targetElementCollector, List allDiagnostics) {" + NL + "\t\tList data = diagnostic.getData();" + NL + "\t\tEObject target = null;" + NL + "\t\tif (data != null && !data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\ttarget = (EObject)data.get(0);" + NL + "\t\t\ttargetElementCollector.add(target);\t" + NL + "\t\t\tallDiagnostics.add(diagnostic);" + NL + "\t\t}" + NL + "\t\tif(diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tcollectTargetElements((Diagnostic)it.next(), targetElementCollector, allDiagnostics);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn targetElementCollector;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
d84 1
a84 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
d86 1
a86 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
d88 1
a88 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
a89 12
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_13);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_17);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_18);
@


1.13
log
@[166814] Refactor diagram editor Audits&Metrics support
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d51 1
a51 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.12
log
@header comment should not be a javadoc comment
@
text
@d23 13
a35 2
  protected final String TEXT_6 = " extends AbstractModelMarkerNavigationProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t\t" + NL + "\tprotected void doGotoMarker(IMarker marker) {" + NL + "\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, null);" + NL + "\t\tif(elementId == null || !(getEditor() instanceof DiagramEditor)) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tEditPart targetEditPart = null;" + NL + "\t\tDiagramEditor editor = (DiagramEditor)getEditor();" + NL + "\t\tMap epartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();" + NL + "\t\tfor (Iterator it = epartRegistry.entrySet().iterator(); it.hasNext();) {" + NL + "\t\t\tMap.Entry entry = (Map.Entry) it.next();" + NL + "\t\t\tif(entry.getKey() instanceof View) {" + NL + "\t\t\t\tView view = (View)entry.getKey();" + NL + "\t\t\t\tString viewId = ViewUtil.getIdStr(view);" + NL + "\t\t\t\tif(viewId.equals(elementId)) {" + NL + "\t\t\t\t\ttargetEditPart = (EditPart)entry.getValue();" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t} " + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif(targetEditPart != null) {" + NL + "\t\t\teditor.getDiagramGraphicalViewer().select(targetEditPart);\t\t\t" + NL + "\t\t\teditor.getDiagramGraphicalViewer().reveal(targetEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
d43 1
d58 3
d62 1
d64 3
d68 6
d75 1
a75 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil");
d77 1
d84 22
d107 1
a107 1
    stringBuffer.append(TEXT_7);
@


1.11
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.10
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d39 1
a39 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.9
log
@using M6 to generate code.
@
text
@d21 4
a24 5
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */\t" + NL + "public class ";
  protected final String TEXT_7 = " extends AbstractModelMarkerNavigationProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t\t" + NL + "\tprotected void doGotoMarker(IMarker marker) {" + NL + "\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, null);" + NL + "\t\tif(elementId == null || !(getEditor() instanceof DiagramEditor)) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tEditPart targetEditPart = null;" + NL + "\t\tDiagramEditor editor = (DiagramEditor)getEditor();" + NL + "\t\tMap epartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();" + NL + "\t\tfor (Iterator it = epartRegistry.entrySet().iterator(); it.hasNext();) {" + NL + "\t\t\tMap.Entry entry = (Map.Entry) it.next();" + NL + "\t\t\tif(entry.getKey() instanceof View) {" + NL + "\t\t\t\tView view = (View)entry.getKey();" + NL + "\t\t\t\tString viewId = ViewUtil.getIdStr(view);" + NL + "\t\t\t\tif(viewId.equals(elementId)) {" + NL + "\t\t\t\t\ttargetEditPart = (EditPart)entry.getValue();" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t} " + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif(targetEditPart != null) {" + NL + "\t\t\teditor.getDiagramGraphicalViewer().select(targetEditPart);\t\t\t" + NL + "\t\t\teditor.getDiagramGraphicalViewer().reveal(targetEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d42 1
a43 2
    stringBuffer.append(genDiagram.getProvidersPackageName());
    stringBuffer.append(TEXT_5);
d55 2
d58 1
a58 1
    stringBuffer.append(genDiagram.getMarkerNavigationProviderClassName());
a59 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_8);
@


1.8
log
@restore generators
@
text
@d29 1
a29 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@#134095 do not store compiled templates in cvs
@
text
@d29 1
a29 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.6
log
@Switching to eclipse M6.
@
text
@@


1.5
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d29 1
a29 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@[rdvorak] #129766 Remove deprecated API usage
@
text
@d18 8
a25 5
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */\t" + NL + "public class ";
  protected final String TEXT_4 = " extends AbstractModelMarkerNavigationProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t\t" + NL + "\tprotected void doGotoMarker(IMarker marker) {" + NL + "\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, null);" + NL + "\t\tif(elementId == null || !(getEditor() instanceof DiagramEditor)) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tEditPart targetEditPart = null;" + NL + "\t\tDiagramEditor editor = (DiagramEditor)getEditor();" + NL + "\t\tMap epartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();" + NL + "\t\tfor (Iterator it = epartRegistry.entrySet().iterator(); it.hasNext();) {" + NL + "\t\t\tMap.Entry entry = (Map.Entry) it.next();" + NL + "\t\t\tif(entry.getKey() instanceof View) {" + NL + "\t\t\t\tView view = (View)entry.getKey();" + NL + "\t\t\t\tString viewId = ViewUtil.getIdStr(view);" + NL + "\t\t\t\tif(viewId.equals(elementId)) {" + NL + "\t\t\t\t\ttargetEditPart = (EditPart)entry.getValue();" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t} " + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif(targetEditPart != null) {" + NL + "\t\t\teditor.getDiagramGraphicalViewer().select(targetEditPart);\t\t\t" + NL + "\t\t\teditor.getDiagramGraphicalViewer().reveal(targetEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_5 = NL;
d35 9
d45 1
a45 1
    stringBuffer.append(TEXT_2);
d57 1
a57 1
    stringBuffer.append(TEXT_3);
d59 1
a59 1
    stringBuffer.append(TEXT_4);
d61 1
a61 1
    stringBuffer.append(TEXT_5);
@


1.3
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d19 1
a19 1
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.util.Iterator;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IMarker;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.ui.providers.marker.AbstractModelMarkerNavigationProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL;
d21 1
a21 1
  protected final String TEXT_4 = " extends AbstractModelMarkerNavigationProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t\t" + NL + "\tprotected void doGotoMarker(IMarker marker) {" + NL + "\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, null);" + NL + "\t\tif(elementId == null || !(getEditor() instanceof DiagramEditor)) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tEditPart targetEditPart = null;" + NL + "\t\tDiagramEditor editor = (DiagramEditor)getEditor();" + NL + "\t\tMap epartRegistry = editor.getDiagramGraphicalViewer().getEditPartRegistry();" + NL + "\t\tfor (Iterator it = epartRegistry.entrySet().iterator(); it.hasNext();) {" + NL + "\t\t\tMap.Entry entry = (Map.Entry) it.next();" + NL + "\t\t\tif(entry.getKey() instanceof View) {" + NL + "\t\t\t\tView view = (View)entry.getKey();" + NL + "\t\t\t\tString viewId = EObjectUtil.getID(view);" + NL + "\t\t\t\tif(viewId.equals(elementId)) {" + NL + "\t\t\t\t\ttargetEditPart = (EditPart)entry.getValue();" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t} " + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif(targetEditPart != null) {" + NL + "\t\t\teditor.getDiagramGraphicalViewer().select(targetEditPart);\t\t\t" + NL + "\t\t\teditor.getDiagramGraphicalViewer().reveal(targetEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
d28 2
a29 2
GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d34 11
a44 1
    importManager.markImportLocation(stringBuffer);
@


1.2
log
@ImportManager moved to oeg.common
@
text
@d28 1
a28 1
GenDiagram genDiagram = (GenDiagram)argument;
@


1.1
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@

