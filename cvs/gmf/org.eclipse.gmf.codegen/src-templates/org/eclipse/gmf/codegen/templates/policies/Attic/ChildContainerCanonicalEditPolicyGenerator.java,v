head	1.47;
access;
symbols
	v20081022-1925:1.47
	v20081015-1925:1.47
	v20081008-1925:1.47
	v20081001-1925:1.47
	v20080924-1925:1.47
	v20080917-1925:1.47
	v20080911-1728:1.47
	v20080910-1520:1.47
	v20080903-1520:1.47
	v20080827-1520:1.47
	v20080813-1520:1.47
	v20080806-1520:1.47
	v20070413-1300:1.46
	v20070405-1100:1.45
	v20070403-1500:1.44
	v20070330-1300:1.43
	v20060330-1300:1.43
	v20070322-1100:1.42
	v20060316-0600:1.42
	v20070307-0700:1.42
	v20070301-1200:1.42
	v20070228-2000:1.42
	v20070221-1500:1.42
	v20070208-1800:1.42
	v20070202-0200:1.35.2.1
	v20070103-0300:1.41
	M4_20:1.41
	v20061222-1800:1.41
	v20061218-1200:1.41
	v20061214-0000:1.41
	v20061120-1300:1.40
	M3_20:1.40
	v20061117-0800:1.40
	v20061027-1200:1.35.2.1
	v20061020-1000:1.35.2.1
	v20061013-1330:1.39
	v20060919-0800:1.35.2.1
	v20060907-1100:1.35.2.1
	M1_20:1.36
	v20060904-1500:1.36
	v20060824-1600:1.35.2.1
	v20060817-1500:1.35.2.1
	v20060728-0500:1.35
	v20060713-1700:1.35
	R1_0_maintenance:1.35.0.2
	R1_0:1.35
	v20060627-1200:1.35
	v20060626-1420:1.34
	v20060620-0400:1.34
	v20060616-1400:1.33
	v20060616-1200:1.33
	v20060609-1400:1.32
	v20060531-1730:1.31
	v20060530-1930:1.31
	v20060526-1200:1.30
	v20060519-1300:1.30
	v20060519-0800:1.30
	v20060512-1000:1.26
	I20060512-1000:1.26
	I20060505-1400:1.26
	I20060428-1300:1.26
	I20060424-0500:1.25
	I20060424-0300:1.25
	M6_10:1.23
	I20060407-1200:1.17
	I20060331-1000:1.15
	I20060324-0300:1.15
	I20060317-1300:1.14
	I20060317-1200:1.14
	I20060316-1300:1.14
	I20060309-1300:1.14
	M5_10:1.13
	S20060303-1600:1.13
	I20060227-1730:1.12
	I20060216-1945:1.12
	I20060210-1715:1.12
	I20060209-1815:1.12
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.47
date	2007.04.18.17.34.28;	author ashatalin;	state dead;
branches;
next	1.46;
commitid	2e44462656a24567;

1.46
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.45;
commitid	58c0461bdcea4567;

1.45
date	2007.04.04.19.46.27;	author ashatalin;	state Exp;
branches;
next	1.44;
commitid	21fb461400904567;

1.44
date	2007.04.03.11.15.14;	author ashatalin;	state Exp;
branches;
next	1.43;
commitid	45b0461237404567;

1.43
date	2007.03.26.17.08.26;	author ashatalin;	state Exp;
branches;
next	1.42;
commitid	24de4607fe084567;

1.42
date	2007.01.29.19.30.15;	author ashatalin;	state Exp;
branches;
next	1.41;
commitid	7ac145be4b464567;

1.41
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.40;
commitid	5f734567714f4567;

1.40
date	2006.10.18.14.21.46;	author dstadnik;	state Exp;
branches;
next	1.39;

1.39
date	2006.10.06.15.26.31;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.10.06.13.28.48;	author atikhomirov;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.08.17.17.06.15;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.27.13.43.24;	author ashatalin;	state Exp;
branches
	1.35.2.1;
next	1.34;

1.34
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.32;

1.32
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.12.14.52.53;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.27.13.58.08;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.21.17.12.00;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.14.12.09.18;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.14.11.39.49;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.08.17.19.55;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.11.41.48;	author dstadnik;	state dead;
branches;
next	1.17;

1.17
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.04.14.12.04;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.03.15.34.18;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.08.13.09.29;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.25.11.55.43;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.12.13.54.08;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.07.17.07.00;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.18.33.25;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.29.16.42.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	;

1.35.2.1
date	2006.08.17.17.10.33;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.47
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ChildContainerCanonicalEditPolicyGenerator {
 
  protected static String nl;
  public static synchronized ChildContainerCanonicalEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ChildContainerCanonicalEditPolicyGenerator result = new ChildContainerCanonicalEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends CanonicalEditPolicy {" + NL;
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_9 = " getSemanticChildrenList() {";
  protected final String TEXT_10 = NL + "\t";
  protected final String TEXT_11 = " result = new ";
  protected final String TEXT_12 = "();" + NL + "\t";
  protected final String TEXT_13 = " modelObject = ((";
  protected final String TEXT_14 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_15 = " viewObject = (";
  protected final String TEXT_16 = ") getHost().getModel();";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = "\t";
  protected final String TEXT_19 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_20 = "\t\tnextValue = /*FIXME no containment/child feature found in the genmodel, toolsmith need to specify correct one here manually*/";
  protected final String TEXT_21 = "\tfor (";
  protected final String TEXT_22 = " values = ";
  protected final String TEXT_23 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_24 = ") values.next();";
  protected final String TEXT_25 = NL + "\tnextValue = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + "\tnodeVID = ";
  protected final String TEXT_28 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_29 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_30 = NL + "\tcase ";
  protected final String TEXT_31 = ".VISUAL_ID: {";
  protected final String TEXT_32 = NL + "\tif (";
  protected final String TEXT_33 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_34 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t\tbreak;";
  protected final String TEXT_37 = "\t}";
  protected final String TEXT_38 = NL + "\t}";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "\treturn result;";
  protected final String TEXT_41 = NL + "\treturn ";
  protected final String TEXT_42 = ".EMPTY_LIST;";
  protected final String TEXT_43 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_44 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());" + NL + "\t}";
  protected final String TEXT_45 = NL + "\tint nodeVID = ";
  protected final String TEXT_46 = ".getVisualID(view);" + NL + "\tswitch (nodeVID) {\t";
  protected final String TEXT_47 = NL + "\tcase ";
  protected final String TEXT_48 = ".VISUAL_ID:";
  protected final String TEXT_49 = NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_50 = NL + "\treturn false;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "\t";
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_53 = " createdViews = new ";
  protected final String TEXT_54 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());" + NL + "\t\tcreatedViews.addAll(refreshPhantoms());" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_55 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_56 = " phantomNodes = new ";
  protected final String TEXT_57 = "();" + NL + "\t\t";
  protected final String TEXT_58 = " container = ((";
  protected final String TEXT_59 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_60 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_61 = " diagram = getDiagram();";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = "\tif (";
  protected final String TEXT_64 = ".eINSTANCE.get";
  protected final String TEXT_65 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_66 = NL + "\t\tfor (";
  protected final String TEXT_67 = " destinations = ";
  protected final String TEXT_68 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_69 = " nextDestination = (";
  protected final String TEXT_70 = ") destinations.next();";
  protected final String TEXT_71 = NL + "\t\t";
  protected final String TEXT_72 = " nextDestination = (";
  protected final String TEXT_73 = ") ";
  protected final String TEXT_74 = ";";
  protected final String TEXT_75 = NL + "\t\tif (";
  protected final String TEXT_76 = ".VISUAL_ID == ";
  protected final String TEXT_77 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_78 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = NL + "\t\t}";
  protected final String TEXT_81 = NL + "\t\t}";
  protected final String TEXT_82 = NL + "\t}";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = "for (";
  protected final String TEXT_86 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_87 = " nextView = (";
  protected final String TEXT_88 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_89 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_90 = NL;
  protected final String TEXT_91 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_92 = " createPhantomNodes(";
  protected final String TEXT_93 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_94 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_95 = " descriptors = new ";
  protected final String TEXT_96 = "();" + NL + "\tfor (";
  protected final String TEXT_97 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_98 = " element = (";
  protected final String TEXT_99 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_100 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_101 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_102 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_103 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_104 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_105 = " cc = new ";
  protected final String TEXT_106 = "(";
  protected final String TEXT_107 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_108 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_109 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_110 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_111 = " createCommand = new ";
  protected final String TEXT_112 = "(((";
  protected final String TEXT_113 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_114 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_115 = " adapters = ";
  protected final String TEXT_116 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_117 = ".makeMutable(new ";
  protected final String TEXT_118 = "(((";
  protected final String TEXT_119 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_120 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_121 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_122 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_123 = NL;
  protected final String TEXT_124 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_125 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_126 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_127 = NL + NL + "}";
  protected final String TEXT_128 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenChildContainer genContainer = (GenChildContainer) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genContainer.getDiagram();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genContainer.getCanonicalEditPolicyClassName());
    stringBuffer.append(TEXT_6);
    List genNodes = genContainer.getChildNodes();
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_9);
    if (genNodes.size() > 0) {
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(TEXT_17);
    
Map<GenFeature, List<GenNode>> genFeature2genNodeMap = new LinkedHashMap<GenFeature, List<GenNode>>();
for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
	GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet.isPhantomElement()) {
		// Skipping top-level phantoms
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
		genFeature2genNodeMap.put(childMetaFeature, new LinkedList<GenNode>());
	}
	genFeature2genNodeMap.get(childMetaFeature).add(nextNode);
}

if (genFeature2genNodeMap.size() > 0) {

    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_19);
    
}

for (Map.Entry<GenFeature, List<GenNode>> nextEntry : genFeature2genNodeMap.entrySet()) {
	GenFeature childMetaFeature = nextEntry.getKey();
	List<GenNode> genNodesCollection = nextEntry.getValue();
	if (childMetaFeature == null) {

    stringBuffer.append(TEXT_20);
    } else if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_24);
    	} else {
    stringBuffer.append(TEXT_25);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_26);
    	}
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    	final boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {
    stringBuffer.append(TEXT_29);
    	}
	for (GenNode nextNode : genNodesCollection) {
		if (generateSwitch) {
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_31);
    		} else {
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    		}
    stringBuffer.append(TEXT_34);
    stringBuffer.append(TEXT_35);
    		if (generateSwitch) {
    stringBuffer.append(TEXT_36);
    		}
    stringBuffer.append(TEXT_37);
    	}
	if (generateSwitch) {
    stringBuffer.append(TEXT_38);
    	}
	if (childMetaFeature != null && childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_39);
    	}
}
    stringBuffer.append(TEXT_40);
    } else {
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_42);
    }
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_44);
    if (!genNodes.isEmpty()) {
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_46);
    	for (Iterator it = genNodes.iterator(); it.hasNext();) {
		GenNode nextNode = (GenNode) it.next();
		if (nextNode.getModelFacet().isPhantomElement()) {
			continue;
		}
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    	}
    stringBuffer.append(TEXT_49);
    }
    stringBuffer.append(TEXT_50);
    if (genContainer instanceof GenNode) {
    stringBuffer.append(TEXT_51);
    
final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
final List<GenLink> phantomLinks = genDiagram.getPhantomLinks();
if (genClass2Phantom.size() > 0 && phantomLinks.size() > 0) {

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_61);
    	
	List genLinks = phantomLinks;
	for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
		boolean phantomsOnly = true;

    stringBuffer.append(TEXT_62);
    
GenLink nextLink = (GenLink) genLinks.get(linkIndex);
if (false == nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
	continue;
}
FeatureLinkModelFacet linkFMF = (FeatureLinkModelFacet) nextLink.getModelFacet();
GenFeature genFeature = linkFMF.getMetaFeature();
GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
if (phantomsOnly ? (!genFeature.isContains() || phantomNode == null) : (genFeature.isContains())) {
// Processing only features which are isPhantoms == phantomsOnly
	continue;
}

    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_65);
    	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_70);
    	} else {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_74);
    	}
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_77);
    	}
    stringBuffer.append(TEXT_78);
    stringBuffer.append(TEXT_79);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_80);
    	}
	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_81);
    	}
    stringBuffer.append(TEXT_82);
    	}
    stringBuffer.append(TEXT_83);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_126);
    
}

    }
    stringBuffer.append(TEXT_127);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_128);
    return stringBuffer.toString();
  }
}@


1.46
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@@


1.45
log
@Processing phantoms
@
text
@d39 18
a56 18
  protected final String TEXT_20 = "\tfor (";
  protected final String TEXT_21 = " values = ";
  protected final String TEXT_22 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_23 = ") values.next();";
  protected final String TEXT_24 = NL + "\tnextValue = ";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + "\tnodeVID = ";
  protected final String TEXT_27 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_28 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_29 = NL + "\tcase ";
  protected final String TEXT_30 = ".VISUAL_ID: {";
  protected final String TEXT_31 = NL + "\tif (";
  protected final String TEXT_32 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_33 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = "\t\tbreak;";
  protected final String TEXT_36 = "\t}";
  protected final String TEXT_37 = NL + "\t}";
d58 41
a98 41
  protected final String TEXT_39 = NL + "\treturn result;";
  protected final String TEXT_40 = NL + "\treturn ";
  protected final String TEXT_41 = ".EMPTY_LIST;";
  protected final String TEXT_42 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_43 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());" + NL + "\t}";
  protected final String TEXT_44 = NL + "\tint nodeVID = ";
  protected final String TEXT_45 = ".getVisualID(view);" + NL + "\tswitch (nodeVID) {\t";
  protected final String TEXT_46 = NL + "\tcase ";
  protected final String TEXT_47 = ".VISUAL_ID:";
  protected final String TEXT_48 = NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_49 = NL + "\treturn false;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "\t";
  protected final String TEXT_50 = NL;
  protected final String TEXT_51 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_52 = " createdViews = new ";
  protected final String TEXT_53 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());" + NL + "\t\tcreatedViews.addAll(refreshPhantoms());" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_54 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_55 = " phantomNodes = new ";
  protected final String TEXT_56 = "();" + NL + "\t\t";
  protected final String TEXT_57 = " container = ((";
  protected final String TEXT_58 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_59 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_60 = " diagram = getDiagram();";
  protected final String TEXT_61 = NL;
  protected final String TEXT_62 = "\tif (";
  protected final String TEXT_63 = ".eINSTANCE.get";
  protected final String TEXT_64 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_65 = NL + "\t\tfor (";
  protected final String TEXT_66 = " destinations = ";
  protected final String TEXT_67 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_68 = " nextDestination = (";
  protected final String TEXT_69 = ") destinations.next();";
  protected final String TEXT_70 = NL + "\t\t";
  protected final String TEXT_71 = " nextDestination = (";
  protected final String TEXT_72 = ") ";
  protected final String TEXT_73 = ";";
  protected final String TEXT_74 = NL + "\t\tif (";
  protected final String TEXT_75 = ".VISUAL_ID == ";
  protected final String TEXT_76 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_77 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_78 = NL;
  protected final String TEXT_79 = NL + "\t\t}";
d100 2
a101 2
  protected final String TEXT_81 = NL + "\t}";
  protected final String TEXT_82 = NL;
d103 45
a147 44
  protected final String TEXT_84 = "for (";
  protected final String TEXT_85 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_86 = " nextView = (";
  protected final String TEXT_87 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_88 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_91 = " createPhantomNodes(";
  protected final String TEXT_92 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_93 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_94 = " descriptors = new ";
  protected final String TEXT_95 = "();" + NL + "\tfor (";
  protected final String TEXT_96 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_97 = " element = (";
  protected final String TEXT_98 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_99 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_100 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_101 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_102 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_103 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_104 = " cc = new ";
  protected final String TEXT_105 = "(";
  protected final String TEXT_106 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_107 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_108 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_109 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_110 = " createCommand = new ";
  protected final String TEXT_111 = "(((";
  protected final String TEXT_112 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_113 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_114 = " adapters = ";
  protected final String TEXT_115 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_116 = ".makeMutable(new ";
  protected final String TEXT_117 = "(((";
  protected final String TEXT_118 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_119 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_120 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_121 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_122 = NL;
  protected final String TEXT_123 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_124 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_125 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_126 = NL + NL + "}";
  protected final String TEXT_127 = NL;
d295 1
a295 1
Map genFeature2genNodeMap = new LinkedHashMap();
d305 1
a305 1
		genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
d307 1
a307 1
	((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
d310 1
a310 2
Set entrySet = genFeature2genNodeMap.entrySet();
if (entrySet.size() > 0) {
d318 4
a321 5
for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
	Collection genNodesCollection = (Collection) nextEntry.getValue();
	if (childMetaFeature.isListType()) {
d324 3
d328 1
a328 1
    stringBuffer.append(TEXT_21);
d330 1
a330 1
    stringBuffer.append(TEXT_22);
d332 1
a332 1
    stringBuffer.append(TEXT_23);
d334 1
a334 1
    stringBuffer.append(TEXT_24);
d336 1
a336 1
    stringBuffer.append(TEXT_25);
d338 1
a338 1
    stringBuffer.append(TEXT_26);
d340 2
a341 2
    stringBuffer.append(TEXT_27);
    	boolean generateSwitch = genNodesCollection.size() != 1;
d343 1
a343 1
    stringBuffer.append(TEXT_28);
d345 1
a345 3
	
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
d347 1
a347 1
    stringBuffer.append(TEXT_29);
d349 1
a349 1
    stringBuffer.append(TEXT_30);
d351 1
a351 1
    stringBuffer.append(TEXT_31);
d353 1
a353 1
    stringBuffer.append(TEXT_32);
a354 1
    stringBuffer.append(TEXT_33);
d356 1
d358 1
a358 1
    stringBuffer.append(TEXT_35);
d360 1
a360 1
    stringBuffer.append(TEXT_36);
d363 1
a363 1
    stringBuffer.append(TEXT_37);
d365 2
a366 2
	if (childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_38);
d369 1
a369 1
    stringBuffer.append(TEXT_39);
d371 1
a371 1
    stringBuffer.append(TEXT_40);
d373 1
a373 1
    stringBuffer.append(TEXT_41);
d375 1
a375 1
    stringBuffer.append(TEXT_42);
d377 1
a377 1
    stringBuffer.append(TEXT_43);
d379 1
a379 1
    stringBuffer.append(TEXT_44);
d381 1
a381 1
    stringBuffer.append(TEXT_45);
d387 1
a387 1
    stringBuffer.append(TEXT_46);
d389 1
a389 1
    stringBuffer.append(TEXT_47);
d391 1
a391 1
    stringBuffer.append(TEXT_48);
d393 1
a393 1
    stringBuffer.append(TEXT_49);
d395 1
a395 1
    stringBuffer.append(TEXT_50);
d401 1
a401 1
    stringBuffer.append(TEXT_51);
d403 1
a403 1
    stringBuffer.append(TEXT_52);
a404 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d408 2
d411 1
a411 1
    stringBuffer.append(TEXT_56);
d413 1
a413 1
    stringBuffer.append(TEXT_57);
d415 1
a415 1
    stringBuffer.append(TEXT_58);
d417 1
a417 1
    stringBuffer.append(TEXT_59);
d419 1
a419 1
    stringBuffer.append(TEXT_60);
d425 1
a425 1
    stringBuffer.append(TEXT_61);
d439 1
a439 1
    stringBuffer.append(TEXT_62);
d441 1
a441 1
    stringBuffer.append(TEXT_63);
d443 1
a443 1
    stringBuffer.append(TEXT_64);
d445 1
a445 1
    stringBuffer.append(TEXT_65);
d447 1
a447 1
    stringBuffer.append(TEXT_66);
a448 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d452 2
a454 2
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d458 2
d461 1
a461 1
    stringBuffer.append(TEXT_73);
d464 1
a464 1
    stringBuffer.append(TEXT_74);
d466 1
a466 1
    stringBuffer.append(TEXT_75);
d468 1
a468 1
    stringBuffer.append(TEXT_76);
a469 1
    stringBuffer.append(TEXT_77);
d471 1
d473 1
a473 1
    stringBuffer.append(TEXT_79);
a475 2
    stringBuffer.append(TEXT_80);
    	}
d479 1
d482 1
a483 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d487 2
a489 1
    stringBuffer.append(TEXT_88);
a491 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d495 2
d498 1
a498 1
    stringBuffer.append(TEXT_93);
d500 1
a500 1
    stringBuffer.append(TEXT_94);
d502 1
a502 1
    stringBuffer.append(TEXT_95);
a503 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d507 2
d510 1
a510 1
    stringBuffer.append(TEXT_99);
d512 1
a512 1
    stringBuffer.append(TEXT_100);
d514 1
a514 1
    stringBuffer.append(TEXT_101);
d516 1
a516 1
    stringBuffer.append(TEXT_102);
a517 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d521 2
d524 1
a524 1
    stringBuffer.append(TEXT_106);
a525 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d529 2
d532 1
a532 1
    stringBuffer.append(TEXT_110);
d534 1
a534 1
    stringBuffer.append(TEXT_111);
d536 1
a536 1
    stringBuffer.append(TEXT_112);
d538 1
a538 1
    stringBuffer.append(TEXT_113);
d540 1
a540 1
    stringBuffer.append(TEXT_114);
d542 1
a542 1
    stringBuffer.append(TEXT_115);
d544 1
a544 1
    stringBuffer.append(TEXT_116);
d546 1
a546 1
    stringBuffer.append(TEXT_117);
d548 1
a548 1
    stringBuffer.append(TEXT_118);
a549 2
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d553 1
d556 1
d558 1
a558 1
    stringBuffer.append(TEXT_124);
d560 1
a560 1
    stringBuffer.append(TEXT_125);
d565 1
a565 1
    stringBuffer.append(TEXT_126);
d567 1
a567 1
    stringBuffer.append(TEXT_127);
@


1.44
log
@Do not generate "switch" if without "case"
@
text
@d383 4
a386 1
	GenNode nextNode = (GenNode) it.next();
@


1.43
log
@[157148] - Deleting an element programmatically isn't propagated to the diagram
@
text
@d62 85
a146 83
  protected final String TEXT_43 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());" + NL + "\t}" + NL + "\t" + NL + "\tint nodeVID = ";
  protected final String TEXT_44 = ".getVisualID(view);" + NL + "\tswitch (nodeVID) {\t";
  protected final String TEXT_45 = NL + "\tcase ";
  protected final String TEXT_46 = ".VISUAL_ID:";
  protected final String TEXT_47 = NL + "\t\treturn true;" + NL + "\t}" + NL + "\treturn false;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "\t";
  protected final String TEXT_48 = NL;
  protected final String TEXT_49 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_50 = " createdViews = new ";
  protected final String TEXT_51 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());" + NL + "\t\tcreatedViews.addAll(refreshPhantoms());" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_52 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_53 = " phantomNodes = new ";
  protected final String TEXT_54 = "();" + NL + "\t\t";
  protected final String TEXT_55 = " container = ((";
  protected final String TEXT_56 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_57 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_58 = " diagram = getDiagram();";
  protected final String TEXT_59 = NL;
  protected final String TEXT_60 = "\tif (";
  protected final String TEXT_61 = ".eINSTANCE.get";
  protected final String TEXT_62 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_63 = NL + "\t\tfor (";
  protected final String TEXT_64 = " destinations = ";
  protected final String TEXT_65 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_66 = " nextDestination = (";
  protected final String TEXT_67 = ") destinations.next();";
  protected final String TEXT_68 = NL + "\t\t";
  protected final String TEXT_69 = " nextDestination = (";
  protected final String TEXT_70 = ") ";
  protected final String TEXT_71 = ";";
  protected final String TEXT_72 = NL + "\t\tif (";
  protected final String TEXT_73 = ".VISUAL_ID == ";
  protected final String TEXT_74 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_75 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = NL + "\t\t}";
  protected final String TEXT_78 = NL + "\t\t}";
  protected final String TEXT_79 = NL + "\t}";
  protected final String TEXT_80 = NL;
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = "for (";
  protected final String TEXT_83 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_84 = " nextView = (";
  protected final String TEXT_85 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_86 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_87 = NL;
  protected final String TEXT_88 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_89 = " createPhantomNodes(";
  protected final String TEXT_90 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_91 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_92 = " descriptors = new ";
  protected final String TEXT_93 = "();" + NL + "\tfor (";
  protected final String TEXT_94 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_95 = " element = (";
  protected final String TEXT_96 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_97 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_98 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_99 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_100 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_101 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_102 = " cc = new ";
  protected final String TEXT_103 = "(";
  protected final String TEXT_104 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_105 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_106 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_107 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_108 = " createCommand = new ";
  protected final String TEXT_109 = "(((";
  protected final String TEXT_110 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_111 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_112 = " adapters = ";
  protected final String TEXT_113 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_114 = ".makeMutable(new ";
  protected final String TEXT_115 = "(((";
  protected final String TEXT_116 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_117 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_118 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_119 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_122 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_123 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_124 = NL + NL + "}";
  protected final String TEXT_125 = NL;
d378 2
d381 2
a382 2
    stringBuffer.append(TEXT_44);
    for (Iterator it = genNodes.iterator(); it.hasNext();) {
d384 1
a384 1
    stringBuffer.append(TEXT_45);
d386 3
a388 1
    stringBuffer.append(TEXT_46);
d390 1
a390 1
    stringBuffer.append(TEXT_47);
d392 1
a392 1
    stringBuffer.append(TEXT_48);
d398 1
a398 1
    stringBuffer.append(TEXT_49);
d400 1
a400 1
    stringBuffer.append(TEXT_50);
d402 1
a402 1
    stringBuffer.append(TEXT_51);
d404 1
a404 1
    stringBuffer.append(TEXT_52);
d406 1
a406 1
    stringBuffer.append(TEXT_53);
d408 1
a408 1
    stringBuffer.append(TEXT_54);
d410 1
a410 1
    stringBuffer.append(TEXT_55);
d412 1
a412 1
    stringBuffer.append(TEXT_56);
d414 1
a414 1
    stringBuffer.append(TEXT_57);
d416 1
a416 1
    stringBuffer.append(TEXT_58);
d422 1
a422 1
    stringBuffer.append(TEXT_59);
d436 1
a436 1
    stringBuffer.append(TEXT_60);
d438 1
a438 1
    stringBuffer.append(TEXT_61);
d440 1
a440 1
    stringBuffer.append(TEXT_62);
d442 1
a442 1
    stringBuffer.append(TEXT_63);
d444 1
a444 1
    stringBuffer.append(TEXT_64);
d446 1
a446 1
    stringBuffer.append(TEXT_65);
d448 1
a448 1
    stringBuffer.append(TEXT_66);
d450 1
a450 1
    stringBuffer.append(TEXT_67);
d452 1
a452 1
    stringBuffer.append(TEXT_68);
d454 1
a454 1
    stringBuffer.append(TEXT_69);
d456 1
a456 1
    stringBuffer.append(TEXT_70);
d458 1
a458 1
    stringBuffer.append(TEXT_71);
d461 1
a461 1
    stringBuffer.append(TEXT_72);
d463 1
a463 1
    stringBuffer.append(TEXT_73);
d465 1
a465 1
    stringBuffer.append(TEXT_74);
a466 3
    stringBuffer.append(TEXT_75);
    stringBuffer.append(TEXT_76);
    	if (phantomsOnly) {
a467 2
    	}
	if (genFeature.isListType()) {
d469 1
a469 1
    	}
d472 1
d474 1
d476 1
a477 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d480 2
a482 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d484 1
d486 1
a487 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d489 1
a490 2
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d494 1
a494 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d498 1
a498 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d500 2
a502 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d514 2
a516 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d522 2
a524 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d528 1
a528 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d542 1
a542 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d544 1
a544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d546 2
a548 1
    stringBuffer.append(TEXT_119);
d550 1
d552 2
d555 1
a555 1
    stringBuffer.append(TEXT_122);
d557 1
a557 1
    stringBuffer.append(TEXT_123);
d562 1
a562 1
    stringBuffer.append(TEXT_124);
d564 1
a564 1
    stringBuffer.append(TEXT_125);
@


1.42
log
@[172032] - Do not generate ??CanonicalEditPolicy for pure-design elements
@
text
@d62 33
a94 33
  protected final String TEXT_43 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "\t";
  protected final String TEXT_44 = NL;
  protected final String TEXT_45 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_46 = " createdViews = new ";
  protected final String TEXT_47 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());" + NL + "\t\tcreatedViews.addAll(refreshPhantoms());" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_48 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_49 = " phantomNodes = new ";
  protected final String TEXT_50 = "();" + NL + "\t\t";
  protected final String TEXT_51 = " container = ((";
  protected final String TEXT_52 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_53 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_54 = " diagram = getDiagram();";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = "\tif (";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_59 = NL + "\t\tfor (";
  protected final String TEXT_60 = " destinations = ";
  protected final String TEXT_61 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_62 = " nextDestination = (";
  protected final String TEXT_63 = ") destinations.next();";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = " nextDestination = (";
  protected final String TEXT_66 = ") ";
  protected final String TEXT_67 = ";";
  protected final String TEXT_68 = NL + "\t\tif (";
  protected final String TEXT_69 = ".VISUAL_ID == ";
  protected final String TEXT_70 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_71 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL + "\t\t}";
  protected final String TEXT_74 = NL + "\t\t}";
  protected final String TEXT_75 = NL + "\t}";
d96 49
a144 45
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "for (";
  protected final String TEXT_79 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_80 = " nextView = (";
  protected final String TEXT_81 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_82 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_85 = " createPhantomNodes(";
  protected final String TEXT_86 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_87 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_88 = " descriptors = new ";
  protected final String TEXT_89 = "();" + NL + "\tfor (";
  protected final String TEXT_90 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_91 = " element = (";
  protected final String TEXT_92 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_93 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_94 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_95 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_96 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_97 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_98 = " cc = new ";
  protected final String TEXT_99 = "(";
  protected final String TEXT_100 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_101 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_102 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_103 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_104 = " createCommand = new ";
  protected final String TEXT_105 = "(((";
  protected final String TEXT_106 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_107 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_108 = " adapters = ";
  protected final String TEXT_109 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_110 = ".makeMutable(new ";
  protected final String TEXT_111 = "(((";
  protected final String TEXT_112 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_113 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_114 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_115 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_116 = NL;
  protected final String TEXT_117 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_118 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_119 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_120 = NL + NL + "}";
  protected final String TEXT_121 = NL;
d376 9
d386 1
a386 1
    stringBuffer.append(TEXT_44);
d392 1
a392 1
    stringBuffer.append(TEXT_45);
d394 1
a394 1
    stringBuffer.append(TEXT_46);
d396 1
a396 1
    stringBuffer.append(TEXT_47);
d398 1
a398 1
    stringBuffer.append(TEXT_48);
d400 1
a400 1
    stringBuffer.append(TEXT_49);
d402 1
a402 1
    stringBuffer.append(TEXT_50);
d404 1
a404 1
    stringBuffer.append(TEXT_51);
d406 1
a406 1
    stringBuffer.append(TEXT_52);
d408 1
a408 1
    stringBuffer.append(TEXT_53);
d410 1
a410 1
    stringBuffer.append(TEXT_54);
d416 1
a416 1
    stringBuffer.append(TEXT_55);
d430 1
a430 1
    stringBuffer.append(TEXT_56);
d432 1
a432 1
    stringBuffer.append(TEXT_57);
d434 1
a434 1
    stringBuffer.append(TEXT_58);
d436 1
a436 1
    stringBuffer.append(TEXT_59);
d438 1
a438 1
    stringBuffer.append(TEXT_60);
d440 1
a440 1
    stringBuffer.append(TEXT_61);
d442 1
a442 1
    stringBuffer.append(TEXT_62);
d444 1
a444 1
    stringBuffer.append(TEXT_63);
d446 1
a446 1
    stringBuffer.append(TEXT_64);
d448 1
a448 1
    stringBuffer.append(TEXT_65);
d450 1
a450 1
    stringBuffer.append(TEXT_66);
d452 1
a452 1
    stringBuffer.append(TEXT_67);
d455 1
a455 1
    stringBuffer.append(TEXT_68);
d457 1
a457 1
    stringBuffer.append(TEXT_69);
a458 8
    stringBuffer.append(TEXT_70);
    	}
    stringBuffer.append(TEXT_71);
    stringBuffer.append(TEXT_72);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_73);
    	}
	if (genFeature.isListType()) {
a461 1
    	}
d463 1
d465 2
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a472 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d474 1
d476 1
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d480 1
a480 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a481 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a482 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d494 1
a494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d498 2
a500 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d528 1
a528 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d538 1
d540 1
d542 6
d549 1
a549 1
    stringBuffer.append(TEXT_118);
d551 1
a551 1
    stringBuffer.append(TEXT_119);
d556 1
a556 1
    stringBuffer.append(TEXT_120);
d558 1
a558 1
    stringBuffer.append(TEXT_121);
@


1.41
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d292 1
a292 1
	if (typeModelFacet == null || typeModelFacet.isPhantomElement()) {
@


1.40
log
@#161380 simplify feature model facets
@
text
@d150 7
a156 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.39
log
@do not generate canonical edit policies unless needed
@
text
@d400 1
a400 1
if (false == nextLink.getModelFacet() instanceof FeatureModelFacet) {
d403 1
a403 1
FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
@


1.38
log
@moved code-only parts from templates to model impl classes
@
text
@d28 4
a31 4
  protected final String TEXT_9 = " getSemanticChildrenList() {" + NL + "\t";
  protected final String TEXT_10 = " result = new ";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t";
d36 20
a55 20
  protected final String TEXT_17 = "\t";
  protected final String TEXT_18 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_19 = "\tfor (";
  protected final String TEXT_20 = " values = ";
  protected final String TEXT_21 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_22 = ") values.next();";
  protected final String TEXT_23 = NL + "\tnextValue = ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + "\tnodeVID = ";
  protected final String TEXT_26 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_27 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_28 = NL + "\tcase ";
  protected final String TEXT_29 = ".VISUAL_ID: {";
  protected final String TEXT_30 = NL + "\tif (";
  protected final String TEXT_31 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_32 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_33 = NL;
  protected final String TEXT_34 = "\t\tbreak;";
  protected final String TEXT_35 = "\t}";
  protected final String TEXT_36 = NL + "\t}";
d57 34
a90 34
  protected final String TEXT_38 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_39 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "\t";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_42 = " createdViews = new ";
  protected final String TEXT_43 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());" + NL + "\t\tcreatedViews.addAll(refreshPhantoms());" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_44 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_45 = " phantomNodes = new ";
  protected final String TEXT_46 = "();" + NL + "\t\t";
  protected final String TEXT_47 = " container = ((";
  protected final String TEXT_48 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_49 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_50 = " diagram = getDiagram();";
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = "\tif (";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_55 = NL + "\t\tfor (";
  protected final String TEXT_56 = " destinations = ";
  protected final String TEXT_57 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_58 = " nextDestination = (";
  protected final String TEXT_59 = ") destinations.next();";
  protected final String TEXT_60 = NL + "\t\t";
  protected final String TEXT_61 = " nextDestination = (";
  protected final String TEXT_62 = ") ";
  protected final String TEXT_63 = ";";
  protected final String TEXT_64 = NL + "\t\tif (";
  protected final String TEXT_65 = ".VISUAL_ID == ";
  protected final String TEXT_66 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_67 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\t}";
  protected final String TEXT_71 = NL + "\t}";
d92 49
a140 45
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "for (";
  protected final String TEXT_75 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_76 = " nextView = (";
  protected final String TEXT_77 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_78 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_81 = " createPhantomNodes(";
  protected final String TEXT_82 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_83 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_84 = " descriptors = new ";
  protected final String TEXT_85 = "();" + NL + "\tfor (";
  protected final String TEXT_86 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_87 = " element = (";
  protected final String TEXT_88 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_89 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_90 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_91 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_92 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_93 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_94 = " cc = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_97 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_99 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_100 = " createCommand = new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_103 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_104 = " adapters = ";
  protected final String TEXT_105 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_106 = ".makeMutable(new ";
  protected final String TEXT_107 = "(((";
  protected final String TEXT_108 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_109 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_110 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_111 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_114 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_115 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_116 = NL + NL + "}";
  protected final String TEXT_117 = NL;
d266 2
d269 1
a269 1
    stringBuffer.append(TEXT_10);
a270 2
    stringBuffer.append(TEXT_11);
    if (genNodes.size() > 0) {
d280 1
a280 1
    }
d300 1
a300 1
    stringBuffer.append(TEXT_17);
d302 1
a302 1
    stringBuffer.append(TEXT_18);
d312 1
a312 1
    stringBuffer.append(TEXT_19);
d314 1
a314 1
    stringBuffer.append(TEXT_20);
d316 1
a316 1
    stringBuffer.append(TEXT_21);
d318 1
a318 1
    stringBuffer.append(TEXT_22);
d320 1
a320 1
    stringBuffer.append(TEXT_23);
d322 1
a322 1
    stringBuffer.append(TEXT_24);
d324 1
a324 1
    stringBuffer.append(TEXT_25);
d326 1
a326 1
    stringBuffer.append(TEXT_26);
d329 1
a329 1
    stringBuffer.append(TEXT_27);
d335 1
a335 1
    stringBuffer.append(TEXT_28);
d337 1
a337 1
    stringBuffer.append(TEXT_29);
d339 1
a339 1
    stringBuffer.append(TEXT_30);
d341 1
a341 1
    stringBuffer.append(TEXT_31);
a342 1
    stringBuffer.append(TEXT_32);
d344 1
d346 1
a346 1
    stringBuffer.append(TEXT_34);
d348 1
a348 1
    stringBuffer.append(TEXT_35);
d351 1
a351 1
    stringBuffer.append(TEXT_36);
d354 1
a354 1
    stringBuffer.append(TEXT_37);
d357 7
a363 1
    stringBuffer.append(TEXT_38);
d365 1
a365 1
    stringBuffer.append(TEXT_39);
d367 1
a367 1
    stringBuffer.append(TEXT_40);
d373 1
a373 1
    stringBuffer.append(TEXT_41);
d375 1
a375 1
    stringBuffer.append(TEXT_42);
d377 1
a377 1
    stringBuffer.append(TEXT_43);
d379 1
a379 1
    stringBuffer.append(TEXT_44);
d381 1
a381 1
    stringBuffer.append(TEXT_45);
d383 1
a383 1
    stringBuffer.append(TEXT_46);
d385 1
a385 1
    stringBuffer.append(TEXT_47);
d387 1
a387 1
    stringBuffer.append(TEXT_48);
d389 1
a389 1
    stringBuffer.append(TEXT_49);
d391 1
a391 1
    stringBuffer.append(TEXT_50);
d397 1
a397 1
    stringBuffer.append(TEXT_51);
d411 1
a411 1
    stringBuffer.append(TEXT_52);
d413 1
a413 1
    stringBuffer.append(TEXT_53);
d415 1
a415 1
    stringBuffer.append(TEXT_54);
d417 1
a417 1
    stringBuffer.append(TEXT_55);
d419 1
a419 1
    stringBuffer.append(TEXT_56);
d421 1
a421 1
    stringBuffer.append(TEXT_57);
d423 1
a423 1
    stringBuffer.append(TEXT_58);
d425 1
a425 1
    stringBuffer.append(TEXT_59);
d427 1
a427 1
    stringBuffer.append(TEXT_60);
d429 1
a429 1
    stringBuffer.append(TEXT_61);
d431 1
a431 1
    stringBuffer.append(TEXT_62);
d433 1
a433 1
    stringBuffer.append(TEXT_63);
d436 1
a436 1
    stringBuffer.append(TEXT_64);
d438 1
a438 1
    stringBuffer.append(TEXT_65);
a439 8
    stringBuffer.append(TEXT_66);
    	}
    stringBuffer.append(TEXT_67);
    stringBuffer.append(TEXT_68);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_69);
    	}
	if (genFeature.isListType()) {
a442 1
    	}
d444 1
d446 2
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d455 1
d457 1
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a462 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a463 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d479 2
a481 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d503 1
a503 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d519 1
d521 1
d523 6
d530 1
a530 1
    stringBuffer.append(TEXT_114);
d532 1
a532 1
    stringBuffer.append(TEXT_115);
d537 1
a537 1
    stringBuffer.append(TEXT_116);
d539 1
a539 1
    stringBuffer.append(TEXT_117);
@


1.37
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d359 2
a360 23
// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (nextModelFacet == null || !nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}

    
List phantomLinks = new LinkedList();
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet nextModelFacet = (FeatureModelFacet) nextLink.getModelFacet();
		if (nextModelFacet.getMetaFeature().isContains()) {
			phantomLinks.add(nextLink);
		}
	}
}
	
@


1.36
log
@#141789 call "Arrange ALL" function in generation code for initialize the diagram
@
text
@d146 1
a146 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.35
log
@#148813 Do not remove diagram nodes with domain element located in resource by CanonicalEditPolicy
@
text
@d60 17
a76 17
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();" + NL + "\t\trefreshPhantoms();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_42 = " phantomNodes = new ";
  protected final String TEXT_43 = "();" + NL + "\t\t";
  protected final String TEXT_44 = " container = ((";
  protected final String TEXT_45 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_46 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_47 = " diagram = getDiagram();";
  protected final String TEXT_48 = NL;
  protected final String TEXT_49 = "\tif (";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_52 = NL + "\t\tfor (";
  protected final String TEXT_53 = " destinations = ";
  protected final String TEXT_54 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_55 = " nextDestination = (";
  protected final String TEXT_56 = ") destinations.next();";
  protected final String TEXT_57 = NL + "\t\t";
d78 59
a136 53
  protected final String TEXT_59 = ") ";
  protected final String TEXT_60 = ";";
  protected final String TEXT_61 = NL + "\t\tif (";
  protected final String TEXT_62 = ".VISUAL_ID == ";
  protected final String TEXT_63 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_64 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_65 = NL;
  protected final String TEXT_66 = NL + "\t\t}";
  protected final String TEXT_67 = NL + "\t\t}";
  protected final String TEXT_68 = NL + "\t}";
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = "for (";
  protected final String TEXT_72 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_73 = " nextView = (";
  protected final String TEXT_74 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_75 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_78 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_79 = " descriptors = new ";
  protected final String TEXT_80 = "();" + NL + "\tfor (";
  protected final String TEXT_81 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_82 = " element = (";
  protected final String TEXT_83 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_84 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_85 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_86 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_87 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_88 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_89 = " cc = new ";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_92 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_93 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_94 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_95 = " createCommand = new ";
  protected final String TEXT_96 = "(((";
  protected final String TEXT_97 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_98 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_99 = ".makeMutable(new ";
  protected final String TEXT_100 = "(((";
  protected final String TEXT_101 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_102 = " adapters = (";
  protected final String TEXT_103 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_104 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_105 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_106 = NL;
  protected final String TEXT_107 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_108 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_109 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_110 = NL + NL + "}";
  protected final String TEXT_111 = NL;
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d389 6
d396 1
a396 1
    stringBuffer.append(TEXT_44);
d398 1
a398 1
    stringBuffer.append(TEXT_45);
d400 1
a400 1
    stringBuffer.append(TEXT_46);
d402 1
a402 1
    stringBuffer.append(TEXT_47);
d408 1
a408 1
    stringBuffer.append(TEXT_48);
d422 1
a422 1
    stringBuffer.append(TEXT_49);
d424 1
a424 1
    stringBuffer.append(TEXT_50);
d426 1
a426 1
    stringBuffer.append(TEXT_51);
d428 1
a428 1
    stringBuffer.append(TEXT_52);
d430 1
a430 1
    stringBuffer.append(TEXT_53);
a431 6
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_56);
    	} else {
d437 1
a437 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d439 1
a439 2
    	}
    	if (phantomsOnly) {
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d446 1
d448 1
d450 1
a450 1
    	if (phantomsOnly) {
a452 1
	if (genFeature.isListType()) {
a453 1
    	}
d455 2
d458 1
a458 1
    stringBuffer.append(TEXT_69);
d460 1
d462 1
a462 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d468 1
d470 1
d472 1
a472 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a473 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a474 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d480 1
a480 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d494 1
a494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d498 1
a498 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d516 2
a518 2
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d520 2
a522 2
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d526 1
d528 1
d530 10
d541 1
a541 1
    stringBuffer.append(TEXT_108);
d543 1
a543 1
    stringBuffer.append(TEXT_109);
d548 1
a548 1
    stringBuffer.append(TEXT_110);
d550 1
a550 1
    stringBuffer.append(TEXT_111);
@


1.35.2.1
log
@#141789 call "Arrange ALL" function in generation code for initialize the diagram
@
text
@d60 17
a76 17
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_42 = " createdViews = new ";
  protected final String TEXT_43 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());" + NL + "\t\tcreatedViews.addAll(refreshPhantoms());" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_44 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_45 = " phantomNodes = new ";
  protected final String TEXT_46 = "();" + NL + "\t\t";
  protected final String TEXT_47 = " container = ((";
  protected final String TEXT_48 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_49 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_50 = " diagram = getDiagram();";
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = "\tif (";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_55 = NL + "\t\tfor (";
  protected final String TEXT_56 = " destinations = ";
  protected final String TEXT_57 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
d78 53
a130 59
  protected final String TEXT_59 = ") destinations.next();";
  protected final String TEXT_60 = NL + "\t\t";
  protected final String TEXT_61 = " nextDestination = (";
  protected final String TEXT_62 = ") ";
  protected final String TEXT_63 = ";";
  protected final String TEXT_64 = NL + "\t\tif (";
  protected final String TEXT_65 = ".VISUAL_ID == ";
  protected final String TEXT_66 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_67 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\t}";
  protected final String TEXT_71 = NL + "\t}";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "for (";
  protected final String TEXT_75 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_76 = " nextView = (";
  protected final String TEXT_77 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_78 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_81 = " createPhantomNodes(";
  protected final String TEXT_82 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_83 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_84 = " descriptors = new ";
  protected final String TEXT_85 = "();" + NL + "\tfor (";
  protected final String TEXT_86 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_87 = " element = (";
  protected final String TEXT_88 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_89 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_90 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_91 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_92 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_93 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_94 = " cc = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_97 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_99 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_100 = " createCommand = new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_103 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_104 = " adapters = ";
  protected final String TEXT_105 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_106 = ".makeMutable(new ";
  protected final String TEXT_107 = "(((";
  protected final String TEXT_108 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_109 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_110 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_111 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_112 = NL;
  protected final String TEXT_113 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_114 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_115 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_116 = NL + NL + "}";
  protected final String TEXT_117 = NL;
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a390 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_50);
d396 1
a396 1
    stringBuffer.append(TEXT_51);
d410 6
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d419 1
a419 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d421 1
a421 1
    	if (genFeature.isListType()) {
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d425 1
a425 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d431 1
a431 1
    	} else {
d433 2
a434 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d436 1
a436 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d438 1
a438 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
a440 1
    	if (phantomsOnly) {
a441 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d446 1
d448 1
d450 1
a450 1
    	if (phantomsOnly) {
a451 2
    	}
	if (genFeature.isListType()) {
a452 1
    	}
d454 1
a454 1
    	}
d456 1
d458 1
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a462 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d466 1
d468 1
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d472 1
a472 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d480 1
a480 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d492 2
a494 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d498 1
a498 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a525 10
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_115);
d530 1
a530 1
    stringBuffer.append(TEXT_116);
d532 1
a532 1
    stringBuffer.append(TEXT_117);
@


1.34
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d58 1
a58 1
  protected final String TEXT_39 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "\t";
@


1.33
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d58 31
a88 31
  protected final String TEXT_39 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_41 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_42 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\treturn ";
  protected final String TEXT_43 = ".resolveSemanticElement(view) == null;" + NL + "\t}";
  protected final String TEXT_44 = NL + "\t";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();" + NL + "\t\trefreshPhantoms();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_47 = " phantomNodes = new ";
  protected final String TEXT_48 = "();" + NL + "\t\t";
  protected final String TEXT_49 = " container = ((";
  protected final String TEXT_50 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_51 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_52 = " diagram = getDiagram();";
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = "\tif (";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_57 = NL + "\t\tfor (";
  protected final String TEXT_58 = " destinations = ";
  protected final String TEXT_59 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_60 = " nextDestination = (";
  protected final String TEXT_61 = ") destinations.next();";
  protected final String TEXT_62 = NL + "\t\t";
  protected final String TEXT_63 = " nextDestination = (";
  protected final String TEXT_64 = ") ";
  protected final String TEXT_65 = ";";
  protected final String TEXT_66 = NL + "\t\tif (";
  protected final String TEXT_67 = ".VISUAL_ID == ";
  protected final String TEXT_68 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_69 = NL + "\t\t\tphantomNodes.add(nextDestination);";
d90 40
a129 40
  protected final String TEXT_71 = NL + "\t\t}";
  protected final String TEXT_72 = NL + "\t\t}";
  protected final String TEXT_73 = NL + "\t}";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = "for (";
  protected final String TEXT_77 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_78 = " nextView = (";
  protected final String TEXT_79 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_80 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_83 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_84 = " descriptors = new ";
  protected final String TEXT_85 = "();" + NL + "\tfor (";
  protected final String TEXT_86 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_87 = " element = (";
  protected final String TEXT_88 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_89 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_90 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_91 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_92 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_93 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_94 = " cc = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_97 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_99 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_100 = " createCommand = new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_103 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_104 = ".makeMutable(new ";
  protected final String TEXT_105 = "(((";
  protected final String TEXT_106 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_107 = " adapters = (";
  protected final String TEXT_108 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_109 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_110 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
a130 5
  protected final String TEXT_112 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_113 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_114 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_115 = NL + NL + "}";
  protected final String TEXT_116 = NL;
d251 1
a251 4
    
if (genDiagram.isSynchronized()) {
	List genNodes = genContainer.getChildNodes();

d350 1
a350 1
    } else {
a351 10
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    if (genContainer instanceof GenNode && genDiagram.isSynchronized()) {
    stringBuffer.append(TEXT_45);
d378 1
a378 1
    stringBuffer.append(TEXT_46);
d380 1
a380 1
    stringBuffer.append(TEXT_47);
d382 1
a382 1
    stringBuffer.append(TEXT_48);
d384 1
a384 1
    stringBuffer.append(TEXT_49);
d386 1
a386 1
    stringBuffer.append(TEXT_50);
d388 1
a388 1
    stringBuffer.append(TEXT_51);
d390 1
a390 1
    stringBuffer.append(TEXT_52);
d396 1
a396 1
    stringBuffer.append(TEXT_53);
d410 10
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d423 1
a423 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d425 1
a425 1
    	if (genFeature.isListType()) {
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d429 2
a431 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d433 2
a434 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d436 1
a436 1
    	} else {
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a441 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
a442 1
    	}
d445 2
a446 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a452 1
    	if (phantomsOnly) {
d454 1
a454 2
    	}
	if (genFeature.isListType()) {
d456 1
a456 1
    	}
d458 1
a458 1
    	}
d460 1
a462 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d470 1
d472 1
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d480 1
a480 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d492 2
a494 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d498 1
a498 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d500 1
a500 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
a520 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a525 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(TEXT_111);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_114);
d530 1
a530 1
    stringBuffer.append(TEXT_115);
d532 1
a532 1
    stringBuffer.append(TEXT_116);
@


1.32
log
@header comment should not be a javadoc comment
@
text
@d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
@


1.31
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.30
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d247 1
a247 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.29
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d284 1
a284 1
	if (typeModelFacet.isPhantomElement()) {
d376 1
a376 1
	if (!nextModelFacet.isPhantomElement()) {
@


1.28
log
@#131543 Obsolete code should be eliminated
@
text
@d23 113
a135 115
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends CanonicalEditPolicy {" + NL;
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_11 = " getSemanticChildrenList() {" + NL + "\t";
  protected final String TEXT_12 = " result = new ";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL + "\t";
  protected final String TEXT_15 = " modelObject = ((";
  protected final String TEXT_16 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_17 = " viewObject = (";
  protected final String TEXT_18 = ") getHost().getModel();";
  protected final String TEXT_19 = "\t";
  protected final String TEXT_20 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_21 = "\tfor (";
  protected final String TEXT_22 = " values = ";
  protected final String TEXT_23 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_24 = ") values.next();";
  protected final String TEXT_25 = NL + "\tnextValue = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + "\tnodeVID = ";
  protected final String TEXT_28 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_29 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_30 = NL + "\tcase ";
  protected final String TEXT_31 = ".VISUAL_ID: {";
  protected final String TEXT_32 = NL + "\tif (";
  protected final String TEXT_33 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_34 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t\tbreak;";
  protected final String TEXT_37 = "\t}";
  protected final String TEXT_38 = NL + "\t}";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_41 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_42 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_43 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_44 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\treturn ";
  protected final String TEXT_45 = ".resolveSemanticElement(view) == null;" + NL + "\t}";
  protected final String TEXT_46 = NL + "\t";
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();" + NL + "\t\trefreshPhantoms();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_49 = " phantomNodes = new ";
  protected final String TEXT_50 = "();" + NL + "\t\t";
  protected final String TEXT_51 = " container = ((";
  protected final String TEXT_52 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_53 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_54 = " diagram = getDiagram();";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = "\tif (";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_59 = NL + "\t\tfor (";
  protected final String TEXT_60 = " destinations = ";
  protected final String TEXT_61 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_62 = " nextDestination = (";
  protected final String TEXT_63 = ") destinations.next();";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = " nextDestination = (";
  protected final String TEXT_66 = ") ";
  protected final String TEXT_67 = ";";
  protected final String TEXT_68 = NL + "\t\tif (";
  protected final String TEXT_69 = ".VISUAL_ID == ";
  protected final String TEXT_70 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_71 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL + "\t\t}";
  protected final String TEXT_74 = NL + "\t\t}";
  protected final String TEXT_75 = NL + "\t}";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "for (";
  protected final String TEXT_79 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_80 = " nextView = (";
  protected final String TEXT_81 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_82 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_85 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_86 = " descriptors = new ";
  protected final String TEXT_87 = "();" + NL + "\tfor (";
  protected final String TEXT_88 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_89 = " element = (";
  protected final String TEXT_90 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_91 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_92 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_93 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_94 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_95 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_96 = " cc = new ";
  protected final String TEXT_97 = "(";
  protected final String TEXT_98 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_99 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_100 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_101 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_102 = " createCommand = new ";
  protected final String TEXT_103 = "(((";
  protected final String TEXT_104 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_105 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_106 = ".makeMutable(new ";
  protected final String TEXT_107 = "(((";
  protected final String TEXT_108 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_109 = " adapters = (";
  protected final String TEXT_110 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_111 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_112 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_113 = NL;
  protected final String TEXT_114 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_115 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_116 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_117 = NL + NL + "}";
  protected final String TEXT_118 = NL;
d237 2
a238 1
GenChildContainer genContainer = (GenChildContainer) ((Object[]) argument)[0];
d250 1
d252 1
a252 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d254 1
a254 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
a255 4
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genContainer.getCanonicalEditPolicyClassName());
    stringBuffer.append(TEXT_8);
d260 3
d264 1
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d268 1
a268 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d270 1
a270 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d272 1
a272 1
    if (genNodes.size() > 0) {
d274 1
a274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a277 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_18);
d298 1
a298 1
    stringBuffer.append(TEXT_19);
d300 1
a300 1
    stringBuffer.append(TEXT_20);
d310 1
a310 1
    stringBuffer.append(TEXT_21);
d312 1
a312 1
    stringBuffer.append(TEXT_22);
d314 1
a314 1
    stringBuffer.append(TEXT_23);
d316 1
a316 1
    stringBuffer.append(TEXT_24);
d318 1
a318 1
    stringBuffer.append(TEXT_25);
d320 1
a320 1
    stringBuffer.append(TEXT_26);
d322 1
a322 1
    stringBuffer.append(TEXT_27);
d324 1
a324 1
    stringBuffer.append(TEXT_28);
d327 1
a327 1
    stringBuffer.append(TEXT_29);
d333 4
d340 1
a340 1
    		} else {
a341 1
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
d343 2
a345 1
    stringBuffer.append(TEXT_34);
a346 4
    		if (generateSwitch) {
    stringBuffer.append(TEXT_36);
    		}
    stringBuffer.append(TEXT_37);
d349 1
a349 1
    stringBuffer.append(TEXT_38);
d352 1
a352 1
    stringBuffer.append(TEXT_39);
d355 1
a355 1
    stringBuffer.append(TEXT_40);
d357 1
a357 1
    stringBuffer.append(TEXT_41);
d359 1
a359 1
    stringBuffer.append(TEXT_42);
d361 1
a361 1
    stringBuffer.append(TEXT_43);
d363 1
a363 1
    stringBuffer.append(TEXT_44);
d365 1
a365 1
    stringBuffer.append(TEXT_45);
d367 1
a367 1
    stringBuffer.append(TEXT_46);
d369 1
a369 1
    stringBuffer.append(TEXT_47);
d396 1
a396 1
    stringBuffer.append(TEXT_48);
d398 1
a398 1
    stringBuffer.append(TEXT_49);
d400 1
a400 1
    stringBuffer.append(TEXT_50);
d402 1
a402 1
    stringBuffer.append(TEXT_51);
d404 1
a404 1
    stringBuffer.append(TEXT_52);
d406 1
a406 1
    stringBuffer.append(TEXT_53);
d408 1
a408 1
    stringBuffer.append(TEXT_54);
d414 1
a414 1
    stringBuffer.append(TEXT_55);
d428 4
d433 1
a433 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d435 1
a435 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d437 1
a437 1
    	if (genFeature.isListType()) {
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d441 1
a441 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d447 1
a447 1
    	} else {
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d451 2
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d454 1
a454 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d456 2
a458 3
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
a459 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d461 2
d464 1
a464 1
    stringBuffer.append(TEXT_71);
d466 1
a466 1
    	if (phantomsOnly) {
a468 1
	if (genFeature.isListType()) {
a469 1
    	}
a470 1
    	}
d472 1
d474 1
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a480 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d482 1
d484 1
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d490 1
a490 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d492 1
a492 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d494 1
a494 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d496 1
a496 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d498 2
a500 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d528 1
a528 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a537 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d540 1
d542 1
a543 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_116);
d548 1
a548 1
    stringBuffer.append(TEXT_117);
d550 1
a550 1
    stringBuffer.append(TEXT_118);
@


1.27
log
@#141463 ecore diagram : EClass shortcut disappears when creating a new EClass
@
text
@a238 3
// TODO: move this attribute to the genmodel
final boolean isSynchronizedDiagram = true;

d261 1
a261 1
if (isSynchronizedDiagram) {
d372 1
a372 1
    if (genContainer instanceof GenNode && isSynchronizedDiagram) {
@


1.26
log
@#135019 Canonical Edit Policy: Links that have changed visual IDs should not duplicate on diagram reopening
@
text
@d60 1
a60 1
  protected final String TEXT_41 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
@


1.25
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d60 78
a137 80
  protected final String TEXT_41 = " view) {" + NL + "\t";
  protected final String TEXT_42 = " domainModelElement = view.getElement();" + NL + "\treturn domainModelElement != null && domainModelElement != ((";
  protected final String TEXT_43 = ") getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_45 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_46 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\treturn ";
  protected final String TEXT_47 = ".resolveSemanticElement(view) == null;" + NL + "\t}";
  protected final String TEXT_48 = NL + "\t";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();" + NL + "\t\trefreshPhantoms();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_51 = " phantomNodes = new ";
  protected final String TEXT_52 = "();" + NL + "\t\t";
  protected final String TEXT_53 = " container = ((";
  protected final String TEXT_54 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_55 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_56 = " diagram = getDiagram();";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = "\tif (";
  protected final String TEXT_59 = ".eINSTANCE.get";
  protected final String TEXT_60 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_61 = NL + "\t\tfor (";
  protected final String TEXT_62 = " destinations = ";
  protected final String TEXT_63 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_64 = " nextDestination = (";
  protected final String TEXT_65 = ") destinations.next();";
  protected final String TEXT_66 = NL + "\t\t";
  protected final String TEXT_67 = " nextDestination = (";
  protected final String TEXT_68 = ") ";
  protected final String TEXT_69 = ";";
  protected final String TEXT_70 = NL + "\t\tif (";
  protected final String TEXT_71 = ".VISUAL_ID == ";
  protected final String TEXT_72 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_73 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL + "\t\t}";
  protected final String TEXT_76 = NL + "\t\t}";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL;
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "for (";
  protected final String TEXT_81 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_82 = " nextView = (";
  protected final String TEXT_83 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_84 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_87 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_88 = " descriptors = new ";
  protected final String TEXT_89 = "();" + NL + "\tfor (";
  protected final String TEXT_90 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_91 = " element = (";
  protected final String TEXT_92 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_93 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_94 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_95 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_96 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_97 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_98 = " cc = new ";
  protected final String TEXT_99 = "(";
  protected final String TEXT_100 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_101 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_102 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_103 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_104 = " createCommand = new ";
  protected final String TEXT_105 = "(((";
  protected final String TEXT_106 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_107 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_108 = ".makeMutable(new ";
  protected final String TEXT_109 = "(((";
  protected final String TEXT_110 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_111 = " adapters = (";
  protected final String TEXT_112 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_113 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_114 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_115 = NL;
  protected final String TEXT_116 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_117 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_118 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_119 = NL + NL + "}";
  protected final String TEXT_120 = NL;
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d369 1
a369 1
    } else {
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
a376 4
    }
    stringBuffer.append(TEXT_48);
    if (genContainer instanceof GenNode && isSynchronizedDiagram) {
    stringBuffer.append(TEXT_49);
d403 1
a403 1
    stringBuffer.append(TEXT_50);
d405 1
a405 1
    stringBuffer.append(TEXT_51);
d407 1
a407 1
    stringBuffer.append(TEXT_52);
d409 1
a409 1
    stringBuffer.append(TEXT_53);
d411 1
a411 1
    stringBuffer.append(TEXT_54);
d413 1
a413 1
    stringBuffer.append(TEXT_55);
d415 1
a415 1
    stringBuffer.append(TEXT_56);
d421 1
a421 1
    stringBuffer.append(TEXT_57);
d435 4
d440 1
a440 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d442 1
a442 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d444 1
a444 1
    	if (genFeature.isListType()) {
d446 1
a446 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d448 1
a448 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d450 1
a450 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d454 1
a454 1
    	} else {
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d458 2
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d461 1
a461 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d463 2
a465 3
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
a466 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d468 2
d471 1
a471 1
    stringBuffer.append(TEXT_73);
d473 1
a473 1
    	if (phantomsOnly) {
a475 1
	if (genFeature.isListType()) {
a476 1
    	}
a477 1
    	}
d479 1
d481 1
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a486 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d489 1
d491 1
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d503 1
a503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d505 2
a507 2
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d521 1
a521 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d523 1
a523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d527 1
a527 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d529 1
a529 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d531 1
a531 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d533 1
a533 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d535 1
a535 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d537 1
a537 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d539 1
a539 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d541 1
a541 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d543 1
a543 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a545 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d547 1
d549 1
a550 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_118);
d555 1
a555 1
    stringBuffer.append(TEXT_119);
d557 1
a557 1
    stringBuffer.append(TEXT_120);
@


1.24
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d47 1
a47 1
  protected final String TEXT_28 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
d91 1
a91 1
  protected final String TEXT_72 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
@


1.23
log
@Obsolete import removed.
@
text
@d50 1
a50 1
  protected final String TEXT_31 = ": {";
d52 1
a52 1
  protected final String TEXT_33 = " == nodeVID) {";
d90 1
a90 1
  protected final String TEXT_71 = " == ";
d343 1
a343 1
    stringBuffer.append(nextNode.getVisualID());
d347 1
a347 1
    stringBuffer.append(nextNode.getVisualID());
d467 1
a467 1
    stringBuffer.append(phantomNode.getVisualID());
@


1.22
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d25 1
a25 1
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
@


1.21
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d62 1
a62 1
  protected final String TEXT_43 = ") getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "}";
d67 1
a67 1
  protected final String TEXT_48 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t";
@


1.20
log
@using M6 to generate code.
@
text
@d47 1
a47 1
  protected final String TEXT_28 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");";
d89 3
a91 3
  protected final String TEXT_70 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_71 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_72 = " == nodeVID) {";
d467 2
a469 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(phantomNode.getVisualID());
@


1.19
log
@restore generators
@
text
@d239 1
a239 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.18
log
@#134095 do not store compiled templates in cvs
@
text
@d239 1
a239 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.17
log
@Switching to eclipse M6.
@
text
@@


1.16
log
@#134737 Create connections (links) to the inner elements in CanonicalEditPolicy/InitDiagramFileAction
#134751 Generated code should return semantic children in a correct sequence from CanonicalEditPolicy.getSemanticChildrenList()
@
text
@d239 1
a239 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d38 60
a97 60
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = "\t";
  protected final String TEXT_21 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_22 = "\tfor (";
  protected final String TEXT_23 = " values = ";
  protected final String TEXT_24 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_25 = ") values.next();";
  protected final String TEXT_26 = NL + "\tnextValue = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + "\tnodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\tif (";
  protected final String TEXT_30 = " == nodeVID) {" + NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = "\t}";
  protected final String TEXT_33 = NL + "\t}";
  protected final String TEXT_34 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_35 = " view) {" + NL + "\t";
  protected final String TEXT_36 = " domainModelElement = view.getElement();" + NL + "\treturn domainModelElement != null && domainModelElement != ((";
  protected final String TEXT_37 = ") getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "}";
  protected final String TEXT_38 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_40 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\treturn ";
  protected final String TEXT_41 = ".resolveSemanticElement(view) == null;" + NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "\t";
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();" + NL + "\t\trefreshPhantoms();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_45 = " phantomNodes = new ";
  protected final String TEXT_46 = "();" + NL + "\t\t";
  protected final String TEXT_47 = " container = ((";
  protected final String TEXT_48 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_49 = " containerMetaclass = container.eClass();" + NL + "\t\t";
  protected final String TEXT_50 = " diagram = getDiagram();";
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = "\tif (";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_55 = NL + "\t\tfor (";
  protected final String TEXT_56 = " destinations = ";
  protected final String TEXT_57 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_58 = " nextDestination = (";
  protected final String TEXT_59 = ") destinations.next();";
  protected final String TEXT_60 = NL + "\t\t";
  protected final String TEXT_61 = " nextDestination = (";
  protected final String TEXT_62 = ") ";
  protected final String TEXT_63 = ";";
  protected final String TEXT_64 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_65 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_66 = " == nodeVID) {";
  protected final String TEXT_67 = NL + "\t\t\tphantomNodes.add(nextDestination);";
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\t}";
  protected final String TEXT_71 = NL + "\t}";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "for (";
  protected final String TEXT_75 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_76 = " nextView = (";
  protected final String TEXT_77 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_78 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL + "\t";
d99 41
a139 35
  protected final String TEXT_80 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_81 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_82 = " descriptors = new ";
  protected final String TEXT_83 = "();" + NL + "\tfor (";
  protected final String TEXT_84 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_85 = " element = (";
  protected final String TEXT_86 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_87 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_88 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_89 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_90 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_91 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_92 = " cc = new ";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_95 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_96 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_97 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_98 = " createCommand = new ";
  protected final String TEXT_99 = "(((";
  protected final String TEXT_100 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_101 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_102 = ".makeMutable(new ";
  protected final String TEXT_103 = "(((";
  protected final String TEXT_104 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_105 = " adapters = (";
  protected final String TEXT_106 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_107 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_108 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}" + NL;
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_111 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_112 = ") getHost().getModel()).getDiagram();" + NL + "}";
  protected final String TEXT_113 = NL + NL + "}";
  protected final String TEXT_114 = NL;
d277 1
a277 4
    
for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
	if (nodeIndex == 0) {

d287 1
a287 2
    	}
    stringBuffer.append(TEXT_19);
d289 13
a301 5
GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
TypeModelFacet typeModelFacet = nextNode.getModelFacet();
if (typeModelFacet.isPhantomElement()) {
// Skipping top-level phantoms
	continue;
a302 3
GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	
if (nodeIndex == 0) {
d304 5
a309 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_21);
d313 5
a317 1
if (childMetaFeature.isListType()) {
d319 2
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d324 1
a324 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d328 1
a328 1
    } else {
d330 1
a330 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d332 1
a332 1
    }
d334 2
a335 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d337 6
a343 1
    stringBuffer.append(TEXT_30);
d345 1
d347 1
a347 1
    if (childMetaFeature.isListType()) {
d349 1
a349 2
    }
    }
d351 14
d366 1
a366 1
    stringBuffer.append(TEXT_35);
d368 1
a368 1
    stringBuffer.append(TEXT_36);
d370 1
a370 1
    stringBuffer.append(TEXT_37);
d372 1
a372 1
    stringBuffer.append(TEXT_38);
d374 1
a374 1
    stringBuffer.append(TEXT_39);
d376 1
a376 1
    stringBuffer.append(TEXT_40);
d378 1
a378 1
    stringBuffer.append(TEXT_41);
d380 1
a380 1
    stringBuffer.append(TEXT_42);
d382 1
a382 1
    stringBuffer.append(TEXT_43);
d409 1
a409 1
    stringBuffer.append(TEXT_44);
d411 1
a411 1
    stringBuffer.append(TEXT_45);
d413 1
a413 1
    stringBuffer.append(TEXT_46);
d415 1
a415 1
    stringBuffer.append(TEXT_47);
d417 1
a417 1
    stringBuffer.append(TEXT_48);
d419 1
a419 1
    stringBuffer.append(TEXT_49);
d421 1
a421 1
    stringBuffer.append(TEXT_50);
d427 1
a427 1
    stringBuffer.append(TEXT_51);
d441 1
a441 1
    stringBuffer.append(TEXT_52);
d443 1
a443 1
    stringBuffer.append(TEXT_53);
d445 1
a445 1
    stringBuffer.append(TEXT_54);
d447 1
a447 1
    stringBuffer.append(TEXT_55);
a448 12
    stringBuffer.append(TEXT_56);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_59);
    	} else {
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d452 1
a452 2
    	}
    	if (phantomsOnly) {
d454 1
a454 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d456 1
a456 1
    stringBuffer.append(phantomNode.getVisualID());
d458 1
a458 1
    	}
d460 1
d462 1
a462 1
    	if (phantomsOnly) {
d465 1
a465 1
	if (genFeature.isListType()) {
d467 1
a467 1
    	}
d469 2
a471 1
    stringBuffer.append(TEXT_72);
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d476 2
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a492 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d503 1
a503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d521 1
a521 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d523 1
a523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d527 1
a527 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d529 1
a529 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d531 1
a531 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d533 1
a533 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d535 1
a535 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d537 1
a537 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d539 1
d541 1
d543 10
d554 1
a554 1
    stringBuffer.append(TEXT_111);
d556 1
a556 1
    stringBuffer.append(TEXT_112);
d561 1
a561 1
    stringBuffer.append(TEXT_113);
d563 1
a563 1
    stringBuffer.append(TEXT_114);
@


1.14
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d27 1
a27 1
  protected final String TEXT_8 = " extends CanonicalEditPolicy {";
d29 105
a133 117
  protected final String TEXT_10 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_11 = " getSemanticChildrenList() {" + NL + "\t\t\tList result = new ";
  protected final String TEXT_12 = "();";
  protected final String TEXT_13 = NL + "\t\t\t";
  protected final String TEXT_14 = " modelElement = (";
  protected final String TEXT_15 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\t";
  protected final String TEXT_16 = " nextValue;" + NL + "\t\t\tint nodeVID;";
  protected final String TEXT_17 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_18 = " it = ";
  protected final String TEXT_19 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_20 = ") it.next();";
  protected final String TEXT_21 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_22 = ";";
  protected final String TEXT_23 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_24 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_25 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t}";
  protected final String TEXT_27 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\t";
  protected final String TEXT_28 = " domainModelElement = view.getElement();" + NL + "\t\t\treturn domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected void refreshSemantic() {" + NL + "\tsuper.refreshSemantic();";
  protected final String TEXT_32 = NL + "\trefreshReferenceOnlyConnections();";
  protected final String TEXT_33 = NL + "\trefreshPhantoms();";
  protected final String TEXT_34 = NL + "}";
  protected final String TEXT_35 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class PhantomLinkInfo {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject myDst;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int myIndex;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String myType;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_36 = " myElementType;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, int index, String linkType, ";
  protected final String TEXT_37 = " elementType) {" + NL + "\t\tmyDst = dst;" + NL + "\t\tmyIndex = index;" + NL + "\t\tmyType = linkType;" + NL + "\t\tmyElementType = elementType;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, String linkType, ";
  protected final String TEXT_38 = " elementType) {" + NL + "\t\tthis(dst, 0, linkType, elementType);" + NL + "\t}" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshPhantoms() {" + NL + "\t";
  protected final String TEXT_39 = " phantomNodes = new ";
  protected final String TEXT_40 = "();" + NL + "\t";
  protected final String TEXT_41 = " phantomLinks = new ";
  protected final String TEXT_42 = "();" + NL + "\t";
  protected final String TEXT_43 = " modelElement = (";
  protected final String TEXT_44 = ") ((";
  protected final String TEXT_45 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_46 = " modelElementMetaclass = modelElement.eClass();" + NL + "\t";
  protected final String TEXT_47 = " eObject2ViewMap = new ";
  protected final String TEXT_48 = "();";
  protected final String TEXT_49 = NL + "\tif (-1 != modelElementMetaclass.getFeatureID(";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "())) {";
  protected final String TEXT_52 = NL + "\t\tint linkIndex = 0;" + NL + "\t\tfor (";
  protected final String TEXT_53 = " values = ";
  protected final String TEXT_54 = ".iterator(); values.hasNext(); linkIndex++) {" + NL + "\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_55 = NL + "\t\tEObject nextValue = ";
  protected final String TEXT_56 = ";";
  protected final String TEXT_57 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_58 = ".INSTANCE.getNodeVisualID(getDiagram(), nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_59 = " == nodeVID) {" + NL + "\t\t\tphantomNodes.add(nextValue);" + NL + "\t\t\tphantomLinks.add(new PhantomLinkInfo(nextValue";
  protected final String TEXT_60 = ", linkIndex";
  protected final String TEXT_61 = ", ";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = ", ";
  protected final String TEXT_64 = ".";
  protected final String TEXT_65 = "));" + NL + "\t\t}";
  protected final String TEXT_66 = NL + "\t\t}";
  protected final String TEXT_67 = NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\tfor (Iterator resourceObjects = modelElement.eResource().getContents().iterator(); resourceObjects.hasNext();) {" + NL + "\t\tEObject nextResourceEObject = (EObject) resourceObjects.next();" + NL + "\t\tif (nextResourceEObject != modelElement) {" + NL + "\t\t\tphantomNodes.add(nextResourceEObject);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\tfor (Iterator diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_70 = " nextView = (";
  protected final String TEXT_71 = ") diagramNodes.next();" + NL + "\t\tEObject nextViewElement = nextView.getElement();" + NL + "\t\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\t\tphantomNodes.remove(nextViewElement);" + NL + "\t\t\teObject2ViewMap.put(nextViewElement, nextView);" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\tfor (Iterator diagramEdges = getDiagram().getEdges().iterator(); diagramEdges.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_72 = " nextEdge = (";
  protected final String TEXT_73 = ") diagramEdges.next();" + NL + "\t\tif (nextEdge.getSource().getElement() != modelElement) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\tEObject target = nextEdge.getTarget().getElement();" + NL + "\t\tString linkType = nextEdge.getType();" + NL + "\t\tfor (Iterator linkInfos = phantomLinks.iterator(); linkInfos.hasNext();) {" + NL + "\t\t\tPhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfos.next();" + NL + "\t\t\tif (nextLinkInfo.myDst == target && nextLinkInfo.myType.equals(linkType)) {" + NL + "\t\t\t\tlinkInfos.remove();" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tcreatePhantomNodes(phantomNodes, eObject2ViewMap);" + NL + "\tcreatePhantomLinks(phantomLinks, eObject2ViewMap);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_74 = " nodes, ";
  protected final String TEXT_75 = " eObject2ViewMap) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_76 = " descriptors = new ";
  protected final String TEXT_77 = "();" + NL + "\tfor (Iterator elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\tEObject element = (EObject)elements.next();" + NL + "\t\tCreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_78 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_79 = " diagramEditPart = getDiagramEditPart();" + NL + "\t";
  protected final String TEXT_80 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_81 = " cc = new ";
  protected final String TEXT_82 = "(";
  protected final String TEXT_83 = ".AddCommand_Label);" + NL + "\t\tfor (Iterator descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_84 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_85 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_86 = " createCommand = new ";
  protected final String TEXT_87 = "(((";
  protected final String TEXT_88 = ") getHost()).getEditingDomain(), descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_89 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_90 = ".makeMutable(new ";
  protected final String TEXT_91 = "(((";
  protected final String TEXT_92 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_93 = " adapters = (";
  protected final String TEXT_94 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_95 = " createdView = (";
  protected final String TEXT_96 = ") ((";
  protected final String TEXT_97 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_98 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_99 = " linkInfos, ";
  protected final String TEXT_100 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_101 = " dstView = (";
  protected final String TEXT_102 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_103 = " targetEditPart = (";
  protected final String TEXT_104 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_105 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_106 = " adapter = new ";
  protected final String TEXT_107 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_108 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_109 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_110 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_111 = ".APPEND, false, ((";
  protected final String TEXT_112 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_113 = " ccr = new ";
  protected final String TEXT_114 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_115 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_116 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_117 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_118 = " viewAdapter = (";
  protected final String TEXT_119 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_120 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_121 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_122 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_123 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_124 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_125 = NL + NL + "}";
  protected final String TEXT_126 = NL;
d235 3
d260 2
a261 11
{
	Collection genNodes = genContainer.getChildNodes();
	GenNode containerNode;
	if (genContainer instanceof GenCompartment) {
		containerNode = ((GenCompartment) genContainer).getNode();
	} else if (genContainer instanceof GenNode) {
		containerNode = (GenNode) genContainer;
	} else {
		throw new IllegalArgumentException(String.valueOf(genContainer));
	}
	GenClass modelElementInterface = containerNode.getModelFacet().getMetaClass();
d267 2
d270 1
a270 1
    stringBuffer.append(TEXT_12);
d272 2
a273 2
if (genNodes.size() > 0) {
	String modelElementInterfaceName = importManager.getImportedName(modelElementInterface.getQualifiedInterfaceName());
a274 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(modelElementInterfaceName);
d276 1
a276 1
    stringBuffer.append(modelElementInterfaceName);
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d280 1
a280 13
    
}

    
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet.isPhantomElement()) {
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (childMetaFeature.isListType()) {

d282 1
a282 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d284 1
a284 1
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
a285 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_20);
d287 9
a295 1
	} else {
d297 2
a299 2
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_22);
d301 3
a303 1
	}
d305 2
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d310 1
a310 1
    stringBuffer.append(nextNode.getVisualID());
d312 1
a312 3
    
	if (childMetaFeature.isListType()) {

d314 1
a314 4
    
	}
}

d316 15
d332 11
a342 1
    stringBuffer.append(TEXT_28);
d344 3
a346 1
    stringBuffer.append(TEXT_29);
d348 10
a357 3
if (genContainer instanceof GenNode) {
	GenClass domainMetaclass = ((GenNode) genContainer).getModelFacet().getMetaClass();
	GenContainerBase genContainerBase = genContainer;
a358 1
    stringBuffer.append(TEXT_30);
d360 1
a360 3
boolean isDiagram = genContainerBase instanceof GenDiagram;

Collection phantomLinks = new ArrayList();
a369 10

if (phantomLinks.size() > 0 || isDiagram) {

    stringBuffer.append(TEXT_31);
    
	if (isDiagram) {

    stringBuffer.append(TEXT_32);
    
	}
d371 1
a371 1
	if (phantomLinks.size() > 0) {
d373 1
a373 28
    stringBuffer.append(TEXT_33);
    
	}

    stringBuffer.append(TEXT_34);
    
}

if (phantomLinks.size() > 0) {
	String domainMetaclassInterfaceName = importManager.getImportedName(domainMetaclass.getQualifiedInterfaceName());
	// Collecting all phantom elements
	Map genClass2Phantom = new LinkedHashMap();
	for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
		GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
		TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
		if (!nextModelFacet.isPhantomElement()) {
			continue;
		}
		genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
	}

    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_38);
d375 1
a375 1
    stringBuffer.append(TEXT_39);
a376 12
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(domainMetaclassInterfaceName);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(domainMetaclassInterfaceName);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d380 1
a380 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d382 1
a382 6
    
	for (Iterator it = phantomLinks.iterator(); it.hasNext();) {
		GenLink phantomLink = (GenLink) it.next();
		FeatureModelFacet linkFMF = (FeatureModelFacet) phantomLink.getModelFacet();
		GenFeature genFeature = linkFMF.getMetaFeature();

d384 1
a384 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d386 5
a390 1
    stringBuffer.append(genFeature.getFeatureAccessorName());
d393 11
a403 3
		GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
		if (phantomNode != null) {
			if (genFeature.isListType()) {
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d408 1
a408 1
    stringBuffer.append(getFeatureValueGetter("modelElement", genFeature, true, importManager));
d410 1
a410 3
    
			} else {

d412 1
a412 1
    stringBuffer.append(getFeatureValueGetter("modelElement", genFeature, true, importManager));
d414 1
a414 3
    
			}

d416 1
a416 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d418 1
a418 1
    stringBuffer.append(phantomNode.getVisualID());
d420 1
a420 1
    if (genFeature.isListType()) {
d422 1
a422 1
    }
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d426 1
a426 1
    stringBuffer.append(phantomLink.getUniqueIdentifier());
d428 2
a429 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d431 1
a431 1
    stringBuffer.append(phantomLink.getUniqueIdentifier());
d433 1
a433 3
    
			if (genFeature.isListType()) {

d435 1
a435 4
    
			}
		}

a436 5
    
	}
	
	if (isDiagram) {

d438 1
a438 3
    
	}

d440 2
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d445 1
a445 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a446 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
a447 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
a456 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d459 1
a459 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d461 1
a461 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d485 1
a485 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d491 1
a491 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d493 1
a493 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d497 1
a497 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d503 1
a503 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
a520 22
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_123);
d524 2
a525 11

if (isDiagram) {

    stringBuffer.append(TEXT_124);
    
}

    
}

    stringBuffer.append(TEXT_125);
d527 1
a527 1
    stringBuffer.append(TEXT_126);
@


1.13
log
@#127696 Templates should use new transaction API
In case of phantom nodes.
@
text
@d20 126
a145 123
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends CanonicalEditPolicy {";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_8 = " getSemanticChildrenList() {" + NL + "\t\t\tList result = new ";
  protected final String TEXT_9 = "();";
  protected final String TEXT_10 = NL + "\t\t\t";
  protected final String TEXT_11 = " modelElement = (";
  protected final String TEXT_12 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\t";
  protected final String TEXT_13 = " nextValue;" + NL + "\t\t\tint nodeVID;";
  protected final String TEXT_14 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_15 = " it = ";
  protected final String TEXT_16 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_17 = ") it.next();";
  protected final String TEXT_18 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_19 = ";";
  protected final String TEXT_20 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_22 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t}";
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\t";
  protected final String TEXT_25 = " domainModelElement = view.getElement();" + NL + "\t\t\treturn domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected void refreshSemantic() {" + NL + "\tsuper.refreshSemantic();";
  protected final String TEXT_29 = NL + "\trefreshReferenceOnlyConnections();";
  protected final String TEXT_30 = NL + "\trefreshPhantoms();";
  protected final String TEXT_31 = NL + "}";
  protected final String TEXT_32 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class PhantomLinkInfo {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject myDst;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int myIndex;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String myType;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_33 = " myElementType;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, int index, String linkType, ";
  protected final String TEXT_34 = " elementType) {" + NL + "\t\tmyDst = dst;" + NL + "\t\tmyIndex = index;" + NL + "\t\tmyType = linkType;" + NL + "\t\tmyElementType = elementType;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, String linkType, ";
  protected final String TEXT_35 = " elementType) {" + NL + "\t\tthis(dst, 0, linkType, elementType);" + NL + "\t}" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshPhantoms() {" + NL + "\t";
  protected final String TEXT_36 = " phantomNodes = new ";
  protected final String TEXT_37 = "();" + NL + "\t";
  protected final String TEXT_38 = " phantomLinks = new ";
  protected final String TEXT_39 = "();" + NL + "\t";
  protected final String TEXT_40 = " modelElement = (";
  protected final String TEXT_41 = ") ((";
  protected final String TEXT_42 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_43 = " modelElementMetaclass = modelElement.eClass();" + NL + "\t";
  protected final String TEXT_44 = " eObject2ViewMap = new ";
  protected final String TEXT_45 = "();";
  protected final String TEXT_46 = NL + "\tif (-1 != modelElementMetaclass.getFeatureID(";
  protected final String TEXT_47 = ".eINSTANCE.get";
  protected final String TEXT_48 = "())) {";
  protected final String TEXT_49 = NL + "\t\tint linkIndex = 0;" + NL + "\t\tfor (";
  protected final String TEXT_50 = " values = ";
  protected final String TEXT_51 = ".iterator(); values.hasNext(); linkIndex++) {" + NL + "\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_52 = NL + "\t\tEObject nextValue = ";
  protected final String TEXT_53 = ";";
  protected final String TEXT_54 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_55 = ".INSTANCE.getNodeVisualID(getDiagram(), nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_56 = " == nodeVID) {" + NL + "\t\t\tphantomNodes.add(nextValue);" + NL + "\t\t\tphantomLinks.add(new PhantomLinkInfo(nextValue";
  protected final String TEXT_57 = ", linkIndex";
  protected final String TEXT_58 = ", ";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = ", ";
  protected final String TEXT_61 = ".";
  protected final String TEXT_62 = "));" + NL + "\t\t}";
  protected final String TEXT_63 = NL + "\t\t}";
  protected final String TEXT_64 = NL + "\t}";
  protected final String TEXT_65 = NL + NL + "\tfor (Iterator resourceObjects = modelElement.eResource().getContents().iterator(); resourceObjects.hasNext();) {" + NL + "\t\tEObject nextResourceEObject = (EObject) resourceObjects.next();" + NL + "\t\tif (nextResourceEObject != modelElement) {" + NL + "\t\t\tphantomNodes.add(nextResourceEObject);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\tfor (Iterator diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_67 = " nextView = (";
  protected final String TEXT_68 = ") diagramNodes.next();" + NL + "\t\tEObject nextViewElement = nextView.getElement();" + NL + "\t\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\t\tphantomNodes.remove(nextViewElement);" + NL + "\t\t\teObject2ViewMap.put(nextViewElement, nextView);" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\tfor (Iterator diagramEdges = getDiagram().getEdges().iterator(); diagramEdges.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_69 = " nextEdge = (";
  protected final String TEXT_70 = ") diagramEdges.next();" + NL + "\t\tif (nextEdge.getSource().getElement() != modelElement) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\tEObject target = nextEdge.getTarget().getElement();" + NL + "\t\tString linkType = nextEdge.getType();" + NL + "\t\tfor (Iterator linkInfos = phantomLinks.iterator(); linkInfos.hasNext();) {" + NL + "\t\t\tPhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfos.next();" + NL + "\t\t\tif (nextLinkInfo.myDst == target && nextLinkInfo.myType.equals(linkType)) {" + NL + "\t\t\t\tlinkInfos.remove();" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tcreatePhantomNodes(phantomNodes, eObject2ViewMap);" + NL + "\tcreatePhantomLinks(phantomLinks, eObject2ViewMap);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_71 = " nodes, ";
  protected final String TEXT_72 = " eObject2ViewMap) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_73 = " descriptors = new ";
  protected final String TEXT_74 = "();" + NL + "\tfor (Iterator elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\tEObject element = (EObject)elements.next();" + NL + "\t\tCreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_75 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_76 = " diagramEditPart = getDiagramEditPart();" + NL + "\t";
  protected final String TEXT_77 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_78 = " cc = new ";
  protected final String TEXT_79 = "(";
  protected final String TEXT_80 = ".AddCommand_Label);" + NL + "\t\tfor (Iterator descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_81 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_82 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_83 = " createCommand = new ";
  protected final String TEXT_84 = "(((";
  protected final String TEXT_85 = ") getHost()).getEditingDomain(), descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_86 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_87 = ".makeMutable(new ";
  protected final String TEXT_88 = "(((";
  protected final String TEXT_89 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_90 = " adapters = (";
  protected final String TEXT_91 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_92 = " createdView = (";
  protected final String TEXT_93 = ") ((";
  protected final String TEXT_94 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_95 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_96 = " linkInfos, ";
  protected final String TEXT_97 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_98 = " dstView = (";
  protected final String TEXT_99 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_100 = " targetEditPart = (";
  protected final String TEXT_101 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_102 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_103 = " adapter = new ";
  protected final String TEXT_104 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_105 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_106 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_107 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_108 = ".APPEND, false, ((";
  protected final String TEXT_109 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_110 = " ccr = new ";
  protected final String TEXT_111 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_112 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_113 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_114 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_115 = " viewAdapter = (";
  protected final String TEXT_116 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_117 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_118 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_119 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_120 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_121 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_122 = NL + NL + "}";
  protected final String TEXT_123 = NL;
d251 9
d261 1
a261 1
    stringBuffer.append(TEXT_2);
d263 1
a263 1
    stringBuffer.append(TEXT_3);
d265 1
a265 1
    stringBuffer.append(TEXT_4);
d267 1
a267 1
    stringBuffer.append(TEXT_5);
d281 2
a282 2
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
d284 1
a284 1
    stringBuffer.append(TEXT_8);
d286 1
a286 1
    stringBuffer.append(TEXT_9);
d291 1
a291 1
    stringBuffer.append(TEXT_10);
d293 1
a293 1
    stringBuffer.append(TEXT_11);
d295 1
a295 1
    stringBuffer.append(TEXT_12);
d297 1
a297 1
    stringBuffer.append(TEXT_13);
d311 1
a311 1
    stringBuffer.append(TEXT_14);
d313 1
a313 1
    stringBuffer.append(TEXT_15);
d315 1
a315 1
    stringBuffer.append(TEXT_16);
d317 1
a317 1
    stringBuffer.append(TEXT_17);
d321 1
a321 1
    stringBuffer.append(TEXT_18);
d323 1
a323 1
    stringBuffer.append(TEXT_19);
d327 1
a327 1
    stringBuffer.append(TEXT_20);
d329 1
a329 1
    stringBuffer.append(TEXT_21);
d331 1
a331 1
    stringBuffer.append(TEXT_22);
d335 1
a335 1
    stringBuffer.append(TEXT_23);
d340 1
a340 1
    stringBuffer.append(TEXT_24);
d342 1
a342 1
    stringBuffer.append(TEXT_25);
d344 1
a344 1
    stringBuffer.append(TEXT_26);
d350 1
a350 1
    stringBuffer.append(TEXT_27);
d367 1
a367 1
    stringBuffer.append(TEXT_28);
d371 1
a371 1
    stringBuffer.append(TEXT_29);
d377 1
a377 1
    stringBuffer.append(TEXT_30);
d381 1
a381 1
    stringBuffer.append(TEXT_31);
d398 1
a398 1
    stringBuffer.append(TEXT_32);
d400 1
a400 1
    stringBuffer.append(TEXT_33);
d402 1
a402 1
    stringBuffer.append(TEXT_34);
d404 1
a404 1
    stringBuffer.append(TEXT_35);
d406 1
a406 1
    stringBuffer.append(TEXT_36);
d408 1
a408 1
    stringBuffer.append(TEXT_37);
d410 1
a410 1
    stringBuffer.append(TEXT_38);
d412 1
a412 1
    stringBuffer.append(TEXT_39);
d414 1
a414 1
    stringBuffer.append(TEXT_40);
d416 1
a416 1
    stringBuffer.append(TEXT_41);
d418 1
a418 1
    stringBuffer.append(TEXT_42);
d420 1
a420 1
    stringBuffer.append(TEXT_43);
d422 1
a422 1
    stringBuffer.append(TEXT_44);
d424 1
a424 1
    stringBuffer.append(TEXT_45);
d431 1
a431 1
    stringBuffer.append(TEXT_46);
d433 1
a433 1
    stringBuffer.append(TEXT_47);
d435 1
a435 1
    stringBuffer.append(TEXT_48);
d441 1
a441 1
    stringBuffer.append(TEXT_49);
d443 1
a443 1
    stringBuffer.append(TEXT_50);
d445 1
a445 1
    stringBuffer.append(TEXT_51);
d449 1
a449 1
    stringBuffer.append(TEXT_52);
d451 1
a451 1
    stringBuffer.append(TEXT_53);
d455 1
a455 1
    stringBuffer.append(TEXT_54);
d457 1
a457 1
    stringBuffer.append(TEXT_55);
d459 1
a459 1
    stringBuffer.append(TEXT_56);
d461 1
a461 1
    stringBuffer.append(TEXT_57);
d463 1
a463 1
    stringBuffer.append(TEXT_58);
d465 1
a465 1
    stringBuffer.append(TEXT_59);
d467 1
a467 1
    stringBuffer.append(TEXT_60);
d469 1
a469 1
    stringBuffer.append(TEXT_61);
d471 1
a471 1
    stringBuffer.append(TEXT_62);
d475 1
a475 1
    stringBuffer.append(TEXT_63);
d480 1
a480 1
    stringBuffer.append(TEXT_64);
d486 1
a486 1
    stringBuffer.append(TEXT_65);
d490 1
a490 1
    stringBuffer.append(TEXT_66);
d492 1
a492 1
    stringBuffer.append(TEXT_67);
d494 1
a494 1
    stringBuffer.append(TEXT_68);
d496 1
a496 1
    stringBuffer.append(TEXT_69);
d498 1
a498 1
    stringBuffer.append(TEXT_70);
d500 1
a500 1
    stringBuffer.append(TEXT_71);
d502 1
a502 1
    stringBuffer.append(TEXT_72);
d504 1
a504 1
    stringBuffer.append(TEXT_73);
d506 1
a506 1
    stringBuffer.append(TEXT_74);
d508 1
a508 1
    stringBuffer.append(TEXT_75);
d510 1
a510 1
    stringBuffer.append(TEXT_76);
d512 1
a512 1
    stringBuffer.append(TEXT_77);
d514 1
a514 1
    stringBuffer.append(TEXT_78);
d516 1
a516 1
    stringBuffer.append(TEXT_79);
d518 1
a518 1
    stringBuffer.append(TEXT_80);
d520 1
a520 1
    stringBuffer.append(TEXT_81);
d522 1
a522 1
    stringBuffer.append(TEXT_82);
d524 1
a524 1
    stringBuffer.append(TEXT_83);
d526 1
a526 1
    stringBuffer.append(TEXT_84);
d528 1
a528 1
    stringBuffer.append(TEXT_85);
d530 1
a530 1
    stringBuffer.append(TEXT_86);
d532 1
a532 1
    stringBuffer.append(TEXT_87);
d534 1
a534 1
    stringBuffer.append(TEXT_88);
d536 1
a536 1
    stringBuffer.append(TEXT_89);
d538 1
a538 1
    stringBuffer.append(TEXT_90);
a539 6
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d543 1
a543 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d545 1
a545 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d549 1
a549 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d551 1
a551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d553 1
a553 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d555 2
a557 2
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d559 1
a559 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d561 1
a561 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d563 1
a563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d565 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d567 1
a567 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d569 1
a569 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d573 6
d580 1
a580 1
    stringBuffer.append(TEXT_111);
d582 1
a582 1
    stringBuffer.append(TEXT_112);
d584 1
a584 1
    stringBuffer.append(TEXT_113);
d586 1
a586 1
    stringBuffer.append(TEXT_114);
d588 1
a588 1
    stringBuffer.append(TEXT_115);
d590 1
a590 1
    stringBuffer.append(TEXT_116);
d592 1
a592 1
    stringBuffer.append(TEXT_117);
d594 1
a594 1
    stringBuffer.append(TEXT_118);
d596 1
a596 1
    stringBuffer.append(TEXT_119);
d598 1
a598 1
    stringBuffer.append(TEXT_120);
d605 1
a605 1
    stringBuffer.append(TEXT_121);
d612 1
a612 1
    stringBuffer.append(TEXT_122);
d614 1
a614 1
    stringBuffer.append(TEXT_123);
@


1.12
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d103 40
a142 39
  protected final String TEXT_84 = "(descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_85 = "(cc.unwrap());" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_86 = ".makeMutable(new ";
  protected final String TEXT_87 = "(((";
  protected final String TEXT_88 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_89 = " adapters = (";
  protected final String TEXT_90 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_91 = " createdView = (";
  protected final String TEXT_92 = ") ((";
  protected final String TEXT_93 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_94 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_95 = " linkInfos, ";
  protected final String TEXT_96 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_97 = " dstView = (";
  protected final String TEXT_98 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_99 = " targetEditPart = (";
  protected final String TEXT_100 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_101 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_102 = " adapter = new ";
  protected final String TEXT_103 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_104 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_105 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_106 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_107 = ".APPEND, false, ((";
  protected final String TEXT_108 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_109 = " ccr = new ";
  protected final String TEXT_110 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_111 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_112 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_113 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_114 = " viewAdapter = (";
  protected final String TEXT_115 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_116 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_117 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_118 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_119 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_120 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_121 = NL + NL + "}";
  protected final String TEXT_122 = NL;
d515 2
d518 1
a518 1
    stringBuffer.append(TEXT_85);
d520 1
a520 1
    stringBuffer.append(TEXT_86);
d522 1
a522 1
    stringBuffer.append(TEXT_87);
a523 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d527 1
a527 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d531 2
d534 1
a534 1
    stringBuffer.append(TEXT_93);
d536 1
a536 1
    stringBuffer.append(TEXT_94);
d538 1
a538 1
    stringBuffer.append(TEXT_95);
a539 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d543 1
a543 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d549 1
a549 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d553 2
a555 2
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d559 2
d562 1
a562 1
    stringBuffer.append(TEXT_107);
a563 2
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d567 1
a567 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d571 2
a573 2
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d577 2
d580 1
a580 1
    stringBuffer.append(TEXT_116);
a581 2
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d585 2
d593 1
a593 1
    stringBuffer.append(TEXT_120);
d600 1
a600 1
    stringBuffer.append(TEXT_121);
d602 1
a602 1
    stringBuffer.append(TEXT_122);
@


1.11
log
@#126896
generating CanonicalEditPolicy for visualizing containment reference as diagram link.
@
text
@d143 1
a143 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d187 1
a187 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d230 1
a230 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d243 1
a243 1
GenChildContainer genContainer = (GenChildContainer) argument;
@


1.10
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d27 5
a31 5
  protected final String TEXT_8 = " getSemanticChildrenList() {" + NL + "\t\t\t";
  protected final String TEXT_9 = " modelElement = (";
  protected final String TEXT_10 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t\t\t";
d43 99
a141 3
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\tEObject domainModelElement = view.getElement();" + NL + "\t\t\treturn domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "}";
  protected final String TEXT_26 = NL;
d266 1
a266 1
	String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
d272 1
a272 1
    stringBuffer.append(modelElementInterfaceName);
a273 4
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_11);
d276 1
d278 4
d328 2
d331 267
a597 1
    stringBuffer.append(TEXT_25);
d599 1
a599 1
    stringBuffer.append(TEXT_26);
@


1.9
log
@ImportManager moved to oeg.common
@
text
@d195 3
@


1.8
log
@#124784
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.7
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d43 1
a43 1
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\treturn view.getElement() != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
@


1.6
log
@Correcting shouldDeleteView() method to call super implementation.
@
text
@d121 9
a129 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
@


1.5
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d43 1
a43 1
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\treturn view.getElement() != ((View) getHost().getModel()).getElement();" + NL + "\t\t}";
@


1.4
log
@Not finished: childnodes could be contained in node, not only in compartment.
@
text
@d29 17
a45 20
  protected final String TEXT_10 = ") ((View) getHost().getModel()).getElement();";
  protected final String TEXT_11 = NL + "\t\t\tList result = new ";
  protected final String TEXT_12 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_13 = " it = getViewChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tView nextView = (View) it.next();" + NL + "\t\t\t\tif (nextView.getElement() == modelElement) {" + NL + "\t\t\t\t\tresult.add(modelElement);" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t\t\t";
  protected final String TEXT_16 = " nextValue;" + NL + "\t\t\tint nodeVID;";
  protected final String TEXT_17 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_18 = " it = ";
  protected final String TEXT_19 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_20 = ") it.next();";
  protected final String TEXT_21 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_22 = ";";
  protected final String TEXT_23 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_24 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_25 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t}";
  protected final String TEXT_27 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "}";
  protected final String TEXT_29 = NL;
d174 1
a174 8
    
/**
 * [++]
 * This code was added to sate visual element without underlying semanti one
 * see http://www.eclipse.org/newsportal/article.php?id=536&group=eclipse.technology.gmf#536
 * for the details
 */

a175 10
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_13);
    
/**
 * [--]
 */

    stringBuffer.append(TEXT_14);
d179 1
a179 1
    stringBuffer.append(TEXT_15);
d181 1
a181 1
    stringBuffer.append(TEXT_16);
d192 1
a192 1
    stringBuffer.append(TEXT_17);
d194 1
a194 1
    stringBuffer.append(TEXT_18);
d196 1
a196 1
    stringBuffer.append(TEXT_19);
d198 1
a198 1
    stringBuffer.append(TEXT_20);
d202 1
a202 1
    stringBuffer.append(TEXT_21);
d204 1
a204 1
    stringBuffer.append(TEXT_22);
d208 1
a208 1
    stringBuffer.append(TEXT_23);
d210 1
a210 1
    stringBuffer.append(TEXT_24);
d212 1
a212 1
    stringBuffer.append(TEXT_25);
d216 1
a216 1
    stringBuffer.append(TEXT_26);
d221 1
a221 1
    stringBuffer.append(TEXT_27);
d223 1
a223 1
    stringBuffer.append(TEXT_28);
d225 1
a225 1
    stringBuffer.append(TEXT_29);
@


1.3
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d27 1
a27 1
  protected final String TEXT_8 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
d29 20
a48 17
  protected final String TEXT_10 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_11 = "();" + NL + "\t\t\t";
  protected final String TEXT_12 = " nextValue;";
  protected final String TEXT_13 = NL + "\t\t\tint nodeVID;";
  protected final String TEXT_14 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_15 = " it = ";
  protected final String TEXT_16 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_17 = ") it.next();";
  protected final String TEXT_18 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_19 = ";";
  protected final String TEXT_20 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_22 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t}";
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "}";
  protected final String TEXT_26 = NL;
d177 9
a186 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d188 8
d199 3
a201 1
    stringBuffer.append(TEXT_13);
d212 1
a212 1
    stringBuffer.append(TEXT_14);
d214 1
a214 1
    stringBuffer.append(TEXT_15);
d216 1
a216 1
    stringBuffer.append(TEXT_16);
d218 1
a218 1
    stringBuffer.append(TEXT_17);
d222 1
a222 1
    stringBuffer.append(TEXT_18);
d224 1
a224 1
    stringBuffer.append(TEXT_19);
d228 1
a228 1
    stringBuffer.append(TEXT_20);
d230 1
a230 1
    stringBuffer.append(TEXT_21);
d232 1
a232 1
    stringBuffer.append(TEXT_22);
d236 1
a236 1
    stringBuffer.append(TEXT_23);
d241 1
a241 1
    stringBuffer.append(TEXT_24);
d243 1
a243 1
    stringBuffer.append(TEXT_25);
d245 1
a245 1
    stringBuffer.append(TEXT_26);
@


1.2
log
@Copilation error corrected in case of multiplicity = 1
@
text
@d128 9
@


1.1
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d32 14
a45 13
  protected final String TEXT_13 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_14 = " it = ";
  protected final String TEXT_15 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_16 = ") it.next();";
  protected final String TEXT_17 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_18 = ";";
  protected final String TEXT_19 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_20 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_21 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\t}";
  protected final String TEXT_23 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getFactoryHint(IAdaptable elementAdapter) {" + NL + "\t\treturn \"\";" + NL + "\t}" + NL + "}";
  protected final String TEXT_25 = NL;
d170 7
d183 1
a183 1
    stringBuffer.append(TEXT_13);
d185 1
a185 1
    stringBuffer.append(TEXT_14);
d187 1
a187 1
    stringBuffer.append(TEXT_15);
d189 1
a189 1
    stringBuffer.append(TEXT_16);
d193 1
a193 1
    stringBuffer.append(TEXT_17);
d195 1
a195 1
    stringBuffer.append(TEXT_18);
d199 1
a199 1
    stringBuffer.append(TEXT_19);
d201 1
a201 1
    stringBuffer.append(TEXT_20);
d203 1
a203 1
    stringBuffer.append(TEXT_21);
d207 1
a207 1
    stringBuffer.append(TEXT_22);
d212 1
a212 1
    stringBuffer.append(TEXT_23);
d214 1
a214 1
    stringBuffer.append(TEXT_24);
d216 1
a216 1
    stringBuffer.append(TEXT_25);
@

