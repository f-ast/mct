head	1.47;
access;
symbols
	v20081022-1925:1.47
	v20081015-1925:1.47
	v20081008-1925:1.47
	v20081001-1925:1.47
	v20080924-1925:1.47
	v20080917-1925:1.47
	v20080911-1728:1.47
	v20080910-1520:1.47
	v20080903-1520:1.47
	v20080827-1520:1.47
	v20080813-1520:1.47
	v20080806-1520:1.47
	v20070202-0200:1.41
	v20070103-0300:1.46
	M4_20:1.46
	v20061222-1800:1.46
	v20061218-1200:1.46
	v20061214-0000:1.46
	v20061120-1300:1.42
	M3_20:1.42
	v20061117-0800:1.42
	v20061027-1200:1.41
	v20061020-1000:1.41
	v20061013-1330:1.42
	v20060919-0800:1.41
	v20060907-1100:1.41
	M1_20:1.41
	v20060904-1500:1.41
	v20060824-1600:1.41
	v20060817-1500:1.41
	v20060728-0500:1.41
	v20060713-1700:1.41
	R1_0_maintenance:1.41.0.2
	R1_0:1.41
	v20060627-1200:1.41
	v20060626-1420:1.40
	v20060620-0400:1.39
	v20060616-1400:1.39
	v20060616-1200:1.39
	v20060609-1400:1.36
	v20060531-1730:1.33
	v20060530-1930:1.32
	v20060526-1200:1.31
	v20060519-1300:1.29
	v20060519-0800:1.29
	v20060512-1000:1.26
	I20060512-1000:1.26
	I20060505-1400:1.26
	I20060428-1300:1.26
	I20060424-0500:1.25
	I20060424-0300:1.25
	M6_10:1.24
	I20060407-1200:1.21
	I20060331-1000:1.19
	I20060324-0300:1.19
	I20060317-1300:1.19
	I20060317-1200:1.19
	I20060316-1300:1.19
	I20060309-1300:1.19
	M5_10:1.18
	S20060303-1600:1.18
	I20060227-1730:1.17
	I20060216-1945:1.17
	I20060210-1715:1.13
	I20060209-1815:1.13
	I20060203-0830:1.9
	I20060202-1415:1.9
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.47
date	2007.01.25.16.57.54;	author ashatalin;	state dead;
branches;
next	1.46;
commitid	271945b8e1904567;

1.46
date	2006.12.06.17.21.00;	author ashatalin;	state Exp;
branches;
next	1.45;
commitid	5efc4576fbfb4567;

1.45
date	2006.11.30.18.19.30;	author ashatalin;	state Exp;
branches;
next	1.44;
commitid	5afc456f20b14567;

1.44
date	2006.11.29.21.08.12;	author ashatalin;	state Exp;
branches;
next	1.43;
commitid	29eb456df6ba4567;

1.43
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.42;
commitid	5f734567714f4567;

1.42
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.41;

1.41
date	2006.06.27.14.47.50;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.06.22.13.55.20;	author dstadnik;	state Exp;
branches;
next	1.39;

1.39
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.38;

1.38
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches;
next	1.37;

1.37
date	2006.06.13.12.53.34;	author radvorak;	state Exp;
branches;
next	1.36;

1.36
date	2006.06.02.11.53.10;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.31.14.15.57;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.25.14.22.35;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.25.09.33.25;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.16.11.58.29;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.16.10.02.45;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.21;

1.21
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.07.14.31.35;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.03.08.28.27;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.16.21.32.50;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.14.13.58.45;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.13.19.21.42;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.13.17.20.07;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.09.16.16.00;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.08.00.17.45;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.02.14.56.58;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.01.16.49.56;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.31.19.02.08;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.29.18.33.25;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.25.12.21.56;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.11.18.52.48;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.47
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import java.util.*;

public class ItemSemanticEditPolicyGenerator {
 
  protected static String nl;
  public static synchronized ItemSemanticEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ItemSemanticEditPolicyGenerator result = new ItemSemanticEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tObject editHelperContext = completedRequest.getEditHelperContext();" + NL + "\t\tif (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {" + NL + "\t\t\t// no semantic commands are provided for pure design elements" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tif (editHelperContext == null) {" + NL + "\t\t\teditHelperContext = ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t\t}" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);" + NL + "\t\tif (elementType == ElementTypeRegistry.getInstance().getType(\"org.eclipse.gmf.runtime.emf.type.core.default\")) { //$NON-NLS-1$ ";
  protected final String TEXT_8 = NL + "\t\t\telementType = null;" + NL + "\t\t}" + NL + "\t\tCommand epCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (epCommand != null) {" + NL + "\t\t\tICommand command = epCommand instanceof ICommandProxy ? ((ICommandProxy) epCommand).getICommand() : new CommandProxy(epCommand);" + NL + "\t\t\tcompletedRequest.setParameter(";
  protected final String TEXT_9 = ".EDIT_POLICY_COMMAND, command);" + NL + "\t\t}" + NL + "\t\tCommand ehCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand command = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\tif (!(command instanceof CompositeTransactionalCommand)) {" + NL + "\t\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\t\tcommand = new CompositeTransactionalCommand(editingDomain, null).compose(command);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tehCommand = new ICommandProxy(command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\tCommand deleteViewCommand = new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t\t\t\tehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn ehCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\treturn new ICommandProxy(cmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_10 = " {";
  protected final String TEXT_11 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"";
  protected final String TEXT_12 = "\"; //$NON-NLS-1$";
  protected final String TEXT_13 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_14 = " ";
  protected final String TEXT_15 = "_SourceExpression;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tstatic {";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = " ";
  protected final String TEXT_18 = " = new ";
  protected final String TEXT_19 = "(3);";
  protected final String TEXT_20 = ".put(\"";
  protected final String TEXT_21 = "\", ";
  protected final String TEXT_22 = "); //$NON-NLS-1$";
  protected final String TEXT_23 = NL + "\t\t\t";
  protected final String TEXT_24 = "_SourceExpression = ";
  protected final String TEXT_25 = "null";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = "(";
  protected final String TEXT_28 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_29 = ", ";
  protected final String TEXT_30 = ")";
  protected final String TEXT_31 = ".";
  protected final String TEXT_32 = "(";
  protected final String TEXT_33 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_34 = ")";
  protected final String TEXT_35 = "new ";
  protected final String TEXT_36 = "(";
  protected final String TEXT_37 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_38 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_39 = " self = (";
  protected final String TEXT_40 = ")context;";
  protected final String TEXT_41 = "\t" + NL + "\t\t";
  protected final String TEXT_42 = " ";
  protected final String TEXT_43 = " = (";
  protected final String TEXT_44 = ")env.get(\"";
  protected final String TEXT_45 = "\"); //$NON-NLS-1$";
  protected final String TEXT_46 = NL + "\t\treturn ";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = "(self";
  protected final String TEXT_49 = ", ";
  protected final String TEXT_50 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_51 = NL + ";" + NL + "\t\t}";
  protected final String TEXT_52 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_53 = " ";
  protected final String TEXT_54 = "_TargetExpression;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tstatic {";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = " ";
  protected final String TEXT_57 = " = new ";
  protected final String TEXT_58 = "(3);";
  protected final String TEXT_59 = ".put(\"";
  protected final String TEXT_60 = "\", ";
  protected final String TEXT_61 = "); //$NON-NLS-1$";
  protected final String TEXT_62 = NL + "\t\t\t";
  protected final String TEXT_63 = "_TargetExpression = ";
  protected final String TEXT_64 = "null";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_68 = ", ";
  protected final String TEXT_69 = ")";
  protected final String TEXT_70 = ".";
  protected final String TEXT_71 = "(";
  protected final String TEXT_72 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_73 = ")";
  protected final String TEXT_74 = "new ";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_77 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_78 = " self = (";
  protected final String TEXT_79 = ")context;";
  protected final String TEXT_80 = "\t" + NL + "\t\t";
  protected final String TEXT_81 = " ";
  protected final String TEXT_82 = " = (";
  protected final String TEXT_83 = ")env.get(\"";
  protected final String TEXT_84 = "\"); //$NON-NLS-1$";
  protected final String TEXT_85 = NL + "\t\treturn ";
  protected final String TEXT_86 = ".";
  protected final String TEXT_87 = "(self";
  protected final String TEXT_88 = ", ";
  protected final String TEXT_89 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_90 = NL + ";" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static boolean canCreate";
  protected final String TEXT_92 = "(";
  protected final String TEXT_93 = " container, ";
  protected final String TEXT_94 = " source, ";
  protected final String TEXT_95 = " target) {";
  protected final String TEXT_96 = NL + "\t\t\tif (";
  protected final String TEXT_97 = " != null) {";
  protected final String TEXT_98 = NL + "\t\t\t\tif (";
  protected final String TEXT_99 = " != null) {";
  protected final String TEXT_100 = NL + "\t\t\t\tif (";
  protected final String TEXT_101 = ".size() >= ";
  protected final String TEXT_102 = ") {";
  protected final String TEXT_103 = NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}";
  protected final String TEXT_104 = NL + "\t\t\t\tif (";
  protected final String TEXT_105 = " != null) {";
  protected final String TEXT_106 = NL + "\t\t\t\tif (";
  protected final String TEXT_107 = ".size() >= ";
  protected final String TEXT_108 = ") {";
  protected final String TEXT_109 = NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}";
  protected final String TEXT_110 = NL + "\t\t\t}";
  protected final String TEXT_111 = NL + "\t\t\tif (source != null) {";
  protected final String TEXT_112 = NL + "\t\t\t\tif (";
  protected final String TEXT_113 = " != null) {";
  protected final String TEXT_114 = NL + "\t\t\t\tif (";
  protected final String TEXT_115 = ".size() >= ";
  protected final String TEXT_116 = " || ";
  protected final String TEXT_117 = ".contains(target)) {";
  protected final String TEXT_118 = NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}";
  protected final String TEXT_119 = NL + "\t\t\t\tif (";
  protected final String TEXT_120 = ".contains(target)) {" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}";
  protected final String TEXT_121 = NL + "\t\t\t}";
  protected final String TEXT_122 = NL + "\t\t\tif (!";
  protected final String TEXT_123 = ".";
  protected final String TEXT_124 = "(source, target).booleanValue()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_125 = NL + "\t\t\tif (!evaluate(";
  protected final String TEXT_126 = "_SourceExpression, source, target, false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_127 = NL + "\t\t\tif (!";
  protected final String TEXT_128 = ".";
  protected final String TEXT_129 = "(target, source).booleanValue()) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_130 = NL + "\t\t\tif (!evaluate(";
  protected final String TEXT_131 = "_TargetExpression, target, source, true)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_132 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_133 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_134 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\tif (sourceEnd == null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_135 = " evalEnv = ";
  protected final String TEXT_136 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_137 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_138 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static class ";
  protected final String TEXT_139 = " {";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_142 = " ";
  protected final String TEXT_143 = "(";
  protected final String TEXT_144 = " self";
  protected final String TEXT_145 = ", ";
  protected final String TEXT_146 = " ";
  protected final String TEXT_147 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_148 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_149 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_152 = " ";
  protected final String TEXT_153 = "(";
  protected final String TEXT_154 = " self";
  protected final String TEXT_155 = ", ";
  protected final String TEXT_156 = " ";
  protected final String TEXT_157 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_158 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_159 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_160 = NL + "\t\t} // ";
  protected final String TEXT_161 = "\t" + NL + "\t}" + NL + "" + NL + "}\t";

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
final String javaExprContainer = "JavaConstraints";
final String oppositeEndVarName = "oppositeEnd";
importManager.registerInnerClass(javaExprContainer);
importManager.registerInnerClass(genDiagram.getLinkCreationConstraintsClassName());

    stringBuffer.append(TEXT_5);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getBaseItemSemanticEditPolicyClassName());
    stringBuffer.append(TEXT_7);
     /*
			< % = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()) % >.getInstance().logInfo("Failed to get element type for " + editHelperContext); / / $NON-NLS-1$ */ 
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseEditHelperQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_10);
    final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
boolean hasJavaConstraints = false;
boolean hasOCLConstraints = false;
if (expressionProviders != null) {
    stringBuffer.append(TEXT_11);
    stringBuffer.append(oppositeEndVarName);
    stringBuffer.append(TEXT_12);
    	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLink nextLink = (GenLink) it.next();
		GenLinkConstraints linkConstraints = nextLink.getCreationConstraints();
		if (linkConstraints == null || !linkConstraints.isValid()) {
			continue;
		}
		String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
		String __javaOperationContainer = javaExprContainer;
		String __outEnvVarName = "env";
		if (linkConstraints.getSourceEnd() != null) {
			if (expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
				hasJavaConstraints = true;
			} else if (expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenExpressionInterpreter) {
				hasOCLConstraints = true;
				Map __exprEnvVariables = new java.util.HashMap();
				GenClassifier __genExprContext = linkConstraints.getSourceEndContextClass();
				ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
				__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getTargetEndContextClass());
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_15);
    
{ /*begin the scope*/
/*
java.util.Map __exprEnvVariables;
String __outEnvVarName;
ValueExpression __genValueExpression;
*/
if(!__exprEnvVariables.isEmpty() && genDiagram.getEditorGen().getExpressionProviders() != null && 
	genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) 
	instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {	

    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_19);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String nextVariableName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
		String varTypeEClassifierAccess = nextVariableType.getGenPackage().getQualifiedPackageInterfaceName() + ".eINSTANCE.get" + nextVariableType.getClassifierAccessorName()+"()";			


    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_22);
    	
	} 
}

    
} /*end the scope*/

    stringBuffer.append(TEXT_23);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_24);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_25);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(__bodyLiteral);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_30);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(__bodyLiteral);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_34);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_35);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_40);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_45);
    		} 
    stringBuffer.append(TEXT_46);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_47);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_48);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_49);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_50);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_51);
    			}
		}
		if (linkConstraints.getTargetEnd() != null) {
			if (expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenJavaExpressionProvider) {
				hasJavaConstraints = true;
			} else if (expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenExpressionInterpreter) {
				hasOCLConstraints = true;
				Map __exprEnvVariables = new java.util.HashMap();
				GenClassifier __genExprContext = linkConstraints.getTargetEndContextClass();
				ValueExpression __genValueExpression = linkConstraints.getTargetEnd();			
				__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getSourceEndContextClass());
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_54);
    
{ /*begin the scope*/
/*
java.util.Map __exprEnvVariables;
String __outEnvVarName;
ValueExpression __genValueExpression;
*/
if(!__exprEnvVariables.isEmpty() && genDiagram.getEditorGen().getExpressionProviders() != null && 
	genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) 
	instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {	

    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_58);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String nextVariableName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
		String varTypeEClassifierAccess = nextVariableType.getGenPackage().getQualifiedPackageInterfaceName() + ".eINSTANCE.get" + nextVariableType.getClassifierAccessorName()+"()";			


    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_61);
    	
	} 
}

    
} /*end the scope*/

    stringBuffer.append(TEXT_62);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_63);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_64);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(__bodyLiteral);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_69);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(__bodyLiteral);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_73);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_74);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_79);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_84);
    		} 
    stringBuffer.append(TEXT_85);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_86);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_87);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_88);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_89);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_90);
    			}
		}
	}
}
	
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	boolean separateContainer;
	GenClass outgoingClass;
	GenClass incomingClass;
	GenClass containerClass = null;
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature sourceFeature = modelFacet.getSourceMetaFeature();
		separateContainer = sourceFeature != null;
		if (separateContainer) {
			outgoingClass = sourceFeature.getTypeGenClass();
			containerClass = containmentFeature.getGenClass();
		} else {
			outgoingClass = containmentFeature.getGenClass();
		}
		incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
	} else if (nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
		outgoingClass = metaFeature.getGenClass();
		incomingClass = metaFeature.getTypeGenClass();
		separateContainer = false;
	} else {
		continue;
	}
    stringBuffer.append(TEXT_91);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_92);
    if (separateContainer) {
    stringBuffer.append(importManager.getImportedName(containerClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_93);
    }
    stringBuffer.append(importManager.getImportedName(outgoingClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(incomingClass.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_95);
    	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature containmentFeature = modelFacet.getContainmentMetaFeature();
		GenFeature childFeature = modelFacet.getChildMetaFeature();

		int upperContainmentBound = containmentFeature.getEcoreFeature().getUpperBound();
		int upperChildBound = childFeature.getEcoreFeature().getUpperBound();
		boolean checkChildFeatureUpperBound = !childFeature.equals(containmentFeature) && upperChildBound > 0;
		String containerVarName = separateContainer ? "container" : "source";
		if (upperContainmentBound > 0 || checkChildFeatureUpperBound) {
    stringBuffer.append(TEXT_96);
    stringBuffer.append(containerVarName);
    stringBuffer.append(TEXT_97);
    /* check that containment feature is not set / has capacity for the new element */ 
			if (upperContainmentBound > 0) {
				if (upperContainmentBound == 1) {
    stringBuffer.append(TEXT_98);
    stringBuffer.append(getFeatureValueGetter(containerVarName, containmentFeature, false, importManager));
    stringBuffer.append(TEXT_99);
    				} else {
    stringBuffer.append(TEXT_100);
    stringBuffer.append(getFeatureValueGetter(containerVarName, containmentFeature, false, importManager));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(upperContainmentBound);
    stringBuffer.append(TEXT_102);
    				}
    stringBuffer.append(TEXT_103);
    			}
			if (checkChildFeatureUpperBound) {
				if (upperChildBound == 1) {
    stringBuffer.append(TEXT_104);
    stringBuffer.append(getFeatureValueGetter(containerVarName, childFeature, false, importManager));
    stringBuffer.append(TEXT_105);
    				} else {
    stringBuffer.append(TEXT_106);
    stringBuffer.append(getFeatureValueGetter(containerVarName, childFeature, false, importManager));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(upperChildBound);
    stringBuffer.append(TEXT_108);
    				}
    stringBuffer.append(TEXT_109);
    			}
    stringBuffer.append(TEXT_110);
    		}		
	} else { /* nextLink.getModelFacet() instanceof FeatureLinkModelFacet */
		GenFeature metaFeature = ((FeatureLinkModelFacet) nextLink.getModelFacet()).getMetaFeature();
		int upperBound = metaFeature.getEcoreFeature().getUpperBound();
    stringBuffer.append(TEXT_111);
     /* check that feature is not set / has capacity for the new value / is unique */
		if (upperBound > 0) {
			if (upperBound == 1) {
    stringBuffer.append(TEXT_112);
    stringBuffer.append(getFeatureValueGetter("source", metaFeature, false, importManager));
    stringBuffer.append(TEXT_113);
    			} else {
    stringBuffer.append(TEXT_114);
    stringBuffer.append(getFeatureValueGetter("source", metaFeature, false, importManager));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(upperBound);
    stringBuffer.append(TEXT_116);
    stringBuffer.append(getFeatureValueGetter("source", metaFeature, false, importManager));
    stringBuffer.append(TEXT_117);
    			}
    stringBuffer.append(TEXT_118);
    		} else {
    stringBuffer.append(TEXT_119);
    stringBuffer.append(getFeatureValueGetter("source", metaFeature, false, importManager));
    stringBuffer.append(TEXT_120);
    		}
    stringBuffer.append(TEXT_121);
    	}
	
	if (expressionProviders != null && nextLink.getCreationConstraints() != null && nextLink.getCreationConstraints().isValid()) {
		GenLinkConstraints constraints = nextLink.getCreationConstraints();
		if (constraints.getSourceEnd() != null) {
			ValueExpression sourceExpression = constraints.getSourceEnd();
			GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(sourceExpression);
			if (expressionProvider instanceof GenJavaExpressionProvider) {
    stringBuffer.append(TEXT_122);
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(((GenJavaExpressionProvider) expressionProvider).getOperationName(sourceExpression));
    stringBuffer.append(TEXT_124);
    			} else if (expressionProvider instanceof GenExpressionInterpreter) {
    stringBuffer.append(TEXT_125);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_126);
    			}
		}
		if (constraints.getTargetEnd() != null) {
			ValueExpression targetExpression = constraints.getTargetEnd();
			GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(targetExpression);
			if (expressionProvider instanceof GenJavaExpressionProvider) {
    stringBuffer.append(TEXT_127);
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_128);
    stringBuffer.append(((GenJavaExpressionProvider) expressionProvider).getOperationName(targetExpression));
    stringBuffer.append(TEXT_129);
    			} else if (expressionProvider instanceof GenExpressionInterpreter) {
    stringBuffer.append(TEXT_130);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_131);
    			}
		}
	}
    stringBuffer.append(TEXT_132);
    }
	
if (expressionProviders != null && hasOCLConstraints) {
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_137);
    }
	
if(expressionProviders != null && hasJavaConstraints) {

    stringBuffer.append(TEXT_138);
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_139);
    
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;
		String __genExprResultType = "java.lang.Boolean";
		Map __exprEnvVariables = new java.util.HashMap();
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {				
			__exprEnvVariables.put(oppositeEndVarName, targetContext);

    stringBuffer.append(TEXT_140);
    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_144);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_147);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_148);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_149);
    
} /* end of GenJavaExpressionProvider */

    
		}
		__genValueExpression = linkConstraints.getTargetEnd();
		if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {		
			__genExprContext = targetContext;
			__exprEnvVariables.put(oppositeEndVarName, srcContext);

    stringBuffer.append(TEXT_150);
    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_154);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_157);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_158);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_159);
    
} /* end of GenJavaExpressionProvider */

    
		}
	} /*java constraints iteration*/

    stringBuffer.append(TEXT_160);
    stringBuffer.append(javaExprContainer);
    
} /* end of hasJavaConstraints */

    stringBuffer.append(TEXT_161);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}@


1.46
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@@


1.45
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d141 24
a164 24
  protected final String TEXT_122 = NL + "\t\t\tif (!evaluate(";
  protected final String TEXT_123 = "_SourceExpression, source, target, false)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_124 = NL + "\t\t\tif (!evaluate(";
  protected final String TEXT_125 = "_TargetExpression, target, source, true)) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_126 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_127 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_128 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\tif (sourceEnd == null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_129 = " evalEnv = ";
  protected final String TEXT_130 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_131 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_132 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static class ";
  protected final String TEXT_133 = " {";
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_136 = " ";
  protected final String TEXT_137 = "(";
  protected final String TEXT_138 = " self";
  protected final String TEXT_139 = ", ";
  protected final String TEXT_140 = " ";
  protected final String TEXT_141 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_142 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_143 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
d166 15
a180 9
  protected final String TEXT_147 = "(";
  protected final String TEXT_148 = " self";
  protected final String TEXT_149 = ", ";
  protected final String TEXT_150 = " ";
  protected final String TEXT_151 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_152 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_153 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_154 = NL + "\t\t} // ";
  protected final String TEXT_155 = "\t" + NL + "\t}" + NL + "" + NL + "}\t";
d322 1
d337 1
a337 1
			if (!hasJavaConstraints && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
d339 6
a344 5
			}
			Map __exprEnvVariables = new java.util.HashMap();
			GenClassifier __genExprContext = linkConstraints.getSourceEndContextClass();
			ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
			__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getTargetEndContextClass());
d488 2
a489 1
    		}
d491 1
a491 1
			if (!hasJavaConstraints && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) {
d493 6
a498 5
			}
			Map __exprEnvVariables = new java.util.HashMap();
			GenClassifier __genExprContext = linkConstraints.getTargetEndContextClass();
			ValueExpression __genValueExpression = linkConstraints.getTargetEnd();			
			__exprEnvVariables.put(oppositeEndVarName, linkConstraints.getSourceEndContextClass());
d642 2
a643 1
    		}
d759 3
d763 6
d770 3
a772 2
    stringBuffer.append(TEXT_123);
    		}
d774 10
a783 1
    stringBuffer.append(TEXT_124);
d785 3
a787 2
    stringBuffer.append(TEXT_125);
    		}
d789 1
a789 1
    stringBuffer.append(TEXT_126);
d792 1
a792 1
if (expressionProviders != null) {
d794 1
a794 1
    stringBuffer.append(TEXT_127);
d796 1
a796 1
    stringBuffer.append(TEXT_128);
d798 1
a798 1
    stringBuffer.append(TEXT_129);
d800 1
a800 1
    stringBuffer.append(TEXT_130);
d802 1
a802 1
    stringBuffer.append(TEXT_131);
d807 1
a807 1
    stringBuffer.append(TEXT_132);
d809 1
a809 1
    stringBuffer.append(TEXT_133);
d824 1
a824 1
    stringBuffer.append(TEXT_134);
d845 1
a845 1
    stringBuffer.append(TEXT_135);
d847 1
a847 1
    stringBuffer.append(TEXT_136);
d849 1
a849 1
    stringBuffer.append(TEXT_137);
d851 1
a851 1
    stringBuffer.append(TEXT_138);
d859 1
a859 1
    stringBuffer.append(TEXT_139);
d861 1
a861 1
    stringBuffer.append(TEXT_140);
d865 1
a865 1
    stringBuffer.append(TEXT_141);
d867 1
a867 1
    stringBuffer.append(TEXT_142);
d869 1
a869 1
    stringBuffer.append(TEXT_143);
d880 1
a880 1
    stringBuffer.append(TEXT_144);
d901 1
a901 1
    stringBuffer.append(TEXT_145);
d903 1
a903 1
    stringBuffer.append(TEXT_146);
d905 1
a905 1
    stringBuffer.append(TEXT_147);
d907 1
a907 1
    stringBuffer.append(TEXT_148);
d915 1
a915 1
    stringBuffer.append(TEXT_149);
d917 1
a917 1
    stringBuffer.append(TEXT_150);
d921 1
a921 1
    stringBuffer.append(TEXT_151);
d923 1
a923 1
    stringBuffer.append(TEXT_152);
d925 1
a925 1
    stringBuffer.append(TEXT_153);
d933 1
a933 1
    stringBuffer.append(TEXT_154);
d938 1
a938 1
    stringBuffer.append(TEXT_155);
@


1.44
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d112 63
a174 38
  protected final String TEXT_93 = " req, boolean isBackDirected) {" + NL + "\t\t\tboolean canCreate = true;";
  protected final String TEXT_94 = NL + "\t\t\tEObject source = req.getSource();" + NL + "\t\t\tEObject target = req.getTarget();" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_95 = " sourceConstraint = isBackDirected ? ";
  protected final String TEXT_96 = " : ";
  protected final String TEXT_97 = ";" + NL + "\t\t\t";
  protected final String TEXT_98 = " targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? ";
  protected final String TEXT_99 = " : ";
  protected final String TEXT_100 = ";" + NL + "\t\t\t}" + NL + "\t\t\tcanCreate &= sourceConstraint == null || evaluate(sourceConstraint, source, target, false);" + NL + "\t\t\tcanCreate &= targetConstraint == null || evaluate(targetConstraint, target, source, true);";
  protected final String TEXT_101 = NL + "\t\t\treturn canCreate;" + NL + "\t\t}";
  protected final String TEXT_102 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_103 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_104 = " evalEnv = ";
  protected final String TEXT_105 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_106 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_107 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static class ";
  protected final String TEXT_108 = " {";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_111 = " ";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = " self";
  protected final String TEXT_114 = ", ";
  protected final String TEXT_115 = " ";
  protected final String TEXT_116 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_117 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_118 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_121 = " ";
  protected final String TEXT_122 = "(";
  protected final String TEXT_123 = " self";
  protected final String TEXT_124 = ", ";
  protected final String TEXT_125 = " ";
  protected final String TEXT_126 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_127 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_128 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_129 = NL + "\t\t} // ";
  protected final String TEXT_130 = "\t" + NL + "\t}" + NL + "" + NL + "}\t";
d638 24
d665 2
a666 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest"));
d668 2
a669 5
    	if (expressionProviders != null && nextLink.getCreationConstraints() != null && nextLink.getCreationConstraints().isValid()) {
		String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
		GenLinkConstraints constraints = nextLink.getCreationConstraints();
		String sourceExpression = constraints.getSourceEnd() != null ? nextLink.getUniqueIdentifier() + "_SourceExpression" : "null";
		String targetExpression = constraints.getTargetEnd() != null ? nextLink.getUniqueIdentifier() + "_TargetExpression" : "null";
d671 1
a671 1
    stringBuffer.append(importedAbstractExprCls);
d673 10
a682 1
    stringBuffer.append(targetExpression);
d684 1
a684 1
    stringBuffer.append(sourceExpression);
d686 3
a688 1
    stringBuffer.append(importedAbstractExprCls);
d690 1
a690 1
    stringBuffer.append(sourceExpression);
d692 1
a692 1
    stringBuffer.append(targetExpression);
d694 49
d744 15
a758 1
    stringBuffer.append(TEXT_101);
d763 1
a763 1
    stringBuffer.append(TEXT_102);
d765 1
a765 1
    stringBuffer.append(TEXT_103);
d767 1
a767 1
    stringBuffer.append(TEXT_104);
d769 1
a769 1
    stringBuffer.append(TEXT_105);
d771 1
a771 1
    stringBuffer.append(TEXT_106);
d776 1
a776 1
    stringBuffer.append(TEXT_107);
d778 1
a778 1
    stringBuffer.append(TEXT_108);
d793 1
a793 1
    stringBuffer.append(TEXT_109);
d814 1
a814 1
    stringBuffer.append(TEXT_110);
d816 1
a816 1
    stringBuffer.append(TEXT_111);
d818 1
a818 1
    stringBuffer.append(TEXT_112);
d820 1
a820 1
    stringBuffer.append(TEXT_113);
d828 1
a828 1
    stringBuffer.append(TEXT_114);
d830 1
a830 1
    stringBuffer.append(TEXT_115);
d834 1
a834 1
    stringBuffer.append(TEXT_116);
d836 1
a836 1
    stringBuffer.append(TEXT_117);
d838 1
a838 1
    stringBuffer.append(TEXT_118);
d849 1
a849 1
    stringBuffer.append(TEXT_119);
d870 1
a870 1
    stringBuffer.append(TEXT_120);
d872 1
a872 1
    stringBuffer.append(TEXT_121);
d874 1
a874 1
    stringBuffer.append(TEXT_122);
d876 1
a876 1
    stringBuffer.append(TEXT_123);
d884 1
a884 1
    stringBuffer.append(TEXT_124);
d886 1
a886 1
    stringBuffer.append(TEXT_125);
d890 1
a890 1
    stringBuffer.append(TEXT_126);
d892 1
a892 1
    stringBuffer.append(TEXT_127);
d894 1
a894 1
    stringBuffer.append(TEXT_128);
d902 1
a902 1
    stringBuffer.append(TEXT_129);
d907 1
a907 1
    stringBuffer.append(TEXT_130);
@


1.43
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d28 7
a34 7
  protected final String TEXT_9 = ".EDIT_POLICY_COMMAND, command);" + NL + "\t\t}" + NL + "\t\tCommand ehCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand command = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\tif (!(command instanceof CompositeTransactionalCommand)) {" + NL + "\t\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\t\tcommand = new CompositeTransactionalCommand(editingDomain, null).compose(command);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tehCommand = new ICommandProxy(command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\tCommand deleteViewCommand = new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t\t\t\tehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn ehCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\treturn new ICommandProxy(cmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_11 = " {";
  protected final String TEXT_12 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_13 = " ";
  protected final String TEXT_14 = " = create";
  protected final String TEXT_15 = "();";
d36 17
a52 17
  protected final String TEXT_17 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_18 = " create";
  protected final String TEXT_19 = "() {";
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = " ";
  protected final String TEXT_22 = " = new ";
  protected final String TEXT_23 = "(3);";
  protected final String TEXT_24 = ".put(\"";
  protected final String TEXT_25 = "\", ";
  protected final String TEXT_26 = "); //$NON-NLS-1$";
  protected final String TEXT_27 = "\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_28 = " sourceExpression = ";
  protected final String TEXT_29 = "null";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = "(";
  protected final String TEXT_32 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_33 = ", ";
d54 1
a54 1
  protected final String TEXT_35 = ".";
d56 94
a149 97
  protected final String TEXT_37 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_38 = ")";
  protected final String TEXT_39 = "new ";
  protected final String TEXT_40 = "(";
  protected final String TEXT_41 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_42 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_43 = " self = (";
  protected final String TEXT_44 = ")context;";
  protected final String TEXT_45 = "\t" + NL + "\t\t";
  protected final String TEXT_46 = " ";
  protected final String TEXT_47 = " = (";
  protected final String TEXT_48 = ")env.get(\"";
  protected final String TEXT_49 = "\"); //$NON-NLS-1$";
  protected final String TEXT_50 = NL + "\t\treturn ";
  protected final String TEXT_51 = ".";
  protected final String TEXT_52 = "(self";
  protected final String TEXT_53 = ", ";
  protected final String TEXT_54 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_55 = "null";
  protected final String TEXT_56 = ";";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = " ";
  protected final String TEXT_59 = " = new ";
  protected final String TEXT_60 = "(3);";
  protected final String TEXT_61 = ".put(\"";
  protected final String TEXT_62 = "\", ";
  protected final String TEXT_63 = "); //$NON-NLS-1$";
  protected final String TEXT_64 = NL + "\t\t\t";
  protected final String TEXT_65 = " targetExpression = ";
  protected final String TEXT_66 = "null";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = "(";
  protected final String TEXT_69 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_70 = ", ";
  protected final String TEXT_71 = ")";
  protected final String TEXT_72 = ".";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_75 = ")";
  protected final String TEXT_76 = "new ";
  protected final String TEXT_77 = "(";
  protected final String TEXT_78 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_79 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_80 = " self = (";
  protected final String TEXT_81 = ")context;";
  protected final String TEXT_82 = "\t" + NL + "\t\t";
  protected final String TEXT_83 = " ";
  protected final String TEXT_84 = " = (";
  protected final String TEXT_85 = ")env.get(\"";
  protected final String TEXT_86 = "\"); //$NON-NLS-1$";
  protected final String TEXT_87 = NL + "\t\treturn ";
  protected final String TEXT_88 = ".";
  protected final String TEXT_89 = "(self";
  protected final String TEXT_90 = ", ";
  protected final String TEXT_91 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_92 = "null";
  protected final String TEXT_93 = ";" + NL + "\t\t\treturn new ";
  protected final String TEXT_94 = "(sourceExpression, targetExpression);" + NL + "\t\t}";
  protected final String TEXT_95 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_96 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_97 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = " sourceEnd, ";
  protected final String TEXT_100 = " targetEnd) {" + NL + "\t\t\tthis.srcEndInv = sourceEnd;\t\t\t" + NL + "\t\t\tthis.targetEndInv = targetEnd;\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_101 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_102 = " sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\t";
  protected final String TEXT_103 = " targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_104 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_105 = " evalEnv = ";
  protected final String TEXT_106 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_107 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_108 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ";
  protected final String TEXT_109 = " {";
  protected final String TEXT_110 = NL;
  protected final String TEXT_111 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_112 = " ";
  protected final String TEXT_113 = "(";
  protected final String TEXT_114 = " self";
  protected final String TEXT_115 = ", ";
  protected final String TEXT_116 = " ";
  protected final String TEXT_117 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_118 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_119 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_122 = " ";
  protected final String TEXT_123 = "(";
  protected final String TEXT_124 = " self";
  protected final String TEXT_125 = ", ";
  protected final String TEXT_126 = " ";
  protected final String TEXT_127 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_128 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_129 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_130 = NL + "\t} // ";
  protected final String TEXT_131 = "\t\t" + NL + "\t}";
  protected final String TEXT_132 = "\t" + NL + "}";
  protected final String TEXT_133 = NL;
d272 2
a273 1
String javaExprContainer = "JavaConstraints";
d287 1
a287 7
    
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
if (genDiagram.hasLinkCreationConstraints() && expressionProviders != null) {
	String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
	String importedAbstractExprCls = importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName());
	boolean hasJavaConstraints = false; 

d289 3
a291 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d293 1
a293 8
    
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;						
		if(linkConstraints.getSourceEndContextClass() == null || linkConstraints.getTargetEndContextClass() == null) continue;
		hasJavaConstraints |= (linkConstraints.getSourceEnd() != null && expressionProviders.getProvider(linkConstraints.getSourceEnd()) instanceof GenJavaExpressionProvider) ||
							(linkConstraints.getTargetEnd() != null && expressionProviders.getProvider(linkConstraints.getTargetEnd()) instanceof GenJavaExpressionProvider);

d295 17
a311 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d313 1
a313 1
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
d315 1
a315 1
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
a317 27
	} // end of link iteration

    stringBuffer.append(TEXT_16);
    
	final String oppositeEndVarName = "oppositeEnd";
	for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
		GenLinkConstraints linkConstraints = ((GenLink)it.next()).getCreationConstraints();
		if(linkConstraints == null) continue;
		GenClass srcContext = linkConstraints.getSourceEndContextClass();
		GenClass targetContext = linkConstraints.getTargetEndContextClass();
		if(srcContext == null || targetContext == null) continue;

    stringBuffer.append(TEXT_17);
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_18);
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_19);
    			
		String __javaOperationContainer = javaExprContainer;
		Map __exprEnvVariables = new java.util.HashMap();
		String __outEnvVarName = "sourceEnv";
		GenClassifier __genExprContext = srcContext;
		ValueExpression __genValueExpression = linkConstraints.getSourceEnd();
		__exprEnvVariables.put(oppositeEndVarName, targetContext); //$NON-NLS-1$


    
d320 1
a320 1
java.util.Map __exprEnvVariables
d322 1
d328 1
a328 1
    stringBuffer.append(TEXT_20);
d330 1
a330 1
    stringBuffer.append(TEXT_21);
d332 1
a332 1
    stringBuffer.append(TEXT_22);
d334 1
a334 1
    stringBuffer.append(TEXT_23);
d343 1
a343 1
    stringBuffer.append(TEXT_24);
d345 1
a345 1
    stringBuffer.append(TEXT_25);
d347 1
a347 1
    stringBuffer.append(TEXT_26);
d355 3
a357 6
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_28);
    
		if(linkConstraints.getSourceEnd() != null) {

d373 1
a373 1
    stringBuffer.append(TEXT_29);
d383 1
a383 1
    stringBuffer.append(TEXT_30);
d385 1
a385 1
    stringBuffer.append(TEXT_31);
d387 1
a387 1
    stringBuffer.append(TEXT_32);
d389 1
a389 1
    stringBuffer.append(TEXT_33);
d391 1
a391 1
    stringBuffer.append(TEXT_34);
d396 1
a396 1
    stringBuffer.append(TEXT_35);
d398 1
a398 1
    stringBuffer.append(TEXT_36);
d400 1
a400 1
    stringBuffer.append(TEXT_37);
d402 1
a402 1
    stringBuffer.append(TEXT_38);
d410 1
a410 1
    stringBuffer.append(TEXT_39);
d412 1
a412 1
    stringBuffer.append(TEXT_40);
d414 1
a414 1
    stringBuffer.append(TEXT_41);
d416 1
a416 1
    stringBuffer.append(TEXT_42);
d418 1
a418 1
    stringBuffer.append(TEXT_43);
d420 1
a420 1
    stringBuffer.append(TEXT_44);
d427 1
a427 1
    stringBuffer.append(TEXT_45);
d429 1
a429 1
    stringBuffer.append(TEXT_46);
d431 1
a431 1
    stringBuffer.append(TEXT_47);
d433 1
a433 1
    stringBuffer.append(TEXT_48);
d435 1
a435 1
    stringBuffer.append(TEXT_49);
d437 1
a437 1
    stringBuffer.append(TEXT_50);
d441 1
a441 1
    stringBuffer.append(TEXT_51);
d445 1
a445 1
    stringBuffer.append(TEXT_52);
d448 1
a448 1
    stringBuffer.append(TEXT_53);
d451 1
a451 1
    stringBuffer.append(TEXT_54);
d454 15
a468 11
    
		} else 
    stringBuffer.append(TEXT_55);
    ;
    stringBuffer.append(TEXT_56);
    
		__outEnvVarName = "targetEnv";
		__genExprContext = targetContext;
		__genValueExpression = linkConstraints.getTargetEnd();			
		__exprEnvVariables.put(oppositeEndVarName, srcContext); //$NON-NLS-1$

d472 1
a472 1
java.util.Map __exprEnvVariables
d474 1
d480 1
a480 1
    stringBuffer.append(TEXT_57);
d482 1
a482 1
    stringBuffer.append(TEXT_58);
d484 1
a484 1
    stringBuffer.append(TEXT_59);
d486 1
a486 1
    stringBuffer.append(TEXT_60);
d495 1
a495 1
    stringBuffer.append(TEXT_61);
d497 1
a497 1
    stringBuffer.append(TEXT_62);
d499 1
a499 1
    stringBuffer.append(TEXT_63);
d507 3
a509 6
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_65);
    
		if(linkConstraints.getTargetEnd() != null) {

d525 1
a525 1
    stringBuffer.append(TEXT_66);
d535 1
a535 1
    stringBuffer.append(TEXT_67);
d537 1
a537 1
    stringBuffer.append(TEXT_68);
d539 1
a539 1
    stringBuffer.append(TEXT_69);
d541 1
a541 1
    stringBuffer.append(TEXT_70);
d543 1
a543 1
    stringBuffer.append(TEXT_71);
d548 1
a548 1
    stringBuffer.append(TEXT_72);
d550 1
a550 1
    stringBuffer.append(TEXT_73);
d552 1
a552 1
    stringBuffer.append(TEXT_74);
d554 1
a554 1
    stringBuffer.append(TEXT_75);
d562 1
a562 1
    stringBuffer.append(TEXT_76);
d564 1
a564 1
    stringBuffer.append(TEXT_77);
d566 1
a566 1
    stringBuffer.append(TEXT_78);
d568 1
a568 1
    stringBuffer.append(TEXT_79);
d570 1
a570 1
    stringBuffer.append(TEXT_80);
d572 1
a572 1
    stringBuffer.append(TEXT_81);
d579 4
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
a589 4
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_86);
    		} 
    stringBuffer.append(TEXT_87);
d593 1
a593 1
    stringBuffer.append(TEXT_88);
d597 1
a597 1
    stringBuffer.append(TEXT_89);
d600 1
a600 1
    stringBuffer.append(TEXT_90);
d603 1
a603 1
    stringBuffer.append(TEXT_91);
d606 9
a614 2
    
		} else 
d616 1
a616 1
    ;
d618 5
a622 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d624 1
a624 3
    
	} // end of link iteration

d626 1
a626 1
    stringBuffer.append(importedAbstractExprCls);
d628 2
a630 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d632 1
a632 1
    stringBuffer.append(importedAbstractExprCls);
d634 1
a634 1
    stringBuffer.append(importedAbstractExprCls);
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest"));
d638 4
a641 1
    stringBuffer.append(importedAbstractExprCls);
d645 1
a645 1
    stringBuffer.append(importedAbstractExprCls);
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d651 4
a654 1
    stringBuffer.append(pluginActivatorClass);
d656 1
a656 3
    
if(hasJavaConstraints) {

a657 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_109);
d672 1
a672 1
    stringBuffer.append(TEXT_110);
d693 2
d696 1
a696 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d698 1
a698 1
    stringBuffer.append(__exprJavaOperName);
a699 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_114);
d707 2
a709 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_116);
d713 2
d716 1
a716 1
    stringBuffer.append(__importedAbstractExpr);
a717 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_119);
d728 1
a728 1
    stringBuffer.append(TEXT_120);
d749 2
d752 1
a752 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d754 1
a754 1
    stringBuffer.append(__exprJavaOperName);
a755 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_124);
d763 2
a765 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_126);
d769 2
d772 1
a772 1
    stringBuffer.append(__importedAbstractExpr);
a773 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_129);
d781 1
a781 1
    stringBuffer.append(TEXT_130);
d786 1
a786 3
    stringBuffer.append(TEXT_131);
    } /*end of hasLinkCreationConstraints()*/ 
    stringBuffer.append(TEXT_132);
a787 1
    stringBuffer.append(TEXT_133);
@


1.42
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d162 7
a168 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.41
log
@Removing unnecessary logging.
@
text
@d162 1
a162 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.40
log
@#146889 do not allow to rerote links (temp solution)
@
text
@d26 2
a27 2
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tObject editHelperContext = completedRequest.getEditHelperContext();" + NL + "\t\tif (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {" + NL + "\t\t\t// no semantic commands are provided for pure design elements" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tif (editHelperContext == null) {" + NL + "\t\t\teditHelperContext = ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t\t}" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);" + NL + "\t\tif (elementType == ElementTypeRegistry.getInstance().getType(\"org.eclipse.gmf.runtime.emf.type.core.default\")) { //$NON-NLS-1$" + NL + "\t\t\t";
  protected final String TEXT_8 = ".getInstance().logInfo(\"Failed to get element type for \" + editHelperContext); //$NON-NLS-1$" + NL + "\t\t\telementType = null;" + NL + "\t\t}" + NL + "\t\tCommand epCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (epCommand != null) {" + NL + "\t\t\tICommand command = epCommand instanceof ICommandProxy ? ((ICommandProxy) epCommand).getICommand() : new CommandProxy(epCommand);" + NL + "\t\t\tcompletedRequest.setParameter(";
d278 2
a279 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
@


1.39
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d28 1
a28 1
  protected final String TEXT_9 = ".EDIT_POLICY_COMMAND, command);" + NL + "\t\t}" + NL + "\t\tCommand ehCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand command = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\tif (!(command instanceof CompositeTransactionalCommand)) {" + NL + "\t\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\t\tcommand = new CompositeTransactionalCommand(editingDomain, null).compose(command);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tehCommand = new ICommandProxy(command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\tCommand deleteViewCommand = new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t\t\t\tehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn ehCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\treturn new ICommandProxy(cmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
@


1.38
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.CommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d27 2
a28 2
  protected final String TEXT_8 = ".getInstance().logInfo(\"Failed to get element type for \" + editHelperContext); //$NON-NLS-1$" + NL + "\t\t\telementType = null;" + NL + "\t\t}" + NL + "\t\tCommand epCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (epCommand != null) {" + NL + "\t\t\tICommand command = epCommand instanceof EtoolsProxyCommand ? ((EtoolsProxyCommand) epCommand).getICommand() : new CommandProxy(epCommand);" + NL + "\t\t\tcompletedRequest.setParameter(";
  protected final String TEXT_9 = ".EDIT_POLICY_COMMAND, command);" + NL + "\t\t}" + NL + "\t\tCommand ehCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand command = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (command != null) {" + NL + "\t\t\t\tif (!(command instanceof CompositeTransactionalCommand)) {" + NL + "\t\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\t\tcommand = new CompositeTransactionalCommand(editingDomain, null).compose(command);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tehCommand = new EtoolsProxyCommand(command);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t\t\tCommand deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t\t\t\tehCommand = ehCommand == null ? deleteViewCommand : ehCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn ehCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\treturn new EtoolsProxyCommand(cmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
@


1.37
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@d50 2
a51 2
  protected final String TEXT_31 = "(\"";
  protected final String TEXT_32 = "\", //$NON-NLS-1$" + NL + "\t";
d55 2
a56 2
  protected final String TEXT_36 = "(\"";
  protected final String TEXT_37 = "\", //$NON-NLS-1$" + NL + "\t";
d87 2
a88 2
  protected final String TEXT_68 = "(\"";
  protected final String TEXT_69 = "\", //$NON-NLS-1$" + NL + "\t";
d92 2
a93 2
  protected final String TEXT_73 = "(\"";
  protected final String TEXT_74 = "\", //$NON-NLS-1$" + NL + "\t";
d395 1
d405 1
a405 1
    stringBuffer.append(__genValueExpression.getBody());
d418 1
a418 1
    stringBuffer.append(__genValueExpression.getBody());
d545 1
d555 1
a555 1
    stringBuffer.append(__genValueExpression.getBody());
d568 1
a568 1
    stringBuffer.append(__genValueExpression.getBody());
@


1.36
log
@#142086 semantic commands are executed before "before" advice commands
@
text
@d136 17
a152 15
  protected final String TEXT_117 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_118 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_119 = NL;
  protected final String TEXT_120 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_121 = " ";
  protected final String TEXT_122 = "(";
  protected final String TEXT_123 = " self";
  protected final String TEXT_124 = ", ";
  protected final String TEXT_125 = " ";
  protected final String TEXT_126 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_127 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_128 = NL + "\t} // ";
  protected final String TEXT_129 = "\t\t" + NL + "\t}";
  protected final String TEXT_130 = "\t" + NL + "}";
  protected final String TEXT_131 = NL;
d686 1
d718 2
d721 1
a721 1
    stringBuffer.append(TEXT_118);
d723 1
a723 1
}
d732 1
a732 1
    stringBuffer.append(TEXT_119);
d742 1
d753 1
a753 1
    stringBuffer.append(TEXT_120);
d755 1
a755 1
    stringBuffer.append(TEXT_121);
d757 1
a757 1
    stringBuffer.append(TEXT_122);
d759 1
a759 1
    stringBuffer.append(TEXT_123);
d767 1
a767 1
    stringBuffer.append(TEXT_124);
d769 1
a769 1
    stringBuffer.append(TEXT_125);
d773 3
a775 1
    stringBuffer.append(TEXT_126);
d777 1
a777 1
    stringBuffer.append(TEXT_127);
d779 1
a779 1
}
d785 1
a785 1
    stringBuffer.append(TEXT_128);
d790 1
a790 1
    stringBuffer.append(TEXT_129);
d792 1
a792 1
    stringBuffer.append(TEXT_130);
d794 1
a794 1
    stringBuffer.append(TEXT_131);
@


1.35
log
@header comment should not be a javadoc comment
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IEditHelperContext;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 125
a150 124
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tObject editHelperContext = completedRequest.getEditHelperContext();" + NL + "\t\tif (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {" + NL + "\t\t\t// no semantic commands are provided for pure design elements" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);" + NL + "\t\tif (elementType == ElementTypeRegistry.getInstance().getType(\"org.eclipse.gmf.runtime.emf.type.core.default\")) { //$NON-NLS-1$" + NL + "\t\t\t";
  protected final String TEXT_8 = ".getInstance().logInfo(\"Failed to get element type for \" + editHelperContext);" + NL + "\t\t\telementType = null;" + NL + "\t\t}" + NL + "\t\tCommand semanticHelperCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand semanticCommand = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (semanticCommand != null) {" + NL + "\t\t\t\tsemanticHelperCommand = new EtoolsProxyCommand(semanticCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tCommand semanticPolicyCommand = getSemanticCommandSwitch(completedRequest);" + NL + "" + NL + "\t\t// combine commands from edit policy and edit helper" + NL + "\t\tif (semanticPolicyCommand == null) {" + NL + "\t\t\tif (semanticHelperCommand == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticHelperCommand;" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tif (semanticHelperCommand != null) {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(semanticHelperCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t// append command to delete view if necessary" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tCommand deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(((IGraphicalEditPart) getHost()).getEditingDomain(), (View) getHost().getModel()));" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticPolicyCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_10 = " {";
  protected final String TEXT_11 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_12 = " ";
  protected final String TEXT_13 = " = create";
  protected final String TEXT_14 = "();";
  protected final String TEXT_15 = NL;
  protected final String TEXT_16 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_17 = " create";
  protected final String TEXT_18 = "() {";
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = " ";
  protected final String TEXT_21 = " = new ";
  protected final String TEXT_22 = "(3);";
  protected final String TEXT_23 = ".put(\"";
  protected final String TEXT_24 = "\", ";
  protected final String TEXT_25 = "); //$NON-NLS-1$";
  protected final String TEXT_26 = "\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_27 = " sourceExpression = ";
  protected final String TEXT_28 = "null";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = "(\"";
  protected final String TEXT_31 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_32 = ", ";
  protected final String TEXT_33 = ")";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = "(\"";
  protected final String TEXT_36 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_37 = ")";
  protected final String TEXT_38 = "new ";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_41 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_42 = " self = (";
  protected final String TEXT_43 = ")context;";
  protected final String TEXT_44 = "\t" + NL + "\t\t";
  protected final String TEXT_45 = " ";
  protected final String TEXT_46 = " = (";
  protected final String TEXT_47 = ")env.get(\"";
  protected final String TEXT_48 = "\"); //$NON-NLS-1$";
  protected final String TEXT_49 = NL + "\t\treturn ";
  protected final String TEXT_50 = ".";
  protected final String TEXT_51 = "(self";
  protected final String TEXT_52 = ", ";
  protected final String TEXT_53 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_54 = "null";
  protected final String TEXT_55 = ";";
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = " ";
  protected final String TEXT_58 = " = new ";
  protected final String TEXT_59 = "(3);";
  protected final String TEXT_60 = ".put(\"";
  protected final String TEXT_61 = "\", ";
  protected final String TEXT_62 = "); //$NON-NLS-1$";
  protected final String TEXT_63 = NL + "\t\t\t";
  protected final String TEXT_64 = " targetExpression = ";
  protected final String TEXT_65 = "null";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "(\"";
  protected final String TEXT_68 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_69 = ", ";
  protected final String TEXT_70 = ")";
  protected final String TEXT_71 = ".";
  protected final String TEXT_72 = "(\"";
  protected final String TEXT_73 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_74 = ")";
  protected final String TEXT_75 = "new ";
  protected final String TEXT_76 = "(";
  protected final String TEXT_77 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_78 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_79 = " self = (";
  protected final String TEXT_80 = ")context;";
  protected final String TEXT_81 = "\t" + NL + "\t\t";
  protected final String TEXT_82 = " ";
  protected final String TEXT_83 = " = (";
  protected final String TEXT_84 = ")env.get(\"";
  protected final String TEXT_85 = "\"); //$NON-NLS-1$";
  protected final String TEXT_86 = NL + "\t\treturn ";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = "(self";
  protected final String TEXT_89 = ", ";
  protected final String TEXT_90 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_91 = "null";
  protected final String TEXT_92 = ";" + NL + "\t\t\treturn new ";
  protected final String TEXT_93 = "(sourceExpression, targetExpression);" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_95 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_96 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_97 = "(";
  protected final String TEXT_98 = " sourceEnd, ";
  protected final String TEXT_99 = " targetEnd) {" + NL + "\t\t\tthis.srcEndInv = sourceEnd;\t\t\t" + NL + "\t\t\tthis.targetEndInv = targetEnd;\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_100 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_101 = " sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\t";
  protected final String TEXT_102 = " targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_103 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_104 = " evalEnv = ";
  protected final String TEXT_105 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_106 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_107 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ";
  protected final String TEXT_108 = " {";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_111 = " ";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = " self";
  protected final String TEXT_114 = ", ";
  protected final String TEXT_115 = " ";
  protected final String TEXT_116 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_117 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_120 = " ";
  protected final String TEXT_121 = "(";
  protected final String TEXT_122 = " self";
  protected final String TEXT_123 = ", ";
  protected final String TEXT_124 = " ";
  protected final String TEXT_125 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_126 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_127 = NL + "\t} // ";
  protected final String TEXT_128 = "\t\t" + NL + "\t}";
  protected final String TEXT_129 = "\t" + NL + "}";
  protected final String TEXT_130 = NL;
d278 2
d287 1
a287 1
    stringBuffer.append(TEXT_9);
d289 1
a289 1
    stringBuffer.append(TEXT_10);
d298 1
a298 1
    stringBuffer.append(TEXT_11);
a299 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
d303 2
d308 1
a308 1
    stringBuffer.append(TEXT_15);
d318 1
a318 1
    stringBuffer.append(TEXT_16);
d320 1
a320 1
    stringBuffer.append(TEXT_17);
d322 1
a322 1
    stringBuffer.append(TEXT_18);
d342 1
a342 1
    stringBuffer.append(TEXT_19);
d344 1
a344 1
    stringBuffer.append(TEXT_20);
d346 1
a346 1
    stringBuffer.append(TEXT_21);
d348 1
a348 1
    stringBuffer.append(TEXT_22);
d357 1
a357 1
    stringBuffer.append(TEXT_23);
d359 1
a359 1
    stringBuffer.append(TEXT_24);
d361 1
a361 1
    stringBuffer.append(TEXT_25);
d369 1
a369 1
    stringBuffer.append(TEXT_26);
d371 1
a371 1
    stringBuffer.append(TEXT_27);
d390 1
a390 1
    stringBuffer.append(TEXT_28);
d399 1
a399 1
    stringBuffer.append(TEXT_29);
d401 1
a401 1
    stringBuffer.append(TEXT_30);
d403 1
a403 1
    stringBuffer.append(TEXT_31);
d405 1
a405 1
    stringBuffer.append(TEXT_32);
d407 1
a407 1
    stringBuffer.append(TEXT_33);
d412 1
a412 1
    stringBuffer.append(TEXT_34);
d414 1
a414 1
    stringBuffer.append(TEXT_35);
d416 1
a416 1
    stringBuffer.append(TEXT_36);
d418 1
a418 1
    stringBuffer.append(TEXT_37);
d426 1
a426 1
    stringBuffer.append(TEXT_38);
d428 1
a428 1
    stringBuffer.append(TEXT_39);
d430 1
a430 1
    stringBuffer.append(TEXT_40);
a431 2
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d435 2
d443 1
a443 1
    stringBuffer.append(TEXT_44);
d445 1
a445 1
    stringBuffer.append(TEXT_45);
d447 1
a447 1
    stringBuffer.append(TEXT_46);
d449 1
a449 1
    stringBuffer.append(TEXT_47);
d451 1
a451 1
    stringBuffer.append(TEXT_48);
d453 1
a453 1
    stringBuffer.append(TEXT_49);
d457 1
a457 1
    stringBuffer.append(TEXT_50);
d461 1
a461 1
    stringBuffer.append(TEXT_51);
d464 1
a464 1
    stringBuffer.append(TEXT_52);
d467 1
a467 1
    stringBuffer.append(TEXT_53);
d472 1
a472 1
    stringBuffer.append(TEXT_54);
d474 1
a474 1
    stringBuffer.append(TEXT_55);
d491 1
a491 1
    stringBuffer.append(TEXT_56);
d493 1
a493 1
    stringBuffer.append(TEXT_57);
d495 1
a495 1
    stringBuffer.append(TEXT_58);
d497 1
a497 1
    stringBuffer.append(TEXT_59);
d506 1
a506 1
    stringBuffer.append(TEXT_60);
d508 1
a508 1
    stringBuffer.append(TEXT_61);
d510 1
a510 1
    stringBuffer.append(TEXT_62);
d518 1
a518 1
    stringBuffer.append(TEXT_63);
d520 1
a520 1
    stringBuffer.append(TEXT_64);
d539 1
a539 1
    stringBuffer.append(TEXT_65);
d548 1
a548 1
    stringBuffer.append(TEXT_66);
d550 1
a550 1
    stringBuffer.append(TEXT_67);
d552 1
a552 1
    stringBuffer.append(TEXT_68);
d554 1
a554 1
    stringBuffer.append(TEXT_69);
d556 1
a556 1
    stringBuffer.append(TEXT_70);
d561 1
a561 1
    stringBuffer.append(TEXT_71);
d563 1
a563 1
    stringBuffer.append(TEXT_72);
d565 1
a565 1
    stringBuffer.append(TEXT_73);
d567 1
a567 1
    stringBuffer.append(TEXT_74);
d575 1
a575 1
    stringBuffer.append(TEXT_75);
d577 1
a577 1
    stringBuffer.append(TEXT_76);
d579 1
a579 1
    stringBuffer.append(TEXT_77);
a580 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d584 2
d592 1
a592 1
    stringBuffer.append(TEXT_81);
d594 1
a594 1
    stringBuffer.append(TEXT_82);
d596 1
a596 1
    stringBuffer.append(TEXT_83);
d598 1
a598 1
    stringBuffer.append(TEXT_84);
d600 1
a600 1
    stringBuffer.append(TEXT_85);
d602 1
a602 1
    stringBuffer.append(TEXT_86);
d606 1
a606 1
    stringBuffer.append(TEXT_87);
d610 1
a610 1
    stringBuffer.append(TEXT_88);
d613 1
a613 1
    stringBuffer.append(TEXT_89);
d616 1
a616 1
    stringBuffer.append(TEXT_90);
d621 1
a621 1
    stringBuffer.append(TEXT_91);
d623 1
a623 1
    stringBuffer.append(TEXT_92);
d625 1
a625 1
    stringBuffer.append(TEXT_93);
a628 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importedAbstractExprCls);
d632 2
a634 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importedAbstractExprCls);
d638 2
a640 2
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importedAbstractExprCls);
d646 2
d649 1
a649 1
    stringBuffer.append(TEXT_104);
d651 1
a651 1
    stringBuffer.append(TEXT_105);
d653 1
a653 1
    stringBuffer.append(TEXT_106);
d657 1
a657 1
    stringBuffer.append(TEXT_107);
d659 1
a659 1
    stringBuffer.append(TEXT_108);
d674 1
a674 1
    stringBuffer.append(TEXT_109);
d694 1
a694 1
    stringBuffer.append(TEXT_110);
d696 1
a696 1
    stringBuffer.append(TEXT_111);
d698 1
a698 1
    stringBuffer.append(TEXT_112);
d700 1
a700 1
    stringBuffer.append(TEXT_113);
d708 1
a708 1
    stringBuffer.append(TEXT_114);
d710 1
a710 1
    stringBuffer.append(TEXT_115);
d714 1
a714 1
    stringBuffer.append(TEXT_116);
d716 1
a716 1
    stringBuffer.append(TEXT_117);
d727 1
a727 1
    stringBuffer.append(TEXT_118);
d747 1
a747 1
    stringBuffer.append(TEXT_119);
d749 1
a749 1
    stringBuffer.append(TEXT_120);
d751 1
a751 1
    stringBuffer.append(TEXT_121);
d753 1
a753 1
    stringBuffer.append(TEXT_122);
d761 1
a761 1
    stringBuffer.append(TEXT_123);
d763 1
a763 1
    stringBuffer.append(TEXT_124);
d767 1
a767 1
    stringBuffer.append(TEXT_125);
d769 1
a769 1
    stringBuffer.append(TEXT_126);
d777 1
a777 1
    stringBuffer.append(TEXT_127);
d782 1
a782 1
    stringBuffer.append(TEXT_128);
d784 1
a784 1
    stringBuffer.append(TEXT_129);
d786 1
a786 1
    stringBuffer.append(TEXT_130);
@


1.34
log
@fix some nls markers
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.33
log
@remove warns; fix edit helper context resolution
@
text
@d26 1
a26 1
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tObject editHelperContext = completedRequest.getEditHelperContext();" + NL + "\t\tif (editHelperContext instanceof View || (editHelperContext instanceof IEditHelperContext && ((IEditHelperContext) editHelperContext).getEObject() instanceof View)) {" + NL + "\t\t\t// no semantic commands are provided for pure design elements" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);" + NL + "\t\tif (elementType == ElementTypeRegistry.getInstance().getType(\"org.eclipse.gmf.runtime.emf.type.core.default\")) {" + NL + "\t\t\t";
@


1.32
log
@Correcting copyright processing
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 1
a26 1
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tObject editHelperContext = completedRequest.getEditHelperContext();" + NL + "\t\tif (editHelperContext instanceof View) {" + NL + "\t\t\teditHelperContext = ((View) editHelperContext).getElement();" + NL + "\t\t}" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(editHelperContext);" + NL + "\t\tif (elementType == ElementTypeRegistry.getInstance().getType(\"org.eclipse.gmf.runtime.emf.type.core.default\")) {" + NL + "\t\t\t";
@


1.31
log
@enable edit helpers
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d260 1
a260 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.30
log
@temporarily disable edit helpers since they return wrong element type
@
text
@d26 124
a149 123
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(completedRequest.getEditHelperContext());" + NL + "\t\tCommand semanticHelperCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand semanticCommand = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (semanticCommand != null) {" + NL + "\t\t\t\t//semanticHelperCommand = new EtoolsProxyCommand(semanticCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tCommand semanticPolicyCommand = getSemanticCommandSwitch(completedRequest);" + NL + "" + NL + "\t\t// combine commands from edit policy and edit helper" + NL + "\t\tif (semanticPolicyCommand == null) {" + NL + "\t\t\tif (semanticHelperCommand == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticHelperCommand;" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tif (semanticHelperCommand != null) {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(semanticHelperCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t// append command to delete view if necessary" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tCommand deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(((IGraphicalEditPart) getHost()).getEditingDomain(), (View) getHost().getModel()));" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticPolicyCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_9 = " {";
  protected final String TEXT_10 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_11 = " ";
  protected final String TEXT_12 = " = create";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_16 = " create";
  protected final String TEXT_17 = "() {";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = " ";
  protected final String TEXT_20 = " = new ";
  protected final String TEXT_21 = "(3);";
  protected final String TEXT_22 = ".put(\"";
  protected final String TEXT_23 = "\", ";
  protected final String TEXT_24 = "); //$NON-NLS-1$";
  protected final String TEXT_25 = "\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_26 = " sourceExpression = ";
  protected final String TEXT_27 = "null";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "(\"";
  protected final String TEXT_30 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_31 = ", ";
  protected final String TEXT_32 = ")";
  protected final String TEXT_33 = ".";
  protected final String TEXT_34 = "(\"";
  protected final String TEXT_35 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_36 = ")";
  protected final String TEXT_37 = "new ";
  protected final String TEXT_38 = "(";
  protected final String TEXT_39 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_40 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_41 = " self = (";
  protected final String TEXT_42 = ")context;";
  protected final String TEXT_43 = "\t" + NL + "\t\t";
  protected final String TEXT_44 = " ";
  protected final String TEXT_45 = " = (";
  protected final String TEXT_46 = ")env.get(\"";
  protected final String TEXT_47 = "\"); //$NON-NLS-1$";
  protected final String TEXT_48 = NL + "\t\treturn ";
  protected final String TEXT_49 = ".";
  protected final String TEXT_50 = "(self";
  protected final String TEXT_51 = ", ";
  protected final String TEXT_52 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_53 = "null";
  protected final String TEXT_54 = ";";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = " ";
  protected final String TEXT_57 = " = new ";
  protected final String TEXT_58 = "(3);";
  protected final String TEXT_59 = ".put(\"";
  protected final String TEXT_60 = "\", ";
  protected final String TEXT_61 = "); //$NON-NLS-1$";
  protected final String TEXT_62 = NL + "\t\t\t";
  protected final String TEXT_63 = " targetExpression = ";
  protected final String TEXT_64 = "null";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = "(\"";
  protected final String TEXT_67 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_68 = ", ";
  protected final String TEXT_69 = ")";
  protected final String TEXT_70 = ".";
  protected final String TEXT_71 = "(\"";
  protected final String TEXT_72 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_73 = ")";
  protected final String TEXT_74 = "new ";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_77 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_78 = " self = (";
  protected final String TEXT_79 = ")context;";
  protected final String TEXT_80 = "\t" + NL + "\t\t";
  protected final String TEXT_81 = " ";
  protected final String TEXT_82 = " = (";
  protected final String TEXT_83 = ")env.get(\"";
  protected final String TEXT_84 = "\"); //$NON-NLS-1$";
  protected final String TEXT_85 = NL + "\t\treturn ";
  protected final String TEXT_86 = ".";
  protected final String TEXT_87 = "(self";
  protected final String TEXT_88 = ", ";
  protected final String TEXT_89 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_90 = "null";
  protected final String TEXT_91 = ";" + NL + "\t\t\treturn new ";
  protected final String TEXT_92 = "(sourceExpression, targetExpression);" + NL + "\t\t}";
  protected final String TEXT_93 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_94 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_95 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_96 = "(";
  protected final String TEXT_97 = " sourceEnd, ";
  protected final String TEXT_98 = " targetEnd) {" + NL + "\t\t\tthis.srcEndInv = sourceEnd;\t\t\t" + NL + "\t\t\tthis.targetEndInv = targetEnd;\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_99 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_100 = " sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\t";
  protected final String TEXT_101 = " targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_102 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_103 = " evalEnv = ";
  protected final String TEXT_104 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_105 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_106 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ";
  protected final String TEXT_107 = " {";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_110 = " ";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = " self";
  protected final String TEXT_113 = ", ";
  protected final String TEXT_114 = " ";
  protected final String TEXT_115 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_116 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_119 = " ";
  protected final String TEXT_120 = "(";
  protected final String TEXT_121 = " self";
  protected final String TEXT_122 = ", ";
  protected final String TEXT_123 = " ";
  protected final String TEXT_124 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_125 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_126 = NL + "\t} // ";
  protected final String TEXT_127 = "\t\t" + NL + "\t}";
  protected final String TEXT_128 = "\t" + NL + "}";
  protected final String TEXT_129 = NL;
d275 2
d284 1
a284 1
    stringBuffer.append(TEXT_8);
d286 1
a286 1
    stringBuffer.append(TEXT_9);
d295 1
a295 1
    stringBuffer.append(TEXT_10);
a296 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
d300 2
d305 1
a305 1
    stringBuffer.append(TEXT_14);
d315 1
a315 1
    stringBuffer.append(TEXT_15);
d317 1
a317 1
    stringBuffer.append(TEXT_16);
d319 1
a319 1
    stringBuffer.append(TEXT_17);
d339 1
a339 1
    stringBuffer.append(TEXT_18);
d341 1
a341 1
    stringBuffer.append(TEXT_19);
d343 1
a343 1
    stringBuffer.append(TEXT_20);
d345 1
a345 1
    stringBuffer.append(TEXT_21);
d354 1
a354 1
    stringBuffer.append(TEXT_22);
d356 1
a356 1
    stringBuffer.append(TEXT_23);
d358 1
a358 1
    stringBuffer.append(TEXT_24);
d366 1
a366 1
    stringBuffer.append(TEXT_25);
d368 1
a368 1
    stringBuffer.append(TEXT_26);
d387 1
a387 1
    stringBuffer.append(TEXT_27);
d396 1
a396 1
    stringBuffer.append(TEXT_28);
d398 1
a398 1
    stringBuffer.append(TEXT_29);
d400 1
a400 1
    stringBuffer.append(TEXT_30);
d402 1
a402 1
    stringBuffer.append(TEXT_31);
d404 1
a404 1
    stringBuffer.append(TEXT_32);
d409 1
a409 1
    stringBuffer.append(TEXT_33);
d411 1
a411 1
    stringBuffer.append(TEXT_34);
d413 1
a413 1
    stringBuffer.append(TEXT_35);
d415 1
a415 1
    stringBuffer.append(TEXT_36);
d423 1
a423 1
    stringBuffer.append(TEXT_37);
d425 1
a425 1
    stringBuffer.append(TEXT_38);
d427 1
a427 1
    stringBuffer.append(TEXT_39);
a428 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d432 2
d440 1
a440 1
    stringBuffer.append(TEXT_43);
d442 1
a442 1
    stringBuffer.append(TEXT_44);
d444 1
a444 1
    stringBuffer.append(TEXT_45);
d446 1
a446 1
    stringBuffer.append(TEXT_46);
d448 1
a448 1
    stringBuffer.append(TEXT_47);
d450 1
a450 1
    stringBuffer.append(TEXT_48);
d454 1
a454 1
    stringBuffer.append(TEXT_49);
d458 1
a458 1
    stringBuffer.append(TEXT_50);
d461 1
a461 1
    stringBuffer.append(TEXT_51);
d464 1
a464 1
    stringBuffer.append(TEXT_52);
d469 1
a469 1
    stringBuffer.append(TEXT_53);
d471 1
a471 1
    stringBuffer.append(TEXT_54);
d488 1
a488 1
    stringBuffer.append(TEXT_55);
d490 1
a490 1
    stringBuffer.append(TEXT_56);
d492 1
a492 1
    stringBuffer.append(TEXT_57);
d494 1
a494 1
    stringBuffer.append(TEXT_58);
d503 1
a503 1
    stringBuffer.append(TEXT_59);
d505 1
a505 1
    stringBuffer.append(TEXT_60);
d507 1
a507 1
    stringBuffer.append(TEXT_61);
d515 1
a515 1
    stringBuffer.append(TEXT_62);
d517 1
a517 1
    stringBuffer.append(TEXT_63);
d536 1
a536 1
    stringBuffer.append(TEXT_64);
d545 1
a545 1
    stringBuffer.append(TEXT_65);
d547 1
a547 1
    stringBuffer.append(TEXT_66);
d549 1
a549 1
    stringBuffer.append(TEXT_67);
d551 1
a551 1
    stringBuffer.append(TEXT_68);
d553 1
a553 1
    stringBuffer.append(TEXT_69);
d558 1
a558 1
    stringBuffer.append(TEXT_70);
d560 1
a560 1
    stringBuffer.append(TEXT_71);
d562 1
a562 1
    stringBuffer.append(TEXT_72);
d564 1
a564 1
    stringBuffer.append(TEXT_73);
d572 1
a572 1
    stringBuffer.append(TEXT_74);
d574 1
a574 1
    stringBuffer.append(TEXT_75);
d576 1
a576 1
    stringBuffer.append(TEXT_76);
a577 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d581 2
d589 1
a589 1
    stringBuffer.append(TEXT_80);
d591 1
a591 1
    stringBuffer.append(TEXT_81);
d593 1
a593 1
    stringBuffer.append(TEXT_82);
d595 1
a595 1
    stringBuffer.append(TEXT_83);
d597 1
a597 1
    stringBuffer.append(TEXT_84);
d599 1
a599 1
    stringBuffer.append(TEXT_85);
d603 1
a603 1
    stringBuffer.append(TEXT_86);
d607 1
a607 1
    stringBuffer.append(TEXT_87);
d610 1
a610 1
    stringBuffer.append(TEXT_88);
d613 1
a613 1
    stringBuffer.append(TEXT_89);
d618 1
a618 1
    stringBuffer.append(TEXT_90);
d620 1
a620 1
    stringBuffer.append(TEXT_91);
d622 1
a622 1
    stringBuffer.append(TEXT_92);
a625 2
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importedAbstractExprCls);
d629 2
a631 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importedAbstractExprCls);
d635 2
a637 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importedAbstractExprCls);
d643 2
d646 1
a646 1
    stringBuffer.append(TEXT_103);
d648 1
a648 1
    stringBuffer.append(TEXT_104);
d650 1
a650 1
    stringBuffer.append(TEXT_105);
d654 1
a654 1
    stringBuffer.append(TEXT_106);
d656 1
a656 1
    stringBuffer.append(TEXT_107);
d671 1
a671 1
    stringBuffer.append(TEXT_108);
d691 1
a691 1
    stringBuffer.append(TEXT_109);
d693 1
a693 1
    stringBuffer.append(TEXT_110);
d695 1
a695 1
    stringBuffer.append(TEXT_111);
d697 1
a697 1
    stringBuffer.append(TEXT_112);
d705 1
a705 1
    stringBuffer.append(TEXT_113);
d707 1
a707 1
    stringBuffer.append(TEXT_114);
d711 1
a711 1
    stringBuffer.append(TEXT_115);
d713 1
a713 1
    stringBuffer.append(TEXT_116);
d724 1
a724 1
    stringBuffer.append(TEXT_117);
d744 1
a744 1
    stringBuffer.append(TEXT_118);
d746 1
a746 1
    stringBuffer.append(TEXT_119);
d748 1
a748 1
    stringBuffer.append(TEXT_120);
d750 1
a750 1
    stringBuffer.append(TEXT_121);
d758 1
a758 1
    stringBuffer.append(TEXT_122);
d760 1
a760 1
    stringBuffer.append(TEXT_123);
d764 1
a764 1
    stringBuffer.append(TEXT_124);
d766 1
a766 1
    stringBuffer.append(TEXT_125);
d774 1
a774 1
    stringBuffer.append(TEXT_126);
d779 1
a779 1
    stringBuffer.append(TEXT_127);
d781 1
a781 1
    stringBuffer.append(TEXT_128);
d783 1
a783 1
    stringBuffer.append(TEXT_129);
@


1.29
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d26 1
a26 1
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(completedRequest.getEditHelperContext());" + NL + "\t\tCommand semanticHelperCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand semanticCommand = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (semanticCommand != null) {" + NL + "\t\t\t\tsemanticHelperCommand = new EtoolsProxyCommand(semanticCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tCommand semanticPolicyCommand = getSemanticCommandSwitch(completedRequest);" + NL + "" + NL + "\t\t// combine commands from edit policy and edit helper" + NL + "\t\tif (semanticPolicyCommand == null) {" + NL + "\t\t\tif (semanticHelperCommand == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticHelperCommand;" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tif (semanticHelperCommand != null) {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(semanticHelperCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t// append command to delete view if necessary" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tCommand deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(((IGraphicalEditPart) getHost()).getEditingDomain(), (View) getHost().getModel()));" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticPolicyCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
@


1.28
log
@#126202 use commands from edit helpers
@
text
@d23 126
a148 127
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tIElementType elementType = ElementTypeRegistry.getInstance().getElementType(completedRequest.getEditHelperContext());" + NL + "\t\tCommand semanticHelperCommand = null;" + NL + "\t\tif (elementType != null) {" + NL + "\t\t\tICommand semanticCommand = elementType.getEditCommand(completedRequest);" + NL + "\t\t\tif (semanticCommand != null) {" + NL + "\t\t\t\tsemanticHelperCommand = new EtoolsProxyCommand(semanticCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tCommand semanticPolicyCommand = getSemanticCommandSwitch(completedRequest);" + NL + "" + NL + "\t\t// combine commands from edit policy and edit helper" + NL + "\t\tif (semanticPolicyCommand == null) {" + NL + "\t\t\tif (semanticHelperCommand == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t} else {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticHelperCommand;" + NL + "\t\t\t}" + NL + "\t\t} else {" + NL + "\t\t\tif (semanticHelperCommand != null) {" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(semanticHelperCommand);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t// append command to delete view if necessary" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tCommand deleteViewCommand = new EtoolsProxyCommand(new DeleteCommand(((IGraphicalEditPart) getHost()).getEditingDomain(), (View) getHost().getModel()));" + NL + "\t\t\t\tsemanticPolicyCommand = semanticPolicyCommand.chain(deleteViewCommand);" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticPolicyCommand;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_10 = " {";
  protected final String TEXT_11 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_12 = " ";
  protected final String TEXT_13 = " = create";
  protected final String TEXT_14 = "();";
  protected final String TEXT_15 = NL;
  protected final String TEXT_16 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_17 = " create";
  protected final String TEXT_18 = "() {";
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = " ";
  protected final String TEXT_21 = " = new ";
  protected final String TEXT_22 = "(3);";
  protected final String TEXT_23 = ".put(\"";
  protected final String TEXT_24 = "\", ";
  protected final String TEXT_25 = "); //$NON-NLS-1$";
  protected final String TEXT_26 = "\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_27 = " sourceExpression = ";
  protected final String TEXT_28 = "null";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = "(\"";
  protected final String TEXT_31 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_32 = ", ";
  protected final String TEXT_33 = ")";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = "(\"";
  protected final String TEXT_36 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_37 = ")";
  protected final String TEXT_38 = "new ";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_41 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_42 = " self = (";
  protected final String TEXT_43 = ")context;";
  protected final String TEXT_44 = "\t" + NL + "\t\t";
  protected final String TEXT_45 = " ";
  protected final String TEXT_46 = " = (";
  protected final String TEXT_47 = ")env.get(\"";
  protected final String TEXT_48 = "\"); //$NON-NLS-1$";
  protected final String TEXT_49 = NL + "\t\treturn ";
  protected final String TEXT_50 = ".";
  protected final String TEXT_51 = "(self";
  protected final String TEXT_52 = ", ";
  protected final String TEXT_53 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_54 = "null";
  protected final String TEXT_55 = ";";
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = " ";
  protected final String TEXT_58 = " = new ";
  protected final String TEXT_59 = "(3);";
  protected final String TEXT_60 = ".put(\"";
  protected final String TEXT_61 = "\", ";
  protected final String TEXT_62 = "); //$NON-NLS-1$";
  protected final String TEXT_63 = NL + "\t\t\t";
  protected final String TEXT_64 = " targetExpression = ";
  protected final String TEXT_65 = "null";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "(\"";
  protected final String TEXT_68 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_69 = ", ";
  protected final String TEXT_70 = ")";
  protected final String TEXT_71 = ".";
  protected final String TEXT_72 = "(\"";
  protected final String TEXT_73 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_74 = ")";
  protected final String TEXT_75 = "new ";
  protected final String TEXT_76 = "(";
  protected final String TEXT_77 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_78 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_79 = " self = (";
  protected final String TEXT_80 = ")context;";
  protected final String TEXT_81 = "\t" + NL + "\t\t";
  protected final String TEXT_82 = " ";
  protected final String TEXT_83 = " = (";
  protected final String TEXT_84 = ")env.get(\"";
  protected final String TEXT_85 = "\"); //$NON-NLS-1$";
  protected final String TEXT_86 = NL + "\t\treturn ";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = "(self";
  protected final String TEXT_89 = ", ";
  protected final String TEXT_90 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_91 = "null";
  protected final String TEXT_92 = ";" + NL + "\t\t\treturn new ";
  protected final String TEXT_93 = "(sourceExpression, targetExpression);" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_95 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_96 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_97 = "(";
  protected final String TEXT_98 = " sourceEnd, ";
  protected final String TEXT_99 = " targetEnd) {" + NL + "\t\t\tthis.srcEndInv = sourceEnd;\t\t\t" + NL + "\t\t\tthis.targetEndInv = targetEnd;\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_100 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_101 = " sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\t";
  protected final String TEXT_102 = " targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_103 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_104 = " evalEnv = ";
  protected final String TEXT_105 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_106 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_107 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ";
  protected final String TEXT_108 = " {";
  protected final String TEXT_109 = NL;
  protected final String TEXT_110 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_111 = " ";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = " self";
  protected final String TEXT_114 = ", ";
  protected final String TEXT_115 = " ";
  protected final String TEXT_116 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_117 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_120 = " ";
  protected final String TEXT_121 = "(";
  protected final String TEXT_122 = " self";
  protected final String TEXT_123 = ", ";
  protected final String TEXT_124 = " ";
  protected final String TEXT_125 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_126 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_127 = NL + "\t} // ";
  protected final String TEXT_128 = "\t\t" + NL + "\t}";
  protected final String TEXT_129 = "\t" + NL + "}";
  protected final String TEXT_130 = NL;
d250 2
a251 2
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
d262 1
a263 2
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
    stringBuffer.append(TEXT_5);
d269 2
d272 1
a272 1
    importManager.markImportLocation(stringBuffer);
a273 2
    stringBuffer.append(genDiagram.getBaseItemSemanticEditPolicyClassName());
    stringBuffer.append(TEXT_8);
d281 2
a283 2
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_10);
d292 2
d295 1
a295 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
a298 2
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_14);
d302 1
a302 1
    stringBuffer.append(TEXT_15);
d312 2
d315 1
a315 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
a316 2
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
    stringBuffer.append(TEXT_18);
d336 2
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d341 1
a341 1
    stringBuffer.append(__outEnvVarName);
a342 2
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_22);
d351 2
d354 1
a354 1
    stringBuffer.append(nextVariableName);
a355 2
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_25);
d363 2
a365 2
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_27);
d384 1
a384 1
    stringBuffer.append(TEXT_28);
d393 2
d396 1
a396 1
    stringBuffer.append(__expressionAccessor);
d398 1
a398 1
    stringBuffer.append(__genValueExpression.getBody());
d400 1
a400 1
    stringBuffer.append(__ctxEClassifierAccess);
a401 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_33);
d406 2
d409 1
a409 1
    stringBuffer.append(__expressionAccessor);
d411 1
a411 1
    stringBuffer.append(__genValueExpression.getBody());
a412 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_37);
d420 2
d423 1
a423 1
    stringBuffer.append(__importedAbstractClass);
d425 1
a425 1
    stringBuffer.append(__ctxEClassifierAccess);
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a430 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_43);
d437 2
d440 2
d443 1
a443 1
    stringBuffer.append(TEXT_45);
a444 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d446 1
a446 1
    stringBuffer.append(nextVariableName);
a447 2
    		} 
    stringBuffer.append(TEXT_49);
d451 1
a451 1
    stringBuffer.append(TEXT_50);
d455 1
a455 1
    stringBuffer.append(TEXT_51);
d458 1
a458 1
    stringBuffer.append(TEXT_52);
d461 1
a461 1
    stringBuffer.append(TEXT_53);
d466 2
a468 2
    ;
    stringBuffer.append(TEXT_55);
d485 2
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d490 1
a490 1
    stringBuffer.append(__outEnvVarName);
a491 2
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_59);
d500 2
d503 1
a503 1
    stringBuffer.append(nextVariableName);
a504 2
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_62);
d512 2
a514 2
    stringBuffer.append(importedAbstractExprCls);
    stringBuffer.append(TEXT_64);
d533 1
a533 1
    stringBuffer.append(TEXT_65);
d542 2
d545 1
a545 1
    stringBuffer.append(__expressionAccessor);
d547 1
a547 1
    stringBuffer.append(__genValueExpression.getBody());
d549 1
a549 1
    stringBuffer.append(__ctxEClassifierAccess);
a550 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_70);
d555 2
d558 1
a558 1
    stringBuffer.append(__expressionAccessor);
d560 1
a560 1
    stringBuffer.append(__genValueExpression.getBody());
a561 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_74);
d569 2
d572 1
a572 1
    stringBuffer.append(__importedAbstractClass);
d574 1
a574 1
    stringBuffer.append(__ctxEClassifierAccess);
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a579 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_80);
d586 2
d589 2
d592 1
a592 1
    stringBuffer.append(TEXT_82);
a593 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d595 1
a595 1
    stringBuffer.append(nextVariableName);
a596 2
    		} 
    stringBuffer.append(TEXT_86);
d600 1
a600 1
    stringBuffer.append(TEXT_87);
d604 1
a604 1
    stringBuffer.append(TEXT_88);
d607 1
a607 1
    stringBuffer.append(TEXT_89);
d610 1
a610 1
    stringBuffer.append(TEXT_90);
d615 2
d618 1
a618 1
    ;
a619 2
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_93);
d623 2
d628 2
a630 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d634 2
a636 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest"));
d642 1
a642 1
    stringBuffer.append(importedAbstractExprCls);
d644 1
a644 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a647 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_106);
d651 2
a653 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_108);
d668 1
a668 1
    stringBuffer.append(TEXT_109);
d688 2
d691 1
a691 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d693 1
a693 1
    stringBuffer.append(__exprJavaOperName);
a694 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_113);
d702 2
a704 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_115);
d708 2
a710 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_117);
d721 1
a721 1
    stringBuffer.append(TEXT_118);
d741 2
d744 1
a744 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d746 1
a746 1
    stringBuffer.append(__exprJavaOperName);
a747 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_122);
d755 2
a757 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_124);
d761 2
a763 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_126);
d771 1
a771 1
    stringBuffer.append(TEXT_127);
d776 2
d779 1
a779 1
    } /*end of hasLinkCreationConstraints()*/ 
a780 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_130);
@


1.27
log
@#126202 enable semantic policy override from edit helpers
@
text
@d25 125
a149 124
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tCommand elementTypeCommand = super.getSemanticCommand(request);" + NL + "\t\tif (elementTypeCommand != null) {" + NL + "\t\t\treturn elementTypeCommand;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand = semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_9 = " {";
  protected final String TEXT_10 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_11 = " ";
  protected final String TEXT_12 = " = create";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static ";
  protected final String TEXT_16 = " create";
  protected final String TEXT_17 = "() {";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = " ";
  protected final String TEXT_20 = " = new ";
  protected final String TEXT_21 = "(3);";
  protected final String TEXT_22 = ".put(\"";
  protected final String TEXT_23 = "\", ";
  protected final String TEXT_24 = "); //$NON-NLS-1$";
  protected final String TEXT_25 = "\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_26 = " sourceExpression = ";
  protected final String TEXT_27 = "null";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "(\"";
  protected final String TEXT_30 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_31 = ", ";
  protected final String TEXT_32 = ")";
  protected final String TEXT_33 = ".";
  protected final String TEXT_34 = "(\"";
  protected final String TEXT_35 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_36 = ")";
  protected final String TEXT_37 = "new ";
  protected final String TEXT_38 = "(";
  protected final String TEXT_39 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_40 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_41 = " self = (";
  protected final String TEXT_42 = ")context;";
  protected final String TEXT_43 = "\t" + NL + "\t\t";
  protected final String TEXT_44 = " ";
  protected final String TEXT_45 = " = (";
  protected final String TEXT_46 = ")env.get(\"";
  protected final String TEXT_47 = "\"); //$NON-NLS-1$";
  protected final String TEXT_48 = NL + "\t\treturn ";
  protected final String TEXT_49 = ".";
  protected final String TEXT_50 = "(self";
  protected final String TEXT_51 = ", ";
  protected final String TEXT_52 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_53 = "null";
  protected final String TEXT_54 = ";";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = " ";
  protected final String TEXT_57 = " = new ";
  protected final String TEXT_58 = "(3);";
  protected final String TEXT_59 = ".put(\"";
  protected final String TEXT_60 = "\", ";
  protected final String TEXT_61 = "); //$NON-NLS-1$";
  protected final String TEXT_62 = NL + "\t\t\t";
  protected final String TEXT_63 = " targetExpression = ";
  protected final String TEXT_64 = "null";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = "(\"";
  protected final String TEXT_67 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_68 = ", ";
  protected final String TEXT_69 = ")";
  protected final String TEXT_70 = ".";
  protected final String TEXT_71 = "(\"";
  protected final String TEXT_72 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_73 = ")";
  protected final String TEXT_74 = "new ";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_77 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_78 = " self = (";
  protected final String TEXT_79 = ")context;";
  protected final String TEXT_80 = "\t" + NL + "\t\t";
  protected final String TEXT_81 = " ";
  protected final String TEXT_82 = " = (";
  protected final String TEXT_83 = ")env.get(\"";
  protected final String TEXT_84 = "\"); //$NON-NLS-1$";
  protected final String TEXT_85 = NL + "\t\treturn ";
  protected final String TEXT_86 = ".";
  protected final String TEXT_87 = "(self";
  protected final String TEXT_88 = ", ";
  protected final String TEXT_89 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_90 = "null";
  protected final String TEXT_91 = ";" + NL + "\t\t\treturn new ";
  protected final String TEXT_92 = "(sourceExpression, targetExpression);" + NL + "\t\t}";
  protected final String TEXT_93 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_94 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_95 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_96 = "(";
  protected final String TEXT_97 = " sourceEnd, ";
  protected final String TEXT_98 = " targetEnd) {" + NL + "\t\t\tthis.srcEndInv = sourceEnd;\t\t\t" + NL + "\t\t\tthis.targetEndInv = targetEnd;\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_99 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_100 = " sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\t";
  protected final String TEXT_101 = " targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_102 = " constraint, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_103 = " evalEnv = ";
  protected final String TEXT_104 = ".singletonMap(OPPOSITE_END_VAR, oppositeEnd);\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = constraint.evaluate(sourceEnd, evalEnv);" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean) val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_105 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_106 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ";
  protected final String TEXT_107 = " {";
  protected final String TEXT_108 = NL;
  protected final String TEXT_109 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_110 = " ";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = " self";
  protected final String TEXT_113 = ", ";
  protected final String TEXT_114 = " ";
  protected final String TEXT_115 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_116 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_117 = NL;
  protected final String TEXT_118 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_119 = " ";
  protected final String TEXT_120 = "(";
  protected final String TEXT_121 = " self";
  protected final String TEXT_122 = ", ";
  protected final String TEXT_123 = " ";
  protected final String TEXT_124 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_125 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_126 = NL + "\t} // ";
  protected final String TEXT_127 = "\t\t" + NL + "\t}";
  protected final String TEXT_128 = "\t" + NL + "}";
  protected final String TEXT_129 = NL;
a270 29
importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.gef.commands.Command");
importManager.addImport("org.eclipse.gef.commands.UnexecutableCommand");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.ICommand");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IElementType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

importManager.markImportLocation(stringBuffer);
d272 2
d275 1
a275 1
    stringBuffer.append(TEXT_7);
d283 1
a283 1
    stringBuffer.append(TEXT_8);
d285 1
a285 1
    stringBuffer.append(TEXT_9);
d294 1
a294 1
    stringBuffer.append(TEXT_10);
a295 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
d299 2
d304 1
a304 1
    stringBuffer.append(TEXT_14);
d314 1
a314 1
    stringBuffer.append(TEXT_15);
d316 1
a316 1
    stringBuffer.append(TEXT_16);
d318 1
a318 1
    stringBuffer.append(TEXT_17);
d338 1
a338 1
    stringBuffer.append(TEXT_18);
d340 1
a340 1
    stringBuffer.append(TEXT_19);
d342 1
a342 1
    stringBuffer.append(TEXT_20);
d344 1
a344 1
    stringBuffer.append(TEXT_21);
d353 1
a353 1
    stringBuffer.append(TEXT_22);
d355 1
a355 1
    stringBuffer.append(TEXT_23);
d357 1
a357 1
    stringBuffer.append(TEXT_24);
d365 1
a365 1
    stringBuffer.append(TEXT_25);
d367 1
a367 1
    stringBuffer.append(TEXT_26);
d386 1
a386 1
    stringBuffer.append(TEXT_27);
d395 1
a395 1
    stringBuffer.append(TEXT_28);
d397 1
a397 1
    stringBuffer.append(TEXT_29);
d399 1
a399 1
    stringBuffer.append(TEXT_30);
d401 1
a401 1
    stringBuffer.append(TEXT_31);
d403 1
a403 1
    stringBuffer.append(TEXT_32);
d408 1
a408 1
    stringBuffer.append(TEXT_33);
d410 1
a410 1
    stringBuffer.append(TEXT_34);
d412 1
a412 1
    stringBuffer.append(TEXT_35);
d414 1
a414 1
    stringBuffer.append(TEXT_36);
d422 1
a422 1
    stringBuffer.append(TEXT_37);
d424 1
a424 1
    stringBuffer.append(TEXT_38);
d426 1
a426 1
    stringBuffer.append(TEXT_39);
a427 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d431 2
d439 1
a439 1
    stringBuffer.append(TEXT_43);
d441 1
a441 1
    stringBuffer.append(TEXT_44);
d443 1
a443 1
    stringBuffer.append(TEXT_45);
d445 1
a445 1
    stringBuffer.append(TEXT_46);
d447 1
a447 1
    stringBuffer.append(TEXT_47);
d449 1
a449 1
    stringBuffer.append(TEXT_48);
d453 1
a453 1
    stringBuffer.append(TEXT_49);
d457 1
a457 1
    stringBuffer.append(TEXT_50);
d460 1
a460 1
    stringBuffer.append(TEXT_51);
d463 1
a463 1
    stringBuffer.append(TEXT_52);
d468 1
a468 1
    stringBuffer.append(TEXT_53);
d470 1
a470 1
    stringBuffer.append(TEXT_54);
d487 1
a487 1
    stringBuffer.append(TEXT_55);
d489 1
a489 1
    stringBuffer.append(TEXT_56);
d491 1
a491 1
    stringBuffer.append(TEXT_57);
d493 1
a493 1
    stringBuffer.append(TEXT_58);
d502 1
a502 1
    stringBuffer.append(TEXT_59);
d504 1
a504 1
    stringBuffer.append(TEXT_60);
d506 1
a506 1
    stringBuffer.append(TEXT_61);
d514 1
a514 1
    stringBuffer.append(TEXT_62);
d516 1
a516 1
    stringBuffer.append(TEXT_63);
d535 1
a535 1
    stringBuffer.append(TEXT_64);
d544 1
a544 1
    stringBuffer.append(TEXT_65);
d546 1
a546 1
    stringBuffer.append(TEXT_66);
d548 1
a548 1
    stringBuffer.append(TEXT_67);
d550 1
a550 1
    stringBuffer.append(TEXT_68);
d552 1
a552 1
    stringBuffer.append(TEXT_69);
d557 1
a557 1
    stringBuffer.append(TEXT_70);
d559 1
a559 1
    stringBuffer.append(TEXT_71);
d561 1
a561 1
    stringBuffer.append(TEXT_72);
d563 1
a563 1
    stringBuffer.append(TEXT_73);
d571 1
a571 1
    stringBuffer.append(TEXT_74);
d573 1
a573 1
    stringBuffer.append(TEXT_75);
d575 1
a575 1
    stringBuffer.append(TEXT_76);
a576 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d580 2
d588 1
a588 1
    stringBuffer.append(TEXT_80);
d590 1
a590 1
    stringBuffer.append(TEXT_81);
d592 1
a592 1
    stringBuffer.append(TEXT_82);
d594 1
a594 1
    stringBuffer.append(TEXT_83);
d596 1
a596 1
    stringBuffer.append(TEXT_84);
d598 1
a598 1
    stringBuffer.append(TEXT_85);
d602 1
a602 1
    stringBuffer.append(TEXT_86);
d606 1
a606 1
    stringBuffer.append(TEXT_87);
d609 1
a609 1
    stringBuffer.append(TEXT_88);
d612 1
a612 1
    stringBuffer.append(TEXT_89);
d617 1
a617 1
    stringBuffer.append(TEXT_90);
d619 1
a619 1
    stringBuffer.append(TEXT_91);
d621 1
a621 1
    stringBuffer.append(TEXT_92);
a624 2
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importedAbstractExprCls);
d628 2
a630 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importedAbstractExprCls);
d634 2
a636 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importedAbstractExprCls);
d642 2
d645 1
a645 1
    stringBuffer.append(TEXT_103);
d647 1
a647 1
    stringBuffer.append(TEXT_104);
d649 1
a649 1
    stringBuffer.append(TEXT_105);
d653 1
a653 1
    stringBuffer.append(TEXT_106);
d655 1
a655 1
    stringBuffer.append(TEXT_107);
d670 1
a670 1
    stringBuffer.append(TEXT_108);
d690 1
a690 1
    stringBuffer.append(TEXT_109);
d692 1
a692 1
    stringBuffer.append(TEXT_110);
d694 1
a694 1
    stringBuffer.append(TEXT_111);
d696 1
a696 1
    stringBuffer.append(TEXT_112);
d704 1
a704 1
    stringBuffer.append(TEXT_113);
d706 1
a706 1
    stringBuffer.append(TEXT_114);
d710 1
a710 1
    stringBuffer.append(TEXT_115);
d712 1
a712 1
    stringBuffer.append(TEXT_116);
d723 1
a723 1
    stringBuffer.append(TEXT_117);
d743 1
a743 1
    stringBuffer.append(TEXT_118);
d745 1
a745 1
    stringBuffer.append(TEXT_119);
d747 1
a747 1
    stringBuffer.append(TEXT_120);
d749 1
a749 1
    stringBuffer.append(TEXT_121);
d757 1
a757 1
    stringBuffer.append(TEXT_122);
d759 1
a759 1
    stringBuffer.append(TEXT_123);
d763 1
a763 1
    stringBuffer.append(TEXT_124);
d765 1
a765 1
    stringBuffer.append(TEXT_125);
d773 1
a773 1
    stringBuffer.append(TEXT_126);
d778 1
a778 1
    stringBuffer.append(TEXT_127);
d780 1
a780 1
    stringBuffer.append(TEXT_128);
d782 1
a782 1
    stringBuffer.append(TEXT_129);
@


1.26
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d26 1
a26 1
  protected final String TEXT_7 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand = semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
@


1.25
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@d444 1
a444 1
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
d463 1
a463 1
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
d593 1
a593 1
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
d612 1
a612 1
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
d706 1
a706 1
	String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
a711 2
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) 
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
d713 1
a713 1
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d727 1
a727 1
		String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
d759 1
a759 1
	String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
a764 2
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) 
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
d766 1
a766 1
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d780 1
a780 1
		String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
@


1.24
log
@using M6 to generate code.
@
text
@d24 1
a24 1
  protected final String TEXT_5 = ";" + NL + "" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d31 118
a148 34
  protected final String TEXT_12 = " = new ";
  protected final String TEXT_13 = "(" + NL + "\t\t\tnew LinkEndConstraint(" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ", //$NON-NLS-1$" + NL + "\t\t\t\t";
  protected final String TEXT_15 = ")," + NL + "\t\t\tnew LinkEndConstraint(" + NL + "\t\t\t\t";
  protected final String TEXT_16 = ", //$NON-NLS-1$" + NL + "\t\t\t\t";
  protected final String TEXT_17 = "));";
  protected final String TEXT_18 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_19 = " varOppositeEndToSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_20 = " varOppositeEndToTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_21 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_22 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_23 = "(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd) {\t\t\t" + NL + "\t\t\tif(sourceEnd != null && sourceEnd.context != null && sourceEnd.body != null) {\t\t\t\t" + NL + "\t\t\t\tif(targetEnd != null && targetEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToTarget = createVar(OPPOSITE_END_VAR, targetEnd.context);\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.srcEndInv = createQuery(sourceEnd, varOppositeEndToTarget);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(targetEnd != null && targetEnd.context != null && targetEnd.body != null) {" + NL + "\t\t\t\tif(sourceEnd != null && sourceEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToSource = createVar(OPPOSITE_END_VAR, sourceEnd.context);\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.targetEndInv = createQuery(targetEnd, varOppositeEndToSource);\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_24 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\tQuery sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\tQuery targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate Query createQuery(LinkEndConstraint constraint, ";
  protected final String TEXT_25 = " oppositeEndDecl) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_26 = " oppositeEndDeclLocal = oppositeEndDecl;" + NL + "\t\t\ttry {\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_27 = " oclHelper = " + NL + "\t\t\t\t\t";
  protected final String TEXT_28 = ".createOCLHelper(new ";
  protected final String TEXT_29 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_30 = " createClassifierContext(Object context) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_31 = " env = super.createClassifierContext(context);" + NL + "\t\t\t\t\t\tif(oppositeEndDeclLocal != null) {" + NL + "\t\t\t\t\t\t\tenv.addElement(oppositeEndDeclLocal.getName(), oppositeEndDeclLocal, true);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn env;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\toclHelper.setContext(constraint.context);" + NL + "\t\t\t\treturn ";
  protected final String TEXT_32 = ".eINSTANCE.createQuery(oclHelper.createInvariant(constraint.body));" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(\"Link constraint expression error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_34 = " query, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_35 = " evalEnv = query.getEvaluationEnvironment();" + NL + "\t\t\tevalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = query.evaluate(sourceEnd);\t\t\t" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_36 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_37 = " createVar(String name, ";
  protected final String TEXT_38 = " type) {" + NL + "\t\t\t";
  protected final String TEXT_39 = " var = ";
  protected final String TEXT_40 = ".eINSTANCE.createVariable();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
  protected final String TEXT_41 = ".getOCLType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
  protected final String TEXT_42 = " context;" + NL + "\t\tfinal String body;" + NL + "\t\tLinkEndConstraint(String body, ";
  protected final String TEXT_43 = " context) {" + NL + "\t\t\tthis.context = context;" + NL + "\t\t\tthis.body = body;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_44 = "\t" + NL + "}";
  protected final String TEXT_45 = NL;
d265 34
a298 1
    importManager.markImportLocation(stringBuffer);
d303 2
a304 1
if (genDiagram.hasLinkCreationConstraints()) {
d306 2
d314 5
a318 7
		GenLink nextLink = (GenLink) it.next();
		GenLinkConstraints linkConstraints = nextLink.getCreationConstraints();
		if(linkConstraints != null) {						
			String srcConstraint = linkConstraints.getSourceEnd() != null ? linkConstraints.getSourceEnd().getBody() : null;
			String targetConstraint = linkConstraints.getTargetEnd() != null ? linkConstraints.getTargetEnd().getBody(): null;
			GenClass srcContext = linkConstraints.getSourceEndContextClass();
			GenClass targetContext = linkConstraints.getTargetEndContextClass();
d325 1
a325 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d327 3
a329 1
    stringBuffer.append(srcConstraint != null ? "\"" + srcConstraint + "\"" : null);
d331 9
a339 1
    stringBuffer.append((srcContext!=null) ? getMetaClassAccessor(srcContext, importManager) : null);
d341 1
a341 1
    stringBuffer.append(targetConstraint != null ? "\"" + targetConstraint + "\"" : null);
d343 1
a343 1
    stringBuffer.append((targetContext!=null) ? getMetaClassAccessor(targetContext, importManager) : null);
d345 9
d355 8
a362 2
		} // end of LinkConstraints if
	} // end of link iteration
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable"));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d371 8
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d380 1
a380 1
    stringBuffer.append(genDiagram.getLinkCreationConstraintsClassName());
d382 1
a382 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest"));
d384 7
a390 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable"));
d392 1
a392 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable"));
d394 18
a411 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.IOCLHelper"));
d413 8
a420 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.HelperUtil"));
d422 1
a422 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory"));
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment"));
d426 1
a426 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment"));
d428 1
a428 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory"));
d430 4
a433 1
    stringBuffer.append(pluginActivatorClass);
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EvaluationEnvironment"));
d439 1
a439 1
    stringBuffer.append(pluginActivatorClass);
d441 7
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable"));
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.Variable"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.ExpressionsFactory"));
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironment"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d459 6
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d466 1
a466 1
    } //end of LinkConstraints 
d468 343
d812 1
a812 1
    stringBuffer.append(TEXT_45);
@


1.23
log
@restore generators
@
text
@d164 1
a164 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.22
log
@#134095 do not store compiled templates in cvs
@
text
@d164 1
a164 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.21
log
@Switching to eclipse M6.
@
text
@@


1.20
log
@#135156 Templates need small change for OCL API Changes

Patch commited.
@
text
@d164 1
a164 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.19
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d59 1
a59 1
  protected final String TEXT_40 = ".eINSTANCE.createVariableDeclaration();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d258 1
a258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d262 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
@


1.18
log
@Ocl -> OCL to fix compilation errors
@
text
@d20 45
a64 42
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand = semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tCompositeTransactionalCommand modelCmd = new CompositeTransactionalCommand(editingDomain, cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_5 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_6 = " {";
  protected final String TEXT_7 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_8 = " ";
  protected final String TEXT_9 = " = new ";
  protected final String TEXT_10 = "(" + NL + "\t\t\tnew LinkEndConstraint(" + NL + "\t\t\t\t";
  protected final String TEXT_11 = ", //$NON-NLS-1$" + NL + "\t\t\t\t";
  protected final String TEXT_12 = ")," + NL + "\t\t\tnew LinkEndConstraint(" + NL + "\t\t\t\t";
  protected final String TEXT_13 = ", //$NON-NLS-1$" + NL + "\t\t\t\t";
  protected final String TEXT_14 = "));";
  protected final String TEXT_15 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_16 = " varOppositeEndToSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_17 = " varOppositeEndToTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_18 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_19 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_20 = "(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd) {\t\t\t" + NL + "\t\t\tif(sourceEnd != null && sourceEnd.context != null && sourceEnd.body != null) {\t\t\t\t" + NL + "\t\t\t\tif(targetEnd != null && targetEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToTarget = createVar(OPPOSITE_END_VAR, targetEnd.context);\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.srcEndInv = createQuery(sourceEnd, varOppositeEndToTarget);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(targetEnd != null && targetEnd.context != null && targetEnd.body != null) {" + NL + "\t\t\t\tif(sourceEnd != null && sourceEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToSource = createVar(OPPOSITE_END_VAR, sourceEnd.context);\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.targetEndInv = createQuery(targetEnd, varOppositeEndToSource);\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_21 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\tQuery sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\tQuery targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate Query createQuery(LinkEndConstraint constraint, ";
  protected final String TEXT_22 = " oppositeEndDecl) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_23 = " oppositeEndDeclLocal = oppositeEndDecl;" + NL + "\t\t\ttry {\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_24 = " oclHelper = " + NL + "\t\t\t\t\t";
  protected final String TEXT_25 = ".createOCLHelper(new ";
  protected final String TEXT_26 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_27 = " createClassifierContext(Object context) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_28 = " env = super.createClassifierContext(context);" + NL + "\t\t\t\t\t\tif(oppositeEndDeclLocal != null) {" + NL + "\t\t\t\t\t\t\tenv.addElement(oppositeEndDeclLocal.getName(), oppositeEndDeclLocal, true);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn env;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\toclHelper.setContext(constraint.context);" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".eINSTANCE.createQuery(oclHelper.createInvariant(constraint.body));" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_30 = ".getInstance().logError(\"Link constraint expression error\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_31 = " query, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_32 = " evalEnv = query.getEvaluationEnvironment();" + NL + "\t\t\tevalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = query.evaluate(sourceEnd);\t\t\t" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(\"Link constraint evaluation error\", e); //$NON-NLS-1$" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_34 = " createVar(String name, ";
  protected final String TEXT_35 = " type) {" + NL + "\t\t\t";
  protected final String TEXT_36 = " var = ";
  protected final String TEXT_37 = ".eINSTANCE.createVariableDeclaration();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
  protected final String TEXT_38 = ".getOCLType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
  protected final String TEXT_39 = " context;" + NL + "\t\tfinal String body;" + NL + "\t\tLinkEndConstraint(String body, ";
  protected final String TEXT_40 = " context) {" + NL + "\t\t\tthis.context = context;" + NL + "\t\t\tthis.body = body;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_41 = "\t" + NL + "}";
  protected final String TEXT_42 = NL;
d166 2
a167 2
GenDiagram diagram = (GenDiagram) ((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(diagram.getEditPoliciesPackageName());
d170 4
a173 1
    stringBuffer.append(diagram.getEditPoliciesPackageName());
d175 1
a175 1
    importManager.markImportLocation(stringBuffer);
d177 1
a177 1
    stringBuffer.append(diagram.getBaseItemSemanticEditPolicyClassName());
d179 6
d186 2
a187 2
if(diagram.hasLinkCreationConstraints()) {
	String pluginActivatorClass = importManager.getImportedName(diagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d189 3
a191 3
    stringBuffer.append(TEXT_5);
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_6);
d193 1
a193 1
	for (Iterator it = diagram.getLinks().iterator(); it.hasNext();) {
d202 3
a204 3
    stringBuffer.append(TEXT_7);
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_8);
d206 3
a208 3
    stringBuffer.append(TEXT_9);
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_10);
d210 1
a210 1
    stringBuffer.append(TEXT_11);
d212 1
a212 1
    stringBuffer.append(TEXT_12);
d214 1
a214 1
    stringBuffer.append(TEXT_13);
d216 1
a216 1
    stringBuffer.append(TEXT_14);
d221 1
a221 1
    stringBuffer.append(TEXT_15);
d223 1
a223 1
    stringBuffer.append(TEXT_16);
d225 1
a225 1
    stringBuffer.append(TEXT_17);
d227 1
a227 1
    stringBuffer.append(TEXT_18);
d229 3
a231 3
    stringBuffer.append(TEXT_19);
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_20);
d233 1
a233 1
    stringBuffer.append(TEXT_21);
d235 1
a235 1
    stringBuffer.append(TEXT_22);
d237 1
a237 1
    stringBuffer.append(TEXT_23);
d239 1
a239 1
    stringBuffer.append(TEXT_24);
d241 1
a241 1
    stringBuffer.append(TEXT_25);
d243 1
a243 1
    stringBuffer.append(TEXT_26);
d245 1
a245 1
    stringBuffer.append(TEXT_27);
d247 1
a247 1
    stringBuffer.append(TEXT_28);
d249 1
a249 1
    stringBuffer.append(TEXT_29);
d251 1
a251 1
    stringBuffer.append(TEXT_30);
d253 1
a253 1
    stringBuffer.append(TEXT_31);
d255 1
a255 1
    stringBuffer.append(TEXT_32);
d257 1
a257 1
    stringBuffer.append(TEXT_33);
d259 1
a259 1
    stringBuffer.append(TEXT_34);
d261 1
a261 1
    stringBuffer.append(TEXT_35);
d263 1
a263 1
    stringBuffer.append(TEXT_36);
d265 1
a265 1
    stringBuffer.append(TEXT_37);
d267 1
a267 1
    stringBuffer.append(TEXT_38);
d269 1
a269 1
    stringBuffer.append(TEXT_39);
d271 1
a271 1
    stringBuffer.append(TEXT_40);
d273 1
a273 1
    stringBuffer.append(TEXT_41);
d275 1
a275 1
    stringBuffer.append(TEXT_42);
@


1.17
log
@[rdvorak] #128087 - Migrate to EMFT OCL API changes - #125458, 125684
@
text
@d44 1
a44 1
  protected final String TEXT_25 = ".createOclHelper(new ";
d57 1
a57 1
  protected final String TEXT_38 = ".getOclType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
@


1.16
log
@use new transactional emf api
@
text
@d49 1
a49 1
  protected final String TEXT_30 = ".getInstance().logError(null, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
d52 1
a52 1
  protected final String TEXT_33 = ".getInstance().logError(null, e);\t" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.IOclHelper"));
@


1.15
log
@Rollback. Sources should be compatible with stable build of EMFT.
@
text
@d21 1
a21 1
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d23 1
a23 1
  protected final String TEXT_4 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand = semanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tCompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
@


1.14
log
@#127497 Creating diagram file by InitDiagramFileAction in arbitrary location
+ correcting the case of OCL-related classes
@
text
@a164 1
String pluginActivatorClass = importManager.getImportedName(diagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d175 1
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.IOCLHelper"));
@


1.13
log
@Updating with new transaction API.
@
text
@d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.IOclHelper"));
@


1.12
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d23 1
a23 1
  protected final String TEXT_4 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tCompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
@


1.11
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d63 1
a63 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d107 1
a107 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d150 1
a150 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d163 1
a163 1
GenDiagram diagram = (GenDiagram) argument;
@


1.10
log
@ImportManager moved to oeg.common
@
text
@d21 41
a61 42
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tCompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_6 = NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprotected static class ";
  protected final String TEXT_7 = " {";
  protected final String TEXT_8 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic static final ";
  protected final String TEXT_9 = " ";
  protected final String TEXT_10 = " = new ";
  protected final String TEXT_11 = "(" + NL + "\t\t\tnew LinkEndConstraint(" + NL + "\t\t\t\t";
  protected final String TEXT_12 = ", //$NON-NLS-1$" + NL + "\t\t\t\t";
  protected final String TEXT_13 = ")," + NL + "\t\t\tnew LinkEndConstraint(" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ", //$NON-NLS-1$" + NL + "\t\t\t\t";
  protected final String TEXT_15 = "));";
  protected final String TEXT_16 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_17 = " varOppositeEndToSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_18 = " varOppositeEndToTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_19 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_20 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_21 = "(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd) {\t\t\t" + NL + "\t\t\tif(sourceEnd != null && sourceEnd.context != null && sourceEnd.body != null) {\t\t\t\t" + NL + "\t\t\t\tif(targetEnd != null && targetEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToTarget = createVar(OPPOSITE_END_VAR, targetEnd.context);\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.srcEndInv = createQuery(sourceEnd, varOppositeEndToTarget);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(targetEnd != null && targetEnd.context != null && targetEnd.body != null) {" + NL + "\t\t\t\tif(sourceEnd != null && sourceEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToSource = createVar(OPPOSITE_END_VAR, sourceEnd.context);\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.targetEndInv = createQuery(targetEnd, varOppositeEndToSource);\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_22 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\tQuery sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\tQuery targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate Query createQuery(LinkEndConstraint constraint, ";
  protected final String TEXT_23 = " oppositeEndDecl) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_24 = " oppositeEndDeclLocal = oppositeEndDecl;" + NL + "\t\t\ttry {\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_25 = " oclHelper = " + NL + "\t\t\t\t\t";
  protected final String TEXT_26 = ".createOclHelper(new ";
  protected final String TEXT_27 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_28 = " createClassifierContext(Object context) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_29 = " env = super.createClassifierContext(context);" + NL + "\t\t\t\t\t\tif(oppositeEndDeclLocal != null) {" + NL + "\t\t\t\t\t\t\tenv.addElement(oppositeEndDeclLocal.getName(), oppositeEndDeclLocal, true);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn env;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\toclHelper.setContext(constraint.context);" + NL + "\t\t\t\treturn ";
  protected final String TEXT_30 = ".eINSTANCE.createQuery(oclHelper.createInvariant(constraint.body));" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_31 = ".getInstance().logError(null, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_32 = " query, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_33 = " evalEnv = query.getEvaluationEnvironment();" + NL + "\t\t\tevalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = query.evaluate(sourceEnd);\t\t\t" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(null, e);\t" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_35 = " createVar(String name, ";
  protected final String TEXT_36 = " type) {" + NL + "\t\t\t";
  protected final String TEXT_37 = " var = ";
  protected final String TEXT_38 = ".eINSTANCE.createVariableDeclaration();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
  protected final String TEXT_39 = ".getOclType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
  protected final String TEXT_40 = " context;" + NL + "\t\tfinal String body;" + NL + "\t\tLinkEndConstraint(String body, ";
  protected final String TEXT_41 = " context) {" + NL + "\t\t\tthis.context = context;" + NL + "\t\t\tthis.body = body;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_42 = "\t" + NL + "}";
  protected final String TEXT_43 = NL;
d162 5
a166 1
    GenDiagram diagram = (GenDiagram) argument;
d170 1
a170 1
    ImportUtil importManager = new ImportUtil(diagram.getEditPoliciesPackageName());
d172 1
a172 1
    importManager.markImportLocation(stringBuffer);
a173 2
    stringBuffer.append(diagram.getBaseItemSemanticEditPolicyClassName());
    stringBuffer.append(TEXT_5);
d177 2
a179 2
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
    stringBuffer.append(TEXT_7);
d190 2
d193 2
a195 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(linkConstraints.getConstraintsInstanceFieldName());
d197 1
a197 1
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
d199 1
a199 1
    stringBuffer.append(srcConstraint != null ? "\"" + srcConstraint + "\"" : null);
d201 1
a201 1
    stringBuffer.append((srcContext!=null) ? getMetaClassAccessor(srcContext, importManager) : null);
d203 1
a203 1
    stringBuffer.append(targetConstraint != null ? "\"" + targetConstraint + "\"" : null);
a204 2
    stringBuffer.append((targetContext!=null) ? getMetaClassAccessor(targetContext, importManager) : null);
    stringBuffer.append(TEXT_15);
d209 2
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d220 1
a220 1
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.IOclHelper"));
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.helper.HelperUtil"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory"));
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment"));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory"));
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName(diagram.getPlugin().getActivatorQualifiedClassName()));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EvaluationEnvironment"));
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName(diagram.getPlugin().getActivatorQualifiedClassName()));
d248 2
a250 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.ExpressionsFactory"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironment"));
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d262 1
a262 1
    } //end of LinkConstraints 
a263 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_43);
@


1.9
log
@Introducing local variable to work around of merger problem - it removes "final" from the parameter on next re-generation.
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.8
log
@[rdvorak] #125848 Adapt to emft ocl changes in API
@
text
@d41 22
a62 21
  protected final String TEXT_22 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "" + NL + "\t\t\tQuery sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\tQuery targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate Query createQuery(LinkEndConstraint constraint, final ";
  protected final String TEXT_23 = " oppositeEndDecl) {" + NL + "\t\t\ttry {\t\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_24 = " oclHelper = " + NL + "\t\t\t\t\t";
  protected final String TEXT_25 = ".createOclHelper(new ";
  protected final String TEXT_26 = "() {" + NL + "\t\t\t\t\tpublic ";
  protected final String TEXT_27 = " createClassifierContext(Object context) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_28 = " env = super.createClassifierContext(context);" + NL + "\t\t\t\t\t\tif(oppositeEndDecl != null) {" + NL + "\t\t\t\t\t\t\tenv.addElement(oppositeEndDecl.getName(), oppositeEndDecl, true);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn env;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t\toclHelper.setContext(constraint.context);" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".eINSTANCE.createQuery(oclHelper.createInvariant(constraint.body));" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_30 = ".getInstance().logError(null, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_31 = " query, Object sourceEnd, Object oppositeEnd, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_32 = " evalEnv = query.getEvaluationEnvironment();" + NL + "\t\t\tevalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = query.evaluate(sourceEnd);\t\t\t" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(null, e);\t" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_34 = " createVar(String name, ";
  protected final String TEXT_35 = " type) {" + NL + "\t\t\t";
  protected final String TEXT_36 = " var = ";
  protected final String TEXT_37 = ".eINSTANCE.createVariableDeclaration();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
  protected final String TEXT_38 = ".getOclType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
  protected final String TEXT_39 = " context;" + NL + "\t\tfinal String body;" + NL + "\t\tLinkEndConstraint(String body, ";
  protected final String TEXT_40 = " context) {" + NL + "\t\t\tthis.context = context;" + NL + "\t\t\tthis.body = body;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_41 = "\t" + NL + "}";
  protected final String TEXT_42 = NL;
d223 2
d226 1
a226 1
    stringBuffer.append(TEXT_24);
d228 1
a228 1
    stringBuffer.append(TEXT_25);
a229 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.Environment"));
d233 2
d236 1
a236 1
    stringBuffer.append(TEXT_29);
d238 1
a238 1
    stringBuffer.append(TEXT_30);
d240 1
a240 1
    stringBuffer.append(TEXT_31);
d242 1
a242 1
    stringBuffer.append(TEXT_32);
d244 1
a244 1
    stringBuffer.append(TEXT_33);
d246 1
a246 1
    stringBuffer.append(TEXT_34);
d248 1
a248 1
    stringBuffer.append(TEXT_35);
d250 1
a250 1
    stringBuffer.append(TEXT_36);
d252 1
a252 1
    stringBuffer.append(TEXT_37);
a253 2
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d257 2
d260 1
a260 1
    stringBuffer.append(TEXT_41);
d262 1
a262 1
    stringBuffer.append(TEXT_42);
@


1.7
log
@#125893
Logging methods
@
text
@d34 28
a61 29
  protected final String TEXT_15 = ")," + NL + "\t\t\t\t";
  protected final String TEXT_16 = ");";
  protected final String TEXT_17 = NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String OPPOSITE_END_VAR = \"oppositeEnd\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate static final String LINK_VAR = \"link\"; //$NON-NLS-1$\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_18 = " varOppositeEndToSource;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_19 = " varOppositeEndToTarget;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_20 = " varLinkObject;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_21 = " srcEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate ";
  protected final String TEXT_22 = " targetEndInv;" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tpublic ";
  protected final String TEXT_23 = "(LinkEndConstraint sourceEnd, LinkEndConstraint targetEnd, ";
  protected final String TEXT_24 = " linkClass) {" + NL + "\t\t\tif(linkClass != null) {" + NL + "\t\t\t\tthis.varLinkObject = createVar(LINK_VAR, linkClass);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(sourceEnd != null && sourceEnd.context != null && sourceEnd.body != null) {\t\t\t\t" + NL + "\t\t\t\tif(targetEnd != null && targetEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToTarget = createVar(OPPOSITE_END_VAR, targetEnd.context);\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.srcEndInv = createQuery(sourceEnd, varOppositeEndToTarget);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(targetEnd != null && targetEnd.context != null && targetEnd.body != null) {" + NL + "\t\t\t\tif(sourceEnd != null && sourceEnd.context != null) {" + NL + "\t\t\t\t\tthis.varOppositeEndToSource = createVar(OPPOSITE_END_VAR, sourceEnd.context);\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tthis.targetEndInv = createQuery(targetEnd, varOppositeEndToSource);\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tpublic boolean canCreateLink(";
  protected final String TEXT_25 = " req, boolean isBackDirected) {" + NL + "\t\t\tObject source = req.getSource();" + NL + "\t\t\tObject target = req.getTarget();" + NL + "\t\t\tObject link = req.getNewElement(); " + NL + "\t\t\tQuery sourceConstraint = isBackDirected ? targetEndInv : srcEndInv;" + NL + "\t\t\tQuery targetConstraint = null;" + NL + "\t\t\tif(req.getTarget() != null) {" + NL + "\t\t\t\ttargetConstraint = isBackDirected ? srcEndInv : targetEndInv;" + NL + "\t\t\t}" + NL + "\t\t\tboolean isSourceAccepted = sourceConstraint != null ? evaluate(sourceConstraint, source, target, link, false) : true;" + NL + "\t\t\tif(isSourceAccepted && targetConstraint != null) {" + NL + "\t\t\t\treturn evaluate(targetConstraint, target, source, link, true);" + NL + "\t\t\t}" + NL + "\t\t\treturn isSourceAccepted;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t" + NL + "\t\tprivate Query createQuery(LinkEndConstraint constraint, ";
  protected final String TEXT_26 = " oppositeEndDecl) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_27 = " env = ";
  protected final String TEXT_28 = ".ECORE_INSTANCE.createClassifierContext(constraint.context);" + NL + "\t\t\t\tif(oppositeEndDecl != null) env.addElement(oppositeEndDecl.getName(), oppositeEndDecl, true);" + NL + "\t\t\t\tif(varLinkObject != null) env.addElement(LINK_VAR, varLinkObject, true);\t\t\t" + NL + "" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".eINSTANCE.createQuery(" + NL + "\t\t\t\t\t";
  protected final String TEXT_30 = ".createInvariant(env, constraint.body, true));" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_31 = ".getInstance().logError(null, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_32 = " query, Object sourceEnd, Object oppositeEnd, Object link, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_33 = " evalEnv = query.getEvaluationEnvironment();" + NL + "\t\t\tevalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);" + NL + "\t\t\tevalEnv.replace(LINK_VAR, link);\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = query.evaluate(sourceEnd);\t\t\t" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t" + NL + "\t\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(null, e);\t" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_35 = " createVar(String name, ";
  protected final String TEXT_36 = " type) {" + NL + "\t\t\t";
  protected final String TEXT_37 = " var = ";
  protected final String TEXT_38 = ".eINSTANCE.createVariableDeclaration();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
  protected final String TEXT_39 = ".getOclType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
  protected final String TEXT_40 = " context;" + NL + "\t\tfinal String body;" + NL + "\t\tLinkEndConstraint(String body, ";
  protected final String TEXT_41 = " context) {" + NL + "\t\t\tthis.context = context;" + NL + "\t\t\tthis.body = body;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_42 = "\t" + NL + "}";
  protected final String TEXT_43 = NL;
a186 1
			GenClass linkClass = linkConstraints.getLinkClass();
a202 2
    stringBuffer.append((linkClass!=null) ? getMetaClassAccessor(linkClass, importManager) : null);
    stringBuffer.append(TEXT_16);
d207 2
d212 1
a212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d216 1
a216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d220 1
a220 1
    stringBuffer.append(diagram.getLinkCreationConstraintsClassName());
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironmentFactory"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.util.ExpressionsUtil"));
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName(diagram.getPlugin().getActivatorQualifiedClassName()));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EvaluationEnvironment"));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName(diagram.getPlugin().getActivatorQualifiedClassName()));
d244 2
a246 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.ExpressionsFactory"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.parser.EcoreEnvironment"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d258 1
a258 1
    } //end of LinkConstraints 
a259 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_43);
@


1.6
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d49 14
a62 12
  protected final String TEXT_30 = ".createInvariant(env, constraint.body, true));" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\te.printStackTrace();" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static boolean evaluate(";
  protected final String TEXT_31 = " query, Object sourceEnd, Object oppositeEnd, Object link, boolean clearEnv) {" + NL + "\t\t\t";
  protected final String TEXT_32 = " evalEnv = query.getEvaluationEnvironment();" + NL + "\t\t\tevalEnv.replace(OPPOSITE_END_VAR, oppositeEnd);" + NL + "\t\t\tevalEnv.replace(LINK_VAR, link);\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tObject val = query.evaluate(sourceEnd);\t\t\t" + NL + "\t\t\t\treturn (val instanceof Boolean) ? ((Boolean)val).booleanValue() : false;" + NL + "\t\t\t} catch(Exception e) {\t\t" + NL + "\t\t\t\te.printStackTrace();\t\t\t" + NL + "\t\t\t\tif(evalEnv != null) evalEnv.clear();\t\t\t" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tif(clearEnv) evalEnv.clear();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_33 = " createVar(String name, ";
  protected final String TEXT_34 = " type) {" + NL + "\t\t\t";
  protected final String TEXT_35 = " var = ";
  protected final String TEXT_36 = ".eINSTANCE.createVariableDeclaration();" + NL + "\t\t\tvar.setName(name);" + NL + "\t\t\tvar.setType(";
  protected final String TEXT_37 = ".getOclType(type));\t\t" + NL + "\t\t\treturn var;" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */\t" + NL + "\tstatic class LinkEndConstraint {" + NL + "\t\tfinal ";
  protected final String TEXT_38 = " context;" + NL + "\t\tfinal String body;" + NL + "\t\tLinkEndConstraint(String body, ";
  protected final String TEXT_39 = " context) {" + NL + "\t\t\tthis.context = context;" + NL + "\t\t\tthis.body = body;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_40 = "\t" + NL + "}";
  protected final String TEXT_41 = NL;
d238 2
d241 1
a241 1
    stringBuffer.append(TEXT_31);
a242 2
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.expressions.VariableDeclaration"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClassifier"));
d248 4
d253 1
a253 1
    stringBuffer.append(TEXT_36);
d255 1
a255 1
    stringBuffer.append(TEXT_37);
d257 1
a257 1
    stringBuffer.append(TEXT_38);
d259 1
a259 1
    stringBuffer.append(TEXT_39);
d261 1
a261 1
    stringBuffer.append(TEXT_40);
d263 1
a263 1
    stringBuffer.append(TEXT_41);
@


1.5
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d136 9
a144 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
@


1.4
log
@#115621 Support links with distinct source and containment features
@
text
@d5 2
d8 2
a9 2
public class ItemSemanticEditPolicyGenerator
{
d24 37
a60 2
  protected final String TEXT_5 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tCompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Finds container element for the new relationship of the specified type." + NL + "\t * Default implementation goes up by containment hierarchy starting from" + NL + "\t * the specified element and returns the first element that is instance of" + NL + "\t * the specified container class." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getRelationshipContainer(EObject element, EClass containerClass, IElementType relationshipType) {" + NL + "\t\tfor (; element != null; element = element.eContainer()) {" + NL + "\t\t\tif (containerClass.isSuperTypeOf(element.eClass())) {" + NL + "\t\t\t\treturn element;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;
d62 91
a152 1
  public String generate(Object argument)
d165 85
d251 1
a251 1
    stringBuffer.append(TEXT_6);
d254 1
a254 1
}
@


1.3
log
@#116031 avoid hardcoded class names in templates
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d22 1
a22 1
  protected final String TEXT_5 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tCompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSemanticElement() {" + NL + "\t\treturn ViewUtil.resolveSemanticElement((View) getHost().getModel());" + NL + "\t}" + NL + "}";
@


1.2
log
@#115812 for reference based links
@
text
@d36 1
a36 1
    stringBuffer.append(importManager.getImportedName(diagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.SemanticEditPolicy;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.CompositeModelCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DuplicateElementsRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.MoveRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientReferenceRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ReorientRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d22 1
a22 1
  protected final String TEXT_5 = " extends SemanticEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommand(IEditCommandRequest request) {" + NL + "\t\tIEditCommandRequest completedRequest = completeRequest(request);" + NL + "\t\tCommand semanticCommand = getSemanticCommandSwitch(completedRequest);" + NL + "\t\tif (semanticCommand == null) {" + NL + "\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t}" + NL + "\t\tboolean shouldProceed = true;" + NL + "\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\tshouldProceed = shouldProceed((DestroyRequest) completedRequest);" + NL + "\t\t}" + NL + "\t\tif (shouldProceed) {" + NL + "\t\t\tif (completedRequest instanceof DestroyRequest) {" + NL + "\t\t\t\tICommand deleteCommand = new DeleteCommand((View) getHost().getModel());" + NL + "\t\t\t\tsemanticCommand.chain(new EtoolsProxyCommand(deleteCommand));" + NL + "\t\t\t}" + NL + "\t\t\treturn semanticCommand;" + NL + "\t\t}" + NL + "\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSemanticCommandSwitch(IEditCommandRequest req) {" + NL + "\t\tif (req instanceof CreateRelationshipRequest) {" + NL + "\t\t\treturn getCreateRelationshipCommand((CreateRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof CreateElementRequest) {" + NL + "\t\t\treturn getCreateCommand((CreateElementRequest) req);" + NL + "\t\t} else if (req instanceof ConfigureRequest) {" + NL + "\t\t\treturn getConfigureCommand((ConfigureRequest) req);" + NL + "\t\t} else if (req instanceof DestroyElementRequest) {" + NL + "\t\t\treturn getDestroyElementCommand((DestroyElementRequest) req);" + NL + "\t\t} else if (req instanceof DestroyReferenceRequest) {" + NL + "\t\t\treturn getDestroyReferenceCommand((DestroyReferenceRequest) req);" + NL + "\t\t} else if (req instanceof DuplicateElementsRequest) {" + NL + "\t\t\treturn getDuplicateCommand((DuplicateElementsRequest) req);" + NL + "\t\t} else if (req instanceof GetEditContextRequest) {" + NL + "\t\t\treturn getEditContextCommand((GetEditContextRequest) req);" + NL + "\t\t} else if (req instanceof MoveRequest) {" + NL + "\t\t\treturn getMoveCommand((MoveRequest) req);" + NL + "\t\t} else if (req instanceof ReorientReferenceRelationshipRequest) {" + NL + "\t\t\treturn getReorientReferenceRelationshipCommand((ReorientReferenceRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof ReorientRelationshipRequest) {" + NL + "\t\t\treturn getReorientRelationshipCommand((ReorientRelationshipRequest) req);" + NL + "\t\t} else if (req instanceof SetRequest) {" + NL + "\t\t\treturn getSetCommand((SetRequest) req);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConfigureCommand(ConfigureRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getSetCommand(SetRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDuplicateCommand(DuplicateElementsRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMoveCommand(MoveRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientReferenceRelationshipCommand(ReorientReferenceRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getReorientRelationshipCommand(ReorientRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getMSLWrapper(ICommand cmd) {" + NL + "\t\tCompositeModelCommand modelCmd = new CompositeModelCommand(cmd.getLabel());" + NL + "\t\tmodelCmd.compose(cmd);" + NL + "\t\treturn new EtoolsProxyCommand(modelCmd);" + NL + "\t}" + NL + "}";
@

