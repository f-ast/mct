head	1.108;
access;
symbols
	v20081022-1925:1.108
	v20081015-1925:1.108
	v20081008-1925:1.108
	v20081001-1925:1.108
	v20080924-1925:1.108
	v20080917-1925:1.108
	v20080911-1728:1.108
	v20080910-1520:1.108
	v20080903-1520:1.108
	v20080827-1520:1.108
	v20080813-1520:1.108
	v20080806-1520:1.108
	v20070202-0200:1.96
	v20061120-1300:1.105
	M3_20:1.105
	v20061117-0800:1.105
	v20061027-1200:1.96
	v20061020-1000:1.96
	v20061013-1330:1.103
	v20060919-0800:1.96
	v20060907-1100:1.96
	M1_20:1.98
	v20060904-1500:1.98
	v20060824-1600:1.96
	v20060817-1500:1.96
	v20060728-0500:1.96
	v20060713-1700:1.96
	R1_0_maintenance:1.96.0.2
	R1_0:1.96
	v20060627-1200:1.96
	v20060626-1420:1.96
	v20060620-0400:1.90
	v20060616-1400:1.89
	v20060616-1200:1.89
	v20060609-1400:1.89
	v20060531-1730:1.87
	v20060530-1930:1.87
	v20060526-1200:1.85
	v20060519-1300:1.81
	v20060519-0800:1.81
	v20060512-1000:1.78
	I20060512-1000:1.78
	I20060505-1400:1.78
	I20060428-1300:1.76
	I20060424-0500:1.75
	I20060424-0300:1.75
	M6_10:1.73
	I20060407-1200:1.63
	I20060331-1000:1.62
	I20060324-0300:1.61
	I20060317-1300:1.61
	I20060317-1200:1.61
	I20060316-1300:1.59
	I20060309-1300:1.48
	M5_10:1.47
	S20060303-1600:1.47
	I20060227-1730:1.44
	I20060216-1945:1.42
	I20060210-1715:1.41
	I20060209-1815:1.41
	I20060203-0830:1.37
	I20060202-1415:1.37
	I20060129-1145:1.37
	I20060127-0900:1.37
	I20060120-1530:1.34
	I20060113-1700:1.29
	M4_10:1.29
	I20060107-1100:1.26
	I20060105-1630:1.24
	I20051230-1230:1.23
	I20051223-1100:1.23
	I20051217-0925:1.22
	I20051208-2000:1.21
	I20051201-1800:1.19
	I20051124-2000:1.18
	M3_10:1.15
	I20051118-1245:1.15
	I20051111-1800:1.11
	I20051106-0900:1.7
	v20051030:1.7;
locks; strict;
comment	@# @;
expand	@k@;


1.108
date	2006.12.13.18.57.26;	author dstadnik;	state dead;
branches;
next	1.107;
commitid	68a45804d154567;

1.107
date	2006.12.12.12.00.00;	author dstadnik;	state Exp;
branches;
next	1.106;
commitid	2d28457e99bb4567;

1.106
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.105;
commitid	5f734567714f4567;

1.105
date	2006.10.24.16.12.55;	author ashatalin;	state Exp;
branches;
next	1.104;

1.104
date	2006.10.24.14.49.09;	author ashatalin;	state Exp;
branches;
next	1.103;

1.103
date	2006.10.06.15.26.31;	author atikhomirov;	state Exp;
branches;
next	1.102;

1.102
date	2006.10.06.12.15.31;	author atikhomirov;	state Exp;
branches;
next	1.101;

1.101
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.100;

1.100
date	2006.09.26.15.41.04;	author atikhomirov;	state Exp;
branches;
next	1.99;

1.99
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.98;

1.98
date	2006.08.25.18.32.58;	author atikhomirov;	state Exp;
branches;
next	1.97;

1.97
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.96;

1.96
date	2006.06.23.16.22.20;	author dstadnik;	state Exp;
branches;
next	1.95;

1.95
date	2006.06.23.15.32.41;	author dstadnik;	state Exp;
branches;
next	1.94;

1.94
date	2006.06.23.14.54.31;	author dstadnik;	state Exp;
branches;
next	1.93;

1.93
date	2006.06.23.12.26.15;	author dstadnik;	state Exp;
branches;
next	1.92;

1.92
date	2006.06.21.12.55.34;	author dstadnik;	state Exp;
branches;
next	1.91;

1.91
date	2006.06.20.13.42.42;	author dstadnik;	state Exp;
branches;
next	1.90;

1.90
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.89;

1.89
date	2006.06.06.14.33.42;	author radvorak;	state Exp;
branches;
next	1.88;

1.88
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.87;

1.87
date	2006.05.30.18.37.42;	author atikhomirov;	state Exp;
branches;
next	1.86;

1.86
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.85;

1.85
date	2006.05.25.14.06.32;	author atikhomirov;	state Exp;
branches;
next	1.84;

1.84
date	2006.05.24.18.05.30;	author atikhomirov;	state Exp;
branches;
next	1.83;

1.83
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.82;

1.82
date	2006.05.22.17.40.10;	author ashatalin;	state Exp;
branches;
next	1.81;

1.81
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.80;

1.80
date	2006.05.17.13.18.44;	author atikhomirov;	state Exp;
branches;
next	1.79;

1.79
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.78;

1.78
date	2006.05.05.17.42.56;	author ashatalin;	state Exp;
branches;
next	1.77;

1.77
date	2006.05.05.15.42.01;	author atikhomirov;	state Exp;
branches;
next	1.76;

1.76
date	2006.04.25.11.46.05;	author atikhomirov;	state Exp;
branches;
next	1.75;

1.75
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.74;

1.74
date	2006.04.20.08.12.10;	author dstadnik;	state Exp;
branches;
next	1.73;

1.73
date	2006.04.14.11.17.04;	author ashatalin;	state Exp;
branches;
next	1.72;

1.72
date	2006.04.14.10.18.29;	author dstadnik;	state Exp;
branches;
next	1.71;

1.71
date	2006.04.14.07.21.22;	author dstadnik;	state Exp;
branches;
next	1.70;

1.70
date	2006.04.13.15.30.28;	author atikhomirov;	state Exp;
branches;
next	1.69;

1.69
date	2006.04.13.12.39.59;	author ashatalin;	state Exp;
branches;
next	1.68;

1.68
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.67;

1.67
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.66;

1.66
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.65;

1.65
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.64;

1.64
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.63;

1.63
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.62;

1.62
date	2006.03.30.20.42.04;	author atikhomirov;	state Exp;
branches;
next	1.61;

1.61
date	2006.03.17.16.52.37;	author atikhomirov;	state Exp;
branches;
next	1.60;

1.60
date	2006.03.17.15.21.22;	author dstadnik;	state Exp;
branches;
next	1.59;

1.59
date	2006.03.14.16.50.41;	author dstadnik;	state Exp;
branches;
next	1.58;

1.58
date	2006.03.14.16.36.21;	author dstadnik;	state Exp;
branches;
next	1.57;

1.57
date	2006.03.14.16.22.18;	author dstadnik;	state Exp;
branches;
next	1.56;

1.56
date	2006.03.14.14.07.11;	author dstadnik;	state Exp;
branches;
next	1.55;

1.55
date	2006.03.14.13.14.55;	author dstadnik;	state Exp;
branches;
next	1.54;

1.54
date	2006.03.14.10.27.02;	author dstadnik;	state Exp;
branches;
next	1.53;

1.53
date	2006.03.13.21.35.09;	author atikhomirov;	state Exp;
branches;
next	1.52;

1.52
date	2006.03.13.20.25.59;	author atikhomirov;	state Exp;
branches;
next	1.51;

1.51
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.50;

1.50
date	2006.03.13.11.51.22;	author dstadnik;	state Exp;
branches;
next	1.49;

1.49
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.48;

1.48
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.47;

1.47
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.02.27.18.29.30;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.02.27.10.43.20;	author ashatalin;	state Exp;
branches;
next	1.44;

1.44
date	2006.02.23.15.41.16;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.02.23.15.29.32;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.02.13.17.36.15;	author atikhomirov;	state Exp;
branches;
next	1.41;

1.41
date	2006.02.08.17.15.48;	author atikhomirov;	state Exp;
branches;
next	1.40;

1.40
date	2006.02.08.13.09.29;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.26.13.36.42;	author atikhomirov;	state Exp;
branches;
next	1.36;

1.36
date	2006.01.24.10.23.26;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.01.20.13.07.39;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.01.19.16.49.16;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.16.19.05.24;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.16.18.59.18;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.12.15.37.38;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.12.11.43.59;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.06.19.22.30;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.06.17.03.34;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2005.12.08.14.15.28;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2005.12.07.17.07.00;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.29.18.33.26;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.24.08.51.27;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.23.10.11.53;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.18.11.54.08;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.16.15.45.26;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.11.13.47.43;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.10.17.44.55;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.12.12.12.20;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.03.19.09.15;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.30.19.16.05;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.108
log
@use xpand template to generate node edit part
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class NodeEditPartGenerator {
 
  protected static String nl;
  public static synchronized NodeEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NodeEditPartGenerator result = new NodeEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_14 = "()";
  protected final String TEXT_15 = NL + "\t\t{" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_16 = " getCommand(";
  protected final String TEXT_17 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_18 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_19 = " adapter =" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_20 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_21 = " type =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_22 = ") adapter.getAdapter(";
  protected final String TEXT_23 = ".class);";
  protected final String TEXT_24 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_25 = ".";
  protected final String TEXT_26 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_27 = " compartmentEditPart =" + NL + "\t\t\t\t\t\t\t\tgetChildBySemanticHint(";
  protected final String TEXT_28 = ".getType(";
  protected final String TEXT_29 = ".VISUAL_ID));" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\t);";
  protected final String TEXT_32 = NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_33 = NL + "\t\tinstallEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE, getPrimaryDragEditPolicy());";
  protected final String TEXT_34 = "\t\t" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_35 = "());";
  protected final String TEXT_36 = NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_37 = "());";
  protected final String TEXT_38 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_39 = "());";
  protected final String TEXT_40 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.OPEN_ROLE, new ";
  protected final String TEXT_41 = "());";
  protected final String TEXT_42 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_43 = "());";
  protected final String TEXT_44 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_47 = "\", new ";
  protected final String TEXT_48 = "()); //$NON-NLS-1$";
  protected final String TEXT_49 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_50 = " createLayoutEditPolicy() {";
  protected final String TEXT_51 = NL + "\t\t";
  protected final String TEXT_52 = " lep = new ";
  protected final String TEXT_53 = "() {";
  protected final String TEXT_54 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_55 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_56 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_57 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_58 = NL + "\t\t";
  protected final String TEXT_59 = " xlep = new ";
  protected final String TEXT_60 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_61 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_62 = NL + "\t\treturn lep;";
  protected final String TEXT_63 = NL + "\t\t";
  protected final String TEXT_64 = " lep = new ";
  protected final String TEXT_65 = "() {";
  protected final String TEXT_66 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_67 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_68 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_69 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_70 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_71 = NL + "\t\t";
  protected final String TEXT_72 = " xlep = new ";
  protected final String TEXT_73 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_74 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_75 = NL + "\t\treturn lep;";
  protected final String TEXT_76 = NL + "\t\t";
  protected final String TEXT_77 = " lep = new ";
  protected final String TEXT_78 = "() {";
  protected final String TEXT_79 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_80 = NL;
  protected final String TEXT_81 = NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_82 = " child) {" + NL + "\t\t\t\tif (child instanceof ";
  protected final String TEXT_83 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_84 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}";
  protected final String TEXT_85 = NL + NL + "\t\t\tprotected ";
  protected final String TEXT_86 = " createAddCommand(";
  protected final String TEXT_87 = " child, ";
  protected final String TEXT_88 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_89 = " createMoveChildCommand(";
  protected final String TEXT_90 = " child, ";
  protected final String TEXT_91 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_92 = " getCreateCommand(";
  protected final String TEXT_93 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_94 = NL + "\t\t";
  protected final String TEXT_95 = " xlep = new ";
  protected final String TEXT_96 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_97 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_98 = NL + "\t\treturn lep;";
  protected final String TEXT_99 = NL + "\t\t";
  protected final String TEXT_100 = " lep = new ";
  protected final String TEXT_101 = "() {";
  protected final String TEXT_102 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_103 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_104 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_105 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_106 = " getMoveChildrenCommand(";
  protected final String TEXT_107 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_108 = " getCreateCommand(";
  protected final String TEXT_109 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_110 = NL + "\t\t";
  protected final String TEXT_111 = " xlep = new ";
  protected final String TEXT_112 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_113 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_114 = NL + "\t\treturn lep;";
  protected final String TEXT_115 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_116 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_117 = "()";
  protected final String TEXT_118 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_119 = ";";
  protected final String TEXT_120 = NL + "\t\treturn ";
  protected final String TEXT_121 = ";";
  protected final String TEXT_122 = NL + "\t\t";
  protected final String TEXT_123 = " figure = new ";
  protected final String TEXT_124 = "();";
  protected final String TEXT_125 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_126 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_127 = NL + "\t}";
  protected final String TEXT_128 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_129 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_130 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_131 = NL;
  protected final String TEXT_132 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_133 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_134 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_135 = ") childEditPart).";
  protected final String TEXT_136 = "(getPrimaryShape().";
  protected final String TEXT_137 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_138 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_139 = ") {" + NL + "\t\t\t";
  protected final String TEXT_140 = " pane = getPrimaryShape().";
  protected final String TEXT_141 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_142 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_143 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_144 = ") {" + NL + "\t\t\t";
  protected final String TEXT_145 = " locator = new ";
  protected final String TEXT_146 = "(getMainFigure(), ";
  protected final String TEXT_147 = ".";
  protected final String TEXT_148 = ");" + NL + "\t\t\tgetBorderedFigure().getBorderItemContainer().add(((";
  protected final String TEXT_149 = ")childEditPart).getFigure(), locator);" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_150 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_151 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_152 = ") {" + NL + "\t\t\t";
  protected final String TEXT_153 = " pane = getPrimaryShape().";
  protected final String TEXT_154 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_155 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_156 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_157 = ") {" + NL + "\t\t\tgetBorderedFigure().getBorderItemContainer().remove(((";
  protected final String TEXT_158 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_159 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_160 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_161 = " createNodePlate() {";
  protected final String TEXT_162 = NL + "\t\t";
  protected final String TEXT_163 = " result = new ";
  protected final String TEXT_164 = "(getMapMode().DPtoLP(";
  protected final String TEXT_165 = "), getMapMode().DPtoLP(";
  protected final String TEXT_166 = "));";
  protected final String TEXT_167 = NL + "\t\t//FIXME: workaround for #154536" + NL + "\t\tresult.getBounds().setSize(result.getPreferredSize());";
  protected final String TEXT_168 = "\t\t" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_169 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_170 = " ep = (";
  protected final String TEXT_171 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_172 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_173 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_174 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_175 = ".";
  protected final String TEXT_176 = " | ";
  protected final String TEXT_177 = ");" + NL + "\t\t";
  protected final String TEXT_178 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_179 = NL;
  protected final String TEXT_180 = "\t " + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " createMainFigure() {";
  protected final String TEXT_182 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_183 = " createNodeFigure() {";
  protected final String TEXT_184 = NL + "\t\t";
  protected final String TEXT_185 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_186 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_187 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_188 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_189 = NL + "\t\t\t";
  protected final String TEXT_190 = " layout = new ";
  protected final String TEXT_191 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_192 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_193 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_194 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_195 = ".getType(";
  protected final String TEXT_196 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_197 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_198 = " childEditPart) {";
  protected final String TEXT_199 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_200 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_201 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_202 = " root = (";
  protected final String TEXT_203 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_204 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_205 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_206 = " childEditPart, int index) {";
  protected final String TEXT_207 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_208 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_209 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_210 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_211 = " childEditPart) {";
  protected final String TEXT_212 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_213 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_214 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_216 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_217 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_218 = " childEditPart = (";
  protected final String TEXT_219 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_220 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_221 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_222 = " event) {" + NL + "\t\tif (event.getNotifier() == getModel() && ";
  protected final String TEXT_223 = ".eINSTANCE.getEModelElement_EAnnotations().equals(event.getFeature())) {" + NL + "\t\t\thandleMajorSemanticChange();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.handleNotificationEvent(event);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_224 = NL;
  protected final String TEXT_225 = NL;
  protected final String TEXT_226 = NL + "}";
  protected final String TEXT_227 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenNode genNode = (GenNode) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genNode.getDiagram();
boolean isXYLayout = ViewmapLayoutType.XY_LAYOUT_LITERAL.equals(genNode.getLayoutType());

class NodeEditPartHelper {
	private final List<GenNodeLabel> myInnerLabels = new LinkedList<GenNodeLabel>();
	private final List<GenNodeLabel> myExternalLabels = new LinkedList<GenNodeLabel>();
	private final List<GenCompartment> myPinnedCompartments = new LinkedList<GenCompartment>();
	private final List<GenCompartment> myFloatingCompartments = new LinkedList<GenCompartment>();
	private final List<GenChildNode> mySideAffixedChildren = new LinkedList<GenChildNode>();
	private GenNodeLabel myPrimaryLabel;
	private boolean myHasChildrenInListCompartments = false;
	private final boolean myIsSideAffixed;
	private final boolean myHasSideAffixedChildren;
	
	public NodeEditPartHelper(GenNode genNode){
		myPrimaryLabel = null;

		for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel next = (GenNodeLabel) labels.next();
			if (myPrimaryLabel == null){
				myPrimaryLabel = next;
			}
			if (next instanceof GenExternalNodeLabel) {
				myExternalLabels.add(next);
			} else if (next.getViewmap() instanceof ParentAssignedViewmap) {
				myInnerLabels.add(next);
			}
		}
		
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();){
			GenCompartment next = (GenCompartment) compartments.next();
			if (next.getViewmap() instanceof ParentAssignedViewmap){
				myPinnedCompartments.add(next);
			} else {
				myFloatingCompartments.add(next);
			}	
			
			myHasChildrenInListCompartments |= next.isListLayout() && !next.getChildNodes().isEmpty();
		}
		
		for (Iterator childNodes = genNode.getChildNodes().iterator(); childNodes.hasNext();){
			GenChildNode next = (GenChildNode)childNodes.next();
			if (next instanceof GenChildSideAffixedNode){
				mySideAffixedChildren.add(next);
			}
		}
		
		myIsSideAffixed = genNode instanceof GenChildSideAffixedNode;
		myHasSideAffixedChildren = !mySideAffixedChildren.isEmpty();
	}
	
	public boolean isSideAffixed(){
		return myIsSideAffixed;
	}
	
	public boolean hasSideAffixedChildren(){
		return myHasSideAffixedChildren;
	}
	
	public String getEditPartSuperClassFQN(){
		if (isSideAffixed()){
			return hasSideAffixedChildren() ? 
				"org.eclipse.gmf.runtime.diagram.ui.editparts.BorderedBorderItemEditPart" :
				"org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderItemEditPart";
		} else {
			return hasSideAffixedChildren() ? 
				"org.eclipse.gmf.runtime.diagram.ui.editparts.AbstractBorderedShapeEditPart" : 
				"org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart";
		}
	}
	
	public boolean hasChildrenInListCompartments(){
		return myHasChildrenInListCompartments;
	}
	
	public boolean hasInnerFixedLabels(){
		return !myInnerLabels.isEmpty();
	}
	
	public boolean hasPinnedCompartments(){
		return !myPinnedCompartments.isEmpty();
	}
	
	public boolean hasFixedChildren(){
		return hasInnerFixedLabels() || hasPinnedCompartments();
	}
	
	public boolean hasExternalLabels(){
		return !myExternalLabels.isEmpty();
	}
	
	public GenNodeLabel getPrimaryLabel(){
		return myPrimaryLabel;
	}
	
	public Iterator getInnerFixedLabels(){
		return myInnerLabels.iterator();
	}
	
	public Iterator getExternalLabels(){
		return myExternalLabels.iterator();
	}
	
	public Iterator getPinnedCompartments(){
		return myPinnedCompartments.iterator();
	}	
	
	public Iterator getSideAffixedChildren(){
		return mySideAffixedChildren.iterator();
	}
}
final NodeEditPartHelper myHelper = new NodeEditPartHelper(genNode);

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
if (genNode.getViewmap() instanceof InnerClassViewmap) {
importManager.registerInnerClass(((InnerClassViewmap) genNode.getViewmap()).getClassName());
}
importManager.addImport("org.eclipse.draw2d.IFigure");
importManager.addImport("org.eclipse.draw2d.StackLayout");
importManager.addImport("org.eclipse.gef.EditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles");
importManager.addImport("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure");
importManager.addImport("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_5);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(myHelper.getEditPartSuperClassFQN()));
    stringBuffer.append(TEXT_7);
    {	GenCommonBase genCommonBase = genNode;
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_12);
    
if (!genNode.getChildNodes().isEmpty() || myHelper.hasChildrenInListCompartments()) {

    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
    stringBuffer.append(TEXT_14);
    	if (myHelper.hasChildrenInListCompartments()) {
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_23);
    
		for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment compartment = (GenCompartment) compartments.next();
			if (compartment.isListLayout() && !compartment.getChildNodes().isEmpty()) {
				for (Iterator children = compartment.getChildNodes().iterator(); children.hasNext(); ) {
					GenNode child = (GenNode) children.next();

    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(child.getUniqueIdentifier());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(compartment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    
				}
			}
		}

    stringBuffer.append(TEXT_30);
    	}
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
    if (myHelper.isSideAffixed()){
    stringBuffer.append(TEXT_33);
    }
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_35);
    if (genNode.getModelFacet() != null && !genNode.getReorientedIncomingLinks().isEmpty()) {
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_37);
    }
if (!genNode.getChildNodes().isEmpty()) {
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
    stringBuffer.append(TEXT_39);
    }
if (genNode.getBehaviour(OpenDiagramBehaviour.class).size() == 1) /*doesn't make sense to install more than one policy for the same role*/ {
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(genNode.getBehaviour(OpenDiagramBehaviour.class).get(0).getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_41);
    }
if (genNode.needsCanonicalEditPolicy()) {
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    {	GenCommonBase genCommonBase = genNode;
    stringBuffer.append(TEXT_45);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_46);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    }
    }
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
    stringBuffer.append(TEXT_50);
    
final String fqnEditPart = importManager.getImportedName("org.eclipse.gef.EditPart");
switch(genNode.getLayoutType().getValue()){
	case ViewmapLayoutType.XY_LAYOUT:

    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy"));
    stringBuffer.append(TEXT_53);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_54);
    		}
    stringBuffer.append(TEXT_55);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
    stringBuffer.append(TEXT_57);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_61);
    		} else {
    stringBuffer.append(TEXT_62);
    
		}
		break;
	case ViewmapLayoutType.TOOLBAR_LAYOUT:

    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy"));
    stringBuffer.append(TEXT_65);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_66);
    		}
    stringBuffer.append(TEXT_67);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_70);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_74);
    		} else {
    stringBuffer.append(TEXT_75);
    
		}
		break;
	case ViewmapLayoutType.FLOW_LAYOUT:

    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.FlowLayoutEditPolicy"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.FlowLayoutEditPolicy"));
    stringBuffer.append(TEXT_78);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_79);
    		}
    stringBuffer.append(TEXT_80);
    if (myHelper.hasSideAffixedChildren()) {
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IBorderItemEditPart"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.BorderItemSelectionEditPolicy"));
    stringBuffer.append(TEXT_84);
    }
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
    stringBuffer.append(TEXT_93);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_97);
    		} else {
    stringBuffer.append(TEXT_98);
    
		}
		break;
	default:

    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
    stringBuffer.append(TEXT_101);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_102);
    		}
    stringBuffer.append(TEXT_103);
    stringBuffer.append(fqnEditPart);
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.NonResizableEditPolicy"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
    stringBuffer.append(TEXT_109);
    		if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_113);
    		} else {
    stringBuffer.append(TEXT_114);
    
		}
} //switch

    stringBuffer.append(TEXT_115);
    
String figureQualifiedClassName = null;
Viewmap viewmap = genNode.getViewmap();
if (viewmap instanceof FigureViewmap) {
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
	}
	figureQualifiedClassName = importManager.getImportedName(figureQualifiedClassName);

    stringBuffer.append(TEXT_116);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_117);
    if (isXYLayout) {
    stringBuffer.append(TEXT_118);
    } // if isXYLayout
    stringBuffer.append(TEXT_119);
    } // instanceof FigureViewmap
 else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_120);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_121);
    } // instanceof SnippetViewmap; FIXME : obtain figure class name to generate getter
 else if (viewmap instanceof InnerClassViewmap) {
 	figureQualifiedClassName = ((InnerClassViewmap) viewmap).getClassName();

    stringBuffer.append(TEXT_122);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_123);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_124);
    if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/
    stringBuffer.append(TEXT_125);
    }
    stringBuffer.append(TEXT_126);
    }
    stringBuffer.append(TEXT_127);
    if (figureQualifiedClassName != null) {
    stringBuffer.append(TEXT_128);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_129);
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_130);
    }
    stringBuffer.append(TEXT_131);
    
if (myHelper.hasFixedChildren()) {

    stringBuffer.append(TEXT_132);
    
for (Iterator it = myHelper.getInnerFixedLabels(); it.hasNext(); ) {
	GenNodeLabel genLabel = (GenNodeLabel) it.next();
	final String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) genLabel.getViewmap();
	final String childSetterName = childViewmap.getSetterName() == null ? "setLabel" : childViewmap.getSetterName();

    stringBuffer.append(TEXT_133);
    stringBuffer.append(labelEditPart);
    stringBuffer.append(TEXT_134);
    stringBuffer.append(labelEditPart);
    stringBuffer.append(TEXT_135);
    stringBuffer.append(childSetterName);
    stringBuffer.append(TEXT_136);
    stringBuffer.append(childViewmap.getGetterName());
    stringBuffer.append(TEXT_137);
    
}

for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());

    stringBuffer.append(TEXT_138);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(childViewmap.getGetterName());
    stringBuffer.append(TEXT_141);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_142);
    	
} // for pinned compartments

for (Iterator it = myHelper.getSideAffixedChildren(); it.hasNext(); ) {
	GenChildSideAffixedNode next = (GenChildSideAffixedNode) it.next();
	String sideAffixedEidtPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());

    stringBuffer.append(TEXT_143);
    stringBuffer.append(sideAffixedEidtPartFQN);
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(next.getPreferredSideName());
    stringBuffer.append(TEXT_148);
    stringBuffer.append(sideAffixedEidtPartFQN);
    stringBuffer.append(TEXT_149);
    	
} // for side affixed

    stringBuffer.append(TEXT_150);
    
//XXX: ignore labels assuming that they never may be removed
for (Iterator it = myHelper.getPinnedCompartments(); it.hasNext(); ) {
	GenCompartment next = (GenCompartment) it.next();
	final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) next.getViewmap();
	String compartmentEditPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());

    stringBuffer.append(TEXT_151);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(childViewmap.getGetterName());
    stringBuffer.append(TEXT_154);
    stringBuffer.append(compartmentEditPartFQN);
    stringBuffer.append(TEXT_155);
    
} // for pinned compartments

for (Iterator it = myHelper.getSideAffixedChildren(); it.hasNext(); ) {
	GenChildNode next = (GenChildNode) it.next();
	String sideAffixedEidtPartFQN = importManager.getImportedName(next.getEditPartQualifiedClassName());

    stringBuffer.append(TEXT_156);
    stringBuffer.append(sideAffixedEidtPartFQN);
    stringBuffer.append(TEXT_157);
    stringBuffer.append(sideAffixedEidtPartFQN);
    stringBuffer.append(TEXT_158);
    	
} // for side affixed

    stringBuffer.append(TEXT_159);
    
} // if myHelper.hasFixedChildren()

    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_161);
    
int width = 40;
int height = 40;
DefaultSizeAttributes defSizeAttrs = (DefaultSizeAttributes) genNode.getViewmap().find(DefaultSizeAttributes.class);
if (defSizeAttrs != null) {
	width = defSizeAttrs.getWidth();
	height = defSizeAttrs.getHeight();
}

    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(width);
    stringBuffer.append(TEXT_165);
    stringBuffer.append(height);
    stringBuffer.append(TEXT_166);
    
if (myHelper.isSideAffixed()){		

    stringBuffer.append(TEXT_167);
    
}

    stringBuffer.append(TEXT_168);
    if (genNode.getViewmap().find(ResizeConstraints.class) != null) {
	final ResizeConstraints rc = (ResizeConstraints) genNode.getViewmap().find(ResizeConstraints.class);
	final String draw2dPC = importManager.getImportedName("org.eclipse.draw2d.PositionConstants");
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
    stringBuffer.append(TEXT_171);
    if (rc.getResizeHandleNames().isEmpty()) {
    stringBuffer.append(TEXT_172);
    stringBuffer.append(draw2dPC);
    stringBuffer.append(TEXT_173);
     } else {
    stringBuffer.append(TEXT_174);
    for (Iterator rcNamesIter = rc.getResizeHandleNames().iterator(); rcNamesIter.hasNext();) {
			String nextConstantName = (String) rcNamesIter.next();
    stringBuffer.append(draw2dPC);
    stringBuffer.append(TEXT_175);
    stringBuffer.append(nextConstantName);
    if (rcNamesIter.hasNext()) {
    stringBuffer.append(TEXT_176);
    }}
    stringBuffer.append(TEXT_177);
    }
    stringBuffer.append(TEXT_178);
    }
    stringBuffer.append(TEXT_179);
    if (myHelper.hasSideAffixedChildren()) {
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_181);
    } else {
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_183);
    }
    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_185);
    
if (isXYLayout) {

    stringBuffer.append(TEXT_186);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_188);
    } else {
	String layoutClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout");

    stringBuffer.append(TEXT_189);
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_190);
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_191);
    }
    stringBuffer.append(TEXT_192);
    
if (myHelper.getPrimaryLabel() != null) {
	GenNodeLabel primaryLabel = myHelper.getPrimaryLabel();

    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_196);
    
}
if (myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_198);
    
	for (Iterator externalLabels = myHelper.getExternalLabels(); externalLabels.hasNext();) {
		GenNodeLabel next = (GenNodeLabel) externalLabels.next();

    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName(next.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_200);
    	}
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_204);
    
}
if (myHelper.hasFixedChildren() || myHelper.hasExternalLabels()) {

    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_206);
    	if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_208);
    
	}
	if (myHelper.hasFixedChildren()) {

    stringBuffer.append(TEXT_209);
    	}
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_211);
    	if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_213);
    
	}
	if (myHelper.hasFixedChildren()){

    stringBuffer.append(TEXT_214);
    	}
    stringBuffer.append(TEXT_215);
    	if (myHelper.hasExternalLabels()) {
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_220);
    
	}
} // if hasFixedChildren || hasExternalLabels

/*
 * This code is important fore ferreshing shortcut decoration on 
 * adding corresponding annotation to the View instance.
 */
if (genNode instanceof GenTopLevelNode && genDiagram.generateShortcutIcon()) {
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EcorePackage"));
    stringBuffer.append(TEXT_223);
    }
    stringBuffer.append(TEXT_224);
    if (genNode.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_225);
    stringBuffer.append(((InnerClassViewmap) genNode.getViewmap()).getClassBody());
    }
    stringBuffer.append(TEXT_226);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_227);
    return stringBuffer.toString();
  }
}@


1.107
log
@change getRevertedIncomingLinks() method to property for xpand templates
@
text
@@


1.106
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d565 1
a565 1
    if (genNode.needsGraphicalNodeEditPolicy()) {
@


1.105
log
@Processing notification more precisely.
@
text
@d256 7
a262 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.104
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d241 2
a242 2
  protected final String TEXT_222 = " event) {" + NL + "\t\tObject feature = event.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_223 = ".eINSTANCE.getEModelElement_EAnnotations().equals(feature)) {" + NL + "\t\t\thandleMajorSemanticChange();" + NL + "\t\t} else {" + NL + "\t\t\tsuper.handleNotificationEvent(event);" + NL + "\t\t}" + NL + "\t}";
@


1.103
log
@do not generate canonical edit policies unless needed
@
text
@d240 3
a242 3
  protected final String TEXT_221 = "\t" + NL;
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = NL + "}";
d244 3
d1049 5
d1055 6
d1062 1
a1062 1
    stringBuffer.append(TEXT_222);
d1065 1
a1065 1
    stringBuffer.append(TEXT_223);
d1067 1
a1067 1
    stringBuffer.append(TEXT_224);
@


1.102
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@d571 1
a571 1
if (genDiagram.needsCanonicalEditPolicy()) {
@


1.101
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d571 1
a571 1
if (genDiagram.isSynchronized()) {
@


1.100
log
@do not generate GraphicalNodeEditPolicy unless there's smth for it to do
@
text
@d59 1
a59 1
  protected final String TEXT_40 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d61 77
a137 77
  protected final String TEXT_42 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());";
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_45 = "\", new ";
  protected final String TEXT_46 = "()); //$NON-NLS-1$";
  protected final String TEXT_47 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_48 = " createLayoutEditPolicy() {";
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = " lep = new ";
  protected final String TEXT_51 = "() {";
  protected final String TEXT_52 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_53 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_54 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_55 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_56 = NL + "\t\t";
  protected final String TEXT_57 = " xlep = new ";
  protected final String TEXT_58 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_59 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_60 = NL + "\t\treturn lep;";
  protected final String TEXT_61 = NL + "\t\t";
  protected final String TEXT_62 = " lep = new ";
  protected final String TEXT_63 = "() {";
  protected final String TEXT_64 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_65 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_66 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_67 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_68 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_69 = NL + "\t\t";
  protected final String TEXT_70 = " xlep = new ";
  protected final String TEXT_71 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_72 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_73 = NL + "\t\treturn lep;";
  protected final String TEXT_74 = NL + "\t\t";
  protected final String TEXT_75 = " lep = new ";
  protected final String TEXT_76 = "() {";
  protected final String TEXT_77 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_78 = NL;
  protected final String TEXT_79 = NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_80 = " child) {" + NL + "\t\t\t\tif (child instanceof ";
  protected final String TEXT_81 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_82 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}";
  protected final String TEXT_83 = NL + NL + "\t\t\tprotected ";
  protected final String TEXT_84 = " createAddCommand(";
  protected final String TEXT_85 = " child, ";
  protected final String TEXT_86 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_87 = " createMoveChildCommand(";
  protected final String TEXT_88 = " child, ";
  protected final String TEXT_89 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_90 = " getCreateCommand(";
  protected final String TEXT_91 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_92 = NL + "\t\t";
  protected final String TEXT_93 = " xlep = new ";
  protected final String TEXT_94 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_95 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_96 = NL + "\t\treturn lep;";
  protected final String TEXT_97 = NL + "\t\t";
  protected final String TEXT_98 = " lep = new ";
  protected final String TEXT_99 = "() {";
  protected final String TEXT_100 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_101 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_102 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_103 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_104 = " getMoveChildrenCommand(";
  protected final String TEXT_105 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_106 = " getCreateCommand(";
  protected final String TEXT_107 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_108 = NL + "\t\t";
  protected final String TEXT_109 = " xlep = new ";
  protected final String TEXT_110 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_111 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_112 = NL + "\t\treturn lep;";
  protected final String TEXT_113 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_114 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_115 = "()";
  protected final String TEXT_116 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_117 = ";";
  protected final String TEXT_118 = NL + "\t\treturn ";
d139 52
a190 52
  protected final String TEXT_120 = NL + "\t\t";
  protected final String TEXT_121 = " figure = new ";
  protected final String TEXT_122 = "();";
  protected final String TEXT_123 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_124 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_125 = NL + "\t}";
  protected final String TEXT_126 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_127 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_128 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_129 = NL;
  protected final String TEXT_130 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_131 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_132 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_133 = ") childEditPart).";
  protected final String TEXT_134 = "(getPrimaryShape().";
  protected final String TEXT_135 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_136 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_137 = ") {" + NL + "\t\t\t";
  protected final String TEXT_138 = " pane = getPrimaryShape().";
  protected final String TEXT_139 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_140 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_141 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_142 = ") {" + NL + "\t\t\t";
  protected final String TEXT_143 = " locator = new ";
  protected final String TEXT_144 = "(getMainFigure(), ";
  protected final String TEXT_145 = ".";
  protected final String TEXT_146 = ");" + NL + "\t\t\tgetBorderedFigure().getBorderItemContainer().add(((";
  protected final String TEXT_147 = ")childEditPart).getFigure(), locator);" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_148 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_149 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_150 = ") {" + NL + "\t\t\t";
  protected final String TEXT_151 = " pane = getPrimaryShape().";
  protected final String TEXT_152 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_153 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_154 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_155 = ") {" + NL + "\t\t\tgetBorderedFigure().getBorderItemContainer().remove(((";
  protected final String TEXT_156 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_157 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_158 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_159 = " createNodePlate() {";
  protected final String TEXT_160 = NL + "\t\t";
  protected final String TEXT_161 = " result = new ";
  protected final String TEXT_162 = "(getMapMode().DPtoLP(";
  protected final String TEXT_163 = "), getMapMode().DPtoLP(";
  protected final String TEXT_164 = "));";
  protected final String TEXT_165 = NL + "\t\t//FIXME: workaround for #154536" + NL + "\t\tresult.getBounds().setSize(result.getPreferredSize());";
  protected final String TEXT_166 = "\t\t" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_167 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_168 = " ep = (";
  protected final String TEXT_169 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_170 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_171 = ".NONE);" + NL + "\t\t";
d192 49
a240 49
  protected final String TEXT_173 = ".";
  protected final String TEXT_174 = " | ";
  protected final String TEXT_175 = ");" + NL + "\t\t";
  protected final String TEXT_176 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_177 = NL;
  protected final String TEXT_178 = "\t " + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_179 = " createMainFigure() {";
  protected final String TEXT_180 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_181 = " createNodeFigure() {";
  protected final String TEXT_182 = NL + "\t\t";
  protected final String TEXT_183 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_184 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_185 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_186 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_187 = NL + "\t\t\t";
  protected final String TEXT_188 = " layout = new ";
  protected final String TEXT_189 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_190 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_191 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_192 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_193 = ".getType(";
  protected final String TEXT_194 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_195 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_196 = " childEditPart) {";
  protected final String TEXT_197 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_198 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_199 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_200 = " root = (";
  protected final String TEXT_201 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_202 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_203 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_204 = " childEditPart, int index) {";
  protected final String TEXT_205 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_206 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_207 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_208 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_209 = " childEditPart) {";
  protected final String TEXT_210 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_211 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_212 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_213 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_214 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_215 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_216 = " childEditPart = (";
  protected final String TEXT_217 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_218 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_219 = "\t" + NL;
  protected final String TEXT_220 = NL;
  protected final String TEXT_221 = NL + "}";
d242 2
d351 5
a355 5
	private final List myInnerLabels = new LinkedList();
	private final List myExternalLabels = new LinkedList();
	private final List myPinnedCompartments = new LinkedList();
	private final List myFloatingCompartments = new LinkedList();
	private final List mySideAffixedChildren = new LinkedList();
d566 1
a566 2

if (genDiagram.isSynchronized()) {
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
d571 1
d573 4
d578 1
a578 1
    stringBuffer.append(TEXT_43);
d580 1
a580 2
for (java.util.Iterator it = genCommonBase.getCustomBehaviour().iterator(); it.hasNext();) {
	CustomBehaviour behaviour = (CustomBehaviour) it.next();
d582 1
a582 1
    stringBuffer.append(TEXT_44);
d584 1
a584 1
    stringBuffer.append(TEXT_45);
d586 1
a586 1
    stringBuffer.append(TEXT_46);
d589 1
a589 1
    stringBuffer.append(TEXT_47);
d591 1
a591 1
    stringBuffer.append(TEXT_48);
d597 1
a597 1
    stringBuffer.append(TEXT_49);
d599 1
a599 1
    stringBuffer.append(TEXT_50);
d601 1
a601 1
    stringBuffer.append(TEXT_51);
d603 1
a603 1
    stringBuffer.append(TEXT_52);
d605 1
a605 1
    stringBuffer.append(TEXT_53);
d607 1
a607 1
    stringBuffer.append(TEXT_54);
d609 1
a609 1
    stringBuffer.append(TEXT_55);
d611 1
a611 1
    stringBuffer.append(TEXT_56);
d613 1
a613 1
    stringBuffer.append(TEXT_57);
d615 1
a615 1
    stringBuffer.append(TEXT_58);
d617 1
a617 1
    stringBuffer.append(TEXT_59);
d619 1
a619 1
    stringBuffer.append(TEXT_60);
d625 1
a625 1
    stringBuffer.append(TEXT_61);
d627 1
a627 1
    stringBuffer.append(TEXT_62);
d629 1
a629 1
    stringBuffer.append(TEXT_63);
d631 1
a631 1
    stringBuffer.append(TEXT_64);
d633 1
a633 1
    stringBuffer.append(TEXT_65);
d635 1
a635 1
    stringBuffer.append(TEXT_66);
d637 1
a637 1
    stringBuffer.append(TEXT_67);
d639 1
a639 1
    stringBuffer.append(TEXT_68);
d641 1
a641 1
    stringBuffer.append(TEXT_69);
d643 1
a643 1
    stringBuffer.append(TEXT_70);
d645 1
a645 1
    stringBuffer.append(TEXT_71);
d647 1
a647 1
    stringBuffer.append(TEXT_72);
d649 1
a649 1
    stringBuffer.append(TEXT_73);
d655 1
a655 1
    stringBuffer.append(TEXT_74);
d657 1
a657 1
    stringBuffer.append(TEXT_75);
d659 1
a659 1
    stringBuffer.append(TEXT_76);
d661 1
a661 1
    stringBuffer.append(TEXT_77);
d663 1
a663 1
    stringBuffer.append(TEXT_78);
d665 1
a665 1
    stringBuffer.append(TEXT_79);
d667 1
a667 1
    stringBuffer.append(TEXT_80);
d669 1
a669 1
    stringBuffer.append(TEXT_81);
d671 1
a671 1
    stringBuffer.append(TEXT_82);
d673 1
a673 1
    stringBuffer.append(TEXT_83);
d675 1
a675 1
    stringBuffer.append(TEXT_84);
d677 1
a677 1
    stringBuffer.append(TEXT_85);
d679 1
a679 1
    stringBuffer.append(TEXT_86);
d681 1
a681 1
    stringBuffer.append(TEXT_87);
d683 1
a683 1
    stringBuffer.append(TEXT_88);
d685 1
a685 1
    stringBuffer.append(TEXT_89);
d687 1
a687 1
    stringBuffer.append(TEXT_90);
d689 1
a689 1
    stringBuffer.append(TEXT_91);
d691 1
a691 1
    stringBuffer.append(TEXT_92);
d693 1
a693 1
    stringBuffer.append(TEXT_93);
d695 1
a695 1
    stringBuffer.append(TEXT_94);
d697 1
a697 1
    stringBuffer.append(TEXT_95);
d699 1
a699 1
    stringBuffer.append(TEXT_96);
d705 1
a705 1
    stringBuffer.append(TEXT_97);
d707 1
a707 1
    stringBuffer.append(TEXT_98);
d709 1
a709 1
    stringBuffer.append(TEXT_99);
d711 1
a711 1
    stringBuffer.append(TEXT_100);
d713 1
a713 1
    stringBuffer.append(TEXT_101);
d715 1
a715 1
    stringBuffer.append(TEXT_102);
d717 1
a717 1
    stringBuffer.append(TEXT_103);
d719 1
a719 1
    stringBuffer.append(TEXT_104);
d721 1
a721 1
    stringBuffer.append(TEXT_105);
d723 1
a723 1
    stringBuffer.append(TEXT_106);
d725 1
a725 1
    stringBuffer.append(TEXT_107);
d727 1
a727 1
    stringBuffer.append(TEXT_108);
d729 1
a729 1
    stringBuffer.append(TEXT_109);
d731 1
a731 1
    stringBuffer.append(TEXT_110);
d733 1
a733 1
    stringBuffer.append(TEXT_111);
d735 1
a735 1
    stringBuffer.append(TEXT_112);
d740 1
a740 1
    stringBuffer.append(TEXT_113);
d751 1
a751 1
    stringBuffer.append(TEXT_114);
d753 1
a753 1
    stringBuffer.append(TEXT_115);
d755 1
a755 1
    stringBuffer.append(TEXT_116);
d757 1
a757 1
    stringBuffer.append(TEXT_117);
d760 1
a760 1
    stringBuffer.append(TEXT_118);
d762 1
a762 1
    stringBuffer.append(TEXT_119);
d767 1
a767 1
    stringBuffer.append(TEXT_120);
d769 1
a769 1
    stringBuffer.append(TEXT_121);
d771 1
a771 1
    stringBuffer.append(TEXT_122);
d773 1
a773 1
    stringBuffer.append(TEXT_123);
d775 1
a775 1
    stringBuffer.append(TEXT_124);
d777 1
a777 1
    stringBuffer.append(TEXT_125);
d779 1
a779 1
    stringBuffer.append(TEXT_126);
d781 1
a781 1
    stringBuffer.append(TEXT_127);
d783 1
a783 1
    stringBuffer.append(TEXT_128);
d785 1
a785 1
    stringBuffer.append(TEXT_129);
d789 1
a789 1
    stringBuffer.append(TEXT_130);
d797 1
a797 1
    stringBuffer.append(TEXT_131);
d799 1
a799 1
    stringBuffer.append(TEXT_132);
d801 1
a801 1
    stringBuffer.append(TEXT_133);
d803 1
a803 1
    stringBuffer.append(TEXT_134);
d805 1
a805 1
    stringBuffer.append(TEXT_135);
d814 1
a814 1
    stringBuffer.append(TEXT_136);
d816 1
a816 1
    stringBuffer.append(TEXT_137);
d818 1
a818 1
    stringBuffer.append(TEXT_138);
d820 1
a820 1
    stringBuffer.append(TEXT_139);
d822 1
a822 1
    stringBuffer.append(TEXT_140);
d830 1
a830 1
    stringBuffer.append(TEXT_141);
d832 1
a832 1
    stringBuffer.append(TEXT_142);
d834 1
a834 1
    stringBuffer.append(TEXT_143);
d836 1
a836 1
    stringBuffer.append(TEXT_144);
d838 1
a838 1
    stringBuffer.append(TEXT_145);
d840 1
a840 1
    stringBuffer.append(TEXT_146);
d842 1
a842 1
    stringBuffer.append(TEXT_147);
d846 1
a846 1
    stringBuffer.append(TEXT_148);
d854 1
a854 1
    stringBuffer.append(TEXT_149);
d856 1
a856 1
    stringBuffer.append(TEXT_150);
d858 1
a858 1
    stringBuffer.append(TEXT_151);
d860 1
a860 1
    stringBuffer.append(TEXT_152);
d862 1
a862 1
    stringBuffer.append(TEXT_153);
d870 1
a870 1
    stringBuffer.append(TEXT_154);
d872 1
a872 1
    stringBuffer.append(TEXT_155);
d874 1
a874 1
    stringBuffer.append(TEXT_156);
d878 1
a878 1
    stringBuffer.append(TEXT_157);
d882 1
a882 1
    stringBuffer.append(TEXT_158);
d884 1
a884 1
    stringBuffer.append(TEXT_159);
d894 1
a894 1
    stringBuffer.append(TEXT_160);
d896 1
a896 1
    stringBuffer.append(TEXT_161);
d898 1
a898 1
    stringBuffer.append(TEXT_162);
d900 1
a900 1
    stringBuffer.append(TEXT_163);
d902 1
a902 1
    stringBuffer.append(TEXT_164);
d906 1
a906 1
    stringBuffer.append(TEXT_165);
d910 1
a910 1
    stringBuffer.append(TEXT_166);
d914 1
a914 1
    stringBuffer.append(TEXT_167);
d916 1
a916 1
    stringBuffer.append(TEXT_168);
d918 1
a918 1
    stringBuffer.append(TEXT_169);
d920 1
a920 1
    stringBuffer.append(TEXT_170);
d922 1
a922 1
    stringBuffer.append(TEXT_171);
d924 1
a924 1
    stringBuffer.append(TEXT_172);
d928 1
a928 1
    stringBuffer.append(TEXT_173);
d931 1
a931 1
    stringBuffer.append(TEXT_174);
d933 1
a933 1
    stringBuffer.append(TEXT_175);
d935 1
a935 1
    stringBuffer.append(TEXT_176);
d937 1
a937 1
    stringBuffer.append(TEXT_177);
a938 4
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_179);
    } else {
d942 1
a942 1
    }
d946 4
d953 1
a953 1
    stringBuffer.append(TEXT_184);
d955 1
a955 1
    stringBuffer.append(TEXT_185);
d957 1
a957 1
    stringBuffer.append(TEXT_186);
d961 1
a961 1
    stringBuffer.append(TEXT_187);
d963 1
a963 1
    stringBuffer.append(TEXT_188);
d965 1
a965 1
    stringBuffer.append(TEXT_189);
d967 1
a967 1
    stringBuffer.append(TEXT_190);
d972 1
a972 1
    stringBuffer.append(TEXT_191);
d974 1
a974 1
    stringBuffer.append(TEXT_192);
d976 1
a976 1
    stringBuffer.append(TEXT_193);
d978 1
a978 1
    stringBuffer.append(TEXT_194);
d983 1
a983 1
    stringBuffer.append(TEXT_195);
d985 1
a985 1
    stringBuffer.append(TEXT_196);
d990 1
a990 1
    stringBuffer.append(TEXT_197);
d992 1
a992 1
    stringBuffer.append(TEXT_198);
d994 1
a994 1
    stringBuffer.append(TEXT_199);
d996 1
a996 1
    stringBuffer.append(TEXT_200);
d998 1
a998 1
    stringBuffer.append(TEXT_201);
d1000 1
a1000 1
    stringBuffer.append(TEXT_202);
d1005 1
a1005 1
    stringBuffer.append(TEXT_203);
d1007 1
a1007 1
    stringBuffer.append(TEXT_204);
d1009 1
a1009 1
    stringBuffer.append(TEXT_205);
d1011 1
a1011 1
    stringBuffer.append(TEXT_206);
d1016 1
a1016 1
    stringBuffer.append(TEXT_207);
d1018 1
a1018 1
    stringBuffer.append(TEXT_208);
d1020 1
a1020 1
    stringBuffer.append(TEXT_209);
d1022 1
a1022 1
    stringBuffer.append(TEXT_210);
d1024 1
a1024 1
    stringBuffer.append(TEXT_211);
d1029 1
a1029 1
    stringBuffer.append(TEXT_212);
d1031 1
a1031 1
    stringBuffer.append(TEXT_213);
d1033 1
a1033 1
    stringBuffer.append(TEXT_214);
d1035 1
a1035 1
    stringBuffer.append(TEXT_215);
d1037 1
a1037 1
    stringBuffer.append(TEXT_216);
d1039 1
a1039 1
    stringBuffer.append(TEXT_217);
d1041 1
a1041 1
    stringBuffer.append(TEXT_218);
d1046 1
a1046 1
    stringBuffer.append(TEXT_219);
d1048 1
a1048 1
    stringBuffer.append(TEXT_220);
d1051 1
a1051 1
    stringBuffer.append(TEXT_221);
d1053 1
a1053 1
    stringBuffer.append(TEXT_222);
@


1.99
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d54 188
a241 187
  protected final String TEXT_35 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_36 = "());";
  protected final String TEXT_37 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_38 = "());";
  protected final String TEXT_39 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_40 = "());";
  protected final String TEXT_41 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());";
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_44 = "\", new ";
  protected final String TEXT_45 = "()); //$NON-NLS-1$";
  protected final String TEXT_46 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_47 = " createLayoutEditPolicy() {";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " lep = new ";
  protected final String TEXT_50 = "() {";
  protected final String TEXT_51 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_53 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_54 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = " xlep = new ";
  protected final String TEXT_57 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_58 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_59 = NL + "\t\treturn lep;";
  protected final String TEXT_60 = NL + "\t\t";
  protected final String TEXT_61 = " lep = new ";
  protected final String TEXT_62 = "() {";
  protected final String TEXT_63 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_64 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_65 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_66 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_67 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_68 = NL + "\t\t";
  protected final String TEXT_69 = " xlep = new ";
  protected final String TEXT_70 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_71 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_72 = NL + "\t\treturn lep;";
  protected final String TEXT_73 = NL + "\t\t";
  protected final String TEXT_74 = " lep = new ";
  protected final String TEXT_75 = "() {";
  protected final String TEXT_76 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_79 = " child) {" + NL + "\t\t\t\tif (child instanceof ";
  protected final String TEXT_80 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_81 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}";
  protected final String TEXT_82 = NL + NL + "\t\t\tprotected ";
  protected final String TEXT_83 = " createAddCommand(";
  protected final String TEXT_84 = " child, ";
  protected final String TEXT_85 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_86 = " createMoveChildCommand(";
  protected final String TEXT_87 = " child, ";
  protected final String TEXT_88 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_89 = " getCreateCommand(";
  protected final String TEXT_90 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_91 = NL + "\t\t";
  protected final String TEXT_92 = " xlep = new ";
  protected final String TEXT_93 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_94 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_95 = NL + "\t\treturn lep;";
  protected final String TEXT_96 = NL + "\t\t";
  protected final String TEXT_97 = " lep = new ";
  protected final String TEXT_98 = "() {";
  protected final String TEXT_99 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_100 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_101 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_102 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_103 = " getMoveChildrenCommand(";
  protected final String TEXT_104 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_105 = " getCreateCommand(";
  protected final String TEXT_106 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_107 = NL + "\t\t";
  protected final String TEXT_108 = " xlep = new ";
  protected final String TEXT_109 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_110 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_111 = NL + "\t\treturn lep;";
  protected final String TEXT_112 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_113 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_114 = "()";
  protected final String TEXT_115 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_116 = ";";
  protected final String TEXT_117 = NL + "\t\treturn ";
  protected final String TEXT_118 = ";";
  protected final String TEXT_119 = NL + "\t\t";
  protected final String TEXT_120 = " figure = new ";
  protected final String TEXT_121 = "();";
  protected final String TEXT_122 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_123 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_124 = NL + "\t}";
  protected final String TEXT_125 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_126 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_127 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_128 = NL;
  protected final String TEXT_129 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_130 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_131 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_132 = ") childEditPart).";
  protected final String TEXT_133 = "(getPrimaryShape().";
  protected final String TEXT_134 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_135 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_136 = ") {" + NL + "\t\t\t";
  protected final String TEXT_137 = " pane = getPrimaryShape().";
  protected final String TEXT_138 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_139 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_140 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_141 = ") {" + NL + "\t\t\t";
  protected final String TEXT_142 = " locator = new ";
  protected final String TEXT_143 = "(getMainFigure(), ";
  protected final String TEXT_144 = ".";
  protected final String TEXT_145 = ");" + NL + "\t\t\tgetBorderedFigure().getBorderItemContainer().add(((";
  protected final String TEXT_146 = ")childEditPart).getFigure(), locator);" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_147 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_148 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_149 = ") {" + NL + "\t\t\t";
  protected final String TEXT_150 = " pane = getPrimaryShape().";
  protected final String TEXT_151 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_152 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_153 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_154 = ") {" + NL + "\t\t\tgetBorderedFigure().getBorderItemContainer().remove(((";
  protected final String TEXT_155 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_156 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_157 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_158 = " createNodePlate() {";
  protected final String TEXT_159 = NL + "\t\t";
  protected final String TEXT_160 = " result = new ";
  protected final String TEXT_161 = "(getMapMode().DPtoLP(";
  protected final String TEXT_162 = "), getMapMode().DPtoLP(";
  protected final String TEXT_163 = "));";
  protected final String TEXT_164 = NL + "\t\t//FIXME: workaround for #154536" + NL + "\t\tresult.getBounds().setSize(result.getPreferredSize());";
  protected final String TEXT_165 = "\t\t" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_166 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_167 = " ep = (";
  protected final String TEXT_168 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_169 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_170 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_171 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_172 = ".";
  protected final String TEXT_173 = " | ";
  protected final String TEXT_174 = ");" + NL + "\t\t";
  protected final String TEXT_175 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_176 = NL;
  protected final String TEXT_177 = "\t " + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_178 = " createMainFigure() {";
  protected final String TEXT_179 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_180 = " createNodeFigure() {";
  protected final String TEXT_181 = NL + "\t\t";
  protected final String TEXT_182 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_183 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_184 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_185 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_186 = NL + "\t\t\t";
  protected final String TEXT_187 = " layout = new ";
  protected final String TEXT_188 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_189 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_190 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_191 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_192 = ".getType(";
  protected final String TEXT_193 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_194 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_195 = " childEditPart) {";
  protected final String TEXT_196 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_197 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_198 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_199 = " root = (";
  protected final String TEXT_200 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_201 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_202 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_203 = " childEditPart, int index) {";
  protected final String TEXT_204 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_205 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_206 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_207 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_208 = " childEditPart) {";
  protected final String TEXT_209 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_210 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_211 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_212 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_213 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_214 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_215 = " childEditPart = (";
  protected final String TEXT_216 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_217 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_218 = "\t" + NL;
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = NL + "}";
  protected final String TEXT_221 = NL;
d554 2
a556 2
    stringBuffer.append(TEXT_36);
    if (!genNode.getChildNodes().isEmpty()) {
d558 3
d562 1
a562 1
    stringBuffer.append(TEXT_38);
d566 1
a566 1
    stringBuffer.append(TEXT_39);
d568 1
a568 1
    stringBuffer.append(TEXT_40);
d570 1
a570 1
    stringBuffer.append(TEXT_41);
d572 1
a572 1
    stringBuffer.append(TEXT_42);
d577 1
a577 1
    stringBuffer.append(TEXT_43);
d579 1
a579 1
    stringBuffer.append(TEXT_44);
d581 1
a581 1
    stringBuffer.append(TEXT_45);
d584 1
a584 1
    stringBuffer.append(TEXT_46);
d586 1
a586 1
    stringBuffer.append(TEXT_47);
a591 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy"));
d595 2
d598 1
a598 1
    stringBuffer.append(TEXT_51);
d600 1
a600 1
    stringBuffer.append(TEXT_52);
d602 1
a602 1
    stringBuffer.append(TEXT_53);
d604 1
a604 1
    stringBuffer.append(TEXT_54);
a605 2
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
d609 2
d612 1
a612 1
    stringBuffer.append(TEXT_58);
d614 1
a614 1
    stringBuffer.append(TEXT_59);
a619 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy"));
d623 2
d626 1
a626 1
    stringBuffer.append(TEXT_63);
d628 1
a628 1
    stringBuffer.append(TEXT_64);
d630 1
a630 1
    stringBuffer.append(TEXT_65);
d632 1
a632 1
    stringBuffer.append(TEXT_66);
d634 1
a634 1
    stringBuffer.append(TEXT_67);
a635 2
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
d639 2
d642 1
a642 1
    stringBuffer.append(TEXT_71);
d644 1
a644 1
    stringBuffer.append(TEXT_72);
a649 2
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.FlowLayoutEditPolicy"));
d653 2
d656 1
a656 1
    stringBuffer.append(TEXT_76);
d658 1
a658 1
    stringBuffer.append(TEXT_77);
d660 1
a660 1
    stringBuffer.append(TEXT_78);
d662 1
a662 1
    stringBuffer.append(TEXT_79);
d664 1
a664 1
    stringBuffer.append(TEXT_80);
d666 1
a666 1
    stringBuffer.append(TEXT_81);
d668 1
a668 1
    stringBuffer.append(TEXT_82);
a669 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(fqnEditPart);
d673 2
a675 2
    stringBuffer.append(TEXT_86);
    stringBuffer.append(fqnEditPart);
d679 2
d682 1
a682 1
    stringBuffer.append(TEXT_89);
d684 1
a684 1
    stringBuffer.append(TEXT_90);
a685 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
d689 2
d692 1
a692 1
    stringBuffer.append(TEXT_94);
d694 1
a694 1
    stringBuffer.append(TEXT_95);
a699 2
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
d703 2
d706 1
a706 1
    stringBuffer.append(TEXT_99);
d708 1
a708 1
    stringBuffer.append(TEXT_100);
d710 1
a710 1
    stringBuffer.append(TEXT_101);
d712 1
a712 1
    stringBuffer.append(TEXT_102);
d714 1
a714 1
    stringBuffer.append(TEXT_103);
d716 1
a716 1
    stringBuffer.append(TEXT_104);
d718 1
a718 1
    stringBuffer.append(TEXT_105);
d720 1
a720 1
    stringBuffer.append(TEXT_106);
a721 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName(genDiagram.getExternalNodeLabelHostLayoutEditPolicyQualifiedClassName()));
d725 2
d728 1
a728 1
    stringBuffer.append(TEXT_110);
d730 1
a730 1
    stringBuffer.append(TEXT_111);
d735 1
a735 1
    stringBuffer.append(TEXT_112);
d746 1
a746 1
    stringBuffer.append(TEXT_113);
d748 1
a748 1
    stringBuffer.append(TEXT_114);
d750 1
a750 1
    stringBuffer.append(TEXT_115);
d752 1
a752 1
    stringBuffer.append(TEXT_116);
d755 1
a755 1
    stringBuffer.append(TEXT_117);
d757 1
a757 1
    stringBuffer.append(TEXT_118);
a761 2
    stringBuffer.append(TEXT_119);
    stringBuffer.append(figureQualifiedClassName);
d765 2
a767 2
    stringBuffer.append(TEXT_122);
    }
d771 2
a773 2
    stringBuffer.append(TEXT_125);
    stringBuffer.append(figureQualifiedClassName);
d777 2
d780 1
a780 1
    stringBuffer.append(TEXT_128);
d784 1
a784 1
    stringBuffer.append(TEXT_129);
a791 2
    stringBuffer.append(TEXT_130);
    stringBuffer.append(labelEditPart);
d795 2
d798 1
a798 1
    stringBuffer.append(TEXT_133);
d800 1
a800 1
    stringBuffer.append(TEXT_134);
d809 1
a809 1
    stringBuffer.append(TEXT_135);
d811 1
a811 1
    stringBuffer.append(TEXT_136);
d813 1
a813 1
    stringBuffer.append(TEXT_137);
d815 1
a815 1
    stringBuffer.append(TEXT_138);
d817 1
a817 1
    stringBuffer.append(TEXT_139);
d825 1
a825 1
    stringBuffer.append(TEXT_140);
a826 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.BorderItemLocator"));
d830 2
d833 1
a833 1
    stringBuffer.append(TEXT_144);
d835 1
a835 1
    stringBuffer.append(TEXT_145);
d837 1
a837 1
    stringBuffer.append(TEXT_146);
d841 1
a841 1
    stringBuffer.append(TEXT_147);
d849 1
a849 1
    stringBuffer.append(TEXT_148);
d851 1
a851 1
    stringBuffer.append(TEXT_149);
d853 1
a853 1
    stringBuffer.append(TEXT_150);
d855 1
a855 1
    stringBuffer.append(TEXT_151);
d857 1
a857 1
    stringBuffer.append(TEXT_152);
a864 2
    stringBuffer.append(TEXT_153);
    stringBuffer.append(sideAffixedEidtPartFQN);
d868 2
d873 1
a873 1
    stringBuffer.append(TEXT_156);
d877 1
a877 1
    stringBuffer.append(TEXT_157);
d879 1
a879 1
    stringBuffer.append(TEXT_158);
a888 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure"));
d892 2
d895 1
a895 1
    stringBuffer.append(TEXT_162);
d897 1
a897 1
    stringBuffer.append(TEXT_163);
d901 1
a901 1
    stringBuffer.append(TEXT_164);
d905 1
a905 1
    stringBuffer.append(TEXT_165);
a908 2
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d912 2
d915 1
a915 1
    stringBuffer.append(TEXT_169);
d917 1
a917 1
    stringBuffer.append(TEXT_170);
d919 1
a919 1
    stringBuffer.append(TEXT_171);
d923 1
a923 1
    stringBuffer.append(TEXT_172);
d926 1
a926 1
    stringBuffer.append(TEXT_173);
a927 2
    stringBuffer.append(TEXT_174);
    }
d931 2
d934 1
a934 1
    stringBuffer.append(TEXT_177);
d936 1
a936 1
    stringBuffer.append(TEXT_178);
d938 1
a938 1
    stringBuffer.append(TEXT_179);
d940 1
a940 1
    stringBuffer.append(TEXT_180);
d942 1
a942 1
    stringBuffer.append(TEXT_181);
d944 1
a944 1
    stringBuffer.append(TEXT_182);
d948 1
a948 1
    stringBuffer.append(TEXT_183);
d950 1
a950 1
    stringBuffer.append(TEXT_184);
d952 1
a952 1
    stringBuffer.append(TEXT_185);
a955 2
    stringBuffer.append(TEXT_186);
    stringBuffer.append(layoutClassName);
d959 2
d962 1
a962 1
    stringBuffer.append(TEXT_189);
d967 1
a967 1
    stringBuffer.append(TEXT_190);
d969 1
a969 1
    stringBuffer.append(TEXT_191);
d971 1
a971 1
    stringBuffer.append(TEXT_192);
d973 1
a973 1
    stringBuffer.append(TEXT_193);
d978 1
a978 1
    stringBuffer.append(TEXT_194);
d980 1
a980 1
    stringBuffer.append(TEXT_195);
d985 1
a985 1
    stringBuffer.append(TEXT_196);
d987 1
a987 1
    stringBuffer.append(TEXT_197);
a988 2
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
d992 2
d995 1
a995 1
    stringBuffer.append(TEXT_201);
d1000 1
a1000 1
    stringBuffer.append(TEXT_202);
d1002 1
a1002 1
    stringBuffer.append(TEXT_203);
d1004 1
a1004 1
    stringBuffer.append(TEXT_204);
d1006 1
a1006 1
    stringBuffer.append(TEXT_205);
d1011 1
a1011 1
    stringBuffer.append(TEXT_206);
d1013 1
a1013 1
    stringBuffer.append(TEXT_207);
d1015 1
a1015 1
    stringBuffer.append(TEXT_208);
d1017 1
a1017 1
    stringBuffer.append(TEXT_209);
d1019 1
a1019 1
    stringBuffer.append(TEXT_210);
d1024 1
a1024 1
    stringBuffer.append(TEXT_211);
d1026 1
a1026 1
    stringBuffer.append(TEXT_212);
d1028 1
a1028 1
    stringBuffer.append(TEXT_213);
a1029 2
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d1033 2
d1036 1
a1036 1
    stringBuffer.append(TEXT_217);
d1041 1
a1041 1
    stringBuffer.append(TEXT_218);
d1043 1
a1043 1
    stringBuffer.append(TEXT_219);
d1046 1
a1046 1
    stringBuffer.append(TEXT_220);
d1048 1
a1048 1
    stringBuffer.append(TEXT_221);
@


1.98
log
@[124826] mgolubev - Support nodes with border items
@
text
@d250 1
a250 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.97
log
@add custom behaviour
@
text
@d51 4
a54 4
  protected final String TEXT_32 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_33 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_34 = "());";
  protected final String TEXT_35 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
d56 1
a56 1
  protected final String TEXT_37 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d58 183
a240 159
  protected final String TEXT_39 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_42 = "\", new ";
  protected final String TEXT_43 = "()); //$NON-NLS-1$";
  protected final String TEXT_44 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_45 = " createLayoutEditPolicy() {";
  protected final String TEXT_46 = NL + "\t\t";
  protected final String TEXT_47 = " lep = new ";
  protected final String TEXT_48 = "() {";
  protected final String TEXT_49 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_51 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_52 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " xlep = new ";
  protected final String TEXT_55 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_56 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_57 = NL + "\t\treturn lep;";
  protected final String TEXT_58 = NL + "\t\t";
  protected final String TEXT_59 = " lep = new ";
  protected final String TEXT_60 = "() {";
  protected final String TEXT_61 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_62 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_63 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_64 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_65 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_66 = NL + "\t\t";
  protected final String TEXT_67 = " xlep = new ";
  protected final String TEXT_68 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_69 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_70 = NL + "\t\treturn lep;";
  protected final String TEXT_71 = NL + "\t\t";
  protected final String TEXT_72 = " lep = new ";
  protected final String TEXT_73 = "() {";
  protected final String TEXT_74 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_75 = NL + NL + "\t\t\tprotected ";
  protected final String TEXT_76 = " createAddCommand(";
  protected final String TEXT_77 = " child, ";
  protected final String TEXT_78 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_79 = " createMoveChildCommand(";
  protected final String TEXT_80 = " child, ";
  protected final String TEXT_81 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_82 = " getCreateCommand(";
  protected final String TEXT_83 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_84 = NL + "\t\t";
  protected final String TEXT_85 = " xlep = new ";
  protected final String TEXT_86 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_87 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_88 = NL + "\t\treturn lep;";
  protected final String TEXT_89 = NL + "\t\t";
  protected final String TEXT_90 = " lep = new ";
  protected final String TEXT_91 = "() {";
  protected final String TEXT_92 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_93 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_94 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_95 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_96 = " getMoveChildrenCommand(";
  protected final String TEXT_97 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_98 = " getCreateCommand(";
  protected final String TEXT_99 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_100 = NL + "\t\t";
  protected final String TEXT_101 = " xlep = new ";
  protected final String TEXT_102 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_103 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_104 = NL + "\t\treturn lep;";
  protected final String TEXT_105 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_106 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_107 = "()";
  protected final String TEXT_108 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_109 = ";";
  protected final String TEXT_110 = NL + "\t\treturn ";
  protected final String TEXT_111 = ";";
  protected final String TEXT_112 = NL + "\t\t";
  protected final String TEXT_113 = " figure = new ";
  protected final String TEXT_114 = "();";
  protected final String TEXT_115 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_116 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_117 = NL + "\t}";
  protected final String TEXT_118 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_119 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_120 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_121 = NL;
  protected final String TEXT_122 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_123 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_124 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_125 = ") childEditPart).";
  protected final String TEXT_126 = "(getPrimaryShape().";
  protected final String TEXT_127 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_128 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_129 = ") {" + NL + "\t\t\t";
  protected final String TEXT_130 = " pane = getPrimaryShape().";
  protected final String TEXT_131 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_132 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_133 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_134 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_135 = ") {" + NL + "\t\t\t";
  protected final String TEXT_136 = " pane = getPrimaryShape().";
  protected final String TEXT_137 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_138 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_139 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_140 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_141 = " createNodePlate() {";
  protected final String TEXT_142 = NL + "\t\treturn new ";
  protected final String TEXT_143 = "(getMapMode().DPtoLP(";
  protected final String TEXT_144 = "), getMapMode().DPtoLP(";
  protected final String TEXT_145 = "));" + NL + "\t}";
  protected final String TEXT_146 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_147 = " ep = (";
  protected final String TEXT_148 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_149 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_150 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_151 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_152 = ".";
  protected final String TEXT_153 = " | ";
  protected final String TEXT_154 = ");" + NL + "\t\t";
  protected final String TEXT_155 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_156 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_157 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_158 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_159 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_160 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_161 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_162 = NL + "\t\t\t";
  protected final String TEXT_163 = " layout = new ";
  protected final String TEXT_164 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_165 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_166 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_167 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_168 = ".getType(";
  protected final String TEXT_169 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_170 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_171 = " childEditPart) {";
  protected final String TEXT_172 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_173 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_174 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_175 = " root = (";
  protected final String TEXT_176 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_177 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_178 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_179 = " childEditPart, int index) {";
  protected final String TEXT_180 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_181 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_182 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_184 = " childEditPart) {";
  protected final String TEXT_185 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_186 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_187 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_188 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_189 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_190 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_191 = " childEditPart = (";
  protected final String TEXT_192 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_193 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_194 = "\t" + NL;
  protected final String TEXT_195 = NL;
  protected final String TEXT_196 = NL + "}";
  protected final String TEXT_197 = NL;
d352 1
d355 2
d383 30
d450 4
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart"));
d547 4
d552 1
a552 1
    stringBuffer.append(TEXT_33);
d554 1
a554 1
    stringBuffer.append(TEXT_34);
d556 1
a556 1
    stringBuffer.append(TEXT_35);
d558 1
a558 1
    stringBuffer.append(TEXT_36);
d562 1
a562 1
    stringBuffer.append(TEXT_37);
d564 1
a564 1
    stringBuffer.append(TEXT_38);
d566 1
a566 1
    stringBuffer.append(TEXT_39);
d568 1
a568 1
    stringBuffer.append(TEXT_40);
d573 1
a573 1
    stringBuffer.append(TEXT_41);
d575 1
a575 1
    stringBuffer.append(TEXT_42);
d577 1
a577 1
    stringBuffer.append(TEXT_43);
d580 1
a580 1
    stringBuffer.append(TEXT_44);
d582 1
a582 1
    stringBuffer.append(TEXT_45);
d588 1
a588 1
    stringBuffer.append(TEXT_46);
d590 1
a590 1
    stringBuffer.append(TEXT_47);
d592 1
a592 1
    stringBuffer.append(TEXT_48);
d594 1
a594 1
    stringBuffer.append(TEXT_49);
d596 1
a596 1
    stringBuffer.append(TEXT_50);
d598 1
a598 1
    stringBuffer.append(TEXT_51);
d600 1
a600 1
    stringBuffer.append(TEXT_52);
d602 1
a602 1
    stringBuffer.append(TEXT_53);
d604 1
a604 1
    stringBuffer.append(TEXT_54);
d606 1
a606 1
    stringBuffer.append(TEXT_55);
d608 1
a608 1
    stringBuffer.append(TEXT_56);
d610 1
a610 1
    stringBuffer.append(TEXT_57);
d616 1
a616 1
    stringBuffer.append(TEXT_58);
d618 1
a618 1
    stringBuffer.append(TEXT_59);
d620 1
a620 1
    stringBuffer.append(TEXT_60);
d622 1
a622 1
    stringBuffer.append(TEXT_61);
d624 1
a624 1
    stringBuffer.append(TEXT_62);
d626 1
a626 1
    stringBuffer.append(TEXT_63);
d628 1
a628 1
    stringBuffer.append(TEXT_64);
d630 1
a630 1
    stringBuffer.append(TEXT_65);
d632 1
a632 1
    stringBuffer.append(TEXT_66);
d634 1
a634 1
    stringBuffer.append(TEXT_67);
d636 1
a636 1
    stringBuffer.append(TEXT_68);
d638 1
a638 1
    stringBuffer.append(TEXT_69);
d640 1
a640 1
    stringBuffer.append(TEXT_70);
d646 1
a646 1
    stringBuffer.append(TEXT_71);
d648 1
a648 1
    stringBuffer.append(TEXT_72);
d650 1
a650 1
    stringBuffer.append(TEXT_73);
d652 1
a652 1
    stringBuffer.append(TEXT_74);
d654 11
a664 1
    stringBuffer.append(TEXT_75);
d666 1
a666 1
    stringBuffer.append(TEXT_76);
d668 1
a668 1
    stringBuffer.append(TEXT_77);
d670 1
a670 1
    stringBuffer.append(TEXT_78);
d672 1
a672 1
    stringBuffer.append(TEXT_79);
d674 1
a674 1
    stringBuffer.append(TEXT_80);
d676 1
a676 1
    stringBuffer.append(TEXT_81);
d678 1
a678 1
    stringBuffer.append(TEXT_82);
d680 1
a680 1
    stringBuffer.append(TEXT_83);
d682 1
a682 1
    stringBuffer.append(TEXT_84);
d684 1
a684 1
    stringBuffer.append(TEXT_85);
d686 1
a686 1
    stringBuffer.append(TEXT_86);
d688 1
a688 1
    stringBuffer.append(TEXT_87);
d690 1
a690 1
    stringBuffer.append(TEXT_88);
d696 1
a696 1
    stringBuffer.append(TEXT_89);
d698 1
a698 1
    stringBuffer.append(TEXT_90);
d700 1
a700 1
    stringBuffer.append(TEXT_91);
d702 1
a702 1
    stringBuffer.append(TEXT_92);
d704 1
a704 1
    stringBuffer.append(TEXT_93);
d706 1
a706 1
    stringBuffer.append(TEXT_94);
d708 1
a708 1
    stringBuffer.append(TEXT_95);
d710 1
a710 1
    stringBuffer.append(TEXT_96);
d712 1
a712 1
    stringBuffer.append(TEXT_97);
d714 1
a714 1
    stringBuffer.append(TEXT_98);
d716 1
a716 1
    stringBuffer.append(TEXT_99);
d718 1
a718 1
    stringBuffer.append(TEXT_100);
d720 1
a720 1
    stringBuffer.append(TEXT_101);
d722 1
a722 1
    stringBuffer.append(TEXT_102);
d724 1
a724 1
    stringBuffer.append(TEXT_103);
d726 1
a726 1
    stringBuffer.append(TEXT_104);
d731 1
a731 1
    stringBuffer.append(TEXT_105);
d742 1
a742 1
    stringBuffer.append(TEXT_106);
d744 1
a744 1
    stringBuffer.append(TEXT_107);
d746 1
a746 1
    stringBuffer.append(TEXT_108);
d748 1
a748 1
    stringBuffer.append(TEXT_109);
d751 1
a751 1
    stringBuffer.append(TEXT_110);
d753 1
a753 1
    stringBuffer.append(TEXT_111);
d758 1
a758 1
    stringBuffer.append(TEXT_112);
d760 1
a760 1
    stringBuffer.append(TEXT_113);
d762 1
a762 1
    stringBuffer.append(TEXT_114);
d764 1
a764 1
    stringBuffer.append(TEXT_115);
d766 1
a766 1
    stringBuffer.append(TEXT_116);
d768 1
a768 1
    stringBuffer.append(TEXT_117);
d770 1
a770 1
    stringBuffer.append(TEXT_118);
d772 1
a772 1
    stringBuffer.append(TEXT_119);
d774 1
a774 1
    stringBuffer.append(TEXT_120);
d776 1
a776 1
    stringBuffer.append(TEXT_121);
d780 1
a780 1
    stringBuffer.append(TEXT_122);
d788 1
a788 1
    stringBuffer.append(TEXT_123);
d790 1
a790 1
    stringBuffer.append(TEXT_124);
d792 1
a792 1
    stringBuffer.append(TEXT_125);
d794 1
a794 1
    stringBuffer.append(TEXT_126);
d796 1
a796 1
    stringBuffer.append(TEXT_127);
d805 1
a805 1
    stringBuffer.append(TEXT_128);
d807 1
a807 1
    stringBuffer.append(TEXT_129);
d809 1
a809 1
    stringBuffer.append(TEXT_130);
d811 1
a811 1
    stringBuffer.append(TEXT_131);
d813 1
a813 1
    stringBuffer.append(TEXT_132);
d817 21
a837 1
    stringBuffer.append(TEXT_133);
d845 1
a845 1
    stringBuffer.append(TEXT_134);
d847 1
a847 1
    stringBuffer.append(TEXT_135);
d849 1
a849 1
    stringBuffer.append(TEXT_136);
d851 1
a851 1
    stringBuffer.append(TEXT_137);
d853 1
a853 1
    stringBuffer.append(TEXT_138);
d857 13
a869 1
    stringBuffer.append(TEXT_139);
d873 1
a873 1
    stringBuffer.append(TEXT_140);
d875 1
a875 1
    stringBuffer.append(TEXT_141);
d885 3
a887 1
    stringBuffer.append(TEXT_142);
d889 1
a889 1
    stringBuffer.append(TEXT_143);
d891 1
a891 1
    stringBuffer.append(TEXT_144);
d893 9
a901 1
    stringBuffer.append(TEXT_145);
d905 1
a905 1
    stringBuffer.append(TEXT_146);
d907 1
a907 1
    stringBuffer.append(TEXT_147);
d909 1
a909 1
    stringBuffer.append(TEXT_148);
d911 1
a911 1
    stringBuffer.append(TEXT_149);
d913 1
a913 1
    stringBuffer.append(TEXT_150);
d915 1
a915 1
    stringBuffer.append(TEXT_151);
d919 1
a919 1
    stringBuffer.append(TEXT_152);
d922 1
a922 1
    stringBuffer.append(TEXT_153);
d924 1
a924 1
    stringBuffer.append(TEXT_154);
d926 1
a926 1
    stringBuffer.append(TEXT_155);
d928 7
a934 1
    stringBuffer.append(TEXT_156);
d936 3
a938 1
    stringBuffer.append(TEXT_157);
d940 1
a940 1
    stringBuffer.append(TEXT_158);
d944 1
a944 1
    stringBuffer.append(TEXT_159);
d946 1
a946 1
    stringBuffer.append(TEXT_160);
d948 1
a948 1
    stringBuffer.append(TEXT_161);
d952 1
a952 1
    stringBuffer.append(TEXT_162);
d954 1
a954 1
    stringBuffer.append(TEXT_163);
d956 1
a956 1
    stringBuffer.append(TEXT_164);
d958 1
a958 1
    stringBuffer.append(TEXT_165);
d963 1
a963 1
    stringBuffer.append(TEXT_166);
d965 1
a965 1
    stringBuffer.append(TEXT_167);
d967 1
a967 1
    stringBuffer.append(TEXT_168);
d969 1
a969 1
    stringBuffer.append(TEXT_169);
d974 1
a974 1
    stringBuffer.append(TEXT_170);
d976 1
a976 1
    stringBuffer.append(TEXT_171);
d981 1
a981 1
    stringBuffer.append(TEXT_172);
d983 1
a983 1
    stringBuffer.append(TEXT_173);
d985 1
a985 1
    stringBuffer.append(TEXT_174);
d987 1
a987 1
    stringBuffer.append(TEXT_175);
d989 1
a989 1
    stringBuffer.append(TEXT_176);
d991 1
a991 1
    stringBuffer.append(TEXT_177);
d996 1
a996 1
    stringBuffer.append(TEXT_178);
d998 1
a998 1
    stringBuffer.append(TEXT_179);
d1000 1
a1000 1
    stringBuffer.append(TEXT_180);
d1002 1
a1002 1
    stringBuffer.append(TEXT_181);
d1007 1
a1007 1
    stringBuffer.append(TEXT_182);
d1009 1
a1009 1
    stringBuffer.append(TEXT_183);
d1011 1
a1011 1
    stringBuffer.append(TEXT_184);
d1013 1
a1013 1
    stringBuffer.append(TEXT_185);
d1015 1
a1015 1
    stringBuffer.append(TEXT_186);
d1020 1
a1020 1
    stringBuffer.append(TEXT_187);
d1022 1
a1022 1
    stringBuffer.append(TEXT_188);
d1024 1
a1024 1
    stringBuffer.append(TEXT_189);
d1026 1
a1026 1
    stringBuffer.append(TEXT_190);
d1028 1
a1028 1
    stringBuffer.append(TEXT_191);
d1030 1
a1030 1
    stringBuffer.append(TEXT_192);
d1032 1
a1032 1
    stringBuffer.append(TEXT_193);
d1037 1
a1037 1
    stringBuffer.append(TEXT_194);
d1039 1
a1039 1
    stringBuffer.append(TEXT_195);
d1042 1
a1042 1
    stringBuffer.append(TEXT_196);
d1044 1
a1044 1
    stringBuffer.append(TEXT_197);
@


1.96
log
@#144885 CCE while moving external node label on diagram
@
text
@d58 14
a71 14
  protected final String TEXT_39 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_40 = " createLayoutEditPolicy() {";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " lep = new ";
  protected final String TEXT_43 = "() {";
  protected final String TEXT_44 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_45 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_46 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_47 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " xlep = new ";
  protected final String TEXT_50 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_51 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_52 = NL + "\t\treturn lep;";
d73 12
a84 12
  protected final String TEXT_54 = " lep = new ";
  protected final String TEXT_55 = "() {";
  protected final String TEXT_56 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_57 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_58 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_60 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_61 = NL + "\t\t";
  protected final String TEXT_62 = " xlep = new ";
  protected final String TEXT_63 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_64 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_65 = NL + "\t\treturn lep;";
d86 17
a102 17
  protected final String TEXT_67 = " lep = new ";
  protected final String TEXT_68 = "() {";
  protected final String TEXT_69 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_70 = NL + NL + "\t\t\tprotected ";
  protected final String TEXT_71 = " createAddCommand(";
  protected final String TEXT_72 = " child, ";
  protected final String TEXT_73 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_74 = " createMoveChildCommand(";
  protected final String TEXT_75 = " child, ";
  protected final String TEXT_76 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_77 = " getCreateCommand(";
  protected final String TEXT_78 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_79 = NL + "\t\t";
  protected final String TEXT_80 = " xlep = new ";
  protected final String TEXT_81 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_82 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_83 = NL + "\t\treturn lep;";
d104 38
a141 38
  protected final String TEXT_85 = " lep = new ";
  protected final String TEXT_86 = "() {";
  protected final String TEXT_87 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_88 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_89 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_90 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_91 = " getMoveChildrenCommand(";
  protected final String TEXT_92 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_93 = " getCreateCommand(";
  protected final String TEXT_94 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_95 = NL + "\t\t";
  protected final String TEXT_96 = " xlep = new ";
  protected final String TEXT_97 = "() {" + NL + "" + NL + "\t\t\tprotected boolean isExternalLabel(EditPart editPart) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_98 = ".this.isExternalLabel(editPart);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\txlep.setRealLayoutEditPolicy(lep);" + NL + "\t\treturn xlep;";
  protected final String TEXT_99 = NL + "\t\treturn lep;";
  protected final String TEXT_100 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_101 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_102 = "()";
  protected final String TEXT_103 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_104 = ";";
  protected final String TEXT_105 = NL + "\t\treturn ";
  protected final String TEXT_106 = ";";
  protected final String TEXT_107 = NL + "\t\t";
  protected final String TEXT_108 = " figure = new ";
  protected final String TEXT_109 = "();";
  protected final String TEXT_110 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_111 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_112 = NL + "\t}";
  protected final String TEXT_113 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_114 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_115 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_116 = NL;
  protected final String TEXT_117 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_118 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_119 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_120 = ") childEditPart).";
  protected final String TEXT_121 = "(getPrimaryShape().";
  protected final String TEXT_122 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
d143 56
a198 56
  protected final String TEXT_124 = ") {" + NL + "\t\t\t";
  protected final String TEXT_125 = " pane = getPrimaryShape().";
  protected final String TEXT_126 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_127 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_128 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_129 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_130 = ") {" + NL + "\t\t\t";
  protected final String TEXT_131 = " pane = getPrimaryShape().";
  protected final String TEXT_132 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_133 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_134 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_135 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_136 = " createNodePlate() {";
  protected final String TEXT_137 = NL + "\t\treturn new ";
  protected final String TEXT_138 = "(getMapMode().DPtoLP(";
  protected final String TEXT_139 = "), getMapMode().DPtoLP(";
  protected final String TEXT_140 = "));" + NL + "\t}";
  protected final String TEXT_141 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_142 = " ep = (";
  protected final String TEXT_143 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_144 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_145 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_146 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_147 = ".";
  protected final String TEXT_148 = " | ";
  protected final String TEXT_149 = ");" + NL + "\t\t";
  protected final String TEXT_150 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_151 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_152 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_153 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_154 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_155 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_156 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_157 = NL + "\t\t\t";
  protected final String TEXT_158 = " layout = new ";
  protected final String TEXT_159 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_160 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_161 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_162 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_163 = ".getType(";
  protected final String TEXT_164 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_165 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_166 = " childEditPart) {";
  protected final String TEXT_167 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_168 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_169 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_170 = " root = (";
  protected final String TEXT_171 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_172 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_173 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_174 = " childEditPart, int index) {";
  protected final String TEXT_175 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_176 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_177 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_178 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_179 = " childEditPart) {";
d200 17
a216 12
  protected final String TEXT_181 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_182 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_184 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_185 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_186 = " childEditPart = (";
  protected final String TEXT_187 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_188 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_189 = "\t" + NL;
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = NL + "}";
  protected final String TEXT_192 = NL;
d425 1
a425 2
    {
GenCommonBase genCommonBase = genNode;
d502 14
d517 1
a517 1
    stringBuffer.append(TEXT_40);
d523 1
a523 1
    stringBuffer.append(TEXT_41);
d525 1
a525 1
    stringBuffer.append(TEXT_42);
d527 1
a527 1
    stringBuffer.append(TEXT_43);
d529 1
a529 1
    stringBuffer.append(TEXT_44);
d531 1
a531 1
    stringBuffer.append(TEXT_45);
d533 1
a533 1
    stringBuffer.append(TEXT_46);
d535 1
a535 1
    stringBuffer.append(TEXT_47);
d537 1
a537 1
    stringBuffer.append(TEXT_48);
d539 1
a539 1
    stringBuffer.append(TEXT_49);
d541 1
a541 1
    stringBuffer.append(TEXT_50);
d543 1
a543 1
    stringBuffer.append(TEXT_51);
d545 1
a545 1
    stringBuffer.append(TEXT_52);
d551 1
a551 1
    stringBuffer.append(TEXT_53);
d553 1
a553 1
    stringBuffer.append(TEXT_54);
d555 1
a555 1
    stringBuffer.append(TEXT_55);
d557 1
a557 1
    stringBuffer.append(TEXT_56);
d559 1
a559 1
    stringBuffer.append(TEXT_57);
d561 1
a561 1
    stringBuffer.append(TEXT_58);
d563 1
a563 1
    stringBuffer.append(TEXT_59);
d565 1
a565 1
    stringBuffer.append(TEXT_60);
d567 1
a567 1
    stringBuffer.append(TEXT_61);
d569 1
a569 1
    stringBuffer.append(TEXT_62);
d571 1
a571 1
    stringBuffer.append(TEXT_63);
d573 1
a573 1
    stringBuffer.append(TEXT_64);
d575 1
a575 1
    stringBuffer.append(TEXT_65);
d581 1
a581 1
    stringBuffer.append(TEXT_66);
d583 1
a583 1
    stringBuffer.append(TEXT_67);
d585 1
a585 1
    stringBuffer.append(TEXT_68);
d587 1
a587 1
    stringBuffer.append(TEXT_69);
d589 1
a589 1
    stringBuffer.append(TEXT_70);
d591 1
a591 1
    stringBuffer.append(TEXT_71);
d593 1
a593 1
    stringBuffer.append(TEXT_72);
d595 1
a595 1
    stringBuffer.append(TEXT_73);
d597 1
a597 1
    stringBuffer.append(TEXT_74);
d599 1
a599 1
    stringBuffer.append(TEXT_75);
d601 1
a601 1
    stringBuffer.append(TEXT_76);
d603 1
a603 1
    stringBuffer.append(TEXT_77);
d605 1
a605 1
    stringBuffer.append(TEXT_78);
d607 1
a607 1
    stringBuffer.append(TEXT_79);
d609 1
a609 1
    stringBuffer.append(TEXT_80);
d611 1
a611 1
    stringBuffer.append(TEXT_81);
d613 1
a613 1
    stringBuffer.append(TEXT_82);
d615 1
a615 1
    stringBuffer.append(TEXT_83);
d621 1
a621 1
    stringBuffer.append(TEXT_84);
d623 1
a623 1
    stringBuffer.append(TEXT_85);
d625 1
a625 1
    stringBuffer.append(TEXT_86);
d627 1
a627 1
    stringBuffer.append(TEXT_87);
d629 1
a629 1
    stringBuffer.append(TEXT_88);
d631 1
a631 1
    stringBuffer.append(TEXT_89);
d633 1
a633 1
    stringBuffer.append(TEXT_90);
d635 1
a635 1
    stringBuffer.append(TEXT_91);
d637 1
a637 1
    stringBuffer.append(TEXT_92);
d639 1
a639 1
    stringBuffer.append(TEXT_93);
d641 1
a641 1
    stringBuffer.append(TEXT_94);
d643 1
a643 1
    stringBuffer.append(TEXT_95);
d645 1
a645 1
    stringBuffer.append(TEXT_96);
d647 1
a647 1
    stringBuffer.append(TEXT_97);
d649 1
a649 1
    stringBuffer.append(TEXT_98);
d651 1
a651 1
    stringBuffer.append(TEXT_99);
d656 1
a656 1
    stringBuffer.append(TEXT_100);
d667 1
a667 1
    stringBuffer.append(TEXT_101);
d669 1
a669 1
    stringBuffer.append(TEXT_102);
d671 1
a671 1
    stringBuffer.append(TEXT_103);
d673 1
a673 1
    stringBuffer.append(TEXT_104);
d676 1
a676 1
    stringBuffer.append(TEXT_105);
d678 1
a678 1
    stringBuffer.append(TEXT_106);
d683 1
a683 1
    stringBuffer.append(TEXT_107);
d685 1
a685 1
    stringBuffer.append(TEXT_108);
d687 1
a687 1
    stringBuffer.append(TEXT_109);
d689 1
a689 1
    stringBuffer.append(TEXT_110);
d691 1
a691 1
    stringBuffer.append(TEXT_111);
d693 1
a693 1
    stringBuffer.append(TEXT_112);
d695 1
a695 1
    stringBuffer.append(TEXT_113);
d697 1
a697 1
    stringBuffer.append(TEXT_114);
d699 1
a699 1
    stringBuffer.append(TEXT_115);
d701 1
a701 1
    stringBuffer.append(TEXT_116);
d705 1
a705 1
    stringBuffer.append(TEXT_117);
d713 1
a713 1
    stringBuffer.append(TEXT_118);
d715 1
a715 1
    stringBuffer.append(TEXT_119);
d717 1
a717 1
    stringBuffer.append(TEXT_120);
d719 1
a719 1
    stringBuffer.append(TEXT_121);
d721 1
a721 1
    stringBuffer.append(TEXT_122);
d730 1
a730 1
    stringBuffer.append(TEXT_123);
d732 1
a732 1
    stringBuffer.append(TEXT_124);
d734 1
a734 1
    stringBuffer.append(TEXT_125);
d736 1
a736 1
    stringBuffer.append(TEXT_126);
d738 1
a738 1
    stringBuffer.append(TEXT_127);
d742 1
a742 1
    stringBuffer.append(TEXT_128);
d750 1
a750 1
    stringBuffer.append(TEXT_129);
d752 1
a752 1
    stringBuffer.append(TEXT_130);
d754 1
a754 1
    stringBuffer.append(TEXT_131);
d756 1
a756 1
    stringBuffer.append(TEXT_132);
d758 1
a758 1
    stringBuffer.append(TEXT_133);
d762 1
a762 1
    stringBuffer.append(TEXT_134);
d766 1
a766 1
    stringBuffer.append(TEXT_135);
d768 1
a768 1
    stringBuffer.append(TEXT_136);
d778 1
a778 1
    stringBuffer.append(TEXT_137);
d780 1
a780 1
    stringBuffer.append(TEXT_138);
d782 1
a782 1
    stringBuffer.append(TEXT_139);
d784 1
a784 1
    stringBuffer.append(TEXT_140);
d788 1
a788 1
    stringBuffer.append(TEXT_141);
d790 1
a790 1
    stringBuffer.append(TEXT_142);
d792 1
a792 1
    stringBuffer.append(TEXT_143);
d794 1
a794 1
    stringBuffer.append(TEXT_144);
d796 1
a796 1
    stringBuffer.append(TEXT_145);
d798 1
a798 1
    stringBuffer.append(TEXT_146);
d802 1
a802 1
    stringBuffer.append(TEXT_147);
d805 1
a805 1
    stringBuffer.append(TEXT_148);
d807 1
a807 1
    stringBuffer.append(TEXT_149);
d809 1
a809 1
    stringBuffer.append(TEXT_150);
d811 1
a811 1
    stringBuffer.append(TEXT_151);
d813 1
a813 1
    stringBuffer.append(TEXT_152);
d815 1
a815 1
    stringBuffer.append(TEXT_153);
d819 1
a819 1
    stringBuffer.append(TEXT_154);
d821 1
a821 1
    stringBuffer.append(TEXT_155);
d823 1
a823 1
    stringBuffer.append(TEXT_156);
d827 1
a827 1
    stringBuffer.append(TEXT_157);
d829 1
a829 1
    stringBuffer.append(TEXT_158);
d831 1
a831 1
    stringBuffer.append(TEXT_159);
d833 1
a833 1
    stringBuffer.append(TEXT_160);
d838 1
a838 1
    stringBuffer.append(TEXT_161);
d840 1
a840 1
    stringBuffer.append(TEXT_162);
d842 1
a842 1
    stringBuffer.append(TEXT_163);
d844 1
a844 1
    stringBuffer.append(TEXT_164);
d849 1
a849 1
    stringBuffer.append(TEXT_165);
d851 1
a851 1
    stringBuffer.append(TEXT_166);
d856 1
a856 1
    stringBuffer.append(TEXT_167);
d858 1
a858 1
    stringBuffer.append(TEXT_168);
d860 1
a860 1
    stringBuffer.append(TEXT_169);
d862 1
a862 1
    stringBuffer.append(TEXT_170);
d864 1
a864 1
    stringBuffer.append(TEXT_171);
d866 1
a866 1
    stringBuffer.append(TEXT_172);
d871 1
a871 1
    stringBuffer.append(TEXT_173);
d873 1
a873 1
    stringBuffer.append(TEXT_174);
d875 1
a875 1
    stringBuffer.append(TEXT_175);
d877 1
a877 1
    stringBuffer.append(TEXT_176);
d882 1
a882 1
    stringBuffer.append(TEXT_177);
d884 1
a884 1
    stringBuffer.append(TEXT_178);
d886 1
a886 1
    stringBuffer.append(TEXT_179);
d888 1
a888 1
    stringBuffer.append(TEXT_180);
d890 1
a890 1
    stringBuffer.append(TEXT_181);
d895 1
a895 1
    stringBuffer.append(TEXT_182);
d897 1
a897 1
    stringBuffer.append(TEXT_183);
d899 1
a899 1
    stringBuffer.append(TEXT_184);
d901 1
a901 1
    stringBuffer.append(TEXT_185);
d903 1
a903 1
    stringBuffer.append(TEXT_186);
d905 1
a905 1
    stringBuffer.append(TEXT_187);
d907 1
a907 1
    stringBuffer.append(TEXT_188);
d912 1
a912 1
    stringBuffer.append(TEXT_189);
d914 1
a914 1
    stringBuffer.append(TEXT_190);
d917 1
a917 1
    stringBuffer.append(TEXT_191);
d919 1
a919 1
    stringBuffer.append(TEXT_192);
@


1.95
log
@[Fedor Isakov] #127491 When node is removed external label remains, should not
@
text
@d72 24
a95 24
  protected final String TEXT_53 = NL + "\t\treturn new ";
  protected final String TEXT_54 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_55 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_57 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_58 = NL + "\t\treturn new ";
  protected final String TEXT_59 = "() {" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_60 = " createAddCommand(";
  protected final String TEXT_61 = " child, ";
  protected final String TEXT_62 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_63 = " createMoveChildCommand(";
  protected final String TEXT_64 = " child, ";
  protected final String TEXT_65 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_66 = " getCreateCommand(";
  protected final String TEXT_67 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_68 = NL + "\t\t";
  protected final String TEXT_69 = " lep = new ";
  protected final String TEXT_70 = "() {";
  protected final String TEXT_71 = NL + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}";
  protected final String TEXT_72 = NL + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_73 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_74 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_75 = " getMoveChildrenCommand(";
  protected final String TEXT_76 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
d103 109
a211 93
  protected final String TEXT_84 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_85 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_86 = "()";
  protected final String TEXT_87 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_88 = ";";
  protected final String TEXT_89 = NL + "\t\treturn ";
  protected final String TEXT_90 = ";";
  protected final String TEXT_91 = NL + "\t\t";
  protected final String TEXT_92 = " figure = new ";
  protected final String TEXT_93 = "();";
  protected final String TEXT_94 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_95 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_96 = NL + "\t}";
  protected final String TEXT_97 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_98 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_99 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_102 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_104 = ") childEditPart).";
  protected final String TEXT_105 = "(getPrimaryShape().";
  protected final String TEXT_106 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_107 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_108 = ") {" + NL + "\t\t\t";
  protected final String TEXT_109 = " pane = getPrimaryShape().";
  protected final String TEXT_110 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_111 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_112 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_113 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_114 = ") {" + NL + "\t\t\t";
  protected final String TEXT_115 = " pane = getPrimaryShape().";
  protected final String TEXT_116 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_117 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_118 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_119 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_120 = " createNodePlate() {";
  protected final String TEXT_121 = NL + "\t\treturn new ";
  protected final String TEXT_122 = "(getMapMode().DPtoLP(";
  protected final String TEXT_123 = "), getMapMode().DPtoLP(";
  protected final String TEXT_124 = "));" + NL + "\t}";
  protected final String TEXT_125 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_126 = " ep = (";
  protected final String TEXT_127 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_128 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_129 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_130 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_131 = ".";
  protected final String TEXT_132 = " | ";
  protected final String TEXT_133 = ");" + NL + "\t\t";
  protected final String TEXT_134 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_135 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_136 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_137 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_138 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_139 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_140 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_141 = NL + "\t\t\t";
  protected final String TEXT_142 = " layout = new ";
  protected final String TEXT_143 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_144 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_145 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_146 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_147 = ".getType(";
  protected final String TEXT_148 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_149 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_150 = " childEditPart) {";
  protected final String TEXT_151 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_152 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_153 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_154 = " root = (";
  protected final String TEXT_155 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_156 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_157 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_158 = " childEditPart, int index) {";
  protected final String TEXT_159 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_160 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_161 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_162 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_163 = " childEditPart) {";
  protected final String TEXT_164 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_165 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_166 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_167 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_168 = "\t\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void removeNotify() {" + NL + "\t\tfor (";
  protected final String TEXT_169 = " it = getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_170 = " childEditPart = (";
  protected final String TEXT_171 = ") it.next();" + NL + "\t\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_172 = ") childEditPart).getFigure();" + NL + "\t\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tsuper.removeNotify();" + NL + "\t}";
  protected final String TEXT_173 = "\t" + NL;
  protected final String TEXT_174 = NL;
  protected final String TEXT_175 = NL + "}";
  protected final String TEXT_176 = NL;
d536 1
a536 1
    stringBuffer.append(fqnEditPart);
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
d542 1
a542 3
    	break;
	case ViewmapLayoutType.FLOW_LAYOUT:

d544 1
a544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.FlowLayoutEditPolicy"));
d546 1
a546 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d548 1
a548 1
    stringBuffer.append(fqnEditPart);
d550 1
a550 1
    stringBuffer.append(fqnEditPart);
d552 1
a552 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d554 1
a554 1
    stringBuffer.append(fqnEditPart);
d556 1
a556 1
    stringBuffer.append(fqnEditPart);
a557 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
    stringBuffer.append(TEXT_67);
d559 1
d561 1
a561 1
	default:
d563 4
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
d572 1
a572 1
    		if (myHelper.hasExternalLabels()) {
d574 1
a574 1
    		}
d578 1
a578 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.NonResizableEditPolicy"));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d582 1
a582 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d600 36
d638 1
a638 1
    stringBuffer.append(TEXT_84);
d649 1
a649 1
    stringBuffer.append(TEXT_85);
d651 1
a651 1
    stringBuffer.append(TEXT_86);
d653 1
a653 1
    stringBuffer.append(TEXT_87);
d655 1
a655 1
    stringBuffer.append(TEXT_88);
d658 1
a658 1
    stringBuffer.append(TEXT_89);
d660 1
a660 1
    stringBuffer.append(TEXT_90);
d665 1
a665 1
    stringBuffer.append(TEXT_91);
d667 1
a667 1
    stringBuffer.append(TEXT_92);
d669 1
a669 1
    stringBuffer.append(TEXT_93);
d671 1
a671 1
    stringBuffer.append(TEXT_94);
d673 1
a673 1
    stringBuffer.append(TEXT_95);
d675 1
a675 1
    stringBuffer.append(TEXT_96);
d677 1
a677 1
    stringBuffer.append(TEXT_97);
d679 1
a679 1
    stringBuffer.append(TEXT_98);
d681 1
a681 1
    stringBuffer.append(TEXT_99);
d683 1
a683 1
    stringBuffer.append(TEXT_100);
d687 1
a687 1
    stringBuffer.append(TEXT_101);
d695 1
a695 1
    stringBuffer.append(TEXT_102);
d697 1
a697 1
    stringBuffer.append(TEXT_103);
d699 1
a699 1
    stringBuffer.append(TEXT_104);
d701 1
a701 1
    stringBuffer.append(TEXT_105);
d703 1
a703 1
    stringBuffer.append(TEXT_106);
d712 1
a712 1
    stringBuffer.append(TEXT_107);
d714 1
a714 1
    stringBuffer.append(TEXT_108);
d716 1
a716 1
    stringBuffer.append(TEXT_109);
d718 1
a718 1
    stringBuffer.append(TEXT_110);
d720 1
a720 1
    stringBuffer.append(TEXT_111);
d724 1
a724 1
    stringBuffer.append(TEXT_112);
d732 1
a732 1
    stringBuffer.append(TEXT_113);
d734 1
a734 1
    stringBuffer.append(TEXT_114);
d736 1
a736 1
    stringBuffer.append(TEXT_115);
d738 1
a738 1
    stringBuffer.append(TEXT_116);
d740 1
a740 1
    stringBuffer.append(TEXT_117);
d744 1
a744 1
    stringBuffer.append(TEXT_118);
d748 1
a748 1
    stringBuffer.append(TEXT_119);
d750 1
a750 1
    stringBuffer.append(TEXT_120);
d760 1
a760 1
    stringBuffer.append(TEXT_121);
d762 1
a762 1
    stringBuffer.append(TEXT_122);
d764 1
a764 1
    stringBuffer.append(TEXT_123);
d766 1
a766 1
    stringBuffer.append(TEXT_124);
d770 1
a770 1
    stringBuffer.append(TEXT_125);
d772 1
a772 1
    stringBuffer.append(TEXT_126);
d774 1
a774 1
    stringBuffer.append(TEXT_127);
d776 1
a776 1
    stringBuffer.append(TEXT_128);
d778 1
a778 1
    stringBuffer.append(TEXT_129);
d780 1
a780 1
    stringBuffer.append(TEXT_130);
d784 1
a784 1
    stringBuffer.append(TEXT_131);
d787 1
a787 1
    stringBuffer.append(TEXT_132);
d789 1
a789 1
    stringBuffer.append(TEXT_133);
d791 1
a791 1
    stringBuffer.append(TEXT_134);
d793 1
a793 1
    stringBuffer.append(TEXT_135);
d795 1
a795 1
    stringBuffer.append(TEXT_136);
d797 1
a797 1
    stringBuffer.append(TEXT_137);
d801 1
a801 1
    stringBuffer.append(TEXT_138);
d803 1
a803 1
    stringBuffer.append(TEXT_139);
d805 1
a805 1
    stringBuffer.append(TEXT_140);
d809 1
a809 1
    stringBuffer.append(TEXT_141);
d811 1
a811 1
    stringBuffer.append(TEXT_142);
d813 1
a813 1
    stringBuffer.append(TEXT_143);
d815 1
a815 1
    stringBuffer.append(TEXT_144);
d820 1
a820 1
    stringBuffer.append(TEXT_145);
d822 1
a822 1
    stringBuffer.append(TEXT_146);
d824 1
a824 1
    stringBuffer.append(TEXT_147);
d826 1
a826 1
    stringBuffer.append(TEXT_148);
d831 1
a831 1
    stringBuffer.append(TEXT_149);
d833 1
a833 1
    stringBuffer.append(TEXT_150);
d838 1
a838 1
    stringBuffer.append(TEXT_151);
d840 1
a840 1
    stringBuffer.append(TEXT_152);
d842 1
a842 1
    stringBuffer.append(TEXT_153);
d844 1
a844 1
    stringBuffer.append(TEXT_154);
d846 1
a846 1
    stringBuffer.append(TEXT_155);
d848 1
a848 1
    stringBuffer.append(TEXT_156);
d853 1
a853 1
    stringBuffer.append(TEXT_157);
d855 1
a855 1
    stringBuffer.append(TEXT_158);
d857 1
a857 1
    stringBuffer.append(TEXT_159);
d859 1
a859 1
    stringBuffer.append(TEXT_160);
d864 1
a864 1
    stringBuffer.append(TEXT_161);
d866 1
a866 1
    stringBuffer.append(TEXT_162);
d868 1
a868 1
    stringBuffer.append(TEXT_163);
d870 1
a870 1
    stringBuffer.append(TEXT_164);
d872 1
a872 1
    stringBuffer.append(TEXT_165);
d877 1
a877 1
    stringBuffer.append(TEXT_166);
d879 1
a879 1
    stringBuffer.append(TEXT_167);
d881 1
a881 1
    stringBuffer.append(TEXT_168);
d883 1
a883 1
    stringBuffer.append(TEXT_169);
d885 1
a885 1
    stringBuffer.append(TEXT_170);
d887 1
a887 1
    stringBuffer.append(TEXT_171);
d889 1
a889 1
    stringBuffer.append(TEXT_172);
d894 1
a894 1
    stringBuffer.append(TEXT_173);
d896 1
a896 1
    stringBuffer.append(TEXT_174);
d899 1
a899 1
    stringBuffer.append(TEXT_175);
d901 1
a901 1
    stringBuffer.append(TEXT_176);
@


1.94
log
@#144885 CCE while moving external node label on diagram
@
text
@d187 9
a195 4
  protected final String TEXT_168 = "\t" + NL;
  protected final String TEXT_169 = NL;
  protected final String TEXT_170 = NL + "}";
  protected final String TEXT_171 = NL;
d778 1
a778 2

if (myHelper.hasExternalLabels()){
d790 1
a790 3
    
	}

a799 1

d805 1
a805 3
    
if (myHelper.hasExternalLabels()){

d810 2
a811 2
}
if (myHelper.hasFixedChildren()){
d814 1
a814 3
    
}

d818 1
a818 3
    
if (myHelper.hasExternalLabels()){

d823 2
a824 2
}
if (myHelper.hasFixedChildren()){
d827 1
a827 3
    
}

d829 1
a829 3
    
} // if hasFixedChildren || hasExternalLabels 

d831 8
d840 2
a841 1
if (genNode.getViewmap() instanceof InnerClassViewmap) {
d843 3
a845 1
    stringBuffer.append(TEXT_169);
d848 1
a848 1
    stringBuffer.append(TEXT_170);
d850 1
a850 1
    stringBuffer.append(TEXT_171);
@


1.93
log
@#144885 CCE while moving external node label on diagram
@
text
@d87 104
a190 96
  protected final String TEXT_68 = NL + "\t\treturn new ";
  protected final String TEXT_69 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_70 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_71 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_72 = " getMoveChildrenCommand(";
  protected final String TEXT_73 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_74 = " getCreateCommand(";
  protected final String TEXT_75 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_76 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_77 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_78 = "()";
  protected final String TEXT_79 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_80 = ";";
  protected final String TEXT_81 = NL + "\t\treturn ";
  protected final String TEXT_82 = ";";
  protected final String TEXT_83 = NL + "\t\t";
  protected final String TEXT_84 = " figure = new ";
  protected final String TEXT_85 = "();";
  protected final String TEXT_86 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_87 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_88 = NL + "\t}";
  protected final String TEXT_89 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_90 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_91 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_94 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_96 = ") childEditPart).";
  protected final String TEXT_97 = "(getPrimaryShape().";
  protected final String TEXT_98 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_99 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_100 = ") {" + NL + "\t\t\t";
  protected final String TEXT_101 = " pane = getPrimaryShape().";
  protected final String TEXT_102 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_103 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_104 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_105 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_106 = ") {" + NL + "\t\t\t";
  protected final String TEXT_107 = " pane = getPrimaryShape().";
  protected final String TEXT_108 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_109 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_110 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_112 = " createNodePlate() {";
  protected final String TEXT_113 = NL + "\t\treturn new ";
  protected final String TEXT_114 = "(getMapMode().DPtoLP(";
  protected final String TEXT_115 = "), getMapMode().DPtoLP(";
  protected final String TEXT_116 = "));" + NL + "\t}";
  protected final String TEXT_117 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_118 = " ep = (";
  protected final String TEXT_119 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_120 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_121 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_122 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_123 = ".";
  protected final String TEXT_124 = " | ";
  protected final String TEXT_125 = ");" + NL + "\t\t";
  protected final String TEXT_126 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_127 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_128 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_129 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_130 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_131 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_132 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_133 = NL + "\t\t\t";
  protected final String TEXT_134 = " layout = new ";
  protected final String TEXT_135 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_136 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_137 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_138 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_139 = ".getType(";
  protected final String TEXT_140 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_141 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_142 = " childEditPart) {";
  protected final String TEXT_143 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_144 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_145 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_146 = " root = (";
  protected final String TEXT_147 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_148 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_149 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_150 = " childEditPart, int index) {";
  protected final String TEXT_151 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_152 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_153 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_154 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_155 = " childEditPart) {";
  protected final String TEXT_156 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_157 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_158 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_159 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_160 = "\t" + NL;
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = NL + "}";
  protected final String TEXT_163 = NL;
d543 2
a544 1
    	break;
d550 1
a550 1
    stringBuffer.append(fqnEditPart);
d552 1
a552 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.NonResizableEditPolicy"));
d554 1
a554 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d558 2
a560 2
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
d562 1
a562 1
    } //switch 
d564 19
d593 1
a593 1
    stringBuffer.append(TEXT_77);
d595 1
a595 1
    stringBuffer.append(TEXT_78);
d597 1
a597 1
    stringBuffer.append(TEXT_79);
d599 1
a599 1
    stringBuffer.append(TEXT_80);
d602 1
a602 1
    stringBuffer.append(TEXT_81);
d604 1
a604 1
    stringBuffer.append(TEXT_82);
d609 1
a609 1
    stringBuffer.append(TEXT_83);
d611 1
a611 1
    stringBuffer.append(TEXT_84);
d613 1
a613 1
    stringBuffer.append(TEXT_85);
d615 1
a615 1
    stringBuffer.append(TEXT_86);
d617 1
a617 1
    stringBuffer.append(TEXT_87);
d619 1
a619 1
    stringBuffer.append(TEXT_88);
d621 1
a621 1
    stringBuffer.append(TEXT_89);
d623 1
a623 1
    stringBuffer.append(TEXT_90);
d625 1
a625 1
    stringBuffer.append(TEXT_91);
d627 1
a627 1
    stringBuffer.append(TEXT_92);
d631 1
a631 1
    stringBuffer.append(TEXT_93);
d639 1
a639 1
    stringBuffer.append(TEXT_94);
d641 1
a641 1
    stringBuffer.append(TEXT_95);
d643 1
a643 1
    stringBuffer.append(TEXT_96);
d645 1
a645 1
    stringBuffer.append(TEXT_97);
d647 1
a647 1
    stringBuffer.append(TEXT_98);
d656 1
a656 1
    stringBuffer.append(TEXT_99);
d658 1
a658 1
    stringBuffer.append(TEXT_100);
d660 1
a660 1
    stringBuffer.append(TEXT_101);
d662 1
a662 1
    stringBuffer.append(TEXT_102);
d664 1
a664 1
    stringBuffer.append(TEXT_103);
d668 1
a668 1
    stringBuffer.append(TEXT_104);
d676 1
a676 1
    stringBuffer.append(TEXT_105);
d678 1
a678 1
    stringBuffer.append(TEXT_106);
d680 1
a680 1
    stringBuffer.append(TEXT_107);
d682 1
a682 1
    stringBuffer.append(TEXT_108);
d684 1
a684 1
    stringBuffer.append(TEXT_109);
d688 1
a688 1
    stringBuffer.append(TEXT_110);
d692 1
a692 1
    stringBuffer.append(TEXT_111);
d694 1
a694 1
    stringBuffer.append(TEXT_112);
d704 1
a704 1
    stringBuffer.append(TEXT_113);
d706 1
a706 1
    stringBuffer.append(TEXT_114);
d708 1
a708 1
    stringBuffer.append(TEXT_115);
d710 1
a710 1
    stringBuffer.append(TEXT_116);
d714 1
a714 1
    stringBuffer.append(TEXT_117);
d716 1
a716 1
    stringBuffer.append(TEXT_118);
d718 1
a718 1
    stringBuffer.append(TEXT_119);
d720 1
a720 1
    stringBuffer.append(TEXT_120);
d722 1
a722 1
    stringBuffer.append(TEXT_121);
d724 1
a724 1
    stringBuffer.append(TEXT_122);
d728 1
a728 1
    stringBuffer.append(TEXT_123);
d731 1
a731 1
    stringBuffer.append(TEXT_124);
d733 1
a733 1
    stringBuffer.append(TEXT_125);
d735 1
a735 1
    stringBuffer.append(TEXT_126);
d737 1
a737 1
    stringBuffer.append(TEXT_127);
d739 1
a739 1
    stringBuffer.append(TEXT_128);
d741 1
a741 1
    stringBuffer.append(TEXT_129);
d745 1
a745 1
    stringBuffer.append(TEXT_130);
d747 1
a747 1
    stringBuffer.append(TEXT_131);
d749 1
a749 1
    stringBuffer.append(TEXT_132);
d753 1
a753 1
    stringBuffer.append(TEXT_133);
d755 1
a755 1
    stringBuffer.append(TEXT_134);
d757 1
a757 1
    stringBuffer.append(TEXT_135);
d759 1
a759 1
    stringBuffer.append(TEXT_136);
d764 1
a764 1
    stringBuffer.append(TEXT_137);
d766 1
a766 1
    stringBuffer.append(TEXT_138);
d768 1
a768 1
    stringBuffer.append(TEXT_139);
d770 1
a770 1
    stringBuffer.append(TEXT_140);
d776 1
a776 1
    stringBuffer.append(TEXT_141);
d778 1
a778 1
    stringBuffer.append(TEXT_142);
d783 1
a783 1
    stringBuffer.append(TEXT_143);
d785 1
a785 1
    stringBuffer.append(TEXT_144);
d789 1
a789 1
    stringBuffer.append(TEXT_145);
d791 1
a791 1
    stringBuffer.append(TEXT_146);
d793 1
a793 1
    stringBuffer.append(TEXT_147);
d795 1
a795 1
    stringBuffer.append(TEXT_148);
d801 1
a801 1
    stringBuffer.append(TEXT_149);
d803 1
a803 1
    stringBuffer.append(TEXT_150);
d807 1
a807 1
    stringBuffer.append(TEXT_151);
d809 1
a809 1
    stringBuffer.append(TEXT_152);
d814 1
a814 1
    stringBuffer.append(TEXT_153);
d818 1
a818 1
    stringBuffer.append(TEXT_154);
d820 1
a820 1
    stringBuffer.append(TEXT_155);
d824 1
a824 1
    stringBuffer.append(TEXT_156);
d826 1
a826 1
    stringBuffer.append(TEXT_157);
d831 1
a831 1
    stringBuffer.append(TEXT_158);
d835 1
a835 1
    stringBuffer.append(TEXT_159);
d839 1
a839 1
    stringBuffer.append(TEXT_160);
d843 1
a843 1
    stringBuffer.append(TEXT_161);
d846 1
a846 1
    stringBuffer.append(TEXT_162);
d848 1
a848 1
    stringBuffer.append(TEXT_163);
@


1.92
log
@use import manager to produce short class name
@
text
@d60 123
a182 119
  protected final String TEXT_41 = "\t" + NL + "\t\treturn new ";
  protected final String TEXT_42 = "() {" + NL;
  protected final String TEXT_43 = NL + "\t\t\tprotected ";
  protected final String TEXT_44 = " getCurrentConstraintFor(";
  protected final String TEXT_45 = " child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn child.getFigure().getBounds().getTranslated(getLayoutOrigin());" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getCurrentConstraintFor(child);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected void decorateChild(EditPart child) {" + NL + "\t\t\t\tif (isExternalLabel(child)) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsuper.decorateChild(child);" + NL + "\t\t\t}" + NL;
  protected final String TEXT_46 = NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_47 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_48 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_49 = NL + "\t\treturn new ";
  protected final String TEXT_50 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_51 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_52 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_53 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_54 = NL + "\t\treturn new ";
  protected final String TEXT_55 = "() {" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_56 = " createAddCommand(";
  protected final String TEXT_57 = " child, ";
  protected final String TEXT_58 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_59 = " createMoveChildCommand(";
  protected final String TEXT_60 = " child, ";
  protected final String TEXT_61 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_62 = " getCreateCommand(";
  protected final String TEXT_63 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_64 = NL + "\t\treturn new ";
  protected final String TEXT_65 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_66 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_67 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_68 = " getMoveChildrenCommand(";
  protected final String TEXT_69 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_70 = " getCreateCommand(";
  protected final String TEXT_71 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_72 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_73 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_74 = "()";
  protected final String TEXT_75 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_76 = ";";
  protected final String TEXT_77 = NL + "\t\treturn ";
  protected final String TEXT_78 = ";";
  protected final String TEXT_79 = NL + "\t\t";
  protected final String TEXT_80 = " figure = new ";
  protected final String TEXT_81 = "();";
  protected final String TEXT_82 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_83 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_84 = NL + "\t}";
  protected final String TEXT_85 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_86 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_87 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_90 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_92 = ") childEditPart).";
  protected final String TEXT_93 = "(getPrimaryShape().";
  protected final String TEXT_94 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_95 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_96 = ") {" + NL + "\t\t\t";
  protected final String TEXT_97 = " pane = getPrimaryShape().";
  protected final String TEXT_98 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_99 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_100 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_101 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_102 = ") {" + NL + "\t\t\t";
  protected final String TEXT_103 = " pane = getPrimaryShape().";
  protected final String TEXT_104 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_105 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_106 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_108 = " createNodePlate() {";
  protected final String TEXT_109 = NL + "\t\treturn new ";
  protected final String TEXT_110 = "(getMapMode().DPtoLP(";
  protected final String TEXT_111 = "), getMapMode().DPtoLP(";
  protected final String TEXT_112 = "));" + NL + "\t}";
  protected final String TEXT_113 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_114 = " ep = (";
  protected final String TEXT_115 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_116 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_117 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_118 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_119 = ".";
  protected final String TEXT_120 = " | ";
  protected final String TEXT_121 = ");" + NL + "\t\t";
  protected final String TEXT_122 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_123 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_124 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_125 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_126 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_127 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_128 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_129 = NL + "\t\t\t";
  protected final String TEXT_130 = " layout = new ";
  protected final String TEXT_131 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_132 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_133 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_134 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_135 = ".getType(";
  protected final String TEXT_136 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_137 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_138 = " childEditPart) {";
  protected final String TEXT_139 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_140 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_141 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_142 = " root = (";
  protected final String TEXT_143 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_144 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_145 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_146 = " childEditPart, int index) {";
  protected final String TEXT_147 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_148 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_149 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_150 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_151 = " childEditPart) {";
  protected final String TEXT_152 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_153 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_154 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_156 = "\t" + NL;
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = NL + "}";
  protected final String TEXT_159 = NL;
d479 2
a481 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d483 1
a483 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d485 1
a485 1
    		}
d487 1
a487 1
    stringBuffer.append(fqnEditPart);
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
d491 11
a501 1
    	break;
d504 1
a504 1
    stringBuffer.append(TEXT_49);
d506 1
a506 1
    stringBuffer.append(TEXT_50);
d508 1
a508 1
    stringBuffer.append(TEXT_51);
d510 1
a510 1
    stringBuffer.append(TEXT_52);
d512 1
a512 1
    stringBuffer.append(TEXT_53);
d516 1
a516 1
    stringBuffer.append(TEXT_54);
d518 1
a518 1
    stringBuffer.append(TEXT_55);
d520 1
a520 1
    stringBuffer.append(TEXT_56);
d522 1
a522 1
    stringBuffer.append(TEXT_57);
d524 1
a524 1
    stringBuffer.append(TEXT_58);
d526 1
a526 1
    stringBuffer.append(TEXT_59);
d528 1
a528 1
    stringBuffer.append(TEXT_60);
d530 1
a530 1
    stringBuffer.append(TEXT_61);
d532 1
a532 1
    stringBuffer.append(TEXT_62);
d534 1
a534 1
    stringBuffer.append(TEXT_63);
d538 1
a538 1
    stringBuffer.append(TEXT_64);
d540 1
a540 1
    stringBuffer.append(TEXT_65);
d542 1
a542 1
    stringBuffer.append(TEXT_66);
d544 1
a544 1
    stringBuffer.append(TEXT_67);
d546 1
a546 1
    stringBuffer.append(TEXT_68);
d548 1
a548 1
    stringBuffer.append(TEXT_69);
d550 1
a550 1
    stringBuffer.append(TEXT_70);
d552 1
a552 1
    stringBuffer.append(TEXT_71);
d554 1
a554 1
    stringBuffer.append(TEXT_72);
d565 1
a565 1
    stringBuffer.append(TEXT_73);
d567 1
a567 1
    stringBuffer.append(TEXT_74);
d569 1
a569 1
    stringBuffer.append(TEXT_75);
d571 1
a571 1
    stringBuffer.append(TEXT_76);
d574 1
a574 1
    stringBuffer.append(TEXT_77);
d576 1
a576 1
    stringBuffer.append(TEXT_78);
d581 1
a581 1
    stringBuffer.append(TEXT_79);
d583 1
a583 1
    stringBuffer.append(TEXT_80);
d585 1
a585 1
    stringBuffer.append(TEXT_81);
d587 1
a587 1
    stringBuffer.append(TEXT_82);
d589 1
a589 1
    stringBuffer.append(TEXT_83);
d591 1
a591 1
    stringBuffer.append(TEXT_84);
d593 1
a593 1
    stringBuffer.append(TEXT_85);
d595 1
a595 1
    stringBuffer.append(TEXT_86);
d597 1
a597 1
    stringBuffer.append(TEXT_87);
d599 1
a599 1
    stringBuffer.append(TEXT_88);
d603 1
a603 1
    stringBuffer.append(TEXT_89);
d611 1
a611 1
    stringBuffer.append(TEXT_90);
d613 1
a613 1
    stringBuffer.append(TEXT_91);
d615 1
a615 1
    stringBuffer.append(TEXT_92);
d617 1
a617 1
    stringBuffer.append(TEXT_93);
d619 1
a619 1
    stringBuffer.append(TEXT_94);
d628 1
a628 1
    stringBuffer.append(TEXT_95);
d630 1
a630 1
    stringBuffer.append(TEXT_96);
d632 1
a632 1
    stringBuffer.append(TEXT_97);
d634 1
a634 1
    stringBuffer.append(TEXT_98);
d636 1
a636 1
    stringBuffer.append(TEXT_99);
d640 1
a640 1
    stringBuffer.append(TEXT_100);
d648 1
a648 1
    stringBuffer.append(TEXT_101);
d650 1
a650 1
    stringBuffer.append(TEXT_102);
d652 1
a652 1
    stringBuffer.append(TEXT_103);
d654 1
a654 1
    stringBuffer.append(TEXT_104);
d656 1
a656 1
    stringBuffer.append(TEXT_105);
d660 1
a660 1
    stringBuffer.append(TEXT_106);
d664 1
a664 1
    stringBuffer.append(TEXT_107);
d666 1
a666 1
    stringBuffer.append(TEXT_108);
d676 1
a676 1
    stringBuffer.append(TEXT_109);
d678 1
a678 1
    stringBuffer.append(TEXT_110);
d680 1
a680 1
    stringBuffer.append(TEXT_111);
d682 1
a682 1
    stringBuffer.append(TEXT_112);
d686 1
a686 1
    stringBuffer.append(TEXT_113);
d688 1
a688 1
    stringBuffer.append(TEXT_114);
d690 1
a690 1
    stringBuffer.append(TEXT_115);
d692 1
a692 1
    stringBuffer.append(TEXT_116);
d694 1
a694 1
    stringBuffer.append(TEXT_117);
d696 1
a696 1
    stringBuffer.append(TEXT_118);
d700 1
a700 1
    stringBuffer.append(TEXT_119);
d703 1
a703 1
    stringBuffer.append(TEXT_120);
d705 1
a705 1
    stringBuffer.append(TEXT_121);
d707 1
a707 1
    stringBuffer.append(TEXT_122);
d709 1
a709 1
    stringBuffer.append(TEXT_123);
d711 1
a711 1
    stringBuffer.append(TEXT_124);
d713 1
a713 1
    stringBuffer.append(TEXT_125);
d717 1
a717 1
    stringBuffer.append(TEXT_126);
d719 1
a719 1
    stringBuffer.append(TEXT_127);
d721 1
a721 1
    stringBuffer.append(TEXT_128);
d725 1
a725 1
    stringBuffer.append(TEXT_129);
d727 1
a727 1
    stringBuffer.append(TEXT_130);
d729 1
a729 1
    stringBuffer.append(TEXT_131);
d731 1
a731 1
    stringBuffer.append(TEXT_132);
d736 1
a736 1
    stringBuffer.append(TEXT_133);
d738 1
a738 1
    stringBuffer.append(TEXT_134);
d740 1
a740 1
    stringBuffer.append(TEXT_135);
d742 1
a742 1
    stringBuffer.append(TEXT_136);
d748 1
a748 1
    stringBuffer.append(TEXT_137);
d750 1
a750 1
    stringBuffer.append(TEXT_138);
d755 1
a755 1
    stringBuffer.append(TEXT_139);
d757 1
a757 1
    stringBuffer.append(TEXT_140);
d761 1
a761 1
    stringBuffer.append(TEXT_141);
d763 1
a763 1
    stringBuffer.append(TEXT_142);
d765 1
a765 1
    stringBuffer.append(TEXT_143);
d767 1
a767 1
    stringBuffer.append(TEXT_144);
d773 1
a773 1
    stringBuffer.append(TEXT_145);
d775 1
a775 1
    stringBuffer.append(TEXT_146);
d779 1
a779 1
    stringBuffer.append(TEXT_147);
d781 1
a781 1
    stringBuffer.append(TEXT_148);
d786 1
a786 1
    stringBuffer.append(TEXT_149);
d790 1
a790 1
    stringBuffer.append(TEXT_150);
d792 1
a792 1
    stringBuffer.append(TEXT_151);
d796 1
a796 1
    stringBuffer.append(TEXT_152);
d798 1
a798 1
    stringBuffer.append(TEXT_153);
d803 1
a803 1
    stringBuffer.append(TEXT_154);
d807 1
a807 1
    stringBuffer.append(TEXT_155);
d811 1
a811 1
    stringBuffer.append(TEXT_156);
d815 1
a815 1
    stringBuffer.append(TEXT_157);
d818 1
a818 1
    stringBuffer.append(TEXT_158);
d820 1
a820 1
    stringBuffer.append(TEXT_159);
@


1.91
log
@#144885 CCE while moving external node label on diagram
@
text
@d74 105
a178 104
  protected final String TEXT_55 = "() {" + NL + "" + NL + "\t\t\tprotected org.eclipse.gef.commands.Command createAddCommand(";
  protected final String TEXT_56 = " child, ";
  protected final String TEXT_57 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_58 = " createMoveChildCommand(";
  protected final String TEXT_59 = " child, ";
  protected final String TEXT_60 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_61 = " getCreateCommand(";
  protected final String TEXT_62 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_63 = NL + "\t\treturn new ";
  protected final String TEXT_64 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_65 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_66 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_67 = " getMoveChildrenCommand(";
  protected final String TEXT_68 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_69 = " getCreateCommand(";
  protected final String TEXT_70 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_71 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_72 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_73 = "()";
  protected final String TEXT_74 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_75 = ";";
  protected final String TEXT_76 = NL + "\t\treturn ";
  protected final String TEXT_77 = ";";
  protected final String TEXT_78 = NL + "\t\t";
  protected final String TEXT_79 = " figure = new ";
  protected final String TEXT_80 = "();";
  protected final String TEXT_81 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_82 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_83 = NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_85 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_86 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_87 = NL;
  protected final String TEXT_88 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_89 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_91 = ") childEditPart).";
  protected final String TEXT_92 = "(getPrimaryShape().";
  protected final String TEXT_93 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t";
  protected final String TEXT_96 = " pane = getPrimaryShape().";
  protected final String TEXT_97 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_98 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_99 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_100 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_101 = ") {" + NL + "\t\t\t";
  protected final String TEXT_102 = " pane = getPrimaryShape().";
  protected final String TEXT_103 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_104 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_105 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_106 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_107 = " createNodePlate() {";
  protected final String TEXT_108 = NL + "\t\treturn new ";
  protected final String TEXT_109 = "(getMapMode().DPtoLP(";
  protected final String TEXT_110 = "), getMapMode().DPtoLP(";
  protected final String TEXT_111 = "));" + NL + "\t}";
  protected final String TEXT_112 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_113 = " ep = (";
  protected final String TEXT_114 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_115 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_116 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_117 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_118 = ".";
  protected final String TEXT_119 = " | ";
  protected final String TEXT_120 = ");" + NL + "\t\t";
  protected final String TEXT_121 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_122 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_123 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_124 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_125 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_126 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_127 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_128 = NL + "\t\t\t";
  protected final String TEXT_129 = " layout = new ";
  protected final String TEXT_130 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_131 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_132 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_133 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_134 = ".getType(";
  protected final String TEXT_135 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_136 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_137 = " childEditPart) {";
  protected final String TEXT_138 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_139 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_140 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_141 = " root = (";
  protected final String TEXT_142 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_143 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_144 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_145 = " childEditPart, int index) {";
  protected final String TEXT_146 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_147 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_148 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_149 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_150 = " childEditPart) {";
  protected final String TEXT_151 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_152 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_153 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_154 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_155 = "\t" + NL;
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = NL + "}";
  protected final String TEXT_158 = NL;
d505 1
a505 1
    stringBuffer.append(fqnEditPart);
d509 2
a511 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(fqnEditPart);
d515 2
d518 1
a518 1
    stringBuffer.append(TEXT_61);
d520 1
a520 1
    stringBuffer.append(TEXT_62);
d524 1
a524 1
    stringBuffer.append(TEXT_63);
d526 1
a526 1
    stringBuffer.append(TEXT_64);
d528 1
a528 1
    stringBuffer.append(TEXT_65);
d530 1
a530 1
    stringBuffer.append(TEXT_66);
d532 1
a532 1
    stringBuffer.append(TEXT_67);
d534 1
a534 1
    stringBuffer.append(TEXT_68);
d536 1
a536 1
    stringBuffer.append(TEXT_69);
d538 1
a538 1
    stringBuffer.append(TEXT_70);
d540 1
a540 1
    stringBuffer.append(TEXT_71);
d551 1
a551 1
    stringBuffer.append(TEXT_72);
d553 1
a553 1
    stringBuffer.append(TEXT_73);
d555 1
a555 1
    stringBuffer.append(TEXT_74);
d557 1
a557 1
    stringBuffer.append(TEXT_75);
d560 1
a560 1
    stringBuffer.append(TEXT_76);
d562 1
a562 1
    stringBuffer.append(TEXT_77);
a566 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(figureQualifiedClassName);
d570 2
a572 2
    stringBuffer.append(TEXT_81);
    }
d576 2
a578 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(figureQualifiedClassName);
d582 2
d585 1
a585 1
    stringBuffer.append(TEXT_87);
d589 1
a589 1
    stringBuffer.append(TEXT_88);
a596 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(labelEditPart);
d600 2
d603 1
a603 1
    stringBuffer.append(TEXT_92);
d605 1
a605 1
    stringBuffer.append(TEXT_93);
d614 1
a614 1
    stringBuffer.append(TEXT_94);
d616 1
a616 1
    stringBuffer.append(TEXT_95);
d618 1
a618 1
    stringBuffer.append(TEXT_96);
d620 1
a620 1
    stringBuffer.append(TEXT_97);
d622 1
a622 1
    stringBuffer.append(TEXT_98);
d626 1
a626 1
    stringBuffer.append(TEXT_99);
d634 1
a634 1
    stringBuffer.append(TEXT_100);
d636 1
a636 1
    stringBuffer.append(TEXT_101);
d638 1
a638 1
    stringBuffer.append(TEXT_102);
d640 1
a640 1
    stringBuffer.append(TEXT_103);
d642 1
a642 1
    stringBuffer.append(TEXT_104);
d646 1
a646 1
    stringBuffer.append(TEXT_105);
d650 1
a650 1
    stringBuffer.append(TEXT_106);
d652 1
a652 1
    stringBuffer.append(TEXT_107);
d662 1
a662 1
    stringBuffer.append(TEXT_108);
d664 1
a664 1
    stringBuffer.append(TEXT_109);
d666 1
a666 1
    stringBuffer.append(TEXT_110);
d668 1
a668 1
    stringBuffer.append(TEXT_111);
a671 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d675 2
d678 1
a678 1
    stringBuffer.append(TEXT_115);
d680 1
a680 1
    stringBuffer.append(TEXT_116);
d682 1
a682 1
    stringBuffer.append(TEXT_117);
d686 1
a686 1
    stringBuffer.append(TEXT_118);
d689 1
a689 1
    stringBuffer.append(TEXT_119);
a690 2
    stringBuffer.append(TEXT_120);
    }
d694 1
a694 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
d698 2
d703 1
a703 1
    stringBuffer.append(TEXT_125);
d705 1
a705 1
    stringBuffer.append(TEXT_126);
d707 1
a707 1
    stringBuffer.append(TEXT_127);
a710 2
    stringBuffer.append(TEXT_128);
    stringBuffer.append(layoutClassName);
d714 2
d717 1
a717 1
    stringBuffer.append(TEXT_131);
d722 1
a722 1
    stringBuffer.append(TEXT_132);
d724 1
a724 1
    stringBuffer.append(TEXT_133);
d726 1
a726 1
    stringBuffer.append(TEXT_134);
d728 1
a728 1
    stringBuffer.append(TEXT_135);
d734 1
a734 1
    stringBuffer.append(TEXT_136);
d736 1
a736 1
    stringBuffer.append(TEXT_137);
d741 1
a741 1
    stringBuffer.append(TEXT_138);
d743 1
a743 1
    stringBuffer.append(TEXT_139);
a746 2
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
d750 2
d753 1
a753 1
    stringBuffer.append(TEXT_143);
d759 1
a759 1
    stringBuffer.append(TEXT_144);
d761 1
a761 1
    stringBuffer.append(TEXT_145);
d765 1
a765 1
    stringBuffer.append(TEXT_146);
d767 1
a767 1
    stringBuffer.append(TEXT_147);
d772 1
a772 1
    stringBuffer.append(TEXT_148);
d776 1
a776 1
    stringBuffer.append(TEXT_149);
d778 1
a778 1
    stringBuffer.append(TEXT_150);
d782 1
a782 1
    stringBuffer.append(TEXT_151);
d784 1
a784 1
    stringBuffer.append(TEXT_152);
d789 1
a789 1
    stringBuffer.append(TEXT_153);
d793 1
a793 1
    stringBuffer.append(TEXT_154);
d797 1
a797 1
    stringBuffer.append(TEXT_155);
d801 1
a801 1
    stringBuffer.append(TEXT_156);
d804 1
a804 1
    stringBuffer.append(TEXT_157);
d806 1
a806 1
    stringBuffer.append(TEXT_158);
@


1.90
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d61 117
a177 113
  protected final String TEXT_42 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_43 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_44 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_45 = NL + "\t\treturn new ";
  protected final String TEXT_46 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_47 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_48 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_49 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_50 = NL + "\t\treturn new ";
  protected final String TEXT_51 = "() {" + NL + "" + NL + "\t\t\tprotected org.eclipse.gef.commands.Command createAddCommand(";
  protected final String TEXT_52 = " child, ";
  protected final String TEXT_53 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_54 = " createMoveChildCommand(";
  protected final String TEXT_55 = " child, ";
  protected final String TEXT_56 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_57 = " getCreateCommand(";
  protected final String TEXT_58 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_59 = NL + "\t\treturn new ";
  protected final String TEXT_60 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_61 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_62 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_63 = " getMoveChildrenCommand(";
  protected final String TEXT_64 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_65 = " getCreateCommand(";
  protected final String TEXT_66 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_67 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_68 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_69 = "()";
  protected final String TEXT_70 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_71 = ";";
  protected final String TEXT_72 = NL + "\t\treturn ";
  protected final String TEXT_73 = ";";
  protected final String TEXT_74 = NL + "\t\t";
  protected final String TEXT_75 = " figure = new ";
  protected final String TEXT_76 = "();";
  protected final String TEXT_77 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_78 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_79 = NL + "\t}";
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_81 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_82 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_85 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_86 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_87 = ") childEditPart).";
  protected final String TEXT_88 = "(getPrimaryShape().";
  protected final String TEXT_89 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_90 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\t";
  protected final String TEXT_92 = " pane = getPrimaryShape().";
  protected final String TEXT_93 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_94 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_95 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_96 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_97 = ") {" + NL + "\t\t\t";
  protected final String TEXT_98 = " pane = getPrimaryShape().";
  protected final String TEXT_99 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_100 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_101 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_102 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_103 = " createNodePlate() {";
  protected final String TEXT_104 = NL + "\t\treturn new ";
  protected final String TEXT_105 = "(getMapMode().DPtoLP(";
  protected final String TEXT_106 = "), getMapMode().DPtoLP(";
  protected final String TEXT_107 = "));" + NL + "\t}";
  protected final String TEXT_108 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_109 = " ep = (";
  protected final String TEXT_110 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_111 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_112 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_113 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_114 = ".";
  protected final String TEXT_115 = " | ";
  protected final String TEXT_116 = ");" + NL + "\t\t";
  protected final String TEXT_117 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_118 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_119 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_120 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_121 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_122 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_123 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_124 = NL + "\t\t\t";
  protected final String TEXT_125 = " layout = new ";
  protected final String TEXT_126 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_127 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_128 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_129 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_130 = ".getType(";
  protected final String TEXT_131 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_132 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_133 = " childEditPart) {";
  protected final String TEXT_134 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_135 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_136 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_137 = " root = (";
  protected final String TEXT_138 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_139 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_140 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_141 = " childEditPart, int index) {";
  protected final String TEXT_142 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_143 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_144 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_145 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_146 = " childEditPart) {";
  protected final String TEXT_147 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_148 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_149 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_150 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_151 = "\t" + NL;
  protected final String TEXT_152 = NL;
  protected final String TEXT_153 = NL + "}";
  protected final String TEXT_154 = NL;
d474 8
d483 1
a483 1
    stringBuffer.append(TEXT_43);
d485 1
a485 1
    stringBuffer.append(TEXT_44);
d489 1
a489 1
    stringBuffer.append(TEXT_45);
d491 1
a491 1
    stringBuffer.append(TEXT_46);
d493 1
a493 1
    stringBuffer.append(TEXT_47);
d495 1
a495 1
    stringBuffer.append(TEXT_48);
d497 1
a497 1
    stringBuffer.append(TEXT_49);
d501 1
a501 1
    stringBuffer.append(TEXT_50);
d503 1
a503 1
    stringBuffer.append(TEXT_51);
d505 1
a505 1
    stringBuffer.append(TEXT_52);
d507 1
a507 1
    stringBuffer.append(TEXT_53);
d509 1
a509 1
    stringBuffer.append(TEXT_54);
d511 1
a511 1
    stringBuffer.append(TEXT_55);
d513 1
a513 1
    stringBuffer.append(TEXT_56);
d515 1
a515 1
    stringBuffer.append(TEXT_57);
d517 1
a517 1
    stringBuffer.append(TEXT_58);
d521 1
a521 1
    stringBuffer.append(TEXT_59);
d523 1
a523 1
    stringBuffer.append(TEXT_60);
d525 1
a525 1
    stringBuffer.append(TEXT_61);
d527 1
a527 1
    stringBuffer.append(TEXT_62);
d529 1
a529 1
    stringBuffer.append(TEXT_63);
d531 1
a531 1
    stringBuffer.append(TEXT_64);
d533 1
a533 1
    stringBuffer.append(TEXT_65);
d535 1
a535 1
    stringBuffer.append(TEXT_66);
d537 1
a537 1
    stringBuffer.append(TEXT_67);
d548 1
a548 1
    stringBuffer.append(TEXT_68);
d550 1
a550 1
    stringBuffer.append(TEXT_69);
d552 1
a552 1
    stringBuffer.append(TEXT_70);
d554 1
a554 1
    stringBuffer.append(TEXT_71);
d557 1
a557 1
    stringBuffer.append(TEXT_72);
d559 1
a559 1
    stringBuffer.append(TEXT_73);
d564 1
a564 1
    stringBuffer.append(TEXT_74);
d566 1
a566 1
    stringBuffer.append(TEXT_75);
d568 1
a568 1
    stringBuffer.append(TEXT_76);
d570 1
a570 1
    stringBuffer.append(TEXT_77);
d572 1
a572 1
    stringBuffer.append(TEXT_78);
d574 1
a574 1
    stringBuffer.append(TEXT_79);
d576 1
a576 1
    stringBuffer.append(TEXT_80);
d578 1
a578 1
    stringBuffer.append(TEXT_81);
d580 1
a580 1
    stringBuffer.append(TEXT_82);
d582 1
a582 1
    stringBuffer.append(TEXT_83);
d586 1
a586 1
    stringBuffer.append(TEXT_84);
d594 1
a594 1
    stringBuffer.append(TEXT_85);
d596 1
a596 1
    stringBuffer.append(TEXT_86);
d598 1
a598 1
    stringBuffer.append(TEXT_87);
d600 1
a600 1
    stringBuffer.append(TEXT_88);
d602 1
a602 1
    stringBuffer.append(TEXT_89);
d611 1
a611 1
    stringBuffer.append(TEXT_90);
d613 1
a613 1
    stringBuffer.append(TEXT_91);
d615 1
a615 1
    stringBuffer.append(TEXT_92);
d617 1
a617 1
    stringBuffer.append(TEXT_93);
d619 1
a619 1
    stringBuffer.append(TEXT_94);
d623 1
a623 1
    stringBuffer.append(TEXT_95);
d631 1
a631 1
    stringBuffer.append(TEXT_96);
d633 1
a633 1
    stringBuffer.append(TEXT_97);
d635 1
a635 1
    stringBuffer.append(TEXT_98);
d637 1
a637 1
    stringBuffer.append(TEXT_99);
d639 1
a639 1
    stringBuffer.append(TEXT_100);
d643 1
a643 1
    stringBuffer.append(TEXT_101);
d647 1
a647 1
    stringBuffer.append(TEXT_102);
d649 1
a649 1
    stringBuffer.append(TEXT_103);
d659 1
a659 1
    stringBuffer.append(TEXT_104);
d661 1
a661 1
    stringBuffer.append(TEXT_105);
d663 1
a663 1
    stringBuffer.append(TEXT_106);
d665 1
a665 1
    stringBuffer.append(TEXT_107);
d669 1
a669 1
    stringBuffer.append(TEXT_108);
d671 1
a671 1
    stringBuffer.append(TEXT_109);
d673 1
a673 1
    stringBuffer.append(TEXT_110);
d675 1
a675 1
    stringBuffer.append(TEXT_111);
d677 1
a677 1
    stringBuffer.append(TEXT_112);
d679 1
a679 1
    stringBuffer.append(TEXT_113);
d683 1
a683 1
    stringBuffer.append(TEXT_114);
d686 1
a686 1
    stringBuffer.append(TEXT_115);
d688 1
a688 1
    stringBuffer.append(TEXT_116);
d690 1
a690 1
    stringBuffer.append(TEXT_117);
d692 1
a692 1
    stringBuffer.append(TEXT_118);
d694 1
a694 1
    stringBuffer.append(TEXT_119);
d696 1
a696 1
    stringBuffer.append(TEXT_120);
d700 1
a700 1
    stringBuffer.append(TEXT_121);
d702 1
a702 1
    stringBuffer.append(TEXT_122);
d704 1
a704 1
    stringBuffer.append(TEXT_123);
d708 1
a708 1
    stringBuffer.append(TEXT_124);
d710 1
a710 1
    stringBuffer.append(TEXT_125);
d712 1
a712 1
    stringBuffer.append(TEXT_126);
d714 1
a714 1
    stringBuffer.append(TEXT_127);
d719 1
a719 1
    stringBuffer.append(TEXT_128);
d721 1
a721 1
    stringBuffer.append(TEXT_129);
d723 1
a723 1
    stringBuffer.append(TEXT_130);
d725 1
a725 1
    stringBuffer.append(TEXT_131);
d731 1
a731 1
    stringBuffer.append(TEXT_132);
d733 1
a733 1
    stringBuffer.append(TEXT_133);
d738 1
a738 1
    stringBuffer.append(TEXT_134);
d740 1
a740 1
    stringBuffer.append(TEXT_135);
d744 1
a744 1
    stringBuffer.append(TEXT_136);
d746 1
a746 1
    stringBuffer.append(TEXT_137);
d748 1
a748 1
    stringBuffer.append(TEXT_138);
d750 1
a750 1
    stringBuffer.append(TEXT_139);
d756 1
a756 1
    stringBuffer.append(TEXT_140);
d758 1
a758 1
    stringBuffer.append(TEXT_141);
d762 1
a762 1
    stringBuffer.append(TEXT_142);
d764 1
a764 1
    stringBuffer.append(TEXT_143);
d769 1
a769 1
    stringBuffer.append(TEXT_144);
d773 1
a773 1
    stringBuffer.append(TEXT_145);
d775 1
a775 1
    stringBuffer.append(TEXT_146);
d779 1
a779 1
    stringBuffer.append(TEXT_147);
d781 1
a781 1
    stringBuffer.append(TEXT_148);
d786 1
a786 1
    stringBuffer.append(TEXT_149);
d790 1
a790 1
    stringBuffer.append(TEXT_150);
d794 1
a794 1
    stringBuffer.append(TEXT_151);
d798 1
a798 1
    stringBuffer.append(TEXT_152);
d801 1
a801 1
    stringBuffer.append(TEXT_153);
d803 1
a803 1
    stringBuffer.append(TEXT_154);
@


1.89
log
@synchronized with its jet template
@
text
@d57 117
a173 116
  protected final String TEXT_38 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " createLayoutEditPolicy() {";
  protected final String TEXT_40 = "\t" + NL + "\t\treturn new ";
  protected final String TEXT_41 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_42 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_44 = NL + "\t\treturn new ";
  protected final String TEXT_45 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_46 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_48 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_49 = NL + "\t\treturn new ";
  protected final String TEXT_50 = "() {" + NL + "" + NL + "\t\t\tprotected org.eclipse.gef.commands.Command createAddCommand(";
  protected final String TEXT_51 = " child, ";
  protected final String TEXT_52 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_53 = " createMoveChildCommand(";
  protected final String TEXT_54 = " child, ";
  protected final String TEXT_55 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_56 = " getCreateCommand(";
  protected final String TEXT_57 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_58 = NL + "\t\treturn new ";
  protected final String TEXT_59 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_60 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_62 = " getMoveChildrenCommand(";
  protected final String TEXT_63 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_64 = " getCreateCommand(";
  protected final String TEXT_65 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_66 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_67 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_68 = "()";
  protected final String TEXT_69 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_70 = ";";
  protected final String TEXT_71 = NL + "\t\treturn ";
  protected final String TEXT_72 = ";";
  protected final String TEXT_73 = NL + "\t\t";
  protected final String TEXT_74 = " figure = new ";
  protected final String TEXT_75 = "();";
  protected final String TEXT_76 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_77 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_78 = NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_80 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_81 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_82 = NL;
  protected final String TEXT_83 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_84 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_85 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_86 = ") childEditPart).";
  protected final String TEXT_87 = "(getPrimaryShape().";
  protected final String TEXT_88 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_89 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t";
  protected final String TEXT_91 = " pane = getPrimaryShape().";
  protected final String TEXT_92 = "();" + NL + "\t\t\tsetupContentPane(pane); // FIXME each comparment should handle his content pane in his own way " + NL + "\t\t\tpane.add(((";
  protected final String TEXT_93 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_94 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean removeFixedChild(EditPart childEditPart) {";
  protected final String TEXT_95 = "\t\t" + NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_96 = ") {" + NL + "\t\t\t";
  protected final String TEXT_97 = " pane = getPrimaryShape().";
  protected final String TEXT_98 = "();" + NL + "\t\t\tpane.remove(((";
  protected final String TEXT_99 = ")childEditPart).getFigure());" + NL + "\t\t\treturn true;" + NL + "\t\t}\t";
  protected final String TEXT_100 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_101 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_102 = " createNodePlate() {";
  protected final String TEXT_103 = NL + "\t\treturn new ";
  protected final String TEXT_104 = "(getMapMode().DPtoLP(";
  protected final String TEXT_105 = "), getMapMode().DPtoLP(";
  protected final String TEXT_106 = "));" + NL + "\t}";
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_108 = " ep = (";
  protected final String TEXT_109 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_110 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_111 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_112 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_113 = ".";
  protected final String TEXT_114 = " | ";
  protected final String TEXT_115 = ");" + NL + "\t\t";
  protected final String TEXT_116 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_117 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_118 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_119 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_120 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_121 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_122 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_123 = NL + "\t\t\t";
  protected final String TEXT_124 = " layout = new ";
  protected final String TEXT_125 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_126 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_127 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_128 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_129 = ".getType(";
  protected final String TEXT_130 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_131 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_132 = " childEditPart) {";
  protected final String TEXT_133 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_134 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_135 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_136 = " root = (";
  protected final String TEXT_137 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_138 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_139 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_140 = " childEditPart, int index) {";
  protected final String TEXT_141 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_142 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_143 = "\t\t" + NL + "\t\tif (addFixedChild(childEditPart)) {" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_144 = NL + "\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_145 = " childEditPart) {";
  protected final String TEXT_146 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_147 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t\treturn;" + NL + "\t\t} ";
  protected final String TEXT_148 = NL + "\t\tif (removeFixedChild(childEditPart)){" + NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_149 = NL + "\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t}";
  protected final String TEXT_150 = "\t" + NL;
  protected final String TEXT_151 = NL;
  protected final String TEXT_152 = NL + "}";
  protected final String TEXT_153 = NL;
d453 2
d458 2
d461 1
a461 1
    stringBuffer.append(TEXT_39);
d467 1
a467 1
    stringBuffer.append(TEXT_40);
d469 1
a469 1
    stringBuffer.append(TEXT_41);
d471 1
a471 1
    stringBuffer.append(TEXT_42);
d473 1
a473 1
    stringBuffer.append(TEXT_43);
d477 1
a477 1
    stringBuffer.append(TEXT_44);
d479 1
a479 1
    stringBuffer.append(TEXT_45);
d481 1
a481 1
    stringBuffer.append(TEXT_46);
d483 1
a483 1
    stringBuffer.append(TEXT_47);
d485 1
a485 1
    stringBuffer.append(TEXT_48);
d489 1
a489 1
    stringBuffer.append(TEXT_49);
a490 2
    stringBuffer.append(TEXT_50);
    stringBuffer.append(fqnEditPart);
d494 2
a496 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(fqnEditPart);
d500 2
d503 1
a503 1
    stringBuffer.append(TEXT_56);
d505 1
a505 1
    stringBuffer.append(TEXT_57);
d509 1
a509 1
    stringBuffer.append(TEXT_58);
d511 1
a511 1
    stringBuffer.append(TEXT_59);
d513 1
a513 1
    stringBuffer.append(TEXT_60);
d515 1
a515 1
    stringBuffer.append(TEXT_61);
d517 1
a517 1
    stringBuffer.append(TEXT_62);
d519 1
a519 1
    stringBuffer.append(TEXT_63);
d521 1
a521 1
    stringBuffer.append(TEXT_64);
d523 1
a523 1
    stringBuffer.append(TEXT_65);
d525 1
a525 1
    stringBuffer.append(TEXT_66);
d536 1
a536 1
    stringBuffer.append(TEXT_67);
d538 1
a538 1
    stringBuffer.append(TEXT_68);
d540 1
a540 1
    stringBuffer.append(TEXT_69);
d542 1
a542 1
    stringBuffer.append(TEXT_70);
d545 1
a545 1
    stringBuffer.append(TEXT_71);
d547 1
a547 1
    stringBuffer.append(TEXT_72);
a551 2
    stringBuffer.append(TEXT_73);
    stringBuffer.append(figureQualifiedClassName);
d555 2
a557 2
    stringBuffer.append(TEXT_76);
    }
d561 2
a563 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(figureQualifiedClassName);
d567 2
d570 1
a570 1
    stringBuffer.append(TEXT_82);
d574 1
a574 1
    stringBuffer.append(TEXT_83);
a581 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(labelEditPart);
d585 2
d588 1
a588 1
    stringBuffer.append(TEXT_87);
d590 1
a590 1
    stringBuffer.append(TEXT_88);
d599 1
a599 1
    stringBuffer.append(TEXT_89);
d601 1
a601 1
    stringBuffer.append(TEXT_90);
d603 1
a603 1
    stringBuffer.append(TEXT_91);
d605 1
a605 1
    stringBuffer.append(TEXT_92);
d607 1
a607 1
    stringBuffer.append(TEXT_93);
d611 1
a611 1
    stringBuffer.append(TEXT_94);
d619 1
a619 1
    stringBuffer.append(TEXT_95);
d621 1
a621 1
    stringBuffer.append(TEXT_96);
d623 1
a623 1
    stringBuffer.append(TEXT_97);
d625 1
a625 1
    stringBuffer.append(TEXT_98);
d627 1
a627 1
    stringBuffer.append(TEXT_99);
d631 1
a631 1
    stringBuffer.append(TEXT_100);
d635 1
a635 1
    stringBuffer.append(TEXT_101);
d637 1
a637 1
    stringBuffer.append(TEXT_102);
d647 1
a647 1
    stringBuffer.append(TEXT_103);
d649 1
a649 1
    stringBuffer.append(TEXT_104);
d651 1
a651 1
    stringBuffer.append(TEXT_105);
d653 1
a653 1
    stringBuffer.append(TEXT_106);
a656 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d660 2
d663 1
a663 1
    stringBuffer.append(TEXT_110);
d665 1
a665 1
    stringBuffer.append(TEXT_111);
d667 1
a667 1
    stringBuffer.append(TEXT_112);
d671 1
a671 1
    stringBuffer.append(TEXT_113);
d674 1
a674 1
    stringBuffer.append(TEXT_114);
a675 2
    stringBuffer.append(TEXT_115);
    }
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
d683 2
d688 1
a688 1
    stringBuffer.append(TEXT_120);
d690 1
a690 1
    stringBuffer.append(TEXT_121);
d692 1
a692 1
    stringBuffer.append(TEXT_122);
a695 2
    stringBuffer.append(TEXT_123);
    stringBuffer.append(layoutClassName);
d699 2
d702 1
a702 1
    stringBuffer.append(TEXT_126);
d707 1
a707 1
    stringBuffer.append(TEXT_127);
d709 1
a709 1
    stringBuffer.append(TEXT_128);
d711 1
a711 1
    stringBuffer.append(TEXT_129);
d713 1
a713 1
    stringBuffer.append(TEXT_130);
d719 1
a719 1
    stringBuffer.append(TEXT_131);
d721 1
a721 1
    stringBuffer.append(TEXT_132);
d726 1
a726 1
    stringBuffer.append(TEXT_133);
d728 1
a728 1
    stringBuffer.append(TEXT_134);
a731 2
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.LayerManager"));
d735 2
d738 1
a738 1
    stringBuffer.append(TEXT_138);
d744 1
a744 1
    stringBuffer.append(TEXT_139);
d746 1
a746 1
    stringBuffer.append(TEXT_140);
d750 1
a750 1
    stringBuffer.append(TEXT_141);
d752 1
a752 1
    stringBuffer.append(TEXT_142);
d757 1
a757 1
    stringBuffer.append(TEXT_143);
d761 1
a761 1
    stringBuffer.append(TEXT_144);
d763 1
a763 1
    stringBuffer.append(TEXT_145);
d767 1
a767 1
    stringBuffer.append(TEXT_146);
d769 1
a769 1
    stringBuffer.append(TEXT_147);
d774 1
a774 1
    stringBuffer.append(TEXT_148);
d778 1
a778 1
    stringBuffer.append(TEXT_149);
d782 1
a782 1
    stringBuffer.append(TEXT_150);
d786 1
a786 1
    stringBuffer.append(TEXT_151);
d789 1
a789 1
    stringBuffer.append(TEXT_152);
d791 1
a791 1
    stringBuffer.append(TEXT_153);
@


1.88
log
@header comment should not be a javadoc comment
@
text
@d728 1
a728 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d730 1
a730 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
@


1.87
log
@use imported name in case of FigureViewmap
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.86
log
@Correcting copyright processing
@
text
@d529 1
d532 1
a532 1
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
@


1.85
log
@[mgolubev] #139148 Respect gmfgraph.compartment figure
[mgolubev] #143619 Temp fix for misassumption of ParentAssignedViewmap regarding generated getter name
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d358 1
a358 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.84
log
@Do not generate unnecessary code, e.g. label figure, when parent gonna assign one.
Explicitly handle (and distinguish) figures assigned by parent (thus placed in predefined location inside parent) and those added as ordinary child figures
InnerClassViewmapProducer updated to guess uses of parent's sub-figure inside children. It's not really a InnerClassViewmapProducer and should be renamed to smth like GeneratingViewmapProducer
Tests updated to cover logic added to the producer
@
text
@d101 72
a172 56
  protected final String TEXT_82 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_83 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_84 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_85 = ") childEditPart).";
  protected final String TEXT_86 = "(getPrimaryShape().";
  protected final String TEXT_87 = "());" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_88 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_89 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_90 = " createNodePlate() {";
  protected final String TEXT_91 = NL + "\t\treturn new ";
  protected final String TEXT_92 = "(getMapMode().DPtoLP(";
  protected final String TEXT_93 = "), getMapMode().DPtoLP(";
  protected final String TEXT_94 = "));" + NL + "\t}";
  protected final String TEXT_95 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_96 = " ep = (";
  protected final String TEXT_97 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_98 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_99 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_100 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_101 = ".";
  protected final String TEXT_102 = " | ";
  protected final String TEXT_103 = ");" + NL + "\t\t";
  protected final String TEXT_104 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_105 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_106 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_107 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_108 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_109 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_110 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_111 = NL + "\t\t\t";
  protected final String TEXT_112 = " layout = new ";
  protected final String TEXT_113 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_114 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_115 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_116 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_117 = ".getType(";
  protected final String TEXT_118 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_119 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_120 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_121 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_122 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_123 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_124 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_125 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_126 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_127 = " childEditPart) {";
  protected final String TEXT_128 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_129 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_130 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_131 = " root = (";
  protected final String TEXT_132 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_133 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_134 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_135 = NL;
  protected final String TEXT_136 = NL + "}";
  protected final String TEXT_137 = NL;
d279 73
d392 1
a392 6
boolean hasChildrenInListCompartments = false;
for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();) {
	GenCompartment compartment = (GenCompartment) compartments.next();
	hasChildrenInListCompartments |= compartment.isListLayout() && !compartment.getChildNodes().isEmpty();
}
if (!genNode.getChildNodes().isEmpty() || hasChildrenInListCompartments) {
d397 1
a397 1
    	if (hasChildrenInListCompartments) {
a521 1
boolean hasFixedChildren = false;
d563 2
d566 1
a566 9
	List innerFixedLabels = new ArrayList(genNode.getLabels().size());
	for (Iterator it = genNode.getLabels().iterator(); it.hasNext(); ) {
		GenNodeLabel genLabel = (GenNodeLabel) it.next();
		if (!(genLabel instanceof GenExternalNodeLabel) && genLabel.getViewmap() instanceof ParentAssignedViewmap) {
			innerFixedLabels.add(genLabel);
		}
	}
	if (!innerFixedLabels.isEmpty()) {
		hasFixedChildren = true;
d568 1
a568 1
    stringBuffer.append(TEXT_82);
d570 5
a574 5
		for (Iterator it = innerFixedLabels.iterator(); it.hasNext(); ) {
			final GenNodeLabel genLabel = (GenNodeLabel) it.next();
			final String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
			final ParentAssignedViewmap childViewmap = (ParentAssignedViewmap) genLabel.getViewmap();
			final String childSetterName = childViewmap.getSetterName() == null ? "setLabel" : childViewmap.getSetterName();
a575 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(labelEditPart);
d579 2
d582 1
a582 1
    stringBuffer.append(TEXT_86);
a583 2
    stringBuffer.append(TEXT_87);
    		}
a585 1
	}
d588 5
d594 36
d631 1
a631 1
    stringBuffer.append(TEXT_90);
d641 1
a641 1
    stringBuffer.append(TEXT_91);
d643 1
a643 1
    stringBuffer.append(TEXT_92);
d645 1
a645 1
    stringBuffer.append(TEXT_93);
d647 1
a647 1
    stringBuffer.append(TEXT_94);
d651 1
a651 1
    stringBuffer.append(TEXT_95);
d653 1
a653 1
    stringBuffer.append(TEXT_96);
d655 1
a655 1
    stringBuffer.append(TEXT_97);
d657 1
a657 1
    stringBuffer.append(TEXT_98);
d659 1
a659 1
    stringBuffer.append(TEXT_99);
d661 1
a661 1
    stringBuffer.append(TEXT_100);
d665 1
a665 1
    stringBuffer.append(TEXT_101);
d668 1
a668 1
    stringBuffer.append(TEXT_102);
d670 1
a670 1
    stringBuffer.append(TEXT_103);
d672 1
a672 1
    stringBuffer.append(TEXT_104);
d674 1
a674 1
    stringBuffer.append(TEXT_105);
d676 1
a676 1
    stringBuffer.append(TEXT_106);
d678 1
a678 1
    stringBuffer.append(TEXT_107);
d682 1
a682 1
    stringBuffer.append(TEXT_108);
d684 1
a684 1
    stringBuffer.append(TEXT_109);
d686 1
a686 1
    stringBuffer.append(TEXT_110);
d690 1
a690 1
    stringBuffer.append(TEXT_111);
d692 1
a692 1
    stringBuffer.append(TEXT_112);
d694 1
a694 1
    stringBuffer.append(TEXT_113);
d696 1
a696 1
    stringBuffer.append(TEXT_114);
d698 2
a699 2
if (!genNode.getLabels().isEmpty()) {
	GenNodeLabel primaryLabel = (GenNodeLabel) genNode.getLabels().get(0);
d701 1
a701 1
    stringBuffer.append(TEXT_115);
d703 1
a703 1
    stringBuffer.append(TEXT_116);
d705 1
a705 1
    stringBuffer.append(TEXT_117);
d707 1
a707 1
    stringBuffer.append(TEXT_118);
d710 14
a723 6
boolean hasExternalLabels = false;
for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
	GenNodeLabel label = (GenNodeLabel) labels.next();
	if (label instanceof GenExternalNodeLabel) {
		hasExternalLabels = true;
		break;
d725 9
a734 1
if (hasExternalLabels) {
d736 3
a738 1
    stringBuffer.append(TEXT_119);
d740 5
a744 1
    stringBuffer.append(TEXT_120);
d746 10
a755 7
    stringBuffer.append(TEXT_121);
    	if (hasFixedChildren) {
    stringBuffer.append(TEXT_122);
    	} else {
    stringBuffer.append(TEXT_123);
    	}
    stringBuffer.append(TEXT_124);
d757 5
a761 1
    stringBuffer.append(TEXT_125);
d763 1
a763 3
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_127);
d765 2
a766 3
	for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
		GenNodeLabel label = (GenNodeLabel) labels.next();
		if (label instanceof GenExternalNodeLabel) {
d768 1
a768 3
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_129);
d770 1
a770 2
		}
	}
d772 1
a772 7
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_133);
d774 3
a776 2
} else if (hasFixedChildren) {
    stringBuffer.append(TEXT_134);
a777 1
} /*else if hasFixedChildren && !hasExternalLabels*/
d780 1
a780 1
    stringBuffer.append(TEXT_135);
d783 1
a783 1
    stringBuffer.append(TEXT_136);
d785 1
a785 1
    stringBuffer.append(TEXT_137);
@


1.83
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d103 54
a156 58
  protected final String TEXT_84 = ") {";
  protected final String TEXT_85 = NL + "\t\t\t((";
  protected final String TEXT_86 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_87 = "());";
  protected final String TEXT_88 = NL + "\t\t\t((";
  protected final String TEXT_89 = ") childEditPart).setLabel(new ";
  protected final String TEXT_90 = "());";
  protected final String TEXT_91 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_92 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_93 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_94 = " createNodePlate() {";
  protected final String TEXT_95 = NL + "\t\treturn new ";
  protected final String TEXT_96 = "(getMapMode().DPtoLP(";
  protected final String TEXT_97 = "), getMapMode().DPtoLP(";
  protected final String TEXT_98 = "));" + NL + "\t}";
  protected final String TEXT_99 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_100 = " ep = (";
  protected final String TEXT_101 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_102 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_103 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_104 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_105 = ".";
  protected final String TEXT_106 = " | ";
  protected final String TEXT_107 = ");" + NL + "\t\t";
  protected final String TEXT_108 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_109 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_110 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_111 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_112 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_113 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_114 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_115 = NL + "\t\t\t";
  protected final String TEXT_116 = " layout = new ";
  protected final String TEXT_117 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_118 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_119 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_120 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_121 = ".getType(";
  protected final String TEXT_122 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_123 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_124 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_125 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_126 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_127 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_128 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_129 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_130 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_131 = " childEditPart) {";
  protected final String TEXT_132 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_133 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_134 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_135 = " root = (";
  protected final String TEXT_136 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_137 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = NL + "}";
  protected final String TEXT_141 = NL;
d481 1
a481 1
	List innerLabels = new ArrayList(genNode.getLabels().size());
d484 2
a485 2
		if (!(genLabel instanceof GenExternalNodeLabel)) {
			innerLabels.add(genLabel);
d488 1
a488 1
	if (!innerLabels.isEmpty()) {
d493 5
a497 16
		for (Iterator it = innerLabels.iterator(); it.hasNext(); ) {
			GenNodeLabel genLabel = (GenNodeLabel) it.next();
			String labelEditPart = importManager.getImportedName(genLabel.getEditPartQualifiedClassName());
			String labelFigureClassName = null;
			boolean isAccessor;
			if (genLabel.getViewmap() instanceof InnerClassViewmap) {
				labelFigureClassName = ((InnerClassViewmap) genLabel.getViewmap()).getClassName();
				isAccessor = true;
			} else if (genLabel.getViewmap() instanceof FigureViewmap) {
				labelFigureClassName = ((FigureViewmap) genLabel.getViewmap()).getFigureQualifiedClassName();
				isAccessor = false;
			} else {
				// temp hack to make tests pass
				labelFigureClassName = "org.eclipse.draw2d.Label";
				isAccessor = false;
			}
d502 1
a502 1
    			if (isAccessor) {
d504 1
a504 1
    stringBuffer.append(labelEditPart);
d506 1
a506 1
    stringBuffer.append(labelFigureClassName);
d508 1
a508 1
    			} else {
a509 8
    stringBuffer.append(labelEditPart);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(labelFigureClassName);
    stringBuffer.append(TEXT_90);
    			}
    stringBuffer.append(TEXT_91);
    		}
    stringBuffer.append(TEXT_92);
d514 1
a514 1
    stringBuffer.append(TEXT_93);
d516 1
a516 1
    stringBuffer.append(TEXT_94);
d526 1
a526 1
    stringBuffer.append(TEXT_95);
d528 1
a528 1
    stringBuffer.append(TEXT_96);
d530 1
a530 1
    stringBuffer.append(TEXT_97);
d532 1
a532 1
    stringBuffer.append(TEXT_98);
d536 1
a536 1
    stringBuffer.append(TEXT_99);
d538 1
a538 1
    stringBuffer.append(TEXT_100);
d540 1
a540 1
    stringBuffer.append(TEXT_101);
d542 1
a542 1
    stringBuffer.append(TEXT_102);
d544 1
a544 1
    stringBuffer.append(TEXT_103);
d546 1
a546 1
    stringBuffer.append(TEXT_104);
d550 1
a550 1
    stringBuffer.append(TEXT_105);
d553 1
a553 1
    stringBuffer.append(TEXT_106);
d555 1
a555 1
    stringBuffer.append(TEXT_107);
d557 1
a557 1
    stringBuffer.append(TEXT_108);
d559 1
a559 1
    stringBuffer.append(TEXT_109);
d561 1
a561 1
    stringBuffer.append(TEXT_110);
d563 1
a563 1
    stringBuffer.append(TEXT_111);
d567 1
a567 1
    stringBuffer.append(TEXT_112);
d569 1
a569 1
    stringBuffer.append(TEXT_113);
d571 1
a571 1
    stringBuffer.append(TEXT_114);
d575 1
a575 1
    stringBuffer.append(TEXT_115);
d577 1
a577 1
    stringBuffer.append(TEXT_116);
d579 1
a579 1
    stringBuffer.append(TEXT_117);
d581 1
a581 1
    stringBuffer.append(TEXT_118);
d586 1
a586 1
    stringBuffer.append(TEXT_119);
d588 1
a588 1
    stringBuffer.append(TEXT_120);
d590 1
a590 1
    stringBuffer.append(TEXT_121);
d592 1
a592 1
    stringBuffer.append(TEXT_122);
d605 1
a605 1
    stringBuffer.append(TEXT_123);
d607 1
a607 1
    stringBuffer.append(TEXT_124);
d609 1
a609 1
    stringBuffer.append(TEXT_125);
d611 1
a611 1
    stringBuffer.append(TEXT_126);
d613 1
a613 1
    stringBuffer.append(TEXT_127);
d615 1
a615 1
    stringBuffer.append(TEXT_128);
d617 1
a617 1
    stringBuffer.append(TEXT_129);
d619 1
a619 1
    stringBuffer.append(TEXT_130);
d621 1
a621 1
    stringBuffer.append(TEXT_131);
d627 1
a627 1
    stringBuffer.append(TEXT_132);
d629 1
a629 1
    stringBuffer.append(TEXT_133);
d634 1
a634 1
    stringBuffer.append(TEXT_134);
d636 1
a636 1
    stringBuffer.append(TEXT_135);
d638 1
a638 1
    stringBuffer.append(TEXT_136);
d640 1
a640 1
    stringBuffer.append(TEXT_137);
d642 2
a643 3
} else {
	if (hasFixedChildren) {
    stringBuffer.append(TEXT_138);
d645 1
a645 2
	}
}
d648 1
a648 1
    stringBuffer.append(TEXT_139);
d651 1
a651 1
    stringBuffer.append(TEXT_140);
d653 1
a653 1
    stringBuffer.append(TEXT_141);
@


1.82
log
@Removing unnecessary imports.
@
text
@d25 136
a160 135
  protected final String TEXT_6 = " extends ShapeNodeEditPart {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_12 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_13 = "()";
  protected final String TEXT_14 = NL + "\t\t{" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_15 = " getCommand(";
  protected final String TEXT_16 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_17 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_18 = " adapter =" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_19 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_20 = " type =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_21 = ") adapter.getAdapter(";
  protected final String TEXT_22 = ".class);";
  protected final String TEXT_23 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_26 = " compartmentEditPart =" + NL + "\t\t\t\t\t\t\t\tgetChildBySemanticHint(";
  protected final String TEXT_27 = ".getType(";
  protected final String TEXT_28 = ".VISUAL_ID));" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_30 = NL + "\t\t);";
  protected final String TEXT_31 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_32 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_33 = "());";
  protected final String TEXT_34 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_35 = "());";
  protected final String TEXT_36 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_37 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_38 = " createLayoutEditPolicy() {";
  protected final String TEXT_39 = "\t" + NL + "\t\treturn new ";
  protected final String TEXT_40 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_41 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_42 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_43 = NL + "\t\treturn new ";
  protected final String TEXT_44 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_45 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_46 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_47 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_48 = NL + "\t\treturn new ";
  protected final String TEXT_49 = "() {" + NL + "" + NL + "\t\t\tprotected org.eclipse.gef.commands.Command createAddCommand(";
  protected final String TEXT_50 = " child, ";
  protected final String TEXT_51 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_52 = " createMoveChildCommand(";
  protected final String TEXT_53 = " child, ";
  protected final String TEXT_54 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_55 = " getCreateCommand(";
  protected final String TEXT_56 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_57 = NL + "\t\treturn new ";
  protected final String TEXT_58 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_59 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_60 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_61 = " getMoveChildrenCommand(";
  protected final String TEXT_62 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_63 = " getCreateCommand(";
  protected final String TEXT_64 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_65 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_66 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_67 = "()";
  protected final String TEXT_68 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_69 = ";";
  protected final String TEXT_70 = NL + "\t\treturn ";
  protected final String TEXT_71 = ";";
  protected final String TEXT_72 = NL + "\t\t";
  protected final String TEXT_73 = " figure = new ";
  protected final String TEXT_74 = "();";
  protected final String TEXT_75 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_76 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_79 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_80 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_82 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_83 = ") {";
  protected final String TEXT_84 = NL + "\t\t\t((";
  protected final String TEXT_85 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_86 = "());";
  protected final String TEXT_87 = NL + "\t\t\t((";
  protected final String TEXT_88 = ") childEditPart).setLabel(new ";
  protected final String TEXT_89 = "());";
  protected final String TEXT_90 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_92 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_93 = " createNodePlate() {";
  protected final String TEXT_94 = NL + "\t\treturn new ";
  protected final String TEXT_95 = "(getMapMode().DPtoLP(";
  protected final String TEXT_96 = "), getMapMode().DPtoLP(";
  protected final String TEXT_97 = "));" + NL + "\t}";
  protected final String TEXT_98 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_99 = " ep = (";
  protected final String TEXT_100 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_101 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_102 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_103 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_104 = ".";
  protected final String TEXT_105 = " | ";
  protected final String TEXT_106 = ");" + NL + "\t\t";
  protected final String TEXT_107 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_108 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_109 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_110 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_111 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_112 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_113 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " layout = new ";
  protected final String TEXT_116 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_117 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_118 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_119 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_120 = ".getType(";
  protected final String TEXT_121 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_122 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_123 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_124 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_125 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_126 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_127 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_128 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_129 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_130 = " childEditPart) {";
  protected final String TEXT_131 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_132 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_133 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_134 = " root = (";
  protected final String TEXT_135 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_136 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_137 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = NL + "}";
  protected final String TEXT_140 = NL;
a284 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart");
d294 2
a297 1
    stringBuffer.append(TEXT_7);
d299 1
d301 1
a301 1
    stringBuffer.append(TEXT_9);
d303 1
a303 1
    stringBuffer.append(TEXT_10);
d305 1
a305 1
    stringBuffer.append(TEXT_11);
d314 1
a314 1
    stringBuffer.append(TEXT_12);
d316 1
a316 1
    stringBuffer.append(TEXT_13);
d318 1
a318 1
    stringBuffer.append(TEXT_14);
d320 1
a320 1
    stringBuffer.append(TEXT_15);
d322 1
a322 1
    stringBuffer.append(TEXT_16);
d324 1
a324 1
    stringBuffer.append(TEXT_17);
d326 1
a326 1
    stringBuffer.append(TEXT_18);
a327 2
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d333 2
d342 1
a342 1
    stringBuffer.append(TEXT_23);
d344 1
a344 1
    stringBuffer.append(TEXT_24);
d346 1
a346 1
    stringBuffer.append(TEXT_25);
d348 1
a348 1
    stringBuffer.append(TEXT_26);
d350 1
a350 1
    stringBuffer.append(TEXT_27);
d352 1
a352 1
    stringBuffer.append(TEXT_28);
d358 1
a358 1
    stringBuffer.append(TEXT_29);
d360 1
a360 1
    stringBuffer.append(TEXT_30);
d362 1
a362 1
    stringBuffer.append(TEXT_31);
d364 1
a364 1
    stringBuffer.append(TEXT_32);
d366 1
a366 1
    stringBuffer.append(TEXT_33);
d368 1
a368 1
    stringBuffer.append(TEXT_34);
d370 1
a370 1
    stringBuffer.append(TEXT_35);
d372 1
a372 1
    stringBuffer.append(TEXT_36);
d374 1
a374 1
    stringBuffer.append(TEXT_37);
d376 1
a376 1
    stringBuffer.append(TEXT_38);
d382 1
a382 1
    stringBuffer.append(TEXT_39);
d384 1
a384 1
    stringBuffer.append(TEXT_40);
d386 1
a386 1
    stringBuffer.append(TEXT_41);
d388 1
a388 1
    stringBuffer.append(TEXT_42);
d392 1
a392 1
    stringBuffer.append(TEXT_43);
d394 1
a394 1
    stringBuffer.append(TEXT_44);
d396 1
a396 1
    stringBuffer.append(TEXT_45);
d398 1
a398 1
    stringBuffer.append(TEXT_46);
d400 1
a400 1
    stringBuffer.append(TEXT_47);
d404 1
a404 1
    stringBuffer.append(TEXT_48);
a405 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(fqnEditPart);
d409 2
a411 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(fqnEditPart);
d415 2
d418 1
a418 1
    stringBuffer.append(TEXT_55);
d420 1
a420 1
    stringBuffer.append(TEXT_56);
d424 1
a424 1
    stringBuffer.append(TEXT_57);
d426 1
a426 1
    stringBuffer.append(TEXT_58);
d428 1
a428 1
    stringBuffer.append(TEXT_59);
d430 1
a430 1
    stringBuffer.append(TEXT_60);
d432 1
a432 1
    stringBuffer.append(TEXT_61);
d434 1
a434 1
    stringBuffer.append(TEXT_62);
d436 1
a436 1
    stringBuffer.append(TEXT_63);
d438 1
a438 1
    stringBuffer.append(TEXT_64);
d440 1
a440 1
    stringBuffer.append(TEXT_65);
d451 1
a451 1
    stringBuffer.append(TEXT_66);
d453 1
a453 1
    stringBuffer.append(TEXT_67);
d455 1
a455 1
    stringBuffer.append(TEXT_68);
d457 1
a457 1
    stringBuffer.append(TEXT_69);
d460 1
a460 1
    stringBuffer.append(TEXT_70);
d462 1
a462 1
    stringBuffer.append(TEXT_71);
a466 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(figureQualifiedClassName);
d470 2
a472 2
    stringBuffer.append(TEXT_75);
    }
d476 2
a478 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(figureQualifiedClassName);
d482 2
d495 1
a495 1
    stringBuffer.append(TEXT_81);
d514 1
a514 1
    stringBuffer.append(TEXT_82);
d516 1
a516 1
    stringBuffer.append(TEXT_83);
d518 1
a518 1
    stringBuffer.append(TEXT_84);
d520 1
a520 1
    stringBuffer.append(TEXT_85);
d522 1
a522 1
    stringBuffer.append(TEXT_86);
d524 1
a524 1
    stringBuffer.append(TEXT_87);
d526 1
a526 1
    stringBuffer.append(TEXT_88);
d528 1
a528 1
    stringBuffer.append(TEXT_89);
d530 1
a530 1
    stringBuffer.append(TEXT_90);
d532 1
a532 1
    stringBuffer.append(TEXT_91);
d537 1
a537 1
    stringBuffer.append(TEXT_92);
d539 1
a539 1
    stringBuffer.append(TEXT_93);
d549 1
a549 1
    stringBuffer.append(TEXT_94);
d551 1
a551 1
    stringBuffer.append(TEXT_95);
d553 1
a553 1
    stringBuffer.append(TEXT_96);
d555 1
a555 1
    stringBuffer.append(TEXT_97);
a558 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d562 2
d565 1
a565 1
    stringBuffer.append(TEXT_101);
d567 1
a567 1
    stringBuffer.append(TEXT_102);
d569 1
a569 1
    stringBuffer.append(TEXT_103);
d573 1
a573 1
    stringBuffer.append(TEXT_104);
d576 1
a576 1
    stringBuffer.append(TEXT_105);
a577 2
    stringBuffer.append(TEXT_106);
    }
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
d585 2
d590 1
a590 1
    stringBuffer.append(TEXT_111);
d592 1
a592 1
    stringBuffer.append(TEXT_112);
d594 1
a594 1
    stringBuffer.append(TEXT_113);
a597 2
    stringBuffer.append(TEXT_114);
    stringBuffer.append(layoutClassName);
d601 2
d604 1
a604 1
    stringBuffer.append(TEXT_117);
d609 1
a609 1
    stringBuffer.append(TEXT_118);
d611 1
a611 1
    stringBuffer.append(TEXT_119);
d613 1
a613 1
    stringBuffer.append(TEXT_120);
d615 1
a615 1
    stringBuffer.append(TEXT_121);
d628 1
a628 1
    stringBuffer.append(TEXT_122);
d630 1
a630 1
    stringBuffer.append(TEXT_123);
d632 1
a632 1
    stringBuffer.append(TEXT_124);
d634 1
a634 1
    stringBuffer.append(TEXT_125);
d636 1
a636 1
    stringBuffer.append(TEXT_126);
d638 1
a638 1
    stringBuffer.append(TEXT_127);
d640 1
a640 1
    stringBuffer.append(TEXT_128);
d642 1
a642 1
    stringBuffer.append(TEXT_129);
d644 1
a644 1
    stringBuffer.append(TEXT_130);
d650 1
a650 1
    stringBuffer.append(TEXT_131);
d652 1
a652 1
    stringBuffer.append(TEXT_132);
a656 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d660 2
d663 1
a663 1
    stringBuffer.append(TEXT_136);
d667 1
a667 1
    stringBuffer.append(TEXT_137);
d673 1
a673 1
    stringBuffer.append(TEXT_138);
d676 1
a676 1
    stringBuffer.append(TEXT_139);
d678 1
a678 1
    stringBuffer.append(TEXT_140);
@


1.81
log
@use importAssistant to emit package statement instead of handcoding
@
text
@a375 1
final String fqnCommand = importManager.getImportedName("org.eclipse.gef.commands.Command");
d409 1
a409 1
    stringBuffer.append(fqnCommand);
d415 1
a415 1
    stringBuffer.append(fqnCommand);
d429 1
a429 1
    stringBuffer.append(fqnCommand);
d433 1
a433 1
    stringBuffer.append(fqnCommand);
@


1.80
log
@separate layout policy creation into separate method to ease overriding
@
text
@d23 137
a159 138
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends ShapeNodeEditPart {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_14 = "()";
  protected final String TEXT_15 = NL + "\t\t{" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_16 = " getCommand(";
  protected final String TEXT_17 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_18 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_19 = " adapter =" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_20 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_21 = " type =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_22 = ") adapter.getAdapter(";
  protected final String TEXT_23 = ".class);";
  protected final String TEXT_24 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_25 = ".";
  protected final String TEXT_26 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_27 = " compartmentEditPart =" + NL + "\t\t\t\t\t\t\t\tgetChildBySemanticHint(";
  protected final String TEXT_28 = ".getType(";
  protected final String TEXT_29 = ".VISUAL_ID));" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\t);";
  protected final String TEXT_32 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_33 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_34 = "());";
  protected final String TEXT_35 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_36 = "());";
  protected final String TEXT_37 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_38 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, createLayoutEditPolicy());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " createLayoutEditPolicy() {";
  protected final String TEXT_40 = "\t" + NL + "\t\treturn new ";
  protected final String TEXT_41 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_42 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_44 = NL + "\t\treturn new ";
  protected final String TEXT_45 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_46 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_48 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_49 = NL + "\t\treturn new ";
  protected final String TEXT_50 = "() {" + NL + "" + NL + "\t\t\tprotected org.eclipse.gef.commands.Command createAddCommand(";
  protected final String TEXT_51 = " child, ";
  protected final String TEXT_52 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_53 = " createMoveChildCommand(";
  protected final String TEXT_54 = " child, ";
  protected final String TEXT_55 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_56 = " getCreateCommand(";
  protected final String TEXT_57 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_58 = NL + "\t\treturn new ";
  protected final String TEXT_59 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_60 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_62 = " getMoveChildrenCommand(";
  protected final String TEXT_63 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_64 = " getCreateCommand(";
  protected final String TEXT_65 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_66 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_67 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_68 = "()";
  protected final String TEXT_69 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_70 = ";";
  protected final String TEXT_71 = NL + "\t\treturn ";
  protected final String TEXT_72 = ";";
  protected final String TEXT_73 = NL + "\t\t";
  protected final String TEXT_74 = " figure = new ";
  protected final String TEXT_75 = "();";
  protected final String TEXT_76 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_77 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_78 = NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_80 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_81 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_82 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_83 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_84 = ") {";
  protected final String TEXT_85 = NL + "\t\t\t((";
  protected final String TEXT_86 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_87 = "());";
  protected final String TEXT_88 = NL + "\t\t\t((";
  protected final String TEXT_89 = ") childEditPart).setLabel(new ";
  protected final String TEXT_90 = "());";
  protected final String TEXT_91 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_92 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_93 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_94 = " createNodePlate() {";
  protected final String TEXT_95 = NL + "\t\treturn new ";
  protected final String TEXT_96 = "(getMapMode().DPtoLP(";
  protected final String TEXT_97 = "), getMapMode().DPtoLP(";
  protected final String TEXT_98 = "));" + NL + "\t}";
  protected final String TEXT_99 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_100 = " ep = (";
  protected final String TEXT_101 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_102 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_103 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_104 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_105 = ".";
  protected final String TEXT_106 = " | ";
  protected final String TEXT_107 = ");" + NL + "\t\t";
  protected final String TEXT_108 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_109 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_110 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_111 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_112 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_113 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_114 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_115 = NL + "\t\t\t";
  protected final String TEXT_116 = " layout = new ";
  protected final String TEXT_117 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_118 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_119 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_120 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_121 = ".getType(";
  protected final String TEXT_122 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_123 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_124 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_125 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_126 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_127 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_128 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_129 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_130 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_131 = " childEditPart) {";
  protected final String TEXT_132 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_133 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_134 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_135 = " root = (";
  protected final String TEXT_136 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_137 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_138 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = NL + "}";
  protected final String TEXT_141 = NL;
d261 2
a262 1
GenNode genNode = (GenNode) ((Object[]) argument)[0];
d275 1
a276 2
    stringBuffer.append(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_5);
a277 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d291 2
a293 2
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_7);
d296 1
d298 1
d300 1
a300 1
    stringBuffer.append(genCommonBase.getVisualID());
d302 1
a302 1
    }
a303 2
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_12);
d312 2
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d317 1
a317 1
    	if (hasChildrenInListCompartments) {
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d323 2
a325 2
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest"));
a332 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_23);
d340 2
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d345 1
a345 1
    stringBuffer.append(child.getUniqueIdentifier());
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a350 2
    stringBuffer.append(importManager.getImportedName(compartment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_29);
d356 2
d359 1
a359 1
    	}
d361 1
a361 1
    }
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName()));
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
d367 1
a367 1
    if (!genNode.getChildNodes().isEmpty()) {
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d371 1
a371 1
    }
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
a374 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
    stringBuffer.append(TEXT_39);
d381 2
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy"));
d386 1
a386 1
    stringBuffer.append(fqnEditPart);
a387 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
    stringBuffer.append(TEXT_43);
d391 2
d394 1
a394 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ConstrainedToolbarLayoutEditPolicy"));
d396 1
a396 1
    stringBuffer.append(fqnEditPart);
d398 1
a398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart"));
a399 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getTextSelectionEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_48);
d403 2
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.FlowLayoutEditPolicy"));
d410 2
a412 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(fqnCommand);
d416 1
a416 1
    stringBuffer.append(fqnEditPart);
d418 1
a418 1
    stringBuffer.append(fqnCommand);
a419 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
    stringBuffer.append(TEXT_57);
d423 2
d426 1
a426 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.LayoutEditPolicy"));
d428 1
a428 1
    stringBuffer.append(fqnEditPart);
d430 1
a430 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.NonResizableEditPolicy"));
d432 2
a434 2
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d436 1
a436 1
    stringBuffer.append(fqnCommand);
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateRequest"));
a439 2
    } //switch 
    stringBuffer.append(TEXT_66);
d450 2
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d455 1
a455 1
    if (isXYLayout) {
a456 2
    } // if isXYLayout
    stringBuffer.append(TEXT_70);
d459 2
a461 2
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_72);
d466 2
d471 1
a471 1
    stringBuffer.append(figureQualifiedClassName);
d473 1
a473 1
    if (!genNode.getChildNodes().isEmpty() && isXYLayout) { /*otherwise, leave to figure's default value*/
d477 1
a477 1
    }
d479 1
a479 1
    if (figureQualifiedClassName != null) {
a482 2
    stringBuffer.append(figureQualifiedClassName);
    stringBuffer.append(TEXT_81);
d494 1
a494 1
    stringBuffer.append(TEXT_82);
d513 2
d516 2
a518 2
    stringBuffer.append(TEXT_84);
    			if (isAccessor) {
d520 1
a520 1
    stringBuffer.append(labelEditPart);
d522 1
a522 1
    stringBuffer.append(labelFigureClassName);
d524 1
a524 1
    			} else {
d526 1
a526 1
    stringBuffer.append(labelEditPart);
d528 1
a528 1
    stringBuffer.append(labelFigureClassName);
d530 1
a530 1
    			}
a531 2
    		}
    stringBuffer.append(TEXT_92);
d536 2
a538 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_94);
d548 2
d551 1
a551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure"));
d553 1
a553 1
    stringBuffer.append(width);
a554 2
    stringBuffer.append(height);
    stringBuffer.append(TEXT_98);
d558 2
d563 1
a563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d565 1
a565 1
    if (rc.getResizeHandleNames().isEmpty()) {
d567 1
a567 1
    stringBuffer.append(draw2dPC);
a568 2
     } else {
    stringBuffer.append(TEXT_104);
d572 1
a572 1
    stringBuffer.append(TEXT_105);
d575 2
d578 1
a578 1
    }}
d582 1
a582 1
    }
a585 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_111);
d589 2
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
a593 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_114);
d597 2
d602 1
a602 1
    stringBuffer.append(layoutClassName);
a603 2
    }
    stringBuffer.append(TEXT_118);
d608 2
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a614 2
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_122);
d627 2
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d634 1
a634 1
    	if (hasFixedChildren) {
d636 1
a636 1
    	} else {
d638 1
a638 1
    	}
d640 2
a642 2
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a643 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_131);
d649 2
a651 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_133);
d656 2
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a662 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_137);
d666 1
a666 1
    stringBuffer.append(TEXT_138);
d672 1
a672 1
    stringBuffer.append(TEXT_139);
d675 2
a677 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_141);
@


1.79
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d57 104
a160 103
  protected final String TEXT_38 = "());";
  protected final String TEXT_39 = "\t" + NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_40 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_41 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_42 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_43 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_44 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_45 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_46 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_47 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_48 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_49 = "() {" + NL + "" + NL + "\t\t\tprotected org.eclipse.gef.commands.Command createAddCommand(";
  protected final String TEXT_50 = " child, ";
  protected final String TEXT_51 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_52 = " createMoveChildCommand(";
  protected final String TEXT_53 = " child, ";
  protected final String TEXT_54 = " after) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_55 = " getCreateCommand(";
  protected final String TEXT_56 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_57 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_58 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_59 = " child) {" + NL + "\t\t\t\tEditPolicy result = child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE);" + NL + "\t\t\t\tif( result == null ){" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_60 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_61 = " getMoveChildrenCommand(";
  protected final String TEXT_62 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_63 = " getCreateCommand(";
  protected final String TEXT_64 = " request) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL;
  protected final String TEXT_65 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_66 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_67 = "()";
  protected final String TEXT_68 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_69 = ";";
  protected final String TEXT_70 = NL + "\t\treturn ";
  protected final String TEXT_71 = ";";
  protected final String TEXT_72 = NL + "\t\t";
  protected final String TEXT_73 = " figure = new ";
  protected final String TEXT_74 = "();";
  protected final String TEXT_75 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_76 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_79 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_80 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_82 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_83 = ") {";
  protected final String TEXT_84 = NL + "\t\t\t((";
  protected final String TEXT_85 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_86 = "());";
  protected final String TEXT_87 = NL + "\t\t\t((";
  protected final String TEXT_88 = ") childEditPart).setLabel(new ";
  protected final String TEXT_89 = "());";
  protected final String TEXT_90 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_92 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_93 = " createNodePlate() {";
  protected final String TEXT_94 = NL + "\t\treturn new ";
  protected final String TEXT_95 = "(getMapMode().DPtoLP(";
  protected final String TEXT_96 = "), getMapMode().DPtoLP(";
  protected final String TEXT_97 = "));" + NL + "\t}";
  protected final String TEXT_98 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_99 = " ep = (";
  protected final String TEXT_100 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_101 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_102 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_103 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_104 = ".";
  protected final String TEXT_105 = " | ";
  protected final String TEXT_106 = ");" + NL + "\t\t";
  protected final String TEXT_107 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_108 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_109 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_110 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_111 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_112 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_113 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " layout = new ";
  protected final String TEXT_116 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_117 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_118 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_119 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_120 = ".getType(";
  protected final String TEXT_121 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_122 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_123 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_124 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_125 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_126 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_127 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_128 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_129 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_130 = " childEditPart) {";
  protected final String TEXT_131 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_132 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_133 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_134 = " root = (";
  protected final String TEXT_135 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_136 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_137 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = NL + "}";
  protected final String TEXT_140 = NL;
d375 2
d383 1
a383 1
    stringBuffer.append(TEXT_39);
d385 1
a385 1
    stringBuffer.append(TEXT_40);
d387 1
a387 1
    stringBuffer.append(TEXT_41);
d389 1
a389 1
    stringBuffer.append(TEXT_42);
d393 1
a393 1
    stringBuffer.append(TEXT_43);
d395 1
a395 1
    stringBuffer.append(TEXT_44);
d397 1
a397 1
    stringBuffer.append(TEXT_45);
d399 1
a399 1
    stringBuffer.append(TEXT_46);
d401 1
a401 1
    stringBuffer.append(TEXT_47);
d405 1
a405 1
    stringBuffer.append(TEXT_48);
a406 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(fqnEditPart);
d410 2
a412 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(fqnEditPart);
d416 2
d419 1
a419 1
    stringBuffer.append(TEXT_55);
d421 1
a421 1
    stringBuffer.append(TEXT_56);
d425 1
a425 1
    stringBuffer.append(TEXT_57);
d427 1
a427 1
    stringBuffer.append(TEXT_58);
d429 1
a429 1
    stringBuffer.append(TEXT_59);
d431 1
a431 1
    stringBuffer.append(TEXT_60);
d433 1
a433 1
    stringBuffer.append(TEXT_61);
d435 1
a435 1
    stringBuffer.append(TEXT_62);
d437 1
a437 1
    stringBuffer.append(TEXT_63);
d439 1
a439 1
    stringBuffer.append(TEXT_64);
d441 1
a441 1
    stringBuffer.append(TEXT_65);
d452 1
a452 1
    stringBuffer.append(TEXT_66);
d454 1
a454 1
    stringBuffer.append(TEXT_67);
d456 1
a456 1
    stringBuffer.append(TEXT_68);
d458 1
a458 1
    stringBuffer.append(TEXT_69);
d461 1
a461 1
    stringBuffer.append(TEXT_70);
d463 1
a463 1
    stringBuffer.append(TEXT_71);
a467 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(figureQualifiedClassName);
d471 2
a473 2
    stringBuffer.append(TEXT_75);
    }
d477 2
a479 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(figureQualifiedClassName);
d483 2
d496 1
a496 1
    stringBuffer.append(TEXT_81);
d515 1
a515 1
    stringBuffer.append(TEXT_82);
d517 1
a517 1
    stringBuffer.append(TEXT_83);
d519 1
a519 1
    stringBuffer.append(TEXT_84);
d521 1
a521 1
    stringBuffer.append(TEXT_85);
d523 1
a523 1
    stringBuffer.append(TEXT_86);
d525 1
a525 1
    stringBuffer.append(TEXT_87);
d527 1
a527 1
    stringBuffer.append(TEXT_88);
d529 1
a529 1
    stringBuffer.append(TEXT_89);
d531 1
a531 1
    stringBuffer.append(TEXT_90);
d533 1
a533 1
    stringBuffer.append(TEXT_91);
d538 1
a538 1
    stringBuffer.append(TEXT_92);
d540 1
a540 1
    stringBuffer.append(TEXT_93);
d550 1
a550 1
    stringBuffer.append(TEXT_94);
d552 1
a552 1
    stringBuffer.append(TEXT_95);
d554 1
a554 1
    stringBuffer.append(TEXT_96);
d556 1
a556 1
    stringBuffer.append(TEXT_97);
a559 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editpolicies.ResizableEditPolicy"));
d563 2
d566 1
a566 1
    stringBuffer.append(TEXT_101);
d568 1
a568 1
    stringBuffer.append(TEXT_102);
d570 1
a570 1
    stringBuffer.append(TEXT_103);
d574 1
a574 1
    stringBuffer.append(TEXT_104);
d577 1
a577 1
    stringBuffer.append(TEXT_105);
a578 2
    stringBuffer.append(TEXT_106);
    }
d582 1
a582 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
d586 2
d591 1
a591 1
    stringBuffer.append(TEXT_111);
d593 1
a593 1
    stringBuffer.append(TEXT_112);
d595 1
a595 1
    stringBuffer.append(TEXT_113);
a598 2
    stringBuffer.append(TEXT_114);
    stringBuffer.append(layoutClassName);
d602 2
d605 1
a605 1
    stringBuffer.append(TEXT_117);
d610 1
a610 1
    stringBuffer.append(TEXT_118);
d612 1
a612 1
    stringBuffer.append(TEXT_119);
d614 1
a614 1
    stringBuffer.append(TEXT_120);
d616 1
a616 1
    stringBuffer.append(TEXT_121);
d629 1
a629 1
    stringBuffer.append(TEXT_122);
d631 1
a631 1
    stringBuffer.append(TEXT_123);
d633 1
a633 1
    stringBuffer.append(TEXT_124);
d635 1
a635 1
    stringBuffer.append(TEXT_125);
d637 1
a637 1
    stringBuffer.append(TEXT_126);
d639 1
a639 1
    stringBuffer.append(TEXT_127);
d641 1
a641 1
    stringBuffer.append(TEXT_128);
d643 1
a643 1
    stringBuffer.append(TEXT_129);
d645 1
a645 1
    stringBuffer.append(TEXT_130);
d651 1
a651 1
    stringBuffer.append(TEXT_131);
d653 1
a653 1
    stringBuffer.append(TEXT_132);
a657 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d661 2
d664 1
a664 1
    stringBuffer.append(TEXT_136);
d668 1
a668 1
    stringBuffer.append(TEXT_137);
d674 1
a674 1
    stringBuffer.append(TEXT_138);
d677 1
a677 1
    stringBuffer.append(TEXT_139);
d679 1
a679 1
    stringBuffer.append(TEXT_140);
@


1.78
log
@Updating with latest state of the code.
@
text
@d58 1
a58 1
  protected final String TEXT_39 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
d67 93
a159 76
  protected final String TEXT_48 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_49 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_50 = "()";
  protected final String TEXT_51 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_52 = ";";
  protected final String TEXT_53 = NL + "\t\treturn ";
  protected final String TEXT_54 = ";";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = " figure = new ";
  protected final String TEXT_57 = "();";
  protected final String TEXT_58 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_59 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_60 = NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_62 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_63 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_64 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_65 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_66 = ") {";
  protected final String TEXT_67 = NL + "\t\t\t((";
  protected final String TEXT_68 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_69 = "());";
  protected final String TEXT_70 = NL + "\t\t\t((";
  protected final String TEXT_71 = ") childEditPart).setLabel(new ";
  protected final String TEXT_72 = "());";
  protected final String TEXT_73 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_74 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_76 = " createNodePlate() {";
  protected final String TEXT_77 = NL + "\t\treturn new ";
  protected final String TEXT_78 = "(getMapMode().DPtoLP(";
  protected final String TEXT_79 = "), getMapMode().DPtoLP(";
  protected final String TEXT_80 = "));" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\t";
  protected final String TEXT_82 = " ep = (";
  protected final String TEXT_83 = ") super.getPrimaryDragEditPolicy();" + NL + "\t\t";
  protected final String TEXT_84 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_85 = ".NONE);" + NL + "\t\t";
  protected final String TEXT_86 = NL + "\t\tep.setResizeDirections(";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = " | ";
  protected final String TEXT_89 = ");" + NL + "\t\t";
  protected final String TEXT_90 = NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_91 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_92 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_93 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_94 = NL + "\t\t\t";
  protected final String TEXT_95 = " layout = new ";
  protected final String TEXT_96 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_97 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_98 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_99 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_100 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_101 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_102 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_103 = ".getType(";
  protected final String TEXT_104 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_105 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_106 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_107 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_108 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_109 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_110 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_111 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_112 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_113 = " childEditPart) {";
  protected final String TEXT_114 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_115 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_116 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_117 = " root = (";
  protected final String TEXT_118 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_119 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_120 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_121 = NL;
  protected final String TEXT_122 = NL + "}";
  protected final String TEXT_123 = NL;
d263 1
a263 1
boolean useFlowLayout = !genNode.isListLayout();
d374 6
a379 1
    if (useFlowLayout) {
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d387 3
a389 1
    } else {
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d399 3
a401 1
    }
d403 36
d449 1
a449 1
    stringBuffer.append(TEXT_49);
d451 5
a455 5
    stringBuffer.append(TEXT_50);
    if (useFlowLayout) {
    stringBuffer.append(TEXT_51);
    } // use flow layout
    stringBuffer.append(TEXT_52);
d458 1
a458 1
    stringBuffer.append(TEXT_53);
d460 1
a460 1
    stringBuffer.append(TEXT_54);
d465 1
a465 1
    stringBuffer.append(TEXT_55);
d467 1
a467 1
    stringBuffer.append(TEXT_56);
d469 3
a471 3
    stringBuffer.append(TEXT_57);
    if (!genNode.getChildNodes().isEmpty() && useFlowLayout) { /*otherwise, leave to figure's default value*/
    stringBuffer.append(TEXT_58);
d473 1
a473 1
    stringBuffer.append(TEXT_59);
d475 1
a475 1
    stringBuffer.append(TEXT_60);
d477 1
a477 1
    stringBuffer.append(TEXT_61);
d479 1
a479 1
    stringBuffer.append(TEXT_62);
d481 1
a481 1
    stringBuffer.append(TEXT_63);
d493 1
a493 1
    stringBuffer.append(TEXT_64);
d512 1
a512 1
    stringBuffer.append(TEXT_65);
d514 1
a514 1
    stringBuffer.append(TEXT_66);
d516 1
a516 1
    stringBuffer.append(TEXT_67);
d518 1
a518 1
    stringBuffer.append(TEXT_68);
d520 1
a520 1
    stringBuffer.append(TEXT_69);
d522 1
a522 1
    stringBuffer.append(TEXT_70);
d524 1
a524 1
    stringBuffer.append(TEXT_71);
d526 1
a526 1
    stringBuffer.append(TEXT_72);
d528 1
a528 1
    stringBuffer.append(TEXT_73);
d530 1
a530 1
    stringBuffer.append(TEXT_74);
d535 1
a535 1
    stringBuffer.append(TEXT_75);
d537 1
a537 1
    stringBuffer.append(TEXT_76);
d547 1
a547 1
    stringBuffer.append(TEXT_77);
d549 1
a549 1
    stringBuffer.append(TEXT_78);
d551 1
a551 1
    stringBuffer.append(TEXT_79);
d553 1
a553 1
    stringBuffer.append(TEXT_80);
d557 1
a557 1
    stringBuffer.append(TEXT_81);
d559 1
a559 1
    stringBuffer.append(TEXT_82);
d561 1
a561 1
    stringBuffer.append(TEXT_83);
d563 1
a563 1
    stringBuffer.append(TEXT_84);
d565 1
a565 1
    stringBuffer.append(TEXT_85);
d567 1
a567 1
    stringBuffer.append(TEXT_86);
d571 1
a571 1
    stringBuffer.append(TEXT_87);
d574 1
a574 1
    stringBuffer.append(TEXT_88);
d576 1
a576 1
    stringBuffer.append(TEXT_89);
d578 1
a578 1
    stringBuffer.append(TEXT_90);
d580 1
a580 1
    stringBuffer.append(TEXT_91);
d582 1
a582 1
    stringBuffer.append(TEXT_92);
d584 1
a584 1
    stringBuffer.append(TEXT_93);
d586 8
a593 1
if (!useFlowLayout) {
d596 1
a596 1
    stringBuffer.append(TEXT_94);
d598 1
a598 1
    stringBuffer.append(TEXT_95);
d600 1
a600 7
    stringBuffer.append(TEXT_96);
    } else {
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_99);
d602 1
a602 1
    stringBuffer.append(TEXT_100);
d607 1
a607 1
    stringBuffer.append(TEXT_101);
d609 1
a609 1
    stringBuffer.append(TEXT_102);
d611 1
a611 1
    stringBuffer.append(TEXT_103);
d613 1
a613 1
    stringBuffer.append(TEXT_104);
d626 1
a626 1
    stringBuffer.append(TEXT_105);
d628 1
a628 1
    stringBuffer.append(TEXT_106);
d630 1
a630 1
    stringBuffer.append(TEXT_107);
d632 1
a632 1
    stringBuffer.append(TEXT_108);
d634 1
a634 1
    stringBuffer.append(TEXT_109);
d636 1
a636 1
    stringBuffer.append(TEXT_110);
d638 1
a638 1
    stringBuffer.append(TEXT_111);
d640 1
a640 1
    stringBuffer.append(TEXT_112);
d642 1
a642 1
    stringBuffer.append(TEXT_113);
d648 1
a648 1
    stringBuffer.append(TEXT_114);
d650 1
a650 1
    stringBuffer.append(TEXT_115);
d655 1
a655 1
    stringBuffer.append(TEXT_116);
d657 1
a657 1
    stringBuffer.append(TEXT_117);
d659 1
a659 1
    stringBuffer.append(TEXT_118);
d661 1
a661 1
    stringBuffer.append(TEXT_119);
d665 1
a665 1
    stringBuffer.append(TEXT_120);
d671 1
a671 1
    stringBuffer.append(TEXT_121);
d674 1
a674 1
    stringBuffer.append(TEXT_122);
d676 1
a676 1
    stringBuffer.append(TEXT_123);
@


1.77
log
@reflect changes made possible with #134462 - just set constant value instead of overriding method
@
text
@d108 35
a142 34
  protected final String TEXT_89 = ");" + NL + "\t\treturn ep;" + NL + "\t}";
  protected final String TEXT_90 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_91 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_92 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_93 = NL + "\t\t\t";
  protected final String TEXT_94 = " layout = new ";
  protected final String TEXT_95 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_96 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_97 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_98 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_99 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_100 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_101 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_102 = ".getType(";
  protected final String TEXT_103 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_104 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_105 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_106 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_107 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_108 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_109 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_110 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_111 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_112 = " childEditPart) {";
  protected final String TEXT_113 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_114 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_115 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_116 = " root = (";
  protected final String TEXT_117 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_118 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_119 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = NL + "}";
  protected final String TEXT_122 = NL;
d513 1
a513 1
    }}}
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
d521 2
a526 2
    stringBuffer.append(TEXT_93);
    stringBuffer.append(layoutClassName);
d530 2
d533 1
a533 1
    stringBuffer.append(TEXT_96);
d535 1
a535 1
    stringBuffer.append(TEXT_97);
d537 1
a537 1
    stringBuffer.append(TEXT_98);
d539 1
a539 1
    stringBuffer.append(TEXT_99);
d544 1
a544 1
    stringBuffer.append(TEXT_100);
d546 1
a546 1
    stringBuffer.append(TEXT_101);
d548 1
a548 1
    stringBuffer.append(TEXT_102);
d550 1
a550 1
    stringBuffer.append(TEXT_103);
d563 1
a563 1
    stringBuffer.append(TEXT_104);
d565 1
a565 1
    stringBuffer.append(TEXT_105);
d567 1
a567 1
    stringBuffer.append(TEXT_106);
d569 1
a569 1
    stringBuffer.append(TEXT_107);
d571 1
a571 1
    stringBuffer.append(TEXT_108);
d573 1
a573 1
    stringBuffer.append(TEXT_109);
d575 1
a575 1
    stringBuffer.append(TEXT_110);
d577 1
a577 1
    stringBuffer.append(TEXT_111);
d579 1
a579 1
    stringBuffer.append(TEXT_112);
d585 1
a585 1
    stringBuffer.append(TEXT_113);
d587 1
a587 1
    stringBuffer.append(TEXT_114);
a591 2
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d595 2
d598 1
a598 1
    stringBuffer.append(TEXT_118);
d602 1
a602 1
    stringBuffer.append(TEXT_119);
d608 1
a608 1
    stringBuffer.append(TEXT_120);
d611 1
a611 1
    stringBuffer.append(TEXT_121);
d613 1
a613 1
    stringBuffer.append(TEXT_122);
@


1.76
log
@support "NodeFigure", "DefaultSizeNodeFigure" and "Connection" as gmfgraph figure names
@
text
@d100 42
a141 53
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\treturn new ";
  protected final String TEXT_82 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_83 = " createSelectionHandles() {" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_84 = " part = (";
  protected final String TEXT_85 = ") getHost();" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_86 = " list = new ";
  protected final String TEXT_87 = "();" + NL + "\t\t\t\taddMoveHandle(part, list);" + NL + "\t\t\t\t";
  protected final String TEXT_88 = NL + "\t\t\t\t";
  protected final String TEXT_89 = ".addHandle(part, list, ";
  protected final String TEXT_90 = ".";
  protected final String TEXT_91 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_92 = NL + "\t\t\t\t";
  protected final String TEXT_93 = ".addHandle(part, list, ";
  protected final String TEXT_94 = ".";
  protected final String TEXT_95 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_96 = NL + "\t\t\t\treturn list;" + NL + "\t\t\t}" + NL + "\t\t\tprivate void addMoveHandle(final ";
  protected final String TEXT_97 = " part, final ";
  protected final String TEXT_98 = " list) {" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " moveHandle = new ";
  protected final String TEXT_100 = "(part);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_101 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_102 = " createNodeFigure() {" + NL + "\t\t";
  protected final String TEXT_103 = " figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_104 = NL + "\t\t\t";
  protected final String TEXT_105 = " layout = new ";
  protected final String TEXT_106 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_107 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_108 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_109 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_110 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_112 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_113 = ".getType(";
  protected final String TEXT_114 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_115 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_116 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_117 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_118 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_119 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_120 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_121 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_122 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_123 = " childEditPart) {";
  protected final String TEXT_124 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_125 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_126 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_127 = " root = (";
  protected final String TEXT_128 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_129 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_130 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_131 = NL;
  protected final String TEXT_132 = NL + "}";
  protected final String TEXT_133 = NL;
d493 1
a493 1
	final String javaUtilList = importManager.getImportedName("java.util.List");
d495 1
a495 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
d497 1
a497 1
    stringBuffer.append(javaUtilList);
d499 1
a499 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d501 1
a501 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d503 1
a503 1
    stringBuffer.append(javaUtilList);
d505 3
a507 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d509 2
a510 2
    for (Iterator it = rc.getResizeHandleNames().iterator(); it.hasNext();) {
					String next = (String) it.next();
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.ResizableHandleKit"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
d516 1
a516 1
    stringBuffer.append(next);
d518 1
a518 2
    } for (Iterator it = rc.getNonResizeHandleNames().iterator(); it.hasNext();) {
					String next = (String) it.next();
a519 22
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.NonResizableHandleKit"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.PositionConstants"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(next);
    stringBuffer.append(TEXT_95);
    }
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(javaUtilList);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.MoveHandle"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.MoveHandle"));
    stringBuffer.append(TEXT_100);
    }
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure"));
    stringBuffer.append(TEXT_103);
d524 1
a524 1
    stringBuffer.append(TEXT_104);
d526 1
a526 1
    stringBuffer.append(TEXT_105);
d528 1
a528 1
    stringBuffer.append(TEXT_106);
d530 1
a530 1
    stringBuffer.append(TEXT_107);
d532 1
a532 1
    stringBuffer.append(TEXT_108);
d534 1
a534 1
    stringBuffer.append(TEXT_109);
d536 1
a536 1
    stringBuffer.append(TEXT_110);
d541 1
a541 1
    stringBuffer.append(TEXT_111);
d543 1
a543 1
    stringBuffer.append(TEXT_112);
d545 1
a545 1
    stringBuffer.append(TEXT_113);
d547 1
a547 1
    stringBuffer.append(TEXT_114);
d560 1
a560 1
    stringBuffer.append(TEXT_115);
d562 1
a562 1
    stringBuffer.append(TEXT_116);
d564 1
a564 1
    stringBuffer.append(TEXT_117);
d566 1
a566 1
    stringBuffer.append(TEXT_118);
d568 1
a568 1
    stringBuffer.append(TEXT_119);
d570 1
a570 1
    stringBuffer.append(TEXT_120);
d572 1
a572 1
    stringBuffer.append(TEXT_121);
d574 1
a574 1
    stringBuffer.append(TEXT_122);
d576 1
a576 1
    stringBuffer.append(TEXT_123);
d582 1
a582 1
    stringBuffer.append(TEXT_124);
d584 1
a584 1
    stringBuffer.append(TEXT_125);
d589 1
a589 1
    stringBuffer.append(TEXT_126);
d591 1
a591 1
    stringBuffer.append(TEXT_127);
d593 1
a593 1
    stringBuffer.append(TEXT_128);
d595 1
a595 1
    stringBuffer.append(TEXT_129);
d599 1
a599 1
    stringBuffer.append(TEXT_130);
d605 1
a605 1
    stringBuffer.append(TEXT_131);
d608 1
a608 1
    stringBuffer.append(TEXT_132);
d610 1
a610 1
    stringBuffer.append(TEXT_133);
@


1.75
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d94 59
a152 55
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_76 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_77 = "), getMapMode().DPtoLP(";
  protected final String TEXT_78 = "));" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\treturn new ";
  protected final String TEXT_80 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_81 = " createSelectionHandles() {" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_82 = " part = (";
  protected final String TEXT_83 = ") getHost();" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_84 = " list = new ";
  protected final String TEXT_85 = "();" + NL + "\t\t\t\taddMoveHandle(part, list);" + NL + "\t\t\t\t";
  protected final String TEXT_86 = NL + "\t\t\t\t";
  protected final String TEXT_87 = ".addHandle(part, list, ";
  protected final String TEXT_88 = ".";
  protected final String TEXT_89 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_90 = NL + "\t\t\t\t";
  protected final String TEXT_91 = ".addHandle(part, list, ";
  protected final String TEXT_92 = ".";
  protected final String TEXT_93 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_94 = NL + "\t\t\t\treturn list;" + NL + "\t\t\t}" + NL + "\t\t\tprivate void addMoveHandle(final ";
  protected final String TEXT_95 = " part, final ";
  protected final String TEXT_96 = " list) {" + NL + "\t\t\t\t";
  protected final String TEXT_97 = " moveHandle = new ";
  protected final String TEXT_98 = "(part);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_99 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_100 = NL + "\t\t\t";
  protected final String TEXT_101 = " layout = new ";
  protected final String TEXT_102 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_103 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_104 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_105 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_106 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_108 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_109 = ".getType(";
  protected final String TEXT_110 = ".VISUAL_ID));" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_112 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_113 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_114 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_115 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_116 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_117 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_118 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_119 = " childEditPart) {";
  protected final String TEXT_120 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_121 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_122 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_123 = " root = (";
  protected final String TEXT_124 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_125 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_126 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_127 = NL;
  protected final String TEXT_128 = NL + "}";
  protected final String TEXT_129 = NL;
d272 3
a282 3
if (genNode.getViewmap() instanceof InnerClassViewmap) {
importManager.registerInnerClass(((InnerClassViewmap) genNode.getViewmap()).getClassName());
}
d484 2
d495 3
a497 1
    stringBuffer.append(TEXT_76);
d499 1
a499 1
    stringBuffer.append(TEXT_77);
d501 1
a501 1
    stringBuffer.append(TEXT_78);
d505 1
a505 1
    stringBuffer.append(TEXT_79);
d507 1
a507 1
    stringBuffer.append(TEXT_80);
d509 1
a509 1
    stringBuffer.append(TEXT_81);
d511 1
a511 1
    stringBuffer.append(TEXT_82);
d513 1
a513 1
    stringBuffer.append(TEXT_83);
d515 1
a515 1
    stringBuffer.append(TEXT_84);
d517 1
a517 1
    stringBuffer.append(TEXT_85);
d520 1
a520 1
    stringBuffer.append(TEXT_86);
d522 1
a522 1
    stringBuffer.append(TEXT_87);
d524 1
a524 1
    stringBuffer.append(TEXT_88);
d526 1
a526 1
    stringBuffer.append(TEXT_89);
d529 1
a529 1
    stringBuffer.append(TEXT_90);
d531 1
a531 1
    stringBuffer.append(TEXT_91);
d533 1
a533 1
    stringBuffer.append(TEXT_92);
d535 1
a535 1
    stringBuffer.append(TEXT_93);
d537 1
a537 1
    stringBuffer.append(TEXT_94);
d539 1
a539 1
    stringBuffer.append(TEXT_95);
d541 1
a541 1
    stringBuffer.append(TEXT_96);
d543 1
a543 1
    stringBuffer.append(TEXT_97);
d545 1
a545 1
    stringBuffer.append(TEXT_98);
d547 5
a551 1
    stringBuffer.append(TEXT_99);
d556 1
a556 1
    stringBuffer.append(TEXT_100);
d558 1
a558 1
    stringBuffer.append(TEXT_101);
d560 1
a560 1
    stringBuffer.append(TEXT_102);
d562 1
a562 1
    stringBuffer.append(TEXT_103);
d564 1
a564 1
    stringBuffer.append(TEXT_104);
d566 1
a566 1
    stringBuffer.append(TEXT_105);
d568 1
a568 1
    stringBuffer.append(TEXT_106);
d573 1
a573 1
    stringBuffer.append(TEXT_107);
d575 1
a575 1
    stringBuffer.append(TEXT_108);
d577 1
a577 1
    stringBuffer.append(TEXT_109);
d579 1
a579 1
    stringBuffer.append(TEXT_110);
d592 1
a592 1
    stringBuffer.append(TEXT_111);
d594 1
a594 1
    stringBuffer.append(TEXT_112);
d596 1
a596 1
    stringBuffer.append(TEXT_113);
d598 1
a598 1
    stringBuffer.append(TEXT_114);
d600 1
a600 1
    stringBuffer.append(TEXT_115);
d602 1
a602 1
    stringBuffer.append(TEXT_116);
d604 1
a604 1
    stringBuffer.append(TEXT_117);
d606 1
a606 1
    stringBuffer.append(TEXT_118);
d608 1
a608 1
    stringBuffer.append(TEXT_119);
d614 1
a614 1
    stringBuffer.append(TEXT_120);
d616 1
a616 1
    stringBuffer.append(TEXT_121);
d621 1
a621 1
    stringBuffer.append(TEXT_122);
d623 1
a623 1
    stringBuffer.append(TEXT_123);
d625 1
a625 1
    stringBuffer.append(TEXT_124);
d627 1
a627 1
    stringBuffer.append(TEXT_125);
d631 1
a631 1
    stringBuffer.append(TEXT_126);
d637 1
a637 1
    stringBuffer.append(TEXT_127);
d640 1
a640 1
    stringBuffer.append(TEXT_128);
d642 1
a642 1
    stringBuffer.append(TEXT_129);
@


1.74
log
@#136816 No selection feedback is provided for nodes with resize constraint NONE
@
text
@d28 2
a29 2
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String VISUAL_ID = \"";
  protected final String TEXT_10 = "\";";
d47 99
a145 99
  protected final String TEXT_28 = ".VISUAL_ID);" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_30 = NL + "\t\t);";
  protected final String TEXT_31 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_32 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_33 = "());";
  protected final String TEXT_34 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_35 = "());";
  protected final String TEXT_36 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_37 = "());";
  protected final String TEXT_38 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_39 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_40 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_41 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_42 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_43 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_44 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ";
  protected final String TEXT_45 = ") {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_46 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_47 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_48 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_49 = "()";
  protected final String TEXT_50 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_51 = ";";
  protected final String TEXT_52 = NL + "\t\treturn ";
  protected final String TEXT_53 = ";";
  protected final String TEXT_54 = NL + "\t\t";
  protected final String TEXT_55 = " figure = new ";
  protected final String TEXT_56 = "();";
  protected final String TEXT_57 = NL + " \t\tfigure.setUseLocalCoordinates(true);";
  protected final String TEXT_58 = NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_59 = NL + "\t}";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_61 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_62 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_63 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_64 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_65 = ") {";
  protected final String TEXT_66 = NL + "\t\t\t((";
  protected final String TEXT_67 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_68 = "());";
  protected final String TEXT_69 = NL + "\t\t\t((";
  protected final String TEXT_70 = ") childEditPart).setLabel(new ";
  protected final String TEXT_71 = "());";
  protected final String TEXT_72 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_73 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_75 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_76 = "), getMapMode().DPtoLP(";
  protected final String TEXT_77 = "));" + NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\treturn new ";
  protected final String TEXT_79 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_80 = " createSelectionHandles() {" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_81 = " part = (";
  protected final String TEXT_82 = ") getHost();" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_83 = " list = new ";
  protected final String TEXT_84 = "();" + NL + "\t\t\t\taddMoveHandle(part, list);" + NL + "\t\t\t\t";
  protected final String TEXT_85 = NL + "\t\t\t\t";
  protected final String TEXT_86 = ".addHandle(part, list, ";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_89 = NL + "\t\t\t\t";
  protected final String TEXT_90 = ".addHandle(part, list, ";
  protected final String TEXT_91 = ".";
  protected final String TEXT_92 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_93 = NL + "\t\t\t\treturn list;" + NL + "\t\t\t}" + NL + "\t\t\tprivate void addMoveHandle(final ";
  protected final String TEXT_94 = " part, final ";
  protected final String TEXT_95 = " list) {" + NL + "\t\t\t\t";
  protected final String TEXT_96 = " moveHandle = new ";
  protected final String TEXT_97 = "(part);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_98 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_99 = NL + "\t\t\t";
  protected final String TEXT_100 = " layout = new ";
  protected final String TEXT_101 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_102 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_103 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_104 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_105 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_106 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_107 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_108 = ".VISUAL_ID);" + NL + "\t}";
  protected final String TEXT_109 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_110 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_111 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_112 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_113 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_114 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_115 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_116 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_117 = " childEditPart) {";
  protected final String TEXT_118 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_119 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_120 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_121 = " root = (";
  protected final String TEXT_122 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_123 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_124 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_125 = NL;
  protected final String TEXT_126 = NL + "}";
d147 2
d337 2
d340 1
a340 1
    stringBuffer.append(TEXT_28);
d346 1
a346 1
    stringBuffer.append(TEXT_29);
d348 1
a348 1
    stringBuffer.append(TEXT_30);
d350 1
a350 1
    stringBuffer.append(TEXT_31);
d352 1
a352 1
    stringBuffer.append(TEXT_32);
d354 1
a354 1
    stringBuffer.append(TEXT_33);
d356 1
a356 1
    stringBuffer.append(TEXT_34);
d358 1
a358 1
    stringBuffer.append(TEXT_35);
d360 1
a360 1
    stringBuffer.append(TEXT_36);
d362 1
a362 1
    stringBuffer.append(TEXT_37);
d364 1
a364 1
    stringBuffer.append(TEXT_38);
d366 1
a366 1
    stringBuffer.append(TEXT_39);
d368 1
a368 1
    stringBuffer.append(TEXT_40);
d370 1
a370 1
    stringBuffer.append(TEXT_41);
d372 1
a372 1
    stringBuffer.append(TEXT_42);
d374 1
a374 1
    stringBuffer.append(TEXT_43);
d376 1
a376 1
    stringBuffer.append(TEXT_44);
d378 1
a378 1
    stringBuffer.append(TEXT_45);
d380 1
a380 1
    stringBuffer.append(TEXT_46);
d382 1
a382 1
    stringBuffer.append(TEXT_47);
d393 1
a393 1
    stringBuffer.append(TEXT_48);
d395 1
a395 1
    stringBuffer.append(TEXT_49);
d397 1
a397 1
    stringBuffer.append(TEXT_50);
d399 1
a399 1
    stringBuffer.append(TEXT_51);
d402 1
a402 1
    stringBuffer.append(TEXT_52);
d404 1
a404 1
    stringBuffer.append(TEXT_53);
a408 2
    stringBuffer.append(TEXT_54);
    stringBuffer.append(figureQualifiedClassName);
d412 2
a414 2
    stringBuffer.append(TEXT_57);
    }
d418 2
a420 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(figureQualifiedClassName);
d424 2
d437 1
a437 1
    stringBuffer.append(TEXT_63);
d456 1
a456 1
    stringBuffer.append(TEXT_64);
d458 1
a458 1
    stringBuffer.append(TEXT_65);
d460 1
a460 1
    stringBuffer.append(TEXT_66);
d462 1
a462 1
    stringBuffer.append(TEXT_67);
d464 1
a464 1
    stringBuffer.append(TEXT_68);
d466 1
a466 1
    stringBuffer.append(TEXT_69);
d468 1
a468 1
    stringBuffer.append(TEXT_70);
d470 1
a470 1
    stringBuffer.append(TEXT_71);
d472 1
a472 1
    stringBuffer.append(TEXT_72);
d474 1
a474 1
    stringBuffer.append(TEXT_73);
d479 1
a479 1
    stringBuffer.append(TEXT_74);
d489 1
a489 1
    stringBuffer.append(TEXT_75);
d491 1
a491 1
    stringBuffer.append(TEXT_76);
d493 1
a493 1
    stringBuffer.append(TEXT_77);
d497 1
a497 1
    stringBuffer.append(TEXT_78);
d499 1
a499 1
    stringBuffer.append(TEXT_79);
a500 2
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d504 2
d507 1
a507 1
    stringBuffer.append(TEXT_83);
d509 1
a509 1
    stringBuffer.append(TEXT_84);
d512 1
a512 1
    stringBuffer.append(TEXT_85);
d514 1
a514 1
    stringBuffer.append(TEXT_86);
d516 1
a516 1
    stringBuffer.append(TEXT_87);
d518 1
a518 1
    stringBuffer.append(TEXT_88);
d521 1
a521 1
    stringBuffer.append(TEXT_89);
d523 1
a523 1
    stringBuffer.append(TEXT_90);
d525 1
a525 1
    stringBuffer.append(TEXT_91);
d527 1
a527 1
    stringBuffer.append(TEXT_92);
d529 1
a529 1
    stringBuffer.append(TEXT_93);
d531 1
a531 1
    stringBuffer.append(TEXT_94);
a532 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.MoveHandle"));
d536 2
d539 1
a539 1
    stringBuffer.append(TEXT_98);
a543 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(layoutClassName);
d547 2
d550 1
a550 1
    stringBuffer.append(TEXT_102);
d552 1
a552 1
    stringBuffer.append(TEXT_103);
d554 1
a554 1
    stringBuffer.append(TEXT_104);
d556 1
a556 1
    stringBuffer.append(TEXT_105);
d561 1
a561 1
    stringBuffer.append(TEXT_106);
d563 3
a565 1
    stringBuffer.append(TEXT_107);
d567 1
a567 1
    stringBuffer.append(TEXT_108);
d580 1
a580 1
    stringBuffer.append(TEXT_109);
d582 1
a582 1
    stringBuffer.append(TEXT_110);
d584 1
a584 1
    stringBuffer.append(TEXT_111);
d586 1
a586 1
    stringBuffer.append(TEXT_112);
d588 1
a588 1
    stringBuffer.append(TEXT_113);
d590 1
a590 1
    stringBuffer.append(TEXT_114);
d592 1
a592 1
    stringBuffer.append(TEXT_115);
d594 1
a594 1
    stringBuffer.append(TEXT_116);
d596 1
a596 1
    stringBuffer.append(TEXT_117);
d602 1
a602 1
    stringBuffer.append(TEXT_118);
d604 1
a604 1
    stringBuffer.append(TEXT_119);
d609 1
a609 1
    stringBuffer.append(TEXT_120);
d611 1
a611 1
    stringBuffer.append(TEXT_121);
d613 1
a613 1
    stringBuffer.append(TEXT_122);
d615 1
a615 1
    stringBuffer.append(TEXT_123);
d619 1
a619 1
    stringBuffer.append(TEXT_124);
d625 1
a625 1
    stringBuffer.append(TEXT_125);
d628 1
a628 1
    stringBuffer.append(TEXT_126);
d630 1
a630 1
    stringBuffer.append(TEXT_127);
@


1.73
log
@Correcting attribute value.
@
text
@d116 31
a146 32
  protected final String TEXT_97 = "(part);" + NL + "\t\t\t\t// just make it look nice ";
  protected final String TEXT_98 = NL + "\t\t\t\tmoveHandle.setBorder(null);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_99 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_100 = NL + "\t\t\t";
  protected final String TEXT_101 = " layout = new ";
  protected final String TEXT_102 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_103 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_104 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_105 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_106 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_108 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_109 = ".VISUAL_ID);" + NL + "\t}";
  protected final String TEXT_110 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_111 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_112 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_113 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_114 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_115 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_116 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_117 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_118 = " childEditPart) {";
  protected final String TEXT_119 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_120 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_121 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_122 = " root = (";
  protected final String TEXT_123 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_124 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_125 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = NL + "}";
  protected final String TEXT_128 = NL;
d534 1
a534 1
    // FIXME file bug against GEF to provide overridable method in ResizableEditPolicy itself
a535 2
    }
    stringBuffer.append(TEXT_99);
d540 2
d545 1
a545 1
    stringBuffer.append(layoutClassName);
d547 1
a547 1
    } else {
d549 1
a549 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
d551 1
a551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a552 2
    }
    stringBuffer.append(TEXT_106);
d557 2
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a561 2
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_109);
d574 2
d577 1
a577 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d581 1
a581 1
    	if (hasFixedChildren) {
d583 1
a583 1
    	} else {
d585 1
a585 1
    	}
d587 2
a589 2
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a590 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_118);
d596 2
a598 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_120);
d603 2
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a609 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_124);
d613 1
a613 1
    stringBuffer.append(TEXT_125);
d619 1
a619 1
    stringBuffer.append(TEXT_126);
d622 2
a624 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_128);
@


1.72
log
@do not generate unused imports for the not resizable edit parts
@
text
@d76 1
a76 1
  protected final String TEXT_57 = NL + " \t\tfigure.setUseLocalCoordinates(\"true\");";
@


1.71
log
@#135693 Use decoration service to provide shortcut image
@
text
@a267 1
importManager.addImport("org.eclipse.draw2d.PositionConstants");
a492 1
	final String draw2dPositionConstraints = importManager.getImportedName("org.eclipse.draw2d.PositionConstants");
d512 1
a512 1
    stringBuffer.append(draw2dPositionConstraints);
d521 1
a521 1
    stringBuffer.append(draw2dPositionConstraints);
@


1.70
log
@#135015 some heuristic to provide valid default useLocalCoordinates.
@
text
@d118 30
a147 31
  protected final String TEXT_99 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_100 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_101 = NL + "\t\t\t";
  protected final String TEXT_102 = " layout = new ";
  protected final String TEXT_103 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_104 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_105 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_106 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_107 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_108 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_109 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_110 = ".VISUAL_ID);" + NL + "\t}";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_112 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_113 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_114 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_115 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_116 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_117 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_118 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_119 = " childEditPart) {";
  protected final String TEXT_120 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_121 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_122 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_123 = " root = (";
  protected final String TEXT_124 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_125 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_126 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_127 = NL;
  protected final String TEXT_128 = NL + "}";
  protected final String TEXT_129 = NL;
a266 2
importManager.addImport("org.eclipse.draw2d.BorderLayout");
importManager.addImport("org.eclipse.draw2d.Figure");
a275 2
importManager.addImport("org.eclipse.emf.ecore.EAnnotation");
importManager.addImport("org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx");
a540 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_100);
d545 2
d550 1
a550 1
    stringBuffer.append(layoutClassName);
d552 1
a552 1
    } else {
d554 1
a554 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a557 2
    }
    stringBuffer.append(TEXT_107);
d562 2
d565 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a566 2
    stringBuffer.append(importManager.getImportedName(primaryLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_110);
d579 2
d582 1
a582 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d584 1
a584 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d586 1
a586 1
    	if (hasFixedChildren) {
d588 1
a588 1
    	} else {
d590 1
a590 1
    	}
d592 2
a594 2
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a595 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_119);
d601 2
a603 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_121);
d608 2
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a614 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_125);
d618 1
a618 1
    stringBuffer.append(TEXT_126);
d624 1
a624 1
    stringBuffer.append(TEXT_127);
d627 2
a629 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_129);
@


1.69
log
@#125900 Redundant annotations added to View in generated view factory

semantic hint class name plroperty removed from the model.
@
text
@d75 74
a148 73
  protected final String TEXT_56 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_57 = ");" + NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_58 = NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_60 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_61 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_63 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_64 = ") {";
  protected final String TEXT_65 = NL + "\t\t\t((";
  protected final String TEXT_66 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_67 = "());";
  protected final String TEXT_68 = NL + "\t\t\t((";
  protected final String TEXT_69 = ") childEditPart).setLabel(new ";
  protected final String TEXT_70 = "());";
  protected final String TEXT_71 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_72 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_73 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_74 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_75 = "), getMapMode().DPtoLP(";
  protected final String TEXT_76 = "));" + NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\treturn new ";
  protected final String TEXT_78 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_79 = " createSelectionHandles() {" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_80 = " part = (";
  protected final String TEXT_81 = ") getHost();" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_82 = " list = new ";
  protected final String TEXT_83 = "();" + NL + "\t\t\t\taddMoveHandle(part, list);" + NL + "\t\t\t\t";
  protected final String TEXT_84 = NL + "\t\t\t\t";
  protected final String TEXT_85 = ".addHandle(part, list, ";
  protected final String TEXT_86 = ".";
  protected final String TEXT_87 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_88 = NL + "\t\t\t\t";
  protected final String TEXT_89 = ".addHandle(part, list, ";
  protected final String TEXT_90 = ".";
  protected final String TEXT_91 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_92 = NL + "\t\t\t\treturn list;" + NL + "\t\t\t}" + NL + "\t\t\tprivate void addMoveHandle(final ";
  protected final String TEXT_93 = " part, final ";
  protected final String TEXT_94 = " list) {" + NL + "\t\t\t\t";
  protected final String TEXT_95 = " moveHandle = new ";
  protected final String TEXT_96 = "(part);" + NL + "\t\t\t\t// just make it look nice ";
  protected final String TEXT_97 = NL + "\t\t\t\tmoveHandle.setBorder(null);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_98 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_99 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_100 = NL + "\t\t\t";
  protected final String TEXT_101 = " layout = new ";
  protected final String TEXT_102 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_103 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_104 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_105 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_106 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_107 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_108 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_109 = ".VISUAL_ID);" + NL + "\t}";
  protected final String TEXT_110 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_111 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_112 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_113 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_114 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_115 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_116 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_117 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_118 = " childEditPart) {";
  protected final String TEXT_119 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_120 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_121 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_122 = " root = (";
  protected final String TEXT_123 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_124 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_125 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = NL + "}";
  protected final String TEXT_128 = NL;
d417 1
a417 1
    stringBuffer.append(useFlowLayout ? "true" : "false");
d421 2
a423 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(figureQualifiedClassName);
d427 2
d440 1
a440 1
    stringBuffer.append(TEXT_62);
d459 1
a459 1
    stringBuffer.append(TEXT_63);
d461 1
a461 1
    stringBuffer.append(TEXT_64);
d463 1
a463 1
    stringBuffer.append(TEXT_65);
d465 1
a465 1
    stringBuffer.append(TEXT_66);
d467 1
a467 1
    stringBuffer.append(TEXT_67);
d469 1
a469 1
    stringBuffer.append(TEXT_68);
d471 1
a471 1
    stringBuffer.append(TEXT_69);
d473 1
a473 1
    stringBuffer.append(TEXT_70);
d475 1
a475 1
    stringBuffer.append(TEXT_71);
d477 1
a477 1
    stringBuffer.append(TEXT_72);
d482 1
a482 1
    stringBuffer.append(TEXT_73);
d492 1
a492 1
    stringBuffer.append(TEXT_74);
d494 1
a494 1
    stringBuffer.append(TEXT_75);
d496 1
a496 1
    stringBuffer.append(TEXT_76);
d501 1
a501 1
    stringBuffer.append(TEXT_77);
d503 1
a503 1
    stringBuffer.append(TEXT_78);
a504 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d508 2
d511 1
a511 1
    stringBuffer.append(TEXT_82);
d513 1
a513 1
    stringBuffer.append(TEXT_83);
d516 1
a516 1
    stringBuffer.append(TEXT_84);
d518 1
a518 1
    stringBuffer.append(TEXT_85);
d520 1
a520 1
    stringBuffer.append(TEXT_86);
d522 1
a522 1
    stringBuffer.append(TEXT_87);
d525 1
a525 1
    stringBuffer.append(TEXT_88);
d527 1
a527 1
    stringBuffer.append(TEXT_89);
d529 1
a529 1
    stringBuffer.append(TEXT_90);
d531 1
a531 1
    stringBuffer.append(TEXT_91);
d533 1
a533 1
    stringBuffer.append(TEXT_92);
d535 1
a535 1
    stringBuffer.append(TEXT_93);
a536 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.MoveHandle"));
d540 2
d543 1
a543 1
    stringBuffer.append(TEXT_97);
d545 1
a545 1
    stringBuffer.append(TEXT_98);
d547 1
a547 1
    stringBuffer.append(TEXT_99);
a551 2
    stringBuffer.append(TEXT_100);
    stringBuffer.append(layoutClassName);
d555 2
d558 1
a558 1
    stringBuffer.append(TEXT_103);
d560 1
a560 1
    stringBuffer.append(TEXT_104);
d562 1
a562 1
    stringBuffer.append(TEXT_105);
d564 1
a564 1
    stringBuffer.append(TEXT_106);
d569 1
a569 1
    stringBuffer.append(TEXT_107);
d571 1
a571 1
    stringBuffer.append(TEXT_108);
d573 1
a573 1
    stringBuffer.append(TEXT_109);
d586 1
a586 1
    stringBuffer.append(TEXT_110);
d588 1
a588 1
    stringBuffer.append(TEXT_111);
d590 1
a590 1
    stringBuffer.append(TEXT_112);
d592 1
a592 1
    stringBuffer.append(TEXT_113);
d594 1
a594 1
    stringBuffer.append(TEXT_114);
d596 1
a596 1
    stringBuffer.append(TEXT_115);
d598 1
a598 1
    stringBuffer.append(TEXT_116);
d600 1
a600 1
    stringBuffer.append(TEXT_117);
d602 1
a602 1
    stringBuffer.append(TEXT_118);
d608 1
a608 1
    stringBuffer.append(TEXT_119);
d610 1
a610 1
    stringBuffer.append(TEXT_120);
a614 2
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d618 2
d621 1
a621 1
    stringBuffer.append(TEXT_124);
d625 1
a625 1
    stringBuffer.append(TEXT_125);
d631 1
a631 1
    stringBuffer.append(TEXT_126);
d634 1
a634 1
    stringBuffer.append(TEXT_127);
d636 1
a636 1
    stringBuffer.append(TEXT_128);
@


1.68
log
@#135694 remove temporary code
@
text
@d24 1
a24 1
  protected final String TEXT_5 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;";
d63 85
a147 84
  protected final String TEXT_44 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ITextAwareEditPart) {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_45 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_46 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_47 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_48 = "()";
  protected final String TEXT_49 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_50 = ";";
  protected final String TEXT_51 = NL + "\t\treturn ";
  protected final String TEXT_52 = ";";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = " figure = new ";
  protected final String TEXT_55 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_56 = ");" + NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_57 = NL + "\t}";
  protected final String TEXT_58 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_59 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_60 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_62 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_63 = ") {";
  protected final String TEXT_64 = NL + "\t\t\t((";
  protected final String TEXT_65 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_66 = "());";
  protected final String TEXT_67 = NL + "\t\t\t((";
  protected final String TEXT_68 = ") childEditPart).setLabel(new ";
  protected final String TEXT_69 = "());";
  protected final String TEXT_70 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_71 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_72 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_73 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_74 = "), getMapMode().DPtoLP(";
  protected final String TEXT_75 = "));" + NL + "\t}";
  protected final String TEXT_76 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\treturn new ";
  protected final String TEXT_77 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_78 = " createSelectionHandles() {" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_79 = " part = (";
  protected final String TEXT_80 = ") getHost();" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_81 = " list = new ";
  protected final String TEXT_82 = "();" + NL + "\t\t\t\taddMoveHandle(part, list);" + NL + "\t\t\t\t";
  protected final String TEXT_83 = NL + "\t\t\t\t";
  protected final String TEXT_84 = ".addHandle(part, list, ";
  protected final String TEXT_85 = ".";
  protected final String TEXT_86 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_87 = NL + "\t\t\t\t";
  protected final String TEXT_88 = ".addHandle(part, list, ";
  protected final String TEXT_89 = ".";
  protected final String TEXT_90 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_91 = NL + "\t\t\t\treturn list;" + NL + "\t\t\t}" + NL + "\t\t\tprivate void addMoveHandle(final ";
  protected final String TEXT_92 = " part, final ";
  protected final String TEXT_93 = " list) {" + NL + "\t\t\t\t";
  protected final String TEXT_94 = " moveHandle = new ";
  protected final String TEXT_95 = "(part);" + NL + "\t\t\t\t// just make it look nice ";
  protected final String TEXT_96 = NL + "\t\t\t\tmoveHandle.setBorder(null);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_97 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_98 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_99 = NL + "\t\t\t";
  protected final String TEXT_100 = " layout = new ";
  protected final String TEXT_101 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_102 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_103 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_104 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_105 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_106 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_107 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_108 = ".VISUAL_ID);" + NL + "\t}";
  protected final String TEXT_109 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_110 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_111 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_112 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_113 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_114 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_115 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_116 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_117 = " childEditPart) {";
  protected final String TEXT_118 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_119 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_120 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_121 = " root = (";
  protected final String TEXT_122 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_123 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_124 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_125 = NL;
  protected final String TEXT_126 = NL + "}";
  protected final String TEXT_127 = NL;
d379 2
d382 1
a382 1
    stringBuffer.append(TEXT_45);
d384 1
a384 1
    stringBuffer.append(TEXT_46);
d395 1
a395 1
    stringBuffer.append(TEXT_47);
d397 1
a397 1
    stringBuffer.append(TEXT_48);
d399 1
a399 1
    stringBuffer.append(TEXT_49);
d401 1
a401 1
    stringBuffer.append(TEXT_50);
d404 1
a404 1
    stringBuffer.append(TEXT_51);
d406 1
a406 1
    stringBuffer.append(TEXT_52);
a410 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(figureQualifiedClassName);
d414 2
d417 1
a417 1
    stringBuffer.append(TEXT_56);
d419 1
a419 1
    stringBuffer.append(TEXT_57);
a420 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(figureQualifiedClassName);
d424 2
d437 1
a437 1
    stringBuffer.append(TEXT_61);
d456 1
a456 1
    stringBuffer.append(TEXT_62);
d458 1
a458 1
    stringBuffer.append(TEXT_63);
d460 1
a460 1
    stringBuffer.append(TEXT_64);
d462 1
a462 1
    stringBuffer.append(TEXT_65);
d464 1
a464 1
    stringBuffer.append(TEXT_66);
d466 1
a466 1
    stringBuffer.append(TEXT_67);
d468 1
a468 1
    stringBuffer.append(TEXT_68);
d470 1
a470 1
    stringBuffer.append(TEXT_69);
d472 1
a472 1
    stringBuffer.append(TEXT_70);
d474 1
a474 1
    stringBuffer.append(TEXT_71);
d479 1
a479 1
    stringBuffer.append(TEXT_72);
d489 1
a489 1
    stringBuffer.append(TEXT_73);
d491 1
a491 1
    stringBuffer.append(TEXT_74);
d493 1
a493 1
    stringBuffer.append(TEXT_75);
d498 1
a498 1
    stringBuffer.append(TEXT_76);
d500 1
a500 1
    stringBuffer.append(TEXT_77);
a501 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d505 2
d508 1
a508 1
    stringBuffer.append(TEXT_81);
d510 1
a510 1
    stringBuffer.append(TEXT_82);
d513 1
a513 1
    stringBuffer.append(TEXT_83);
d515 1
a515 1
    stringBuffer.append(TEXT_84);
d517 1
a517 1
    stringBuffer.append(TEXT_85);
d519 1
a519 1
    stringBuffer.append(TEXT_86);
d522 1
a522 1
    stringBuffer.append(TEXT_87);
d524 1
a524 1
    stringBuffer.append(TEXT_88);
d526 1
a526 1
    stringBuffer.append(TEXT_89);
d528 1
a528 1
    stringBuffer.append(TEXT_90);
d530 1
a530 1
    stringBuffer.append(TEXT_91);
d532 1
a532 1
    stringBuffer.append(TEXT_92);
a533 2
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.handles.MoveHandle"));
d537 2
d540 1
a540 1
    stringBuffer.append(TEXT_96);
d542 1
a542 1
    stringBuffer.append(TEXT_97);
d544 1
a544 1
    stringBuffer.append(TEXT_98);
a548 2
    stringBuffer.append(TEXT_99);
    stringBuffer.append(layoutClassName);
d552 2
d555 1
a555 1
    stringBuffer.append(TEXT_102);
d557 1
a557 1
    stringBuffer.append(TEXT_103);
d559 1
a559 1
    stringBuffer.append(TEXT_104);
d561 1
a561 1
    stringBuffer.append(TEXT_105);
d566 1
a566 1
    stringBuffer.append(TEXT_106);
d568 1
a568 1
    stringBuffer.append(TEXT_107);
d570 1
a570 1
    stringBuffer.append(TEXT_108);
d583 1
a583 1
    stringBuffer.append(TEXT_109);
d585 1
a585 1
    stringBuffer.append(TEXT_110);
d587 1
a587 1
    stringBuffer.append(TEXT_111);
d589 1
a589 1
    stringBuffer.append(TEXT_112);
d591 1
a591 1
    stringBuffer.append(TEXT_113);
d593 1
a593 1
    stringBuffer.append(TEXT_114);
d595 1
a595 1
    stringBuffer.append(TEXT_115);
d597 1
a597 1
    stringBuffer.append(TEXT_116);
d599 1
a599 1
    stringBuffer.append(TEXT_117);
d605 1
a605 1
    stringBuffer.append(TEXT_118);
d607 1
a607 1
    stringBuffer.append(TEXT_119);
a611 2
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d615 2
d618 1
a618 1
    stringBuffer.append(TEXT_123);
d622 1
a622 1
    stringBuffer.append(TEXT_124);
d628 1
a628 1
    stringBuffer.append(TEXT_125);
d631 1
a631 1
    stringBuffer.append(TEXT_126);
d633 1
a633 1
    stringBuffer.append(TEXT_127);
@


1.67
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d24 1
a24 1
  protected final String TEXT_5 = ";" + NL;
@


1.66
log
@using M6 to generate code.
@
text
@d26 26
a51 26
  protected final String TEXT_7 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure primaryShape;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_9 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_10 = "()";
  protected final String TEXT_11 = NL + "\t\t{" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_12 = " getCommand(";
  protected final String TEXT_13 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_14 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_15 = " adapter =" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_16 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_17 = " type =" + NL + "\t\t\t\t\t\t\t(";
  protected final String TEXT_18 = ") adapter.getAdapter(";
  protected final String TEXT_19 = ".class);";
  protected final String TEXT_20 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_21 = ".";
  protected final String TEXT_22 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_23 = " compartmentEditPart =" + NL + "\t\t\t\t\t\t\t\tgetChildBySemanticHint(";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = "Compartments.";
  protected final String TEXT_26 = ");" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_28 = NL + "\t\t);";
  protected final String TEXT_29 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_30 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_31 = "());";
  protected final String TEXT_32 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
d53 1
a53 1
  protected final String TEXT_34 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d55 14
a68 14
  protected final String TEXT_36 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_37 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_38 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_39 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_40 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_41 = "() {" + NL + "" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_42 = " child) {" + NL + "\t\t\t\tif (child.getEditPolicy(EditPolicy.PRIMARY_DRAG_ROLE) == null) {" + NL + "\t\t\t\t\tif (child instanceof ITextAwareEditPart) {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_43 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.createChildEditPolicy(child);" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_44 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_45 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_46 = "()";
  protected final String TEXT_47 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_48 = ";";
  protected final String TEXT_49 = NL + "\t\treturn ";
d70 58
a127 58
  protected final String TEXT_51 = NL + "\t\t";
  protected final String TEXT_52 = " figure = new ";
  protected final String TEXT_53 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_54 = ");" + NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_55 = NL + "\t}";
  protected final String TEXT_56 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_57 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_58 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean addFixedChild(EditPart childEditPart) {";
  protected final String TEXT_60 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_61 = ") {";
  protected final String TEXT_62 = NL + "\t\t\t((";
  protected final String TEXT_63 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_64 = "());";
  protected final String TEXT_65 = NL + "\t\t\t((";
  protected final String TEXT_66 = ") childEditPart).setLabel(new ";
  protected final String TEXT_67 = "());";
  protected final String TEXT_68 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_69 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_71 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_72 = "), getMapMode().DPtoLP(";
  protected final String TEXT_73 = "));" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPolicy getPrimaryDragEditPolicy() {" + NL + "\t\treturn new ";
  protected final String TEXT_75 = "() {" + NL + "\t\t\tprotected ";
  protected final String TEXT_76 = " createSelectionHandles() {" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_77 = " part = (";
  protected final String TEXT_78 = ") getHost();" + NL + "\t\t\t\tfinal ";
  protected final String TEXT_79 = " list = new ";
  protected final String TEXT_80 = "();" + NL + "\t\t\t\taddMoveHandle(part, list);" + NL + "\t\t\t\t";
  protected final String TEXT_81 = NL + "\t\t\t\t";
  protected final String TEXT_82 = ".addHandle(part, list, ";
  protected final String TEXT_83 = ".";
  protected final String TEXT_84 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_85 = NL + "\t\t\t\t";
  protected final String TEXT_86 = ".addHandle(part, list, ";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = ");" + NL + "\t\t\t\t";
  protected final String TEXT_89 = NL + "\t\t\t\treturn list;" + NL + "\t\t\t}" + NL + "\t\t\tprivate void addMoveHandle(final ";
  protected final String TEXT_90 = " part, final ";
  protected final String TEXT_91 = " list) {" + NL + "\t\t\t\t";
  protected final String TEXT_92 = " moveHandle = new ";
  protected final String TEXT_93 = "(part);" + NL + "\t\t\t\t// just make it look nice ";
  protected final String TEXT_94 = NL + "\t\t\t\tmoveHandle.setBorder(null);" + NL + "\t\t\t\tlist.add(moveHandle);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_95 = NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_96 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_97 = NL + "\t\t\t";
  protected final String TEXT_98 = " layout = new ";
  protected final String TEXT_99 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_100 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_101 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_102 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_103 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_104 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_105 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_106 = ".";
  protected final String TEXT_107 = "Labels.";
  protected final String TEXT_108 = ");" + NL + "\t}";
d287 8
d296 1
a296 1
    stringBuffer.append(TEXT_8);
d305 1
a305 1
    stringBuffer.append(TEXT_9);
d307 1
a307 1
    stringBuffer.append(TEXT_10);
d309 1
a309 1
    stringBuffer.append(TEXT_11);
d311 1
a311 1
    stringBuffer.append(TEXT_12);
d313 1
a313 1
    stringBuffer.append(TEXT_13);
d315 1
a315 1
    stringBuffer.append(TEXT_14);
d317 1
a317 1
    stringBuffer.append(TEXT_15);
d319 1
a319 1
    stringBuffer.append(TEXT_16);
d321 1
a321 1
    stringBuffer.append(TEXT_17);
d323 1
a323 1
    stringBuffer.append(TEXT_18);
d325 1
a325 1
    stringBuffer.append(TEXT_19);
d333 1
a333 1
    stringBuffer.append(TEXT_20);
d335 1
a335 1
    stringBuffer.append(TEXT_21);
d337 1
a337 1
    stringBuffer.append(TEXT_22);
d339 3
a341 7
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(compartment.getSemanticHintFieldName());
    stringBuffer.append(TEXT_26);
d347 1
a347 1
    stringBuffer.append(TEXT_27);
d349 1
a349 1
    stringBuffer.append(TEXT_28);
d351 1
a351 1
    stringBuffer.append(TEXT_29);
d353 1
a353 1
    stringBuffer.append(TEXT_30);
d355 1
a355 1
    stringBuffer.append(TEXT_31);
d357 1
a357 1
    stringBuffer.append(TEXT_32);
d359 1
a359 1
    stringBuffer.append(TEXT_33);
d361 1
a361 1
    stringBuffer.append(TEXT_34);
d363 1
a363 1
    stringBuffer.append(TEXT_35);
d365 1
a365 1
    stringBuffer.append(TEXT_36);
d367 1
a367 1
    stringBuffer.append(TEXT_37);
d369 1
a369 1
    stringBuffer.append(TEXT_38);
d371 1
a371 1
    stringBuffer.append(TEXT_39);
d373 1
a373 1
    stringBuffer.append(TEXT_40);
d375 1
a375 1
    stringBuffer.append(TEXT_41);
d377 1
a377 1
    stringBuffer.append(TEXT_42);
d379 1
a379 1
    stringBuffer.append(TEXT_43);
d381 1
a381 1
    stringBuffer.append(TEXT_44);
d392 1
a392 1
    stringBuffer.append(TEXT_45);
d394 1
a394 1
    stringBuffer.append(TEXT_46);
d396 1
a396 1
    stringBuffer.append(TEXT_47);
d398 1
a398 1
    stringBuffer.append(TEXT_48);
d401 1
a401 1
    stringBuffer.append(TEXT_49);
d403 1
a403 1
    stringBuffer.append(TEXT_50);
d408 1
a408 1
    stringBuffer.append(TEXT_51);
d410 1
a410 1
    stringBuffer.append(TEXT_52);
d412 1
a412 1
    stringBuffer.append(TEXT_53);
d414 1
a414 1
    stringBuffer.append(TEXT_54);
d416 1
a416 1
    stringBuffer.append(TEXT_55);
d418 1
a418 1
    stringBuffer.append(TEXT_56);
d420 1
a420 1
    stringBuffer.append(TEXT_57);
d422 1
a422 1
    stringBuffer.append(TEXT_58);
d434 1
a434 1
    stringBuffer.append(TEXT_59);
d453 1
a453 1
    stringBuffer.append(TEXT_60);
d455 1
a455 1
    stringBuffer.append(TEXT_61);
d457 1
a457 1
    stringBuffer.append(TEXT_62);
d459 1
a459 1
    stringBuffer.append(TEXT_63);
d461 1
a461 1
    stringBuffer.append(TEXT_64);
d463 1
a463 1
    stringBuffer.append(TEXT_65);
d465 1
a465 1
    stringBuffer.append(TEXT_66);
d467 1
a467 1
    stringBuffer.append(TEXT_67);
d469 1
a469 1
    stringBuffer.append(TEXT_68);
d471 1
a471 1
    stringBuffer.append(TEXT_69);
d476 1
a476 1
    stringBuffer.append(TEXT_70);
d486 1
a486 1
    stringBuffer.append(TEXT_71);
d488 1
a488 1
    stringBuffer.append(TEXT_72);
d490 1
a490 1
    stringBuffer.append(TEXT_73);
d495 1
a495 1
    stringBuffer.append(TEXT_74);
d497 1
a497 1
    stringBuffer.append(TEXT_75);
d499 1
a499 1
    stringBuffer.append(TEXT_76);
d501 1
a501 1
    stringBuffer.append(TEXT_77);
d503 1
a503 1
    stringBuffer.append(TEXT_78);
d505 1
a505 1
    stringBuffer.append(TEXT_79);
d507 1
a507 1
    stringBuffer.append(TEXT_80);
d510 1
a510 1
    stringBuffer.append(TEXT_81);
d512 1
a512 1
    stringBuffer.append(TEXT_82);
d514 1
a514 1
    stringBuffer.append(TEXT_83);
d516 1
a516 1
    stringBuffer.append(TEXT_84);
d519 1
a519 1
    stringBuffer.append(TEXT_85);
d521 1
a521 1
    stringBuffer.append(TEXT_86);
d523 1
a523 1
    stringBuffer.append(TEXT_87);
d525 1
a525 1
    stringBuffer.append(TEXT_88);
d527 1
a527 1
    stringBuffer.append(TEXT_89);
d529 1
a529 1
    stringBuffer.append(TEXT_90);
d531 1
a531 1
    stringBuffer.append(TEXT_91);
d533 1
a533 1
    stringBuffer.append(TEXT_92);
d535 1
a535 1
    stringBuffer.append(TEXT_93);
d537 1
a537 1
    stringBuffer.append(TEXT_94);
d539 1
a539 1
    stringBuffer.append(TEXT_95);
d541 1
a541 1
    stringBuffer.append(TEXT_96);
d546 1
a546 1
    stringBuffer.append(TEXT_97);
d548 1
a548 1
    stringBuffer.append(TEXT_98);
d550 1
a550 1
    stringBuffer.append(TEXT_99);
d552 1
a552 1
    stringBuffer.append(TEXT_100);
d554 1
a554 1
    stringBuffer.append(TEXT_101);
d556 1
a556 1
    stringBuffer.append(TEXT_102);
d558 1
a558 1
    stringBuffer.append(TEXT_103);
a561 2
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
	String labelName = primaryLabel.getSemanticHintFieldName();
d563 1
a563 1
    stringBuffer.append(TEXT_104);
a564 4
    stringBuffer.append(TEXT_105);
    stringBuffer.append(semanticHintsClassName);
    stringBuffer.append(TEXT_106);
    stringBuffer.append(genNode.getUniqueIdentifier());
d566 1
a566 1
    stringBuffer.append(labelName);
@


1.65
log
@restore generators
@
text
@d246 1
a246 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.64
log
@#134095 do not store compiled templates in cvs
@
text
@d246 1
a246 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.63
log
@Switching to eclipse M6.
@
text
@@


1.62
log
@#114061 Support shape with fixed horizontal/vertical size. First, 'resize' part of the request was covered.
Obsolete ShapeAttributes class was deleted, same attributes should be set in gmfgraph now.
@
text
@d246 1
a246 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.61
log
@Class names of Figures generated as inner classes may clash with well-known classes, thus we have to make sure we avoid that
@
text
@d92 55
a146 33
  protected final String TEXT_73 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_74 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_75 = NL + "\t\t\t";
  protected final String TEXT_76 = " layout = new ";
  protected final String TEXT_77 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_78 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_79 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_80 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_81 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_82 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_83 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_84 = ".";
  protected final String TEXT_85 = "Labels.";
  protected final String TEXT_86 = ");" + NL + "\t}";
  protected final String TEXT_87 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_88 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_89 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {";
  protected final String TEXT_90 = NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}";
  protected final String TEXT_91 = NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);";
  protected final String TEXT_92 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_93 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_94 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_95 = " childEditPart) {";
  protected final String TEXT_96 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_97 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_98 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_99 = " root = (";
  protected final String TEXT_100 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_101 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_102 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_103 = NL;
  protected final String TEXT_104 = NL + "}";
  protected final String TEXT_105 = NL;
d487 49
d537 1
a537 1
    stringBuffer.append(TEXT_74);
d542 1
a542 1
    stringBuffer.append(TEXT_75);
d544 1
a544 1
    stringBuffer.append(TEXT_76);
d546 1
a546 1
    stringBuffer.append(TEXT_77);
d548 1
a548 1
    stringBuffer.append(TEXT_78);
d550 1
a550 1
    stringBuffer.append(TEXT_79);
d552 1
a552 1
    stringBuffer.append(TEXT_80);
d554 1
a554 1
    stringBuffer.append(TEXT_81);
d561 1
a561 1
    stringBuffer.append(TEXT_82);
d563 1
a563 1
    stringBuffer.append(TEXT_83);
d565 1
a565 1
    stringBuffer.append(TEXT_84);
d567 1
a567 1
    stringBuffer.append(TEXT_85);
d569 1
a569 1
    stringBuffer.append(TEXT_86);
d582 1
a582 1
    stringBuffer.append(TEXT_87);
d584 1
a584 1
    stringBuffer.append(TEXT_88);
d586 1
a586 1
    stringBuffer.append(TEXT_89);
d588 1
a588 1
    stringBuffer.append(TEXT_90);
d590 1
a590 1
    stringBuffer.append(TEXT_91);
d592 1
a592 1
    stringBuffer.append(TEXT_92);
d594 1
a594 1
    stringBuffer.append(TEXT_93);
d596 1
a596 1
    stringBuffer.append(TEXT_94);
d598 1
a598 1
    stringBuffer.append(TEXT_95);
d604 1
a604 1
    stringBuffer.append(TEXT_96);
d606 1
a606 1
    stringBuffer.append(TEXT_97);
d611 1
a611 1
    stringBuffer.append(TEXT_98);
d613 1
a613 1
    stringBuffer.append(TEXT_99);
d615 1
a615 1
    stringBuffer.append(TEXT_100);
d617 1
a617 1
    stringBuffer.append(TEXT_101);
d621 1
a621 1
    stringBuffer.append(TEXT_102);
d627 1
a627 1
    stringBuffer.append(TEXT_103);
d630 1
a630 1
    stringBuffer.append(TEXT_104);
d632 1
a632 1
    stringBuffer.append(TEXT_105);
@


1.60
log
@expand compartments
@
text
@d257 3
@


1.59
log
@do not generate accessors for the ext node labels
@
text
@d466 1
a466 1
	String layoutClassName = importManager.getImportedName("org.eclipse.draw2d.ToolbarLayout");
@


1.58
log
@remove label cast
@
text
@d107 18
a124 19
  protected final String TEXT_88 = " childEditPart, int index) {";
  protected final String TEXT_89 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\taddFixedChild(childEditPart);" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_90 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_92 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}";
  protected final String TEXT_93 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_94 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_95 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_96 = " childEditPart) {";
  protected final String TEXT_97 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_98 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_99 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_100 = " root = (";
  protected final String TEXT_101 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_102 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_103 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_104 = NL;
  protected final String TEXT_105 = NL + "}";
  protected final String TEXT_106 = NL;
d395 8
a402 1
	if (!genNode.getLabels().isEmpty()) {
d407 1
a407 1
		for (Iterator it = genNode.getLabels().iterator(); it.hasNext(); ) {
d511 2
a513 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d519 1
a519 1
    	}
d521 2
a523 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a524 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_96);
d530 2
a532 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_98);
d537 2
d542 1
a542 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a543 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_102);
d547 1
a547 1
    stringBuffer.append(TEXT_103);
d553 1
a553 1
    stringBuffer.append(TEXT_104);
d556 2
a558 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_106);
@


1.57
log
@fix external node labels
@
text
@d82 44
a125 45
  protected final String TEXT_63 = ") childEditPart).setLabel(" + NL + "\t\t\t\t(";
  protected final String TEXT_64 = ") getPrimaryShape().getFigure";
  protected final String TEXT_65 = "());";
  protected final String TEXT_66 = NL + "\t\t\t((";
  protected final String TEXT_67 = ") childEditPart).setLabel(new ";
  protected final String TEXT_68 = "());";
  protected final String TEXT_69 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_72 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_73 = "), getMapMode().DPtoLP(";
  protected final String TEXT_74 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_75 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_76 = NL + "\t\t\t";
  protected final String TEXT_77 = " layout = new ";
  protected final String TEXT_78 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_79 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_80 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_81 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_82 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_84 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_85 = ".";
  protected final String TEXT_86 = "Labels.";
  protected final String TEXT_87 = ");" + NL + "\t}";
  protected final String TEXT_88 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_89 = " childEditPart, int index) {";
  protected final String TEXT_90 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\taddFixedChild(childEditPart);" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_91 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_92 = NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_93 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_95 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_96 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_97 = " childEditPart) {";
  protected final String TEXT_98 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_99 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_100 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_101 = " root = (";
  protected final String TEXT_102 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_103 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_104 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (!addFixedChild(childEditPart)) {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_105 = NL;
  protected final String TEXT_106 = NL + "}";
  protected final String TEXT_107 = NL;
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
d427 1
a427 1
    stringBuffer.append(labelFigureClassName);
d429 1
a429 1
    			} else {
d431 1
a431 1
    stringBuffer.append(labelEditPart);
d433 1
a433 1
    stringBuffer.append(labelFigureClassName);
d435 1
a435 1
    			}
a436 2
    		}
    stringBuffer.append(TEXT_70);
d441 1
a441 1
    stringBuffer.append(TEXT_71);
d451 2
d454 1
a454 1
    stringBuffer.append(width);
d456 1
a456 1
    stringBuffer.append(height);
a457 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_75);
d462 2
d467 1
a467 1
    stringBuffer.append(layoutClassName);
d469 1
a469 1
    } else {
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a474 2
    }
    stringBuffer.append(TEXT_82);
d481 2
d484 1
a484 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d486 1
a486 1
    stringBuffer.append(semanticHintsClassName);
d488 1
a488 1
    stringBuffer.append(genNode.getUniqueIdentifier());
a489 2
    stringBuffer.append(labelName);
    stringBuffer.append(TEXT_87);
d502 2
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d507 1
a507 1
    	if (hasFixedChildren) {
d509 2
a511 2
    stringBuffer.append(TEXT_91);
    	} else {
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d515 1
a515 1
    	}
d517 2
a519 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a520 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_97);
d526 2
a528 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_99);
d533 2
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a539 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_103);
d543 1
a543 1
    stringBuffer.append(TEXT_104);
d549 1
a549 1
    stringBuffer.append(TEXT_105);
d552 2
a554 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_107);
@


1.56
log
@do not readd labels
@
text
@d78 1
a78 1
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {";
d88 2
a89 2
  protected final String TEXT_69 = NL + "\t\t\treturn;" + NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t}";
d108 19
a126 14
  protected final String TEXT_89 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_90 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_91 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_92 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_93 = " childEditPart) {";
  protected final String TEXT_94 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_96 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_97 = " root = (";
  protected final String TEXT_98 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_99 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = NL + "}";
  protected final String TEXT_102 = NL;
d356 1
d396 4
a399 1
    	if (!genNode.getLabels().isEmpty()) {
d422 1
a422 1
    if (isAccessor) {
d430 1
a430 1
    } else {
d436 1
a436 1
    }
d508 2
d511 7
a517 1
    stringBuffer.append(TEXT_90);
d519 1
a519 1
    stringBuffer.append(TEXT_91);
d521 1
a521 1
    stringBuffer.append(TEXT_92);
d523 1
a523 1
    stringBuffer.append(TEXT_93);
d529 1
a529 1
    stringBuffer.append(TEXT_94);
d531 1
a531 1
    stringBuffer.append(TEXT_95);
d536 1
a536 1
    stringBuffer.append(TEXT_96);
d538 1
a538 1
    stringBuffer.append(TEXT_97);
d540 1
a540 1
    stringBuffer.append(TEXT_98);
d542 5
a546 1
    stringBuffer.append(TEXT_99);
d548 1
d552 1
a552 1
    stringBuffer.append(TEXT_100);
d555 1
a555 1
    stringBuffer.append(TEXT_101);
d557 1
a557 1
    stringBuffer.append(TEXT_102);
@


1.55
log
@provide custom text selection edit policy
@
text
@d88 1
a88 1
  protected final String TEXT_69 = NL + "\t\t}";
@


1.54
log
@show selection; update default text
@
text
@d56 1
a56 1
  protected final String TEXT_37 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
d59 22
a80 22
  protected final String TEXT_40 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_41 = NL + "\t\treturn primaryShape = new ";
  protected final String TEXT_42 = "()";
  protected final String TEXT_43 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_44 = ";";
  protected final String TEXT_45 = NL + "\t\treturn ";
  protected final String TEXT_46 = ";";
  protected final String TEXT_47 = NL + "\t\t";
  protected final String TEXT_48 = " figure = new ";
  protected final String TEXT_49 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_50 = ");" + NL + " \t\treturn primaryShape = figure;";
  protected final String TEXT_51 = NL + "\t}";
  protected final String TEXT_52 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_53 = " getPrimaryShape() {" + NL + "\t\treturn (";
  protected final String TEXT_54 = ") primaryShape;" + NL + "\t}";
  protected final String TEXT_55 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {";
  protected final String TEXT_56 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_57 = ") {";
  protected final String TEXT_58 = NL + "\t\t\t((";
  protected final String TEXT_59 = ") childEditPart).setLabel(" + NL + "\t\t\t\t(";
  protected final String TEXT_60 = ") getPrimaryShape().getFigure";
  protected final String TEXT_61 = "());";
d82 40
a121 36
  protected final String TEXT_63 = ") childEditPart).setLabel(new ";
  protected final String TEXT_64 = "());";
  protected final String TEXT_65 = NL + "\t\t}";
  protected final String TEXT_66 = NL + "\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_68 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_69 = "), getMapMode().DPtoLP(";
  protected final String TEXT_70 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_71 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_72 = NL + "\t\t\t";
  protected final String TEXT_73 = " layout = new ";
  protected final String TEXT_74 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_75 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_76 = "() {" + NL + "" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_77 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_78 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_80 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_81 = ".";
  protected final String TEXT_82 = "Labels.";
  protected final String TEXT_83 = ");" + NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_85 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_86 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_87 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_88 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_89 = " childEditPart) {";
  protected final String TEXT_90 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_92 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_93 = " root = (";
  protected final String TEXT_94 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_95 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = NL + "}";
  protected final String TEXT_98 = NL;
d255 1
d340 8
d349 1
a349 1
    stringBuffer.append(TEXT_40);
d359 1
a359 1
    stringBuffer.append(TEXT_41);
d361 1
a361 1
    stringBuffer.append(TEXT_42);
d363 1
a363 1
    stringBuffer.append(TEXT_43);
d365 1
a365 1
    stringBuffer.append(TEXT_44);
d368 1
a368 1
    stringBuffer.append(TEXT_45);
d370 1
a370 1
    stringBuffer.append(TEXT_46);
d375 1
a375 1
    stringBuffer.append(TEXT_47);
d377 1
a377 1
    stringBuffer.append(TEXT_48);
d379 1
a379 1
    stringBuffer.append(TEXT_49);
d381 1
a381 1
    stringBuffer.append(TEXT_50);
d383 1
a383 1
    stringBuffer.append(TEXT_51);
d385 1
a385 1
    stringBuffer.append(TEXT_52);
d387 1
a387 1
    stringBuffer.append(TEXT_53);
d389 1
a389 1
    stringBuffer.append(TEXT_54);
d391 1
a391 1
    stringBuffer.append(TEXT_55);
d410 1
a410 1
    stringBuffer.append(TEXT_56);
d412 1
a412 1
    stringBuffer.append(TEXT_57);
d414 1
a414 1
    stringBuffer.append(TEXT_58);
d416 1
a416 1
    stringBuffer.append(TEXT_59);
d418 1
a418 1
    stringBuffer.append(TEXT_60);
d420 1
a420 1
    stringBuffer.append(TEXT_61);
d422 1
a422 1
    stringBuffer.append(TEXT_62);
d424 1
a424 1
    stringBuffer.append(TEXT_63);
d426 1
a426 1
    stringBuffer.append(TEXT_64);
d428 1
a428 1
    stringBuffer.append(TEXT_65);
d430 1
a430 1
    stringBuffer.append(TEXT_66);
d435 1
a435 1
    stringBuffer.append(TEXT_67);
d445 1
a445 1
    stringBuffer.append(TEXT_68);
d447 1
a447 1
    stringBuffer.append(TEXT_69);
d449 1
a449 1
    stringBuffer.append(TEXT_70);
d451 1
a451 1
    stringBuffer.append(TEXT_71);
d456 1
a456 1
    stringBuffer.append(TEXT_72);
d458 1
a458 1
    stringBuffer.append(TEXT_73);
d460 1
a460 1
    stringBuffer.append(TEXT_74);
d462 1
a462 1
    stringBuffer.append(TEXT_75);
d464 1
a464 1
    stringBuffer.append(TEXT_76);
d466 1
a466 1
    stringBuffer.append(TEXT_77);
d468 1
a468 1
    stringBuffer.append(TEXT_78);
d475 1
a475 1
    stringBuffer.append(TEXT_79);
d477 1
a477 1
    stringBuffer.append(TEXT_80);
d479 1
a479 1
    stringBuffer.append(TEXT_81);
d481 1
a481 1
    stringBuffer.append(TEXT_82);
d483 1
a483 1
    stringBuffer.append(TEXT_83);
d496 1
a496 1
    stringBuffer.append(TEXT_84);
d498 1
a498 1
    stringBuffer.append(TEXT_85);
d500 1
a500 1
    stringBuffer.append(TEXT_86);
d502 1
a502 1
    stringBuffer.append(TEXT_87);
d504 1
a504 1
    stringBuffer.append(TEXT_88);
d506 1
a506 1
    stringBuffer.append(TEXT_89);
d512 1
a512 1
    stringBuffer.append(TEXT_90);
d514 1
a514 1
    stringBuffer.append(TEXT_91);
d519 1
a519 1
    stringBuffer.append(TEXT_92);
d521 1
a521 1
    stringBuffer.append(TEXT_93);
d523 1
a523 1
    stringBuffer.append(TEXT_94);
d525 1
a525 1
    stringBuffer.append(TEXT_95);
d530 1
a530 1
    stringBuffer.append(TEXT_96);
d533 1
a533 1
    stringBuffer.append(TEXT_97);
d535 1
a535 1
    stringBuffer.append(TEXT_98);
@


1.53
log
@simplified hierarchy of figures
@
text
@d34 1
a34 1
  protected final String TEXT_15 = " adapter = ((";
d36 1
a36 1
  protected final String TEXT_17 = " type = (";
d42 1
a42 1
  protected final String TEXT_23 = " compartmentEditPart = getChildBySemanticHint(";
d78 40
a117 39
  protected final String TEXT_59 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_60 = "());";
  protected final String TEXT_61 = NL + "\t\t\t((";
  protected final String TEXT_62 = ") childEditPart).setLabel(new ";
  protected final String TEXT_63 = "());";
  protected final String TEXT_64 = NL + "\t\t}";
  protected final String TEXT_65 = NL + "\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_67 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_68 = "), getMapMode().DPtoLP(";
  protected final String TEXT_69 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tcontentPane = setupContentPane(shape);" + NL + "\t\t" + NL + "\t\tIFigure decorationShape = createDecorationPane();" + NL + "\t\tif (decorationShape != null) {" + NL + "\t\t\tfigure.add(decorationShape);" + NL + "\t\t}" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createDecorationPane() {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_70 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"), PositionConstants.EAST);" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.BOTTOM);" + NL + "\t\treturn decorationPane;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Default implementation treats passed figure as content pane." + NL + "\t * Respects layout one may have set for generated figure." + NL + "\t * @@param nodeShape instance of generated figure class" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure setupContentPane(IFigure nodeShape) {" + NL + "\t\tif (nodeShape.getLayoutManager() == null) {";
  protected final String TEXT_71 = NL + "\t\t\t";
  protected final String TEXT_72 = " layout = new ";
  protected final String TEXT_73 = "();" + NL + "\t\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\t\tnodeShape.setLayoutManager(layout);";
  protected final String TEXT_74 = NL + "\t\tnodeShape.setLayoutManager(new ";
  protected final String TEXT_75 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_76 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_77 = NL + "\t\t}" + NL + "\t\treturn nodeShape; // use nodeShape itself as contentPane" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_79 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_80 = ".";
  protected final String TEXT_81 = "Labels.";
  protected final String TEXT_82 = ");" + NL + "\t}";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_84 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_85 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_86 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_87 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_88 = " childEditPart) {";
  protected final String TEXT_89 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_92 = " root = (";
  protected final String TEXT_93 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_94 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_95 = NL;
  protected final String TEXT_96 = NL + "}";
  protected final String TEXT_97 = NL;
d404 2
d407 1
a407 1
    stringBuffer.append(TEXT_60);
d409 1
a409 1
    stringBuffer.append(TEXT_61);
d411 1
a411 1
    stringBuffer.append(TEXT_62);
d413 1
a413 1
    stringBuffer.append(TEXT_63);
d415 1
a415 1
    stringBuffer.append(TEXT_64);
d417 1
a417 1
    stringBuffer.append(TEXT_65);
d422 1
a422 1
    stringBuffer.append(TEXT_66);
d432 1
a432 1
    stringBuffer.append(TEXT_67);
d434 1
a434 1
    stringBuffer.append(TEXT_68);
d436 1
a436 1
    stringBuffer.append(TEXT_69);
d438 1
a438 1
    stringBuffer.append(TEXT_70);
d441 1
a441 1
	String layoutClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout");
a442 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(layoutClassName);
d446 1
a446 4
    
} else {
// Flow layout

d448 2
d451 1
a451 1
    stringBuffer.append(TEXT_75);
a452 4
    stringBuffer.append(TEXT_76);
    
}

d454 2
d462 1
a462 1
    stringBuffer.append(TEXT_78);
d464 1
a464 1
    stringBuffer.append(TEXT_79);
d466 1
a466 1
    stringBuffer.append(TEXT_80);
d468 1
a468 1
    stringBuffer.append(TEXT_81);
d470 1
a470 1
    stringBuffer.append(TEXT_82);
d483 1
a483 1
    stringBuffer.append(TEXT_83);
d485 1
a485 1
    stringBuffer.append(TEXT_84);
d487 1
a487 1
    stringBuffer.append(TEXT_85);
d489 1
a489 1
    stringBuffer.append(TEXT_86);
d491 1
a491 1
    stringBuffer.append(TEXT_87);
d493 1
a493 1
    stringBuffer.append(TEXT_88);
d499 1
a499 1
    stringBuffer.append(TEXT_89);
d501 1
a501 1
    stringBuffer.append(TEXT_90);
a505 2
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d509 2
d512 1
a512 1
    stringBuffer.append(TEXT_94);
d517 1
a517 1
    stringBuffer.append(TEXT_95);
d520 1
a520 1
    stringBuffer.append(TEXT_96);
d522 1
a522 1
    stringBuffer.append(TEXT_97);
@


1.52
log
@fix tests errors (viewmaps in tests use FigureViewmap)
@
text
@d88 29
a116 30
  protected final String TEXT_69 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_70 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_71 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_72 = NL + "\t\t";
  protected final String TEXT_73 = " layout = new ";
  protected final String TEXT_74 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_75 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_76 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_77 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_78 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_80 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_81 = ".";
  protected final String TEXT_82 = "Labels.";
  protected final String TEXT_83 = ");" + NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_85 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_86 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_87 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_88 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_89 = " childEditPart) {";
  protected final String TEXT_90 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_92 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_93 = " root = (";
  protected final String TEXT_94 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_95 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = NL + "}";
  protected final String TEXT_98 = NL;
d237 1
d239 1
a435 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_71);
d440 2
a444 2
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_74);
d449 2
d452 1
a452 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
a453 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_77);
d457 1
a457 1
    stringBuffer.append(TEXT_78);
d464 2
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d469 1
a469 1
    stringBuffer.append(semanticHintsClassName);
d471 1
a471 1
    stringBuffer.append(genNode.getUniqueIdentifier());
a472 2
    stringBuffer.append(labelName);
    stringBuffer.append(TEXT_83);
d485 2
d488 2
d491 1
a491 1
    stringBuffer.append(TEXT_85);
d493 1
a493 1
    stringBuffer.append(TEXT_86);
a494 2
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a495 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_89);
d501 2
a503 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_91);
d508 2
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a514 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_95);
d519 1
a519 1
    stringBuffer.append(TEXT_96);
d522 2
a524 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_98);
@


1.51
log
@use Labels instead of WrapLabels
@
text
@d76 42
a117 37
  protected final String TEXT_57 = ") {" + NL + "\t\t\t((";
  protected final String TEXT_58 = ") childEditPart).setLabel(getPrimaryShape().getFigure";
  protected final String TEXT_59 = "());" + NL + "\t\t}";
  protected final String TEXT_60 = NL + "\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_62 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_63 = "), getMapMode().DPtoLP(";
  protected final String TEXT_64 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_65 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_66 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_67 = NL + "\t\t";
  protected final String TEXT_68 = " layout = new ";
  protected final String TEXT_69 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_70 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_71 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_72 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_73 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_75 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_76 = ".";
  protected final String TEXT_77 = "Labels.";
  protected final String TEXT_78 = ");" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_80 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_81 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_82 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_83 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_84 = " childEditPart) {";
  protected final String TEXT_85 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_86 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_87 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_88 = " root = (";
  protected final String TEXT_89 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_90 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = NL + "}";
  protected final String TEXT_93 = NL;
d382 1
d385 8
d398 8
d407 1
a407 1
    stringBuffer.append(TEXT_58);
d409 3
a411 1
    stringBuffer.append(TEXT_59);
d413 1
a413 1
    stringBuffer.append(TEXT_60);
d418 1
a418 1
    stringBuffer.append(TEXT_61);
d428 1
a428 1
    stringBuffer.append(TEXT_62);
d430 1
a430 1
    stringBuffer.append(TEXT_63);
d432 1
a432 1
    stringBuffer.append(TEXT_64);
d434 1
a434 1
    stringBuffer.append(TEXT_65);
d436 1
a436 1
    stringBuffer.append(TEXT_66);
d441 1
a441 1
    stringBuffer.append(TEXT_67);
d443 1
a443 1
    stringBuffer.append(TEXT_68);
d445 1
a445 1
    stringBuffer.append(TEXT_69);
d450 1
a450 1
    stringBuffer.append(TEXT_70);
d452 1
a452 1
    stringBuffer.append(TEXT_71);
d454 1
a454 1
    stringBuffer.append(TEXT_72);
d458 1
a458 1
    stringBuffer.append(TEXT_73);
d465 1
a465 1
    stringBuffer.append(TEXT_74);
d467 1
a467 1
    stringBuffer.append(TEXT_75);
d469 1
a469 1
    stringBuffer.append(TEXT_76);
d471 1
a471 1
    stringBuffer.append(TEXT_77);
d473 1
a473 1
    stringBuffer.append(TEXT_78);
d486 1
a486 1
    stringBuffer.append(TEXT_79);
d488 1
a488 1
    stringBuffer.append(TEXT_80);
d490 1
a490 1
    stringBuffer.append(TEXT_81);
d492 1
a492 1
    stringBuffer.append(TEXT_82);
d494 1
a494 1
    stringBuffer.append(TEXT_83);
d496 1
a496 1
    stringBuffer.append(TEXT_84);
d502 1
a502 1
    stringBuffer.append(TEXT_85);
d504 1
a504 1
    stringBuffer.append(TEXT_86);
d509 1
a509 1
    stringBuffer.append(TEXT_87);
d511 1
a511 1
    stringBuffer.append(TEXT_88);
d513 1
a513 1
    stringBuffer.append(TEXT_89);
d515 1
a515 1
    stringBuffer.append(TEXT_90);
d520 1
a520 1
    stringBuffer.append(TEXT_91);
d523 1
a523 1
    stringBuffer.append(TEXT_92);
d525 1
a525 1
    stringBuffer.append(TEXT_93);
@


1.50
log
@do not generate unused code when there are no compartments
@
text
@d26 1
a26 1
  protected final String TEXT_7 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d60 1
a60 1
  protected final String TEXT_41 = NL + "\t\treturn new ";
d69 44
a112 34
  protected final String TEXT_50 = ");" + NL + " \t\treturn figure;";
  protected final String TEXT_51 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_52 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_53 = "), getMapMode().DPtoLP(";
  protected final String TEXT_54 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_55 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_56 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_57 = NL + "\t\t";
  protected final String TEXT_58 = " layout = new ";
  protected final String TEXT_59 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_60 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_61 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_62 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_63 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_64 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_65 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "Labels.";
  protected final String TEXT_68 = ");" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_70 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_71 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_72 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_73 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_74 = " childEditPart) {";
  protected final String TEXT_75 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_76 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_77 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_78 = " root = (";
  protected final String TEXT_79 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_80 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = NL + "}";
  protected final String TEXT_83 = NL;
d331 1
a333 1
	String figureQualifiedClassName = null;
d351 1
a351 1
    } // instanceof SnippetViewmap 
d353 2
d356 1
a356 1
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
d358 1
a358 1
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
d364 31
d404 1
a404 1
    stringBuffer.append(TEXT_52);
d406 1
a406 1
    stringBuffer.append(TEXT_53);
d408 1
a408 1
    stringBuffer.append(TEXT_54);
d410 1
a410 1
    stringBuffer.append(TEXT_55);
d412 1
a412 1
    stringBuffer.append(TEXT_56);
d417 1
a417 1
    stringBuffer.append(TEXT_57);
d419 1
a419 1
    stringBuffer.append(TEXT_58);
d421 1
a421 1
    stringBuffer.append(TEXT_59);
d426 1
a426 1
    stringBuffer.append(TEXT_60);
d428 1
a428 1
    stringBuffer.append(TEXT_61);
d430 1
a430 1
    stringBuffer.append(TEXT_62);
d434 1
a434 1
    stringBuffer.append(TEXT_63);
d441 1
a441 1
    stringBuffer.append(TEXT_64);
d443 1
a443 1
    stringBuffer.append(TEXT_65);
d445 1
a445 1
    stringBuffer.append(TEXT_66);
d447 1
a447 1
    stringBuffer.append(TEXT_67);
d449 1
a449 1
    stringBuffer.append(TEXT_68);
d462 1
a462 1
    stringBuffer.append(TEXT_69);
d464 1
a464 1
    stringBuffer.append(TEXT_70);
d466 1
a466 1
    stringBuffer.append(TEXT_71);
d468 1
a468 1
    stringBuffer.append(TEXT_72);
d470 1
a470 1
    stringBuffer.append(TEXT_73);
d472 1
a472 1
    stringBuffer.append(TEXT_74);
d478 1
a478 1
    stringBuffer.append(TEXT_75);
d480 1
a480 1
    stringBuffer.append(TEXT_76);
d485 1
a485 1
    stringBuffer.append(TEXT_77);
d487 1
a487 1
    stringBuffer.append(TEXT_78);
d489 1
a489 1
    stringBuffer.append(TEXT_79);
d491 1
a491 1
    stringBuffer.append(TEXT_80);
d496 1
a496 1
    stringBuffer.append(TEXT_81);
d499 1
a499 1
    stringBuffer.append(TEXT_82);
d501 1
a501 1
    stringBuffer.append(TEXT_83);
@


1.49
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d29 21
a49 21
  protected final String TEXT_10 = "() {" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_11 = " getCommand(";
  protected final String TEXT_12 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_13 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_14 = " adapter = ((";
  protected final String TEXT_15 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_16 = " type = (";
  protected final String TEXT_17 = ") adapter.getAdapter(";
  protected final String TEXT_18 = ".class);";
  protected final String TEXT_19 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_20 = ".";
  protected final String TEXT_21 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_22 = " compartmentEditPart = getChildBySemanticHint(";
  protected final String TEXT_23 = ".";
  protected final String TEXT_24 = "Compartments.";
  protected final String TEXT_25 = ");" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_27 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_28 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_29 = "());";
  protected final String TEXT_30 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
d51 1
a51 1
  protected final String TEXT_32 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d53 10
a62 10
  protected final String TEXT_34 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_35 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_36 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_37 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_38 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_39 = NL + "\t\treturn new ";
  protected final String TEXT_40 = "()";
  protected final String TEXT_41 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_42 = ";";
  protected final String TEXT_43 = NL + "\t\treturn ";
d64 36
a99 36
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = " figure = new ";
  protected final String TEXT_47 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_48 = ");" + NL + " \t\treturn figure;";
  protected final String TEXT_49 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_50 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_51 = "), getMapMode().DPtoLP(";
  protected final String TEXT_52 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_53 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_54 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = " layout = new ";
  protected final String TEXT_57 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_58 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_59 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_60 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_61 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_63 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_64 = ".";
  protected final String TEXT_65 = "Labels.";
  protected final String TEXT_66 = ");" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_68 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_69 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_70 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_71 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_72 = " childEditPart) {";
  protected final String TEXT_73 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_74 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_75 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_76 = " root = (";
  protected final String TEXT_77 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_78 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = NL + "}";
d101 2
d240 1
a240 1
boolean hasActualChildren = !genNode.getChildNodes().isEmpty();
d243 1
a243 1
	hasActualChildren |= compartment.isListLayout() && !compartment.getChildNodes().isEmpty();
d245 1
a245 1
if (hasActualChildren) {
d250 2
d253 1
a253 1
    stringBuffer.append(TEXT_11);
d255 1
a255 1
    stringBuffer.append(TEXT_12);
d257 1
a257 1
    stringBuffer.append(TEXT_13);
d259 1
a259 1
    stringBuffer.append(TEXT_14);
a260 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d266 2
d269 5
a273 5
	for (Iterator compartments = genNode.getCompartments().iterator(); compartments.hasNext();) {
		GenCompartment compartment = (GenCompartment) compartments.next();
		if (compartment.isListLayout() && !compartment.getChildNodes().isEmpty()) {
			for (Iterator children = compartment.getChildNodes().iterator(); children.hasNext(); ) {
				GenNode child = (GenNode) children.next();
d275 1
a275 1
    stringBuffer.append(TEXT_19);
d277 1
a277 1
    stringBuffer.append(TEXT_20);
d279 1
a279 1
    stringBuffer.append(TEXT_21);
d281 1
a281 1
    stringBuffer.append(TEXT_22);
d283 1
a283 1
    stringBuffer.append(TEXT_23);
d285 1
a285 1
    stringBuffer.append(TEXT_24);
d287 1
a287 1
    stringBuffer.append(TEXT_25);
d289 1
a291 5
	}

    stringBuffer.append(TEXT_26);
    
}
d294 1
a294 1
    stringBuffer.append(importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName()));
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
d298 1
a298 3
    
if (!genNode.getChildNodes().isEmpty()) {

d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d302 1
a302 3
    
}

d304 1
a304 1
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
d306 1
a306 3
    
if (useFlowLayout) {

d308 4
d313 1
a313 1
    stringBuffer.append(TEXT_35);
d315 1
a315 1
    stringBuffer.append(TEXT_36);
d317 1
a317 1
    stringBuffer.append(TEXT_37);
d319 1
a319 1
    stringBuffer.append(TEXT_38);
d329 1
a329 1
    stringBuffer.append(TEXT_39);
d331 1
a331 1
    stringBuffer.append(TEXT_40);
d333 1
a333 1
    stringBuffer.append(TEXT_41);
d335 1
a335 1
    stringBuffer.append(TEXT_42);
d338 1
a338 1
    stringBuffer.append(TEXT_43);
d340 1
a340 1
    stringBuffer.append(TEXT_44);
d343 1
a343 1
    stringBuffer.append(TEXT_45);
d345 1
a345 1
    stringBuffer.append(TEXT_46);
d347 1
a347 1
    stringBuffer.append(TEXT_47);
d349 1
a349 1
    stringBuffer.append(TEXT_48);
d351 1
a351 1
    stringBuffer.append(TEXT_49);
d361 1
a361 1
    stringBuffer.append(TEXT_50);
d363 1
a363 1
    stringBuffer.append(TEXT_51);
d365 1
a365 1
    stringBuffer.append(TEXT_52);
d367 1
a367 1
    stringBuffer.append(TEXT_53);
d369 1
a369 1
    stringBuffer.append(TEXT_54);
d374 1
a374 1
    stringBuffer.append(TEXT_55);
d376 1
a376 1
    stringBuffer.append(TEXT_56);
d378 1
a378 1
    stringBuffer.append(TEXT_57);
d383 1
a383 1
    stringBuffer.append(TEXT_58);
d385 1
a385 1
    stringBuffer.append(TEXT_59);
d387 1
a387 1
    stringBuffer.append(TEXT_60);
d391 1
a391 1
    stringBuffer.append(TEXT_61);
d398 1
a398 1
    stringBuffer.append(TEXT_62);
d400 1
a400 1
    stringBuffer.append(TEXT_63);
d402 1
a402 1
    stringBuffer.append(TEXT_64);
d404 1
a404 1
    stringBuffer.append(TEXT_65);
d406 1
a406 1
    stringBuffer.append(TEXT_66);
a418 4
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d426 4
d435 1
a435 1
    stringBuffer.append(TEXT_73);
d437 1
a437 1
    stringBuffer.append(TEXT_74);
d442 1
a442 1
    stringBuffer.append(TEXT_75);
d444 1
a444 1
    stringBuffer.append(TEXT_76);
d446 1
a446 1
    stringBuffer.append(TEXT_77);
d448 1
a448 1
    stringBuffer.append(TEXT_78);
d453 1
a453 1
    stringBuffer.append(TEXT_79);
d456 1
a456 1
    stringBuffer.append(TEXT_80);
d458 1
a458 1
    stringBuffer.append(TEXT_81);
@


1.48
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@a398 3
	if (primaryLabel instanceof GenExternalNodeLabel) {
		labelName = ((GenExternalNodeLabel) primaryLabel).getSemanticHintLabelFieldName();
	}
d414 1
a414 1
	if (label instanceof ExternalLabel) {
d435 1
a435 1
		if (label instanceof ExternalLabel) {
@


1.47
log
@#127696 Templates should use new transaction API
@
text
@d20 19
a38 19
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_6 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_7 = "() {" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_8 = " getCommand(";
  protected final String TEXT_9 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_11 = " adapter = ((";
  protected final String TEXT_12 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_13 = " type = (";
  protected final String TEXT_14 = ") adapter.getAdapter(";
  protected final String TEXT_15 = ".class);";
  protected final String TEXT_16 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_17 = ".";
  protected final String TEXT_18 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_19 = " compartmentEditPart = getChildBySemanticHint(";
d40 61
a100 58
  protected final String TEXT_21 = "Compartments.";
  protected final String TEXT_22 = ");" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_24 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_25 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_26 = "());";
  protected final String TEXT_27 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_28 = "());";
  protected final String TEXT_29 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_30 = "());";
  protected final String TEXT_31 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_32 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_33 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_34 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_35 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_36 = NL + "\t\treturn new ";
  protected final String TEXT_37 = "()";
  protected final String TEXT_38 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_39 = ";";
  protected final String TEXT_40 = NL + "\t\treturn ";
  protected final String TEXT_41 = ";";
  protected final String TEXT_42 = NL + "\t\t";
  protected final String TEXT_43 = " figure = new ";
  protected final String TEXT_44 = "();" + NL + " \t\tfigure.setUseLocalCoordinates(";
  protected final String TEXT_45 = ");" + NL + " \t\treturn figure;";
  protected final String TEXT_46 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_47 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_48 = "), getMapMode().DPtoLP(";
  protected final String TEXT_49 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_50 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_51 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = " layout = new ";
  protected final String TEXT_54 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_55 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_56 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_57 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_58 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_60 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_61 = ".";
  protected final String TEXT_62 = "Labels.";
  protected final String TEXT_63 = ");" + NL + "\t}";
  protected final String TEXT_64 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_65 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_66 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_67 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_68 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_69 = " childEditPart) {";
  protected final String TEXT_70 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_71 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_72 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_73 = " root = (";
  protected final String TEXT_74 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_75 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = NL + "}";
  protected final String TEXT_78 = NL;
d207 9
d217 1
a217 1
    stringBuffer.append(TEXT_2);
d232 1
a232 1
    stringBuffer.append(TEXT_3);
d234 1
a234 1
    stringBuffer.append(TEXT_4);
d236 1
a236 1
    stringBuffer.append(TEXT_5);
d245 1
a245 1
    stringBuffer.append(TEXT_6);
d247 1
a247 1
    stringBuffer.append(TEXT_7);
d249 1
a249 1
    stringBuffer.append(TEXT_8);
d251 1
a251 1
    stringBuffer.append(TEXT_9);
d253 1
a253 1
    stringBuffer.append(TEXT_10);
d255 1
a255 1
    stringBuffer.append(TEXT_11);
d257 1
a257 1
    stringBuffer.append(TEXT_12);
d259 1
a259 1
    stringBuffer.append(TEXT_13);
d261 1
a261 1
    stringBuffer.append(TEXT_14);
d263 1
a263 1
    stringBuffer.append(TEXT_15);
d271 1
a271 1
    stringBuffer.append(TEXT_16);
d273 1
a273 1
    stringBuffer.append(TEXT_17);
d275 1
a275 1
    stringBuffer.append(TEXT_18);
d277 1
a277 1
    stringBuffer.append(TEXT_19);
d279 1
a279 1
    stringBuffer.append(TEXT_20);
d281 1
a281 1
    stringBuffer.append(TEXT_21);
d283 1
a283 1
    stringBuffer.append(TEXT_22);
d289 1
a289 1
    stringBuffer.append(TEXT_23);
d293 1
a293 1
    stringBuffer.append(TEXT_24);
d295 1
a295 1
    stringBuffer.append(TEXT_25);
d297 1
a297 1
    stringBuffer.append(TEXT_26);
d301 1
a301 1
    stringBuffer.append(TEXT_27);
d303 1
a303 1
    stringBuffer.append(TEXT_28);
d307 1
a307 1
    stringBuffer.append(TEXT_29);
d309 1
a309 1
    stringBuffer.append(TEXT_30);
d313 1
a313 1
    stringBuffer.append(TEXT_31);
d315 1
a315 1
    stringBuffer.append(TEXT_32);
d317 1
a317 1
    stringBuffer.append(TEXT_33);
d319 1
a319 1
    stringBuffer.append(TEXT_34);
d321 1
a321 1
    stringBuffer.append(TEXT_35);
d331 1
a331 1
    stringBuffer.append(TEXT_36);
d333 1
a333 1
    stringBuffer.append(TEXT_37);
d335 1
a335 1
    stringBuffer.append(TEXT_38);
d337 1
a337 1
    stringBuffer.append(TEXT_39);
d340 1
a340 1
    stringBuffer.append(TEXT_40);
d342 1
a342 1
    stringBuffer.append(TEXT_41);
d345 1
a345 1
    stringBuffer.append(TEXT_42);
d347 1
a347 1
    stringBuffer.append(TEXT_43);
d349 1
a349 1
    stringBuffer.append(TEXT_44);
d351 1
a351 1
    stringBuffer.append(TEXT_45);
d353 1
a353 1
    stringBuffer.append(TEXT_46);
d363 1
a363 1
    stringBuffer.append(TEXT_47);
d365 1
a365 1
    stringBuffer.append(TEXT_48);
d367 1
a367 1
    stringBuffer.append(TEXT_49);
d369 1
a369 1
    stringBuffer.append(TEXT_50);
d371 1
a371 1
    stringBuffer.append(TEXT_51);
d376 1
a376 1
    stringBuffer.append(TEXT_52);
d378 1
a378 1
    stringBuffer.append(TEXT_53);
d380 1
a380 1
    stringBuffer.append(TEXT_54);
d385 1
a385 1
    stringBuffer.append(TEXT_55);
d387 1
a387 1
    stringBuffer.append(TEXT_56);
d389 1
a389 1
    stringBuffer.append(TEXT_57);
d393 1
a393 1
    stringBuffer.append(TEXT_58);
d403 1
a403 1
    stringBuffer.append(TEXT_59);
d405 1
a405 1
    stringBuffer.append(TEXT_60);
d407 1
a407 1
    stringBuffer.append(TEXT_61);
d409 1
a409 1
    stringBuffer.append(TEXT_62);
d411 1
a411 1
    stringBuffer.append(TEXT_63);
d424 1
a424 1
    stringBuffer.append(TEXT_64);
d426 1
a426 1
    stringBuffer.append(TEXT_65);
d428 1
a428 1
    stringBuffer.append(TEXT_66);
d430 1
a430 1
    stringBuffer.append(TEXT_67);
d432 1
a432 1
    stringBuffer.append(TEXT_68);
d434 1
a434 1
    stringBuffer.append(TEXT_69);
d440 1
a440 1
    stringBuffer.append(TEXT_70);
d442 1
a442 1
    stringBuffer.append(TEXT_71);
d447 1
a447 1
    stringBuffer.append(TEXT_72);
d449 1
a449 1
    stringBuffer.append(TEXT_73);
d451 1
a451 1
    stringBuffer.append(TEXT_74);
d453 1
a453 1
    stringBuffer.append(TEXT_75);
d458 1
a458 1
    stringBuffer.append(TEXT_76);
d461 1
a461 1
    stringBuffer.append(TEXT_77);
d463 1
a463 1
    stringBuffer.append(TEXT_78);
@


1.46
log
@Adding "setUseLocalCoordinates" method.
Useful for inner shape-figures located outside of compartment.
@
text
@d68 1
a68 1
  protected final String TEXT_49 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
@


1.45
log
@using importManager to add imports.
@
text
@d61 34
a94 34
  protected final String TEXT_42 = NL + " \t\treturn new ";
  protected final String TEXT_43 = "();";
  protected final String TEXT_44 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_45 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_46 = "), getMapMode().DPtoLP(";
  protected final String TEXT_47 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_48 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_49 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_50 = NL + "\t\t";
  protected final String TEXT_51 = " layout = new ";
  protected final String TEXT_52 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_53 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_54 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_55 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_56 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_57 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_58 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = "Labels.";
  protected final String TEXT_61 = ");" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_63 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_64 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_65 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_66 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_67 = " childEditPart) {";
  protected final String TEXT_68 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_69 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_71 = " root = (";
  protected final String TEXT_72 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_73 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL + "}";
d96 2
d336 4
d341 1
a341 1
    stringBuffer.append(TEXT_44);
d351 1
a351 1
    stringBuffer.append(TEXT_45);
d353 1
a353 1
    stringBuffer.append(TEXT_46);
d355 1
a355 1
    stringBuffer.append(TEXT_47);
d357 1
a357 1
    stringBuffer.append(TEXT_48);
d359 1
a359 1
    stringBuffer.append(TEXT_49);
d364 1
a364 1
    stringBuffer.append(TEXT_50);
d366 1
a366 1
    stringBuffer.append(TEXT_51);
d368 1
a368 1
    stringBuffer.append(TEXT_52);
d373 1
a373 1
    stringBuffer.append(TEXT_53);
d375 1
a375 1
    stringBuffer.append(TEXT_54);
d377 1
a377 1
    stringBuffer.append(TEXT_55);
d381 1
a381 1
    stringBuffer.append(TEXT_56);
d391 1
a391 1
    stringBuffer.append(TEXT_57);
d393 1
a393 1
    stringBuffer.append(TEXT_58);
d395 1
a395 1
    stringBuffer.append(TEXT_59);
d397 1
a397 1
    stringBuffer.append(TEXT_60);
d399 1
a399 1
    stringBuffer.append(TEXT_61);
a411 4
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d419 4
d428 1
a428 1
    stringBuffer.append(TEXT_68);
d430 1
a430 1
    stringBuffer.append(TEXT_69);
d435 1
a435 1
    stringBuffer.append(TEXT_70);
d437 1
a437 1
    stringBuffer.append(TEXT_71);
d439 1
a439 1
    stringBuffer.append(TEXT_72);
d441 1
a441 1
    stringBuffer.append(TEXT_73);
d446 1
a446 1
    stringBuffer.append(TEXT_74);
d449 1
a449 1
    stringBuffer.append(TEXT_75);
d451 1
a451 1
    stringBuffer.append(TEXT_76);
@


1.44
log
@Registering createion edit policy before all the rest.
@
text
@d22 74
a95 75
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.BorderLayout;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_7 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_8 = "() {" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_9 = " getCommand(";
  protected final String TEXT_10 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_11 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_12 = " adapter = ((";
  protected final String TEXT_13 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_14 = " type = (";
  protected final String TEXT_15 = ") adapter.getAdapter(";
  protected final String TEXT_16 = ".class);";
  protected final String TEXT_17 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_20 = " compartmentEditPart = getChildBySemanticHint(";
  protected final String TEXT_21 = ".";
  protected final String TEXT_22 = "Compartments.";
  protected final String TEXT_23 = ");" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_24 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_25 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_26 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_27 = "());";
  protected final String TEXT_28 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_29 = "());";
  protected final String TEXT_30 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_31 = "());";
  protected final String TEXT_32 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_33 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_34 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_35 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_36 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_37 = NL + "\t\treturn new ";
  protected final String TEXT_38 = "()";
  protected final String TEXT_39 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_40 = ";";
  protected final String TEXT_41 = NL + "\t\treturn ";
  protected final String TEXT_42 = ";";
  protected final String TEXT_43 = NL + " \t\treturn new ";
  protected final String TEXT_44 = "();";
  protected final String TEXT_45 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_46 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_47 = "), getMapMode().DPtoLP(";
  protected final String TEXT_48 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_49 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_50 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_51 = NL + "\t\t";
  protected final String TEXT_52 = " layout = new ";
  protected final String TEXT_53 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_54 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_55 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_56 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_57 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_58 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_59 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_60 = ".";
  protected final String TEXT_61 = "Labels.";
  protected final String TEXT_62 = ");" + NL + "\t}";
  protected final String TEXT_63 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_64 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_65 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_66 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_67 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_68 = " childEditPart) {";
  protected final String TEXT_69 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_70 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_71 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_72 = " root = (";
  protected final String TEXT_73 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_74 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = NL + "}";
  protected final String TEXT_77 = NL;
d204 14
a217 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d219 1
a219 1
    importManager.markImportLocation(stringBuffer);
a222 2
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_6);
d231 2
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
d240 2
a242 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest"));
a249 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_16);
d257 2
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d262 1
a262 1
    stringBuffer.append(child.getUniqueIdentifier());
d264 1
a264 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d268 1
a268 1
    stringBuffer.append(genNode.getUniqueIdentifier());
a269 2
    stringBuffer.append(compartment.getSemanticHintFieldName());
    stringBuffer.append(TEXT_23);
d275 1
a275 1
    stringBuffer.append(TEXT_24);
d279 2
d282 1
a282 1
    stringBuffer.append(importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName()));
a283 2
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_27);
d287 2
a289 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
    stringBuffer.append(TEXT_29);
d293 2
a295 2
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_31);
d299 2
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
a307 2
    }
    stringBuffer.append(TEXT_36);
d317 2
d320 1
a320 1
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d322 1
a322 1
    if (useFlowLayout) {
a323 2
    } // use flow layout
    stringBuffer.append(TEXT_40);
d326 2
a328 2
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_42);
d331 2
d334 1
a334 1
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
a335 2
    }
    stringBuffer.append(TEXT_45);
d345 2
d348 1
a348 1
    stringBuffer.append(width);
d350 1
a350 1
    stringBuffer.append(height);
d352 1
a352 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a353 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_50);
d358 2
a362 2
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_53);
d367 2
d370 1
a370 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
a371 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_56);
d375 1
a375 1
    stringBuffer.append(TEXT_57);
d385 2
d388 1
a388 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d390 1
a390 1
    stringBuffer.append(semanticHintsClassName);
d392 1
a392 1
    stringBuffer.append(genNode.getUniqueIdentifier());
a393 2
    stringBuffer.append(labelName);
    stringBuffer.append(TEXT_62);
d406 2
d409 2
d412 1
a412 1
    stringBuffer.append(TEXT_64);
d414 1
a414 1
    stringBuffer.append(TEXT_65);
a415 2
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a416 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_68);
d422 2
a424 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_70);
d429 2
d434 1
a434 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a435 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_74);
d440 1
a440 1
    stringBuffer.append(TEXT_75);
d443 2
a445 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_77);
@


1.43
log
@Correcting model to correctly load cross-references in the model.
Comment added
@
text
@d26 71
a96 72
  protected final String TEXT_7 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, null);";
  protected final String TEXT_8 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_9 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_10 = "());";
  protected final String TEXT_11 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_12 = "() {" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_13 = " getCommand(";
  protected final String TEXT_14 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_15 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_16 = " adapter = ((";
  protected final String TEXT_17 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_18 = " type = (";
  protected final String TEXT_19 = ") adapter.getAdapter(";
  protected final String TEXT_20 = ".class);";
  protected final String TEXT_21 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_22 = ".";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_24 = " compartmentEditPart = getChildBySemanticHint(";
  protected final String TEXT_25 = ".";
  protected final String TEXT_26 = "Compartments.";
  protected final String TEXT_27 = ");" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_28 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_29 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_30 = "());";
  protected final String TEXT_31 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_32 = "());";
  protected final String TEXT_33 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_34 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_35 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_36 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_37 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_38 = NL + "\t\treturn new ";
  protected final String TEXT_39 = "()";
  protected final String TEXT_40 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_41 = ";";
  protected final String TEXT_42 = NL + "\t\treturn ";
  protected final String TEXT_43 = ";";
  protected final String TEXT_44 = NL + " \t\treturn new ";
  protected final String TEXT_45 = "();";
  protected final String TEXT_46 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_47 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_48 = "), getMapMode().DPtoLP(";
  protected final String TEXT_49 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_50 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_51 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = " layout = new ";
  protected final String TEXT_54 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_55 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_56 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_57 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_58 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_60 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_61 = ".";
  protected final String TEXT_62 = "Labels.";
  protected final String TEXT_63 = ");" + NL + "\t}";
  protected final String TEXT_64 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_65 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_66 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_67 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_68 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_69 = " childEditPart) {";
  protected final String TEXT_70 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_71 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_72 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_73 = " root = (";
  protected final String TEXT_74 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_75 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = NL + "}";
  protected final String TEXT_78 = NL;
a212 8
    if (!genNode.getChildNodes().isEmpty()) {
    stringBuffer.append(TEXT_7);
    }
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_10);
d221 1
a221 1
    stringBuffer.append(TEXT_11);
d223 1
a223 1
    stringBuffer.append(TEXT_12);
d225 1
a225 1
    stringBuffer.append(TEXT_13);
d227 1
a227 1
    stringBuffer.append(TEXT_14);
d229 1
a229 1
    stringBuffer.append(TEXT_15);
d231 1
a231 1
    stringBuffer.append(TEXT_16);
d233 1
a233 1
    stringBuffer.append(TEXT_17);
d235 1
a235 1
    stringBuffer.append(TEXT_18);
d237 1
a237 1
    stringBuffer.append(TEXT_19);
d239 1
a239 1
    stringBuffer.append(TEXT_20);
d247 1
a247 1
    stringBuffer.append(TEXT_21);
d249 1
a249 1
    stringBuffer.append(TEXT_22);
d251 1
a251 1
    stringBuffer.append(TEXT_23);
d253 1
a253 1
    stringBuffer.append(TEXT_24);
d255 1
a255 1
    stringBuffer.append(TEXT_25);
d257 1
a257 1
    stringBuffer.append(TEXT_26);
d259 1
a259 1
    stringBuffer.append(TEXT_27);
d265 1
a265 1
    stringBuffer.append(TEXT_28);
d268 7
d277 2
a279 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
    stringBuffer.append(TEXT_30);
d283 2
a285 2
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_32);
d289 2
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.XYLayoutEditPolicy"));
d294 1
a294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
a297 2
    }
    stringBuffer.append(TEXT_37);
d307 2
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d312 1
a312 1
    if (useFlowLayout) {
a313 2
    } // use flow layout
    stringBuffer.append(TEXT_41);
d316 2
a318 2
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_43);
d321 2
d324 1
a324 1
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
a325 2
    }
    stringBuffer.append(TEXT_46);
d335 2
d338 1
a338 1
    stringBuffer.append(width);
d340 1
a340 1
    stringBuffer.append(height);
d342 1
a342 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a343 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_51);
d348 2
a352 2
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_54);
d357 2
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
a361 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_57);
d365 1
a365 1
    stringBuffer.append(TEXT_58);
d375 2
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d380 1
a380 1
    stringBuffer.append(semanticHintsClassName);
d382 1
a382 1
    stringBuffer.append(genNode.getUniqueIdentifier());
a383 2
    stringBuffer.append(labelName);
    stringBuffer.append(TEXT_63);
d396 2
d399 2
d402 1
a402 1
    stringBuffer.append(TEXT_65);
d404 1
a404 1
    stringBuffer.append(TEXT_66);
a405 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
a406 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_69);
d412 2
a414 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_71);
d419 2
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
a425 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_75);
d430 1
a430 1
    stringBuffer.append(TEXT_76);
d433 2
a435 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_78);
@


1.42
log
@[mgolubev] #127252 layout support
@
text
@d25 24
a48 24
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_7 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_8 = "());";
  protected final String TEXT_9 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_10 = "() {" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_11 = " getCommand(";
  protected final String TEXT_12 = " request) {" + NL + "\t\t\t\tif (understandsRequest(request)) {" + NL + "\t\t\t\t\tif (request instanceof ";
  protected final String TEXT_13 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_14 = " adapter = ((";
  protected final String TEXT_15 = ") request).getViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_16 = " type = (";
  protected final String TEXT_17 = ") adapter.getAdapter(";
  protected final String TEXT_18 = ".class);";
  protected final String TEXT_19 = NL + "\t\t\t\t\t\tif (type == ";
  protected final String TEXT_20 = ".";
  protected final String TEXT_21 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_22 = " compartmentEditPart = getChildBySemanticHint(";
  protected final String TEXT_23 = ".";
  protected final String TEXT_24 = "Compartments.";
  protected final String TEXT_25 = ");" + NL + "\t\t\t\t\t\t\treturn compartmentEditPart == null ? null : compartmentEditPart.getCommand(request);" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_27 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_28 = "());";
  protected final String TEXT_29 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d50 10
a59 10
  protected final String TEXT_31 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_32 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_33 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_34 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_35 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_36 = NL + "\t\treturn new ";
  protected final String TEXT_37 = "()";
  protected final String TEXT_38 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_39 = ";";
  protected final String TEXT_40 = NL + "\t\treturn ";
d61 34
a94 34
  protected final String TEXT_42 = NL + " \t\treturn new ";
  protected final String TEXT_43 = "();";
  protected final String TEXT_44 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_45 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_46 = "), getMapMode().DPtoLP(";
  protected final String TEXT_47 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tif (shape.getLayoutManager() == null){" + NL + "\t\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_48 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_49 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_50 = NL + "\t\t";
  protected final String TEXT_51 = " layout = new ";
  protected final String TEXT_52 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_53 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_54 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_55 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_56 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_57 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_58 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = "Labels.";
  protected final String TEXT_61 = ");" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_63 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_64 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_65 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_66 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_67 = " childEditPart) {";
  protected final String TEXT_68 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_69 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_71 = " root = (";
  protected final String TEXT_72 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_73 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL + "}";
d96 2
d214 4
d219 1
a219 1
    stringBuffer.append(TEXT_7);
d221 1
a221 1
    stringBuffer.append(TEXT_8);
d230 1
a230 1
    stringBuffer.append(TEXT_9);
d232 1
a232 1
    stringBuffer.append(TEXT_10);
d234 1
a234 1
    stringBuffer.append(TEXT_11);
a235 4
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewAndElementRequest"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d241 1
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d245 4
d256 1
a256 1
    stringBuffer.append(TEXT_19);
d258 1
a258 1
    stringBuffer.append(TEXT_20);
d260 1
a260 1
    stringBuffer.append(TEXT_21);
d262 1
a262 1
    stringBuffer.append(TEXT_22);
d264 1
a264 1
    stringBuffer.append(TEXT_23);
d266 1
a266 1
    stringBuffer.append(TEXT_24);
d268 1
a268 1
    stringBuffer.append(TEXT_25);
d274 1
a274 1
    stringBuffer.append(TEXT_26);
d279 1
a279 1
    stringBuffer.append(TEXT_27);
d281 1
a281 1
    stringBuffer.append(TEXT_28);
d285 1
a285 1
    stringBuffer.append(TEXT_29);
d287 1
a287 1
    stringBuffer.append(TEXT_30);
d291 1
a291 1
    stringBuffer.append(TEXT_31);
d293 1
a293 1
    stringBuffer.append(TEXT_32);
d295 1
a295 1
    stringBuffer.append(TEXT_33);
d297 1
a297 1
    stringBuffer.append(TEXT_34);
d299 1
a299 1
    stringBuffer.append(TEXT_35);
d309 1
a309 1
    stringBuffer.append(TEXT_36);
d311 1
a311 1
    stringBuffer.append(TEXT_37);
d313 1
a313 1
    stringBuffer.append(TEXT_38);
d315 1
a315 1
    stringBuffer.append(TEXT_39);
d318 1
a318 1
    stringBuffer.append(TEXT_40);
d320 1
a320 1
    stringBuffer.append(TEXT_41);
d323 1
a323 1
    stringBuffer.append(TEXT_42);
d325 1
a325 1
    stringBuffer.append(TEXT_43);
d327 1
a327 1
    stringBuffer.append(TEXT_44);
d337 1
a337 1
    stringBuffer.append(TEXT_45);
d339 1
a339 1
    stringBuffer.append(TEXT_46);
d341 1
a341 1
    stringBuffer.append(TEXT_47);
d343 1
a343 1
    stringBuffer.append(TEXT_48);
d345 1
a345 1
    stringBuffer.append(TEXT_49);
d350 1
a350 1
    stringBuffer.append(TEXT_50);
d352 1
a352 1
    stringBuffer.append(TEXT_51);
d354 1
a354 1
    stringBuffer.append(TEXT_52);
d359 1
a359 1
    stringBuffer.append(TEXT_53);
d361 1
a361 1
    stringBuffer.append(TEXT_54);
d363 1
a363 1
    stringBuffer.append(TEXT_55);
d367 1
a367 1
    stringBuffer.append(TEXT_56);
d377 1
a377 1
    stringBuffer.append(TEXT_57);
d379 1
a379 1
    stringBuffer.append(TEXT_58);
d381 1
a381 1
    stringBuffer.append(TEXT_59);
d383 1
a383 1
    stringBuffer.append(TEXT_60);
d385 1
a385 1
    stringBuffer.append(TEXT_61);
a397 4
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d405 4
d414 1
a414 1
    stringBuffer.append(TEXT_68);
d416 1
a416 1
    stringBuffer.append(TEXT_69);
d421 1
a421 1
    stringBuffer.append(TEXT_70);
d423 1
a423 1
    stringBuffer.append(TEXT_71);
d425 1
a425 1
    stringBuffer.append(TEXT_72);
d427 1
a427 1
    stringBuffer.append(TEXT_73);
d432 1
a432 1
    stringBuffer.append(TEXT_74);
d435 1
a435 1
    stringBuffer.append(TEXT_75);
d437 1
a437 1
    stringBuffer.append(TEXT_76);
@


1.41
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d66 1
a66 1
  protected final String TEXT_47 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
@


1.40
log
@#126896
generating CanonicalEditPolicy for visualizing containment reference as diagram link.
@
text
@d97 1
a97 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d141 1
a141 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d184 1
a184 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d197 1
a197 1
GenNode genNode = (GenNode) argument;
@


1.39
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d47 49
a95 48
  protected final String TEXT_28 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_29 = "());";
  protected final String TEXT_30 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_31 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_32 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_33 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_35 = NL + "\t\treturn new ";
  protected final String TEXT_36 = "()";
  protected final String TEXT_37 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_38 = ";";
  protected final String TEXT_39 = NL + "\t\treturn ";
  protected final String TEXT_40 = ";";
  protected final String TEXT_41 = NL + " \t\treturn new ";
  protected final String TEXT_42 = "();";
  protected final String TEXT_43 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_44 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_45 = "), getMapMode().DPtoLP(";
  protected final String TEXT_46 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_47 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_48 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = " layout = new ";
  protected final String TEXT_51 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_52 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_53 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_54 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_55 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_56 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_57 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_58 = ".";
  protected final String TEXT_59 = "Labels.";
  protected final String TEXT_60 = ");" + NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_62 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_63 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_64 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_65 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_66 = " childEditPart) {";
  protected final String TEXT_67 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_68 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_69 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_70 = " root = (";
  protected final String TEXT_71 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_72 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = NL + "}";
  protected final String TEXT_75 = NL;
d276 4
d281 1
a281 1
    stringBuffer.append(TEXT_29);
a282 1
}
d285 1
a285 1
    stringBuffer.append(TEXT_30);
d287 1
a287 1
    stringBuffer.append(TEXT_31);
d289 1
a289 1
    stringBuffer.append(TEXT_32);
d291 1
a291 1
    stringBuffer.append(TEXT_33);
d293 1
a293 1
    stringBuffer.append(TEXT_34);
d303 1
a303 1
    stringBuffer.append(TEXT_35);
d305 1
a305 1
    stringBuffer.append(TEXT_36);
d307 1
a307 1
    stringBuffer.append(TEXT_37);
d309 1
a309 1
    stringBuffer.append(TEXT_38);
d312 1
a312 1
    stringBuffer.append(TEXT_39);
d314 1
a314 1
    stringBuffer.append(TEXT_40);
d317 1
a317 1
    stringBuffer.append(TEXT_41);
d319 1
a319 1
    stringBuffer.append(TEXT_42);
d321 1
a321 1
    stringBuffer.append(TEXT_43);
d331 1
a331 1
    stringBuffer.append(TEXT_44);
d333 1
a333 1
    stringBuffer.append(TEXT_45);
d335 1
a335 1
    stringBuffer.append(TEXT_46);
d337 1
a337 1
    stringBuffer.append(TEXT_47);
d339 1
a339 1
    stringBuffer.append(TEXT_48);
a343 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(layoutClassName);
d347 2
d353 1
a353 1
    stringBuffer.append(TEXT_52);
d355 1
a355 1
    stringBuffer.append(TEXT_53);
d357 1
a357 1
    stringBuffer.append(TEXT_54);
d361 1
a361 1
    stringBuffer.append(TEXT_55);
d371 1
a371 1
    stringBuffer.append(TEXT_56);
d373 1
a373 1
    stringBuffer.append(TEXT_57);
d375 1
a375 1
    stringBuffer.append(TEXT_58);
d377 1
a377 1
    stringBuffer.append(TEXT_59);
d379 1
a379 1
    stringBuffer.append(TEXT_60);
d392 1
a392 1
    stringBuffer.append(TEXT_61);
d394 1
a394 1
    stringBuffer.append(TEXT_62);
d396 1
a396 1
    stringBuffer.append(TEXT_63);
d398 1
a398 1
    stringBuffer.append(TEXT_64);
d400 1
a400 1
    stringBuffer.append(TEXT_65);
d402 1
a402 1
    stringBuffer.append(TEXT_66);
d408 1
a408 1
    stringBuffer.append(TEXT_67);
d410 1
a410 1
    stringBuffer.append(TEXT_68);
a414 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart"));
d418 2
d421 1
a421 1
    stringBuffer.append(TEXT_72);
d426 1
a426 1
    stringBuffer.append(TEXT_73);
d429 1
a429 1
    stringBuffer.append(TEXT_74);
d431 1
a431 1
    stringBuffer.append(TEXT_75);
@


1.38
log
@ImportManager moved to oeg.common
@
text
@d332 1
a332 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.37
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.36
log
@#124830 Add all children of the list compartment to the popup bar of the parent node
@
text
@d332 1
a332 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
@


1.35
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d25 2
a26 2
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {";
  protected final String TEXT_7 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
d28 67
a94 53
  protected final String TEXT_9 = NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_10 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
  protected final String TEXT_11 = "());";
  protected final String TEXT_12 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_13 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_14 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\tinstallEditPolicy(EditPolicy.LAYOUT_ROLE, new ";
  protected final String TEXT_17 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(";
  protected final String TEXT_18 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_19 = "();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_20 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_21 = NL + "\t\treturn new ";
  protected final String TEXT_22 = "()";
  protected final String TEXT_23 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + "\t\treturn ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + " \t\treturn new ";
  protected final String TEXT_28 = "();";
  protected final String TEXT_29 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_30 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_31 = "), getMapMode().DPtoLP(";
  protected final String TEXT_32 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_33 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_34 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_35 = NL + "\t\t";
  protected final String TEXT_36 = " layout = new ";
  protected final String TEXT_37 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_38 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_39 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_40 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_41 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_43 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = "Labels.";
  protected final String TEXT_46 = ");" + NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_48 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_49 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, -1);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_50 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((";
  protected final String TEXT_51 = ") childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_52 = " childEditPart) {";
  protected final String TEXT_53 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\t";
  protected final String TEXT_56 = " root = (";
  protected final String TEXT_57 = ") getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_58 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_59 = NL;
  protected final String TEXT_60 = NL + "}";
  protected final String TEXT_61 = NL;
d211 1
a211 1
    if (!genNode.getChildNodes().isEmpty()) {
d213 1
a213 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d215 8
a222 1
    }
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName(genNode.getItemSemanticEditPolicyQualifiedClassName()));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName(genNode.getGraphicalNodeEditPolicyQualifiedClassName()));
d228 1
a228 1
    if (!genNode.getChildNodes().isEmpty()) {
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName(genNode.getCanonicalEditPolicyQualifiedClassName()));
d236 1
a236 2
    }
    if (useFlowLayout) {
d238 44
d283 1
a283 1
    stringBuffer.append(TEXT_17);
d285 1
a285 1
    stringBuffer.append(TEXT_18);
d287 1
a287 1
    stringBuffer.append(TEXT_19);
d289 1
a289 1
    stringBuffer.append(TEXT_20);
d299 1
a299 1
    stringBuffer.append(TEXT_21);
d301 1
a301 1
    stringBuffer.append(TEXT_22);
d303 1
a303 1
    stringBuffer.append(TEXT_23);
d305 1
a305 1
    stringBuffer.append(TEXT_24);
d308 1
a308 1
    stringBuffer.append(TEXT_25);
d310 1
a310 1
    stringBuffer.append(TEXT_26);
d313 1
a313 1
    stringBuffer.append(TEXT_27);
d315 1
a315 1
    stringBuffer.append(TEXT_28);
d317 1
a317 1
    stringBuffer.append(TEXT_29);
d327 1
a327 1
    stringBuffer.append(TEXT_30);
d329 1
a329 1
    stringBuffer.append(TEXT_31);
d331 1
a331 1
    stringBuffer.append(TEXT_32);
d333 1
a333 1
    stringBuffer.append(TEXT_33);
d335 1
a335 1
    stringBuffer.append(TEXT_34);
d340 1
a340 1
    stringBuffer.append(TEXT_35);
d342 1
a342 1
    stringBuffer.append(TEXT_36);
d344 1
a344 1
    stringBuffer.append(TEXT_37);
d349 1
a349 1
    stringBuffer.append(TEXT_38);
d351 1
a351 1
    stringBuffer.append(TEXT_39);
d353 1
a353 1
    stringBuffer.append(TEXT_40);
d357 1
a357 1
    stringBuffer.append(TEXT_41);
d367 1
a367 1
    stringBuffer.append(TEXT_42);
d369 1
a369 1
    stringBuffer.append(TEXT_43);
d371 1
a371 1
    stringBuffer.append(TEXT_44);
d373 1
a373 1
    stringBuffer.append(TEXT_45);
d375 1
a375 1
    stringBuffer.append(TEXT_46);
d388 1
a388 1
    stringBuffer.append(TEXT_47);
d390 1
a390 1
    stringBuffer.append(TEXT_48);
d392 1
a392 1
    stringBuffer.append(TEXT_49);
d394 1
a394 1
    stringBuffer.append(TEXT_50);
d396 1
a396 1
    stringBuffer.append(TEXT_51);
d398 1
a398 1
    stringBuffer.append(TEXT_52);
d404 1
a404 1
    stringBuffer.append(TEXT_53);
d406 1
a406 1
    stringBuffer.append(TEXT_54);
d411 1
a411 1
    stringBuffer.append(TEXT_55);
d413 1
a413 1
    stringBuffer.append(TEXT_56);
d415 1
a415 1
    stringBuffer.append(TEXT_57);
d417 1
a417 1
    stringBuffer.append(TEXT_58);
d422 1
a422 1
    stringBuffer.append(TEXT_59);
d425 1
a425 1
    stringBuffer.append(TEXT_60);
d427 1
a427 1
    stringBuffer.append(TEXT_61);
@


1.34
log
@#112054 direct edit and correct placement
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.BorderLayout;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.RectangularDropShadowLineBorder;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;";
d51 1
a51 1
  protected final String TEXT_32 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(1));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
d156 9
a164 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
@


1.33
log
@prevent ArrayIndexOutOfBoundsException with external node labels
@
text
@d292 4
d304 1
a304 1
    stringBuffer.append(primaryLabel.getSemanticHintFieldName());
@


1.32
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.BorderLayout;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.RectangularDropShadowLineBorder;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;";
d67 14
a80 10
  protected final String TEXT_48 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((GraphicalEditPart) childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_49 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((GraphicalEditPart) childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_50 = " childEditPart) {";
  protected final String TEXT_51 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_52 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_53 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_54 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = NL + "}";
  protected final String TEXT_57 = NL;
d302 12
a313 1
    }
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d321 4
d326 3
a328 3
for (Iterator labels = genNode.getLabels().iterator(); labels.hasNext();) {
	GenNodeLabel label = (GenNodeLabel) labels.next();
	if (label instanceof ExternalLabel) {
d330 1
a330 1
    stringBuffer.append(TEXT_51);
d332 1
a332 1
    stringBuffer.append(TEXT_52);
d334 1
d336 9
d346 1
d348 1
a348 5
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_54);
    if (genNode.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_55);
d351 1
a351 1
    stringBuffer.append(TEXT_56);
d353 1
a353 1
    stringBuffer.append(TEXT_57);
@


1.31
log
@Correcting border width. It is important for an inner elements layed out in XY.
@
text
@d174 1
a174 1
boolean useFlowLayout = genNode.getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL;
@


1.30
log
@correcting creation of EP in case of XY layout
@
text
@d51 1
a51 1
  protected final String TEXT_32 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
@


1.29
log
@Imports added
@
text
@d37 40
a76 41
  protected final String TEXT_18 = " child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tif (result == null && child instanceof SubDetail_subDetailNameEditPart) {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_19 = "();" + NL + "\t\t\t\t\t} else if (result == null && child instanceof SubDetail_CompartmentEditPart) {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_20 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_21 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_22 = NL + "\t\treturn new ";
  protected final String TEXT_23 = "()";
  protected final String TEXT_24 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + "\t\treturn ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + " \t\treturn new ";
  protected final String TEXT_29 = "();";
  protected final String TEXT_30 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_31 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_32 = "), getMapMode().DPtoLP(";
  protected final String TEXT_33 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_34 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_35 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_36 = NL + "\t\t";
  protected final String TEXT_37 = " layout = new ";
  protected final String TEXT_38 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_39 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_40 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_41 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_42 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_44 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = "Labels.";
  protected final String TEXT_47 = ");" + NL + "\t}";
  protected final String TEXT_48 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(";
  protected final String TEXT_49 = " childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((GraphicalEditPart) childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(";
  protected final String TEXT_50 = " childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((GraphicalEditPart) childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(";
  protected final String TEXT_51 = " childEditPart) {";
  protected final String TEXT_52 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_53 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_55 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = NL + "}";
  protected final String TEXT_58 = NL;
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
a215 2
    }
    stringBuffer.append(TEXT_21);
d225 2
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
d230 1
a230 1
    if (useFlowLayout) {
a231 2
    } // use flow layout
    stringBuffer.append(TEXT_25);
d234 2
a236 2
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_27);
d239 2
d242 1
a242 1
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
a243 2
    }
    stringBuffer.append(TEXT_30);
d253 2
d256 1
a256 1
    stringBuffer.append(width);
d258 1
a258 1
    stringBuffer.append(height);
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
a261 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Figure"));
    stringBuffer.append(TEXT_35);
d266 2
a270 2
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_38);
d275 2
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
a279 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_41);
d283 1
a283 1
    stringBuffer.append(TEXT_42);
d289 2
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d294 1
a294 1
    stringBuffer.append(semanticHintsClassName);
d296 1
a296 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d298 1
a298 1
    stringBuffer.append(primaryLabel.getSemanticHintFieldName());
d300 1
a300 1
    }
a305 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_51);
d311 2
a313 2
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_53);
d318 2
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
a322 2
    if (genNode.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_56);
d325 2
a327 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_58);
@


1.28
log
@#122054 support external node labels
@
text
@d36 42
a77 38
  protected final String TEXT_17 = "() {" + NL + "\t\t\tprotected EditPolicy createChildEditPolicy(EditPart child) {" + NL + "\t\t\t\tEditPolicy result = super.createChildEditPolicy(child);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tif (result == null && child instanceof SubDetail_subDetailNameEditPart) {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_18 = "();" + NL + "\t\t\t\t\t} else if (result == null && child instanceof SubDetail_CompartmentEditPart) {" + NL + "\t\t\t\t\t\treturn new ";
  protected final String TEXT_19 = "();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_20 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_21 = NL + "\t\treturn new ";
  protected final String TEXT_22 = "()";
  protected final String TEXT_23 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + "\t\treturn ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + " \t\treturn new ";
  protected final String TEXT_28 = "();";
  protected final String TEXT_29 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_30 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_31 = "), getMapMode().DPtoLP(";
  protected final String TEXT_32 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\t" + NL + "\t\tIFigure shapeContents = new Figure();" + NL + "\t\tshape.add(shapeContents);" + NL + "\t\tshapeContents.setLayoutManager(new BorderLayout());" + NL + "\t\taddContentPane(shapeContents);" + NL + "\t\tdecorateShape(shapeContents);" + NL + "" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void decorateShape(IFigure shapeContents) {" + NL + "\t\tView view = (View) getModel();" + NL + "\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tFigure decorationPane = new Figure();" + NL + "\t\tdecorationPane.setLayoutManager(new BorderLayout());" + NL + "\t\tshapeContents.add(decorationPane, BorderLayout.BOTTOM);" + NL + "\t\t" + NL + "\t\tImageFigureEx imageFigure = new ImageFigureEx(";
  protected final String TEXT_33 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"));" + NL + "\t\tdecorationPane.add(imageFigure, BorderLayout.RIGHT);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {" + NL + "\t\tcontentPane = new ";
  protected final String TEXT_34 = "();" + NL + "\t\tshape.add(contentPane, BorderLayout.CENTER);";
  protected final String TEXT_35 = NL + "\t\t";
  protected final String TEXT_36 = " layout = new ";
  protected final String TEXT_37 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_38 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_39 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_40 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_41 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_43 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = "Labels.";
  protected final String TEXT_46 = ");" + NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addChildVisual(EditPart childEditPart, int index) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((GraphicalEditPart) childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().add(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.addChildVisual(childEditPart, index);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void removeChildVisual(EditPart childEditPart) {" + NL + "\t\tif (isExternalLabel(childEditPart)) {" + NL + "\t\t\tIFigure labelFigure = ((GraphicalEditPart) childEditPart).getFigure();" + NL + "\t\t\tgetExternalLabelsContainer().remove(labelFigure);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.removeChildVisual(childEditPart);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isExternalLabel(EditPart childEditPart) {";
  protected final String TEXT_48 = NL + "\t\tif (childEditPart instanceof ";
  protected final String TEXT_49 = ") {" + NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_50 = NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getExternalLabelsContainer() {" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getRoot();" + NL + "\t\treturn root.getLayer(";
  protected final String TEXT_51 = ".EXTERNAL_NODE_LABELS_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = NL + "}";
  protected final String TEXT_54 = NL;
d211 1
a211 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableShapeEditPolicy"));
d215 2
d218 1
a218 1
    stringBuffer.append(TEXT_20);
d228 1
a228 1
    stringBuffer.append(TEXT_21);
d230 1
a230 1
    stringBuffer.append(TEXT_22);
d232 1
a232 1
    stringBuffer.append(TEXT_23);
d234 1
a234 1
    stringBuffer.append(TEXT_24);
d237 1
a237 1
    stringBuffer.append(TEXT_25);
d239 1
a239 1
    stringBuffer.append(TEXT_26);
d242 1
a242 1
    stringBuffer.append(TEXT_27);
d244 1
a244 1
    stringBuffer.append(TEXT_28);
d246 1
a246 1
    stringBuffer.append(TEXT_29);
d256 1
a256 1
    stringBuffer.append(TEXT_30);
d258 1
a258 1
    stringBuffer.append(TEXT_31);
d260 1
a260 1
    stringBuffer.append(TEXT_32);
d262 1
a262 1
    stringBuffer.append(TEXT_33);
d264 1
a264 1
    stringBuffer.append(TEXT_34);
a268 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(layoutClassName);
d272 2
d278 1
a278 1
    stringBuffer.append(TEXT_38);
d280 1
a280 1
    stringBuffer.append(TEXT_39);
d282 1
a282 1
    stringBuffer.append(TEXT_40);
d286 1
a286 1
    stringBuffer.append(TEXT_41);
d292 1
a292 1
    stringBuffer.append(TEXT_42);
d294 1
a294 1
    stringBuffer.append(TEXT_43);
d296 1
a296 1
    stringBuffer.append(TEXT_44);
d298 1
a298 1
    stringBuffer.append(TEXT_45);
d300 1
a300 1
    stringBuffer.append(TEXT_46);
d302 7
a308 1
    stringBuffer.append(TEXT_47);
d314 1
a314 1
    stringBuffer.append(TEXT_48);
d316 1
a316 1
    stringBuffer.append(TEXT_49);
d321 1
a321 1
    stringBuffer.append(TEXT_50);
d323 1
a323 1
    stringBuffer.append(TEXT_51);
d325 1
a325 1
    stringBuffer.append(TEXT_52);
d328 1
a328 1
    stringBuffer.append(TEXT_53);
d330 1
a330 1
    stringBuffer.append(TEXT_54);
@


1.27
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d3 1
d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.BorderLayout;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.RectangularDropShadowLineBorder;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;";
d66 8
a73 4
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = NL;
  protected final String TEXT_49 = NL + "}";
  protected final String TEXT_50 = NL;
d297 15
d313 1
a313 1
    stringBuffer.append(TEXT_48);
d316 1
a316 1
    stringBuffer.append(TEXT_49);
d318 1
a318 1
    stringBuffer.append(TEXT_50);
@


1.26
log
@New plugin with IFigure codegeneration to support #114177 (graphical definition model) was added
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.RectangularDropShadowLineBorder;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d50 16
a65 16
  protected final String TEXT_32 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\taddContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {";
  protected final String TEXT_33 = NL + "\t\tcontentPane = new ";
  protected final String TEXT_34 = "();" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\tshape.add(contentPane);";
  protected final String TEXT_35 = NL + "\t\tcontentPane = shape;";
  protected final String TEXT_36 = NL + "\t\t";
  protected final String TEXT_37 = " layout = new ";
  protected final String TEXT_38 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_39 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_40 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_41 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_42 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_44 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = "Labels.";
  protected final String TEXT_47 = ");" + NL + "\t}";
d67 2
a68 3
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = NL + "}";
  protected final String TEXT_51 = NL;
d215 1
a215 1
}
d250 1
a250 1
    if (genNode.isExplicitContentPane()) {
a253 2
    } else {
    stringBuffer.append(TEXT_35);
a254 2
}

d258 2
a262 2
    stringBuffer.append(layoutClassName);
    stringBuffer.append(TEXT_38);
d267 2
d270 1
a270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.FreeformLayout"));
a271 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_41);
d275 1
a275 1
    stringBuffer.append(TEXT_42);
d281 2
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d286 1
a286 1
    stringBuffer.append(semanticHintsClassName);
d288 1
a288 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d290 1
a290 1
    stringBuffer.append(primaryLabel.getSemanticHintFieldName());
d292 1
a292 1
    }
a293 2
    if (genNode.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_49);
d296 2
a298 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_51);
@


1.25
log
@one more flavor of snippet viewmap - inner class
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Shape;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.RectangularDropShadowLineBorder;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
@


1.24
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d45 25
a69 21
  protected final String TEXT_27 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_28 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_29 = "), getMapMode().DPtoLP(";
  protected final String TEXT_30 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tfigure.add(shape);" + NL + "\t\taddContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {";
  protected final String TEXT_31 = NL + "\t\tcontentPane = new ";
  protected final String TEXT_32 = "();" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\tshape.add(contentPane);";
  protected final String TEXT_33 = NL + "\t\tcontentPane = shape;";
  protected final String TEXT_34 = NL + "\t\t";
  protected final String TEXT_35 = " layout = new ";
  protected final String TEXT_36 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_37 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_38 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_39 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_40 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_42 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = "Labels.";
  protected final String TEXT_45 = ");" + NL + "\t}";
  protected final String TEXT_46 = NL + "}";
  protected final String TEXT_47 = NL;
d230 5
d236 1
a236 1
    stringBuffer.append(TEXT_27);
d246 1
a246 1
    stringBuffer.append(TEXT_28);
d248 1
a248 1
    stringBuffer.append(TEXT_29);
d250 1
a250 1
    stringBuffer.append(TEXT_30);
d252 1
a252 1
    stringBuffer.append(TEXT_31);
d254 1
a254 1
    stringBuffer.append(TEXT_32);
d256 1
a256 1
    stringBuffer.append(TEXT_33);
d263 1
a263 1
    stringBuffer.append(TEXT_34);
d265 1
a265 1
    stringBuffer.append(TEXT_35);
d267 1
a267 1
    stringBuffer.append(TEXT_36);
d272 1
a272 1
    stringBuffer.append(TEXT_37);
d274 1
a274 1
    stringBuffer.append(TEXT_38);
d276 1
a276 1
    stringBuffer.append(TEXT_39);
d280 1
a280 1
    stringBuffer.append(TEXT_40);
d286 1
a286 1
    stringBuffer.append(TEXT_41);
d288 1
a288 1
    stringBuffer.append(TEXT_42);
d290 1
a290 1
    stringBuffer.append(TEXT_43);
d292 1
a292 1
    stringBuffer.append(TEXT_44);
d294 6
a299 1
    stringBuffer.append(TEXT_45);
d301 1
a301 1
    stringBuffer.append(TEXT_46);
d303 1
a303 1
    stringBuffer.append(TEXT_47);
@


1.23
log
@#121581
Fields for the compartments are named unique.
@
text
@d41 25
a65 29
  protected final String TEXT_23 = " {" + NL + "\t\t\tprotected boolean useLocalCoordinates() {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "}";
  protected final String TEXT_24 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateNodeShape(Shape shape) {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\tshape.setLineStyle(";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = ");";
  protected final String TEXT_29 = NL + "\tshape.setLineWidth(";
  protected final String TEXT_30 = ");";
  protected final String TEXT_31 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_32 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_33 = "), getMapMode().DPtoLP(";
  protected final String TEXT_34 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tif (shape instanceof Shape) {" + NL + "\t\t\tdecorateNodeShape((Shape) shape);" + NL + "\t\t}" + NL + "\t\tfigure.add(shape);" + NL + "\t\taddContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {";
  protected final String TEXT_35 = NL + "\t\tcontentPane = new ";
  protected final String TEXT_36 = "();" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\tshape.add(contentPane);";
  protected final String TEXT_37 = NL + "\t\tcontentPane = shape;";
  protected final String TEXT_38 = NL + "\t\t";
  protected final String TEXT_39 = " layout = new ";
  protected final String TEXT_40 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_41 = NL + "\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_42 = "() {" + NL + "\t\t\tpublic Object getConstraint(IFigure figure) {" + NL + "\t\t\t\tObject result = constraints.get(figure);" + NL + "\t\t\t\tif (result == null) {" + NL + "\t\t\t\t\tresult = new ";
  protected final String TEXT_43 = "(0, 0, -1, -1);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_44 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_46 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = "Labels.";
  protected final String TEXT_49 = ");" + NL + "\t}";
  protected final String TEXT_50 = NL + "}";
  protected final String TEXT_51 = NL;
a206 1
String figureQualifiedClassName = null;
d208 1
d210 2
a211 3
}
if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
	figureQualifiedClassName = "org.eclipse.draw2d.RectangleFigure";
d219 1
a219 1
    }
d221 2
d224 1
a224 15
    
// Code fragment that sets shape line width and style.
//
// Parameters:
//
// importManager - ImportUtil ref in code
// viewmap - Viewmap ref in code
// shape - draw2d Shape ref in text
//
{ // private namespace
	ShapeAttributes shapeAttrs = viewmap == null ? null : (ShapeAttributes) viewmap.find(ShapeAttributes.class);
	if (shapeAttrs != null) {
		String lineStyle = shapeAttrs.getLineStyle();
		if (lineStyle != null && lineStyle.trim().length() > 0) {

d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Graphics"));
a227 15
    stringBuffer.append(lineStyle);
    stringBuffer.append(TEXT_28);
    
		}
		if (shapeAttrs.isSetLineWidth()) {

    stringBuffer.append(TEXT_29);
    stringBuffer.append(shapeAttrs.getLineWidth());
    stringBuffer.append(TEXT_30);
    
		}
	}
} // private namespace

    stringBuffer.append(TEXT_31);
d237 1
a237 1
    stringBuffer.append(TEXT_32);
d239 1
a239 1
    stringBuffer.append(TEXT_33);
d241 1
a241 1
    stringBuffer.append(TEXT_34);
d243 1
a243 1
    stringBuffer.append(TEXT_35);
d245 1
a245 1
    stringBuffer.append(TEXT_36);
d247 1
a247 1
    stringBuffer.append(TEXT_37);
d254 1
a254 1
    stringBuffer.append(TEXT_38);
d256 1
a256 1
    stringBuffer.append(TEXT_39);
d258 1
a258 1
    stringBuffer.append(TEXT_40);
d263 1
a263 1
    stringBuffer.append(TEXT_41);
d265 1
a265 1
    stringBuffer.append(TEXT_42);
d267 1
a267 1
    stringBuffer.append(TEXT_43);
d271 1
a271 1
    stringBuffer.append(TEXT_44);
d277 1
a277 1
    stringBuffer.append(TEXT_45);
d279 1
a279 1
    stringBuffer.append(TEXT_46);
d281 1
a281 1
    stringBuffer.append(TEXT_47);
d283 1
a283 1
    stringBuffer.append(TEXT_48);
d285 1
a285 1
    stringBuffer.append(TEXT_49);
d287 1
a287 1
    stringBuffer.append(TEXT_50);
d289 1
a289 1
    stringBuffer.append(TEXT_51);
@


1.22
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d316 1
a316 1
    stringBuffer.append(AccessUtil.getLabelTextId(primaryLabel));
@


1.21
log
@Temporary commenting out the code
@
text
@d24 2
a25 2
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_7 = "());" + NL + "\t\tinstallEditPolicy(EditPolicy.GRAPHICAL_NODE_ROLE, new ";
d27 43
a69 33
  protected final String TEXT_9 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_10 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_11 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_12 = "());";
  protected final String TEXT_13 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createNodeShape() {";
  protected final String TEXT_14 = NL + "\t\treturn new ";
  protected final String TEXT_15 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateNodeShape(Shape shape) {";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = NL + "\tshape.setLineStyle(";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\tshape.setLineWidth(";
  protected final String TEXT_21 = ");";
  protected final String TEXT_22 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodePlate() {";
  protected final String TEXT_23 = NL + "\t\treturn new DefaultSizeNodeFigure(getMapMode().DPtoLP(";
  protected final String TEXT_24 = "), getMapMode().DPtoLP(";
  protected final String TEXT_25 = "));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure figure = createNodePlate();" + NL + "\t\tfigure.setBorder(new RectangularDropShadowLineBorder(0));" + NL + "\t\tfigure.setLayoutManager(new StackLayout());" + NL + "\t\tIFigure shape = createNodeShape();" + NL + "\t\tif (shape instanceof Shape) {" + NL + "\t\t\tdecorateNodeShape((Shape) shape);" + NL + "\t\t}" + NL + "\t\tfigure.add(shape);" + NL + "\t\taddContentPane(shape);" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addContentPane(IFigure shape) {";
  protected final String TEXT_26 = NL + "\t\tcontentPane = new ";
  protected final String TEXT_27 = "();" + NL + "\t\tshape.setLayoutManager(new StackLayout());" + NL + "\t\tshape.add(contentPane);";
  protected final String TEXT_28 = NL + "\t\tcontentPane = shape;";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = " layout = new ";
  protected final String TEXT_31 = "();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);";
  protected final String TEXT_32 = NL + "//\t\tcontentPane.setLayoutManager(new ";
  protected final String TEXT_33 = "());";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_36 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_37 = ".";
  protected final String TEXT_38 = "Labels.";
  protected final String TEXT_39 = ");" + NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
d167 1
d180 6
d187 1
a187 1
    stringBuffer.append(TEXT_7);
d189 1
a189 1
    stringBuffer.append(TEXT_8);
d191 1
a191 1
    stringBuffer.append(TEXT_9);
d193 1
a193 1
    stringBuffer.append(TEXT_10);
d195 1
a195 1
    stringBuffer.append(TEXT_11);
d197 10
a206 1
    stringBuffer.append(TEXT_12);
d208 1
a208 1
    stringBuffer.append(TEXT_13);
d219 1
a219 1
    stringBuffer.append(TEXT_14);
d221 6
a226 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(TEXT_16);
d242 1
a242 1
    stringBuffer.append(TEXT_17);
d244 1
a244 1
    stringBuffer.append(TEXT_18);
d246 1
a246 1
    stringBuffer.append(TEXT_19);
d251 1
a251 1
    stringBuffer.append(TEXT_20);
d253 1
a253 1
    stringBuffer.append(TEXT_21);
d259 1
a259 1
    stringBuffer.append(TEXT_22);
d269 1
a269 1
    stringBuffer.append(TEXT_23);
d271 1
a271 1
    stringBuffer.append(TEXT_24);
d273 1
a273 1
    stringBuffer.append(TEXT_25);
d275 1
a275 1
    stringBuffer.append(TEXT_26);
d277 1
a277 1
    stringBuffer.append(TEXT_27);
d279 1
a279 1
    stringBuffer.append(TEXT_28);
d283 1
a283 1
//if (genNode.getChildContainersPlacement() == CompartmentPlacementKind.TOOLBAR_LITERAL) {
d286 1
a286 1
    stringBuffer.append(TEXT_29);
d288 1
a288 1
    stringBuffer.append(TEXT_30);
d290 1
a290 1
    stringBuffer.append(TEXT_31);
d292 1
a292 1
//} else {
d295 1
a295 1
    stringBuffer.append(TEXT_32);
d297 3
a299 1
    stringBuffer.append(TEXT_33);
d301 1
a301 1
//}
d303 1
a303 1
    stringBuffer.append(TEXT_34);
d309 1
a309 1
    stringBuffer.append(TEXT_35);
d311 1
a311 1
    stringBuffer.append(TEXT_36);
d313 1
a313 1
    stringBuffer.append(TEXT_37);
d315 1
a315 1
    stringBuffer.append(TEXT_38);
d317 1
a317 1
    stringBuffer.append(TEXT_39);
d319 1
a319 1
    stringBuffer.append(TEXT_40);
d321 1
a321 1
    stringBuffer.append(TEXT_41);
@


1.20
log
@Not finished: childnodes could be contained in node, not only in compartment.
@
text
@d50 1
a50 1
  protected final String TEXT_32 = NL + "\t\tcontentPane.setLayoutManager(new ";
@


1.19
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Shape;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.RectangularDropShadowLineBorder;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d47 13
a59 8
  protected final String TEXT_29 = NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tcontentPane.setLayoutManager(layout);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_31 = " getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_32 = ".";
  protected final String TEXT_33 = "Labels.";
  protected final String TEXT_34 = ");" + NL + "\t}";
  protected final String TEXT_35 = NL + "}";
  protected final String TEXT_36 = NL;
d250 6
a255 1
    }
d257 15
d277 1
a277 1
    stringBuffer.append(TEXT_30);
d279 1
a279 1
    stringBuffer.append(TEXT_31);
d281 1
a281 1
    stringBuffer.append(TEXT_32);
d283 1
a283 1
    stringBuffer.append(TEXT_33);
d285 1
a285 1
    stringBuffer.append(TEXT_34);
d287 1
a287 1
    stringBuffer.append(TEXT_35);
d289 1
a289 1
    stringBuffer.append(TEXT_36);
@


1.18
log
@#112318 Do not overwrite paintFigure() method in node edit part when specific figure class is specified
@
text
@d137 9
@


1.17
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@a5 1
import java.util.*;
d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d23 1
a23 1
  protected final String TEXT_5 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d31 11
a41 11
  protected final String TEXT_13 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {";
  protected final String TEXT_14 = " " + NL + "\t\t";
  protected final String TEXT_15 = " node = new ";
  protected final String TEXT_16 = "() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t\t";
  protected final String TEXT_19 = ".setLineStyle(Graphics.";
  protected final String TEXT_20 = ");";
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_23 = NL + "\t\tnode.setDefaultSize(getMapMode().DPtoLP(";
d43 12
a54 8
  protected final String TEXT_25 = "));";
  protected final String TEXT_26 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "Labels.";
  protected final String TEXT_30 = ");" + NL + "\t}";
  protected final String TEXT_31 = NL + "}";
  protected final String TEXT_32 = NL;
d170 7
a176 5
String figureClassName;
if (genNode.getViewmap() instanceof FigureViewmap) {
	figureClassName = importManager.getImportedName(((FigureViewmap) genNode.getViewmap()).getFigureQualifiedClassName());
} else {
	figureClassName = importManager.getImportedName("org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure");
d180 1
a180 1
    stringBuffer.append(figureClassName);
a181 1
    stringBuffer.append(figureClassName);
d184 13
a196 5
for (Iterator it = genNode.getViewmap().getAttributes().iterator(); it.hasNext();) {
	Attributes next = (Attributes) it.next();
	if (next instanceof ShapeAttributes) {
		String figureVarName = "node";
		ShapeAttributes attrs = (ShapeAttributes) next;
d199 4
d204 2
a205 2
String lineStyle = attrs.getLineStyle();
if (lineStyle != null && lineStyle.trim().length() > 0) {
a206 4
    stringBuffer.append(TEXT_18);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(lineStyle);
d208 2
d211 3
a213 2
}
if (attrs.isSetLineWidth()) {
a214 2
    stringBuffer.append(TEXT_21);
    stringBuffer.append(figureVarName);
d216 8
a223 4
    }
    	}
	if (next instanceof DefaultSizeAttributes) {
		DefaultSizeAttributes attrs = (DefaultSizeAttributes) next;
d226 1
a226 1
    stringBuffer.append(attrs.getWidth());
d228 1
a228 1
    stringBuffer.append(attrs.getHeight());
d230 1
a230 4
    
	}
}

d232 6
d243 3
a245 1
    stringBuffer.append(TEXT_27);
d247 1
a247 1
    stringBuffer.append(TEXT_28);
d249 1
a249 1
    stringBuffer.append(TEXT_29);
d251 1
a251 1
    stringBuffer.append(TEXT_30);
d253 1
a253 1
    stringBuffer.append(TEXT_31);
d255 1
a255 1
    stringBuffer.append(TEXT_32);
@


1.16
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d28 1
a28 1
  protected final String TEXT_9 = "\t\t" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
d31 1
a31 1
  protected final String TEXT_12 = "CanonicalEditPolicy());";
d49 3
a51 27
  protected final String TEXT_30 = ");" + NL + "\t}" + NL + "\t";
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_33 = "CanonicalEditPolicy extends ";
  protected final String TEXT_34 = " {" + NL + "\t";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_37 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
  protected final String TEXT_38 = " modelElement = (";
  protected final String TEXT_39 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_40 = "();" + NL + "\t\t\t";
  protected final String TEXT_41 = " nextValue;";
  protected final String TEXT_42 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_43 = " it = ";
  protected final String TEXT_44 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_45 = ") it.next();";
  protected final String TEXT_46 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_47 = ";";
  protected final String TEXT_48 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_49 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_50 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t}";
  protected final String TEXT_52 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_53 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFactoryHint(";
  protected final String TEXT_54 = " elementAdapter) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "" + NL + "\t}\t";
  protected final String TEXT_55 = NL + "}";
  protected final String TEXT_56 = NL;
d156 1
a156 1
    if (genNode.getChildNodes().size() > 0) {
d162 1
a162 1
    stringBuffer.append(genNode.getEditPartClassName());
d230 1
a230 7
    
}

if (genNode.getChildNodes().size() > 0) {
	GenChildContainer childContainer = genNode;
	GenNode containerNode = genNode;

d232 1
a233 70
    stringBuffer.append(childContainer.getEditPartClassName());
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy"));
    stringBuffer.append(TEXT_34);
    
{
	String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
	Collection genNodes = childContainer.getChildNodes();

    stringBuffer.append(TEXT_35);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_41);
    
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_45);
    
	} else {

    stringBuffer.append(TEXT_46);
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_47);
    
	}

    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_50);
    
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_51);
    
	}
}

    stringBuffer.append(TEXT_52);
    
}

    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_54);
    
}

    stringBuffer.append(TEXT_55);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_56);
@


1.15
log
@get rid of 'never used locally' compilation warning
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 50
a75 49
  protected final String TEXT_7 = "());";
  protected final String TEXT_8 = "\t\t" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_9 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_10 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_11 = "CanonicalEditPolicy());";
  protected final String TEXT_12 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {";
  protected final String TEXT_13 = " " + NL + "\t\t";
  protected final String TEXT_14 = " node = new ";
  protected final String TEXT_15 = "() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = ".setLineStyle(Graphics.";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_22 = NL + "\t\tnode.setDefaultSize(getMapMode().DPtoLP(";
  protected final String TEXT_23 = "), getMapMode().DPtoLP(";
  protected final String TEXT_24 = "));";
  protected final String TEXT_25 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(getMapMode().DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = "Labels.";
  protected final String TEXT_29 = ");" + NL + "\t}" + NL + "\t";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_32 = "CanonicalEditPolicy extends ";
  protected final String TEXT_33 = " {" + NL + "\t";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_36 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
  protected final String TEXT_37 = " modelElement = (";
  protected final String TEXT_38 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_39 = "();" + NL + "\t\t\t";
  protected final String TEXT_40 = " nextValue;";
  protected final String TEXT_41 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_42 = " it = ";
  protected final String TEXT_43 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_44 = ") it.next();";
  protected final String TEXT_45 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_46 = ";";
  protected final String TEXT_47 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_48 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_49 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t\t}";
  protected final String TEXT_51 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_52 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFactoryHint(";
  protected final String TEXT_53 = " elementAdapter) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "" + NL + "\t}\t";
  protected final String TEXT_54 = NL + "}";
  protected final String TEXT_55 = NL;
d178 1
a178 3
    
if (genNode.getChildNodes().size() > 0) {

d180 2
d183 1
a183 1
    stringBuffer.append(TEXT_9);
d185 1
a185 1
    stringBuffer.append(TEXT_10);
a186 4
    stringBuffer.append(TEXT_11);
    
}

d188 2
a197 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(figureClassName);
d201 2
d210 1
a210 1
    stringBuffer.append(TEXT_16);
d215 1
a215 1
    stringBuffer.append(TEXT_17);
d217 1
a217 1
    stringBuffer.append(TEXT_18);
d219 1
a219 1
    stringBuffer.append(TEXT_19);
d224 1
a224 1
    stringBuffer.append(TEXT_20);
d226 1
a226 1
    stringBuffer.append(TEXT_21);
d232 1
a232 1
    stringBuffer.append(TEXT_22);
d234 1
a234 1
    stringBuffer.append(TEXT_23);
d236 1
a236 1
    stringBuffer.append(TEXT_24);
d241 1
a241 1
    stringBuffer.append(TEXT_25);
d247 1
a247 1
    stringBuffer.append(TEXT_26);
d249 1
a249 1
    stringBuffer.append(TEXT_27);
d251 1
a251 1
    stringBuffer.append(TEXT_28);
d253 1
a253 1
    stringBuffer.append(TEXT_29);
a260 1
    stringBuffer.append(TEXT_30);
d262 1
d264 1
a264 1
    stringBuffer.append(TEXT_32);
d266 1
a266 1
    stringBuffer.append(TEXT_33);
a271 1
    stringBuffer.append(TEXT_34);
d273 1
a274 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(modelElementInterfaceName);
d278 2
d281 1
a281 1
    stringBuffer.append(TEXT_39);
d283 1
a283 1
    stringBuffer.append(TEXT_40);
d291 1
a291 1
    stringBuffer.append(TEXT_41);
d293 1
a293 1
    stringBuffer.append(TEXT_42);
d295 1
a295 1
    stringBuffer.append(TEXT_43);
d297 1
a297 1
    stringBuffer.append(TEXT_44);
d301 1
a301 1
    stringBuffer.append(TEXT_45);
d303 1
a303 1
    stringBuffer.append(TEXT_46);
d307 1
a307 1
    stringBuffer.append(TEXT_47);
d309 1
a309 1
    stringBuffer.append(TEXT_48);
d311 1
a311 1
    stringBuffer.append(TEXT_49);
d315 1
a315 1
    stringBuffer.append(TEXT_50);
d320 1
a320 1
    stringBuffer.append(TEXT_51);
d324 1
a324 1
    stringBuffer.append(TEXT_52);
d326 1
a326 1
    stringBuffer.append(TEXT_53);
d330 1
a330 1
    stringBuffer.append(TEXT_54);
d332 1
a332 1
    stringBuffer.append(TEXT_55);
@


1.14
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@d76 1
a76 1
	private String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d120 1
a120 1
	private String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
@


1.13
log
@#116655

Generating correct access for all the features.
@
text
@d52 23
a74 30
  protected final String TEXT_33 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_34 = " getSemanticChildrenList() {\t";
  protected final String TEXT_35 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_36 = " modelElement = (";
  protected final String TEXT_37 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_38 = "();" + NL;
  protected final String TEXT_39 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_40 = ");";
  protected final String TEXT_41 = NL + "\t\t\t";
  protected final String TEXT_42 = " featureValue = ";
  protected final String TEXT_43 = ";" + NL + "\t\t\tif (featureValue != null) {" + NL + "\t\t\t\tresult.add(featureValue);" + NL + "\t\t\t}";
  protected final String TEXT_44 = NL + "\t\t\t";
  protected final String TEXT_45 = " featureValues = ";
  protected final String TEXT_46 = ";" + NL + "\t\t\tfor (";
  protected final String TEXT_47 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_48 = " nextValue = (";
  protected final String TEXT_49 = ") it.next();";
  protected final String TEXT_50 = NL + "\t\t\t";
  protected final String TEXT_51 = " nextValue = ";
  protected final String TEXT_52 = ";";
  protected final String TEXT_53 = NL + "\t\t\tif (nextValue != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_54 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_55 = NL + "\t\t\t\tif (";
  protected final String TEXT_56 = ".eINSTANCE.get";
  protected final String TEXT_57 = "().equals(nextEClass)) {" + NL + "\t\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t\t} ";
  protected final String TEXT_58 = NL + "\t\t\t}";
  protected final String TEXT_59 = NL + "\t\t\t}";
  protected final String TEXT_60 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}\t";
  protected final String TEXT_61 = NL + "}";
  protected final String TEXT_62 = NL;
a267 2
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_34);
d269 3
a271 1
String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
d273 1
d275 1
a275 1
    stringBuffer.append(modelElementInterfaceName);
d279 2
a281 42
    stringBuffer.append(TEXT_38);
    
/*
	Since there could e several child nodes with the same childMetaFeatures, but different domainMetaClasses
specified, we are creating a Map{GenFeature -> Collection{GenChildNodes}}. If GenChildNode without specified 
domainMetaClass found, all the rest of GenChildNodes with the same childMetaFeature will be ignored because
all the elements from this childMetaFeature will be treated as "this" type of GenChildNodes (without specified 
domainMetaClass).
*/

Map childFeature2NodesMap = new HashMap();
for (Iterator it = childContainer.getChildNodes().iterator(); it.hasNext();) {
	GenChildNode nextChildNode = (GenChildNode) it.next();
	GenFeature genFeature = nextChildNode.getModelFacet().getChildMetaFeature();
	List genChildNodes; 
	if (!childFeature2NodesMap.containsKey(genFeature)) {
		genChildNodes = new ArrayList();
		childFeature2NodesMap.put(genFeature, genChildNodes);
	} else {
		genChildNodes = (List) childFeature2NodesMap.get(genFeature);
	}

	if (nextChildNode.getDomainMetaClass() == null) {
		genChildNodes.clear();
		genChildNodes.add(nextChildNode);
		continue;
	}
	if (genChildNodes.size() == 1 && ((GenChildNode) genChildNodes.get(0)).getDomainMetaClass() == null) {
		continue;
	}
	genChildNodes.add(nextChildNode);
}
		
// For each childMetaFeature:
for (Iterator it = childFeature2NodesMap.entrySet().iterator(); it.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) it.next();
	GenFeature nextFeature = (GenFeature) nextEntry.getKey();
	List childNodes = (List) nextEntry.getValue();
	if (childNodes.size() == 1 && ((GenChildNode) childNodes.get(0)).getDomainMetaClass() == null) {
// GenChildNode without specified domainMetaClass found:
		if (nextFeature.isListType()) {

d283 1
a283 1
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
d286 5
a290 1
		} else {
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName(nextFeature.getTypeGenClass().getQualifiedInterfaceName()));
d295 1
a295 1
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
d297 2
d300 1
a300 7
		}
// Continue with the next entry in the Map
		continue;
	}

// GenChildNodes with specified domainMetaClass found:			
	if (nextFeature.isListType()) {
a301 2
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d303 1
a303 1
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
d305 3
a307 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d314 1
a314 1
	} else {
a316 4
    stringBuffer.append(importManager.getImportedName(nextFeature.getTypeGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
    stringBuffer.append(TEXT_52);
d319 1
d321 1
a321 23
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_54);
    			
	for (Iterator childNodesIterator = childNodes.iterator(); childNodesIterator.hasNext();) {
		GenChildNode nextChildNode = (GenChildNode) childNodesIterator.next();
		GenClass domainMetaclass = nextChildNode.getDomainMetaClass();

    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(domainMetaclass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(domainMetaclass.getClassifierAccessorName());
    stringBuffer.append(TEXT_57);
    stringBuffer.append(childNodesIterator.hasNext() ? "else" : "");
    
	}
	if (nextFeature.isListType()) {

    stringBuffer.append(TEXT_58);
    
	}

    stringBuffer.append(TEXT_59);
d325 3
a327 1
    stringBuffer.append(TEXT_60);
d331 1
a331 1
    stringBuffer.append(TEXT_61);
d333 1
a333 1
    stringBuffer.append(TEXT_62);
@


1.12
log
@#116448
Correcting CanonicalEditPolicy + SemanticEditPolicy to support references with multiplicities "1","n".
@
text
@d8 2
a9 2
public class NodeEditPartGenerator
{
d58 14
a71 14
  protected final String TEXT_39 = NL + "\t\t\tresult.addAll(modelElement.";
  protected final String TEXT_40 = "());";
  protected final String TEXT_41 = NL + "\t\t\tObject featureValue = modelElement.";
  protected final String TEXT_42 = "();" + NL + "\t\t\tif (featureValue != null) {" + NL + "\t\t\t\tresult.add(featureValue);" + NL + "\t\t\t}";
  protected final String TEXT_43 = NL + "\t\t\t";
  protected final String TEXT_44 = " featureValues = modelElement.";
  protected final String TEXT_45 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_46 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_47 = " nextValue = (";
  protected final String TEXT_48 = ") it.next();";
  protected final String TEXT_49 = NL + "\t\t\t";
  protected final String TEXT_50 = " nextValue = (";
  protected final String TEXT_51 = ") modelElement.";
  protected final String TEXT_52 = "();";
d83 82
a164 1
  public String generate(Object argument)
d329 1
a329 1
    stringBuffer.append(nextFeature.getGetAccessor());
d335 1
a335 1
    stringBuffer.append(nextFeature.getGetAccessor());
d337 2
d348 1
a348 1
    stringBuffer.append(TEXT_43);
a349 2
    stringBuffer.append(TEXT_44);
    stringBuffer.append(nextFeature.getGetAccessor());
d351 2
a353 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d357 2
a361 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d365 1
a365 1
    stringBuffer.append(nextFeature.getGetAccessor());
d405 1
a405 1
}
@


1.11
log
@#115972 generate single class with semantic hints
@
text
@d58 4
a61 4
  protected final String TEXT_39 = NL + "\t\t\tresult.";
  protected final String TEXT_40 = "(((";
  protected final String TEXT_41 = ") modelElement).";
  protected final String TEXT_42 = "());";
d63 19
a81 20
  protected final String TEXT_44 = " featureValues = ((";
  protected final String TEXT_45 = ") modelElement).";
  protected final String TEXT_46 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_47 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_48 = " nextValue = (";
  protected final String TEXT_49 = ") it.next();";
  protected final String TEXT_50 = NL + "\t\t\t";
  protected final String TEXT_51 = " nextValue = (";
  protected final String TEXT_52 = ") ((";
  protected final String TEXT_53 = ") modelElement).";
  protected final String TEXT_54 = "();";
  protected final String TEXT_55 = NL + "\t\t\t";
  protected final String TEXT_56 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_57 = NL + "\t\t\tif (";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "().equals(nextEClass)) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t} ";
  protected final String TEXT_60 = NL + "\t\t\t}";
  protected final String TEXT_61 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}\t";
  protected final String TEXT_62 = NL + "}";
  protected final String TEXT_63 = NL;
d207 8
d238 1
d244 2
d248 1
a248 1
    stringBuffer.append(nextFeature.isListType() ? "addAll" : "add");
d250 3
a252 1
    stringBuffer.append(modelElementInterfaceName);
d257 2
d261 2
a262 1
			
d268 1
a268 1
    stringBuffer.append(modelElementInterfaceName);
d270 1
a270 1
    stringBuffer.append(nextFeature.getGetAccessor());
d272 1
a272 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a275 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_49);
d279 2
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a285 4
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(nextFeature.getGetAccessor());
    stringBuffer.append(TEXT_54);
d289 1
a289 1
    stringBuffer.append(TEXT_55);
d291 1
a291 1
    stringBuffer.append(TEXT_56);
d297 1
a297 1
    stringBuffer.append(TEXT_57);
d299 1
a299 1
    stringBuffer.append(TEXT_58);
d301 1
a301 1
    stringBuffer.append(TEXT_59);
d307 1
a307 1
    stringBuffer.append(TEXT_60);
d310 3
d315 1
a315 1
    stringBuffer.append(TEXT_61);
d319 2
a321 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_63);
@


1.10
log
@Using MapMode from editpart
@
text
@d46 37
a82 36
  protected final String TEXT_27 = ".Labels.";
  protected final String TEXT_28 = ");" + NL + "\t}" + NL + "\t";
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_31 = "CanonicalEditPolicy extends ";
  protected final String TEXT_32 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_33 = " getSemanticChildrenList() {\t";
  protected final String TEXT_34 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_35 = " modelElement = (";
  protected final String TEXT_36 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_37 = "();" + NL;
  protected final String TEXT_38 = NL + "\t\t\tresult.";
  protected final String TEXT_39 = "(((";
  protected final String TEXT_40 = ") modelElement).";
  protected final String TEXT_41 = "());";
  protected final String TEXT_42 = NL + "\t\t\t";
  protected final String TEXT_43 = " featureValues = ((";
  protected final String TEXT_44 = ") modelElement).";
  protected final String TEXT_45 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_46 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_47 = " nextValue = (";
  protected final String TEXT_48 = ") it.next();";
  protected final String TEXT_49 = NL + "\t\t\t";
  protected final String TEXT_50 = " nextValue = (";
  protected final String TEXT_51 = ") ((";
  protected final String TEXT_52 = ") modelElement).";
  protected final String TEXT_53 = "();";
  protected final String TEXT_54 = NL + "\t\t\t";
  protected final String TEXT_55 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_56 = NL + "\t\t\tif (";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "().equals(nextEClass)) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t} ";
  protected final String TEXT_59 = NL + "\t\t\t}";
  protected final String TEXT_60 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}\t";
  protected final String TEXT_61 = NL + "}";
  protected final String TEXT_62 = NL;
d173 1
a173 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d178 2
d181 1
a181 1
    stringBuffer.append(TEXT_28);
a188 1
    stringBuffer.append(TEXT_29);
d190 1
d192 1
a192 1
    stringBuffer.append(TEXT_31);
d194 1
a194 1
    stringBuffer.append(TEXT_32);
d196 1
a196 1
    stringBuffer.append(TEXT_33);
a199 2
    stringBuffer.append(TEXT_34);
    stringBuffer.append(modelElementInterfaceName);
d203 2
d206 1
a206 1
    stringBuffer.append(TEXT_37);
d237 1
a237 1
    stringBuffer.append(TEXT_38);
d239 1
a239 1
    stringBuffer.append(TEXT_39);
d241 1
a241 1
    stringBuffer.append(TEXT_40);
d243 1
a243 1
    stringBuffer.append(TEXT_41);
d250 1
a250 1
    stringBuffer.append(TEXT_42);
d252 1
a252 1
    stringBuffer.append(TEXT_43);
d254 1
a254 1
    stringBuffer.append(TEXT_44);
d256 1
a256 1
    stringBuffer.append(TEXT_45);
a257 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d261 2
a265 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d269 2
d272 1
a272 1
    stringBuffer.append(TEXT_52);
d274 1
a274 1
    stringBuffer.append(TEXT_53);
d278 1
a278 1
    stringBuffer.append(TEXT_54);
d280 1
a280 1
    stringBuffer.append(TEXT_55);
d286 1
a286 1
    stringBuffer.append(TEXT_56);
d288 1
a288 1
    stringBuffer.append(TEXT_57);
d290 1
a290 1
    stringBuffer.append(TEXT_58);
d296 1
a296 1
    stringBuffer.append(TEXT_59);
d301 1
a301 1
    stringBuffer.append(TEXT_60);
d305 1
a305 1
    stringBuffer.append(TEXT_61);
d307 1
a307 1
    stringBuffer.append(TEXT_62);
@


1.9
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d41 2
a42 2
  protected final String TEXT_22 = NL + "\t\tnode.setDefaultSize(MapModeUtil.getMapMode().DPtoLP(";
  protected final String TEXT_23 = "), MapModeUtil.getMapMode().DPtoLP(";
d44 1
a44 1
  protected final String TEXT_25 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapModeUtil.getMapMode().DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
@


1.8
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d3 1
d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 56
a81 19
  protected final String TEXT_7 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {";
  protected final String TEXT_8 = " " + NL + "\t\t";
  protected final String TEXT_9 = " node = new ";
  protected final String TEXT_10 = "() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t\t";
  protected final String TEXT_13 = ".setLineStyle(Graphics.";
  protected final String TEXT_14 = ");";
  protected final String TEXT_15 = NL + "\t\t";
  protected final String TEXT_16 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_17 = NL + "\t\tnode.setDefaultSize(MapMode.DPtoLP(";
  protected final String TEXT_18 = "), MapMode.DPtoLP(";
  protected final String TEXT_19 = "));";
  protected final String TEXT_20 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapMode.DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_22 = ".Labels.";
  protected final String TEXT_23 = ");" + NL + "\t}";
  protected final String TEXT_24 = NL + "}";
  protected final String TEXT_25 = NL;
d104 14
d125 1
a125 1
    stringBuffer.append(TEXT_8);
d127 1
a127 1
    stringBuffer.append(TEXT_9);
d129 1
a129 1
    stringBuffer.append(TEXT_10);
d137 1
a137 1
    stringBuffer.append(TEXT_11);
d142 1
a142 1
    stringBuffer.append(TEXT_12);
d144 1
a144 1
    stringBuffer.append(TEXT_13);
d146 1
a146 1
    stringBuffer.append(TEXT_14);
d151 1
a151 1
    stringBuffer.append(TEXT_15);
d153 1
a153 1
    stringBuffer.append(TEXT_16);
d159 1
a159 1
    stringBuffer.append(TEXT_17);
d161 1
a161 1
    stringBuffer.append(TEXT_18);
d163 1
a163 1
    stringBuffer.append(TEXT_19);
d168 1
a168 1
    stringBuffer.append(TEXT_20);
d175 1
a175 1
    stringBuffer.append(TEXT_21);
d177 1
a177 1
    stringBuffer.append(TEXT_22);
d179 125
a303 3
    stringBuffer.append(TEXT_23);
    }
    stringBuffer.append(TEXT_24);
d305 1
a305 1
    stringBuffer.append(TEXT_25);
@


1.7
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 20
a43 19
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {";
  protected final String TEXT_7 = " " + NL + "\t\t";
  protected final String TEXT_8 = " node = new ";
  protected final String TEXT_9 = "() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t\t";
  protected final String TEXT_12 = ".setLineStyle(Graphics.";
  protected final String TEXT_13 = ");";
  protected final String TEXT_14 = NL + "\t\t";
  protected final String TEXT_15 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_16 = NL + "\t\tnode.setDefaultSize(MapMode.DPtoLP(";
  protected final String TEXT_17 = "), MapMode.DPtoLP(";
  protected final String TEXT_18 = "));";
  protected final String TEXT_19 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapMode.DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_21 = ".Labels.";
  protected final String TEXT_22 = ");" + NL + "\t}";
  protected final String TEXT_23 = NL + "}";
  protected final String TEXT_24 = NL;
d63 2
a72 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(figureClassName);
d76 2
d85 1
a85 1
    stringBuffer.append(TEXT_10);
d90 1
a90 1
    stringBuffer.append(TEXT_11);
d92 1
a92 1
    stringBuffer.append(TEXT_12);
d94 1
a94 1
    stringBuffer.append(TEXT_13);
d99 1
a99 1
    stringBuffer.append(TEXT_14);
d101 1
a101 1
    stringBuffer.append(TEXT_15);
d107 1
a107 1
    stringBuffer.append(TEXT_16);
d109 1
a109 1
    stringBuffer.append(TEXT_17);
d111 1
a111 1
    stringBuffer.append(TEXT_18);
d116 1
a116 1
    stringBuffer.append(TEXT_19);
d123 1
a123 1
    stringBuffer.append(TEXT_20);
d125 1
a125 1
    stringBuffer.append(TEXT_21);
d127 1
a127 1
    stringBuffer.append(TEXT_22);
d129 1
a129 1
    stringBuffer.append(TEXT_23);
d131 1
a131 1
    stringBuffer.append(TEXT_24);
@


1.6
log
@[dstadnik] #112313 compilation errors when using DefaultSizeAttrs
@
text
@d22 10
a31 10
  protected final String TEXT_4 = NL + "import ";
  protected final String TEXT_5 = ".";
  protected final String TEXT_6 = ";";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {";
  protected final String TEXT_10 = " " + NL + "\t\t";
  protected final String TEXT_11 = " node = new ";
  protected final String TEXT_12 = "() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_13 = NL;
d33 10
a42 13
  protected final String TEXT_15 = ".setLineStyle(Graphics.";
  protected final String TEXT_16 = ");";
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_19 = NL + "\t\tnode.setDefaultSize(MapMode.DPtoLP(";
  protected final String TEXT_20 = "), MapMode.DPtoLP(";
  protected final String TEXT_21 = "));";
  protected final String TEXT_22 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapMode.DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_23 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = ");" + NL + "\t}";
  protected final String TEXT_26 = NL + "}";
  protected final String TEXT_27 = NL;
d56 1
a56 1
    if (genNode.hasNameToEdit()) {
d58 1
a58 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d60 1
a60 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genNode));
a61 7
    }
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_9);
d70 1
a70 1
    stringBuffer.append(TEXT_10);
d72 1
a72 1
    stringBuffer.append(TEXT_11);
d74 3
a76 2
    stringBuffer.append(TEXT_12);
    for (Iterator it = genNode.getViewmap().getAttributes().iterator(); it.hasNext();) {
d82 1
a82 1
    stringBuffer.append(TEXT_13);
d87 1
a87 1
    stringBuffer.append(TEXT_14);
d89 1
a89 1
    stringBuffer.append(TEXT_15);
d91 1
a91 1
    stringBuffer.append(TEXT_16);
d96 1
a96 1
    stringBuffer.append(TEXT_17);
d98 1
a98 1
    stringBuffer.append(TEXT_18);
d104 1
a104 1
    stringBuffer.append(TEXT_19);
d106 1
a106 1
    stringBuffer.append(TEXT_20);
d108 3
a110 2
    stringBuffer.append(TEXT_21);
    	}
d113 11
d125 1
a125 1
    if (genNode.hasNameToEdit()) {
d127 1
a127 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genNode));
a128 6
    stringBuffer.append(AccessUtil.getNameSemanticHint(genNode));
    stringBuffer.append(TEXT_25);
    }
    stringBuffer.append(TEXT_26);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_27);
@


1.5
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d28 18
a45 17
  protected final String TEXT_10 = " " + NL + "\t\tNodeFigure node = new ";
  protected final String TEXT_11 = "() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};";
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = NL + "\t\t";
  protected final String TEXT_14 = ".setLineStyle(Graphics.";
  protected final String TEXT_15 = ");";
  protected final String TEXT_16 = NL + "\t\t";
  protected final String TEXT_17 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_18 = NL + "\t\tnode.setDefaultSize(MapMode.DPtoLP(";
  protected final String TEXT_19 = "), MapMode.DPtoLP(";
  protected final String TEXT_20 = "));";
  protected final String TEXT_21 = NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapMode.DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_23 = ".";
  protected final String TEXT_24 = ");" + NL + "\t}";
  protected final String TEXT_25 = NL + "}";
  protected final String TEXT_26 = NL;
d83 2
d91 1
a91 1
    stringBuffer.append(TEXT_12);
d96 1
a96 1
    stringBuffer.append(TEXT_13);
d98 1
a98 1
    stringBuffer.append(TEXT_14);
d100 1
a100 1
    stringBuffer.append(TEXT_15);
d105 1
a105 1
    stringBuffer.append(TEXT_16);
d107 1
a107 1
    stringBuffer.append(TEXT_17);
d113 1
a113 1
    stringBuffer.append(TEXT_18);
d115 1
a115 1
    stringBuffer.append(TEXT_19);
d117 1
a117 1
    stringBuffer.append(TEXT_20);
d121 1
a121 1
    stringBuffer.append(TEXT_21);
d123 1
a123 1
    stringBuffer.append(TEXT_22);
d125 1
a125 1
    stringBuffer.append(TEXT_23);
d127 1
a127 1
    stringBuffer.append(TEXT_24);
d129 1
a129 1
    stringBuffer.append(TEXT_25);
d131 1
a131 1
    stringBuffer.append(TEXT_26);
@


1.4
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d60 1
a60 1
    stringBuffer.append(genDiagram.getEditProvidersPackageName());
@


1.3
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d65 1
@


1.2
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d5 1
d20 25
a44 12
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.StackLayout;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.DefaultSizeNodeFigure;" + NL + "import org.eclipse.gmf.runtime.gef.ui.figures.NodeFigure;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_3 = NL + "import ";
  protected final String TEXT_4 = ".";
  protected final String TEXT_5 = ";";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends ShapeNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure contentPane;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure node = new DefaultSizeNodeFigure(MapMode.DPtoLP(40), MapMode.DPtoLP(30)) {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.fillRectangle(getClientArea());" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapMode.DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart getPrimaryChildEditPart() {" + NL + "\t\treturn getChildBySemanticHint(";
  protected final String TEXT_10 = ".";
  protected final String TEXT_11 = ");" + NL + "\t}";
  protected final String TEXT_12 = NL + "}";
  protected final String TEXT_13 = NL;
d56 2
d59 1
a59 1
    stringBuffer.append(TEXT_3);
d61 1
a61 1
    stringBuffer.append(TEXT_4);
d63 1
a63 1
    stringBuffer.append(TEXT_5);
a64 2
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genNode.getEditPartClassName());
d68 1
a68 1
    if (genNode.hasNameToEdit()) {
d70 8
a77 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genNode));
d79 1
a79 1
    stringBuffer.append(AccessUtil.getNameSemanticHint(genNode));
d81 6
a86 1
    }
d88 4
d93 35
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d25 1
a25 1
  protected final String TEXT_8 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected NodeFigure createNodeFigure() {" + NL + "\t\tNodeFigure node = new DefaultSizeNodeFigure(MapMode.DPtoLP(50), MapMode.DPtoLP(50)) {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tsuper.paintFigure(graphics);" + NL + "\t\t\t\tgraphics.drawRectangle(getClientArea());" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tnode.setLayoutManager(new StackLayout());" + NL + "\t\tnode.add(contentPane = createContentPane());" + NL + "\t\treturn node;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createContentPane() {" + NL + "\t\tIFigure plate = new Figure();" + NL + "\t\tConstrainedToolbarLayout layout = new ConstrainedToolbarLayout();" + NL + "\t\tlayout.setSpacing(MapMode.DPtoLP(5));" + NL + "\t\tplate.setLayoutManager(layout);" + NL + "\t\treturn plate;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getContentPane() {" + NL + "\t\tif (contentPane != null) {" + NL + "\t\t\treturn contentPane;" + NL + "\t\t}" + NL + "\t\treturn super.getContentPane();" + NL + "\t}";
@

