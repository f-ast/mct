head	1.33;
access;
symbols
	v20081022-1925:1.33
	v20081015-1925:1.33
	v20081008-1925:1.33
	v20081001-1925:1.33
	v20080924-1925:1.33
	v20080917-1925:1.33
	v20080911-1728:1.33
	v20080910-1520:1.33
	v20080903-1520:1.33
	v20080827-1520:1.33
	v20080813-1520:1.33
	v20080806-1520:1.33
	v20070608-1300:1.32
	v20070605-1400:1.32
	v20070601-1400:1.31
	v20070525-1500:1.31
	v20070520-1200:1.31
	v20070518-1300:1.30
	v20070504-1000:1.30
	v20070427-0600:1.30
	v20070420-1000:1.29
	v20070413-1300:1.29
	v20070405-1100:1.29
	v20070403-1500:1.29
	v20070330-1300:1.29
	v20060330-1300:1.29
	v20070322-1100:1.29
	v20060316-0600:1.29
	v20070307-0700:1.29
	v20070301-1200:1.29
	v20070228-2000:1.29
	v20070221-1500:1.29
	v20070208-1800:1.29
	v20070202-0200:1.28
	v20070103-0300:1.28
	M4_20:1.28
	v20061222-1800:1.28
	v20061218-1200:1.28
	v20061214-0000:1.28
	v20061120-1300:1.28
	M3_20:1.28
	v20061117-0800:1.28
	v20061027-1200:1.28
	v20061020-1000:1.28
	v20061013-1330:1.28
	v20060919-0800:1.28
	v20060907-1100:1.28
	M1_20:1.28
	v20060904-1500:1.28
	v20060824-1600:1.28
	v20060817-1500:1.28
	v20060728-0500:1.28
	v20060713-1700:1.28
	R1_0_maintenance:1.28.0.2
	R1_0:1.28
	v20060627-1200:1.28
	v20060626-1420:1.28
	v20060620-0400:1.28
	v20060616-1400:1.28
	v20060616-1200:1.28
	v20060609-1400:1.28
	v20060531-1730:1.27
	v20060530-1930:1.27
	v20060526-1200:1.26
	v20060519-1300:1.26
	v20060519-0800:1.26
	v20060512-1000:1.25
	I20060512-1000:1.25
	I20060505-1400:1.25
	I20060428-1300:1.25
	I20060424-0500:1.25
	I20060424-0300:1.25
	M6_10:1.25
	I20060407-1200:1.22
	I20060331-1000:1.21
	I20060324-0300:1.21
	I20060317-1300:1.21
	I20060317-1200:1.21
	I20060316-1300:1.21
	I20060309-1300:1.21
	M5_10:1.20
	S20060303-1600:1.20
	I20060227-1730:1.20
	I20060216-1945:1.20
	I20060210-1715:1.20
	I20060209-1815:1.20
	I20060203-0830:1.17
	I20060202-1415:1.17
	I20060129-1145:1.16
	I20060127-0900:1.14
	I20060120-1530:1.8
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.6
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.33
date	2007.06.12.23.41.58;	author dstadnik;	state dead;
branches;
next	1.32;
commitid	2e6e466f2f424567;

1.32
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.31;
commitid	17ef46643bcf4567;

1.31
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.30;
commitid	7de14650454a4567;

1.30
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.29;
commitid	78b462dc68e4567;

1.29
date	2007.01.17.13.12.34;	author ashatalin;	state Exp;
branches;
next	1.28;
commitid	3d0045ae20c04567;

1.28
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.22;

1.22
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.31.13.23.03;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.27.21.19.10;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.27.14.07.12;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.27.12.18.26;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.26.12.54.08;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.26.12.24.07;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.25.16.43.38;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.24.12.01.20;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.24.10.23.26;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.21.11.49.45;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.10.18.32.55;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.07.15.26.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.33
log
@[192029] Rewrite modeling assistant provider in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ModelingAssistantProviderGenerator
{
  protected static String nl;
  public static synchronized ModelingAssistantProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ModelingAssistantProviderGenerator result = new ModelingAssistantProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import java.util.ArrayList;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Display;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.dialogs.ElementListSelectionDialog;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_6 = NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_7 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_8 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_9 = ".";
  protected final String TEXT_10 = ");";
  protected final String TEXT_11 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_12 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSource(IAdaptable source) {";
  protected final String TEXT_14 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_15 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_17 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_21 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnTarget(IAdaptable target) {";
  protected final String TEXT_22 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_23 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_24 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_25 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = ");";
  protected final String TEXT_28 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {";
  protected final String TEXT_30 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_31 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_32 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_33 = NL + "\t\t\tif (targetEditPart instanceof ";
  protected final String TEXT_34 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = ");" + NL + "\t\t\t}";
  protected final String TEXT_37 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForSource(IAdaptable target, IElementType relationshipType) {";
  protected final String TEXT_39 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_40 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_41 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_42 = NL + "\t\t\tif (relationshipType == ";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = ");" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForTarget(IAdaptable source, IElementType relationshipType) {";
  protected final String TEXT_49 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_50 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_51 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_52 = NL + "\t\t\tif (relationshipType == ";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_55 = ".";
  protected final String TEXT_56 = ");" + NL + "\t\t\t}";
  protected final String TEXT_57 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_58 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(target, getTypesForSource(target, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(source, getTypesForTarget(source, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectExistingElement(IAdaptable host, Collection types) {" + NL + "\t\tif (types.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tif (editPart == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tDiagram diagram = (Diagram) editPart.getRoot().getContents().getModel();" + NL + "\t\tCollection elements = new HashSet();" + NL + "\t\tfor (Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {" + NL + "\t\t\tEObject element = (EObject) it.next();" + NL + "\t\t\tif (isApplicableElement(element, types)) {" + NL + "\t\t\t\telements.add(element);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (elements.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isApplicableElement(EObject element, Collection types) {" + NL + "\t\tIElementType type = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\treturn types.contains(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectElement(EObject[] elements) {" + NL + "\t\tShell shell = Display.getCurrent().getActiveShell();" + NL + "\t\tILabelProvider labelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_59 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\tElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);" + NL + "\t\tdialog.setMessage(\"Available domain model elements:\");" + NL + "\t\tdialog.setTitle(\"Select domain model element\");" + NL + "\t\tdialog.setMultipleSelection(false);" + NL + "\t\tdialog.setElements(elements);" + NL + "\t\tEObject selected = null;" + NL + "\t\tif (dialog.open() == Window.OK) {" + NL + "\t\t\tselected = (EObject) dialog.getFirstResult();" + NL + "\t\t}" + NL + "\t\treturn selected;" + NL + "\t}" + NL + "}";
  protected final String TEXT_60 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getModelingAssistantProviderClassName());
    stringBuffer.append(TEXT_5);
    
for (Iterator contents = genDiagram.getAllContainers().iterator(); contents.hasNext(); ) {
	GenContainerBase genContainer = (GenContainerBase) contents.next();
	if (genContainer instanceof GenCompartment && ((GenCompartment) genContainer).isListLayout()) {
		continue;
	}
	List children = new ArrayList(genContainer.getContainedNodes());
	if (genContainer instanceof GenNode) {
		for (Iterator compartments = ((GenNode) genContainer).getCompartments().iterator(); compartments.hasNext(); ) {
			GenCompartment compartment = (GenCompartment) compartments.next();
			if (compartment.isListLayout()) {
				children.addAll(compartment.getContainedNodes());
			}
		}
	}
	if (!children.isEmpty()) {

    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    
			for (int i = 0; i < children.size(); i++) {
				String id = ((GenNode) children.get(i)).getUniqueIdentifier();

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_10);
    			}
    stringBuffer.append(TEXT_11);
    
	}
}

    stringBuffer.append(TEXT_12);
    
Map outgoingLinks = new LinkedHashMap(); // source -> links going from the source
Map incomingLinks = new LinkedHashMap(); // target -> links coming to the target
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext(); ) {
	GenLink genLink = (GenLink) links.next();
	for (Iterator sources = genLink.getAssistantSources().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();
		Collection value = (Collection) outgoingLinks.get(source);
		if (value == null) {
			value = new LinkedHashSet();
			outgoingLinks.put(source, value);
		}
		value.add(genLink);
	}
	for (Iterator targets = genLink.getAssistantTargets().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();
		Collection value = (Collection) incomingLinks.get(target);
		if (value == null) {
			value = new LinkedHashSet();
			incomingLinks.put(target, value);
		}
		value.add(genLink);
	}
}

    stringBuffer.append(TEXT_13);
    if (!outgoingLinks.isEmpty()) {
    stringBuffer.append(TEXT_14);
    
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();

    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(source.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();

    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_19);
    		}
    stringBuffer.append(TEXT_20);
    
	}
}

    stringBuffer.append(TEXT_21);
    if (!incomingLinks.isEmpty()) {
    stringBuffer.append(TEXT_22);
    
	for (Iterator targets = incomingLinks.keySet().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();

    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName(target.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_24);
    
		for (Iterator links = ((Collection) incomingLinks.get(target)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();

    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_27);
    		}
    stringBuffer.append(TEXT_28);
    
	}
}

    stringBuffer.append(TEXT_29);
    if (!outgoingLinks.isEmpty()) {
    stringBuffer.append(TEXT_30);
    
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();

    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(source.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator targets = genLink.getAssistantTargets().iterator(); targets.hasNext(); ) {
				GenCommonBase target = (GenCommonBase) targets.next();

    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(target.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_36);
    
			}
		}

    stringBuffer.append(TEXT_37);
    
	}
}

    stringBuffer.append(TEXT_38);
    if (!incomingLinks.isEmpty()) {
    stringBuffer.append(TEXT_39);
    
	for (Iterator targets = incomingLinks.keySet().iterator(); targets.hasNext(); ) {
		GenCommonBase target = (GenCommonBase) targets.next();

    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(target.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_41);
    
		for (Iterator links = ((Collection) incomingLinks.get(target)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator sources = genLink.getAssistantSources().iterator(); sources.hasNext(); ) {
				GenCommonBase source = (GenCommonBase) sources.next();

    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(source.getUniqueIdentifier());
    stringBuffer.append(TEXT_46);
    
			}
		}

    stringBuffer.append(TEXT_47);
    
	}
}

    stringBuffer.append(TEXT_48);
    if (!outgoingLinks.isEmpty()) {
    stringBuffer.append(TEXT_49);
    
	for (Iterator sources = outgoingLinks.keySet().iterator(); sources.hasNext(); ) {
		GenCommonBase source = (GenCommonBase) sources.next();

    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(source.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    
		for (Iterator links = ((Collection) outgoingLinks.get(source)).iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
			for (Iterator targets = genLink.getAssistantTargets().iterator(); targets.hasNext(); ) {
				GenCommonBase target = (GenCommonBase) targets.next();

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(target.getUniqueIdentifier());
    stringBuffer.append(TEXT_56);
    
			}
		}

    stringBuffer.append(TEXT_57);
    
	}
}

    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_59);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_60);
    return stringBuffer.toString();
  }
}
@


1.32
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.31
log
@Anna Karyakina's migration fix
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.30
log
@follow consisted spacing policy
@
text
@d19 60
a78 61
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.ArrayList;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Display;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.dialogs.ElementListSelectionDialog;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_7 = NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_8 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_9 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_10 = ".";
  protected final String TEXT_11 = ");";
  protected final String TEXT_12 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_13 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}";
  protected final String TEXT_14 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSource(IAdaptable source) {";
  protected final String TEXT_15 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_16 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_17 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_18 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_19 = ".";
  protected final String TEXT_20 = ");";
  protected final String TEXT_21 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_22 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnTarget(IAdaptable target) {";
  protected final String TEXT_23 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_24 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_25 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_26 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = ");";
  protected final String TEXT_29 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_30 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {";
  protected final String TEXT_31 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_32 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_33 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_34 = NL + "\t\t\tif (targetEditPart instanceof ";
  protected final String TEXT_35 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_36 = ".";
  protected final String TEXT_37 = ");" + NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_39 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForSource(IAdaptable target, IElementType relationshipType) {";
  protected final String TEXT_40 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_41 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_42 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_43 = NL + "\t\t\tif (relationshipType == ";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = ");" + NL + "\t\t\t}";
  protected final String TEXT_48 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_49 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForTarget(IAdaptable source, IElementType relationshipType) {";
  protected final String TEXT_50 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_51 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_52 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_53 = NL + "\t\t\tif (relationshipType == ";
  protected final String TEXT_54 = ".";
  protected final String TEXT_55 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_56 = ".";
  protected final String TEXT_57 = ");" + NL + "\t\t\t}";
  protected final String TEXT_58 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(target, getTypesForSource(target, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(source, getTypesForTarget(source, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectExistingElement(IAdaptable host, Collection types) {" + NL + "\t\tif (types.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tif (editPart == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tDiagram diagram = (Diagram) editPart.getRoot().getContents().getModel();" + NL + "\t\tCollection elements = new HashSet();" + NL + "\t\tfor (Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {" + NL + "\t\t\tEObject element = (EObject) it.next();" + NL + "\t\t\tif (isApplicableElement(element, types)) {" + NL + "\t\t\t\telements.add(element);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (elements.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isApplicableElement(EObject element, Collection types) {" + NL + "\t\tIElementType type = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\treturn types.contains(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectElement(EObject[] elements) {" + NL + "\t\tShell shell = Display.getCurrent().getActiveShell();" + NL + "\t\tILabelProvider labelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_60 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\tElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);" + NL + "\t\tdialog.setMessage(\"Available domain model elements:\");" + NL + "\t\tdialog.setTitle(\"Select domain model element\");" + NL + "\t\tdialog.setMultipleSelection(false);" + NL + "\t\tdialog.setElements(elements);" + NL + "\t\tEObject selected = null;" + NL + "\t\tif (dialog.open() == Window.OK) {" + NL + "\t\t\tselected = (EObject) dialog.getFirstResult();" + NL + "\t\t}" + NL + "\t\treturn selected;" + NL + "\t}" + NL + "}";
  protected final String TEXT_61 = NL;
a86 1
    stringBuffer.append(TEXT_1);
d91 2
a93 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d96 2
d99 1
a99 1
    importManager.markImportLocation(stringBuffer);
a100 2
    stringBuffer.append(genDiagram.getModelingAssistantProviderClassName());
    stringBuffer.append(TEXT_6);
d118 2
a120 2
    stringBuffer.append(importManager.getImportedName(genContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_8);
d125 2
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d130 1
a130 1
    stringBuffer.append(id);
a131 2
    			}
    stringBuffer.append(TEXT_12);
d136 1
a136 1
    stringBuffer.append(TEXT_13);
d162 2
a164 2
    if (!outgoingLinks.isEmpty()) {
    stringBuffer.append(TEXT_15);
d169 2
a171 2
    stringBuffer.append(importManager.getImportedName(source.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_17);
d176 2
d179 1
a179 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d181 1
a181 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a182 2
    		}
    stringBuffer.append(TEXT_21);
d187 2
a189 2
    if (!incomingLinks.isEmpty()) {
    stringBuffer.append(TEXT_23);
d194 2
a196 2
    stringBuffer.append(importManager.getImportedName(target.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_25);
d201 2
d204 1
a204 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d206 1
a206 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a207 2
    		}
    stringBuffer.append(TEXT_29);
d212 2
a214 2
    if (!outgoingLinks.isEmpty()) {
    stringBuffer.append(TEXT_31);
d219 2
a221 2
    stringBuffer.append(importManager.getImportedName(source.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_33);
d228 2
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName(target.getEditPartQualifiedClassName()));
d233 1
a233 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a234 2
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_37);
d239 1
a239 1
    stringBuffer.append(TEXT_38);
d244 2
a246 2
    if (!incomingLinks.isEmpty()) {
    stringBuffer.append(TEXT_40);
d251 2
a253 2
    stringBuffer.append(importManager.getImportedName(target.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_42);
d260 2
d263 2
a265 2
    stringBuffer.append(TEXT_44);
    stringBuffer.append(genLink.getUniqueIdentifier());
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a268 2
    stringBuffer.append(source.getUniqueIdentifier());
    stringBuffer.append(TEXT_47);
d273 1
a273 1
    stringBuffer.append(TEXT_48);
d278 2
a280 2
    if (!outgoingLinks.isEmpty()) {
    stringBuffer.append(TEXT_50);
d285 2
a287 2
    stringBuffer.append(importManager.getImportedName(source.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_52);
d294 2
d297 2
a299 2
    stringBuffer.append(TEXT_54);
    stringBuffer.append(genLink.getUniqueIdentifier());
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a302 2
    stringBuffer.append(target.getUniqueIdentifier());
    stringBuffer.append(TEXT_57);
d307 1
a307 1
    stringBuffer.append(TEXT_58);
d312 2
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a316 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_61);
@


1.29
log
@NodeItemSemanticEditPolicy template reimplemented using xpand.
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d94 1
a94 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.28
log
@header comment should not be a javadoc comment
@
text
@d144 1
a144 1
	for (Iterator sources = genLink.getSources().iterator(); sources.hasNext(); ) {
d153 1
a153 1
	for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
d227 1
a227 1
			for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
d259 1
a259 1
			for (Iterator sources = genLink.getSources().iterator(); sources.hasNext(); ) {
d293 1
a293 1
			for (Iterator targets = genLink.getTargets().iterator(); targets.hasNext(); ) {
@


1.27
log
@Correcting copyright processing
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.26
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d94 1
a94 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.25
log
@using M6 to generate code.
@
text
@d22 42
a63 42
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import java.util.ArrayList;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Display;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.dialogs.ElementListSelectionDialog;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_9 = NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_11 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_12 = ".";
  protected final String TEXT_13 = ");";
  protected final String TEXT_14 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_15 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSource(IAdaptable source) {";
  protected final String TEXT_17 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_18 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_20 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_21 = ".";
  protected final String TEXT_22 = ");";
  protected final String TEXT_23 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_24 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnTarget(IAdaptable target) {";
  protected final String TEXT_25 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_26 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_27 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_28 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = ");";
  protected final String TEXT_31 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_32 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {";
  protected final String TEXT_33 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_34 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_35 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_36 = NL + "\t\t\tif (targetEditPart instanceof ";
  protected final String TEXT_37 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = ");" + NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_41 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForSource(IAdaptable target, IElementType relationshipType) {";
  protected final String TEXT_42 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_43 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_44 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_45 = NL + "\t\t\tif (relationshipType == ";
d65 9
a73 9
  protected final String TEXT_47 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_48 = ".";
  protected final String TEXT_49 = ");" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_51 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForTarget(IAdaptable source, IElementType relationshipType) {";
  protected final String TEXT_52 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_53 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_55 = NL + "\t\t\tif (relationshipType == ";
d75 5
a79 7
  protected final String TEXT_57 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_58 = ".";
  protected final String TEXT_59 = ");" + NL + "\t\t\t}";
  protected final String TEXT_60 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_61 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(target, getTypesForSource(target, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(source, getTypesForTarget(source, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectExistingElement(IAdaptable host, Collection types) {" + NL + "\t\tif (types.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tif (editPart == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tDiagram diagram = (Diagram) editPart.getRoot().getContents().getModel();" + NL + "\t\tCollection elements = new HashSet();" + NL + "\t\tfor (Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {" + NL + "\t\t\tEObject element = (EObject) it.next();" + NL + "\t\t\tif (isApplicableElement(element, types)) {" + NL + "\t\t\t\telements.add(element);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (elements.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isApplicableElement(EObject element, Collection types) {" + NL + "\t\tIElementType type = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\treturn types.contains(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectElement(EObject[] elements) {" + NL + "\t\tShell shell = Display.getCurrent().getActiveShell();" + NL + "\t\tILabelProvider labelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_62 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\tElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);" + NL + "\t\tdialog.setMessage(\"Available domain model elements:\");" + NL + "\t\tdialog.setTitle(\"Select domain model element\");" + NL + "\t\tdialog.setMultipleSelection(false);" + NL + "\t\tdialog.setElements(elements);" + NL + "\t\tEObject selected = null;" + NL + "\t\tif (dialog.open() == Window.OK) {" + NL + "\t\t\tselected = (EObject) dialog.getFirstResult();" + NL + "\t\t}" + NL + "\t\treturn selected;" + NL + "\t}" + NL + "}";
  protected final String TEXT_63 = NL;
d84 4
a87 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d97 1
d99 1
a99 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d101 1
a101 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
a102 4
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getModelingAssistantProviderClassName());
    stringBuffer.append(TEXT_8);
d120 1
a120 1
    stringBuffer.append(TEXT_9);
d122 1
a122 1
    stringBuffer.append(TEXT_10);
d127 1
a127 1
    stringBuffer.append(TEXT_11);
d129 1
a129 1
    stringBuffer.append(TEXT_12);
d131 1
a131 1
    stringBuffer.append(TEXT_13);
d133 1
a133 1
    stringBuffer.append(TEXT_14);
d138 1
a138 1
    stringBuffer.append(TEXT_15);
d164 1
a164 1
    stringBuffer.append(TEXT_16);
d166 1
a166 1
    stringBuffer.append(TEXT_17);
d171 1
a171 1
    stringBuffer.append(TEXT_18);
d173 1
a173 1
    stringBuffer.append(TEXT_19);
d178 1
a178 1
    stringBuffer.append(TEXT_20);
d180 1
a180 1
    stringBuffer.append(TEXT_21);
d182 1
a182 1
    stringBuffer.append(TEXT_22);
d184 1
a184 1
    stringBuffer.append(TEXT_23);
d189 1
a189 1
    stringBuffer.append(TEXT_24);
d191 1
a191 1
    stringBuffer.append(TEXT_25);
d196 1
a196 1
    stringBuffer.append(TEXT_26);
d198 1
a198 1
    stringBuffer.append(TEXT_27);
d203 1
a203 1
    stringBuffer.append(TEXT_28);
d205 1
a205 1
    stringBuffer.append(TEXT_29);
d207 1
a207 1
    stringBuffer.append(TEXT_30);
d209 1
a209 1
    stringBuffer.append(TEXT_31);
d214 1
a214 1
    stringBuffer.append(TEXT_32);
d216 1
a216 1
    stringBuffer.append(TEXT_33);
d221 1
a221 1
    stringBuffer.append(TEXT_34);
d223 1
a223 1
    stringBuffer.append(TEXT_35);
d230 1
a230 1
    stringBuffer.append(TEXT_36);
d232 1
a232 1
    stringBuffer.append(TEXT_37);
d234 1
a234 1
    stringBuffer.append(TEXT_38);
d236 1
a236 1
    stringBuffer.append(TEXT_39);
d241 1
a241 1
    stringBuffer.append(TEXT_40);
d246 1
a246 1
    stringBuffer.append(TEXT_41);
d248 1
a248 1
    stringBuffer.append(TEXT_42);
d253 1
a253 1
    stringBuffer.append(TEXT_43);
d255 1
a255 1
    stringBuffer.append(TEXT_44);
d262 4
d269 1
a269 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a270 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(source.getUniqueIdentifier());
    stringBuffer.append(TEXT_49);
d275 1
a275 1
    stringBuffer.append(TEXT_50);
d280 1
a280 1
    stringBuffer.append(TEXT_51);
d282 1
a282 1
    stringBuffer.append(TEXT_52);
d287 1
a287 1
    stringBuffer.append(TEXT_53);
d289 1
a289 1
    stringBuffer.append(TEXT_54);
d296 4
d303 1
a303 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a304 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(target.getUniqueIdentifier());
    stringBuffer.append(TEXT_59);
d309 1
a309 1
    stringBuffer.append(TEXT_60);
d314 1
a314 1
    stringBuffer.append(TEXT_61);
d316 1
a316 1
    stringBuffer.append(TEXT_62);
d318 1
a318 1
    stringBuffer.append(TEXT_63);
@


1.24
log
@restore generators
@
text
@d85 1
a85 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.23
log
@#134095 do not store compiled templates in cvs
@
text
@d85 1
a85 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.22
log
@Switching to eclipse M6.
@
text
@@


1.21
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d85 1
a85 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.20
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d19 63
a81 60
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Display;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.dialogs.ElementListSelectionDialog;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_6 = NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_7 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_8 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_9 = ".";
  protected final String TEXT_10 = ");";
  protected final String TEXT_11 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_12 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSource(IAdaptable source) {";
  protected final String TEXT_14 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_15 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_17 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_21 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnTarget(IAdaptable target) {";
  protected final String TEXT_22 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_23 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_24 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_25 = NL + "\t\t\ttypes.add(";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = ");";
  protected final String TEXT_28 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getRelTypesOnSourceAndTarget(IAdaptable source, IAdaptable target) {";
  protected final String TEXT_30 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_31 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_32 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_33 = NL + "\t\t\tif (targetEditPart instanceof ";
  protected final String TEXT_34 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = ");" + NL + "\t\t\t}";
  protected final String TEXT_37 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForSource(IAdaptable target, IElementType relationshipType) {";
  protected final String TEXT_39 = NL + "\t\tIGraphicalEditPart targetEditPart = (IGraphicalEditPart) target.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_40 = NL + "\t\tif (targetEditPart instanceof ";
  protected final String TEXT_41 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_42 = NL + "\t\t\tif (relationshipType == ";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = ");" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForTarget(IAdaptable source, IElementType relationshipType) {";
  protected final String TEXT_49 = NL + "\t\tIGraphicalEditPart sourceEditPart = (IGraphicalEditPart) source.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_50 = NL + "\t\tif (sourceEditPart instanceof ";
  protected final String TEXT_51 = ") {" + NL + "\t\t\tList types = new ArrayList();";
  protected final String TEXT_52 = NL + "\t\t\tif (relationshipType == ";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = ") {" + NL + "\t\t\t\ttypes.add(";
  protected final String TEXT_55 = ".";
  protected final String TEXT_56 = ");" + NL + "\t\t\t}";
  protected final String TEXT_57 = NL + "\t\t\treturn types;" + NL + "\t\t}";
  protected final String TEXT_58 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForSource(IAdaptable target, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(target, getTypesForSource(target, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject selectExistingElementForTarget(IAdaptable source, IElementType relationshipType) {" + NL + "\t\treturn selectExistingElement(source, getTypesForTarget(source, relationshipType));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectExistingElement(IAdaptable host, Collection types) {" + NL + "\t\tif (types.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIGraphicalEditPart editPart = (IGraphicalEditPart) host.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tif (editPart == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tDiagram diagram = (Diagram) editPart.getRoot().getContents().getModel();" + NL + "\t\tCollection elements = new HashSet();" + NL + "\t\tfor (Iterator it = diagram.getElement().eAllContents(); it.hasNext();) {" + NL + "\t\t\tEObject element = (EObject) it.next();" + NL + "\t\t\tif (isApplicableElement(element, types)) {" + NL + "\t\t\t\telements.add(element);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (elements.isEmpty()) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn selectElement((EObject[]) elements.toArray(new EObject[elements.size()]));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isApplicableElement(EObject element, Collection types) {" + NL + "\t\tIElementType type = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\treturn types.contains(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject selectElement(EObject[] elements) {" + NL + "\t\tShell shell = Display.getCurrent().getActiveShell();" + NL + "\t\tILabelProvider labelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_59 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\tElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, labelProvider);" + NL + "\t\tdialog.setMessage(\"Available domain model elements:\");" + NL + "\t\tdialog.setTitle(\"Select domain model element\");" + NL + "\t\tdialog.setMultipleSelection(false);" + NL + "\t\tdialog.setElements(elements);" + NL + "\t\tEObject selected = null;" + NL + "\t\tif (dialog.open() == Window.OK) {" + NL + "\t\t\tselected = (EObject) dialog.getFirstResult();" + NL + "\t\t}" + NL + "\t\treturn selected;" + NL + "\t}" + NL + "}";
  protected final String TEXT_60 = NL;
d88 9
d98 1
a98 1
    stringBuffer.append(TEXT_2);
d100 1
a100 1
    stringBuffer.append(TEXT_3);
d102 1
a102 1
    stringBuffer.append(TEXT_4);
d104 1
a104 1
    stringBuffer.append(TEXT_5);
d122 1
a122 1
    stringBuffer.append(TEXT_6);
d124 1
a124 1
    stringBuffer.append(TEXT_7);
d129 1
a129 1
    stringBuffer.append(TEXT_8);
d131 1
a131 1
    stringBuffer.append(TEXT_9);
d133 1
a133 1
    stringBuffer.append(TEXT_10);
d135 1
a135 1
    stringBuffer.append(TEXT_11);
d140 1
a140 1
    stringBuffer.append(TEXT_12);
d166 1
a166 1
    stringBuffer.append(TEXT_13);
d168 1
a168 1
    stringBuffer.append(TEXT_14);
d173 1
a173 1
    stringBuffer.append(TEXT_15);
d175 1
a175 1
    stringBuffer.append(TEXT_16);
d180 1
a180 1
    stringBuffer.append(TEXT_17);
d182 1
a182 1
    stringBuffer.append(TEXT_18);
d184 1
a184 1
    stringBuffer.append(TEXT_19);
d186 1
a186 1
    stringBuffer.append(TEXT_20);
d191 1
a191 1
    stringBuffer.append(TEXT_21);
d193 1
a193 1
    stringBuffer.append(TEXT_22);
d198 1
a198 1
    stringBuffer.append(TEXT_23);
d200 1
a200 1
    stringBuffer.append(TEXT_24);
d205 1
a205 1
    stringBuffer.append(TEXT_25);
d207 1
a207 1
    stringBuffer.append(TEXT_26);
d209 1
a209 1
    stringBuffer.append(TEXT_27);
d211 1
a211 1
    stringBuffer.append(TEXT_28);
d216 1
a216 1
    stringBuffer.append(TEXT_29);
d218 1
a218 1
    stringBuffer.append(TEXT_30);
d223 1
a223 1
    stringBuffer.append(TEXT_31);
d225 1
a225 1
    stringBuffer.append(TEXT_32);
d232 1
a232 1
    stringBuffer.append(TEXT_33);
d234 1
a234 1
    stringBuffer.append(TEXT_34);
d236 1
a236 1
    stringBuffer.append(TEXT_35);
d238 1
a238 1
    stringBuffer.append(TEXT_36);
d243 1
a243 1
    stringBuffer.append(TEXT_37);
d248 1
a248 1
    stringBuffer.append(TEXT_38);
d250 1
a250 1
    stringBuffer.append(TEXT_39);
d255 1
a255 1
    stringBuffer.append(TEXT_40);
d257 1
a257 1
    stringBuffer.append(TEXT_41);
d264 1
a264 1
    stringBuffer.append(TEXT_42);
d266 1
a266 1
    stringBuffer.append(TEXT_43);
d268 1
a268 1
    stringBuffer.append(TEXT_44);
d270 1
a270 1
    stringBuffer.append(TEXT_45);
d272 1
a272 1
    stringBuffer.append(TEXT_46);
d277 1
a277 1
    stringBuffer.append(TEXT_47);
d282 1
a282 1
    stringBuffer.append(TEXT_48);
d284 1
a284 1
    stringBuffer.append(TEXT_49);
d289 1
a289 1
    stringBuffer.append(TEXT_50);
d291 1
a291 1
    stringBuffer.append(TEXT_51);
d298 1
a298 1
    stringBuffer.append(TEXT_52);
d300 1
a300 1
    stringBuffer.append(TEXT_53);
d302 1
a302 1
    stringBuffer.append(TEXT_54);
d304 1
a304 1
    stringBuffer.append(TEXT_55);
d306 1
a306 1
    stringBuffer.append(TEXT_56);
d311 1
a311 1
    stringBuffer.append(TEXT_57);
d316 1
a316 1
    stringBuffer.append(TEXT_58);
d318 1
a318 1
    stringBuffer.append(TEXT_59);
d320 1
a320 1
    stringBuffer.append(TEXT_60);
@


1.19
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d83 1
a83 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.18
log
@ImportManager moved to oeg.common
@
text
@d305 1
a305 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.17
log
@Fixing the sequence of iterration.
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.*;
@


1.16
log
@Fixing the sequence of iterration.
@
text
@d138 1
a138 1
			value = new HashSet();
d147 1
a147 1
			value = new HashSet();
@


1.15
log
@do not provide assistance for list compartments since they delegate to the host nodes
@
text
@d130 2
a131 2
Map outgoingLinks = new HashMap(); // source -> links going from the source
Map incomingLinks = new HashMap(); // target -> links coming to the target
@


1.14
log
@#124829 Support links in generated ModelingAssistantProvider
@
text
@d96 3
d100 1
a100 1
	if (genContainer instanceof GenNode && ((GenNode) genContainer).isListLayout()) {
d102 4
a105 1
			children.addAll(((GenCompartment) compartments.next()).getContainedNodes());
@


1.13
log
@#124829 Support links in generated ModelingAssistantProvider
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;";
d76 3
a78 2
  protected final String TEXT_58 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "}";
  protected final String TEXT_59 = NL;
d299 2
d302 1
a302 1
    stringBuffer.append(TEXT_59);
@


1.12
log
@REadable names should present in popup bar
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.emf.ui.services.modelingassistant.ModelingAssistantProvider;";
d23 1
a23 1
  protected final String TEXT_5 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tObject editPart = host.getAdapter(IGraphicalEditPart.class);";
d25 2
a26 2
  protected final String TEXT_7 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_8 = NL + "\t\t\tchildren.add(";
d29 1
a29 1
  protected final String TEXT_11 = NL + "\t\t\treturn children;" + NL + "\t\t}";
d32 1
a32 1
  protected final String TEXT_14 = NL + "\t\tObject sourceEditPart = source.getAdapter(IGraphicalEditPart.class);";
d34 2
a35 2
  protected final String TEXT_16 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_17 = NL + "\t\t\tchildren.add(";
d38 1
a38 1
  protected final String TEXT_20 = NL + "\t\t\treturn children;" + NL + "\t\t}";
d40 1
a40 1
  protected final String TEXT_22 = NL + "\t\tObject targetEditPart = target.getAdapter(IGraphicalEditPart.class);";
d42 2
a43 2
  protected final String TEXT_24 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_25 = NL + "\t\t\tchildren.add(";
d46 1
a46 1
  protected final String TEXT_28 = NL + "\t\t\treturn children;" + NL + "\t\t}";
d48 1
a48 1
  protected final String TEXT_30 = NL + "\t\tObject sourceEditPart = source.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tObject targetEditPart = target.getAdapter(IGraphicalEditPart.class);";
d50 1
a50 1
  protected final String TEXT_32 = ") {" + NL + "\t\t\tList children = new ArrayList();";
d52 1
a52 1
  protected final String TEXT_34 = ") {" + NL + "\t\t\t\tchildren.add(";
d55 23
a77 3
  protected final String TEXT_37 = NL + "\t\t\treturn children;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "}";
  protected final String TEXT_39 = NL;
d93 1
a93 2
Collection containers = genDiagram.getAllContainers();
for (Iterator contents = containers.iterator(); contents.hasNext(); ) {
d123 2
a124 2
Map linksForSources = new HashMap();
Map linksForTargets = new HashMap();
d129 1
a129 1
		List value = (List) linksForSources.get(source);
d131 2
a132 2
			value = new ArrayList();
			linksForSources.put(source, value);
d138 1
a138 1
		List value = (List) linksForTargets.get(target);
d140 2
a141 2
			value = new ArrayList();
			linksForTargets.put(target, value);
d148 1
a148 1
    if (!linksForSources.isEmpty()) {
d151 1
a151 1
	for (Iterator sources = linksForSources.keySet().iterator(); sources.hasNext(); ) {
a152 1
		List sourceLinks = (List) linksForSources.get(source);
d158 1
a158 1
		for (Iterator links = sourceLinks.iterator(); links.hasNext(); ) {
d173 1
a173 1
    if (!linksForTargets.isEmpty()) {
d176 1
a176 1
	for (Iterator targets = linksForTargets.keySet().iterator(); targets.hasNext(); ) {
a177 1
		List targetLinks = (List) linksForTargets.get(target);
d183 1
a183 1
		for (Iterator links = targetLinks.iterator(); links.hasNext(); ) {
d198 1
a198 1
    if (!linksForSources.isEmpty()) {
d201 1
a201 1
	for (Iterator sources = linksForSources.keySet().iterator(); sources.hasNext(); ) {
a202 1
		List sourceLinks = (List) linksForSources.get(source);
d208 1
a208 1
		for (Iterator links = sourceLinks.iterator(); links.hasNext(); ) {
d230 68
d299 1
a299 1
    stringBuffer.append(TEXT_39);
@


1.11
log
@#124829 Support links in generated ModelingAssistantProvider
@
text
@d73 1
a73 3
List containers = new ArrayList();
containers.add(genDiagram);
containers.addAll(genDiagram.getAllNodes());
@


1.10
log
@rename GenContainerEditPart -> GenContainerBase
@
text
@d30 28
a57 2
  protected final String TEXT_12 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
d105 111
d217 1
a217 1
    stringBuffer.append(TEXT_13);
@


1.9
log
@#124830 Add all children of the list compartment to the popup bar of the parent node
@
text
@d51 1
a51 1
	GenContainerEditPart genContainer = (GenContainerEditPart) contents.next();
@


1.8
log
@#124413
Cleaning up the gmfgen model
@
text
@d47 4
a50 1
for (Iterator contents = genDiagram.getAllContainerEditParts().iterator(); contents.hasNext(); ) {
d52 6
a57 1
	List children = genContainer.getContainedNodes();
d63 4
a66 1
    			for (int i = 0; i < children.size(); i++) {
d70 1
a70 1
    stringBuffer.append(((GenNode) children.get(i)).getUniqueIdentifier());
@


1.7
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d47 1
a47 3
Collection allContainers = new LinkedList(genDiagram.getAllContainers());
allContainers.add(genDiagram);
for (Iterator contents = allContainers.iterator(); contents.hasNext(); ) {
@


1.6
log
@#117301 child nodes creation in compartment is not supported by modeling assistant
@
text
@d23 9
a31 14
  protected final String TEXT_5 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tObject editPart = host.getAdapter(IGraphicalEditPart.class);" + NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_6 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_7 = NL + "\t\t\tchildren.add(";
  protected final String TEXT_8 = ".";
  protected final String TEXT_9 = ");";
  protected final String TEXT_10 = NL + "\t\t\treturn children;";
  protected final String TEXT_11 = NL + "\t\t} else if (editPart instanceof ";
  protected final String TEXT_12 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_13 = NL + "\t\t\tchildren.add(";
  protected final String TEXT_14 = ".";
  protected final String TEXT_15 = ");";
  protected final String TEXT_16 = NL + "\t\t\treturn children;";
  protected final String TEXT_17 = NL + "\t\t}" + NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
a45 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_6);
d47 6
a52 2
List children = genDiagram.getNodes();
for (int i = 0; i < children.size(); i++) {
d54 2
d57 2
d60 1
a60 1
    stringBuffer.append(TEXT_8);
a61 2
    stringBuffer.append(TEXT_9);
    }
d63 1
a63 8
    
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	if (next instanceof GenChildContainer) {
		GenChildContainer genContainer = (GenChildContainer) next;
		children = genContainer.getChildNodes();
		if (!children.isEmpty()) {

a64 10
    stringBuffer.append(importManager.getImportedName(genContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    			for (int i = 0; i < children.size(); i++) {
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(((GenNode) children.get(i)).getUniqueIdentifier());
    stringBuffer.append(TEXT_15);
    			}
    stringBuffer.append(TEXT_16);
a65 1
		}
d69 1
a69 1
    stringBuffer.append(TEXT_17);
d71 1
a71 1
    stringBuffer.append(TEXT_18);
@


1.5
log
@#116031 avoid hardcoded class names in templates
@
text
@d67 3
a69 3
	if (next instanceof GenNode) {
		GenNode genNode = (GenNode) next;
		children = AccessUtil.getAllChildNodes(genNode);
d73 1
a73 1
    stringBuffer.append(importManager.getImportedName(genNode.getEditPartQualifiedClassName()));
@


1.4
log
@#115622 use genDiagram.eAllContents() to iterate over diagram contents instead of using custom iterator
@
text
@d25 12
a36 10
  protected final String TEXT_7 = NL + "\t\t\tchildren.add(ElementTypes.";
  protected final String TEXT_8 = ");";
  protected final String TEXT_9 = NL + "\t\t\treturn children;";
  protected final String TEXT_10 = NL + "\t\t} else if (editPart instanceof ";
  protected final String TEXT_11 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_12 = NL + "\t\t\tchildren.add(ElementTypes.";
  protected final String TEXT_13 = ");";
  protected final String TEXT_14 = NL + "\t\t\treturn children;";
  protected final String TEXT_15 = NL + "\t\t}" + NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "}";
  protected final String TEXT_16 = NL;
d58 2
d61 1
a61 1
    stringBuffer.append(TEXT_8);
d63 1
a63 1
    stringBuffer.append(TEXT_9);
d72 1
a72 1
    stringBuffer.append(TEXT_10);
d74 1
a74 1
    stringBuffer.append(TEXT_11);
d76 3
a78 1
    stringBuffer.append(TEXT_12);
d80 1
a80 1
    stringBuffer.append(TEXT_13);
d82 1
a82 1
    stringBuffer.append(TEXT_14);
d88 1
a88 1
    stringBuffer.append(TEXT_15);
d90 1
a90 1
    stringBuffer.append(TEXT_16);
@


1.3
log
@[dstadnik] #115273 reflect class name change
@
text
@d23 12
a34 8
  protected final String TEXT_5 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForPopupBar(IAdaptable host) {" + NL + "\t\tObject editPart = host.getAdapter(IGraphicalEditPart.class);";
  protected final String TEXT_6 = NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_7 = ") {" + NL + "\t\t\tList children = new ArrayList();";
  protected final String TEXT_8 = NL + "\t\t\tchildren.add(ElementTypes.";
  protected final String TEXT_9 = ");";
  protected final String TEXT_10 = NL + "\t\t\treturn children;" + NL + "\t\t}";
  protected final String TEXT_11 = NL + "\t\treturn Collections.EMPTY_LIST;" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d39 1
a39 1
    GenDiagram diagram = (GenDiagram) argument;
d41 1
a41 1
    stringBuffer.append(diagram.getProvidersPackageName());
d43 1
a43 1
    ImportUtil importManager = new ImportUtil(diagram.getProvidersPackageName());
d47 1
a47 1
    stringBuffer.append(diagram.getModelingAssistantProviderClassName());
d49 2
d52 2
a53 13
Iterator entities = AccessUtil.getGenEntities(diagram);
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
	List children = Collections.EMPTY_LIST;
	if (entity instanceof GenDiagram) {
		children = diagram.getNodes();
	} else if (entity instanceof GenNode) {
		children = AccessUtil.getAllChildNodes((GenNode) entity);
	}
	if (children.isEmpty()) {
		continue;
	}
	String editPartClassName = importManager.getImportedName(entity.getEditPartQualifiedClassName());
a54 2
    stringBuffer.append(TEXT_6);
    stringBuffer.append(editPartClassName);
d56 1
a56 1
    	for (int i = 0; i < children.size(); i++) {
d58 1
a58 1
    stringBuffer.append(((GenNode) children.get(i)).getUniqueIdentifier());
d60 8
a67 1
    	}
d69 1
a69 1
    }
d71 12
d84 1
a84 1
    stringBuffer.append(TEXT_12);
@


1.2
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d23 1
a23 1
  protected final String TEXT_5 = " extends ModelingAssistantProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic List getTypesForActionBar(IAdaptable host) {" + NL + "\t\tObject editPart = host.getAdapter(IGraphicalEditPart.class);";
@


1.1
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d53 1
a53 1
		children = ((GenNode) entity).getChildNodes();
@

