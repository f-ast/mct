head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081015-1925:1.3
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.01.29.14.20.30;	author dstadnik;	state dead;
branches;
next	1.2;
commitid	69ed45be02ac4567;

1.2
date	2007.01.22.18.47.18;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	7c1c45b506b14567;

1.1
date	2006.10.09.17.30.47;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[171528] use URIEditorInput to open diagrams
@
text
@package org.eclipse.gmf.codegen.templates.application;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class URIDiagramDocumentProviderGenerator
{
  protected static String nl;
  public static synchronized URIDiagramDocumentProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    URIDiagramDocumentProviderGenerator result = new URIDiagramDocumentProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.io.File;" + NL + "import java.io.IOException;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Status;" + NL + "import org.eclipse.emf.common.ui.URIEditorInput;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.xmi.XMLResource;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.AbstractDocumentProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramDocument;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramModificationListener;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocumentProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument;" + NL + "import org.eclipse.gmf.runtime.emf.core.resources.GMFResourceFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.ui.IEditorInput;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class URIDiagramDocumentProvider extends AbstractDocumentProvider implements IDiagramDocumentProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class URIElementInfo extends ElementInfo {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DiagramModificationListener listener;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic URIElementInfo(IDocument document, DiagramModificationListener listener) {" + NL + "\t\t\tsuper(document);" + NL + "\t\t\tthis.listener = listener;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ElementInfo createElementInfo(Object element) throws CoreException {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tIDocument document = null;" + NL + "\t\t\tIStatus status = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdocument = createDocument(element);" + NL + "\t\t\t} catch (CoreException x) {" + NL + "\t\t\t\t";
  protected final String TEXT_6 = ".getInstance().logError(\"Error creating document from uri\", x);" + NL + "\t\t\t\tstatus = x.getStatus();" + NL + "\t\t\t\tdocument = createEmptyDocument();" + NL + "\t\t\t}" + NL + "\t\t\tElementInfo info = createNewElementInfo(document);" + NL + "\t\t\tinfo.fStatus = status;" + NL + "\t\t\treturn info;" + NL + "\t\t}" + NL + "\t\treturn super.createElementInfo(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ElementInfo createNewElementInfo(IDocument document) {" + NL + "\t\tDiagramModificationListener listener = new DiagramModificationListener(this, (DiagramDocument) document);" + NL + "\t\tURIElementInfo info = new URIElementInfo(document, listener);" + NL + "\t\tlistener.startListening();" + NL + "\t\treturn info;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void disposeElementInfo(Object element, ElementInfo info) {" + NL + "\t\tObject content = info.fDocument.getContent();" + NL + "\t\tif (content instanceof Diagram) {" + NL + "\t\t\t((Diagram) content).eResource().unload();" + NL + "\t\t}" + NL + "\t\t((URIElementInfo) info).listener.stopListening();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {" + NL + "\t\tif (editorInput instanceof URIEditorInput) {" + NL + "\t\t\treturn new URIEditorInputProxy((URIEditorInput) editorInput, domain);" + NL + "\t\t}" + NL + "\t\tassert false;" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IDiagramDocument getDiagramDocument(Object element) {" + NL + "\t\tIDocument doc = getDocument(element);" + NL + "\t\tif (doc instanceof IDiagramDocument) {" + NL + "\t\t\treturn (IDiagramDocument) doc;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IDocument createDocument(Object element) throws CoreException {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tIDocument document = createEmptyDocument();" + NL + "\t\t\tif (setDocumentContent(document, (IEditorInput) element)) {" + NL + "\t\t\t\tsetupDocument(element, document);" + NL + "\t\t\t\treturn document;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Sets up the given document as it would be provided for the given element. The" + NL + "\t * content of the document is not changed. This default implementation is empty." + NL + "\t * Subclasses may reimplement." + NL + "\t *" + NL + "\t * @@param element the blue-print element" + NL + "\t * @@param document the document to set up" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupDocument(Object element, IDocument document) {" + NL + "\t\t// for subclasses" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IDocument createEmptyDocument() {" + NL + "\t\treturn new DiagramDocument();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean setDocumentContent(IDocument document, IEditorInput editorInput) throws CoreException {" + NL + "\t\tif (editorInput instanceof URIEditorInputProxy) {" + NL + "\t\t\tURIEditorInputProxy diagramElement = (URIEditorInputProxy) editorInput;" + NL + "\t\t\t((IDiagramDocument) document).setEditingDomain(diagramElement.getEditingDomain());" + NL + "\t\t}" + NL + "\t\tif (editorInput instanceof URIEditorInput) {" + NL + "\t\t\tsetDocumentContentFromStorage(document, ((URIEditorInput) editorInput).getURI());" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentContentFromStorage(IDocument document, URI uri) throws CoreException {" + NL + "\t\tIDiagramDocument diagramDocument = (IDiagramDocument) document;" + NL + "\t\tTransactionalEditingDomain domain = diagramDocument.getEditingDomain();" + NL + "\t\tResource resource = null;" + NL + "\t\ttry {" + NL + "\t\t\tresource = domain.getResourceSet().getResource(uri, false);" + NL + "\t\t\tif (resource == null) {" + NL + "\t\t\t\tresource = domain.getResourceSet().createResource(uri);" + NL + "\t\t\t}" + NL + "\t\t\tif (!resource.isLoaded()) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tMap options = new HashMap(GMFResourceFactory.getDefaultLoadOptions());" + NL + "\t\t\t\t\t// @@see 171060 " + NL + "\t\t\t\t\t// options.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);" + NL + "\t\t\t\t\tresource.load(options);" + NL + "\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\tresource.unload();" + NL + "\t\t\t\t\tthrow e;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (resource == null) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Unable to load diagram resource\");" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject rootElement = it.next();" + NL + "\t\t\t\tif (rootElement instanceof Diagram) {" + NL + "\t\t\t\t\tdocument.setContent((Diagram) rootElement);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tthrow new RuntimeException(\"Diagram is not present in resource\");" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tCoreException thrownExcp = null;" + NL + "\t\t\tif (e instanceof CoreException) {" + NL + "\t\t\t\tthrownExcp = (CoreException) e;" + NL + "\t\t\t} else {" + NL + "\t\t\t\tString msg = e.getLocalizedMessage();" + NL + "\t\t\t\tthrownExcp = new CoreException(new Status(IStatus.ERROR, ";
  protected final String TEXT_7 = ".ID, 0, msg != null ? msg : \"Error loading diagram\", e)); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tthrow thrownExcp;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void doSaveDocument(IProgressMonitor monitor, Object element, IDocument document, boolean overwrite) throws CoreException {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tIDiagramDocument diagramDocument = (IDiagramDocument) document;" + NL + "\t\t\tTransactionalEditingDomain domain = diagramDocument.getEditingDomain();" + NL + "\t\t\tList resources = domain.getResourceSet().getResources();" + NL + "\t\t\tmonitor.beginTask(\"Saving diagram\", resources.size() + 1);" + NL + "\t\t\tfor (Iterator it = resources.iterator(); it.hasNext();) {" + NL + "\t\t\t\tResource nextResource = (Resource) it.next();" + NL + "\t\t\t\tmonitor.setTaskName(\"Saving \" + nextResource.getURI());" + NL + "\t\t\t\tif (nextResource.isLoaded()) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tMap options = new HashMap();" + NL + "\t\t\t\t\t\toptions.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);" + NL + "\t\t\t\t\t\tnextResource.save(options);" + NL + "\t\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(\"Unable to save resource: \" + nextResource.getURI(), e);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmonitor.worked(1);" + NL + "\t\t\t}" + NL + "\t\t\tmonitor.done();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isDeleted(Object element) {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tFile file = getFile((URIEditorInput) element);" + NL + "\t\t\treturn file != null & !file.exists();" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isReadOnly(Object element) {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tFile file = getFile((URIEditorInput) element);" + NL + "\t\t\tif (file != null && file.exists()) {" + NL + "\t\t\t\treturn !file.canWrite();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isModifiable(Object element) {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tFile file = getFile((URIEditorInput) element);" + NL + "\t\t\tif (file != null && file.exists()) {" + NL + "\t\t\t\treturn file.canWrite();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static File getFile(URIEditorInput input) {" + NL + "\t\tURI uri = input.getURI();" + NL + "\t\tif (uri != null && uri.isFile()) {" + NL + "\t\t\tFile file = new File(uri.toFileString());" + NL + "\t\t\tif (!file.isDirectory()) {" + NL + "\t\t\t\treturn file;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IRunnableContext getOperationRunner(IProgressMonitor monitor) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenApplication application = (GenApplication) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    {
	GenDiagram genDiagram = application.getEditorGen().getDiagram();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName(application.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(application.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(application.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
    return stringBuffer.toString();
  }
}
@


1.2
log
@[171060] allow to use the same resource for domain model and diagram in rcp
@
text
@@


1.1
log
@#114200 use uri editor input for diagram editor
@
text
@d23 1
a23 1
  protected final String TEXT_6 = ".getInstance().logError(\"Error creating document from uri\", x);" + NL + "\t\t\t\tstatus = x.getStatus();" + NL + "\t\t\t\tdocument = createEmptyDocument();" + NL + "\t\t\t}" + NL + "\t\t\tElementInfo info = createNewElementInfo(document);" + NL + "\t\t\tinfo.fStatus = status;" + NL + "\t\t\treturn info;" + NL + "\t\t}" + NL + "\t\treturn super.createElementInfo(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ElementInfo createNewElementInfo(IDocument document) {" + NL + "\t\tDiagramModificationListener listener = new DiagramModificationListener(this, (DiagramDocument) document);" + NL + "\t\tURIElementInfo info = new URIElementInfo(document, listener);" + NL + "\t\tlistener.startListening();" + NL + "\t\treturn info;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void disposeElementInfo(Object element, ElementInfo info) {" + NL + "\t\tObject content = info.fDocument.getContent();" + NL + "\t\tif (content instanceof Diagram) {" + NL + "\t\t\t((Diagram) content).eResource().unload();" + NL + "\t\t}" + NL + "\t\t((URIElementInfo) info).listener.stopListening();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {" + NL + "\t\tif (editorInput instanceof URIEditorInput) {" + NL + "\t\t\treturn new URIEditorInputProxy((URIEditorInput) editorInput, domain);" + NL + "\t\t}" + NL + "\t\tassert false;" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IDiagramDocument getDiagramDocument(Object element) {" + NL + "\t\tIDocument doc = getDocument(element);" + NL + "\t\tif (doc instanceof IDiagramDocument) {" + NL + "\t\t\treturn (IDiagramDocument) doc;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IDocument createDocument(Object element) throws CoreException {" + NL + "\t\tif (element instanceof URIEditorInput) {" + NL + "\t\t\tIDocument document = createEmptyDocument();" + NL + "\t\t\tif (setDocumentContent(document, (IEditorInput) element)) {" + NL + "\t\t\t\tsetupDocument(element, document);" + NL + "\t\t\t\treturn document;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Sets up the given document as it would be provided for the given element. The" + NL + "\t * content of the document is not changed. This default implementation is empty." + NL + "\t * Subclasses may reimplement." + NL + "\t *" + NL + "\t * @@param element the blue-print element" + NL + "\t * @@param document the document to set up" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setupDocument(Object element, IDocument document) {" + NL + "\t\t// for subclasses" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IDocument createEmptyDocument() {" + NL + "\t\treturn new DiagramDocument();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean setDocumentContent(IDocument document, IEditorInput editorInput) throws CoreException {" + NL + "\t\tif (editorInput instanceof URIEditorInputProxy) {" + NL + "\t\t\tURIEditorInputProxy diagramElement = (URIEditorInputProxy) editorInput;" + NL + "\t\t\t((IDiagramDocument) document).setEditingDomain(diagramElement.getEditingDomain());" + NL + "\t\t}" + NL + "\t\tif (editorInput instanceof URIEditorInput) {" + NL + "\t\t\tsetDocumentContentFromStorage(document, ((URIEditorInput) editorInput).getURI());" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentContentFromStorage(IDocument document, URI uri) throws CoreException {" + NL + "\t\tIDiagramDocument diagramDocument = (IDiagramDocument) document;" + NL + "\t\tTransactionalEditingDomain domain = diagramDocument.getEditingDomain();" + NL + "\t\tResource resource = null;" + NL + "\t\ttry {" + NL + "\t\t\tresource = domain.getResourceSet().getResource(uri, false);" + NL + "\t\t\tif (resource == null) {" + NL + "\t\t\t\tresource = domain.getResourceSet().createResource(uri);" + NL + "\t\t\t}" + NL + "\t\t\tif (!resource.isLoaded()) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tMap options = new HashMap(GMFResourceFactory.getDefaultLoadOptions());" + NL + "\t\t\t\t\toptions.put(XMLResource.OPTION_RECORD_UNKNOWN_FEATURE, Boolean.TRUE);" + NL + "\t\t\t\t\tresource.load(options);" + NL + "\t\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t\tresource.unload();" + NL + "\t\t\t\t\tthrow e;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (resource == null) {" + NL + "\t\t\t\tthrow new RuntimeException(\"Unable to load diagram resource\");" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject rootElement = it.next();" + NL + "\t\t\t\tif (rootElement instanceof Diagram) {" + NL + "\t\t\t\t\tdocument.setContent((Diagram) rootElement);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tthrow new RuntimeException(\"Diagram is not present in resource\");" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tCoreException thrownExcp = null;" + NL + "\t\t\tif (e instanceof CoreException) {" + NL + "\t\t\t\tthrownExcp = (CoreException) e;" + NL + "\t\t\t} else {" + NL + "\t\t\t\tString msg = e.getLocalizedMessage();" + NL + "\t\t\t\tthrownExcp = new CoreException(new Status(IStatus.ERROR, ";
@

