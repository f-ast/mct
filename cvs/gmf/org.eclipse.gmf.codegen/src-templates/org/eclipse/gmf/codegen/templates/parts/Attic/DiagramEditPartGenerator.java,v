head	1.34;
access;
symbols
	v20081022-1925:1.34
	v20081015-1925:1.34
	v20081008-1925:1.34
	v20081001-1925:1.34
	v20080924-1925:1.34
	v20080917-1925:1.34
	v20080911-1728:1.34
	v20080910-1520:1.34
	v20080903-1520:1.34
	v20080827-1520:1.34
	v20080813-1520:1.34
	v20080806-1520:1.34
	v20070202-0200:1.26
	v20061214-0000:1.33
	v20061120-1300:1.32
	M3_20:1.32
	v20061117-0800:1.32
	v20061027-1200:1.26
	v20061020-1000:1.26
	v20061013-1330:1.30
	v20060919-0800:1.26
	v20060907-1100:1.26
	M1_20:1.27
	v20060904-1500:1.27
	v20060824-1600:1.26
	v20060817-1500:1.26
	v20060728-0500:1.26
	v20060713-1700:1.26
	R1_0_maintenance:1.26.0.2
	R1_0:1.26
	v20060627-1200:1.26
	v20060626-1420:1.26
	v20060620-0400:1.26
	v20060616-1400:1.25
	v20060616-1200:1.25
	v20060609-1400:1.25
	v20060531-1730:1.23
	v20060530-1930:1.23
	v20060526-1200:1.22
	v20060519-1300:1.21
	v20060519-0800:1.21
	v20060512-1000:1.20
	I20060512-1000:1.20
	I20060505-1400:1.20
	I20060428-1300:1.20
	I20060424-0500:1.20
	I20060424-0300:1.20
	M6_10:1.19
	I20060407-1200:1.15
	I20060331-1000:1.14
	I20060324-0300:1.14
	I20060317-1300:1.14
	I20060317-1200:1.14
	I20060316-1300:1.14
	I20060309-1300:1.14
	M5_10:1.13
	S20060303-1600:1.13
	I20060227-1730:1.13
	I20060216-1945:1.13
	I20060210-1715:1.13
	I20060209-1815:1.13
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.11
	I20060105-1630:1.11
	I20051230-1230:1.11
	I20051223-1100:1.11
	I20051217-0925:1.11
	I20051208-2000:1.11
	I20051201-1800:1.11
	I20051124-2000:1.11
	M3_10:1.10
	I20051118-1245:1.10
	I20051111-1800:1.6
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.34
date	2006.12.15.16.43.58;	author dstadnik;	state dead;
branches;
next	1.33;
commitid	6a0d4582d0cd4567;

1.33
date	2006.12.07.11.27.05;	author ashatalin;	state Exp;
branches;
next	1.32;
commitid	3a414577fa884567;

1.32
date	2006.10.25.10.59.05;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.10.24.14.49.09;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.10.06.12.15.31;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.09.28.10.52.30;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.15;

1.15
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.17.15.48;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.23.10.11.53;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.18.11.54.08;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.24.17.02.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.24.16.47.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.19.16.05;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.34
log
@rewrite diagram edit part template in xpand
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class DiagramEditPartGenerator
{
  protected static String nl;
  public static synchronized DiagramEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DiagramEditPartGenerator result = new DiagramEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "\t";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final static String MODEL_ID = \"";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_12 = ";";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_17 = "());";
  protected final String TEXT_18 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_19 = "() {" + NL + "\t\t\tpublic ";
  protected final String TEXT_20 = " getDropObjectsCommand(";
  protected final String TEXT_21 = " dropRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_22 = " viewDescriptors = new ";
  protected final String TEXT_23 = "();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_24 = " it = dropRequest.getObjects().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tviewDescriptors.add(new ";
  protected final String TEXT_25 = ".ViewDescriptor(new ";
  protected final String TEXT_26 = "((";
  protected final String TEXT_27 = ") it.next()), ";
  protected final String TEXT_28 = ".class, null, getDiagramPreferencesHint()));" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\treturn createShortcutsCommand(dropRequest, viewDescriptors);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate ";
  protected final String TEXT_29 = " createShortcutsCommand(";
  protected final String TEXT_30 = " dropRequest, ";
  protected final String TEXT_31 = " viewDescriptors) {" + NL + "\t\t\t\t";
  protected final String TEXT_32 = " command = createViewsAndArrangeCommand(dropRequest, viewDescriptors);" + NL + "\t\t\t\tif (command != null) {" + NL + "\t\t\t\t\treturn command.chain(new ";
  protected final String TEXT_33 = "(new ";
  protected final String TEXT_34 = "(getEditingDomain(), (";
  protected final String TEXT_35 = ") getModel(), viewDescriptors)));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_38 = "\", new ";
  protected final String TEXT_39 = "()); //$NON-NLS-1$";
  protected final String TEXT_40 = NL + "\t}" + NL + "}";
  protected final String TEXT_41 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_9);
    {	GenCommonBase genCommonBase = genDiagram;
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_12);
    }
    stringBuffer.append(TEXT_13);
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    if (genDiagram.needsCanonicalEditPolicy()) {
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCanonicalEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    }

if (genDiagram.generateCreateShortcutAction() && genDiagram.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DiagramDragDropEditPolicy"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.DropObjectsRequest"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreateShortcutDecorationsCommandQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_35);
    }

{	GenCommonBase genCommonBase = genDiagram;
    stringBuffer.append(TEXT_36);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_37);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_39);
    }
    }
    stringBuffer.append(TEXT_40);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_41);
    return stringBuffer.toString();
  }
}
@


1.33
log
@[167055] mgolubev - Provide possibility to include additional custom contents into generated files without copying the whole template
@
text
@@


1.32
log
@currently shortcuts are disabled in rcp applications
@
text
@d24 35
a58 34
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final static String MODEL_ID = \"";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_11 = ";";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_13 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_18 = "() {" + NL + "\t\t\tpublic ";
  protected final String TEXT_19 = " getDropObjectsCommand(";
  protected final String TEXT_20 = " dropRequest) {" + NL + "\t\t\t\t";
  protected final String TEXT_21 = " viewDescriptors = new ";
  protected final String TEXT_22 = "();" + NL + "\t\t\t\tfor(";
  protected final String TEXT_23 = " it = dropRequest.getObjects().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tviewDescriptors.add(new ";
  protected final String TEXT_24 = ".ViewDescriptor(new ";
  protected final String TEXT_25 = "((";
  protected final String TEXT_26 = ") it.next()), ";
  protected final String TEXT_27 = ".class, null, getDiagramPreferencesHint()));" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\treturn createShortcutsCommand(dropRequest, viewDescriptors);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tprivate ";
  protected final String TEXT_28 = " createShortcutsCommand(";
  protected final String TEXT_29 = " dropRequest, ";
  protected final String TEXT_30 = " viewDescriptors) {" + NL + "\t\t\t\t";
  protected final String TEXT_31 = " command = createViewsAndArrangeCommand(dropRequest, viewDescriptors);" + NL + "\t\t\t\tif (command != null) {" + NL + "\t\t\t\t\treturn command.chain(new ";
  protected final String TEXT_32 = "(new ";
  protected final String TEXT_33 = "(getEditingDomain(), (";
  protected final String TEXT_34 = ") getModel(), viewDescriptors)));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_37 = "\", new ";
  protected final String TEXT_38 = "()); //$NON-NLS-1$";
  protected final String TEXT_39 = NL + "\t}" + NL + "}";
  protected final String TEXT_40 = NL;
d84 1
d86 1
a86 1
    stringBuffer.append(TEXT_8);
a87 1
    stringBuffer.append(TEXT_9);
d89 1
d91 1
a91 1
    stringBuffer.append(TEXT_11);
d93 1
a93 1
    stringBuffer.append(TEXT_12);
d95 1
a95 1
    stringBuffer.append(TEXT_13);
d97 1
a97 1
    stringBuffer.append(TEXT_14);
d99 1
a99 1
    stringBuffer.append(TEXT_15);
d101 1
a101 1
    stringBuffer.append(TEXT_16);
d105 1
a105 1
    stringBuffer.append(TEXT_17);
d107 1
a107 1
    stringBuffer.append(TEXT_18);
d109 1
a109 1
    stringBuffer.append(TEXT_19);
d111 1
a111 1
    stringBuffer.append(TEXT_20);
d113 1
a113 1
    stringBuffer.append(TEXT_21);
d115 1
a115 1
    stringBuffer.append(TEXT_22);
d117 1
a117 1
    stringBuffer.append(TEXT_23);
d119 1
a119 1
    stringBuffer.append(TEXT_24);
d121 1
a121 1
    stringBuffer.append(TEXT_25);
d123 1
a123 1
    stringBuffer.append(TEXT_26);
d125 1
a125 1
    stringBuffer.append(TEXT_27);
d127 1
a127 1
    stringBuffer.append(TEXT_28);
d129 1
a129 1
    stringBuffer.append(TEXT_29);
d131 1
a131 1
    stringBuffer.append(TEXT_30);
d133 1
a133 1
    stringBuffer.append(TEXT_31);
d135 1
a135 1
    stringBuffer.append(TEXT_32);
d137 1
a137 1
    stringBuffer.append(TEXT_33);
d139 1
a139 1
    stringBuffer.append(TEXT_34);
d143 1
a143 1
    stringBuffer.append(TEXT_35);
d147 1
a147 1
    stringBuffer.append(TEXT_36);
d149 1
a149 1
    stringBuffer.append(TEXT_37);
d151 1
a151 1
    stringBuffer.append(TEXT_38);
d154 1
a154 1
    stringBuffer.append(TEXT_39);
d156 1
a156 1
    stringBuffer.append(TEXT_40);
@


1.31
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d102 1
a102 1
if (genDiagram.generateCreateShortcutAction()) {
@


1.30
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@d34 24
a57 6
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_19 = "\", new ";
  protected final String TEXT_20 = "()); //$NON-NLS-1$";
  protected final String TEXT_21 = NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
d101 2
a102 1
    {	GenCommonBase genCommonBase = genDiagram;
d104 38
d145 1
a145 1
    stringBuffer.append(TEXT_18);
d147 1
a147 1
    stringBuffer.append(TEXT_19);
d149 1
a149 1
    stringBuffer.append(TEXT_20);
d152 1
a152 1
    stringBuffer.append(TEXT_21);
d154 1
a154 1
    stringBuffer.append(TEXT_22);
@


1.29
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d78 1
a78 1
    if (genDiagram.isSynchronized()) {
@


1.28
log
@[158991] - Generating useless / inefficient code
@
text
@d86 1
a86 2
for (java.util.Iterator it = genCommonBase.getCustomBehaviour().iterator(); it.hasNext();) {
	CustomBehaviour behaviour = (CustomBehaviour) it.next();
@


1.27
log
@add custom behaviour
@
text
@d24 1
a24 1
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
@


1.26
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d34 6
a39 2
  protected final String TEXT_17 = NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
d67 1
a67 2
    {
GenCommonBase genCommonBase = genDiagram;
d83 1
d85 12
d98 1
a98 1
    stringBuffer.append(TEXT_18);
@


1.25
log
@header comment should not be a javadoc comment
@
text
@d31 5
a35 3
  protected final String TEXT_14 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_15 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_16 = NL;
d75 2
d78 3
a80 1
    stringBuffer.append(TEXT_15);
d82 1
a82 1
    stringBuffer.append(TEXT_16);
@


1.24
log
@fix some nls markers
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.23
log
@Correcting copyright processing
@
text
@d25 1
a25 1
  protected final String TEXT_8 = "\";";
@


1.22
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d48 1
a48 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.21
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d23 11
a33 10
  protected final String TEXT_6 = " extends DiagramEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_7 = "\";";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_13 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_14 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_15 = NL;
d57 2
d60 1
a60 1
    stringBuffer.append(TEXT_7);
a62 1
    stringBuffer.append(TEXT_8);
d64 1
d66 1
a66 1
    stringBuffer.append(TEXT_10);
d68 1
a68 1
    stringBuffer.append(TEXT_11);
d70 1
a70 1
    stringBuffer.append(TEXT_12);
d72 1
a72 1
    stringBuffer.append(TEXT_13);
d74 1
a74 1
    stringBuffer.append(TEXT_14);
d76 1
a76 1
    stringBuffer.append(TEXT_15);
@


1.20
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d21 12
a32 14
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends DiagramEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String MODEL_ID = \"";
  protected final String TEXT_9 = "\";";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_12 = ";";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_15 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_16 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;
d38 2
a39 1
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d50 1
d52 1
a52 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d54 1
a54 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d56 1
a56 1
    importManager.markImportLocation(stringBuffer);
d58 2
a59 1
    stringBuffer.append(genDiagram.getEditPartClassName());
a60 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d62 1
a62 2
    {
GenCommonBase genCommonBase = genDiagram;
d64 1
d66 1
a66 1
    stringBuffer.append(genCommonBase.getVisualID());
d68 1
a68 1
    }
d70 1
a70 1
    stringBuffer.append(genDiagram.getEditPartClassName());
d72 1
a72 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getItemSemanticEditPolicyQualifiedClassName()));
a73 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getCanonicalEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
@


1.19
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d26 9
a34 5
  protected final String TEXT_9 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_11 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_12 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
d62 8
d71 1
a71 1
    stringBuffer.append(TEXT_10);
d73 1
a73 1
    stringBuffer.append(TEXT_11);
d75 1
a75 1
    stringBuffer.append(TEXT_12);
d77 1
a77 1
    stringBuffer.append(TEXT_13);
@


1.18
log
@using M6 to generate code.
@
text
@d25 6
a30 5
  protected final String TEXT_8 = " extends DiagramEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_10 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_11 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d56 2
d59 1
a59 1
    stringBuffer.append(TEXT_9);
d61 1
a61 1
    stringBuffer.append(TEXT_10);
d63 1
a63 1
    stringBuffer.append(TEXT_11);
d65 1
a65 1
    stringBuffer.append(TEXT_12);
@


1.17
log
@restore generators
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.16
log
@#134095 do not store compiled templates in cvs
@
text
@d33 1
a33 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@Switching to eclipse M6.
@
text
@@


1.14
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.13
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 12
a29 9
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends DiagramEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_7 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_8 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d38 9
d48 1
a48 1
    stringBuffer.append(TEXT_2);
d50 1
a50 1
    stringBuffer.append(TEXT_3);
d52 1
a52 1
    stringBuffer.append(TEXT_4);
d54 1
a54 1
    stringBuffer.append(TEXT_5);
d56 1
a56 1
    stringBuffer.append(TEXT_6);
d58 1
a58 1
    stringBuffer.append(TEXT_7);
d60 1
a60 1
    stringBuffer.append(TEXT_8);
d62 1
a62 1
    stringBuffer.append(TEXT_9);
@


1.12
log
@ImportManager moved to oeg.common
@
text
@d32 1
a32 1
GenDiagram genDiagram = (GenDiagram) argument;
@


1.11
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.10
log
@get rid of 'never used locally' compilation warning
@
text
@a2 1
import java.util.*;
a3 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d6 2
a7 2
public class DiagramEditPartGenerator {
 
d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.emf.ecore.EObject;";
d25 2
a26 30
  protected final String TEXT_8 = "CanonicalEditPolicy());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_9 = "CanonicalEditPolicy extends CanonicalConnectionEditPolicy {" + NL + "\t";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_12 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
  protected final String TEXT_13 = " modelElement = (";
  protected final String TEXT_14 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_15 = "();" + NL + "\t\t\t";
  protected final String TEXT_16 = " nextValue;";
  protected final String TEXT_17 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_18 = " it = ";
  protected final String TEXT_19 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_20 = ") it.next();";
  protected final String TEXT_21 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_22 = ";";
  protected final String TEXT_23 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_24 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_25 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t}";
  protected final String TEXT_27 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_28 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticConnectionsList() {" + NL + "\t\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t\t";
  protected final String TEXT_29 = " modelElement = (";
  protected final String TEXT_30 = ") diagram.getElement();" + NL + "\t\t\tList result = new LinkedList();" + NL + "\t\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_31 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\t\treturn relationship.eContainer();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\t\tint vID = ";
  protected final String TEXT_32 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\t\tswitch (vID) {";
  protected final String TEXT_33 = NL + "\t\t\t\tcase ";
  protected final String TEXT_34 = ":" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_35 = ";";
  protected final String TEXT_36 = NL + "\t\t\t}" + NL + "" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t\t * CanonicalConnectionEditPolicy class" + NL + "\t\t *" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t\t}" + NL + "\t" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_37 = NL;
d28 1
a28 82
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
		}
		return result.toString();
	}
 
	public String generate(Object argument)
d47 1
a47 1
    stringBuffer.append(genDiagram.getEditPartClassName());
d49 1
a49 1
    stringBuffer.append(genDiagram.getEditPartClassName());
a50 86
    
String modelElementInterfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
{
	Collection genNodes = genDiagram.getNodes();

    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_16);
    
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_20);
    
	} else {

    stringBuffer.append(TEXT_21);
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_22);
    
	}

    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_25);
    
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_26);
    
	}
}

    stringBuffer.append(TEXT_27);
    
}

    stringBuffer.append(TEXT_28);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextGenLink = (GenLink) it.next();
	if (nextGenLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkFacet = (TypeLinkModelFacet) nextGenLink.getModelFacet(); 
		GenFeature nextLinkTargetFeature = typeLinkFacet.getTargetMetaFeature();

    stringBuffer.append(TEXT_33);
    stringBuffer.append(nextGenLink.getVisualID());
    stringBuffer.append(TEXT_34);
    stringBuffer.append(getFeatureValueGetter("relationship", nextLinkTargetFeature, true, importManager));
    stringBuffer.append(nextLinkTargetFeature.isListType() ? ".get(0)" : "");
    stringBuffer.append(TEXT_35);
    
	}
}

    stringBuffer.append(TEXT_36);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_37);
d53 1
a53 1
}@


1.9
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@d58 1
a58 1
	private String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d102 1
a102 1
	private String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
@


1.8
log
@#116655

Generating correct access for all the features.
@
text
@d28 29
a56 17
  protected final String TEXT_9 = "CanonicalEditPolicy extends CanonicalConnectionEditPolicy {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticChildrenList() {";
  protected final String TEXT_10 = NL + "\t\t\t";
  protected final String TEXT_11 = " modelElement = (";
  protected final String TEXT_12 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new LinkedList();";
  protected final String TEXT_13 = NL + "\t\t\tresult.";
  protected final String TEXT_14 = "(";
  protected final String TEXT_15 = ");";
  protected final String TEXT_16 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticConnectionsList() {" + NL + "\t\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t\t";
  protected final String TEXT_17 = " modelElement = (";
  protected final String TEXT_18 = ") diagram.getElement();" + NL + "\t\t\tList result = new LinkedList();" + NL + "\t\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_19 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\t\treturn relationship.eContainer();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\t\tint vID = ";
  protected final String TEXT_20 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\t\tswitch (vID) {";
  protected final String TEXT_21 = NL + "\t\t\t\tcase ";
  protected final String TEXT_22 = ":" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_23 = ";";
  protected final String TEXT_24 = NL + "\t\t\t}" + NL + "" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t\t * CanonicalConnectionEditPolicy class" + NL + "\t\t *" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t\t}" + NL + "\t" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_25 = NL;
d164 2
d168 3
d172 1
a172 1
    stringBuffer.append(TEXT_11);
d174 37
a210 1
    stringBuffer.append(TEXT_12);
d212 1
a212 4
Set containmentFeatures = new LinkedHashSet();
for (Iterator it = genDiagram.getNodes().iterator(); it.hasNext();) {
	GenNode nextGenNode = (GenNode) it.next();
	containmentFeatures.add(nextGenNode.getModelFacet().getContainmentMetaFeature());
a213 2
for (Iterator it = containmentFeatures.iterator(); it.hasNext();) {
	GenFeature nextFeature = (GenFeature) it.next();	
d215 1
a215 5
    stringBuffer.append(TEXT_13);
    stringBuffer.append(nextFeature.isListType() ? "addAll" : "add");
    stringBuffer.append(TEXT_14);
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
    stringBuffer.append(TEXT_15);
d219 1
a219 1
    stringBuffer.append(TEXT_16);
d221 1
a221 1
    stringBuffer.append(TEXT_17);
d223 1
a223 1
    stringBuffer.append(TEXT_18);
d225 1
a225 1
    stringBuffer.append(TEXT_19);
d227 1
a227 1
    stringBuffer.append(TEXT_20);
d235 1
a235 1
    stringBuffer.append(TEXT_21);
d237 1
a237 1
    stringBuffer.append(TEXT_22);
d240 1
a240 1
    stringBuffer.append(TEXT_23);
d245 1
a245 1
    stringBuffer.append(TEXT_24);
d247 1
a247 1
    stringBuffer.append(TEXT_25);
@


1.7
log
@#116031 avoid hardcoded class names in templates
@
text
@d8 2
a9 2
public class DiagramEditPartGenerator
{
d33 2
a34 2
  protected final String TEXT_14 = "(modelElement.";
  protected final String TEXT_15 = "());";
d41 87
a127 8
  protected final String TEXT_22 = ":" + NL + "\t\t\t\t\t((";
  protected final String TEXT_23 = ") relationship).";
  protected final String TEXT_24 = "()";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + "\t\t\t}" + NL + "" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t\t * CanonicalConnectionEditPolicy class" + NL + "\t\t *" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t\t}" + NL + "\t" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_27 = NL;

  public String generate(Object argument)
d170 1
a170 1
    stringBuffer.append(nextFeature.getGetAccessor());
d194 2
a195 1
    stringBuffer.append(importManager.getImportedName(typeLinkFacet.getMetaClass().getQualifiedInterfaceName()));
a196 4
    stringBuffer.append(nextLinkTargetFeature.getGetAccessor());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(nextLinkTargetFeature.isListType() ? ".get(0)" : "");
    stringBuffer.append(TEXT_25);
d201 1
a201 1
    stringBuffer.append(TEXT_26);
d203 1
a203 1
    stringBuffer.append(TEXT_27);
d206 1
a206 1
}
@


1.6
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d101 1
a101 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d103 1
a103 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
@


1.5
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d119 1
a119 1
    stringBuffer.append(nextLinkTargetFeature.isListType() ? "get(0)" : "");
@


1.4
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d25 22
a46 21
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_7 = "CanonicalEditPolicy());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_8 = "CanonicalEditPolicy extends CanonicalConnectionEditPolicy {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticChildrenList() {";
  protected final String TEXT_9 = NL + "\t\t\t";
  protected final String TEXT_10 = " modelElement = (";
  protected final String TEXT_11 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new LinkedList();";
  protected final String TEXT_12 = NL + "\t\t\tresult.";
  protected final String TEXT_13 = "(modelElement.";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticConnectionsList() {" + NL + "\t\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t\t";
  protected final String TEXT_16 = " modelElement = (";
  protected final String TEXT_17 = ") diagram.getElement();" + NL + "\t\t\tList result = new LinkedList();" + NL + "\t\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_18 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\t\treturn relationship.eContainer();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\t\tint vID = ";
  protected final String TEXT_19 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\t\tswitch (vID) {";
  protected final String TEXT_20 = NL + "\t\t\t\tcase ";
  protected final String TEXT_21 = ":" + NL + "\t\t\t\t\t((";
  protected final String TEXT_22 = ") relationship).";
  protected final String TEXT_23 = "()";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + "\t\t\t}" + NL + "" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t\t * CanonicalConnectionEditPolicy class" + NL + "\t\t *" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t\t}" + NL + "\t" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_26 = NL;
d65 1
a65 1
    stringBuffer.append(genDiagram.getEditPartClassName());
d69 2
a73 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(modelElementInterfaceName);
d77 2
d88 1
a88 1
    stringBuffer.append(TEXT_12);
d90 1
a90 1
    stringBuffer.append(TEXT_13);
d92 1
a92 1
    stringBuffer.append(TEXT_14);
a95 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(modelElementInterfaceName);
d99 1
a99 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d103 2
d112 1
a112 1
    stringBuffer.append(TEXT_20);
d114 1
a114 1
    stringBuffer.append(TEXT_21);
d116 1
a116 1
    stringBuffer.append(TEXT_22);
d118 1
a118 1
    stringBuffer.append(TEXT_23);
d120 1
a120 1
    stringBuffer.append(TEXT_24);
d125 1
a125 1
    stringBuffer.append(TEXT_25);
d127 1
a127 1
    stringBuffer.append(TEXT_26);
@


1.3
log
@[ashatalin] #113561 use MEditingDomain.getImports instead of ExternalCrossReferencer
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EPackage;";
@


1.2
log
@[ashatalin] #113258 sync diagram and domain models using canonicalEditPolicy
@
text
@d77 1
a77 1
Set containmentFeatures = new HashSet();
@


1.1
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d3 1
d5 2
d21 25
a45 4
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends DiagramEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "}";
  protected final String TEXT_5 = NL;
d56 1
a56 1
    stringBuffer.append(genDiagram.getEditPartClassName());
d58 2
a60 1
    stringBuffer.append(TEXT_4);
d62 63
@

