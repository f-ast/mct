head	1.25;
access;
symbols
	v20081022-1925:1.25
	v20081015-1925:1.25
	v20081008-1925:1.25
	v20081001-1925:1.25
	v20080924-1925:1.25
	v20080917-1925:1.25
	v20080911-1728:1.25
	v20080910-1520:1.25
	v20080903-1520:1.25
	v20080827-1520:1.25
	v20080813-1520:1.25
	v20080806-1520:1.25
	v20070608-1300:1.24
	v20070605-1400:1.24
	v20070601-1400:1.23
	v20070525-1500:1.23
	v20070520-1200:1.23
	v20070518-1300:1.22
	v20070504-1000:1.22
	v20070427-0600:1.22
	v20070420-1000:1.21
	v20070413-1300:1.21
	v20070405-1100:1.21
	v20070403-1500:1.21
	v20070330-1300:1.21
	v20060330-1300:1.21
	v20070322-1100:1.20
	v20060316-0600:1.20
	v20070307-0700:1.20
	v20070301-1200:1.20
	v20070228-2000:1.20
	v20070221-1500:1.20
	v20070208-1800:1.20
	v20070202-0200:1.19
	v20070103-0300:1.20
	M4_20:1.20
	v20061222-1800:1.20
	v20061218-1200:1.20
	v20061214-0000:1.20
	v20061120-1300:1.20
	M3_20:1.20
	v20061117-0800:1.20
	v20061027-1200:1.19
	v20061020-1000:1.19
	v20061013-1330:1.19
	v20060919-0800:1.19
	v20060907-1100:1.19
	M1_20:1.19
	v20060904-1500:1.19
	v20060824-1600:1.19
	v20060817-1500:1.19
	v20060728-0500:1.19
	v20060713-1700:1.19
	R1_0_maintenance:1.19.0.2
	R1_0:1.19
	v20060627-1200:1.19
	v20060626-1420:1.19
	v20060620-0400:1.19
	v20060616-1400:1.19
	v20060616-1200:1.19
	v20060609-1400:1.19
	v20060531-1730:1.18
	v20060530-1930:1.18
	v20060526-1200:1.17
	v20060519-1300:1.17
	v20060519-0800:1.17
	v20060512-1000:1.17
	I20060512-1000:1.17
	I20060505-1400:1.17
	I20060428-1300:1.17
	I20060424-0500:1.17
	I20060424-0300:1.17
	M6_10:1.17
	I20060407-1200:1.13
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.25
date	2007.06.13.14.02.28;	author ashatalin;	state dead;
branches;
next	1.24;
commitid	3d5e466ff8ed4567;

1.24
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.23;
commitid	17ef46643bcf4567;

1.23
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.22;
commitid	7de14650454a4567;

1.22
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.21;
commitid	78b462dc68e4567;

1.21
date	2007.03.28.08.49.38;	author dstadnik;	state Exp;
branches;
next	1.20;
commitid	2240460a2c174567;

1.20
date	2006.10.24.14.49.09;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.13.22.22.24;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.13;

1.13
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.28.18.15.00;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.16.10.30.35;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.26.13.36.41;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.12.23.10.49;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.17.20.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.25
log
@[191855] - Convert /editor/CreateShortcutAction.javajet template to xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class CreateShortcutActionGenerator
{
  protected static String nl;
  public static synchronized CreateShortcutActionGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CreateShortcutActionGenerator result = new CreateShortcutActionGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_5 = " mySelectedElement;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Shell myShell;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_6 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_7 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal View view = (View) mySelectedElement.getModel();";
  protected final String TEXT_8 = NL + "\t\t";
  protected final String TEXT_9 = " elementChooser = new ";
  protected final String TEXT_10 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tURI selectedModelElementURI = elementChooser.getSelectedModelElementURI();" + NL + "\t\tfinal EObject selectedElement;" + NL + "\t\ttry {" + NL + "\t\t\tselectedElement = mySelectedElement.getEditingDomain().getResourceSet().getEObject(selectedModelElementURI, true);" + NL + "\t\t} catch (WrappedException e) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Exception while loading object: \" + selectedModelElementURI.toString(), e); //$NON-NLS-1$" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tCreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), Node.class, null, ";
  protected final String TEXT_12 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t";
  protected final String TEXT_13 = " command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view);" + NL + "\t\tcommand = command.compose(new ";
  protected final String TEXT_14 = "(mySelectedElement.getEditingDomain(), view, viewDescriptor));" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_16 = NL + "\t\torg.eclipse.emf.ecore.resource.Resource resource =" + NL + "\t\t\t\t";
  protected final String TEXT_17 = ".openModel(" + NL + "\t\t\t\t\t\tmyShell, \"Select model to reference\", mySelectedElement.getEditingDomain());" + NL + "\t\tif (resource == null || resource.getContents().isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tShortcutCreationWizard wizard = new ShortcutCreationWizard((EObject) resource.getContents().get(0), view, mySelectedElement.getEditingDomain());" + NL + "\t\twizard.setWindowTitle(\"Create shortcut\");" + NL + "\t\t";
  protected final String TEXT_18 = ".runWizard(myShell, wizard, \"CreateShortcut\"); //$NON-NLS-1$";
  protected final String TEXT_19 = NL + "\t}" + NL + "}";
  protected final String TEXT_20 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);

importManager.getImportedName("org.eclipse.core.commands.ExecutionException");
importManager.getImportedName("org.eclipse.core.commands.operations.OperationHistoryFactory");
importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor");
importManager.getImportedName("org.eclipse.emf.common.util.URI");
importManager.getImportedName("org.eclipse.emf.common.util.WrappedException");
importManager.getImportedName("org.eclipse.emf.ecore.EObject");
importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand");
importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest");
importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter");
importManager.getImportedName("org.eclipse.gmf.runtime.notation.View");
importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node");
importManager.getImportedName("org.eclipse.jface.action.IAction");
importManager.getImportedName("org.eclipse.jface.viewers.ISelection");
importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection");
importManager.getImportedName("org.eclipse.jface.window.Window");
importManager.getImportedName("org.eclipse.swt.widgets.Shell");
importManager.getImportedName("org.eclipse.ui.IObjectActionDelegate");
importManager.getImportedName("org.eclipse.ui.IWorkbenchPart");

importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(genDiagram.getCreateShortcutActionClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    if(genDiagram.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreateShortcutDecorationsCommandQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    } else {
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    }
    stringBuffer.append(TEXT_19);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_20);
    return stringBuffer.toString();
  }
}
@


1.24
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.23
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.22
log
@follow consisted spacing policy
@
text
@d18 20
a37 21
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = " mySelectedElement;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Shell myShell;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_7 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_8 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal View view = (View) mySelectedElement.getModel();";
  protected final String TEXT_9 = NL + "\t\t";
  protected final String TEXT_10 = " elementChooser = new ";
  protected final String TEXT_11 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tURI selectedModelElementURI = elementChooser.getSelectedModelElementURI();" + NL + "\t\tfinal EObject selectedElement;" + NL + "\t\ttry {" + NL + "\t\t\tselectedElement = mySelectedElement.getEditingDomain().getResourceSet().getEObject(selectedModelElementURI, true);" + NL + "\t\t} catch (WrappedException e) {" + NL + "\t\t\t";
  protected final String TEXT_12 = ".getInstance().logError(\"Exception while loading object: \" + selectedModelElementURI.toString(), e); //$NON-NLS-1$" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tCreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), Node.class, null, ";
  protected final String TEXT_13 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t";
  protected final String TEXT_14 = " command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view);" + NL + "\t\tcommand = command.compose(new ";
  protected final String TEXT_15 = "(mySelectedElement.getEditingDomain(), view, viewDescriptor));" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_17 = NL + "\t\torg.eclipse.emf.ecore.resource.Resource resource =" + NL + "\t\t\t\t";
  protected final String TEXT_18 = ".openModel(" + NL + "\t\t\t\t\t\tmyShell, \"Select model to reference\", mySelectedElement.getEditingDomain());" + NL + "\t\tif (resource == null || resource.getContents().isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tShortcutCreationWizard wizard = new ShortcutCreationWizard((EObject) resource.getContents().get(0), view, mySelectedElement.getEditingDomain());" + NL + "\t\twizard.setWindowTitle(\"Create shortcut\");" + NL + "\t\t";
  protected final String TEXT_19 = ".runWizard(myShell, wizard, \"CreateShortcut\"); //$NON-NLS-1$";
  protected final String TEXT_20 = NL + "\t}" + NL + "}";
  protected final String TEXT_21 = NL;
a45 1
    stringBuffer.append(TEXT_1);
d50 2
a52 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d76 2
d79 1
a79 1
    stringBuffer.append(genDiagram.getCreateShortcutActionClassName());
d85 1
a85 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d87 1
a87 1
    if(genDiagram.getEditorGen().getApplication() == null) {
d91 1
a91 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d95 1
a95 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d97 1
a97 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d99 1
a99 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreateShortcutDecorationsCommandQualifiedClassName()));
d101 1
a101 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d103 1
a103 1
    } else {
d107 1
a107 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d109 1
a109 1
    }
a110 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_21);
@


1.21
log
@[168660] Support shortcuts in RCP applications
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d53 1
a53 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.20
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d23 16
a38 11
  protected final String TEXT_6 = " mySelectedElement;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Shell myShell;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal View view = (View) mySelectedElement.getModel();" + NL + "\t\t";
  protected final String TEXT_7 = " elementChooser = new ";
  protected final String TEXT_8 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tURI selectedModelElementURI = elementChooser.getSelectedModelElementURI();" + NL + "\t\tfinal EObject selectedElement;" + NL + "\t\ttry {" + NL + "\t\t\tselectedElement = mySelectedElement.getEditingDomain().getResourceSet().getEObject(selectedModelElementURI, true);" + NL + "\t\t} catch (WrappedException e) {" + NL + "\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Exception while loading object: \" + selectedModelElementURI.toString(), e); //$NON-NLS-1$" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tCreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), Node.class, null, ";
  protected final String TEXT_10 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t";
  protected final String TEXT_11 = " command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view);" + NL + "\t\tcommand = command.compose(new ";
  protected final String TEXT_12 = "(mySelectedElement.getEditingDomain(), view, viewDescriptor));" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_14 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_15 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_16 = NL;
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d85 1
a85 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d89 1
a89 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d91 1
a91 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d93 1
a93 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreateShortcutDecorationsCommandQualifiedClassName()));
d97 1
a97 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d99 1
a99 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d101 10
d112 1
a112 1
    stringBuffer.append(TEXT_16);
@


1.19
log
@header comment should not be a javadoc comment
@
text
@d27 3
a29 3
  protected final String TEXT_10 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tCreateCommand command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view) {" + NL + "" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tCommandResult result = super.doExecuteWithResult(monitor, info);" + NL + "\t\t\t\tView view = (View) ((IAdaptable) result.getReturnValue()).getAdapter(View.class);" + NL + "\t\t\t\tif (view != null && view.getEAnnotation(\"Shortcut\") == null) { //$NON-NLS-1$";
  protected final String TEXT_11 = NL + "\t\t\t\t\tEAnnotation shortcutAnnotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\t\tshortcutAnnotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\t\t\tshortcutAnnotation.getDetails().put(\"modelID\", ";
  protected final String TEXT_12 = ".MODEL_ID); //$NON-NLS-1$" + NL + "\t\t\t\t\tview.getEAnnotations().add(shortcutAnnotation);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t};\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
a54 2
importManager.getImportedName("org.eclipse.core.runtime.IAdaptable");
importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor");
a57 1
importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation");
a58 2
importManager.getImportedName("org.eclipse.emf.ecore.EcoreFactory");
importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult");
d86 1
a86 1
    /* Shortcut was created on the diagram with the same modelID */
d88 1
a88 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
@


1.18
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.17
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d48 1
a48 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.16
log
@using M6 to generate code.
@
text
@d21 13
a33 12
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.NullProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " mySelectedElement;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Shell myShell;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal View view = (View) mySelectedElement.getModel();" + NL + "\t\t";
  protected final String TEXT_8 = " elementChooser = new ";
  protected final String TEXT_9 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tURI selectedModelElementURI = elementChooser.getSelectedModelElementURI();" + NL + "\t\tfinal EObject selectedElement;" + NL + "\t\ttry {" + NL + "\t\t\tselectedElement = mySelectedElement.getEditingDomain().getResourceSet().getEObject(selectedModelElementURI, true);" + NL + "\t\t} catch (WrappedException e) {" + NL + "\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(\"Exception while loading object: \" + selectedModelElementURI.toString(), e); //$NON-NLS-1$" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tCreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), ";
  protected final String TEXT_11 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tCreateCommand command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view) {" + NL + "" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tCommandResult result = super.doExecuteWithResult(monitor, info);" + NL + "\t\t\t\tView view = (View) ((IAdaptable) result.getReturnValue()).getAdapter(View.class);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\t\tannotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\t\t\tview.getEAnnotations().add(annotation);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_12 = ".getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_13 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_14 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_15 = NL;
d52 26
d79 1
a79 1
    importManager.markImportLocation(stringBuffer);
d81 1
a81 1
    stringBuffer.append(genDiagram.getCreateShortcutActionClassName());
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d91 1
a91 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d93 2
a95 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d99 2
d102 1
a102 1
    stringBuffer.append(TEXT_15);
@


1.15
log
@restore generators
@
text
@d36 1
a36 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.14
log
@#134095 do not store compiled templates in cvs
@
text
@d36 1
a36 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.13
log
@Switching to eclipse M6.
@
text
@@


1.12
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d36 1
a36 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@#127696 Templates should use new transaction API
@
text
@d18 15
a32 12
  protected final String TEXT_1 = NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.NullProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_4 = " mySelectedElement;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Shell myShell;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal View view = (View) mySelectedElement.getModel();" + NL + "\t\t";
  protected final String TEXT_5 = " elementChooser = new ";
  protected final String TEXT_6 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tURI selectedModelElementURI = elementChooser.getSelectedModelElementURI();" + NL + "\t\tfinal EObject selectedElement;" + NL + "\t\ttry {" + NL + "\t\t\tselectedElement = mySelectedElement.getEditingDomain().getResourceSet().getEObject(selectedModelElementURI, true);" + NL + "\t\t} catch (WrappedException e) {" + NL + "\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(\"Exception while loading object: \" + selectedModelElementURI.toString(), e); //$NON-NLS-1$" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tCreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), ";
  protected final String TEXT_8 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tCreateCommand command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view) {" + NL + "" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tCommandResult result = super.doExecuteWithResult(monitor, info);" + NL + "\t\t\t\tView view = (View) ((IAdaptable) result.getReturnValue()).getAdapter(View.class);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\t\tannotation.setSource(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\t\t\tview.getEAnnotations().add(annotation);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_11 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_12 = NL;
a40 1
importManager.emitPackageStatement(stringBuffer);
d42 10
d53 1
a53 1
    stringBuffer.append(TEXT_2);
d55 1
a55 1
    stringBuffer.append(TEXT_3);
d57 1
a57 1
    stringBuffer.append(TEXT_4);
d59 1
a59 1
    stringBuffer.append(TEXT_5);
d61 1
a61 1
    stringBuffer.append(TEXT_6);
d63 1
a63 1
    stringBuffer.append(TEXT_7);
d65 1
a65 1
    stringBuffer.append(TEXT_8);
d67 1
a67 1
    stringBuffer.append(TEXT_9);
d69 1
a69 1
    stringBuffer.append(TEXT_10);
d71 1
a71 1
    stringBuffer.append(TEXT_11);
d73 1
a73 1
    stringBuffer.append(TEXT_12);
@


1.10
log
@#127696 Templates should use new transaction API
@
text
@d18 1
a18 1
  protected final String TEXT_1 = NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.NullProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;";
d23 7
a29 6
  protected final String TEXT_6 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject selectedElement = elementChooser.getSelectedModelElement();" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tCreateViewRequest.ViewDescriptor viewDescriptor = new CreateViewRequest.ViewDescriptor(new EObjectAdapter(selectedElement), ";
  protected final String TEXT_7 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tCreateCommand command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view) {" + NL + "" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tCommandResult result = super.doExecuteWithResult(monitor, info);" + NL + "\t\t\t\tView view = (View) ((IAdaptable) result.getReturnValue()).getAdapter(View.class);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\t\tannotation.setSource(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\t\t\t\tview.getEAnnotations().add(annotation);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_9 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_10 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_11 = NL;
d54 1
a54 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d58 2
d61 1
a61 1
    stringBuffer.append(TEXT_11);
@


1.9
log
@#127696
Templates should use new transaction API
(not finished)
@
text
@d24 5
a28 4
  protected final String TEXT_7 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tCreateCommand command = new CreateCommand(mySelectedElement.getEditingDomain(), viewDescriptor, view) {" + NL + "" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tCommandResult result = super.doExecuteWithResult(monitor, info);" + NL + "\t\t\t\tView view = (View) ((IAdaptable) result.getReturnValue()).getAdapter(View.class);" + NL + "\t\t\t\tif (view != null) {" + NL + "\t\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\t\tannotation.setSource(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\t\t\t\tview.getEAnnotations().add(annotation);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\tEcoreDiagramEditorPlugin.getInstance().logError(\"Unable to create shortcut\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_8 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_9 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_10 = NL;
d51 1
a51 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d55 2
d58 1
a58 1
    stringBuffer.append(TEXT_10);
@


1.8
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 1
a18 1
  protected final String TEXT_1 = NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;";
d23 2
a24 2
  protected final String TEXT_6 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject selectedElement = elementChooser.getSelectedModelElement();" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tNode shortcutNode = ViewService.createNode(view, selectedElement, null, ";
  protected final String TEXT_7 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\tannotation.setSource(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\t\t\tshortcutNode.getEAnnotations().add(annotation);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
@


1.7
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d18 10
a27 12
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = " mySelectedElement;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Shell myShell;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal View view = (View) mySelectedElement.getModel();" + NL + "\t\t";
  protected final String TEXT_7 = " elementChooser = new ";
  protected final String TEXT_8 = "(myShell, view);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject selectedElement = elementChooser.getSelectedModelElement();" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tNode shortcutNode = ViewService.createNode(view, selectedElement, null, ";
  protected final String TEXT_9 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\tannotation.setSource(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\t\t\tshortcutNode.getEAnnotations().add(annotation);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\t\tmySelectedElement = (";
  protected final String TEXT_11 = ") structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_12 = NL;
d32 5
a36 1
    GenDiagram genDiagram = (GenDiagram) argument;
d38 1
a38 1
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
d40 1
a40 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorGen().getEditor().getPackageName());
d42 1
a42 1
    importManager.markImportLocation(stringBuffer);
d44 1
a44 1
    stringBuffer.append(genDiagram.getCreateShortcutActionClassName());
d46 1
a46 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d48 1
a48 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d50 1
a50 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d52 1
a52 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d54 1
a54 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a55 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
@


1.6
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d36 1
a36 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d38 1
a38 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.5
log
@ImportManager moved to oeg.common
@
text
@d50 1
a50 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.4
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.ImportUtil;
@


1.3
log
@Fixed:
#114178
#114179
@
text
@d50 1
a50 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
@


1.2
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.Collection;" + NL + "import java.util.Iterator;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.FileEditorInputProxy;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.window.Window;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;";
d22 8
a29 5
  protected final String TEXT_5 = " implements IObjectActionDelegate {" + NL + "" + NL + "\tprivate FileEditorInputProxy mySelectedElement;" + NL + "\tprivate Shell myShell;" + NL + "\tprivate DiagramEditor myDiagramEditor;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyDiagramEditor = targetPart instanceof DiagramEditor ? (DiagramEditor) targetPart : null;" + NL + "\t\tmyShell = targetPart.getSite().getShell();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\t";
  protected final String TEXT_6 = " elementChooser = new ";
  protected final String TEXT_7 = "(myShell);" + NL + "\t\tint result = elementChooser.open();" + NL + "\t\tif (result != Window.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject selectedElement = elementChooser.getSelectedModelElement();" + NL + "\t\tif (selectedElement == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tNode shortcutNode = ViewService.createNode(myDiagramEditor.getDiagram(), selectedElement, null, ";
  protected final String TEXT_8 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t" + NL + "\t\t\t\tCollection allNodes = new ArrayList();" + NL + "\t\t\t\tgetAllNodes(allNodes, shortcutNode);" + NL + "\t\t\t\tfor (Iterator it = allNodes.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tNode nextNode = (Node) it.next();" + NL + "\t\t\t\t\tEAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "\t\t\t\t\tannotation.setSource(\"Shortcutted\"); //$NON-NLS-1$" + NL + "\t\t\t\t\tnextNode.getEAnnotations().add(annotation);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void getAllNodes(Collection initial, Node node) {" + NL + "\t\tinitial.add(node);" + NL + "\t\tfor (Iterator it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tgetAllNodes(initial, (Node) it.next());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedElement = null;" + NL + "\t\tif (selection instanceof IStructuredSelection) {" + NL + "\t\t\tIStructuredSelection structuredSelection = (IStructuredSelection) selection;" + NL + "\t\t\tif (structuredSelection.size() == 1 && structuredSelection.getFirstElement() instanceof FileEditorInputProxy) {" + NL + "\t\t\t\tmySelectedElement = (FileEditorInputProxy) structuredSelection.getFirstElement();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\taction.setEnabled(isEnabled());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEnabled() {" + NL + "\t\treturn myDiagramEditor != null && mySelectedElement != null;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_9 = NL;
d44 1
a44 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementChooserQualifiedClassName()));
d48 2
d51 5
a55 1
    stringBuffer.append(TEXT_8);
d57 1
a57 1
    stringBuffer.append(TEXT_9);
@


1.1
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
@

