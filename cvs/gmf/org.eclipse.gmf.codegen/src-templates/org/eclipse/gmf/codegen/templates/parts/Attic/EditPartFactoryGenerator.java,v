head	1.57;
access;
symbols
	v20081022-1925:1.57
	v20081015-1925:1.57
	v20081008-1925:1.57
	v20081001-1925:1.57
	v20080924-1925:1.57
	v20080917-1925:1.57
	v20080911-1728:1.57
	v20080910-1520:1.57
	v20080903-1520:1.57
	v20080827-1520:1.57
	v20080813-1520:1.57
	v20080806-1520:1.57
	v20070202-0200:1.55
	v20061214-0000:1.55
	v20061120-1300:1.55
	M3_20:1.55
	v20061117-0800:1.55
	v20061027-1200:1.55
	v20061020-1000:1.55
	v20061013-1330:1.55
	v20060919-0800:1.55
	v20060907-1100:1.55
	M1_20:1.55
	v20060904-1500:1.55
	v20060824-1600:1.55
	v20060817-1500:1.55
	v20060728-0500:1.55
	v20060713-1700:1.55
	R1_0_maintenance:1.55.0.2
	R1_0:1.55
	v20060627-1200:1.55
	v20060626-1420:1.55
	v20060620-0400:1.55
	v20060616-1400:1.55
	v20060616-1200:1.55
	v20060609-1400:1.55
	v20060531-1730:1.53
	v20060530-1930:1.53
	v20060526-1200:1.52
	v20060519-1300:1.52
	v20060519-0800:1.52
	v20060512-1000:1.50
	I20060512-1000:1.50
	I20060505-1400:1.49
	I20060428-1300:1.47
	I20060424-0500:1.47
	I20060424-0300:1.47
	M6_10:1.45
	I20060407-1200:1.40
	I20060331-1000:1.39
	I20060324-0300:1.39
	I20060317-1300:1.39
	I20060317-1200:1.39
	I20060316-1300:1.39
	I20060309-1300:1.38
	M5_10:1.37
	S20060303-1600:1.37
	I20060227-1730:1.37
	I20060216-1945:1.36
	I20060210-1715:1.36
	I20060209-1815:1.36
	I20060203-0830:1.32
	I20060202-1415:1.32
	I20060129-1145:1.31
	I20060127-0900:1.31
	I20060120-1530:1.30
	I20060113-1700:1.28
	M4_10:1.28
	I20060107-1100:1.25
	I20060105-1630:1.25
	I20051230-1230:1.25
	I20051223-1100:1.25
	I20051217-0925:1.24
	I20051208-2000:1.24
	I20051201-1800:1.24
	I20051124-2000:1.24
	M3_10:1.23
	I20051118-1245:1.23
	I20051111-1800:1.21
	I20051106-0900:1.20
	v20051030:1.18;
locks; strict;
comment	@# @;
expand	@k@;


1.57
date	2006.12.15.19.25.23;	author dstadnik;	state dead;
branches;
next	1.56;
commitid	54dd4582f6a24567;

1.56
date	2006.12.14.19.02.19;	author dstadnik;	state Exp;
branches;
next	1.55;
commitid	408e45819fb94567;

1.55
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.54;

1.54
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.52;

1.52
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.51;

1.51
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.02.17.43.25;	author ashatalin;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.02.17.15.38;	author dstadnik;	state Exp;
branches;
next	1.47;

1.47
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.04.20.17.08.07;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.14.15.19.57;	author dstadnik;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.40;

1.40
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.02.24.20.23.27;	author atikhomirov;	state Exp;
branches;
next	1.36;

1.36
date	2006.02.08.17.15.49;	author atikhomirov;	state Exp;
branches;
next	1.35;

1.35
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.34;

1.34
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.33;

1.33
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.01.31.19.02.07;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.24.12.01.20;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.12.11.43.59;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.22.11.50.02;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.11.13.47.43;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.26.17.33.09;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.24.16.47.40;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.13.11.42.21;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.07.12.19.10;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.06.16.03.15;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.30.19.16.05;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.57
log
@rewrite edit part factory template in xpand
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class EditPartFactoryGenerator
{
  protected static String nl;
  public static synchronized EditPartFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    EditPartFactoryGenerator result = new EditPartFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.draw2d.FigureUtilities;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Label;" + NL + "import org.eclipse.draw2d.geometry.Dimension;" + NL + "import org.eclipse.draw2d.geometry.Rectangle;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gef.tools.CellEditorLocator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.viewers.CellEditor;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.widgets.Text;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tint viewVisualID = ";
  protected final String TEXT_7 = ".getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_8 = NL + "\t\t\tcase ";
  protected final String TEXT_9 = ".VISUAL_ID:" + NL + "\t\t\t\t return new ";
  protected final String TEXT_10 = "(view);";
  protected final String TEXT_11 = NL + "\t\t\tcase ";
  protected final String TEXT_12 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_13 = "(view);";
  protected final String TEXT_14 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_15 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_16 = "(view);";
  protected final String TEXT_17 = NL + "\t\t\tcase ";
  protected final String TEXT_18 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_19 = "(view);";
  protected final String TEXT_20 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source){" + NL + "        if (source.getFigure() instanceof WrapLabel)" + NL + "            return new TextCellEditorLocator((WrapLabel) source.getFigure());" + NL + "        else {" + NL + "            IFigure figure = source.getFigure();" + NL + "            return new LabelCellEditorLocator((Label) figure);" + NL + "        }" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic private class TextCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WrapLabel wrapLabel;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TextCellEditorLocator(WrapLabel wrapLabel) {" + NL + "\t\t\tsuper();" + NL + "\t\t\tthis.wrapLabel = wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic WrapLabel getWrapLabel() {" + NL + "\t\t\treturn wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getWrapLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetWrapLabel().translateToAbsolute(rect);" + NL + "\t\t\t" + NL + "\t\t\tif (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));" + NL + "\t\t\telse {" + NL + "\t\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LabelCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Label label;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LabelCellEditorLocator(Label label) {" + NL + "\t\t\tthis.label = label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Label getLabel() {" + NL + "\t\t\treturn label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "" + NL + "\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_21 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
importManager.markImportLocation(stringBuffer);
final String visualIDRegistryClassName = importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName());

    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(visualIDRegistryClassName);
    stringBuffer.append(TEXT_7);
    
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase container = (GenContainerBase) containers.next();

    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(container.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(container.getEditPartClassName());
    stringBuffer.append(TEXT_10);
    
	if (container instanceof GenNode) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();

    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(label.getEditPartClassName());
    stringBuffer.append(TEXT_13);
    
		}
	}
}
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();

    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(link.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(link.getEditPartClassName());
    stringBuffer.append(TEXT_16);
    
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();

    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(linkLabel.getEditPartClassName());
    stringBuffer.append(TEXT_19);
    
	}
}

    stringBuffer.append(TEXT_20);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_21);
    return stringBuffer.toString();
  }
}
@


1.56
log
@[164935] Use border items infrastructure to support external labels
@
text
@@


1.55
log
@header comment should not be a javadoc comment
@
text
@d24 1
a24 1
  protected final String TEXT_6 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EXTERNAL_NODE_LABELS_LAYER = \"External Node Labels\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tint viewVisualID = ";
@


1.54
log
@fix some nls markers
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.53
log
@Correcting copyright processing
@
text
@d24 1
a24 1
  protected final String TEXT_6 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EXTERNAL_NODE_LABELS_LAYER = \"External Node Labels\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tint viewVisualID = ";
@


1.52
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d54 1
a54 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.51
log
@#131543 Obsolete code should be eliminated
@
text
@d22 18
a39 20
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.draw2d.FigureUtilities;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Label;" + NL + "import org.eclipse.draw2d.geometry.Dimension;" + NL + "import org.eclipse.draw2d.geometry.Rectangle;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gef.tools.CellEditorLocator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ITextAwareEditPart;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.viewers.CellEditor;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.widgets.Text;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EXTERNAL_NODE_LABELS_LAYER = \"External Node Labels\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tint viewVisualID = ";
  protected final String TEXT_9 = ".getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_10 = NL + "\t\t\tcase ";
  protected final String TEXT_11 = ".VISUAL_ID:" + NL + "\t\t\t\t return new ";
  protected final String TEXT_12 = "(view);";
  protected final String TEXT_13 = NL + "\t\t\tcase ";
  protected final String TEXT_14 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_15 = "(view);";
  protected final String TEXT_16 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_17 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_18 = "(view);";
  protected final String TEXT_19 = NL + "\t\t\tcase ";
  protected final String TEXT_20 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_21 = "(view);";
  protected final String TEXT_22 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source){" + NL + "        if (source.getFigure() instanceof WrapLabel)" + NL + "            return new TextCellEditorLocator((WrapLabel) source.getFigure());" + NL + "        else {" + NL + "            IFigure figure = source.getFigure();" + NL + "            return new LabelCellEditorLocator((Label) figure);" + NL + "        }" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic private class TextCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WrapLabel wrapLabel;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TextCellEditorLocator(WrapLabel wrapLabel) {" + NL + "\t\t\tsuper();" + NL + "\t\t\tthis.wrapLabel = wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic WrapLabel getWrapLabel() {" + NL + "\t\t\treturn wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getWrapLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetWrapLabel().translateToAbsolute(rect);" + NL + "\t\t\t" + NL + "\t\t\tif (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));" + NL + "\t\t\telse {" + NL + "\t\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LabelCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Label label;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LabelCellEditorLocator(Label label) {" + NL + "\t\t\tthis.label = label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Label getLabel() {" + NL + "\t\t\treturn label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "" + NL + "\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_23 = NL;
d46 1
d57 1
a58 4
    stringBuffer.append(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_5);
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_6);
d63 1
a63 1
    stringBuffer.append(TEXT_7);
d65 1
a65 1
    stringBuffer.append(TEXT_8);
d67 1
a67 1
    stringBuffer.append(TEXT_9);
d72 1
a72 1
    stringBuffer.append(TEXT_10);
d74 1
a74 1
    stringBuffer.append(TEXT_11);
d76 1
a76 1
    stringBuffer.append(TEXT_12);
d83 1
a83 1
    stringBuffer.append(TEXT_13);
d85 1
a85 1
    stringBuffer.append(TEXT_14);
d87 1
a87 1
    stringBuffer.append(TEXT_15);
d95 1
a95 1
    stringBuffer.append(TEXT_16);
d97 1
a97 1
    stringBuffer.append(TEXT_17);
d99 1
a99 1
    stringBuffer.append(TEXT_18);
d104 1
a104 1
    stringBuffer.append(TEXT_19);
d106 1
a106 1
    stringBuffer.append(TEXT_20);
d108 1
a108 1
    stringBuffer.append(TEXT_21);
d113 1
a113 1
    stringBuffer.append(TEXT_22);
d115 1
a115 1
    stringBuffer.append(TEXT_23);
@


1.50
log
@#133836 Creating a child node without a label causes error
@
text
@d26 16
a41 18
  protected final String TEXT_8 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EXTERNAL_NODE_LABELS_LAYER = \"External Node Labels\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!";
  protected final String TEXT_9 = ".MODEL_ID.equals(";
  protected final String TEXT_10 = ".getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tint viewVisualID = ";
  protected final String TEXT_11 = ".getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_12 = NL + "\t\t\tcase ";
  protected final String TEXT_13 = ".VISUAL_ID:" + NL + "\t\t\t\t return new ";
  protected final String TEXT_14 = "(view);";
  protected final String TEXT_15 = NL + "\t\t\tcase ";
  protected final String TEXT_16 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_17 = "(view);";
  protected final String TEXT_18 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_19 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);";
  protected final String TEXT_21 = NL + "\t\t\tcase ";
  protected final String TEXT_22 = ".VISUAL_ID:" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_23 = "(view);";
  protected final String TEXT_24 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source){" + NL + "        if (source.getFigure() instanceof WrapLabel)" + NL + "            return new TextCellEditorLocator((WrapLabel) source.getFigure());" + NL + "        else {" + NL + "            IFigure figure = source.getFigure();" + NL + "            return new LabelCellEditorLocator((Label) figure);" + NL + "        }" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic private class TextCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WrapLabel wrapLabel;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TextCellEditorLocator(WrapLabel wrapLabel) {" + NL + "\t\t\tsuper();" + NL + "\t\t\tthis.wrapLabel = wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic WrapLabel getWrapLabel() {" + NL + "\t\t\treturn wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getWrapLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetWrapLabel().translateToAbsolute(rect);" + NL + "\t\t\t" + NL + "\t\t\tif (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));" + NL + "\t\t\telse {" + NL + "\t\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LabelCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Label label;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LabelCellEditorLocator(Label label) {" + NL + "\t\t\tthis.label = label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Label getLabel() {" + NL + "\t\t\treturn label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "" + NL + "\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_25 = NL;
d70 1
a70 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a71 4
    stringBuffer.append(visualIDRegistryClassName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(visualIDRegistryClassName);
    stringBuffer.append(TEXT_11);
d76 1
a76 1
    stringBuffer.append(TEXT_12);
d78 1
a78 1
    stringBuffer.append(TEXT_13);
d80 1
a80 1
    stringBuffer.append(TEXT_14);
d87 1
a87 1
    stringBuffer.append(TEXT_15);
d89 1
a89 1
    stringBuffer.append(TEXT_16);
d91 1
a91 1
    stringBuffer.append(TEXT_17);
d99 1
a99 1
    stringBuffer.append(TEXT_18);
d101 1
a101 1
    stringBuffer.append(TEXT_19);
d103 1
a103 1
    stringBuffer.append(TEXT_20);
d108 1
a108 1
    stringBuffer.append(TEXT_21);
d110 1
a110 1
    stringBuffer.append(TEXT_22);
d112 1
a112 1
    stringBuffer.append(TEXT_23);
d117 1
a117 1
    stringBuffer.append(TEXT_24);
d119 1
a119 1
    stringBuffer.append(TEXT_25);
@


1.49
log
@@@generated comments added.
@
text
@d28 1
a28 1
  protected final String TEXT_10 = ".getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = ";
d42 1
a42 1
  protected final String TEXT_24 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source){" + NL + "        if (source.getFigure() instanceof WrapLabel)" + NL + "            return new TextCellEditorLocator((WrapLabel) source.getFigure());" + NL + "        else {" + NL + "            IFigure figure = source.getFigure();" + NL + "            return new LabelCellEditorLocator((Label) figure);" + NL + "        }" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic private class TextCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WrapLabel wrapLabel;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic TextCellEditorLocator(WrapLabel wrapLabel) {" + NL + "\t\t\tsuper();" + NL + "\t\t\tthis.wrapLabel = wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic WrapLabel getWrapLabel() {" + NL + "\t\t\treturn wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getWrapLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetWrapLabel().translateToAbsolute(rect);" + NL + "\t\t\t" + NL + "\t\t\tif (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));" + NL + "\t\t\telse {" + NL + "\t\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LabelCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Label label;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic LabelCellEditorLocator(Label label) {" + NL + "\t\t\tthis.label = label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Label getLabel() {" + NL + "\t\t\treturn label;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "" + NL + "\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
d88 1
a88 1
	if (container instanceof GenNode && !((GenNode) container).isListContainerEntry()) {
@


1.48
log
@add missing @@generated tags
@
text
@d42 1
a42 1
  protected final String TEXT_24 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source){" + NL + "        if (source.getFigure() instanceof WrapLabel)" + NL + "            return new TextCellEditorLocator((WrapLabel) source.getFigure());" + NL + "        else {" + NL + "            IFigure figure = source.getFigure();" + NL + "            return new LabelCellEditorLocator((Label) figure);" + NL + "        }" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic private class TextCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\tprivate WrapLabel wrapLabel;" + NL + "\t\t" + NL + "\t\tpublic TextCellEditorLocator(WrapLabel wrapLabel) {" + NL + "\t\t\tsuper();" + NL + "\t\t\tthis.wrapLabel = wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t" + NL + "\t\tpublic WrapLabel getWrapLabel() {" + NL + "\t\t\treturn wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getWrapLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetWrapLabel().translateToAbsolute(rect);" + NL + "\t\t\t" + NL + "\t\t\tif (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));" + NL + "\t\t\telse {" + NL + "\t\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LabelCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\tprivate Label label;" + NL + "" + NL + "\t\tpublic LabelCellEditorLocator(Label label) {" + NL + "\t\t\tthis.label = label;" + NL + "\t\t}" + NL + "" + NL + "\t\tpublic Label getLabel() {" + NL + "\t\t\treturn label;" + NL + "\t\t}" + NL + "" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "" + NL + "\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.47
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d42 1
a42 1
  protected final String TEXT_24 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\tpublic static CellEditorLocator getTextCellEditorLocator(ITextAwareEditPart source){" + NL + "        if (source.getFigure() instanceof WrapLabel)" + NL + "            return new TextCellEditorLocator((WrapLabel) source.getFigure());" + NL + "        else {" + NL + "            IFigure figure = source.getFigure();" + NL + "            return new LabelCellEditorLocator((Label) figure);" + NL + "        }" + NL + "    }" + NL + "" + NL + "\tstatic private class TextCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\tprivate WrapLabel wrapLabel;" + NL + "\t\t" + NL + "\t\tpublic TextCellEditorLocator(WrapLabel wrapLabel) {" + NL + "\t\t\tsuper();" + NL + "\t\t\tthis.wrapLabel = wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\t" + NL + "\t\tpublic WrapLabel getWrapLabel() {" + NL + "\t\t\treturn wrapLabel;" + NL + "\t\t}" + NL + "" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getWrapLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetWrapLabel().translateToAbsolute(rect);" + NL + "\t\t\t" + NL + "\t\t\tif (getWrapLabel().isTextWrapped() && getWrapLabel().getText().length() > 0)" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(rect.width, SWT.DEFAULT)));" + NL + "\t\t\telse {" + NL + "\t\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr*2, 0));" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "" + NL + "\t}" + NL + "" + NL + "\tprivate static class LabelCellEditorLocator implements CellEditorLocator {" + NL + "" + NL + "\t\tprivate Label label;" + NL + "" + NL + "\t\tpublic LabelCellEditorLocator(Label label) {" + NL + "\t\t\tthis.label = label;" + NL + "\t\t}" + NL + "" + NL + "\t\tpublic Label getLabel() {" + NL + "\t\t\treturn label;" + NL + "\t\t}" + NL + "" + NL + "\t\tpublic void relocate(CellEditor celleditor) {" + NL + "\t\t\tText text = (Text) celleditor.getControl();" + NL + "\t\t\tRectangle rect = getLabel().getTextBounds().getCopy();" + NL + "\t\t\tgetLabel().translateToAbsolute(rect);" + NL + "" + NL + "\t\t\tint avr = FigureUtilities.getFontMetrics(text.getFont()).getAverageCharWidth();" + NL + "\t\t\trect.setSize(new Dimension(text.computeSize(SWT.DEFAULT, SWT.DEFAULT)).expand(avr * 2, 0));" + NL + "" + NL + "\t\t\tif (!rect.equals(new Rectangle(text.getBounds())))" + NL + "\t\t\t\ttext.setBounds(rect.x, rect.y, rect.width, rect.height);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.46
log
@Removing obsolete code to get rid of compilation warnings.
@
text
@d31 1
a31 1
  protected final String TEXT_13 = ":" + NL + "\t\t\t\t return new ";
d34 1
a34 1
  protected final String TEXT_16 = ":" + NL + "\t\t\t\treturn new ";
d37 1
a37 1
  protected final String TEXT_19 = ":" + NL + "\t\t\t\treturn new ";
d40 1
a40 1
  protected final String TEXT_22 = ":" + NL + "\t\t\t\treturn new ";
d83 1
a83 1
    stringBuffer.append(container.getVisualID());
d94 1
a94 1
    stringBuffer.append(label.getVisualID());
d106 1
a106 1
    stringBuffer.append(link.getVisualID());
d115 1
a115 1
    stringBuffer.append(linkLabel.getVisualID());
@


1.45
log
@use correct cell editor locator for WrapLabels
@
text
@a49 1
final String modelID = genDiagram.getEditorGen().getModelID();
@


1.44
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d24 1
a24 1
  protected final String TEXT_6 = NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d42 1
a42 1
  protected final String TEXT_24 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
@


1.43
log
@using M6 to generate code.
@
text
@d26 18
a43 23
  protected final String TEXT_8 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EXTERNAL_NODE_LABELS_LAYER = \"External Node Labels\";" + NL;
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_11 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_14 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!\"";
  protected final String TEXT_16 = "\".equals(getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_17 = NL + "\t\t\tcase ";
  protected final String TEXT_18 = ":" + NL + "\t\t\t\t return new ";
  protected final String TEXT_19 = "(view);";
  protected final String TEXT_20 = NL + "\t\t\tcase ";
  protected final String TEXT_21 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_22 = "(view);";
  protected final String TEXT_23 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_24 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_25 = "(view);";
  protected final String TEXT_26 = NL + "\t\t\tcase ";
  protected final String TEXT_27 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_28 = "(view);";
  protected final String TEXT_29 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_30 = NL;
d66 4
a69 1
    importManager.markImportLocation(stringBuffer);
d73 1
d75 1
d77 1
a77 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a78 8
    stringBuffer.append(TEXT_12);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(modelID);
    stringBuffer.append(TEXT_16);
d83 1
a83 1
    stringBuffer.append(TEXT_17);
d85 1
a85 1
    stringBuffer.append(TEXT_18);
d87 1
a87 1
    stringBuffer.append(TEXT_19);
d94 1
a94 1
    stringBuffer.append(TEXT_20);
d96 1
a96 1
    stringBuffer.append(TEXT_21);
d98 1
a98 1
    stringBuffer.append(TEXT_22);
d106 1
a106 1
    stringBuffer.append(TEXT_23);
d108 1
a108 1
    stringBuffer.append(TEXT_24);
d110 1
a110 1
    stringBuffer.append(TEXT_25);
d115 1
a115 1
    stringBuffer.append(TEXT_26);
d117 1
a117 1
    stringBuffer.append(TEXT_27);
d119 1
a119 1
    stringBuffer.append(TEXT_28);
d124 1
a124 1
    stringBuffer.append(TEXT_29);
d126 1
a126 1
    stringBuffer.append(TEXT_30);
@


1.42
log
@restore generators
@
text
@d52 1
a52 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.41
log
@#134095 do not store compiled templates in cvs
@
text
@d52 1
a52 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.40
log
@Switching to eclipse M6.
@
text
@@


1.39
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d52 1
a52 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.38
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d39 10
a48 17
  protected final String TEXT_21 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_22 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_23 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_24 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\tcase ";
  protected final String TEXT_26 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_27 = "(view);";
  protected final String TEXT_28 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_29 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_30 = "(view);";
  protected final String TEXT_31 = NL + "\t\t\tcase ";
  protected final String TEXT_32 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_33 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_34 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_35 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_37 = NL;
a100 5
			if (label instanceof ExternalLabel) {
// [++] Just to remove unnecessary imports we are doing this import insode a loop
				String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
// [--]
				String labelViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
d105 1
a105 1
    stringBuffer.append(labelViewId);
a106 12
    stringBuffer.append(label.getEditPartClassName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(((ExternalLabel) label).getTextEditPartClassName());
    stringBuffer.append(TEXT_24);
    
			} else {

    stringBuffer.append(TEXT_25);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(label.getEditPartClassName());
    stringBuffer.append(TEXT_27);
a107 1
			}
d114 1
a114 1
    stringBuffer.append(TEXT_28);
d116 1
a116 1
    stringBuffer.append(TEXT_29);
d118 1
a118 1
    stringBuffer.append(TEXT_30);
a120 3
// [++] Just to remove unnecessary imports we are doing this import insode a loop
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
// [--]
a121 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + linkLabel.getSemanticHintLabelFieldName();
d123 1
a123 1
    stringBuffer.append(TEXT_31);
d125 1
a125 3
    stringBuffer.append(TEXT_32);
    stringBuffer.append(labelViewId);
    stringBuffer.append(TEXT_33);
d127 1
a127 3
    stringBuffer.append(TEXT_34);
    stringBuffer.append(linkLabel.getTextEditPartClassName());
    stringBuffer.append(TEXT_35);
d132 1
a132 1
    stringBuffer.append(TEXT_36);
d134 1
a134 1
    stringBuffer.append(TEXT_37);
@


1.37
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@d19 8
a26 8
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EXTERNAL_NODE_LABELS_LAYER = \"External Node Labels\";" + NL;
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_8 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
d28 7
a34 7
  protected final String TEXT_10 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_11 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_12 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!\"";
  protected final String TEXT_13 = "\".equals(getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_14 = NL + "\t\t\tcase ";
  protected final String TEXT_15 = ":" + NL + "\t\t\t\t return new ";
  protected final String TEXT_16 = "(view);";
d36 8
a43 8
  protected final String TEXT_18 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_19 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_21 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\tcase ";
  protected final String TEXT_23 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_24 = "(view);";
  protected final String TEXT_25 = "\t\t" + NL + "\t\t\tcase ";
d46 10
a55 7
  protected final String TEXT_28 = NL + "\t\t\tcase ";
  protected final String TEXT_29 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_30 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_31 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_32 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_34 = NL;
d65 4
a68 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d70 1
a70 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d72 1
a72 1
    importManager.markImportLocation(stringBuffer);
d74 1
a74 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d76 1
d78 1
d80 1
a80 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d86 4
d91 1
a91 1
    stringBuffer.append(TEXT_12);
d93 1
a93 1
    stringBuffer.append(TEXT_13);
d98 1
a98 1
    stringBuffer.append(TEXT_14);
d100 1
a100 1
    stringBuffer.append(TEXT_15);
d102 1
a102 1
    stringBuffer.append(TEXT_16);
d114 1
a114 1
    stringBuffer.append(TEXT_17);
d116 1
a116 1
    stringBuffer.append(TEXT_18);
d118 1
a118 1
    stringBuffer.append(TEXT_19);
d120 1
a120 1
    stringBuffer.append(TEXT_20);
d122 1
a122 1
    stringBuffer.append(TEXT_21);
d126 1
a126 1
    stringBuffer.append(TEXT_22);
d128 1
a128 1
    stringBuffer.append(TEXT_23);
d130 1
a130 1
    stringBuffer.append(TEXT_24);
d139 1
a139 1
    stringBuffer.append(TEXT_25);
d141 1
a141 1
    stringBuffer.append(TEXT_26);
d143 1
a143 1
    stringBuffer.append(TEXT_27);
d152 1
a152 1
    stringBuffer.append(TEXT_28);
d154 1
a154 1
    stringBuffer.append(TEXT_29);
d156 1
a156 1
    stringBuffer.append(TEXT_30);
d158 1
a158 1
    stringBuffer.append(TEXT_31);
d160 1
a160 1
    stringBuffer.append(TEXT_32);
d165 1
a165 1
    stringBuffer.append(TEXT_33);
d167 1
a167 1
    stringBuffer.append(TEXT_34);
@


1.36
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d28 1
a28 1
  protected final String TEXT_10 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getVisualID(View containerView) {" + NL + "\t\t";
@


1.35
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d58 1
a58 1
final GenDiagram genDiagram = (GenDiagram) argument;
@


1.34
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d59 1
a59 1
final String modelID = genDiagram.getEditorGen().getDomainGenModel().getModelName();
@


1.33
log
@ImportManager moved to oeg.common
@
text
@d57 4
a60 1
    GenDiagram genDiagram = (GenDiagram) argument;
d78 1
a78 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d80 1
a80 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
@


1.32
log
@#125893
Logging methods
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.*;
@


1.31
log
@rename GenContainerEditPart -> GenContainerBase
@
text
@d29 24
a52 23
  protected final String TEXT_11 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!\"";
  protected final String TEXT_12 = "\".equals(getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_13 = NL + "\t\t\tcase ";
  protected final String TEXT_14 = ":" + NL + "\t\t\t\t return new ";
  protected final String TEXT_15 = "(view);";
  protected final String TEXT_16 = NL + "\t\t\tcase ";
  protected final String TEXT_17 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_18 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_19 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_21 = NL + "\t\t\tcase ";
  protected final String TEXT_22 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_23 = "(view);";
  protected final String TEXT_24 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_25 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_26 = "(view);";
  protected final String TEXT_27 = NL + "\t\t\tcase ";
  protected final String TEXT_28 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_29 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_30 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_31 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_32 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_33 = NL;
d75 2
d78 1
a78 1
    stringBuffer.append(TEXT_12);
d83 1
a83 1
    stringBuffer.append(TEXT_13);
d85 1
a85 1
    stringBuffer.append(TEXT_14);
d87 1
a87 1
    stringBuffer.append(TEXT_15);
d99 1
a99 1
    stringBuffer.append(TEXT_16);
d101 1
a101 1
    stringBuffer.append(TEXT_17);
d103 1
a103 1
    stringBuffer.append(TEXT_18);
d105 1
a105 1
    stringBuffer.append(TEXT_19);
d107 1
a107 1
    stringBuffer.append(TEXT_20);
d111 1
a111 1
    stringBuffer.append(TEXT_21);
d113 1
a113 1
    stringBuffer.append(TEXT_22);
d115 1
a115 1
    stringBuffer.append(TEXT_23);
d124 1
a124 1
    stringBuffer.append(TEXT_24);
d126 1
a126 1
    stringBuffer.append(TEXT_25);
d128 1
a128 1
    stringBuffer.append(TEXT_26);
d137 1
a137 1
    stringBuffer.append(TEXT_27);
d139 1
a139 1
    stringBuffer.append(TEXT_28);
d141 1
a141 1
    stringBuffer.append(TEXT_29);
d143 1
a143 1
    stringBuffer.append(TEXT_30);
d145 1
a145 1
    stringBuffer.append(TEXT_31);
d150 1
a150 1
    stringBuffer.append(TEXT_32);
d152 1
a152 1
    stringBuffer.append(TEXT_33);
@


1.30
log
@#124413
Cleaning up the gmfgen model
@
text
@d77 2
a78 2
for (Iterator containers = genDiagram.getAllContainerEditParts().iterator(); containers.hasNext();) {
	GenContainerEditPart container = (GenContainerEditPart) containers.next();
@


1.29
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d29 23
a51 24
  protected final String TEXT_11 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!\"";
  protected final String TEXT_13 = "\".equals(getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {";
  protected final String TEXT_14 = NL + "\t\tcase ";
  protected final String TEXT_15 = ":" + NL + "\t\t\t return new ";
  protected final String TEXT_16 = "(view);";
  protected final String TEXT_17 = NL + "\t\tcase ";
  protected final String TEXT_18 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_19 = ".equals(view.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_21 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_24 = "(view);";
  protected final String TEXT_25 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_26 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_27 = "(view);";
  protected final String TEXT_28 = NL + "\t\t\tcase ";
  protected final String TEXT_29 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_30 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_31 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_32 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_34 = NL;
d74 1
a74 5
    
List genLinks = genDiagram.getLinks();
Collection allContainers = new LinkedList(genDiagram.getAllContainers());
allContainers.add(genDiagram);

a75 2
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
    stringBuffer.append(TEXT_13);
d77 1
a77 1
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
d80 2
d83 1
a83 1
    stringBuffer.append(container.getVisualID());
a84 2
    stringBuffer.append(container.getEditPartClassName());
    stringBuffer.append(TEXT_16);
d96 2
d99 1
a99 1
    stringBuffer.append(label.getVisualID());
d101 1
a101 1
    stringBuffer.append(labelViewId);
d103 1
a103 1
    stringBuffer.append(label.getEditPartClassName());
a104 2
    stringBuffer.append(((ExternalLabel) label).getTextEditPartClassName());
    stringBuffer.append(TEXT_21);
d108 2
d111 1
a111 1
    stringBuffer.append(label.getVisualID());
a112 2
    stringBuffer.append(label.getEditPartClassName());
    stringBuffer.append(TEXT_24);
d118 1
a118 1
for (Iterator links = genLinks.iterator(); links.hasNext();) {
d121 2
d124 1
a124 1
    stringBuffer.append(link.getVisualID());
a125 2
    stringBuffer.append(link.getEditPartClassName());
    stringBuffer.append(TEXT_27);
d134 2
d137 1
a137 1
    stringBuffer.append(linkLabel.getVisualID());
d139 1
a139 1
    stringBuffer.append(labelViewId);
d141 1
a141 1
    stringBuffer.append(linkLabel.getEditPartClassName());
a142 2
    stringBuffer.append(linkLabel.getTextEditPartClassName());
    stringBuffer.append(TEXT_32);
d147 2
a149 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_34);
@


1.28
log
@#114178
Create shortcut functionality added
@
text
@d31 22
a52 24
  protected final String TEXT_13 = "\".equals(getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {" + NL + "\t\t\tcase ";
  protected final String TEXT_14 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_15 = "(view);";
  protected final String TEXT_16 = NL + "\t\tcase ";
  protected final String TEXT_17 = ":" + NL + "\t\t\t return new ";
  protected final String TEXT_18 = "(view);";
  protected final String TEXT_19 = NL + "\t\tcase ";
  protected final String TEXT_20 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_21 = ".equals(view.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_22 = "(view);" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_23 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_24 = NL + "\t\tcase ";
  protected final String TEXT_25 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_26 = "(view);";
  protected final String TEXT_27 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_28 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_29 = "(view);";
  protected final String TEXT_30 = NL + "\t\t\tcase ";
  protected final String TEXT_31 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_32 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_33 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_34 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_36 = NL;
d77 2
a78 1
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
a82 4
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_15);
d85 1
a85 1
	GenChildContainer container = (GenChildContainer) containers.next();
d87 1
a87 1
    stringBuffer.append(TEXT_16);
d89 1
a89 1
    stringBuffer.append(TEXT_17);
d91 1
a91 1
    stringBuffer.append(TEXT_18);
d93 1
a93 1
	if (container instanceof GenChildNode ? !((GenChildNode) container).isListContainerEntry() : container instanceof GenNode) {
d103 1
a103 1
    stringBuffer.append(TEXT_19);
d105 1
a105 1
    stringBuffer.append(TEXT_20);
d107 1
a107 1
    stringBuffer.append(TEXT_21);
d109 1
a109 1
    stringBuffer.append(TEXT_22);
d111 1
a111 1
    stringBuffer.append(TEXT_23);
d115 1
a115 1
    stringBuffer.append(TEXT_24);
d117 1
a117 1
    stringBuffer.append(TEXT_25);
d119 1
a119 1
    stringBuffer.append(TEXT_26);
d128 1
a128 1
    stringBuffer.append(TEXT_27);
d130 1
a130 1
    stringBuffer.append(TEXT_28);
d132 1
a132 1
    stringBuffer.append(TEXT_29);
d141 1
a141 1
    stringBuffer.append(TEXT_30);
d143 1
a143 1
    stringBuffer.append(TEXT_31);
d145 1
a145 1
    stringBuffer.append(TEXT_32);
d147 1
a147 1
    stringBuffer.append(TEXT_33);
d149 1
a149 1
    stringBuffer.append(TEXT_34);
d154 1
a154 1
    stringBuffer.append(TEXT_35);
d156 1
a156 1
    stringBuffer.append(TEXT_36);
@


1.27
log
@#122054 support external node labels
@
text
@d25 8
a32 8
  protected final String TEXT_7 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_8 = " annotation = containerView.getEAnnotation(\"VisualID\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"value\");" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!\"";
  protected final String TEXT_10 = "\".equals(view.getDiagram().getType())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {" + NL + "\t\t\tcase ";
  protected final String TEXT_11 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_12 = "(view);";
  protected final String TEXT_13 = NL + "\t\tcase ";
  protected final String TEXT_14 = ":" + NL + "\t\t\t return new ";
d35 9
a43 9
  protected final String TEXT_17 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_18 = ".equals(view.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_19 = "(view);" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_21 = NL + "\t\tcase ";
  protected final String TEXT_22 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_23 = "(view);";
  protected final String TEXT_24 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_25 = ":" + NL + "\t\t\t\treturn new ";
d45 10
a54 7
  protected final String TEXT_27 = NL + "\t\t\tcase ";
  protected final String TEXT_28 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_29 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_30 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_31 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_32 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_33 = NL;
d73 4
d81 1
a81 1
    stringBuffer.append(TEXT_9);
d83 1
a83 1
    stringBuffer.append(TEXT_10);
d85 1
a85 1
    stringBuffer.append(TEXT_11);
d87 1
a87 1
    stringBuffer.append(TEXT_12);
d92 1
a92 1
    stringBuffer.append(TEXT_13);
d94 1
a94 1
    stringBuffer.append(TEXT_14);
d96 1
a96 1
    stringBuffer.append(TEXT_15);
d108 1
a108 1
    stringBuffer.append(TEXT_16);
d110 1
a110 1
    stringBuffer.append(TEXT_17);
d112 1
a112 1
    stringBuffer.append(TEXT_18);
d114 1
a114 1
    stringBuffer.append(TEXT_19);
d116 1
a116 1
    stringBuffer.append(TEXT_20);
d120 1
a120 1
    stringBuffer.append(TEXT_21);
d122 1
a122 1
    stringBuffer.append(TEXT_22);
d124 1
a124 1
    stringBuffer.append(TEXT_23);
d133 1
a133 1
    stringBuffer.append(TEXT_24);
d135 1
a135 1
    stringBuffer.append(TEXT_25);
d137 1
a137 1
    stringBuffer.append(TEXT_26);
d146 1
a146 1
    stringBuffer.append(TEXT_27);
d148 1
a148 1
    stringBuffer.append(TEXT_28);
d150 1
a150 1
    stringBuffer.append(TEXT_29);
d152 1
a152 1
    stringBuffer.append(TEXT_30);
d154 1
a154 1
    stringBuffer.append(TEXT_31);
d159 1
a159 1
    stringBuffer.append(TEXT_32);
d161 1
a161 1
    stringBuffer.append(TEXT_33);
@


1.26
log
@#122054 support external node labels (partial fix)
@
text
@d23 1
a23 1
  protected final String TEXT_5 = " implements EditPartFactory {" + NL;
@


1.25
log
@#121581
Fields for the compartments are named unique.
@
text
@d35 17
a51 12
  protected final String TEXT_17 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_18 = "(view);";
  protected final String TEXT_19 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_20 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_21 = "(view);";
  protected final String TEXT_22 = NL + "\t\t\tcase ";
  protected final String TEXT_23 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_24 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_25 = "(view);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_26 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_28 = NL;
d95 5
d104 2
d107 11
a117 1
    stringBuffer.append(TEXT_18);
d119 1
d126 1
a126 1
    stringBuffer.append(TEXT_19);
d128 1
a128 1
    stringBuffer.append(TEXT_20);
d130 1
a130 1
    stringBuffer.append(TEXT_21);
d139 1
a139 1
    stringBuffer.append(TEXT_22);
d141 1
a141 1
    stringBuffer.append(TEXT_23);
d143 1
a143 1
    stringBuffer.append(TEXT_24);
d145 1
a145 1
    stringBuffer.append(TEXT_25);
d147 1
a147 1
    stringBuffer.append(TEXT_26);
d152 1
a152 1
    stringBuffer.append(TEXT_27);
d154 1
a154 1
    stringBuffer.append(TEXT_28);
@


1.24
log
@#112187 generate separate class for the link label text view
@
text
@d114 1
a114 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelId(linkLabel);
@


1.23
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d43 4
a46 11
  protected final String TEXT_25 = "(view) {" + NL + "\t\t\t\t\t" + NL + "\t\t\t\t\t\tpublic int getKeyPoint() {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_28 = "(view) {" + NL + "" + NL + "\t\t\t\t\t\tpublic ";
  protected final String TEXT_29 = " getParser() {" + NL + "\t\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\t\tparser = new ";
  protected final String TEXT_30 = "(";
  protected final String TEXT_31 = ".eINSTANCE.get";
  protected final String TEXT_32 = "().getEStructuralFeature(\"";
  protected final String TEXT_33 = "\"));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_34 = "\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_35 = NL;
d112 1
a112 2
		String semanticPackageInterfaceName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedPackageInterfaceName());
// [--]		
a114 8
		String semanticLinkInterfaceName;
		if (link.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) link.getModelFacet();
			semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		} else {
			FeatureModelFacet modelFacet = (FeatureModelFacet) link.getModelFacet();
			semanticLinkInterfaceName = modelFacet.getMetaFeature().getGenClass().getClassifierAccessorName();
		}
d121 1
a121 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart"));
d123 1
a123 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ConnectionLocator"));
a124 14
    stringBuffer.append(linkLabel.getAlignment());
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName()));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(linkLabel.getMetaFeature().getName());
    stringBuffer.append(TEXT_33);
d129 1
a129 1
    stringBuffer.append(TEXT_34);
d131 1
a131 1
    stringBuffer.append(TEXT_35);
@


1.22
log
@#116031 avoid hardcoded class names in templates
@
text
@d93 1
a93 1
	if (container instanceof GenNode) {
@


1.21
log
@#115972 generate single class with semantic hints
@
text
@d147 1
a147 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getProvidersPackageName() + ".StructuralFeatureParser"));
@


1.20
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@a106 1

a115 1
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(link);
d118 1
a118 1
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d122 1
a122 1
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(linkLabel);
a131 1

@


1.19
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d21 33
a53 29
  protected final String TEXT_3 = NL + "import java.util.Collection;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.draw2d.ConnectionLocator;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_4 = ".StructuralFeatureParser;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements EditPartFactory {" + NL;
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_9 = " annotation = containerView.getEAnnotation(\"VisualID\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"value\");" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (!\"";
  protected final String TEXT_11 = "\".equals(view.getDiagram().getType())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint viewVisualID = getVisualID(view);" + NL + "\t\t\tswitch (viewVisualID) {" + NL + "\t\t\tcase ";
  protected final String TEXT_12 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_13 = "(view);";
  protected final String TEXT_14 = NL + "\t\tcase ";
  protected final String TEXT_15 = ":" + NL + "\t\t\t return new ";
  protected final String TEXT_16 = "(view);";
  protected final String TEXT_17 = NL + "\t\tcase ";
  protected final String TEXT_18 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_19 = "(view);";
  protected final String TEXT_20 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_21 = ":" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_22 = "(view);";
  protected final String TEXT_23 = NL + "\t\t\tcase ";
  protected final String TEXT_24 = ":" + NL + "\t\t\t\tif (";
  protected final String TEXT_25 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new LabelEditPart(view) {" + NL + "\t\t\t\t\t" + NL + "\t\t\t\t\t\tpublic int getKeyPoint() {" + NL + "\t\t\t\t\t\t\treturn ConnectionLocator.";
  protected final String TEXT_26 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn new TextCompartmentEditPart(view) {" + NL + "" + NL + "\t\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_27 = ".eINSTANCE.get";
  protected final String TEXT_28 = "().getEStructuralFeature(\"";
  protected final String TEXT_29 = "\"));" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_30 = "\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createUnrecognizedEditPart(context, model);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEditPart(EditPart context, Object model) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_31 = NL;
d64 1
a64 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d66 1
a66 1
    importManager.markImportLocation(stringBuffer);
a67 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d70 1
a71 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_9);
a74 1
String semanticPackageInterfaceName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedPackageInterfaceName());
d76 2
d79 1
a79 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
d81 1
a81 1
    stringBuffer.append(genDiagram.getVisualID());
a82 2
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_13);
d87 2
d90 1
a90 1
    stringBuffer.append(container.getVisualID());
a91 2
    stringBuffer.append(container.getEditPartClassName());
    stringBuffer.append(TEXT_16);
d98 2
d101 1
a101 1
    stringBuffer.append(label.getVisualID());
a102 2
    stringBuffer.append(label.getEditPartClassName());
    stringBuffer.append(TEXT_19);
d111 2
d114 1
a114 1
    stringBuffer.append(link.getVisualID());
a115 2
    stringBuffer.append(link.getEditPartClassName());
    stringBuffer.append(TEXT_22);
a117 1
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d119 4
d135 2
d138 1
a138 1
    stringBuffer.append(linkLabel.getVisualID());
d140 1
a140 1
    stringBuffer.append(labelViewId);
d142 2
d145 7
a151 1
    stringBuffer.append(TEXT_26);
d153 1
a153 1
    stringBuffer.append(TEXT_27);
d155 1
a155 1
    stringBuffer.append(TEXT_28);
d157 1
a157 1
    stringBuffer.append(TEXT_29);
d162 1
a162 1
    stringBuffer.append(TEXT_30);
d164 1
a164 1
    stringBuffer.append(TEXT_31);
@


1.18
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@a4 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d24 26
a49 63
  protected final String TEXT_6 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (model instanceof Diagram) {" + NL + "\t\t\t\treturn createDiagramEditPart((Diagram) model);" + NL + "\t\t\t} else if (view instanceof Node) {" + NL + "\t\t\t\tif (view.eContainer() instanceof Diagram || (view.getType() != null && view.getType().length() > 0)) {" + NL + "\t\t\t\t\treturn createNodeEditPart((Node) model);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn createChildNodeEditPart((Node) model);" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (view instanceof Edge) {" + NL + "\t\t\t\treturn createEdgeEditPart((Edge) model);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createDiagramEditPart(Diagram diagram) {" + NL + "\t\tEObject element = diagram.getElement();" + NL + "\t\tif (";
  protected final String TEXT_8 = ".INSTANCE.getDiagramVisualID(element) != -1) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_9 = "(diagram);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createNodeEditPart(Node node) {" + NL + "\t\tEditPart linkLabelEditPart = createLinkLabelEditPart(node);" + NL + "\t\tif (linkLabelEditPart != null) {" + NL + "\t\t\treturn linkLabelEditPart;" + NL + "\t\t}" + NL + "\t\tfinal EObject element = node.getElement();" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_10 = ".INSTANCE.getNodeVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_11 = NL + "\t\tcase ";
  protected final String TEXT_12 = ":";
  protected final String TEXT_13 = NL + "\t\t\tif (";
  protected final String TEXT_14 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_15 = "(node);" + NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\tif (";
  protected final String TEXT_17 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new ListCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new CanonicalEditPolicy() {" + NL + "\t\t\t\t\t\t\tprotected List getSemanticChildrenList() {" + NL + "\t\t\t\t\t\t\t\tList result = new LinkedList();";
  protected final String TEXT_18 = NL + "\t\t\t\t\t\t\t\tresult.";
  protected final String TEXT_19 = "(((";
  protected final String TEXT_20 = ") element).";
  protected final String TEXT_21 = "());";
  protected final String TEXT_22 = NL + "\t\t\t\t\t\t\t\tCollection featureValues = ((";
  protected final String TEXT_23 = ") element).";
  protected final String TEXT_24 = "();" + NL + "\t\t\t\t\t\t\t\tfor (Iterator it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\t\tEObject nextValue = (EObject) it.next();";
  protected final String TEXT_25 = NL + "\t\t\t\t\t\t\t\tEObject nextValue = (EObject) ((";
  protected final String TEXT_26 = ") element).";
  protected final String TEXT_27 = "();";
  protected final String TEXT_28 = NL + "\t\t\t\t\t\t\t\tEClass nextEClass = nextValue.eClass();";
  protected final String TEXT_29 = NL + "\t\t\t\t\t\t\t\tif (";
  protected final String TEXT_30 = ".eINSTANCE.get";
  protected final String TEXT_31 = "().equals(nextEClass)) {" + NL + "\t\t\t\t\t\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t\t\t\t\t\t} ";
  protected final String TEXT_32 = NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\t\t\t\t\t\treturn result;" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\treturn \"";
  protected final String TEXT_34 = "\";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\treturn new ";
  protected final String TEXT_36 = "(node);";
  protected final String TEXT_37 = NL + "\t\t}" + NL + "\t\treturn createUnrecognizedNodeEditPart(node);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createLinkLabelEditPart(Node node) {";
  protected final String TEXT_38 = NL + "\t\tEObject element = node.getElement();" + NL + "\t\tint linkVID = ";
  protected final String TEXT_39 = ".INSTANCE.getLinkWithClassVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ":";
  protected final String TEXT_42 = NL + "\t\t\tif (";
  protected final String TEXT_43 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new LabelEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic int getKeyPoint() {" + NL + "\t\t\t\t\t\treturn ConnectionLocator.";
  protected final String TEXT_44 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tif (";
  protected final String TEXT_45 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new TextCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_46 = ".eINSTANCE.get";
  protected final String TEXT_47 = "().getEStructuralFeature(\"";
  protected final String TEXT_48 = "\"));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\t\treturn null;";
  protected final String TEXT_50 = NL + "\t\t}";
  protected final String TEXT_51 = "\t\t\t\t" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createUnrecognizedNodeEditPart(Node node) {" + NL + "\t\t// Handle creation of unrecognized node EditParts here" + NL + "\t \treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createChildNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_52 = ".INSTANCE.getChildNodeVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_53 = NL + "\t\tcase ";
  protected final String TEXT_54 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_55 = "(node);";
  protected final String TEXT_56 = NL + "\t\t} " + NL + "\t\treturn createUnrecognizedChildNodeEditPart(node);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedChildNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createEdgeEditPart(Edge edge) {";
  protected final String TEXT_57 = NL + "\t\tEObject element = edge.getElement();" + NL + "\t\tif (element == null) {";
  protected final String TEXT_58 = NL + "\t\t\tif (";
  protected final String TEXT_59 = ".VIEW_TYPE.equals(edge.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_60 = "(edge);" + NL + "\t\t\t}";
  protected final String TEXT_61 = NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tint linkVID = ";
  protected final String TEXT_62 = ".INSTANCE.getLinkWithClassVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_63 = NL + "\t\tcase ";
  protected final String TEXT_64 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_65 = "(edge);";
  protected final String TEXT_66 = NL + "\t\t}";
  protected final String TEXT_67 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);\t\t\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "}";
  protected final String TEXT_68 = NL;
a65 6
    
GenPackage genPackage = genDiagram.getDomainMetaModel();
List genNodes = genDiagram.getNodes();
List genLinks = genDiagram.getLinks();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());

a66 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d68 1
a68 1
    stringBuffer.append(genDiagram.getEditPartClassName());
a69 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_10);
d71 3
a73 3
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String modelElementInterfaceName = importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName());
d75 2
d78 1
a78 1
    stringBuffer.append(genNode.getVisualID());
d80 2
d83 2
a84 6
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
	List labels = genNode.getLabels();
	for (int j = 0; j < labels.size(); j++) {
		GenNodeLabel label = (GenNodeLabel) labels.get(j);
		String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
a85 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(labelTextViewId);
d87 1
a87 1
    stringBuffer.append(label.getEditPartClassName());
d89 2
d92 4
a95 5
	}
	List genCompartments = genNode.getCompartments();
	for (int j = 0; j < genCompartments.size(); j++) {
		GenCompartment genCompartment = (GenCompartment) genCompartments.get(j);
		String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genCompartment);
a96 2
    stringBuffer.append(TEXT_16);
    stringBuffer.append(compartmentId);
d98 4
a102 21
		Map childFeature2NodesMap = new HashMap();
		for (Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext();) {
			GenChildNode nextChildNode = (GenChildNode) it.next();
			GenFeature genFeature = nextChildNode.getModelFacet().getChildMetaFeature();
			List genChildNodes; 
			if (!childFeature2NodesMap.containsKey(genFeature)) {
				genChildNodes = new ArrayList();
				childFeature2NodesMap.put(genFeature, genChildNodes);
			} else {
				genChildNodes = (List) childFeature2NodesMap.get(genFeature);
			}

			if (nextChildNode.getDomainMetaClass() == null) {
				genChildNodes.clear();
				genChildNodes.add(nextChildNode);
				continue;
			}
			if (genChildNodes.size() == 1 && ((GenChildNode) genChildNodes.get(0)).getDomainMetaClass() == null) {
				continue;
			}
			genChildNodes.add(nextChildNode);
d104 5
a108 6
		
		for (Iterator it = childFeature2NodesMap.entrySet().iterator(); it.hasNext();) {
			Map.Entry nextEntry = (Map.Entry) it.next();
			GenFeature nextFeature = (GenFeature) nextEntry.getKey();
			List childNodes = (List) nextEntry.getValue();
			if (childNodes.size() == 1 && ((GenChildNode) childNodes.get(0)).getDomainMetaClass() == null) {
a109 4
    stringBuffer.append(TEXT_18);
    stringBuffer.append(nextFeature.isListType() ? "addAll" : "add");
    stringBuffer.append(TEXT_19);
    stringBuffer.append(modelElementInterfaceName);
d111 1
a111 1
    stringBuffer.append(nextFeature.getGetAccessor());
d113 2
d116 14
a129 4
				continue;
			}
			
			if (nextFeature.isListType()) {
a130 2
    stringBuffer.append(TEXT_22);
    stringBuffer.append(modelElementInterfaceName);
d132 1
a132 1
    stringBuffer.append(nextFeature.getGetAccessor());
d134 1
a134 3
    
			} else {

d136 1
a136 1
    stringBuffer.append(modelElementInterfaceName);
d138 1
a138 1
    stringBuffer.append(nextFeature.getGetAccessor());
d140 1
a140 3
    
			}

d142 1
a142 5
    			
			for (Iterator childNodesIterator = childNodes.iterator(); childNodesIterator.hasNext();) {
				GenChildNode nextChildNode = (GenChildNode) childNodesIterator.next();
				GenClass domainMetaclass = nextChildNode.getDomainMetaClass();

a143 84
    stringBuffer.append(importManager.getImportedName(domainMetaclass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(domainMetaclass.getClassifierAccessorName());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(childNodesIterator.hasNext() ? "else" : "");
    
			}
			if (nextFeature.isListType()) {

    stringBuffer.append(TEXT_32);
    
			}
		}

    stringBuffer.append(TEXT_33);
    stringBuffer.append(genCompartment.getTitle());
    stringBuffer.append(TEXT_34);
    	}
    stringBuffer.append(TEXT_35);
    stringBuffer.append(genNode.getEditPartClassName());
    stringBuffer.append(TEXT_36);
    
}

    stringBuffer.append(TEXT_37);
    if (!genLinks.isEmpty()) {
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_39);
    
	for (int i = 0; i < genLinks.size(); i++) {
		GenLink genLink = (GenLink) genLinks.get(i);
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
			String semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();

    stringBuffer.append(TEXT_40);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_41);
    
			List labels = genLink.getLabels();
			for (int j = 0; j < labels.size(); j++) {
				GenLinkLabel label = (GenLinkLabel) labels.get(j);
				String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(label);
				String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);

    stringBuffer.append(TEXT_42);
    stringBuffer.append(labelViewId);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(label.getAlignment());
    stringBuffer.append(TEXT_44);
    stringBuffer.append(labelTextViewId);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(label.getMetaFeature().getName());
    stringBuffer.append(TEXT_48);
    			}
    stringBuffer.append(TEXT_49);
    
		}
	}

    stringBuffer.append(TEXT_50);
    }
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_52);
    
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	List genChildNodes = AccessUtil.getAllChildNodes(genNode);
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);

    stringBuffer.append(TEXT_53);
    stringBuffer.append(genChildNode.getVisualID());
    stringBuffer.append(TEXT_54);
    stringBuffer.append(genChildNode.getEditPartClassName());
    stringBuffer.append(TEXT_55);
d148 1
a148 39
    stringBuffer.append(TEXT_56);
    if (!genLinks.isEmpty()) {
    stringBuffer.append(TEXT_57);
    
	for (int i = 0; i < genLinks.size(); i++) {
		GenLink genLink = (GenLink) genLinks.get(i);
		if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);

    stringBuffer.append(TEXT_58);
    stringBuffer.append(semanticHintsClassName);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_60);
    
		}
	}

    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_62);
    
	for (int i = 0; i < genLinks.size(); i++) {
		GenLink genLink = (GenLink) genLinks.get(i);
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_63);
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_65);
    
		}
	}

    stringBuffer.append(TEXT_66);
    }
    stringBuffer.append(TEXT_67);
d150 1
a150 1
    stringBuffer.append(TEXT_68);
@


1.17
log
@#113823 childMetaFeature moved to TypeModelFacet
@
text
@d140 4
a143 4
	List genChildContainers = genNode.getChildContainers();
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
		String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);
d150 1
a150 1
		for (Iterator it = genNode.getChildNodes().iterator(); it.hasNext();) {
a151 4
//TODO: add link from ChildNode to it's compartment into genmodel
			if (!genChildContainer.getGroupID().equals(nextChildNode.getGroupID())) {
				continue;
			}
d229 1
a229 1
    stringBuffer.append(genChildContainer.getTitleKey());
d289 1
a289 1
	List genChildNodes = genNode.getChildNodes();
@


1.16
log
@[ashatalin] #113258 sync diagram and domain models using canonicalEditPolicy
@
text
@d156 1
a156 1
			GenFeature genFeature = nextChildNode.getChildMetaFeature() != null ? nextChildNode.getChildMetaFeature() : nextChildNode.getModelFacet().getContainmentMetaFeature();
@


1.15
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.ConnectionLocator;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
d28 1
a28 1
  protected final String TEXT_9 = "(diagram);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createNodeEditPart(Node node) {" + NL + "\t\tEditPart linkLabelEditPart = createLinkLabelEditPart(node);" + NL + "\t\tif (linkLabelEditPart != null) {" + NL + "\t\t\treturn linkLabelEditPart;" + NL + "\t\t}" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tint nodeVID = ";
d36 13
a48 13
  protected final String TEXT_17 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new ListCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\treturn \"";
  protected final String TEXT_18 = "\";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_19 = NL + "\t\t\treturn new ";
  protected final String TEXT_20 = "(node);";
  protected final String TEXT_21 = NL + "\t\t}" + NL + "\t\treturn createUnrecognizedNodeEditPart(node);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createLinkLabelEditPart(Node node) {";
  protected final String TEXT_22 = NL + "\t\tEObject element = node.getElement();" + NL + "\t\tint linkVID = ";
  protected final String TEXT_23 = ".INSTANCE.getLinkWithClassVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_24 = NL + "\t\tcase ";
  protected final String TEXT_25 = ":";
  protected final String TEXT_26 = NL + "\t\t\tif (";
  protected final String TEXT_27 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new LabelEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic int getKeyPoint() {" + NL + "\t\t\t\t\t\treturn ConnectionLocator.";
  protected final String TEXT_28 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tif (";
  protected final String TEXT_29 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new TextCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
d50 11
a60 11
  protected final String TEXT_31 = "().getEStructuralFeature(\"";
  protected final String TEXT_32 = "\"));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\treturn null;";
  protected final String TEXT_34 = NL + "\t\t}";
  protected final String TEXT_35 = "\t\t\t\t" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createUnrecognizedNodeEditPart(Node node) {" + NL + "\t\t// Handle creation of unrecognized node EditParts here" + NL + "\t \treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createChildNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_36 = ".INSTANCE.getChildNodeVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_37 = NL + "\t\tcase ";
  protected final String TEXT_38 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_39 = "(node);";
  protected final String TEXT_40 = NL + "\t\t} " + NL + "\t\treturn createUnrecognizedChildNodeEditPart(node);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedChildNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createEdgeEditPart(Edge edge) {";
  protected final String TEXT_41 = NL + "\t\tEObject element = edge.getElement();" + NL + "\t\tif (element == null) {";
d62 7
a68 7
  protected final String TEXT_43 = ".VIEW_TYPE.equals(edge.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_44 = "(edge);" + NL + "\t\t\t}";
  protected final String TEXT_45 = NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tint linkVID = ";
  protected final String TEXT_46 = ".INSTANCE.getLinkWithClassVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_47 = NL + "\t\tcase ";
  protected final String TEXT_48 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_49 = "(edge);";
d70 18
a87 2
  protected final String TEXT_51 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);\t\t\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "}";
  protected final String TEXT_52 = NL;
d120 1
d148 85
d234 1
a234 1
    stringBuffer.append(TEXT_18);
d236 1
a236 1
    stringBuffer.append(TEXT_19);
d238 1
a238 1
    stringBuffer.append(TEXT_20);
d242 1
a242 1
    stringBuffer.append(TEXT_21);
d244 1
a244 1
    stringBuffer.append(TEXT_22);
d246 1
a246 1
    stringBuffer.append(TEXT_23);
d256 1
a256 1
    stringBuffer.append(TEXT_24);
d258 1
a258 1
    stringBuffer.append(TEXT_25);
d266 1
a266 1
    stringBuffer.append(TEXT_26);
d268 1
a268 1
    stringBuffer.append(TEXT_27);
d270 1
a270 1
    stringBuffer.append(TEXT_28);
d272 1
a272 1
    stringBuffer.append(TEXT_29);
d274 1
a274 1
    stringBuffer.append(TEXT_30);
d276 1
a276 1
    stringBuffer.append(TEXT_31);
d278 1
a278 1
    stringBuffer.append(TEXT_32);
d280 1
a280 1
    stringBuffer.append(TEXT_33);
d285 1
a285 1
    stringBuffer.append(TEXT_34);
d287 1
a287 1
    stringBuffer.append(TEXT_35);
d289 1
a289 1
    stringBuffer.append(TEXT_36);
d297 1
a297 1
    stringBuffer.append(TEXT_37);
d299 1
a299 1
    stringBuffer.append(TEXT_38);
d301 1
a301 1
    stringBuffer.append(TEXT_39);
d306 1
a306 1
    stringBuffer.append(TEXT_40);
d308 1
a308 1
    stringBuffer.append(TEXT_41);
d316 1
a316 1
    stringBuffer.append(TEXT_42);
d318 1
a318 1
    stringBuffer.append(TEXT_43);
d320 1
a320 1
    stringBuffer.append(TEXT_44);
d325 1
a325 1
    stringBuffer.append(TEXT_45);
d327 1
a327 1
    stringBuffer.append(TEXT_46);
d333 1
a333 1
    stringBuffer.append(TEXT_47);
d335 1
a335 1
    stringBuffer.append(TEXT_48);
d337 1
a337 1
    stringBuffer.append(TEXT_49);
d342 1
a342 1
    stringBuffer.append(TEXT_50);
d344 1
a344 1
    stringBuffer.append(TEXT_51);
d346 1
a346 1
    stringBuffer.append(TEXT_52);
@


1.14
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d150 3
a152 3
		if (genLink instanceof GenLinkWithClass) {
			GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
			String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
d210 1
a210 1
		if (genLink instanceof GenLinkReferenceOnly) {
d229 1
a229 1
		if (genLink instanceof GenLinkWithClass) {
@


1.13
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d111 4
a114 2
	if (genNode.hasNameToEdit()) {
		String semanticHint = semanticHintsClassName + '.' + AccessUtil.getNameSemanticHint(genNode);
d117 1
a117 1
    stringBuffer.append(semanticHint);
d119 1
a119 1
    stringBuffer.append(AccessUtil.getNodeLabelEditPartClassName(genNode));
d141 1
a141 3
    
if (genLinks.size() != 0) {

d160 3
a162 3
				LinkLabel label = (LinkLabel) labels.get(j);
				String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelId(label);
				String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelTextId(label);
d175 1
a175 1
    stringBuffer.append(label.getDomainMetaFeature().getName());
d184 1
a184 3
    
}

d200 2
a201 1
    	}
d205 1
a205 3
    
if (!genLinks.isEmpty()) {

d241 1
a241 3
    
}

@


1.12
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d25 1
a25 1
  protected final String TEXT_6 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (model instanceof Diagram) {" + NL + "\t\t\t\treturn createDiagramEditPart((Diagram) model);" + NL + "\t\t\t} else if (view instanceof Node) {" + NL + "\t\t\t\tboolean isTopLevel = view.eContainer() instanceof Diagram || (view.getType() != null && view.getType().length() > 0);" + NL + "\t\t\t\tif (isTopLevel) {" + NL + "\t\t\t\t\treturn createNodeEditPart((Node) model);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn createChildNodeEditPart((Node) model);" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (view instanceof Edge) {" + NL + "\t\t\t\treturn createEdgeEditPart((Edge) model);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
d35 2
a36 2
  protected final String TEXT_16 = NL + "\t\t\tif (\"";
  protected final String TEXT_17 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new ListCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\treturn \"";
d45 4
a48 4
  protected final String TEXT_26 = NL + "\t\t\tif (\"";
  protected final String TEXT_27 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new LabelEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic int getKeyPoint() {" + NL + "\t\t\t\t\t\treturn ConnectionLocator.";
  protected final String TEXT_28 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_29 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new TextCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
d70 1
a70 1
  protected final String TEXT_51 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);\t\t\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
d109 2
a111 2
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d124 1
d127 1
a127 1
    stringBuffer.append(genChildContainer.getGroupID());
d148 2
d161 2
d165 1
a165 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
d169 1
a169 1
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
a232 1
			GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
@


1.11
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d60 12
a71 8
  protected final String TEXT_41 = NL + "\t\tEObject element = edge.getElement();" + NL + "\t\tint linkVID = ";
  protected final String TEXT_42 = ".INSTANCE.getLinkWithClassVisualID(element);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_43 = NL + "\t\tcase ";
  protected final String TEXT_44 = ":" + NL + "\t\t\treturn new ";
  protected final String TEXT_45 = "(edge);";
  protected final String TEXT_46 = NL + "\t\t}";
  protected final String TEXT_47 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);\t\t\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "}";
  protected final String TEXT_48 = NL;
d202 1
a202 1
if (genLinks.size() != 0) {
d205 17
d223 1
a223 1
    stringBuffer.append(TEXT_42);
d230 1
a230 1
    stringBuffer.append(TEXT_43);
d232 1
a232 1
    stringBuffer.append(TEXT_44);
d234 1
a234 1
    stringBuffer.append(TEXT_45);
d239 1
a239 1
    stringBuffer.append(TEXT_46);
d243 1
a243 1
    stringBuffer.append(TEXT_47);
d245 1
a245 1
    stringBuffer.append(TEXT_48);
@


1.10
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.ConnectionLocator;" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
d26 23
a48 23
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createDiagramEditPart(Diagram diagram) {" + NL + "\t\tEObject element = diagram.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();" + NL + "\t\tif (";
  protected final String TEXT_8 = ".eINSTANCE.get";
  protected final String TEXT_9 = "().equals(elementMetaclass) && isDiagram";
  protected final String TEXT_10 = "_";
  protected final String TEXT_11 = "((";
  protected final String TEXT_12 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_13 = "(diagram);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_14 = NL + "\t\tif (";
  protected final String TEXT_15 = ".eINSTANCE.get";
  protected final String TEXT_16 = "().equals(elementMetaclass) && isEdge";
  protected final String TEXT_17 = "_";
  protected final String TEXT_18 = "((";
  protected final String TEXT_19 = ") element)) {";
  protected final String TEXT_20 = NL + "\t\t\tif (\"";
  protected final String TEXT_21 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new LabelEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic int getKeyPoint() {" + NL + "\t\t\t\t\t\treturn ConnectionLocator.";
  protected final String TEXT_22 = ";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_23 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new TextCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "().getEStructuralFeature(\"";
  protected final String TEXT_26 = "\"));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_28 = "\t\t\t\t";
  protected final String TEXT_29 = NL + "\t\tif (";
d50 18
a67 52
  protected final String TEXT_31 = "().equals(elementMetaclass) && isNode";
  protected final String TEXT_32 = "_";
  protected final String TEXT_33 = "((";
  protected final String TEXT_34 = ") element)) {";
  protected final String TEXT_35 = NL + "\t\t\tif (";
  protected final String TEXT_36 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_37 = "(node);" + NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t\tif (\"";
  protected final String TEXT_39 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new ListCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\treturn \"";
  protected final String TEXT_40 = "\";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_41 = NL + "\t\t\treturn new ";
  protected final String TEXT_42 = "(node);" + NL + "\t\t} else";
  protected final String TEXT_43 = NL + "\t\t{ " + NL + "\t\t\treturn createUnrecognizedNodeEditPart(node);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createChildNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_44 = NL + "\t\tif (";
  protected final String TEXT_45 = ".eINSTANCE.get";
  protected final String TEXT_46 = "().equals(elementMetaclass) && isChildNode";
  protected final String TEXT_47 = "_";
  protected final String TEXT_48 = "((";
  protected final String TEXT_49 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_50 = "(node);" + NL + "\t\t} else ";
  protected final String TEXT_51 = NL + "\t\t{ " + NL + "\t\t\treturn createUnrecognizedChildNodeEditPart(node);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedChildNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createEdgeEditPart(Edge edge) {" + NL + "\t\tEObject element = edge.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_52 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);";
  protected final String TEXT_53 = NL + "\t\tif (";
  protected final String TEXT_54 = ".eINSTANCE.get";
  protected final String TEXT_55 = "().equals(elementMetaclass) && isEdge";
  protected final String TEXT_56 = "_";
  protected final String TEXT_57 = "((";
  protected final String TEXT_58 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_59 = "(edge);" + NL + "\t\t} else ";
  protected final String TEXT_60 = NL + "\t\t{" + NL + "\t\t\treturn createUnrecognizedEdgeEditPart(edge);" + NL + "\t\t}";
  protected final String TEXT_61 = "\t\t\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_62 = "_";
  protected final String TEXT_63 = "(";
  protected final String TEXT_64 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_65 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_66 = "_";
  protected final String TEXT_67 = "(";
  protected final String TEXT_68 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_69 = "(element);" + NL + "\t}" + NL;
  protected final String TEXT_70 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_71 = "_";
  protected final String TEXT_72 = "(";
  protected final String TEXT_73 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_74 = "(element);" + NL + "\t}" + NL;
  protected final String TEXT_75 = NL + "\t";
  protected final String TEXT_76 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEdge";
  protected final String TEXT_77 = "_";
  protected final String TEXT_78 = "(";
  protected final String TEXT_79 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_80 = "(element);" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "}";
  protected final String TEXT_82 = NL;
d86 2
d91 1
a91 1
    stringBuffer.append(semanticPackageInterfaceName);
d93 1
a93 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d95 1
a95 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
a96 6
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_13);
a97 46
List genLinks = genDiagram.getLinks();
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_14);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(genLinkWithClass.getVisualID());
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_19);
    
		List labels = genLink.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			LinkLabel label = (LinkLabel) labels.get(j);

    stringBuffer.append(TEXT_20);
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(label.getAlignment());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(label.getDomainMetaFeature().getName());
    stringBuffer.append(TEXT_26);
    		}
    stringBuffer.append(TEXT_27);
    
	}
}

    stringBuffer.append(TEXT_28);
    
List genNodes = genDiagram.getNodes();
a99 2
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
d101 1
a101 7
    stringBuffer.append(TEXT_29);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_32);
d103 1
a103 3
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_34);
d110 1
a110 1
    stringBuffer.append(TEXT_35);
d112 1
a112 1
    stringBuffer.append(TEXT_36);
d114 1
a114 1
    stringBuffer.append(TEXT_37);
d121 1
a121 1
    stringBuffer.append(TEXT_38);
d123 1
a123 1
    stringBuffer.append(TEXT_39);
d125 1
a125 1
    stringBuffer.append(TEXT_40);
d127 1
a127 1
    stringBuffer.append(TEXT_41);
d129 1
a129 1
    stringBuffer.append(TEXT_42);
d133 1
a133 1
    stringBuffer.append(TEXT_43);
d135 1
a135 7
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	List genChildNodes = genNode.getChildNodes();
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
d137 3
a139 21
    stringBuffer.append(TEXT_44);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(genChildNode.getVisualID());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(genChildNode.getEditPartClassName());
    stringBuffer.append(TEXT_50);
    	}
}

    stringBuffer.append(TEXT_51);
    
if (genLinks.size() == 0) {

    stringBuffer.append(TEXT_52);
a140 1
} else {
a145 1
			String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();
d147 15
a161 1
    stringBuffer.append(TEXT_53);
d163 1
a163 1
    stringBuffer.append(TEXT_54);
d165 5
a169 9
    stringBuffer.append(TEXT_55);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(genLinkWithClass.getVisualID());
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_59);
d174 1
a174 1
    stringBuffer.append(TEXT_60);
d178 3
a180 7
    stringBuffer.append(TEXT_61);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_62);
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_64);
a183 13
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedNodeInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_65);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(genNode.getVisualID());
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName(qualifiedNodeInterfaceName));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genNode));
    stringBuffer.append(TEXT_69);
    
a186 2
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedChildNodeInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
d188 1
a188 3
    stringBuffer.append(TEXT_70);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_71);
d190 3
a192 5
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genChildNode));
    stringBuffer.append(TEXT_74);
d196 7
a202 1
    stringBuffer.append(TEXT_75);
d204 4
a207 6
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();
d209 5
a213 9
    stringBuffer.append(TEXT_76);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(genLinkWithClass.getVisualID());
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genLink));
    stringBuffer.append(TEXT_80);
d215 1
d217 3
d222 1
a222 1
    stringBuffer.append(TEXT_81);
d224 1
a224 1
    stringBuffer.append(TEXT_82);
@


1.9
log
@[dstadnik] #112194 Link label should be positioned on the link accordingly to it's weight defined
in gmfgen model
@
text
@d87 15
a101 12
  protected final String TEXT_68 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_69 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_70 = "_";
  protected final String TEXT_71 = "(";
  protected final String TEXT_72 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_73 = NL + "\t";
  protected final String TEXT_74 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEdge";
  protected final String TEXT_75 = "_";
  protected final String TEXT_76 = "(";
  protected final String TEXT_77 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_78 = NL + NL + "}";
  protected final String TEXT_79 = NL;
d308 2
d317 1
a317 1
    stringBuffer.append(TEXT_69);
d319 1
a319 1
    stringBuffer.append(TEXT_70);
d321 1
a321 1
    stringBuffer.append(TEXT_71);
d323 3
a325 1
    stringBuffer.append(TEXT_72);
d329 1
a329 1
    stringBuffer.append(TEXT_73);
d338 1
a338 1
    stringBuffer.append(TEXT_74);
d340 1
a340 1
    stringBuffer.append(TEXT_75);
d342 1
a342 1
    stringBuffer.append(TEXT_76);
d344 3
a346 1
    stringBuffer.append(TEXT_77);
d351 1
a351 1
    stringBuffer.append(TEXT_78);
d353 1
a353 1
    stringBuffer.append(TEXT_79);
@


1.8
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.LabelEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
d40 59
a98 58
  protected final String TEXT_21 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new LabelEditPart(node);" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_22 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new TextCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_23 = ".eINSTANCE.get";
  protected final String TEXT_24 = "().getEStructuralFeature(\"";
  protected final String TEXT_25 = "\"));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_27 = "\t\t\t\t";
  protected final String TEXT_28 = NL + "\t\tif (";
  protected final String TEXT_29 = ".eINSTANCE.get";
  protected final String TEXT_30 = "().equals(elementMetaclass) && isNode";
  protected final String TEXT_31 = "_";
  protected final String TEXT_32 = "((";
  protected final String TEXT_33 = ") element)) {";
  protected final String TEXT_34 = NL + "\t\t\tif (";
  protected final String TEXT_35 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_36 = "(node);" + NL + "\t\t\t}";
  protected final String TEXT_37 = NL + "\t\t\tif (\"";
  protected final String TEXT_38 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new ListCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\treturn \"";
  protected final String TEXT_39 = "\";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\treturn new ";
  protected final String TEXT_41 = "(node);" + NL + "\t\t} else";
  protected final String TEXT_42 = NL + "\t\t{ " + NL + "\t\t\treturn createUnrecognizedNodeEditPart(node);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createChildNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_43 = NL + "\t\tif (";
  protected final String TEXT_44 = ".eINSTANCE.get";
  protected final String TEXT_45 = "().equals(elementMetaclass) && isChildNode";
  protected final String TEXT_46 = "_";
  protected final String TEXT_47 = "((";
  protected final String TEXT_48 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_49 = "(node);" + NL + "\t\t} else ";
  protected final String TEXT_50 = NL + "\t\t{ " + NL + "\t\t\treturn createUnrecognizedChildNodeEditPart(node);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedChildNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createEdgeEditPart(Edge edge) {" + NL + "\t\tEObject element = edge.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_51 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);";
  protected final String TEXT_52 = NL + "\t\tif (";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "().equals(elementMetaclass) && isEdge";
  protected final String TEXT_55 = "_";
  protected final String TEXT_56 = "((";
  protected final String TEXT_57 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_58 = "(edge);" + NL + "\t\t} else ";
  protected final String TEXT_59 = NL + "\t\t{" + NL + "\t\t\treturn createUnrecognizedEdgeEditPart(edge);" + NL + "\t\t}";
  protected final String TEXT_60 = "\t\t\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_61 = "_";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_65 = "_";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_68 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_69 = "_";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_72 = NL + "\t";
  protected final String TEXT_73 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEdge";
  protected final String TEXT_74 = "_";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_77 = NL + NL + "}";
  protected final String TEXT_78 = NL;
d160 2
d163 1
a163 1
    stringBuffer.append(TEXT_22);
d165 1
a165 1
    stringBuffer.append(TEXT_23);
d167 1
a167 1
    stringBuffer.append(TEXT_24);
d169 1
a169 1
    stringBuffer.append(TEXT_25);
d171 1
a171 1
    stringBuffer.append(TEXT_26);
d176 1
a176 1
    stringBuffer.append(TEXT_27);
d184 1
a184 1
    stringBuffer.append(TEXT_28);
a185 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(semanticNodeInterfaceName);
d189 2
d192 1
a192 1
    stringBuffer.append(TEXT_32);
d194 1
a194 1
    stringBuffer.append(TEXT_33);
d201 1
a201 1
    stringBuffer.append(TEXT_34);
d203 1
a203 1
    stringBuffer.append(TEXT_35);
d205 1
a205 1
    stringBuffer.append(TEXT_36);
d212 1
a212 1
    stringBuffer.append(TEXT_37);
d214 1
a214 1
    stringBuffer.append(TEXT_38);
d216 1
a216 1
    stringBuffer.append(TEXT_39);
d218 1
a218 1
    stringBuffer.append(TEXT_40);
d220 1
a220 1
    stringBuffer.append(TEXT_41);
d224 1
a224 1
    stringBuffer.append(TEXT_42);
d234 1
a234 1
    stringBuffer.append(TEXT_43);
a235 2
    stringBuffer.append(TEXT_44);
    stringBuffer.append(semanticChildNodeInterfaceName);
d239 2
d242 1
a242 1
    stringBuffer.append(TEXT_47);
d244 1
a244 1
    stringBuffer.append(TEXT_48);
d246 1
a246 1
    stringBuffer.append(TEXT_49);
d250 1
a250 1
    stringBuffer.append(TEXT_50);
d254 1
a254 1
    stringBuffer.append(TEXT_51);
d264 1
a264 1
    stringBuffer.append(TEXT_52);
a265 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(semanticLinkInterfaceName);
d269 2
d272 1
a272 1
    stringBuffer.append(TEXT_56);
d274 1
a274 1
    stringBuffer.append(TEXT_57);
d276 1
a276 1
    stringBuffer.append(TEXT_58);
d281 1
a281 1
    stringBuffer.append(TEXT_59);
d285 1
a285 1
    stringBuffer.append(TEXT_60);
d287 1
a287 1
    stringBuffer.append(TEXT_61);
d289 1
a289 1
    stringBuffer.append(TEXT_62);
d291 1
a291 1
    stringBuffer.append(TEXT_63);
d298 1
a298 1
    stringBuffer.append(TEXT_64);
d300 1
a300 1
    stringBuffer.append(TEXT_65);
d302 1
a302 1
    stringBuffer.append(TEXT_66);
d304 1
a304 1
    stringBuffer.append(TEXT_67);
d312 1
a312 1
    stringBuffer.append(TEXT_68);
d314 1
a314 1
    stringBuffer.append(TEXT_69);
d316 1
a316 1
    stringBuffer.append(TEXT_70);
d318 1
a318 1
    stringBuffer.append(TEXT_71);
d322 1
a322 1
    stringBuffer.append(TEXT_72);
d331 1
a331 1
    stringBuffer.append(TEXT_73);
d333 1
a333 1
    stringBuffer.append(TEXT_74);
d335 1
a335 1
    stringBuffer.append(TEXT_75);
d337 1
a337 1
    stringBuffer.append(TEXT_76);
d342 1
a342 1
    stringBuffer.append(TEXT_77);
d344 1
a344 1
    stringBuffer.append(TEXT_78);
@


1.7
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@d108 1
a108 1
    stringBuffer.append(genDiagram.getEditProvidersPackageName());
d194 1
a194 1
		String semanticHintsQualifiedClassName = genDiagram.getEditProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
@


1.6
log
@missing import
@
text
@d22 25
a46 25
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tif (model instanceof Diagram) {" + NL + "\t\t\t\treturn createDiagramEditPart((Diagram) model);" + NL + "\t\t\t} else if (view instanceof Node) {" + NL + "\t\t\t\tboolean isTopLevel = view.eContainer() instanceof Diagram || (view.getType() != null && view.getType().length() > 0);" + NL + "\t\t\t\tif (isTopLevel) {" + NL + "\t\t\t\t\treturn createNodeEditPart((Node) model);" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\treturn createChildNodeEditPart((Node) model);" + NL + "\t\t\t\t}" + NL + "\t\t\t} else if (view instanceof Edge) {" + NL + "\t\t\t\treturn createEdgeEditPart((Edge) model);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createDiagramEditPart(Diagram diagram) {" + NL + "\t\tEObject element = diagram.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();" + NL + "\t\tif (";
  protected final String TEXT_7 = ".eINSTANCE.get";
  protected final String TEXT_8 = "().equals(elementMetaclass) && isDiagram";
  protected final String TEXT_9 = "_";
  protected final String TEXT_10 = "((";
  protected final String TEXT_11 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_12 = "(diagram);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_13 = NL + "\t\tif (";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "().equals(elementMetaclass) && isNode";
  protected final String TEXT_16 = "_";
  protected final String TEXT_17 = "((";
  protected final String TEXT_18 = ") element)) {";
  protected final String TEXT_19 = NL + "\t\t\tif (";
  protected final String TEXT_20 = ".equals(node.getType())) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_21 = "(node);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\tif (\"";
  protected final String TEXT_23 = "\".equals(node.getType())) {" + NL + "\t\t\t\treturn new ListCompartmentEditPart(node) {" + NL + "" + NL + "\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\treturn \"";
  protected final String TEXT_24 = "\";" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\treturn new ";
  protected final String TEXT_26 = "(node);" + NL + "\t\t} else";
  protected final String TEXT_27 = NL + "\t\t{ " + NL + "\t\t\treturn createUnrecognizedNodeEditPart(node);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createChildNodeEditPart(Node node) {" + NL + "\t\tEObject element = node.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
d49 1
a49 1
  protected final String TEXT_30 = "().equals(elementMetaclass) && isChildNode";
d52 13
a64 13
  protected final String TEXT_33 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_34 = "(node);" + NL + "\t\t} else ";
  protected final String TEXT_35 = NL + "\t\t{ " + NL + "\t\t\treturn createUnrecognizedChildNodeEditPart(node);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedChildNodeEditPart(Node node) {" + NL + "\t \t// Handle creation of unrecognized child node EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPart createEdgeEditPart(Edge edge) {" + NL + "\t\tEObject element = edge.getElement();" + NL + "\t\tEClass elementMetaclass = element.eClass();";
  protected final String TEXT_36 = NL + "\t\treturn createUnrecognizedEdgeEditPart(edge);";
  protected final String TEXT_37 = NL + "\t\tif (";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "().equals(elementMetaclass) && isEdge";
  protected final String TEXT_40 = "_";
  protected final String TEXT_41 = "((";
  protected final String TEXT_42 = ") element)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_43 = "(edge);" + NL + "\t\t} else ";
  protected final String TEXT_44 = NL + "\t\t{" + NL + "\t\t\treturn createUnrecognizedEdgeEditPart(edge);" + NL + "\t\t}";
  protected final String TEXT_45 = "\t\t\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private EditPart createUnrecognizedEdgeEditPart(Edge edge) {" + NL + "\t \t// Handle creation of unrecognized edge EditParts here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
d66 32
a97 17
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_49 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_50 = "_";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_53 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_54 = "_";
  protected final String TEXT_55 = "(";
  protected final String TEXT_56 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_57 = NL + "\t";
  protected final String TEXT_58 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isEdge";
  protected final String TEXT_59 = "_";
  protected final String TEXT_60 = "(";
  protected final String TEXT_61 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "}";
  protected final String TEXT_63 = NL;
d108 2
d111 1
a111 1
    stringBuffer.append(TEXT_4);
d113 1
a113 1
    stringBuffer.append(TEXT_5);
d118 1
a118 1
    stringBuffer.append(TEXT_6);
a119 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d123 2
d126 1
a126 1
    stringBuffer.append(TEXT_10);
d128 1
a128 1
    stringBuffer.append(TEXT_11);
d130 44
a173 1
    stringBuffer.append(TEXT_12);
d181 1
a181 1
    stringBuffer.append(TEXT_13);
d183 1
a183 1
    stringBuffer.append(TEXT_14);
d185 1
a185 1
    stringBuffer.append(TEXT_15);
d187 1
a187 1
    stringBuffer.append(TEXT_16);
d189 1
a189 1
    stringBuffer.append(TEXT_17);
d191 1
a191 1
    stringBuffer.append(TEXT_18);
d198 1
a198 1
    stringBuffer.append(TEXT_19);
d200 1
a200 1
    stringBuffer.append(TEXT_20);
d202 1
a202 1
    stringBuffer.append(TEXT_21);
d209 1
a209 1
    stringBuffer.append(TEXT_22);
d211 1
a211 1
    stringBuffer.append(TEXT_23);
d213 1
a213 1
    stringBuffer.append(TEXT_24);
d215 1
a215 1
    stringBuffer.append(TEXT_25);
d217 1
a217 1
    stringBuffer.append(TEXT_26);
d221 1
a221 1
    stringBuffer.append(TEXT_27);
d231 1
a231 1
    stringBuffer.append(TEXT_28);
d233 1
a233 1
    stringBuffer.append(TEXT_29);
d235 1
a235 1
    stringBuffer.append(TEXT_30);
d237 1
a237 1
    stringBuffer.append(TEXT_31);
d239 1
a239 1
    stringBuffer.append(TEXT_32);
d241 1
a241 1
    stringBuffer.append(TEXT_33);
d243 1
a243 1
    stringBuffer.append(TEXT_34);
d247 1
a247 1
    stringBuffer.append(TEXT_35);
a248 1
List genLinks = genDiagram.getLinks();
d251 1
a251 1
    stringBuffer.append(TEXT_36);
d261 1
a261 1
    stringBuffer.append(TEXT_37);
d263 1
a263 1
    stringBuffer.append(TEXT_38);
d265 1
a265 1
    stringBuffer.append(TEXT_39);
d267 1
a267 1
    stringBuffer.append(TEXT_40);
d269 1
a269 1
    stringBuffer.append(TEXT_41);
d271 1
a271 1
    stringBuffer.append(TEXT_42);
d273 1
a273 1
    stringBuffer.append(TEXT_43);
d278 1
a278 1
    stringBuffer.append(TEXT_44);
d282 1
a282 1
    stringBuffer.append(TEXT_45);
d284 1
a284 1
    stringBuffer.append(TEXT_46);
d286 1
a286 1
    stringBuffer.append(TEXT_47);
d288 1
a288 1
    stringBuffer.append(TEXT_48);
d295 1
a295 1
    stringBuffer.append(TEXT_49);
d297 1
a297 1
    stringBuffer.append(TEXT_50);
d299 1
a299 1
    stringBuffer.append(TEXT_51);
d301 1
a301 1
    stringBuffer.append(TEXT_52);
d309 1
a309 1
    stringBuffer.append(TEXT_53);
d311 1
a311 1
    stringBuffer.append(TEXT_54);
d313 1
a313 1
    stringBuffer.append(TEXT_55);
d315 1
a315 1
    stringBuffer.append(TEXT_56);
d319 1
a319 1
    stringBuffer.append(TEXT_57);
d328 1
a328 1
    stringBuffer.append(TEXT_58);
d330 1
a330 1
    stringBuffer.append(TEXT_59);
d332 1
a332 1
    stringBuffer.append(TEXT_60);
d334 1
a334 1
    stringBuffer.append(TEXT_61);
d339 1
a339 1
    stringBuffer.append(TEXT_62);
d341 1
a341 1
    stringBuffer.append(TEXT_63);
@


1.5
log
@[ashatalin]
#111773 Multiple views for single domain metaelement based on it's state
#111782 Support same metaelement both as top-level and inner diagram element
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
@


1.4
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 2
a25 2
  protected final String TEXT_5 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tEObject element = view.getElement();";
  protected final String TEXT_6 = NL + "\t\t\tif (";
d27 56
a82 23
  protected final String TEXT_8 = "().isInstance(element)) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_9 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_10 = NL + "\t\t\telse if (";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "().isInstance(element)) {";
  protected final String TEXT_13 = NL + "\t\t\t\tif (";
  protected final String TEXT_14 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_15 = "(view);" + NL + "\t\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\t\tif (\"";
  protected final String TEXT_17 = "\".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ListCompartmentEditPart(view) {" + NL + "" + NL + "\t\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\t\treturn \"";
  protected final String TEXT_18 = "\";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_19 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_21 = NL + "\t\t\telse if (";
  protected final String TEXT_22 = ".eINSTANCE.get";
  protected final String TEXT_23 = "().isInstance(element)) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_24 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\telse if (";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "().isInstance(element)) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_28 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_30 = NL;
d104 1
a104 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getName());
d106 6
d113 1
a113 1
    stringBuffer.append(TEXT_9);
d117 3
a119 2
		GenNode genNode = (GenNode) genNodes.get(i);
		String semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
d121 1
a121 1
    stringBuffer.append(TEXT_10);
d123 3
a125 1
    stringBuffer.append(TEXT_11);
d127 5
a131 1
    stringBuffer.append(TEXT_12);
d133 4
a136 4
		if (genNode.hasNameToEdit()) {
			String semanticHintsQualifiedClassName = genDiagram.getEditProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
			String semanticHint = semanticHintsClassName + '.' + AccessUtil.getNameSemanticHint(genNode);
d138 1
a138 1
    stringBuffer.append(TEXT_13);
d140 1
a140 1
    stringBuffer.append(TEXT_14);
d142 1
a142 1
    stringBuffer.append(TEXT_15);
d144 4
a147 4
		}
		List genChildContainers = genNode.getChildContainers();
		for (int j = 0; j < genChildContainers.size(); j++) {
			GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
d149 1
a149 1
    stringBuffer.append(TEXT_16);
d151 1
a151 1
    stringBuffer.append(TEXT_17);
d153 3
a155 3
    stringBuffer.append(TEXT_18);
    		}
    stringBuffer.append(TEXT_19);
d157 5
a161 1
    stringBuffer.append(TEXT_20);
d163 7
a169 4
		List genChildNodes = genNode.getChildNodes();
		for (int j = 0; j < genChildNodes.size(); j++) {
			GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
			String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getName();
d171 1
a171 1
    stringBuffer.append(TEXT_21);
d173 3
a175 1
    stringBuffer.append(TEXT_22);
d177 5
a181 1
    stringBuffer.append(TEXT_23);
d183 2
a184 2
    stringBuffer.append(TEXT_24);
    		}
d186 3
d190 72
d266 2
a267 1
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getName();
d269 1
a269 3
    stringBuffer.append(TEXT_25);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_26);
d271 5
a275 3
    stringBuffer.append(TEXT_27);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_28);
d280 1
a280 1
    stringBuffer.append(TEXT_29);
d282 1
a282 1
    stringBuffer.append(TEXT_30);
@


1.3
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d3 1
a3 1
import java.util.List;
d22 21
a42 21
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_4 = ".StructuralFeatureParser;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements EditPartFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPart createEditPart(EditPart context, Object model) {" + NL + "\t\tif (model instanceof View) {" + NL + "\t\t\tView view = (View) model;" + NL + "\t\t\tEObject element = view.getElement();";
  protected final String TEXT_7 = NL + "\t\t\tif (";
  protected final String TEXT_8 = ".eINSTANCE.get";
  protected final String TEXT_9 = "().isInstance(element)) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_10 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_11 = NL + "\t\t\telse if (";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().isInstance(element)) {";
  protected final String TEXT_14 = NL + "\t\t\t\tif (";
  protected final String TEXT_15 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new TextCompartmentEditPart(view) {" + NL + "" + NL + "\t\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\t\tif (";
  protected final String TEXT_16 = ".equals(((View) getModel()).getType())) {" + NL + "\t\t\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_17 = ".eINSTANCE.get";
  protected final String TEXT_18 = "().getEStructuralFeature(\"";
  protected final String TEXT_19 = "\"));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_20 = NL + "\t\t\t\tif (\"";
  protected final String TEXT_21 = "\".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new ListCompartmentEditPart(view) {" + NL + "" + NL + "\t\t\t\t\t\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\t\t\t\t\t\treturn false;" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tprotected void createDefaultEditPolicies() {" + NL + "\t\t\t\t\t\t\tsuper.createDefaultEditPolicies();" + NL + "\t\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\t\t\t\t\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\t\t\t\t\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tprotected String getTitleName() {" + NL + "\t\t\t\t\t\t\treturn \"";
  protected final String TEXT_22 = "\";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t\treturn new ";
d48 2
a49 6
  protected final String TEXT_29 = NL + "\t\t\telse if (";
  protected final String TEXT_30 = ".eINSTANCE.get";
  protected final String TEXT_31 = "().isInstance(element)) {" + NL + "\t\t\t\treturn new ";
  protected final String TEXT_32 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_34 = NL;
d60 1
a60 1
    stringBuffer.append(genDiagram.getEditProvidersPackageName());
d62 1
a62 1
    importManager.markImportLocation(stringBuffer);
a63 2
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
    stringBuffer.append(TEXT_6);
d68 2
d71 1
a71 1
    stringBuffer.append(semanticPackageInterfaceName);
d73 1
a73 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getName());
a74 2
    stringBuffer.append(genDiagram.getEditPartClassName());
    stringBuffer.append(TEXT_10);
d81 2
d84 1
a84 1
    stringBuffer.append(semanticPackageInterfaceName);
a85 2
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_13);
d92 2
d95 1
a95 1
    stringBuffer.append(semanticHint);
a96 8
    stringBuffer.append(semanticHint);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(genNode.getDomainNameFeature().getName());
    stringBuffer.append(TEXT_19);
d103 1
a103 1
    stringBuffer.append(TEXT_20);
d105 1
a105 1
    stringBuffer.append(TEXT_21);
d107 1
a107 1
    stringBuffer.append(TEXT_22);
d109 1
a109 1
    stringBuffer.append(TEXT_23);
d111 1
a111 1
    stringBuffer.append(TEXT_24);
d118 1
a118 1
    stringBuffer.append(TEXT_25);
d120 1
a120 1
    stringBuffer.append(TEXT_26);
d122 1
a122 1
    stringBuffer.append(TEXT_27);
d124 1
a124 1
    stringBuffer.append(TEXT_28);
d134 1
a134 1
    stringBuffer.append(TEXT_29);
d136 1
a136 1
    stringBuffer.append(TEXT_30);
d138 1
a138 1
    stringBuffer.append(TEXT_31);
d140 1
a140 1
    stringBuffer.append(TEXT_32);
d145 1
a145 1
    stringBuffer.append(TEXT_33);
d147 1
a147 1
    stringBuffer.append(TEXT_34);
@


1.2
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d71 1
a71 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
d28 26
a53 14
  protected final String TEXT_9 = "().isInstance(element)) {" + NL + "\t\t\t\treturn new DiagramEditPart(view);" + NL + "\t\t\t}";
  protected final String TEXT_10 = NL + "\t\t\telse if (";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "().isInstance(element)) {";
  protected final String TEXT_13 = NL + "\t\t\t\tif (";
  protected final String TEXT_14 = ".equals(view.getType())) {" + NL + "\t\t\t\t\treturn new TextCompartmentEditPart(view) {" + NL + "" + NL + "\t\t\t\t\t\tpublic IParser getParser() {" + NL + "\t\t\t\t\t\t\tif (parser == null) {" + NL + "\t\t\t\t\t\t\t\tif (";
  protected final String TEXT_15 = ".equals(((View) getModel()).getType())) {" + NL + "\t\t\t\t\t\t\t\t\tparser = new StructuralFeatureParser(";
  protected final String TEXT_16 = ".eINSTANCE.get";
  protected final String TEXT_17 = "().getEStructuralFeature(\"";
  protected final String TEXT_18 = "\"));" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn parser;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t};" + NL + "\t\t\t\t}";
  protected final String TEXT_19 = NL + "\t\t\t\treturn new ";
  protected final String TEXT_20 = "(view);" + NL + "\t\t\t}";
  protected final String TEXT_21 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
d79 2
d87 1
a87 1
    stringBuffer.append(TEXT_10);
d89 1
a89 1
    stringBuffer.append(TEXT_11);
d91 1
a91 1
    stringBuffer.append(TEXT_12);
a97 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(semanticHint);
d101 2
d104 1
a104 1
    stringBuffer.append(TEXT_16);
d106 1
a106 1
    stringBuffer.append(TEXT_17);
a107 2
    stringBuffer.append(TEXT_18);
    		}
d109 6
a114 1
    stringBuffer.append(genNode.getEditPartClassName());
d116 1
a116 1
    }
d118 40
d159 1
a159 1
    stringBuffer.append(TEXT_22);
@

