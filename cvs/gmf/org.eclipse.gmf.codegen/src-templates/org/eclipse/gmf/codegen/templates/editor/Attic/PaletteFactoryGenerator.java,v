head	1.38;
access;
symbols
	v20081022-1925:1.38
	v20081015-1925:1.38
	v20081008-1925:1.38
	v20081001-1925:1.38
	v20080924-1925:1.38
	v20080917-1925:1.38
	v20080911-1728:1.38
	v20080910-1520:1.38
	v20080903-1520:1.38
	v20080827-1520:1.38
	v20080813-1520:1.38
	v20080806-1520:1.38
	v20070202-0200:1.31
	v20061120-1300:1.34
	M3_20:1.34
	v20061117-0800:1.34
	v20061027-1200:1.31
	v20061020-1000:1.31
	v20061013-1330:1.31
	v20060919-0800:1.31
	v20060907-1100:1.31
	M1_20:1.31
	v20060904-1500:1.31
	v20060824-1600:1.31
	v20060817-1500:1.31
	v20060728-0500:1.31
	v20060713-1700:1.31
	R1_0_maintenance:1.31.0.2
	R1_0:1.31
	v20060627-1200:1.31
	v20060626-1420:1.31
	v20060620-0400:1.31
	v20060616-1400:1.31
	v20060616-1200:1.31
	v20060609-1400:1.31
	v20060531-1730:1.30
	v20060530-1930:1.30
	v20060526-1200:1.29
	v20060519-1300:1.29
	v20060519-0800:1.29
	v20060512-1000:1.28
	I20060512-1000:1.28
	I20060505-1400:1.28
	I20060428-1300:1.28
	I20060424-0500:1.28
	I20060424-0300:1.28
	M6_10:1.27
	I20060407-1200:1.23
	I20060331-1000:1.22
	I20060324-0300:1.22
	I20060317-1300:1.22
	I20060317-1200:1.22
	I20060316-1300:1.22
	I20060309-1300:1.22
	M5_10:1.21
	S20060303-1600:1.21
	I20060227-1730:1.21
	I20060216-1945:1.21
	I20060210-1715:1.20
	I20060209-1815:1.20
	I20060203-0830:1.17
	I20060202-1415:1.17
	I20060129-1145:1.17
	I20060127-0900:1.17
	I20060120-1530:1.16
	I20060113-1700:1.16
	M4_10:1.16
	I20060107-1100:1.16
	I20060105-1630:1.16
	I20051230-1230:1.16
	I20051223-1100:1.16
	I20051217-0925:1.15
	I20051208-2000:1.14
	I20051201-1800:1.11
	I20051124-2000:1.11
	M3_10:1.10
	I20051118-1245:1.10
	I20051111-1800:1.9
	I20051106-0900:1.9
	v20051030:1.8;
locks; strict;
comment	@# @;
expand	@k@;


1.38
date	2006.11.29.19.57.57;	author atikhomirov;	state dead;
branches;
next	1.37;
commitid	5235456de6434567;

1.37
date	2006.11.23.17.05.22;	author atikhomirov;	state Exp;
branches;
next	1.36;
commitid	656a4565d4d24567;

1.36
date	2006.11.22.20.09.57;	author atikhomirov;	state Exp;
branches;
next	1.35;
commitid	29594564ae8d4567;

1.35
date	2006.11.22.15.48.13;	author atikhomirov;	state Exp;
branches;
next	1.34;
commitid	609b4564713c4567;

1.34
date	2006.11.16.13.31.32;	author atikhomirov;	state Exp;
branches;
next	1.33;
commitid	5510455c68334567;

1.33
date	2006.11.16.12.07.07;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.11.16.12.00.04;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.18.10.54.31;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.14.18.06.24;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.23;

1.23
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.26.13.36.41;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.13.17.11.22;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.08.14.15.12;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.05.19.16.56;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.02.13.53.09;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.24.10.07.29;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.15.59.37;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.38
log
@get started using xpand templates. PaletteFactory template replaced with xpand version
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class PaletteFactoryGenerator
{
  protected static String nl;
  public static synchronized PaletteFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    PaletteFactoryGenerator result = new PaletteFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.List;" + NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void fillPalette(PaletteRoot paletteRoot) {";
  protected final String TEXT_7 = NL + "\t\tcleanStandardTools(paletteRoot);";
  protected final String TEXT_8 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_9 = "());";
  protected final String TEXT_10 = NL + "\t}" + NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * Workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=159289" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void cleanStandardTools(PaletteRoot paletteRoot) {" + NL + "\t\tfor (java.util.Iterator it = paletteRoot.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\torg.eclipse.gef.palette.PaletteEntry entry = (org.eclipse.gef.palette.PaletteEntry) it.next();" + NL + "\t\t\tif (!\"standardGroup\".equals(entry.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (java.util.Iterator it2 = ((PaletteContainer) entry).getChildren().iterator(); it2.hasNext();) {" + NL + "\t\t\t\torg.eclipse.gef.palette.PaletteEntry entry2 = (org.eclipse.gef.palette.PaletteEntry) it2.next();" + NL + "\t\t\t\tif (\"zoomTool\".equals(entry2.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\t\tit2.remove();" + NL + "\t\t\t\t} else if (\"noteStack\".equals(entry2.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\t\tit2.remove();" + NL + "\t\t\t\t} else if (\"selectionTool\".equals(entry2.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\t\tit2.remove();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (paletteRoot.getDefaultEntry() == entry2) {" + NL + "\t\t\t\t\tpaletteRoot.setDefaultEntry(null);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "     * Creates \"";
  protected final String TEXT_13 = "\" palette tool group" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_14 = "() {";
  protected final String TEXT_15 = NL + "\t\t";
  protected final String TEXT_16 = " paletteContainer = new ";
  protected final String TEXT_17 = "(";
  protected final String TEXT_18 = ".getString(\"";
  protected final String TEXT_19 = ".title\")); //$NON-NLS-1$";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = " paletteContainer = new ";
  protected final String TEXT_22 = "(";
  protected final String TEXT_23 = ".getString(\"";
  protected final String TEXT_24 = ".title\"), null, null); //$NON-NLS-1$";
  protected final String TEXT_25 = NL + "\t\t";
  protected final String TEXT_26 = " paletteContainer = new ";
  protected final String TEXT_27 = "(";
  protected final String TEXT_28 = ".getString(\"";
  protected final String TEXT_29 = ".title\")); //$NON-NLS-1$";
  protected final String TEXT_30 = NL + "\t\tpaletteContainer.setDescription(";
  protected final String TEXT_31 = ".getString(\"";
  protected final String TEXT_32 = ".desc\")); //$NON-NLS-1$";
  protected final String TEXT_33 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_34 = "());";
  protected final String TEXT_35 = NL + "\t\tpaletteContainer.setActiveEntry((ToolEntry) paletteContainer.getChildren().get(paletteContainer.getChildren().size() - 1));";
  protected final String TEXT_36 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_37 = "());";
  protected final String TEXT_38 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_39 = "());";
  protected final String TEXT_40 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_43 = "() {";
  protected final String TEXT_44 = NL + "\t\torg.eclipse.gef.palette.PanningSelectionToolEntry result = new org.eclipse.gef.palette.PanningSelectionToolEntry();";
  protected final String TEXT_45 = NL + "\t\torg.eclipse.gef.palette.MarqueeToolEntry result = new org.eclipse.gef.palette.MarqueeToolEntry();";
  protected final String TEXT_46 = NL;
  protected final String TEXT_47 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_48 = ".class);";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_51 = ", ";
  protected final String TEXT_52 = ");";
  protected final String TEXT_53 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_54 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_55 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;";
  protected final String TEXT_56 = NL + "\t\t";
  protected final String TEXT_57 = NL + "\t\tsmallImage = ";
  protected final String TEXT_58 = ".findImageDescriptor(\"";
  protected final String TEXT_59 = "\"); //$NON-NLS-1$" + NL + "\t\t";
  protected final String TEXT_60 = NL + "\t\tsmallImage = ";
  protected final String TEXT_61 = ".getImageDescriptor(";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "); " + NL + "\t\t";
  protected final String TEXT_64 = NL + "\t\tsmallImage = null;" + NL + "\t\t";
  protected final String TEXT_65 = NL + "\t\t";
  protected final String TEXT_66 = NL + "\t\tlargeImage = ";
  protected final String TEXT_67 = ".findImageDescriptor(\"";
  protected final String TEXT_68 = "\"); //$NON-NLS-1$" + NL + "\t\t";
  protected final String TEXT_69 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_70 = NL + "\t\tToolEntry result = new ToolEntry(";
  protected final String TEXT_71 = ".getString(\"";
  protected final String TEXT_72 = ".title\"), ";
  protected final String TEXT_73 = ".getString(\"";
  protected final String TEXT_74 = ".desc\"), smallImage, largeImage) {}; //$NON-NLS-1$ $NON-NLS-2$";
  protected final String TEXT_75 = NL + "\t\tfinal ";
  protected final String TEXT_76 = " elementTypes = new ";
  protected final String TEXT_77 = "();";
  protected final String TEXT_78 = NL + "\t\telementTypes.add(";
  protected final String TEXT_79 = ".";
  protected final String TEXT_80 = ");";
  protected final String TEXT_81 = "\t\t" + NL + "\t\tToolEntry result = new NodeToolEntry(";
  protected final String TEXT_82 = ".getString(\"";
  protected final String TEXT_83 = ".title\"), ";
  protected final String TEXT_84 = ".getString(\"";
  protected final String TEXT_85 = ".desc\"), smallImage, largeImage, elementTypes); //$NON-NLS-1$ $NON-NLS-2$";
  protected final String TEXT_86 = NL + "\t\tfinal ";
  protected final String TEXT_87 = " relationshipTypes = new ";
  protected final String TEXT_88 = "();";
  protected final String TEXT_89 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_90 = ".";
  protected final String TEXT_91 = ");";
  protected final String TEXT_92 = "\t\t" + NL + "\t\tToolEntry result = new LinkToolEntry(";
  protected final String TEXT_93 = ".getString(\"";
  protected final String TEXT_94 = ".title\"), ";
  protected final String TEXT_95 = ".getString(\"";
  protected final String TEXT_96 = ".desc\"), smallImage, largeImage, relationshipTypes); //$NON-NLS-1$ $NON-NLS-2$";
  protected final String TEXT_97 = NL;
  protected final String TEXT_98 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_99 = ".class);";
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_102 = ", ";
  protected final String TEXT_103 = ");";
  protected final String TEXT_104 = NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_105 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List elementTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.elementTypes = elementTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_106 = "(elementTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_107 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List relationshipTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.relationshipTypes = relationshipTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_108 = "(relationshipTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_109 = NL + "}";
  protected final String TEXT_110 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0]; 
final Palette palette = genDiagram.getPalette();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
importManager.registerInnerClass("LinkToolEntry");
importManager.registerInnerClass("NodeToolEntry");
importManager.markImportLocation(stringBuffer);
boolean needNodeToolEntry = false;
boolean needLinkToolEntry = false;
final String activatorFQN = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_6);
    if (palette.definesStandardTools()) {
    stringBuffer.append(TEXT_7);
    }
for (int i = 0; i < palette.getGroups().size(); i++) {
	ToolGroup toolGroup = (ToolGroup) palette.getGroups().get(i);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(toolGroup.getCreateMethodName());
    stringBuffer.append(TEXT_9);
    }
    stringBuffer.append(TEXT_10);
    if (palette.definesStandardTools()) {
    stringBuffer.append(TEXT_11);
    }
final LinkedList<ToolGroup> toolGroupsQueue = new LinkedList<ToolGroup>();
toolGroupsQueue.addAll((List<ToolGroup>) palette.getGroups());
final LinkedList<AbstractToolEntry> toolsQueue = new LinkedList<AbstractToolEntry>();
while (!toolGroupsQueue.isEmpty()) {
	// TODO with additional counter and hashmap here it's easy to add "unique method name" check here
	ToolGroup toolGroup = toolGroupsQueue.removeFirst();

    stringBuffer.append(TEXT_12);
    stringBuffer.append(toolGroup.getTitle());
    stringBuffer.append(TEXT_13);
    stringBuffer.append(toolGroup.getCreateMethodName());
    stringBuffer.append(TEXT_14);
    if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) {
		String containerClassName = importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer");
    stringBuffer.append(TEXT_15);
    stringBuffer.append(containerClassName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(containerClassName);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(toolGroup.getIntKey());
    stringBuffer.append(TEXT_19);
    } else if (toolGroup.isStack()) {
		String containerClassName = importManager.getImportedName("org.eclipse.gef.palette.PaletteStack");
    stringBuffer.append(TEXT_20);
    stringBuffer.append(containerClassName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(containerClassName);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(toolGroup.getIntKey());
    stringBuffer.append(TEXT_24);
    } else {
		String containerClassName = importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup");
    stringBuffer.append(TEXT_25);
    stringBuffer.append(containerClassName);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(containerClassName);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(toolGroup.getIntKey());
    stringBuffer.append(TEXT_29);
    }
if (toolGroup.getDescription() != null) {
    stringBuffer.append(TEXT_30);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(toolGroup.getIntKey());
    stringBuffer.append(TEXT_32);
    }
    for (Iterator itGroupItems = toolGroup.getEntries().iterator(); itGroupItems.hasNext(); ) {
	ToolGroupItem groupItem = (ToolGroupItem) itGroupItems.next();
	if (groupItem instanceof AbstractToolEntry) {
		AbstractToolEntry toolEntry = (AbstractToolEntry) groupItem;
		toolsQueue.add(toolEntry);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(toolEntry.getCreateMethodName());
    stringBuffer.append(TEXT_34);
    	if (toolEntry.isDefault() && toolGroup.isStack()) {
    stringBuffer.append(TEXT_35);
    	}
    	} else if (groupItem instanceof ToolGroup) {
		// though, the only reasonable nested group is group with isStack = false
		toolGroupsQueue.addLast((ToolGroup) groupItem);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(((ToolGroup) groupItem).getCreateMethodName());
    stringBuffer.append(TEXT_37);
    	} else if (groupItem instanceof Separator) {
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator"));
    stringBuffer.append(TEXT_39);
    	} /*else - no more options possible, log warning? */
    } /*for*/
    stringBuffer.append(TEXT_40);
    
}
final String importedElementTypesClassName = importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName());
final String importedPluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
while (!toolsQueue.isEmpty()) {
	if (toolsQueue.element() instanceof StandardEntry) {
		StandardEntry toolEntry = (StandardEntry) toolsQueue.removeFirst();
    stringBuffer.append(TEXT_41);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(toolEntry.getCreateMethodName());
    stringBuffer.append(TEXT_43);
    if (toolEntry.getKind() == StandardEntryKind.SELECT_LITERAL) {
    stringBuffer.append(TEXT_44);
    } else if (toolEntry.getKind() == StandardEntryKind.MARQUEE_LITERAL) {
    stringBuffer.append(TEXT_45);
    }
    stringBuffer.append(TEXT_46);
    
// there's a problem with qualifieToolName - we should also respect different tools 
// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(toolEntry.getQualifiedToolName()));
    stringBuffer.append(TEXT_48);
    } /*tool class presence*/
    stringBuffer.append(TEXT_49);
    if (!toolEntry.getProperties().isEmpty()) {
	for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
		Map.Entry entry = (Map.Entry) it.next();
    stringBuffer.append(TEXT_50);
    stringBuffer.append(entry.getKey());
    stringBuffer.append(TEXT_51);
    stringBuffer.append(entry.getValue());
    stringBuffer.append(TEXT_52);
    	} /*properties iterator*/
} /*properties presence check*/ 
    stringBuffer.append(TEXT_53);
    } else {
	ToolEntry toolEntry = (ToolEntry) toolsQueue.removeFirst();
	GenCommonBase firstGenElement = toolEntry.getElements().isEmpty() ? null : (GenCommonBase) toolEntry.getElements().get(0);

    stringBuffer.append(TEXT_54);
    stringBuffer.append(toolEntry.getCreateMethodName());
    stringBuffer.append(TEXT_55);
     /* FIXME do not pass images into cons, use setX instead to reuse same image init code in std-tool*/
    stringBuffer.append(TEXT_56);
    if (toolEntry.getSmallIconPath() != null) {
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importedPluginClassName);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(toolEntry.getSmallIconPath());
    stringBuffer.append(TEXT_59);
    } else if (firstGenElement != null) {
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importedElementTypesClassName);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importedElementTypesClassName);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(firstGenElement.getUniqueIdentifier());
    stringBuffer.append(TEXT_63);
    } else {
    stringBuffer.append(TEXT_64);
    }
    stringBuffer.append(TEXT_65);
    if (toolEntry.getLargeIconPath() != null) {
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importedPluginClassName);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(toolEntry.getLargeIconPath());
    stringBuffer.append(TEXT_68);
    } else {
    stringBuffer.append(TEXT_69);
    }
    
if (toolEntry.getElements().isEmpty()) {
    stringBuffer.append(TEXT_70);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(toolEntry.getIntKey());
    stringBuffer.append(TEXT_72);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(toolEntry.getIntKey());
    stringBuffer.append(TEXT_74);
    }
	else if (firstGenElement instanceof GenNode) {

    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_77);
    		for (Iterator genNodesIterator = toolEntry.getGenNodes().iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importedElementTypesClassName);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_80);
    		}
		needNodeToolEntry = true;
    stringBuffer.append(TEXT_81);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(toolEntry.getIntKey());
    stringBuffer.append(TEXT_83);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(toolEntry.getIntKey());
    stringBuffer.append(TEXT_85);
    }
	else if (firstGenElement instanceof GenLink) {

    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_88);
    		for (Iterator genLinksIterator = toolEntry.getGenLinks().iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();

    stringBuffer.append(TEXT_89);
    stringBuffer.append(importedElementTypesClassName);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_91);
    		}
		needLinkToolEntry = true;
    stringBuffer.append(TEXT_92);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(toolEntry.getIntKey());
    stringBuffer.append(TEXT_94);
    stringBuffer.append(activatorFQN);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(toolEntry.getIntKey());
    stringBuffer.append(TEXT_96);
    } /*else - has no more ideas what's there*/ 
    stringBuffer.append(TEXT_97);
    
// there's a problem with qualifieToolName - we should also respect different tools 
// in NodeToolEntry and LinkToolEntry (right now there's hardcoded name of the tool) 
if (toolEntry.getQualifiedToolName() != null && toolEntry.getQualifiedToolName().trim().length() > 0 ) {
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName(toolEntry.getQualifiedToolName()));
    stringBuffer.append(TEXT_99);
    } /*tool class presence*/
    stringBuffer.append(TEXT_100);
    if (!toolEntry.getProperties().isEmpty()) {
	for (Iterator it = toolEntry.getProperties().entrySet().iterator(); it.hasNext();) {
		Map.Entry entry = (Map.Entry) it.next();
    stringBuffer.append(TEXT_101);
    stringBuffer.append(entry.getKey());
    stringBuffer.append(TEXT_102);
    stringBuffer.append(entry.getValue());
    stringBuffer.append(TEXT_103);
    	} /*properties iterator*/
} /*properties presence check*/ 
    stringBuffer.append(TEXT_104);
    } /*else instanceof*/
} /*while toolsQueue*/ 
    if (needNodeToolEntry) {
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool"));
    stringBuffer.append(TEXT_106);
    }
if (needLinkToolEntry) {
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool"));
    stringBuffer.append(TEXT_108);
    }
    stringBuffer.append(TEXT_109);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_110);
    return stringBuffer.toString();
  }
}
@


1.37
log
@comment why do we need the method
@
text
@@


1.36
log
@[164021] allow to choose standard tools
@
text
@d29 1
a29 1
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void cleanStandardTools(PaletteRoot paletteRoot) {" + NL + "\t\tfor (java.util.Iterator it = paletteRoot.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\torg.eclipse.gef.palette.PaletteEntry entry = (org.eclipse.gef.palette.PaletteEntry) it.next();" + NL + "\t\t\tif (!\"standardGroup\".equals(entry.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (java.util.Iterator it2 = ((PaletteContainer) entry).getChildren().iterator(); it2.hasNext();) {" + NL + "\t\t\t\torg.eclipse.gef.palette.PaletteEntry entry2 = (org.eclipse.gef.palette.PaletteEntry) it2.next();" + NL + "\t\t\t\tif (\"zoomTool\".equals(entry2.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\t\tit2.remove();" + NL + "\t\t\t\t} else if (\"noteStack\".equals(entry2.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\t\tit2.remove();" + NL + "\t\t\t\t} else if (\"selectionTool\".equals(entry2.getId())) { //$NON-NLS-1$" + NL + "\t\t\t\t\tit2.remove();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (paletteRoot.getDefaultEntry() == entry2) {" + NL + "\t\t\t\t\tpaletteRoot.setDefaultEntry(null);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}";
@


1.35
log
@Do not assume tool entry's properties are strings, let users specify whatever they want (e.g. constants)
@
text
@d25 30
a54 30
  protected final String TEXT_7 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_8 = "());";
  protected final String TEXT_9 = NL + "\t}" + NL;
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "     * Creates \"";
  protected final String TEXT_11 = "\" palette tool group" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_12 = "() {";
  protected final String TEXT_13 = NL + "\t\t";
  protected final String TEXT_14 = " paletteContainer = new ";
  protected final String TEXT_15 = "(";
  protected final String TEXT_16 = ".getString(\"";
  protected final String TEXT_17 = ".title\")); //$NON-NLS-1$";
  protected final String TEXT_18 = NL + "\t\t";
  protected final String TEXT_19 = " paletteContainer = new ";
  protected final String TEXT_20 = "(";
  protected final String TEXT_21 = ".getString(\"";
  protected final String TEXT_22 = ".title\"), null, null); //$NON-NLS-1$";
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = " paletteContainer = new ";
  protected final String TEXT_25 = "(";
  protected final String TEXT_26 = ".getString(\"";
  protected final String TEXT_27 = ".title\")); //$NON-NLS-1$";
  protected final String TEXT_28 = NL + "\t\tpaletteContainer.setDescription(";
  protected final String TEXT_29 = ".getString(\"";
  protected final String TEXT_30 = ".desc\")); //$NON-NLS-1$";
  protected final String TEXT_31 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_32 = "());";
  protected final String TEXT_33 = NL + "\t\tpaletteContainer.setActiveEntry((ToolEntry) paletteContainer.getChildren().get(paletteContainer.getChildren().size() - 1));";
  protected final String TEXT_34 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_35 = "());";
  protected final String TEXT_36 = NL + "\t\tpaletteContainer.add(new ";
d56 73
a128 57
  protected final String TEXT_38 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_40 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_41 = NL + "\t\tsmallImage = ";
  protected final String TEXT_42 = ".findImageDescriptor(\"";
  protected final String TEXT_43 = "\"); //$NON-NLS-1$" + NL + "\t\t";
  protected final String TEXT_44 = NL + "\t\tsmallImage = ";
  protected final String TEXT_45 = ".getImageDescriptor(";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = "); " + NL + "\t\t";
  protected final String TEXT_48 = NL + "\t\tsmallImage = null;" + NL + "\t\t";
  protected final String TEXT_49 = NL + "\t\t";
  protected final String TEXT_50 = NL + "\t\tlargeImage = ";
  protected final String TEXT_51 = ".findImageDescriptor(\"";
  protected final String TEXT_52 = "\"); //$NON-NLS-1$" + NL + "\t\t";
  protected final String TEXT_53 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_54 = NL + "\t\tToolEntry result = new ToolEntry(";
  protected final String TEXT_55 = ".getString(\"";
  protected final String TEXT_56 = ".title\"), ";
  protected final String TEXT_57 = ".getString(\"";
  protected final String TEXT_58 = ".desc\"), smallImage, largeImage) {}; //$NON-NLS-1$ $NON-NLS-2$";
  protected final String TEXT_59 = NL + "\t\tfinal ";
  protected final String TEXT_60 = " elementTypes = new ";
  protected final String TEXT_61 = "();";
  protected final String TEXT_62 = NL + "\t\telementTypes.add(";
  protected final String TEXT_63 = ".";
  protected final String TEXT_64 = ");";
  protected final String TEXT_65 = "\t\t" + NL + "\t\tToolEntry result = new NodeToolEntry(";
  protected final String TEXT_66 = ".getString(\"";
  protected final String TEXT_67 = ".title\"), ";
  protected final String TEXT_68 = ".getString(\"";
  protected final String TEXT_69 = ".desc\"), smallImage, largeImage, elementTypes); //$NON-NLS-1$ $NON-NLS-2$";
  protected final String TEXT_70 = NL + "\t\tfinal ";
  protected final String TEXT_71 = " relationshipTypes = new ";
  protected final String TEXT_72 = "();";
  protected final String TEXT_73 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_74 = ".";
  protected final String TEXT_75 = ");";
  protected final String TEXT_76 = "\t\t" + NL + "\t\tToolEntry result = new LinkToolEntry(";
  protected final String TEXT_77 = ".getString(\"";
  protected final String TEXT_78 = ".title\"), ";
  protected final String TEXT_79 = ".getString(\"";
  protected final String TEXT_80 = ".desc\"), smallImage, largeImage, relationshipTypes); //$NON-NLS-1$ $NON-NLS-2$";
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_83 = ".class);";
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = NL + "\t\tresult.setToolProperty(";
  protected final String TEXT_86 = ", ";
  protected final String TEXT_87 = ");";
  protected final String TEXT_88 = NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_89 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List elementTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.elementTypes = elementTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_90 = "(elementTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_91 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List relationshipTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.relationshipTypes = relationshipTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_92 = "(relationshipTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_93 = NL + "}";
  protected final String TEXT_94 = NL;
d159 3
a161 1
    
d164 1
a164 1
    stringBuffer.append(TEXT_7);
d166 5
a170 1
    stringBuffer.append(TEXT_8);
a171 2
    stringBuffer.append(TEXT_9);
    
d174 1
a174 1
final LinkedList<ToolEntry> toolsQueue = new LinkedList<ToolEntry>();
d179 1
a179 1
    stringBuffer.append(TEXT_10);
d181 1
a181 1
    stringBuffer.append(TEXT_11);
d183 1
a183 1
    stringBuffer.append(TEXT_12);
d186 1
a186 1
    stringBuffer.append(TEXT_13);
d188 1
a188 1
    stringBuffer.append(TEXT_14);
d190 1
a190 1
    stringBuffer.append(TEXT_15);
d192 1
a192 1
    stringBuffer.append(TEXT_16);
d194 1
a194 1
    stringBuffer.append(TEXT_17);
d197 1
a197 1
    stringBuffer.append(TEXT_18);
d199 1
a199 1
    stringBuffer.append(TEXT_19);
d201 1
a201 1
    stringBuffer.append(TEXT_20);
d203 1
a203 1
    stringBuffer.append(TEXT_21);
d205 1
a205 1
    stringBuffer.append(TEXT_22);
d208 1
a208 1
    stringBuffer.append(TEXT_23);
d210 1
a210 1
    stringBuffer.append(TEXT_24);
d212 1
a212 1
    stringBuffer.append(TEXT_25);
d214 1
a214 1
    stringBuffer.append(TEXT_26);
d216 1
a216 1
    stringBuffer.append(TEXT_27);
d219 1
a219 1
    stringBuffer.append(TEXT_28);
d221 1
a221 1
    stringBuffer.append(TEXT_29);
d223 1
a223 1
    stringBuffer.append(TEXT_30);
d227 2
a228 2
	if (groupItem instanceof ToolEntry) {
		ToolEntry toolEntry = (ToolEntry) groupItem;
d230 1
a230 1
    stringBuffer.append(TEXT_31);
d232 1
a232 1
    stringBuffer.append(TEXT_32);
d234 1
a234 1
    stringBuffer.append(TEXT_33);
d239 1
a239 1
    stringBuffer.append(TEXT_34);
d241 1
a241 1
    stringBuffer.append(TEXT_35);
d243 1
a243 1
    stringBuffer.append(TEXT_36);
d245 1
a245 1
    stringBuffer.append(TEXT_37);
d248 1
a248 1
    stringBuffer.append(TEXT_38);
d254 34
a287 1
	ToolEntry toolEntry = toolsQueue.removeFirst();
d290 1
a290 1
    stringBuffer.append(TEXT_39);
d292 3
a294 1
    stringBuffer.append(TEXT_40);
d296 1
a296 1
    stringBuffer.append(TEXT_41);
d298 1
a298 1
    stringBuffer.append(TEXT_42);
d300 1
a300 1
    stringBuffer.append(TEXT_43);
d302 1
a302 1
    stringBuffer.append(TEXT_44);
d304 1
a304 1
    stringBuffer.append(TEXT_45);
d306 1
a306 1
    stringBuffer.append(TEXT_46);
d308 1
a308 1
    stringBuffer.append(TEXT_47);
d310 1
a310 1
    stringBuffer.append(TEXT_48);
d312 1
a312 1
    stringBuffer.append(TEXT_49);
d314 1
a314 1
    stringBuffer.append(TEXT_50);
d316 1
a316 1
    stringBuffer.append(TEXT_51);
d318 1
a318 1
    stringBuffer.append(TEXT_52);
d320 1
a320 1
    stringBuffer.append(TEXT_53);
d324 1
a324 1
    stringBuffer.append(TEXT_54);
d326 1
a326 1
    stringBuffer.append(TEXT_55);
d328 1
a328 1
    stringBuffer.append(TEXT_56);
d330 1
a330 1
    stringBuffer.append(TEXT_57);
d332 1
a332 1
    stringBuffer.append(TEXT_58);
d336 1
a336 1
    stringBuffer.append(TEXT_59);
d338 1
a338 1
    stringBuffer.append(TEXT_60);
d340 1
a340 1
    stringBuffer.append(TEXT_61);
d344 1
a344 1
    stringBuffer.append(TEXT_62);
d346 1
a346 1
    stringBuffer.append(TEXT_63);
d348 1
a348 1
    stringBuffer.append(TEXT_64);
d351 1
a351 1
    stringBuffer.append(TEXT_65);
d353 1
a353 1
    stringBuffer.append(TEXT_66);
d355 1
a355 1
    stringBuffer.append(TEXT_67);
d357 1
a357 1
    stringBuffer.append(TEXT_68);
d359 1
a359 1
    stringBuffer.append(TEXT_69);
d363 1
a363 1
    stringBuffer.append(TEXT_70);
d365 1
a365 1
    stringBuffer.append(TEXT_71);
d367 1
a367 1
    stringBuffer.append(TEXT_72);
d371 1
a371 1
    stringBuffer.append(TEXT_73);
d373 1
a373 1
    stringBuffer.append(TEXT_74);
d375 1
a375 1
    stringBuffer.append(TEXT_75);
d378 1
a378 1
    stringBuffer.append(TEXT_76);
d380 1
a380 1
    stringBuffer.append(TEXT_77);
d382 1
a382 1
    stringBuffer.append(TEXT_78);
d384 1
a384 1
    stringBuffer.append(TEXT_79);
d386 1
a386 1
    stringBuffer.append(TEXT_80);
d388 1
a388 1
    stringBuffer.append(TEXT_81);
d393 1
a393 1
    stringBuffer.append(TEXT_82);
d395 1
a395 1
    stringBuffer.append(TEXT_83);
d397 1
a397 1
    stringBuffer.append(TEXT_84);
d401 1
a401 1
    stringBuffer.append(TEXT_85);
d403 1
a403 1
    stringBuffer.append(TEXT_86);
d405 1
a405 1
    stringBuffer.append(TEXT_87);
d408 3
a410 2
    stringBuffer.append(TEXT_88);
    } /*while toolsQueue*/ 
d412 1
a412 1
    stringBuffer.append(TEXT_89);
d414 1
a414 1
    stringBuffer.append(TEXT_90);
d417 1
a417 1
    stringBuffer.append(TEXT_91);
d419 1
a419 1
    stringBuffer.append(TEXT_92);
d421 1
a421 1
    stringBuffer.append(TEXT_93);
d423 1
a423 1
    stringBuffer.append(TEXT_94);
@


1.34
log
@[162552] - Tool descriptions that contain special characters yield uncompilable code
Refactored to use externalized strings instead (for now from plugin.xml, may later switch to new nls bundles)
@
text
@d103 3
a105 3
  protected final String TEXT_85 = NL + "\t\tresult.setToolProperty(\"";
  protected final String TEXT_86 = "\", \"";
  protected final String TEXT_87 = "\");";
@


1.33
log
@[148371] - Unused LinkToolEntry inner classes generated
@
text
@d33 69
a101 69
  protected final String TEXT_15 = "(\"";
  protected final String TEXT_16 = "\");";
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = " paletteContainer = new ";
  protected final String TEXT_19 = "(\"";
  protected final String TEXT_20 = "\", null, null);";
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = " paletteContainer = new ";
  protected final String TEXT_23 = "(\"";
  protected final String TEXT_24 = "\");";
  protected final String TEXT_25 = NL + "\t\tpaletteContainer.setDescription(\"";
  protected final String TEXT_26 = "\");";
  protected final String TEXT_27 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_28 = "());";
  protected final String TEXT_29 = NL + "\t\tpaletteContainer.setActiveEntry((ToolEntry) paletteContainer.getChildren().get(paletteContainer.getChildren().size() - 1));";
  protected final String TEXT_30 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_31 = "());";
  protected final String TEXT_32 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_33 = "());";
  protected final String TEXT_34 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_36 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_37 = NL + "\t\tsmallImage = ";
  protected final String TEXT_38 = ".findImageDescriptor(\"";
  protected final String TEXT_39 = "\");" + NL + "\t\t";
  protected final String TEXT_40 = NL + "\t\tsmallImage = ";
  protected final String TEXT_41 = ".getImageDescriptor(";
  protected final String TEXT_42 = ".";
  protected final String TEXT_43 = "); " + NL + "\t\t";
  protected final String TEXT_44 = NL + "\t\tsmallImage = null;" + NL + "\t\t";
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = NL + "\t\tlargeImage = ";
  protected final String TEXT_47 = ".findImageDescriptor(\"";
  protected final String TEXT_48 = "\");" + NL + "\t\t";
  protected final String TEXT_49 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_50 = NL + "\t\tToolEntry result = new ToolEntry(\"";
  protected final String TEXT_51 = "\", \"";
  protected final String TEXT_52 = "\", smallImage, largeImage) {};";
  protected final String TEXT_53 = NL + "\t\tfinal ";
  protected final String TEXT_54 = " elementTypes = new ";
  protected final String TEXT_55 = "();";
  protected final String TEXT_56 = NL + "\t\telementTypes.add(";
  protected final String TEXT_57 = ".";
  protected final String TEXT_58 = ");";
  protected final String TEXT_59 = "\t\t" + NL + "\t\tToolEntry result = new NodeToolEntry(\"";
  protected final String TEXT_60 = "\", \"";
  protected final String TEXT_61 = "\", smallImage, largeImage, elementTypes);";
  protected final String TEXT_62 = NL + "\t\tfinal ";
  protected final String TEXT_63 = " relationshipTypes = new ";
  protected final String TEXT_64 = "();";
  protected final String TEXT_65 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = ");";
  protected final String TEXT_68 = "\t\t" + NL + "\t\tToolEntry result = new LinkToolEntry(\"";
  protected final String TEXT_69 = "\", \"";
  protected final String TEXT_70 = "\", smallImage, largeImage, relationshipTypes);";
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_73 = ".class);";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL + "\t\tresult.setToolProperty(\"";
  protected final String TEXT_76 = "\", \"";
  protected final String TEXT_77 = "\");";
  protected final String TEXT_78 = NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List elementTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.elementTypes = elementTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_80 = "(elementTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_81 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List relationshipTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.relationshipTypes = relationshipTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_82 = "(relationshipTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_83 = NL + "}";
d103 10
d139 1
d171 1
a171 1
    stringBuffer.append(toolGroup.getTitle());
d173 2
a176 2
    stringBuffer.append(TEXT_17);
    stringBuffer.append(containerClassName);
d180 1
a180 1
    stringBuffer.append(toolGroup.getTitle());
d182 4
d188 1
a188 1
    stringBuffer.append(TEXT_21);
d190 1
a190 1
    stringBuffer.append(TEXT_22);
d192 5
a196 3
    stringBuffer.append(TEXT_23);
    stringBuffer.append(toolGroup.getTitle());
    stringBuffer.append(TEXT_24);
d199 5
a203 3
    stringBuffer.append(TEXT_25);
    stringBuffer.append(toolGroup.getDescription());
    stringBuffer.append(TEXT_26);
d210 1
a210 1
    stringBuffer.append(TEXT_27);
d212 1
a212 1
    stringBuffer.append(TEXT_28);
d214 1
a214 1
    stringBuffer.append(TEXT_29);
d219 1
a219 1
    stringBuffer.append(TEXT_30);
d221 1
a221 1
    stringBuffer.append(TEXT_31);
d223 1
a223 1
    stringBuffer.append(TEXT_32);
d225 1
a225 1
    stringBuffer.append(TEXT_33);
d228 1
a228 1
    stringBuffer.append(TEXT_34);
d237 1
a237 1
    stringBuffer.append(TEXT_35);
d239 1
a239 1
    stringBuffer.append(TEXT_36);
d241 1
a241 1
    stringBuffer.append(TEXT_37);
d243 1
a243 1
    stringBuffer.append(TEXT_38);
d245 1
a245 1
    stringBuffer.append(TEXT_39);
d247 1
a247 1
    stringBuffer.append(TEXT_40);
d249 1
a249 1
    stringBuffer.append(TEXT_41);
d251 1
a251 1
    stringBuffer.append(TEXT_42);
d253 1
a253 1
    stringBuffer.append(TEXT_43);
d255 1
a255 1
    stringBuffer.append(TEXT_44);
d257 1
a257 1
    stringBuffer.append(TEXT_45);
d259 1
a259 1
    stringBuffer.append(TEXT_46);
d261 1
a261 1
    stringBuffer.append(TEXT_47);
d263 1
a263 1
    stringBuffer.append(TEXT_48);
d265 1
a265 1
    stringBuffer.append(TEXT_49);
d269 9
a277 5
    stringBuffer.append(TEXT_50);
    stringBuffer.append(toolEntry.getTitle());
    stringBuffer.append(TEXT_51);
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_52);
d281 1
a281 1
    stringBuffer.append(TEXT_53);
d283 1
a283 1
    stringBuffer.append(TEXT_54);
d285 1
a285 1
    stringBuffer.append(TEXT_55);
d289 1
a289 1
    stringBuffer.append(TEXT_56);
d291 1
a291 1
    stringBuffer.append(TEXT_57);
d293 1
a293 1
    stringBuffer.append(TEXT_58);
d296 9
a304 5
    stringBuffer.append(TEXT_59);
    stringBuffer.append(toolEntry.getTitle());
    stringBuffer.append(TEXT_60);
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_61);
d308 1
a308 1
    stringBuffer.append(TEXT_62);
d310 1
a310 1
    stringBuffer.append(TEXT_63);
d312 1
a312 1
    stringBuffer.append(TEXT_64);
d316 1
a316 1
    stringBuffer.append(TEXT_65);
d318 1
a318 1
    stringBuffer.append(TEXT_66);
d320 1
a320 1
    stringBuffer.append(TEXT_67);
d323 9
a331 5
    stringBuffer.append(TEXT_68);
    stringBuffer.append(toolEntry.getTitle());
    stringBuffer.append(TEXT_69);
    stringBuffer.append(toolEntry.getDescription());
    stringBuffer.append(TEXT_70);
d333 1
a333 1
    stringBuffer.append(TEXT_71);
d338 1
a338 1
    stringBuffer.append(TEXT_72);
d340 1
a340 1
    stringBuffer.append(TEXT_73);
d342 1
a342 1
    stringBuffer.append(TEXT_74);
d346 1
a346 1
    stringBuffer.append(TEXT_75);
d348 1
a348 1
    stringBuffer.append(TEXT_76);
d350 1
a350 1
    stringBuffer.append(TEXT_77);
d353 1
a353 1
    stringBuffer.append(TEXT_78);
d356 1
a356 1
    stringBuffer.append(TEXT_79);
d358 1
a358 1
    stringBuffer.append(TEXT_80);
d361 1
a361 1
    stringBuffer.append(TEXT_81);
d363 1
a363 1
    stringBuffer.append(TEXT_82);
d365 1
a365 1
    stringBuffer.append(TEXT_83);
d367 1
a367 1
    stringBuffer.append(TEXT_84);
@


1.32
log
@[163126] mgolubev - Using ToolGroup with stack = true produces uncompiliable code
using java 5 collections
set active tool for toolstack
@
text
@d98 5
a102 3
  protected final String TEXT_80 = "(elementTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List relationshipTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.relationshipTypes = relationshipTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_81 = "(relationshipTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_82 = NL;
d127 2
d272 1
d295 1
d324 1
d328 3
d332 3
a334 1
    stringBuffer.append(TEXT_81);
d336 1
a336 1
    stringBuffer.append(TEXT_82);
@


1.31
log
@header comment should not be a javadoc comment
@
text
@d28 9
a36 9
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_11 = "() {";
  protected final String TEXT_12 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_13 = "(\"";
  protected final String TEXT_14 = "\");";
  protected final String TEXT_15 = NL + "\t\tPaletteContainer paletteContainer = new ";
  protected final String TEXT_16 = "(\"";
  protected final String TEXT_17 = "\");";
  protected final String TEXT_18 = NL + "\t\tPaletteContainer paletteContainer = new ";
d38 49
a86 49
  protected final String TEXT_20 = "\");";
  protected final String TEXT_21 = NL + "\t\tpaletteContainer.setDescription(\"";
  protected final String TEXT_22 = "\");";
  protected final String TEXT_23 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_24 = "());";
  protected final String TEXT_25 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_26 = "());";
  protected final String TEXT_27 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_29 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_30 = NL + "\t\tsmallImage = ";
  protected final String TEXT_31 = ".findImageDescriptor(\"";
  protected final String TEXT_32 = "\");" + NL + "\t\t";
  protected final String TEXT_33 = NL + "\t\tsmallImage = ";
  protected final String TEXT_34 = ".getImageDescriptor(";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = "); " + NL + "\t\t";
  protected final String TEXT_37 = NL + "\t\tsmallImage = null;" + NL + "\t\t";
  protected final String TEXT_38 = NL + "\t\t";
  protected final String TEXT_39 = NL + "\t\tlargeImage = ";
  protected final String TEXT_40 = ".findImageDescriptor(\"";
  protected final String TEXT_41 = "\");" + NL + "\t\t";
  protected final String TEXT_42 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_43 = NL + "\t\tToolEntry result = new ToolEntry(\"";
  protected final String TEXT_44 = "\", \"";
  protected final String TEXT_45 = "\", smallImage, largeImage) {};";
  protected final String TEXT_46 = NL + "\t\tfinal ";
  protected final String TEXT_47 = " elementTypes = new ";
  protected final String TEXT_48 = "();";
  protected final String TEXT_49 = NL + "\t\telementTypes.add(";
  protected final String TEXT_50 = ".";
  protected final String TEXT_51 = ");";
  protected final String TEXT_52 = "\t\t" + NL + "\t\tToolEntry result = new NodeToolEntry(\"";
  protected final String TEXT_53 = "\", \"";
  protected final String TEXT_54 = "\", smallImage, largeImage, elementTypes);";
  protected final String TEXT_55 = NL + "\t\tfinal ";
  protected final String TEXT_56 = " relationshipTypes = new ";
  protected final String TEXT_57 = "();";
  protected final String TEXT_58 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = ");";
  protected final String TEXT_61 = "\t\t" + NL + "\t\tToolEntry result = new LinkToolEntry(\"";
  protected final String TEXT_62 = "\", \"";
  protected final String TEXT_63 = "\", smallImage, largeImage, relationshipTypes);";
  protected final String TEXT_64 = NL;
  protected final String TEXT_65 = NL + "\t\tresult.setToolClass(";
  protected final String TEXT_66 = ".class);";
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = NL + "\t\tresult.setToolProperty(\"";
d88 13
a100 6
  protected final String TEXT_70 = "\");";
  protected final String TEXT_71 = NL + "\t\treturn result;" + NL + "\t}" + NL;
  protected final String TEXT_72 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List elementTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.elementTypes = elementTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_73 = "(elementTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ToolEntry {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate final List relationshipTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.relationshipTypes = relationshipTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_74 = "(relationshipTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_75 = NL;
d137 3
a139 3
final LinkedList/*<ToolGroup>*/ toolGroupsQueue = new LinkedList();
toolGroupsQueue.addAll(palette.getGroups());
final LinkedList/*<ToolEntry>*/ toolsQueue = new LinkedList();
d142 1
a142 1
	ToolGroup toolGroup = (ToolGroup) toolGroupsQueue.removeFirst();
d145 2
a147 2
    stringBuffer.append(TEXT_11);
    if (toolGroup.isCollapse() && toolGroup.isToolsOnly()) { 
d149 2
a150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteDrawer"));
d152 1
a152 1
    stringBuffer.append(toolGroup.getTitle());
d154 1
a154 1
    } else if (toolGroup.isStack()) {
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteStack"));
d158 2
a159 1
    stringBuffer.append(toolGroup.getTitle());
d161 1
a161 1
    } else {
d163 1
a163 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteGroup"));
d167 9
d178 1
a178 1
    stringBuffer.append(TEXT_21);
d180 1
a180 1
    stringBuffer.append(TEXT_22);
d185 8
a192 4
		toolsQueue.add(groupItem);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(((ToolEntry) groupItem).getCreateMethodName());
    stringBuffer.append(TEXT_24);
d194 7
a200 3
		toolGroupsQueue.addLast(groupItem);
	} else if (groupItem instanceof Separator) {
    stringBuffer.append(TEXT_25);
d202 1
a202 1
    stringBuffer.append(TEXT_26);
d205 1
a205 1
    stringBuffer.append(TEXT_27);
d211 1
a211 1
	ToolEntry toolEntry = (ToolEntry) toolsQueue.removeFirst();
d214 1
a214 1
    stringBuffer.append(TEXT_28);
d216 1
a216 1
    stringBuffer.append(TEXT_29);
d218 1
a218 1
    stringBuffer.append(TEXT_30);
d220 1
a220 1
    stringBuffer.append(TEXT_31);
d222 1
a222 1
    stringBuffer.append(TEXT_32);
d224 1
a224 1
    stringBuffer.append(TEXT_33);
d226 1
a226 1
    stringBuffer.append(TEXT_34);
d228 1
a228 1
    stringBuffer.append(TEXT_35);
d230 1
a230 1
    stringBuffer.append(TEXT_36);
d232 1
a232 1
    stringBuffer.append(TEXT_37);
d234 1
a234 1
    stringBuffer.append(TEXT_38);
d236 1
a236 1
    stringBuffer.append(TEXT_39);
d238 1
a238 1
    stringBuffer.append(TEXT_40);
d240 1
a240 1
    stringBuffer.append(TEXT_41);
d242 1
a242 1
    stringBuffer.append(TEXT_42);
d246 1
a246 1
    stringBuffer.append(TEXT_43);
d248 1
a248 1
    stringBuffer.append(TEXT_44);
d250 1
a250 1
    stringBuffer.append(TEXT_45);
d254 1
a254 1
    stringBuffer.append(TEXT_46);
d256 1
a256 1
    stringBuffer.append(TEXT_47);
d258 1
a258 1
    stringBuffer.append(TEXT_48);
d262 1
a262 1
    stringBuffer.append(TEXT_49);
d264 1
a264 1
    stringBuffer.append(TEXT_50);
d266 1
a266 1
    stringBuffer.append(TEXT_51);
d268 1
a268 1
    stringBuffer.append(TEXT_52);
d270 1
a270 1
    stringBuffer.append(TEXT_53);
d272 1
a272 1
    stringBuffer.append(TEXT_54);
d276 1
a276 1
    stringBuffer.append(TEXT_55);
d278 1
a278 1
    stringBuffer.append(TEXT_56);
d280 1
a280 1
    stringBuffer.append(TEXT_57);
d284 1
a284 1
    stringBuffer.append(TEXT_58);
d286 1
a286 1
    stringBuffer.append(TEXT_59);
d288 1
a288 1
    stringBuffer.append(TEXT_60);
d290 1
a290 1
    stringBuffer.append(TEXT_61);
d292 1
a292 1
    stringBuffer.append(TEXT_62);
d294 1
a294 1
    stringBuffer.append(TEXT_63);
d296 1
a296 1
    stringBuffer.append(TEXT_64);
d301 1
a301 1
    stringBuffer.append(TEXT_65);
d303 1
a303 1
    stringBuffer.append(TEXT_66);
d305 1
a305 1
    stringBuffer.append(TEXT_67);
d309 1
a309 1
    stringBuffer.append(TEXT_68);
d311 1
a311 1
    stringBuffer.append(TEXT_69);
d313 1
a313 1
    stringBuffer.append(TEXT_70);
d316 1
a316 1
    stringBuffer.append(TEXT_71);
d318 1
a318 1
    stringBuffer.append(TEXT_72);
d320 1
a320 1
    stringBuffer.append(TEXT_73);
d322 1
a322 1
    stringBuffer.append(TEXT_74);
d324 1
a324 1
    stringBuffer.append(TEXT_75);
@


1.30
log
@Correcting copyright processing
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.29
log
@minor import and template fixes to prevent compilation errors in generated code
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d109 1
a109 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.28
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
d90 2
a91 2
  protected final String TEXT_72 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class NodeToolEntry extends ToolEntry {" + NL + "\t\tprivate final List elementTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate NodeToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List elementTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.elementTypes = elementTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
  protected final String TEXT_73 = "(elementTypes);" + NL + "\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\treturn tool;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class LinkToolEntry extends ToolEntry {" + NL + "\t\tprivate final List relationshipTypes;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate LinkToolEntry(String title, String description, ImageDescriptor smallIcon, ImageDescriptor largeIcon, List relationshipTypes) {" + NL + "\t\t\tsuper(title, description, smallIcon, largeIcon);" + NL + "\t\t\tthis.relationshipTypes = relationshipTypes;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Tool createTool() {" + NL + "\t\t\tTool tool = new ";
@


1.27
log
@#128404 palette factory ignores bundle name
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
d29 20
a48 20
  protected final String TEXT_11 = "() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_12 = "\");";
  protected final String TEXT_13 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_21 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_22 = NL + "\t\tsmallImage = ";
  protected final String TEXT_23 = ".findImageDescriptor(\"";
  protected final String TEXT_24 = "\");" + NL + "\t\t";
  protected final String TEXT_25 = NL + "\t\tsmallImage = ";
  protected final String TEXT_26 = ".getImageDescriptor(";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = "); " + NL + "\t\t";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = NL + "\t\tlargeImage = ";
d51 43
a93 37
  protected final String TEXT_33 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_34 = NL + "\t\tfinal ";
  protected final String TEXT_35 = " elementTypes = new ";
  protected final String TEXT_36 = "();";
  protected final String TEXT_37 = NL + "\t\telementTypes.add(";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = ");";
  protected final String TEXT_40 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_41 = "\", \"";
  protected final String TEXT_42 = "\", smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_43 = "(elementTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_45 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_46 = NL + "\t\tsmallImage = ";
  protected final String TEXT_47 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_48 = "\");" + NL + "\t\t";
  protected final String TEXT_49 = NL + "\t\tsmallImage = ";
  protected final String TEXT_50 = ".getImageDescriptor(";
  protected final String TEXT_51 = ".";
  protected final String TEXT_52 = "); " + NL + "\t\t";
  protected final String TEXT_53 = NL + "\t\t";
  protected final String TEXT_54 = NL + "\t\tlargeImage = ";
  protected final String TEXT_55 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_56 = "\");" + NL + "\t\t";
  protected final String TEXT_57 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_58 = NL + "\t\tfinal ";
  protected final String TEXT_59 = " relationshipTypes = new ";
  protected final String TEXT_60 = "();";
  protected final String TEXT_61 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = ");";
  protected final String TEXT_64 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_65 = "\", \"";
  protected final String TEXT_66 = "\", smallImage, largeImage) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_67 = "(relationshipTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_69 = NL;
d114 4
a117 1
    importManager.markImportLocation(stringBuffer);
d122 2
a123 4
List toolGroups = palette.getGroups();
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);

d130 6
a135 2
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
d140 1
a140 1
    stringBuffer.append(toolGroup.getTitleKey());
d142 1
a142 5
    
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);

d144 1
a144 1
    stringBuffer.append(nodeCreationTool.getCreateMethodName());
d146 1
a146 6
    	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		if (j == 0) {

d148 1
a148 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteSeparator"));
d150 1
a150 1
    		}
d152 1
a152 1
    stringBuffer.append(linkCreationTool.getCreateMethodName());
d154 1
a154 1
    	}
d156 1
a156 12
    
}
final String importedElementTypesClassName = importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName());
final String importedPluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
for (int i = 0; i < toolGroups.size(); i++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(i);
	List nodeCreationTools = toolGroup.getNodeTools();
	for (int j = 0; j < nodeCreationTools.size(); j++) {
		NodeEntry nodeCreationTool = (NodeEntry) nodeCreationTools.get(j);
		List genNodes = nodeCreationTool.getGenNode();
		GenNode firstGenNode = (GenNode) genNodes.get(0);

d158 2
a159 1
    stringBuffer.append(nodeCreationTool.getCreateMethodName());
d161 1
a161 1
    if (nodeCreationTool.getSmallIconPath() != null) {
d163 5
a167 1
    stringBuffer.append(importedPluginClassName);
d169 1
a169 1
    stringBuffer.append(nodeCreationTool.getSmallIconPath());
d171 3
a173 1
    } else {
d175 1
a175 1
    stringBuffer.append(importedElementTypesClassName);
d177 2
a178 1
    stringBuffer.append(importedElementTypesClassName);
d180 8
a187 1
    stringBuffer.append(firstGenNode.getUniqueIdentifier());
d189 1
a189 1
    }
d191 1
a191 1
    if (nodeCreationTool.getLargeIconPath() != null) {
d195 1
a195 1
    stringBuffer.append(nodeCreationTool.getLargeIconPath());
d197 1
a197 1
    } else {
d199 1
a199 1
    }
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d203 1
a203 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d205 1
a205 4
    
		for (Iterator genNodesIterator = genNodes.iterator(); genNodesIterator.hasNext();) {
			GenNode nextNode = (GenNode) genNodesIterator.next();

d207 1
a207 1
    stringBuffer.append(importedElementTypesClassName);
d209 1
a209 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d211 1
a211 3
    
		}

d213 1
a213 1
    stringBuffer.append(nodeCreationTool.getTitleKey());
d215 1
a215 1
    stringBuffer.append(nodeCreationTool.getDescriptionKey());
d217 3
a219 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeCreationTool"));
d221 1
a221 8
    
	}
	List linkCreationTools = toolGroup.getLinkTools();
	for (int j = 0; j < linkCreationTools.size(); j++) {
		LinkEntry linkCreationTool = (LinkEntry) linkCreationTools.get(j);
		List genLinks = linkCreationTool.getGenLink();
		GenLink firstGenLink = (GenLink) genLinks.get(0);

d223 1
a223 1
    stringBuffer.append(linkCreationTool.getCreateMethodName());
d225 3
a227 1
    if (linkCreationTool.getSmallIconPath() != null) {
d229 1
a229 1
    stringBuffer.append(importedPluginClassName);
d231 1
a231 1
    stringBuffer.append(linkCreationTool.getSmallIconPath());
d233 3
a235 1
    } else {
d239 1
a239 1
    stringBuffer.append(importedElementTypesClassName);
d241 1
a241 1
    stringBuffer.append(firstGenLink.getUniqueIdentifier());
d243 1
a243 1
    }
d245 1
a245 1
    if (linkCreationTool.getLargeIconPath() != null) {
d247 3
a249 1
    stringBuffer.append(importedPluginClassName);
d251 1
a251 1
    stringBuffer.append(linkCreationTool.getLargeIconPath());
d253 1
a253 1
    } else {
d255 3
a257 1
    }
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d263 1
a263 4
    
		for (Iterator genLinksIterator = genLinks.iterator(); genLinksIterator.hasNext();) {
			GenLink nextLink = (GenLink) genLinksIterator.next();

d265 1
a265 1
    stringBuffer.append(importedElementTypesClassName);
d267 1
a267 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d269 2
d272 3
a274 4
		}

    stringBuffer.append(TEXT_64);
    stringBuffer.append(linkCreationTool.getTitleKey());
d276 1
a276 1
    stringBuffer.append(linkCreationTool.getDescriptionKey());
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.UnspecifiedTypeConnectionTool"));
d280 3
a282 4
    
	}
}

d284 13
d298 1
a298 1
    stringBuffer.append(TEXT_69);
@


1.26
log
@using M6 to generate code.
@
text
@d41 1
a41 1
  protected final String TEXT_23 = ".getBundledImageDescriptor(\"";
d49 1
a49 1
  protected final String TEXT_31 = ".getBundledImageDescriptor(\"";
@


1.25
log
@restore generators
@
text
@d91 1
a91 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.24
log
@#134095 do not store compiled templates in cvs
@
text
@d91 1
a91 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.23
log
@Switching to eclipse M6.
@
text
@@


1.22
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d91 1
a91 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.21
log
@#126199 add palette provider
@
text
@d19 21
a39 21
  protected final String TEXT_1 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void fillPalette(PaletteRoot paletteRoot) {";
  protected final String TEXT_4 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_5 = "());";
  protected final String TEXT_6 = NL + "\t}" + NL;
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_8 = "() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_9 = "\");";
  protected final String TEXT_10 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_11 = "());";
  protected final String TEXT_12 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_13 = "());";
  protected final String TEXT_14 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_18 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_19 = NL + "\t\tsmallImage = ";
  protected final String TEXT_20 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_21 = "\");" + NL + "\t\t";
d41 23
a63 23
  protected final String TEXT_23 = ".getImageDescriptor(";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = "); " + NL + "\t\t";
  protected final String TEXT_26 = NL + "\t\t";
  protected final String TEXT_27 = NL + "\t\tlargeImage = ";
  protected final String TEXT_28 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_29 = "\");" + NL + "\t\t";
  protected final String TEXT_30 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_31 = NL + "\t\tfinal ";
  protected final String TEXT_32 = " elementTypes = new ";
  protected final String TEXT_33 = "();";
  protected final String TEXT_34 = NL + "\t\telementTypes.add(";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = ");";
  protected final String TEXT_37 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_38 = "\", \"";
  protected final String TEXT_39 = "\", smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_40 = "(elementTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_42 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_43 = NL + "\t\tsmallImage = ";
  protected final String TEXT_44 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_45 = "\");" + NL + "\t\t";
d65 23
a87 20
  protected final String TEXT_47 = ".getImageDescriptor(";
  protected final String TEXT_48 = ".";
  protected final String TEXT_49 = "); " + NL + "\t\t";
  protected final String TEXT_50 = NL + "\t\t";
  protected final String TEXT_51 = NL + "\t\tlargeImage = ";
  protected final String TEXT_52 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_53 = "\");" + NL + "\t\t";
  protected final String TEXT_54 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_55 = NL + "\t\tfinal ";
  protected final String TEXT_56 = " relationshipTypes = new ";
  protected final String TEXT_57 = "();";
  protected final String TEXT_58 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = ");";
  protected final String TEXT_61 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_62 = "\", \"";
  protected final String TEXT_63 = "\", smallImage, largeImage) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_64 = "(relationshipTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_65 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_66 = NL;
a96 1
importManager.emitPackageStatement(stringBuffer);
d98 10
d109 1
a109 1
    stringBuffer.append(TEXT_2);
d111 1
a111 1
    stringBuffer.append(TEXT_3);
d117 1
a117 1
    stringBuffer.append(TEXT_4);
d119 1
a119 1
    stringBuffer.append(TEXT_5);
d121 1
a121 1
    stringBuffer.append(TEXT_6);
d126 1
a126 1
    stringBuffer.append(TEXT_7);
d128 1
a128 1
    stringBuffer.append(TEXT_8);
d130 1
a130 1
    stringBuffer.append(TEXT_9);
d136 1
a136 1
    stringBuffer.append(TEXT_10);
d138 1
a138 1
    stringBuffer.append(TEXT_11);
d145 1
a145 1
    stringBuffer.append(TEXT_12);
d147 1
a147 1
    stringBuffer.append(TEXT_13);
d149 1
a149 1
    stringBuffer.append(TEXT_14);
d151 1
a151 1
    stringBuffer.append(TEXT_15);
d153 1
a153 1
    stringBuffer.append(TEXT_16);
d166 1
a166 1
    stringBuffer.append(TEXT_17);
d168 1
a168 1
    stringBuffer.append(TEXT_18);
d170 1
a170 1
    stringBuffer.append(TEXT_19);
d172 1
a172 1
    stringBuffer.append(TEXT_20);
d174 1
a174 1
    stringBuffer.append(TEXT_21);
d176 1
a176 1
    stringBuffer.append(TEXT_22);
d178 1
a178 1
    stringBuffer.append(TEXT_23);
d180 1
a180 1
    stringBuffer.append(TEXT_24);
d182 1
a182 1
    stringBuffer.append(TEXT_25);
d184 1
a184 1
    stringBuffer.append(TEXT_26);
d186 1
a186 1
    stringBuffer.append(TEXT_27);
d188 1
a188 1
    stringBuffer.append(TEXT_28);
d190 1
a190 1
    stringBuffer.append(TEXT_29);
d192 1
a192 1
    stringBuffer.append(TEXT_30);
d194 1
a194 1
    stringBuffer.append(TEXT_31);
d196 1
a196 1
    stringBuffer.append(TEXT_32);
d198 1
a198 1
    stringBuffer.append(TEXT_33);
d203 1
a203 1
    stringBuffer.append(TEXT_34);
d205 1
a205 1
    stringBuffer.append(TEXT_35);
d207 1
a207 1
    stringBuffer.append(TEXT_36);
d211 1
a211 1
    stringBuffer.append(TEXT_37);
d213 1
a213 1
    stringBuffer.append(TEXT_38);
d215 1
a215 1
    stringBuffer.append(TEXT_39);
d217 1
a217 1
    stringBuffer.append(TEXT_40);
d226 1
a226 1
    stringBuffer.append(TEXT_41);
d228 1
a228 1
    stringBuffer.append(TEXT_42);
d230 1
a230 1
    stringBuffer.append(TEXT_43);
d232 1
a232 1
    stringBuffer.append(TEXT_44);
d234 1
a234 1
    stringBuffer.append(TEXT_45);
d236 1
a236 1
    stringBuffer.append(TEXT_46);
d238 1
a238 1
    stringBuffer.append(TEXT_47);
d240 1
a240 1
    stringBuffer.append(TEXT_48);
d242 1
a242 1
    stringBuffer.append(TEXT_49);
d244 1
a244 1
    stringBuffer.append(TEXT_50);
d246 1
a246 1
    stringBuffer.append(TEXT_51);
d248 1
a248 1
    stringBuffer.append(TEXT_52);
d250 1
a250 1
    stringBuffer.append(TEXT_53);
d252 1
a252 1
    stringBuffer.append(TEXT_54);
d254 1
a254 1
    stringBuffer.append(TEXT_55);
d256 1
a256 1
    stringBuffer.append(TEXT_56);
d258 1
a258 1
    stringBuffer.append(TEXT_57);
d263 1
a263 1
    stringBuffer.append(TEXT_58);
d265 1
a265 1
    stringBuffer.append(TEXT_59);
d267 1
a267 1
    stringBuffer.append(TEXT_60);
d271 1
a271 1
    stringBuffer.append(TEXT_61);
d273 1
a273 1
    stringBuffer.append(TEXT_62);
d275 1
a275 1
    stringBuffer.append(TEXT_63);
d277 1
a277 1
    stringBuffer.append(TEXT_64);
d282 1
a282 1
    stringBuffer.append(TEXT_65);
d284 1
a284 1
    stringBuffer.append(TEXT_66);
@


1.20
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d19 1
a19 1
  protected final String TEXT_1 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
d21 64
a84 76
  protected final String TEXT_3 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Diagram diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_4 = "(Diagram diagram) {" + NL + "\t\tthis.diagram = diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected final Diagram getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static PaletteRoot createPalette(Diagram diagram) {" + NL + "\t\tPaletteRoot paletteRoot = new PaletteRoot();" + NL + "\t\t";
  protected final String TEXT_5 = " factory = new ";
  protected final String TEXT_6 = "(diagram);" + NL + "\t\tPaletteContainer commonTools = factory.createCommonTools();" + NL + "\t\tpaletteRoot.add(commonTools);" + NL + "\t\tpaletteRoot.setDefaultEntry((ToolEntry) commonTools.getChildren().get(0));" + NL + "\t\tfactory.fillPalette(paletteRoot);" + NL + "\t\treturn paletteRoot;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void fillPalette(PaletteRoot paletteRoot, Diagram diagram) {" + NL + "\t\t";
  protected final String TEXT_7 = " factory = new ";
  protected final String TEXT_8 = "(diagram);" + NL + "\t\tfactory.fillPalette(paletteRoot);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void fillPalette(PaletteRoot paletteRoot) {";
  protected final String TEXT_9 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_10 = "());";
  protected final String TEXT_11 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createCommonTools() {" + NL + "\t\tPaletteGroup common = new PaletteGroup(\"Common\");" + NL + "\t\tToolEntry selectionTool = new PanningSelectionToolEntry();" + NL + "\t\tcommon.add(selectionTool);" + NL + "\t\tcommon.add(new MarqueeToolEntry());";
  protected final String TEXT_12 = NL + "\t\tcommon.add(new ToolEntry(\"Zoom\", null, getZoomToolImage(), getZoomToolImage()," + NL + "\t\t\t";
  protected final String TEXT_13 = ".class) {});";
  protected final String TEXT_14 = NL + "\t\treturn common;" + NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getZoomToolImage() {" + NL + "\t\t";
  protected final String TEXT_16 = " action = new ";
  protected final String TEXT_17 = "(new ";
  protected final String TEXT_18 = "(null, null));" + NL + "\t\treturn action.getImageDescriptor();" + NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_20 = "() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_21 = "\");";
  protected final String TEXT_22 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_23 = "());";
  protected final String TEXT_24 = NL + "\t\tpaletteContainer.add(new ";
  protected final String TEXT_25 = "());";
  protected final String TEXT_26 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_27 = "());";
  protected final String TEXT_28 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_30 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_31 = NL + "\t\tsmallImage = ";
  protected final String TEXT_32 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_33 = "\");" + NL + "\t\t";
  protected final String TEXT_34 = NL + "\t\tsmallImage = ";
  protected final String TEXT_35 = ".getImageDescriptor(";
  protected final String TEXT_36 = ".";
  protected final String TEXT_37 = "); " + NL + "\t\t";
  protected final String TEXT_38 = NL + "\t\t";
  protected final String TEXT_39 = NL + "\t\tlargeImage = ";
  protected final String TEXT_40 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_41 = "\");" + NL + "\t\t";
  protected final String TEXT_42 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_43 = NL + "\t\tfinal ";
  protected final String TEXT_44 = " elementTypes = new ";
  protected final String TEXT_45 = "();";
  protected final String TEXT_46 = NL + "\t\telementTypes.add(";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = ");";
  protected final String TEXT_49 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_50 = "\", \"";
  protected final String TEXT_51 = "\", smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_52 = "(elementTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_54 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_55 = NL + "\t\tsmallImage = ";
  protected final String TEXT_56 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_57 = "\");" + NL + "\t\t";
  protected final String TEXT_58 = NL + "\t\tsmallImage = ";
  protected final String TEXT_59 = ".getImageDescriptor(";
  protected final String TEXT_60 = ".";
  protected final String TEXT_61 = "); " + NL + "\t\t";
  protected final String TEXT_62 = NL + "\t\t";
  protected final String TEXT_63 = NL + "\t\tlargeImage = ";
  protected final String TEXT_64 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_65 = "\");" + NL + "\t\t";
  protected final String TEXT_66 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_67 = NL + "\t\tfinal ";
  protected final String TEXT_68 = " relationshipTypes = new ";
  protected final String TEXT_69 = "();";
  protected final String TEXT_70 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_71 = ".";
  protected final String TEXT_72 = ");";
  protected final String TEXT_73 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_74 = "\", \"";
  protected final String TEXT_75 = "\", smallImage, largeImage) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_76 = "(relationshipTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_78 = NL;
a99 10
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_8);
d105 1
a105 1
    stringBuffer.append(TEXT_9);
d107 1
a107 1
    stringBuffer.append(TEXT_10);
d109 1
a109 15
    stringBuffer.append(TEXT_11);
    if (palette.isNeedZoomTools()) {
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool"));
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    if (palette.isNeedZoomTools()) {
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomInAction"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.ui.actions.ZoomInAction"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.editparts.ZoomManager"));
    stringBuffer.append(TEXT_18);
a110 1
}
d114 1
a114 1
    stringBuffer.append(TEXT_19);
d116 1
a116 1
    stringBuffer.append(TEXT_20);
d118 1
a118 1
    stringBuffer.append(TEXT_21);
d124 1
a124 1
    stringBuffer.append(TEXT_22);
d126 1
a126 1
    stringBuffer.append(TEXT_23);
d133 1
a133 1
    stringBuffer.append(TEXT_24);
d135 1
a135 1
    stringBuffer.append(TEXT_25);
d137 1
a137 1
    stringBuffer.append(TEXT_26);
d139 1
a139 1
    stringBuffer.append(TEXT_27);
d141 1
a141 1
    stringBuffer.append(TEXT_28);
d154 1
a154 1
    stringBuffer.append(TEXT_29);
d156 1
a156 1
    stringBuffer.append(TEXT_30);
d158 1
a158 1
    stringBuffer.append(TEXT_31);
d160 1
a160 1
    stringBuffer.append(TEXT_32);
d162 1
a162 1
    stringBuffer.append(TEXT_33);
d164 1
a164 1
    stringBuffer.append(TEXT_34);
d166 1
a166 1
    stringBuffer.append(TEXT_35);
d168 1
a168 1
    stringBuffer.append(TEXT_36);
d170 1
a170 1
    stringBuffer.append(TEXT_37);
d172 1
a172 1
    stringBuffer.append(TEXT_38);
d174 1
a174 1
    stringBuffer.append(TEXT_39);
d176 1
a176 1
    stringBuffer.append(TEXT_40);
d178 1
a178 1
    stringBuffer.append(TEXT_41);
d180 1
a180 1
    stringBuffer.append(TEXT_42);
d182 1
a182 1
    stringBuffer.append(TEXT_43);
d184 1
a184 1
    stringBuffer.append(TEXT_44);
d186 1
a186 1
    stringBuffer.append(TEXT_45);
d191 1
a191 1
    stringBuffer.append(TEXT_46);
d193 1
a193 1
    stringBuffer.append(TEXT_47);
d195 1
a195 1
    stringBuffer.append(TEXT_48);
d199 1
a199 1
    stringBuffer.append(TEXT_49);
d201 1
a201 1
    stringBuffer.append(TEXT_50);
d203 1
a203 1
    stringBuffer.append(TEXT_51);
d205 1
a205 1
    stringBuffer.append(TEXT_52);
d214 1
a214 1
    stringBuffer.append(TEXT_53);
d216 1
a216 1
    stringBuffer.append(TEXT_54);
d218 1
a218 1
    stringBuffer.append(TEXT_55);
d220 1
a220 1
    stringBuffer.append(TEXT_56);
d222 1
a222 1
    stringBuffer.append(TEXT_57);
d224 1
a224 1
    stringBuffer.append(TEXT_58);
d226 1
a226 1
    stringBuffer.append(TEXT_59);
d228 1
a228 1
    stringBuffer.append(TEXT_60);
d230 1
a230 1
    stringBuffer.append(TEXT_61);
d232 1
a232 1
    stringBuffer.append(TEXT_62);
d234 1
a234 1
    stringBuffer.append(TEXT_63);
d236 1
a236 1
    stringBuffer.append(TEXT_64);
d238 1
a238 1
    stringBuffer.append(TEXT_65);
d240 1
a240 1
    stringBuffer.append(TEXT_66);
d242 1
a242 1
    stringBuffer.append(TEXT_67);
d244 1
a244 1
    stringBuffer.append(TEXT_68);
d246 1
a246 1
    stringBuffer.append(TEXT_69);
d251 1
a251 1
    stringBuffer.append(TEXT_70);
d253 1
a253 1
    stringBuffer.append(TEXT_71);
d255 1
a255 1
    stringBuffer.append(TEXT_72);
d259 1
a259 1
    stringBuffer.append(TEXT_73);
d261 1
a261 1
    stringBuffer.append(TEXT_74);
d263 1
a263 1
    stringBuffer.append(TEXT_75);
d265 1
a265 1
    stringBuffer.append(TEXT_76);
d270 1
a270 1
    stringBuffer.append(TEXT_77);
d272 1
a272 1
    stringBuffer.append(TEXT_78);
@


1.19
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d19 6
a24 6
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Diagram diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = "(Diagram diagram) {" + NL + "\t\tthis.diagram = diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected final Diagram getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static PaletteRoot createPalette(Diagram diagram) {" + NL + "\t\tPaletteRoot paletteRoot = new PaletteRoot();" + NL + "\t\t";
d26 17
a42 17
  protected final String TEXT_8 = "(diagram);" + NL + "\t\tPaletteContainer commonTools = factory.createCommonTools();" + NL + "\t\tpaletteRoot.add(commonTools);" + NL + "\t\tpaletteRoot.setDefaultEntry((ToolEntry) commonTools.getChildren().get(0));" + NL + "\t\tfactory.fillPalette(paletteRoot);" + NL + "\t\treturn paletteRoot;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void fillPalette(PaletteRoot paletteRoot, Diagram diagram) {" + NL + "\t\t";
  protected final String TEXT_9 = " factory = new ";
  protected final String TEXT_10 = "(diagram);" + NL + "\t\tfactory.fillPalette(paletteRoot);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void fillPalette(PaletteRoot paletteRoot) {";
  protected final String TEXT_11 = NL + "\t\tpaletteRoot.add(";
  protected final String TEXT_12 = "());";
  protected final String TEXT_13 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createCommonTools() {" + NL + "\t\tPaletteGroup common = new PaletteGroup(\"Common\");" + NL + "\t\tToolEntry selectionTool = new PanningSelectionToolEntry();" + NL + "\t\tcommon.add(selectionTool);" + NL + "\t\tcommon.add(new MarqueeToolEntry());";
  protected final String TEXT_14 = NL + "\t\tcommon.add(new ToolEntry(\"Zoom\", null, getZoomToolImage(), getZoomToolImage()," + NL + "\t\t\t";
  protected final String TEXT_15 = ".class) {});";
  protected final String TEXT_16 = NL + "\t\treturn common;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getZoomToolImage() {" + NL + "\t\t";
  protected final String TEXT_18 = " action = new ";
  protected final String TEXT_19 = "(new ";
  protected final String TEXT_20 = "(null, null));" + NL + "\t\treturn action.getImageDescriptor();" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer ";
  protected final String TEXT_22 = "() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_23 = "\");";
  protected final String TEXT_24 = NL + "\t\tpaletteContainer.add(";
d44 1
a44 1
  protected final String TEXT_26 = NL + "\t\tpaletteContainer.add(new ";
d46 51
a96 53
  protected final String TEXT_28 = NL + "\t\tpaletteContainer.add(";
  protected final String TEXT_29 = "());";
  protected final String TEXT_30 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_32 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_33 = NL + "\t\tsmallImage = ";
  protected final String TEXT_34 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_35 = "\");" + NL + "\t\t";
  protected final String TEXT_36 = NL + "\t\tsmallImage = ";
  protected final String TEXT_37 = ".getImageDescriptor(";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = "); " + NL + "\t\t";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = NL + "\t\tlargeImage = ";
  protected final String TEXT_42 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_43 = "\");" + NL + "\t\t";
  protected final String TEXT_44 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_45 = NL + "\t\tfinal ";
  protected final String TEXT_46 = " elementTypes = new ";
  protected final String TEXT_47 = "();";
  protected final String TEXT_48 = NL + "\t\telementTypes.add(";
  protected final String TEXT_49 = ".";
  protected final String TEXT_50 = ");";
  protected final String TEXT_51 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_52 = "\", \"";
  protected final String TEXT_53 = "\", smallImage, largeImage) {" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_54 = "(elementTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_55 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_56 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_57 = NL + "\t\tsmallImage = ";
  protected final String TEXT_58 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_59 = "\");" + NL + "\t\t";
  protected final String TEXT_60 = NL + "\t\tsmallImage = ";
  protected final String TEXT_61 = ".getImageDescriptor(";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "); " + NL + "\t\t";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = NL + "\t\tlargeImage = ";
  protected final String TEXT_66 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_67 = "\");" + NL + "\t\t";
  protected final String TEXT_68 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_69 = NL + "\t\tfinal ";
  protected final String TEXT_70 = " relationshipTypes = new ";
  protected final String TEXT_71 = "();";
  protected final String TEXT_72 = NL + "\t\trelationshipTypes.add(";
  protected final String TEXT_73 = ".";
  protected final String TEXT_74 = ");";
  protected final String TEXT_75 = "\t\t" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_76 = "\", \"";
  protected final String TEXT_77 = "\", smallImage, largeImage) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_78 = "(relationshipTypes);" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_80 = NL;
d101 6
a106 1
    GenDiagram genDiagram = (GenDiagram) argument; Palette palette = genDiagram.getPalette();
d108 1
a108 1
    stringBuffer.append(palette.getPackageName());
d110 1
a110 1
    ImportUtil importManager = new ImportUtil(palette.getPackageName());
d112 1
a112 1
    importManager.markImportLocation(stringBuffer);
a121 4
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_10);
d127 1
a127 1
    stringBuffer.append(TEXT_11);
d129 1
a129 1
    stringBuffer.append(TEXT_12);
d131 1
a131 1
    stringBuffer.append(TEXT_13);
d133 1
a133 1
    stringBuffer.append(TEXT_14);
d135 1
a135 1
    stringBuffer.append(TEXT_15);
d137 1
a137 1
    stringBuffer.append(TEXT_16);
d139 1
a139 1
    stringBuffer.append(TEXT_17);
d141 1
a141 1
    stringBuffer.append(TEXT_18);
d143 1
a143 1
    stringBuffer.append(TEXT_19);
d145 1
a145 1
    stringBuffer.append(TEXT_20);
d151 1
a151 1
    stringBuffer.append(TEXT_21);
d153 1
a153 1
    stringBuffer.append(TEXT_22);
d155 1
a155 1
    stringBuffer.append(TEXT_23);
d161 1
a161 1
    stringBuffer.append(TEXT_24);
d163 1
a163 1
    stringBuffer.append(TEXT_25);
d170 1
a170 1
    stringBuffer.append(TEXT_26);
d172 1
a172 1
    stringBuffer.append(TEXT_27);
d174 1
a174 1
    stringBuffer.append(TEXT_28);
d176 1
a176 1
    stringBuffer.append(TEXT_29);
d178 1
a178 1
    stringBuffer.append(TEXT_30);
d191 1
a191 1
    stringBuffer.append(TEXT_31);
d193 1
a193 1
    stringBuffer.append(TEXT_32);
d195 1
a195 1
    stringBuffer.append(TEXT_33);
d197 1
a197 1
    stringBuffer.append(TEXT_34);
d199 1
a199 1
    stringBuffer.append(TEXT_35);
d201 1
a201 1
    stringBuffer.append(TEXT_36);
d203 1
a203 1
    stringBuffer.append(TEXT_37);
d205 1
a205 1
    stringBuffer.append(TEXT_38);
d207 1
a207 1
    stringBuffer.append(TEXT_39);
d209 1
a209 1
    stringBuffer.append(TEXT_40);
d211 1
a211 1
    stringBuffer.append(TEXT_41);
d213 1
a213 1
    stringBuffer.append(TEXT_42);
d215 1
a215 1
    stringBuffer.append(TEXT_43);
d217 1
a217 1
    stringBuffer.append(TEXT_44);
d219 1
a219 1
    stringBuffer.append(TEXT_45);
d221 1
a221 1
    stringBuffer.append(TEXT_46);
d223 1
a223 1
    stringBuffer.append(TEXT_47);
d228 1
a228 1
    stringBuffer.append(TEXT_48);
d230 1
a230 1
    stringBuffer.append(TEXT_49);
d232 1
a232 1
    stringBuffer.append(TEXT_50);
d236 1
a236 1
    stringBuffer.append(TEXT_51);
d238 1
a238 1
    stringBuffer.append(TEXT_52);
d240 1
a240 1
    stringBuffer.append(TEXT_53);
d242 1
a242 1
    stringBuffer.append(TEXT_54);
d251 1
a251 1
    stringBuffer.append(TEXT_55);
d253 1
a253 1
    stringBuffer.append(TEXT_56);
d255 1
a255 1
    stringBuffer.append(TEXT_57);
d257 1
a257 1
    stringBuffer.append(TEXT_58);
d259 1
a259 1
    stringBuffer.append(TEXT_59);
d261 1
a261 1
    stringBuffer.append(TEXT_60);
d263 1
a263 1
    stringBuffer.append(TEXT_61);
d265 1
a265 1
    stringBuffer.append(TEXT_62);
d267 1
a267 1
    stringBuffer.append(TEXT_63);
d269 1
a269 1
    stringBuffer.append(TEXT_64);
d271 1
a271 1
    stringBuffer.append(TEXT_65);
d273 1
a273 1
    stringBuffer.append(TEXT_66);
d275 1
a275 1
    stringBuffer.append(TEXT_67);
d277 1
a277 1
    stringBuffer.append(TEXT_68);
d279 1
a279 1
    stringBuffer.append(TEXT_69);
d281 1
a281 1
    stringBuffer.append(TEXT_70);
d283 1
a283 1
    stringBuffer.append(TEXT_71);
d288 1
a288 1
    stringBuffer.append(TEXT_72);
d290 1
a290 1
    stringBuffer.append(TEXT_73);
d292 1
a292 1
    stringBuffer.append(TEXT_74);
d296 1
a296 1
    stringBuffer.append(TEXT_75);
d298 1
a298 1
    stringBuffer.append(TEXT_76);
d300 1
a300 1
    stringBuffer.append(TEXT_77);
d302 1
a302 1
    stringBuffer.append(TEXT_78);
d307 1
a307 1
    stringBuffer.append(TEXT_79);
d309 1
a309 1
    stringBuffer.append(TEXT_80);
@


1.18
log
@ImportManager moved to oeg.common
@
text
@d183 1
a183 1
final String importedPluginClassName = importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName());
@


1.17
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.*;
@


1.16
log
@#121888
One toolbar tool can create several elements.
@
text
@d183 1
a183 1
final String importedPluginClassName = importManager.getImportedName(genDiagram.getPluginQualifiedClassName());
@


1.15
log
@#120553
- Adding accessors for the palette entries factory methods into genmodel
- Refreshing unit-tests
- Fixing some old problems found by this refreshment.
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
d63 36
a98 27
  protected final String TEXT_45 = NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_46 = "\", \"";
  protected final String TEXT_47 = "\", smallImage, largeImage) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(";
  protected final String TEXT_48 = ".";
  protected final String TEXT_49 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry ";
  protected final String TEXT_51 = "() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
  protected final String TEXT_52 = NL + "\t\tsmallImage = ";
  protected final String TEXT_53 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_54 = "\");" + NL + "\t\t";
  protected final String TEXT_55 = NL + "\t\tsmallImage = ";
  protected final String TEXT_56 = ".getImageDescriptor(";
  protected final String TEXT_57 = ".";
  protected final String TEXT_58 = "); " + NL + "\t\t";
  protected final String TEXT_59 = NL + "\t\t";
  protected final String TEXT_60 = NL + "\t\tlargeImage = ";
  protected final String TEXT_61 = ".getBundledImageDescriptor(\"";
  protected final String TEXT_62 = "\");" + NL + "\t\t";
  protected final String TEXT_63 = NL + "\t\tlargeImage = smallImage;" + NL + "\t\t";
  protected final String TEXT_64 = NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_65 = "\", \"";
  protected final String TEXT_66 = "\", smallImage, largeImage) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_67 = "(";
  protected final String TEXT_68 = ".";
  protected final String TEXT_69 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "}";
  protected final String TEXT_71 = NL;
d189 2
a190 1
		GenNode genNode = nodeCreationTool.getGenNode(); 
d207 1
a207 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d221 1
a221 1
    stringBuffer.append(nodeCreationTool.getTitleKey());
d223 1
a223 1
    stringBuffer.append(nodeCreationTool.getDescriptionKey());
d225 5
a230 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(genNode.getUniqueIdentifier());
d232 12
a247 1
		final String connToolClassName = importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool");
d249 2
a250 1
		GenLink genLink = linkCreationTool.getGenLink();
d252 1
a252 1
    stringBuffer.append(TEXT_50);
d254 1
a254 1
    stringBuffer.append(TEXT_51);
d256 1
a256 1
    stringBuffer.append(TEXT_52);
d258 1
a258 1
    stringBuffer.append(TEXT_53);
d260 1
a260 1
    stringBuffer.append(TEXT_54);
d262 1
a262 1
    stringBuffer.append(TEXT_55);
d264 1
a264 1
    stringBuffer.append(TEXT_56);
a265 10
    stringBuffer.append(TEXT_57);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_58);
    }
    stringBuffer.append(TEXT_59);
    if (linkCreationTool.getLargeIconPath() != null) {
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importedPluginClassName);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(linkCreationTool.getLargeIconPath());
d267 1
a267 1
    } else {
d271 1
a271 1
    stringBuffer.append(linkCreationTool.getTitleKey());
d273 1
a273 1
    stringBuffer.append(linkCreationTool.getDescriptionKey());
d275 1
a275 1
    stringBuffer.append(connToolClassName);
d277 1
a277 1
    stringBuffer.append(importedElementTypesClassName);
d279 1
a279 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d281 23
d308 1
a308 1
    stringBuffer.append(TEXT_70);
d310 1
a310 1
    stringBuffer.append(TEXT_71);
@


1.14
log
@Removing extra import
@
text
@d29 2
a30 2
  protected final String TEXT_11 = NL + "\t\tpaletteRoot.add(create";
  protected final String TEXT_12 = "Group());";
d39 2
a40 2
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer create";
  protected final String TEXT_22 = "Group() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
d42 2
a43 2
  protected final String TEXT_24 = NL + "\t\tpaletteContainer.add(create";
  protected final String TEXT_25 = "CreationTool());";
d46 2
a47 2
  protected final String TEXT_28 = NL + "\t\tpaletteContainer.add(create";
  protected final String TEXT_29 = "CreationTool());";
d49 2
a50 2
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry create";
  protected final String TEXT_32 = "CreationTool() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
d68 2
a69 2
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry create";
  protected final String TEXT_51 = "CreationTool() {" + NL + "\t\tImageDescriptor smallImage;" + NL + "\t\tImageDescriptor largeImage;" + NL + "\t\t";
d120 1
a120 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(toolGroup));
d144 1
a144 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(toolGroup));
d154 1
a154 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(nodeCreationTool));
d167 1
a167 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(linkCreationTool));
d183 1
a183 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(nodeCreationTool));
d228 1
a228 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(linkCreationTool));
@


1.13
log
@#117731 icons defined has no effect in the generated code
@
text
@a221 1
	final String connToolClassName = importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool");
d223 1
@


1.12
log
@Correcting imports
@
text
@d50 6
a55 6
  protected final String TEXT_32 = "CreationTool() {" + NL + "\t\tImageDescriptor image = ";
  protected final String TEXT_33 = ".getImageDescriptor(" + NL + "\t\t\t";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = ");" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_36 = "\", \"";
  protected final String TEXT_37 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(";
d57 9
a65 9
  protected final String TEXT_39 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_40 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry create";
  protected final String TEXT_41 = "CreationTool() {" + NL + "\t\tImageDescriptor image = ";
  protected final String TEXT_42 = ".getImageDescriptor(" + NL + "\t\t\t";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = ");" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_45 = "\", \"";
  protected final String TEXT_46 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ";
  protected final String TEXT_47 = "(";
d68 22
a89 2
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "}";
  protected final String TEXT_51 = NL;
d173 2
d185 1
a185 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d187 1
a187 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d189 1
a189 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d191 1
a191 1
    stringBuffer.append(nodeCreationTool.getTitleKey());
d193 1
a193 1
    stringBuffer.append(nodeCreationTool.getDescriptionKey());
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d199 20
d222 1
d227 1
a227 1
    stringBuffer.append(TEXT_40);
d229 13
a241 5
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_43);
d243 13
a255 1
    stringBuffer.append(TEXT_44);
d257 1
a257 1
    stringBuffer.append(TEXT_45);
d259 5
a263 5
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_48);
d265 1
a265 1
    stringBuffer.append(TEXT_49);
d270 1
a270 1
    stringBuffer.append(TEXT_50);
d272 1
a272 1
    stringBuffer.append(TEXT_51);
@


1.11
log
@#117857 Generate palette factory that may contribute to existing palette model
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PaletteSeparator;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
d44 26
a69 24
  protected final String TEXT_26 = NL + "\t\tpaletteContainer.add(new PaletteSeparator());";
  protected final String TEXT_27 = NL + "\t\tpaletteContainer.add(create";
  protected final String TEXT_28 = "CreationTool());";
  protected final String TEXT_29 = NL + "\t\treturn paletteContainer;" + NL + "\t}";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry create";
  protected final String TEXT_31 = "CreationTool() {" + NL + "\t\tImageDescriptor image = ";
  protected final String TEXT_32 = ".getImageDescriptor(" + NL + "\t\t\t";
  protected final String TEXT_33 = ".";
  protected final String TEXT_34 = ");" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_35 = "\", \"";
  protected final String TEXT_36 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(";
  protected final String TEXT_37 = ".";
  protected final String TEXT_38 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ToolEntry create";
  protected final String TEXT_40 = "CreationTool() {" + NL + "\t\tImageDescriptor image = ";
  protected final String TEXT_41 = ".getImageDescriptor(" + NL + "\t\t\t";
  protected final String TEXT_42 = ".";
  protected final String TEXT_43 = ");" + NL + "\t\treturn new ToolEntry(\"";
  protected final String TEXT_44 = "\", \"";
  protected final String TEXT_45 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectionCreationTool(";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}";
  protected final String TEXT_48 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "}";
  protected final String TEXT_49 = NL;
d143 2
d146 1
a146 1
    stringBuffer.append(TEXT_27);
d148 1
a148 1
    stringBuffer.append(TEXT_28);
d150 1
a150 1
    stringBuffer.append(TEXT_29);
d160 1
a160 1
    stringBuffer.append(TEXT_30);
a161 2
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d165 2
d168 1
a168 1
    stringBuffer.append(TEXT_34);
d170 1
a170 1
    stringBuffer.append(TEXT_35);
d172 1
a172 1
    stringBuffer.append(TEXT_36);
d174 1
a174 1
    stringBuffer.append(TEXT_37);
d176 1
a176 1
    stringBuffer.append(TEXT_38);
d184 1
a184 1
    stringBuffer.append(TEXT_39);
a185 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d189 2
d192 1
a192 1
    stringBuffer.append(TEXT_43);
d194 1
a194 1
    stringBuffer.append(TEXT_44);
d196 3
a198 1
    stringBuffer.append(TEXT_45);
d200 1
a200 1
    stringBuffer.append(TEXT_46);
d202 1
a202 1
    stringBuffer.append(TEXT_47);
d207 1
a207 1
    stringBuffer.append(TEXT_48);
d209 1
a209 1
    stringBuffer.append(TEXT_49);
@


1.10
log
@#116031 avoid hardcoded class names in templates
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.editparts.ZoomManager;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PaletteSeparator;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gef.ui.actions.ZoomInAction;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;";
d23 2
a24 2
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final PaletteRoot root = new PaletteRoot();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final Diagram diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = "(Diagram diagram) {" + NL + "\t\tthis.diagram = diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static PaletteRoot createPalette(Diagram diagram) {" + NL + "\t\t";
d26 42
a67 35
  protected final String TEXT_8 = "(diagram);" + NL + "\t\tfactory.createCommonTools();";
  protected final String TEXT_9 = NL + "\t\tfactory.create";
  protected final String TEXT_10 = "Group();";
  protected final String TEXT_11 = NL + "\t\treturn factory.root;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Diagram getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createCommonTools() {" + NL + "\t\tPaletteGroup common = new PaletteGroup(\"Common\");" + NL + "\t\tToolEntry selectionTool = new PanningSelectionToolEntry();" + NL + "\t\tcommon.add(selectionTool);" + NL + "\t\tcommon.add(new MarqueeToolEntry());";
  protected final String TEXT_12 = NL + "\t\tcommon.add(new ToolEntry(\"Zoom\", null, getZoomToolImage(), getZoomToolImage(), ZoomTool.class) {});";
  protected final String TEXT_13 = NL + "\t\troot.add(common);" + NL + "\t\troot.setDefaultEntry(selectionTool);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getZoomToolImage() {" + NL + "\t\tZoomInAction action = new ZoomInAction(new ZoomManager(null, null));" + NL + "\t\treturn action.getImageDescriptor();" + NL + "\t}";
  protected final String TEXT_14 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_15 = "Group() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_16 = "\");";
  protected final String TEXT_17 = NL + "\t\tcreate";
  protected final String TEXT_18 = "CreationTool(paletteContainer);";
  protected final String TEXT_19 = NL + "\t\tpaletteContainer.add(new PaletteSeparator());";
  protected final String TEXT_20 = NL + "\t\tcreate";
  protected final String TEXT_21 = "CreationTool(paletteContainer);";
  protected final String TEXT_22 = NL + "\t\troot.add(paletteContainer);" + NL + "\t}";
  protected final String TEXT_23 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_24 = "CreationTool(PaletteContainer paletteContainer) {" + NL + "\t\tImageDescriptor image = ";
  protected final String TEXT_25 = ".getImageDescriptor(" + NL + "\t\t\t";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_28 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_29 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_32 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_33 = "CreationTool(PaletteContainer paletteContainer) {" + NL + "\t\tImageDescriptor image = ";
  protected final String TEXT_34 = ".getImageDescriptor(" + NL + "\t\t\t";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_37 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_38 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectionCreationTool(";
  protected final String TEXT_39 = ".";
  protected final String TEXT_40 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "}";
  protected final String TEXT_42 = NL;
d88 4
d97 1
a97 1
    stringBuffer.append(TEXT_9);
d99 1
a99 1
    stringBuffer.append(TEXT_10);
d101 1
a101 1
    stringBuffer.append(TEXT_11);
d103 3
a105 1
    stringBuffer.append(TEXT_12);
d107 9
a115 1
    stringBuffer.append(TEXT_13);
d117 1
d121 1
a121 1
    stringBuffer.append(TEXT_14);
d123 1
a123 1
    stringBuffer.append(TEXT_15);
d125 1
a125 1
    stringBuffer.append(TEXT_16);
d131 1
a131 1
    stringBuffer.append(TEXT_17);
d133 1
a133 1
    stringBuffer.append(TEXT_18);
d140 1
a140 1
    stringBuffer.append(TEXT_19);
d142 1
a142 1
    stringBuffer.append(TEXT_20);
d144 1
a144 1
    stringBuffer.append(TEXT_21);
d146 1
a146 1
    stringBuffer.append(TEXT_22);
d156 1
a156 1
    stringBuffer.append(TEXT_23);
d158 1
a158 1
    stringBuffer.append(TEXT_24);
d160 1
a160 1
    stringBuffer.append(TEXT_25);
d162 1
a162 1
    stringBuffer.append(TEXT_26);
d164 1
a164 1
    stringBuffer.append(TEXT_27);
d166 1
a166 1
    stringBuffer.append(TEXT_28);
d168 1
a168 1
    stringBuffer.append(TEXT_29);
d170 1
a170 1
    stringBuffer.append(TEXT_30);
d172 1
a172 1
    stringBuffer.append(TEXT_31);
d180 1
a180 1
    stringBuffer.append(TEXT_32);
d182 1
a182 1
    stringBuffer.append(TEXT_33);
d184 1
a184 1
    stringBuffer.append(TEXT_34);
d186 1
a186 1
    stringBuffer.append(TEXT_35);
d188 1
a188 1
    stringBuffer.append(TEXT_36);
d190 1
a190 1
    stringBuffer.append(TEXT_37);
d192 1
a192 1
    stringBuffer.append(TEXT_38);
d194 1
a194 1
    stringBuffer.append(TEXT_39);
d196 1
a196 1
    stringBuffer.append(TEXT_40);
d201 1
a201 1
    stringBuffer.append(TEXT_41);
d203 1
a203 1
    stringBuffer.append(TEXT_42);
@


1.9
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d21 40
a60 35
  protected final String TEXT_3 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.editparts.ZoomManager;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PaletteSeparator;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gef.ui.actions.ZoomInAction;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectionCreationTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import ";
  protected final String TEXT_4 = ".ElementTypes;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final PaletteRoot root = new PaletteRoot();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final Diagram diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = "(Diagram diagram) {" + NL + "\t\tthis.diagram = diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static PaletteRoot createPalette(Diagram diagram) {" + NL + "\t\t";
  protected final String TEXT_8 = " factory = new ";
  protected final String TEXT_9 = "(diagram);" + NL + "\t\tfactory.createCommonTools();";
  protected final String TEXT_10 = NL + "\t\tfactory.create";
  protected final String TEXT_11 = "Group();";
  protected final String TEXT_12 = NL + "\t\treturn factory.root;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Diagram getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createCommonTools() {" + NL + "\t\tPaletteGroup common = new PaletteGroup(\"Common\");" + NL + "\t\tToolEntry selectionTool = new PanningSelectionToolEntry();" + NL + "\t\tcommon.add(selectionTool);" + NL + "\t\tcommon.add(new MarqueeToolEntry());";
  protected final String TEXT_13 = NL + "\t\tcommon.add(new ToolEntry(\"Zoom\", null, getZoomToolImage(), getZoomToolImage(), ZoomTool.class) {});";
  protected final String TEXT_14 = NL + "\t\troot.add(common);" + NL + "\t\troot.setDefaultEntry(selectionTool);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getZoomToolImage() {" + NL + "\t\tZoomInAction action = new ZoomInAction(new ZoomManager(null, null));" + NL + "\t\treturn action.getImageDescriptor();" + NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_16 = "Group() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_17 = "\");";
  protected final String TEXT_18 = NL + "\t\tcreate";
  protected final String TEXT_19 = "CreationTool(paletteContainer);";
  protected final String TEXT_20 = NL + "\t\tpaletteContainer.add(new PaletteSeparator());";
  protected final String TEXT_21 = NL + "\t\tcreate";
  protected final String TEXT_22 = "CreationTool(paletteContainer);";
  protected final String TEXT_23 = NL + "\t\troot.add(paletteContainer);" + NL + "\t}";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_25 = "CreationTool(PaletteContainer paletteContainer) {" + NL + "\t\tImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.";
  protected final String TEXT_26 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_27 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_28 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(ElementTypes.";
  protected final String TEXT_29 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_31 = "CreationTool(PaletteContainer paletteContainer) {" + NL + "\t\tImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.";
  protected final String TEXT_32 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_33 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_34 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectionCreationTool(ElementTypes.";
  protected final String TEXT_35 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "}";
  protected final String TEXT_37 = NL;
d71 1
a71 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d73 1
a73 1
    importManager.markImportLocation(stringBuffer);
a80 2
    stringBuffer.append(palette.getFactoryClassName());
    stringBuffer.append(TEXT_9);
d86 2
d89 1
a89 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(toolGroup));
d91 2
a93 2
    stringBuffer.append(TEXT_12);
    if (palette.isNeedZoomTools()) {
a94 2
    }
    stringBuffer.append(TEXT_14);
d99 2
d102 1
a102 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(toolGroup));
a103 2
    stringBuffer.append(toolGroup.getTitleKey());
    stringBuffer.append(TEXT_17);
d109 2
a111 2
    stringBuffer.append(AccessUtil.getPaletteEntryId(nodeCreationTool));
    stringBuffer.append(TEXT_19);
d118 2
d121 1
a121 1
    		}
d123 1
a123 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(linkCreationTool));
a124 2
    	}
    stringBuffer.append(TEXT_23);
d134 2
d137 1
a137 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(nodeCreationTool));
d139 2
d142 1
a142 1
    stringBuffer.append(TEXT_26);
d144 1
a144 1
    stringBuffer.append(TEXT_27);
d146 3
a148 1
    stringBuffer.append(TEXT_28);
d150 1
a150 1
    stringBuffer.append(TEXT_29);
d158 1
a158 1
    stringBuffer.append(TEXT_30);
d160 5
a164 1
    stringBuffer.append(TEXT_31);
d166 1
a166 1
    stringBuffer.append(TEXT_32);
d168 1
a168 1
    stringBuffer.append(TEXT_33);
d170 3
a172 1
    stringBuffer.append(TEXT_34);
d174 1
a174 1
    stringBuffer.append(TEXT_35);
d179 1
a179 1
    stringBuffer.append(TEXT_36);
d181 1
a181 1
    stringBuffer.append(TEXT_37);
@


1.8
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.editparts.ZoomManager;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PaletteSeparator;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gef.ui.actions.ZoomInAction;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.tools.ZoomTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectorCreationTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import ";
d52 1
a52 1
  protected final String TEXT_34 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectorCreationTool(ElementTypes.";
@


1.7
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d43 13
a55 21
  protected final String TEXT_25 = "CreationTool(PaletteContainer paletteContainer) {";
  protected final String TEXT_26 = NL + "\t\tImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.";
  protected final String TEXT_27 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_28 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_29 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(ElementTypes.";
  protected final String TEXT_30 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void create";
  protected final String TEXT_32 = "CreationTool(PaletteContainer paletteContainer) {";
  protected final String TEXT_33 = NL + "\t\tImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.";
  protected final String TEXT_34 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_35 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_36 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectorCreationTool(ElementTypes.";
  protected final String TEXT_37 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_38 = NL + "\t\tImageDescriptor image = ElementTypes.getImageDescriptor(ElementTypes.";
  protected final String TEXT_39 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_40 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_41 = "\", image, image) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectorCreationTool(ElementTypes.";
  protected final String TEXT_42 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_43 = NL + "\t}";
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "}";
  protected final String TEXT_45 = NL;
d129 1
d134 1
a134 3
    
		GenNode genNode = nodeCreationTool.getGenNode(); 

d136 1
a136 1
    stringBuffer.append(genNode.getUniqueIdentifier());
d138 1
a138 1
    stringBuffer.append(nodeCreationTool.getTitleKey());
d140 1
a140 1
    stringBuffer.append(nodeCreationTool.getDescriptionKey());
d142 2
a143 3
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_30);
    	}
d147 1
d149 2
d152 1
a152 1
    stringBuffer.append(AccessUtil.getPaletteEntryId(linkCreationTool));
d154 1
a154 5
    
		GenLink genLink = linkCreationTool.getGenLink();
		if (genLink instanceof GenLinkWithClass) {
			GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;

d156 1
a156 1
    stringBuffer.append(genLinkWithClass.getUniqueIdentifier());
d158 1
a158 1
    stringBuffer.append(linkCreationTool.getTitleKey());
a159 4
    stringBuffer.append(linkCreationTool.getDescriptionKey());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(genLinkWithClass.getUniqueIdentifier());
    stringBuffer.append(TEXT_37);
d161 1
a161 15
		} else if (genLink instanceof GenLinkReferenceOnly) {
			GenLinkReferenceOnly genLinkWithRef = (GenLinkReferenceOnly) genLink;

    stringBuffer.append(TEXT_38);
    stringBuffer.append(genLinkWithRef.getUniqueIdentifier());
    stringBuffer.append(TEXT_39);
    stringBuffer.append(linkCreationTool.getTitleKey());
    stringBuffer.append(TEXT_40);
    stringBuffer.append(linkCreationTool.getDescriptionKey());
    stringBuffer.append(TEXT_41);
    stringBuffer.append(genLinkWithRef.getUniqueIdentifier());
    stringBuffer.append(TEXT_42);
    		}
    stringBuffer.append(TEXT_43);
    	}
d164 1
a164 1
    stringBuffer.append(TEXT_44);
d166 1
a166 1
    stringBuffer.append(TEXT_45);
@


1.6
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d3 1
a4 2
import org.eclipse.emf.codegen.ecore.genmodel.*;
import java.util.*;
d44 1
a44 1
  protected final String TEXT_26 = NL + "\t\tImageDescriptor img = getImage(";
d47 1
a47 1
  protected final String TEXT_29 = "\", img, img) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(ElementTypes.";
d51 1
a51 1
  protected final String TEXT_33 = NL + "\t\tImageDescriptor img = getImage(";
d54 1
a54 1
  protected final String TEXT_36 = "\", img, img) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectorCreationTool(ElementTypes.";
d56 1
a56 1
  protected final String TEXT_38 = NL + "\t\tImageDescriptor img = getImage(";
d59 1
a59 1
  protected final String TEXT_41 = "\", img, img) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectorCreationTool(ElementTypes.";
d62 2
a63 3
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object item) {" + NL + "\t\treturn ";
  protected final String TEXT_45 = ".getInstance().getItemImageDescriptor(item);" + NL + "\t}" + NL + "}";
  protected final String TEXT_46 = NL;
a142 2
		GenClass genClass = genNode.getDomainMetaClass();
		String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName()+ "())";
d145 1
a145 1
    stringBuffer.append(domainElementInstanceCreationCode);
a164 2
			GenClass genClass = genLinkWithClass.getDomainMetaClass();
			String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName()+ "())";
d167 1
a167 1
    stringBuffer.append(domainElementInstanceCreationCode);
a177 2
			GenClass genClass = genLinkWithRef.getDomainLinkTargetFeature().getGenClass();
			String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create(" + importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + genClass.getClassifierAccessorName()+ "())";
d180 1
a180 1
    stringBuffer.append(domainElementInstanceCreationCode);
d194 1
a194 1
    stringBuffer.append(genDiagram.getPluginClassName());
a195 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_46);
@


1.5
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d57 9
a65 4
  protected final String TEXT_38 = NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object item) {" + NL + "\t\treturn ";
  protected final String TEXT_40 = ".getInstance().getItemImageDescriptor(item);" + NL + "\t}" + NL + "}";
  protected final String TEXT_41 = NL;
d181 15
d197 1
a197 1
    stringBuffer.append(TEXT_38);
d201 1
a201 1
    stringBuffer.append(TEXT_39);
d203 1
a203 1
    stringBuffer.append(TEXT_40);
d205 1
a205 1
    stringBuffer.append(TEXT_41);
@


1.4
log
@[ashatalin] #111772 EFactory.create(..) instead of XXFactory.createXXClass
@
text
@d150 1
a150 1
    stringBuffer.append(genNode.getDomainMetaClass().getName() + "_" + genNode.getVisualID());
d174 1
a174 1
    stringBuffer.append(genLinkWithClass.getDomainMetaClass().getName() + "_" + genLinkWithClass.getVisualID());
@


1.3
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d141 1
a141 1
		String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
d150 1
a150 1
    stringBuffer.append(genNode.getDomainMetaClass().getName());
d165 1
a165 1
			String domainElementInstanceCreationCode = importManager.getImportedName(genClass.getGenPackage().getQualifiedFactoryInterfaceName()) + ".eINSTANCE.create" + genClass.getName() + "()";
d174 1
a174 1
    stringBuffer.append(genLinkWithClass.getDomainMetaClass().getName());
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.ImportUtil;
d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.AdapterFactory;" + NL + "import org.eclipse.emf.edit.provider.IItemLabelProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.ExtendedImageRegistry;" + NL + "import org.eclipse.gef.Tool;" + NL + "import org.eclipse.gef.palette.MarqueeToolEntry;" + NL + "import org.eclipse.gef.palette.PaletteContainer;" + NL + "import org.eclipse.gef.palette.PaletteDrawer;" + NL + "import org.eclipse.gef.palette.PaletteGroup;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gef.palette.PaletteSeparator;" + NL + "import org.eclipse.gef.palette.PanningSelectionToolEntry;" + NL + "import org.eclipse.gef.palette.ToolEntry;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.ConnectorCreationTool;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.CreationTool;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import ";
d25 2
a26 2
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final PaletteRoot root = new PaletteRoot();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final AdapterFactory adapterFactory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final Diagram diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = "(AdapterFactory adapterFactory, Diagram diagram) {" + NL + "\t\tthis.adapterFactory = adapterFactory;" + NL + "\t\tthis.diagram = diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static PaletteRoot createPalette(AdapterFactory adapterFactory, Diagram diagram) {" + NL + "\t\t";
d28 33
a60 30
  protected final String TEXT_9 = "(adapterFactory, diagram);" + NL + "\t\tfactory.setupCommonTools();";
  protected final String TEXT_10 = NL + "\t\tfactory.createToolGroup";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t\treturn factory.root;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Diagram getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setupCommonTools() {" + NL + "\t\tPaletteGroup common = new PaletteGroup(\"Common\");" + NL + "" + NL + "\t\tToolEntry selectionTool = new PanningSelectionToolEntry();" + NL + "\t\tcommon.add(selectionTool);" + NL + "\t\tcommon.add(new MarqueeToolEntry());" + NL + "" + NL + "\t\troot.setDefaultEntry(selectionTool);" + NL + "" + NL + "\t\troot.add(common);" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createToolGroup";
  protected final String TEXT_14 = "() {" + NL + "\t\tPaletteContainer paletteContainer = createContainer(\"";
  protected final String TEXT_15 = "\");";
  protected final String TEXT_16 = NL + "\t\tcreateNodeTool";
  protected final String TEXT_17 = "(paletteContainer);";
  protected final String TEXT_18 = NL + "\t\tpaletteContainer.add(new PaletteSeparator());";
  protected final String TEXT_19 = NL + "\t\tcreateLinkTool";
  protected final String TEXT_20 = "(paletteContainer);";
  protected final String TEXT_21 = NL + "\t\troot.add(paletteContainer);" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createNodeTool";
  protected final String TEXT_23 = "(PaletteContainer paletteContainer) {";
  protected final String TEXT_24 = NL + "\t\tImageDescriptor img = getImage(";
  protected final String TEXT_25 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_26 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_27 = "\", img, img) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new CreationTool(ElementTypes.";
  protected final String TEXT_28 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createLinkTool";
  protected final String TEXT_30 = "(PaletteContainer paletteContainer) {";
  protected final String TEXT_31 = NL + "\t\tImageDescriptor img = getImage(";
  protected final String TEXT_32 = ");" + NL + "\t\tpaletteContainer.add(new ToolEntry(\"";
  protected final String TEXT_33 = "\"," + NL + "\t\t\t\"";
  protected final String TEXT_34 = "\", img, img) {" + NL + "" + NL + "\t\t\tpublic Tool createTool() {" + NL + "\t\t\t\tTool tool = new ConnectorCreationTool(ElementTypes.";
  protected final String TEXT_35 = ");" + NL + "\t\t\t\ttool.setProperties(getToolProperties());" + NL + "\t\t\t\treturn tool;" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_36 = NL + "\t}";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PaletteContainer createContainer(String title) {" + NL + "\t\treturn new PaletteDrawer(title);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ImageDescriptor getImage(Object obj) {" + NL + "\t\tIItemLabelProvider labelProvider = (IItemLabelProvider) adapterFactory.adapt(obj, IItemLabelProvider.class);" + NL + "\t\tif (labelProvider != null) {" + NL + "\t\t\treturn ExtendedImageRegistry.getInstance().getImageDescriptor(labelProvider.getImage(obj));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_38 = NL;
d83 5
a87 1
    for (int toolGroupIndex = 0; toolGroupIndex < palette.getGroups().size(); toolGroupIndex++) {
d89 1
a89 1
    stringBuffer.append(toolGroupIndex);
d93 4
d98 2
a99 5
int nodeToolIndex = 0;
int linkToolIndex = 0;
List toolGroups = palette.getGroups();
for (int toolGroupIndex = 0; toolGroupIndex < toolGroups.size(); toolGroupIndex++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(toolGroupIndex);
a100 4
    stringBuffer.append(TEXT_13);
    stringBuffer.append(toolGroupIndex);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(toolGroup.getTitleKey());
d102 1
a102 1
    	for (int i = toolGroup.getNodeTools().size(); i > 0; i--, nodeToolIndex++) {
d104 1
a104 1
    stringBuffer.append(nodeToolIndex);
d106 5
a110 1
    	}
d112 1
a112 1
    	for (int i = toolGroup.getLinkTools().size(); i > 0; i--, linkToolIndex++) {
d114 6
a119 1
    stringBuffer.append(linkToolIndex);
d121 4
d126 1
a126 1
    stringBuffer.append(TEXT_21);
d129 5
a133 8
// Move on and create methods called from createToolGroup 
nodeToolIndex = 0;
linkToolIndex = 0;
for (int toolGroupIndex = 0; toolGroupIndex < toolGroups.size(); toolGroupIndex++) {
	ToolGroup toolGroup = (ToolGroup) toolGroups.get(toolGroupIndex);
	List nodeEntries = toolGroup.getNodeTools();
	for (int i = 0; i < nodeEntries.size(); i++, nodeToolIndex++) {
		NodeEntry nodeEntry = (NodeEntry) nodeEntries.get(i);
d135 3
a137 3
    stringBuffer.append(TEXT_22);
    stringBuffer.append(nodeToolIndex);
    stringBuffer.append(TEXT_23);
d139 1
a139 1
		GenNode genNode = nodeEntry.getGenNode(); 
d143 1
a143 1
    stringBuffer.append(TEXT_24);
a144 4
    stringBuffer.append(TEXT_25);
    stringBuffer.append(nodeEntry.getTitleKey());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(nodeEntry.getDescriptionKey());
d146 4
d151 1
a151 1
    stringBuffer.append(TEXT_28);
d153 3
a155 3
	List linkEntries = toolGroup.getLinkTools();
	for (int i = 0; i < linkEntries.size(); i++, linkToolIndex++) {
		LinkEntry linkEntry = (LinkEntry) linkEntries.get(i);
d157 3
a159 3
    stringBuffer.append(TEXT_29);
    stringBuffer.append(linkToolIndex);
    stringBuffer.append(TEXT_30);
d161 1
a161 1
		GenLink genLink = linkEntry.getGenLink();
d167 1
a167 1
    stringBuffer.append(TEXT_31);
a168 4
    stringBuffer.append(TEXT_32);
    stringBuffer.append(linkEntry.getTitleKey());
    stringBuffer.append(TEXT_33);
    stringBuffer.append(linkEntry.getDescriptionKey());
d170 4
d175 1
a175 1
    stringBuffer.append(TEXT_35);
d177 1
a177 1
    stringBuffer.append(TEXT_36);
d181 3
a183 1
    stringBuffer.append(TEXT_37);
d185 1
a185 1
    stringBuffer.append(TEXT_38);
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@a3 1
import org.eclipse.emf.ecore.EClass;
d126 1
a126 1
		GenClass genClass = genDiagram.findGenClass(genNode.getDomainMetaClass());
d150 1
a150 1
			GenClass genClass = genDiagram.findGenClass(genLinkWithClass.getDomainMetaClass());
@

