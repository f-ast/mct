head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070202-0200:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1
	v20061020-1000:1.1
	v20061013-1330:1.1
	v20060919-0800:1.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060824-1600:1.1
	v20060817-1500:1.1
	v20060728-0500:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2007.06.20.15.50.10;	author dstadnik;	state dead;
branches;
next	1.4;
commitid	3ba446794caf4567;

1.4
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	17ef46643bcf4567;

1.3
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.2;
commitid	7de14650454a4567;

1.2
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	78b462dc68e4567;

1.1
date	2006.06.08.14.32.25;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ContributionItemProviderGenerator
{
  protected static String nl;
  public static synchronized ContributionItemProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ContributionItemProviderGenerator result = new ContributionItemProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_7 = " createAction(String actionId, ";
  protected final String TEXT_8 = " partDescriptor) {" + NL + "\t\tif (actionId.equals(";
  protected final String TEXT_9 = ".ID)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_10 = "(new ";
  protected final String TEXT_11 = "());" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_12 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getContributionItemProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.action.IAction"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.printing.actions.PrintPreviewAction"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.printing.render.actions.RenderedPrintPreviewAction"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.printing.render.actions.EnhancedPrintActionHelper"));
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
    return stringBuffer.toString();
  }
}
@


1.4
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.3
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.2
log
@follow consisted spacing policy
@
text
@d18 12
a29 13
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_8 = " createAction(String actionId, ";
  protected final String TEXT_9 = " partDescriptor) {" + NL + "\t\tif (actionId.equals(";
  protected final String TEXT_10 = ".ID)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_11 = "(new ";
  protected final String TEXT_12 = "());" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_13 = NL;
a37 1
    stringBuffer.append(TEXT_1);
d42 2
a44 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d47 2
d50 1
a50 1
    importManager.markImportLocation(stringBuffer);
d52 1
a52 1
    stringBuffer.append(genDiagram.getContributionItemProviderClassName());
d54 1
a54 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider"));
d56 1
a56 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.action.IAction"));
d58 1
a58 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
d60 1
a60 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.printing.actions.PrintPreviewAction"));
d62 1
a62 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.printing.render.actions.RenderedPrintPreviewAction"));
d64 1
a64 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.printing.render.actions.EnhancedPrintActionHelper"));
a65 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_13);
@


1.1
log
@#126249 Generate PrintPreview action for the diagram
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d45 1
a45 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@

