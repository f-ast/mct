head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.8
	v20061214-0000:1.8
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.12.28.19.45.51;	author ashatalin;	state dead;
branches;
next	1.9;
commitid	13f545941eec4567;

1.9
date	2006.12.19.14.40.47;	author ashatalin;	state Exp;
branches;
next	1.8;
commitid	46a04587f9ee4567;

1.8
date	2006.11.08.14.06.28;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.11.07.20.04.26;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.11.02.14.12.22;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.01.18.57.09;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.03.16.47.41;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.13.21.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.10
log
@NavigatorContentProvider template reimplemented on xpand
@
text
@package org.eclipse.gmf.codegen.templates.navigator;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;
import org.eclipse.emf.codegen.util.*;
import org.eclipse.gmf.codegen.util.*;

public class NavigatorContentProviderGenerator
{
  protected static String nl;
  public static synchronized NavigatorContentProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NavigatorContentProviderGenerator result = new NavigatorContentProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final Object[] EMPTY_ARRAY = new Object[0];" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public void dispose() {" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public void inputChanged(";
  protected final String TEXT_8 = " viewer, Object oldInput, Object newInput) {" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\treturn getChildren(inputElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object[] getChildren(Object parentElement) {" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_9 = ") {" + NL + "\t    \t";
  protected final String TEXT_10 = " file = (";
  protected final String TEXT_11 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_12 = " editingDomain = (";
  protected final String TEXT_13 = ") ";
  protected final String TEXT_14 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\teditingDomain.setResourceToReadOnlyMap(new ";
  protected final String TEXT_15 = "() {" + NL + "\t\t\t\tpublic Object get(Object key) {" + NL + "\t\t\t\t\tif (!containsKey(key)) {" + NL + "\t\t\t\t\t\tput(key, Boolean.TRUE);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.get(key);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\t";
  protected final String TEXT_16 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_17 = " fileURI = ";
  protected final String TEXT_18 = ".createPlatformResourceURI(file.getFullPath().toString(), true);" + NL + "\t\t\t";
  protected final String TEXT_19 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_20 = " result = new ";
  protected final String TEXT_21 = "();";
  protected final String TEXT_22 = NL + "\t\t\t";
  protected final String TEXT_23 = " ";
  protected final String TEXT_24 = " = new ";
  protected final String TEXT_25 = "(\"";
  protected final String TEXT_26 = "\", \"";
  protected final String TEXT_27 = "\", file);";
  protected final String TEXT_28 = NL + "\t\t\t";
  protected final String TEXT_29 = ".addChildren(";
  protected final String TEXT_30 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_31 = "createNavigatorItems(selectViewsByType(resource.getContents(), ";
  protected final String TEXT_32 = ".MODEL_ID";
  protected final String TEXT_33 = ".getType(";
  protected final String TEXT_34 = ".VISUAL_ID)";
  protected final String TEXT_35 = "), ";
  protected final String TEXT_36 = "));";
  protected final String TEXT_37 = NL + "\t\t\tif (!";
  protected final String TEXT_38 = ".isEmpty()) {";
  protected final String TEXT_39 = NL + "\t\t\tresult.add(";
  protected final String TEXT_40 = ");";
  protected final String TEXT_41 = NL + "\t\t\t}";
  protected final String TEXT_42 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_43 = ") {" + NL + "\t\t\t";
  protected final String TEXT_44 = " group = (";
  protected final String TEXT_45 = ") parentElement;" + NL + "\t\t\treturn group.getChildren();" + NL + "\t\t} " + NL + "" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_46 = ") {" + NL + "\t\t\t";
  protected final String TEXT_47 = " navigatorItem = (";
  protected final String TEXT_48 = ") parentElement;" + NL + "    \t\tif (navigatorItem.isLeaf() || !isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn EMPTY_ARRAY;" + NL + "    \t\t}" + NL + "    \t\treturn getViewChildren(navigatorItem.getView(), parentElement);" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_49 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_50 = ") {" + NL + "\t\t\t";
  protected final String TEXT_51 = " view = (";
  protected final String TEXT_52 = ") ((";
  protected final String TEXT_53 = ") parentElement).getAdapter(";
  protected final String TEXT_54 = ".class);" + NL + "\t\t\tif (view != null) {" + NL + "\t\t\t\treturn getViewChildren(view, parentElement);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_55 = NL + NL + "\t\treturn EMPTY_ARRAY;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    private Object[] getViewChildren(";
  protected final String TEXT_56 = " view, Object parentElement) {" + NL + "\t\tswitch (";
  protected final String TEXT_57 = ".getVisualID(view)) {";
  protected final String TEXT_58 = NL + "\t\tcase ";
  protected final String TEXT_59 = ".VISUAL_ID: {" + NL + "\t\t\t";
  protected final String TEXT_60 = " result = new ";
  protected final String TEXT_61 = "();";
  protected final String TEXT_62 = NL + "\t\t\tresult.addAll(getForeignShortcuts((";
  protected final String TEXT_63 = ") view, parentElement));";
  protected final String TEXT_64 = NL + "\t\t\t";
  protected final String TEXT_65 = " ";
  protected final String TEXT_66 = " = new ";
  protected final String TEXT_67 = "(\"";
  protected final String TEXT_68 = "\", \"";
  protected final String TEXT_69 = "\", parentElement);";
  protected final String TEXT_70 = NL + "\t\t\t";
  protected final String TEXT_71 = ".addChildren(";
  protected final String TEXT_72 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = "(";
  protected final String TEXT_75 = ") ";
  protected final String TEXT_76 = "view, ";
  protected final String TEXT_77 = "));";
  protected final String TEXT_78 = NL + "\t\t\tif (!";
  protected final String TEXT_79 = ".isEmpty()) {";
  protected final String TEXT_80 = NL + "\t\t\tresult.add(";
  protected final String TEXT_81 = ");";
  protected final String TEXT_82 = NL + "\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}";
  protected final String TEXT_84 = NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_85 = ") {" + NL + "    \t\t";
  protected final String TEXT_86 = " abstractNavigatorItem = (";
  protected final String TEXT_87 = ") element;" + NL + "\t\t\treturn abstractNavigatorItem.getParent();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_88 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_89 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_90 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_91 = " aMemento) {" + NL + "\t}" + NL;
  protected final String TEXT_92 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_93 = " ";
  protected final String TEXT_94 = "(";
  protected final String TEXT_95 = " ";
  protected final String TEXT_96 = ", Object parent) {" + NL + "\t\t";
  protected final String TEXT_97 = " result = new ";
  protected final String TEXT_98 = "();";
  protected final String TEXT_99 = NL + "\t\t";
  protected final String TEXT_100 = " connectedViews = ";
  protected final String TEXT_101 = NL + "\t\tconnectedViews = ";
  protected final String TEXT_102 = "getLinksTargetByType";
  protected final String TEXT_103 = "getLinksSourceByType";
  protected final String TEXT_104 = "getOutgoingLinksByType";
  protected final String TEXT_105 = "getIncomingLinksByType";
  protected final String TEXT_106 = "getDiagramLinksByType";
  protected final String TEXT_107 = "getChildrenByType";
  protected final String TEXT_108 = "(";
  protected final String TEXT_109 = ".singleton(";
  protected final String TEXT_110 = ")";
  protected final String TEXT_111 = "connectedViews";
  protected final String TEXT_112 = ", ";
  protected final String TEXT_113 = ".getType(";
  protected final String TEXT_114 = ".VISUAL_ID));";
  protected final String TEXT_115 = NL + "\t\tcreateNavigatorItems(connectedViews, parent, result, ";
  protected final String TEXT_116 = "(";
  protected final String TEXT_117 = "));";
  protected final String TEXT_118 = NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean ";
  protected final String TEXT_119 = "(";
  protected final String TEXT_120 = " ";
  protected final String TEXT_121 = ") {" + NL + "\t\treturn ";
  protected final String TEXT_122 = ";" + NL + "\t}";
  protected final String TEXT_123 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_124 = " getLinksSourceByType(";
  protected final String TEXT_125 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_126 = " result = new ";
  protected final String TEXT_127 = "();" + NL + "\t \tfor (";
  protected final String TEXT_128 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_129 = " nextEdge = (";
  protected final String TEXT_130 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_131 = " nextEdgeSource = nextEdge.getSource();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType()) && !isOwnView(nextEdgeSource)) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_132 = " getLinksTargetByType(";
  protected final String TEXT_133 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_134 = " result = new ";
  protected final String TEXT_135 = "();" + NL + "\t \tfor (";
  protected final String TEXT_136 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_137 = " nextEdge = (";
  protected final String TEXT_138 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_139 = " nextEdgeSource = nextEdge.getTarget();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType()) && !isOwnView(nextEdgeSource)) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_140 = " getOutgoingLinksByType(";
  protected final String TEXT_141 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_142 = " result = new ";
  protected final String TEXT_143 = "();" + NL + "\t \tfor (";
  protected final String TEXT_144 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_145 = " nextNode = (";
  protected final String TEXT_146 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getSourceEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_147 = " getIncomingLinksByType(";
  protected final String TEXT_148 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_149 = " result = new ";
  protected final String TEXT_150 = "();" + NL + "\t \tfor (";
  protected final String TEXT_151 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_152 = " nextNode = (";
  protected final String TEXT_153 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getTargetEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_154 = " getChildrenByType(";
  protected final String TEXT_155 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_156 = " result = new ";
  protected final String TEXT_157 = "();" + NL + "\t \tfor (";
  protected final String TEXT_158 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_159 = " nextNode = (";
  protected final String TEXT_160 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getChildren(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_161 = " getDiagramLinksByType(";
  protected final String TEXT_162 = " diagrams, String type) {" + NL + "\t\t";
  protected final String TEXT_163 = " result = new ";
  protected final String TEXT_164 = "();" + NL + "\t \tfor (";
  protected final String TEXT_165 = " it = diagrams.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_166 = " nextDiagram = (";
  protected final String TEXT_167 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextDiagram.getEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_168 = " selectViewsByType(";
  protected final String TEXT_169 = " views, String type) {" + NL + "\t\t";
  protected final String TEXT_170 = " result = new ";
  protected final String TEXT_171 = "();" + NL + "\t\tfor (";
  protected final String TEXT_172 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_173 = " nextView = (";
  protected final String TEXT_174 = ") it.next();" + NL + "\t\t\tif (type.equals(nextView.getType()) && isOwnView(nextView)) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_175 = " createNavigatorItems(";
  protected final String TEXT_176 = " views, Object parent) {" + NL + "\t\t";
  protected final String TEXT_177 = " result = new ";
  protected final String TEXT_178 = "();" + NL + "\t\tcreateNavigatorItems(views, parent, result, false);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createNavigatorItems(";
  protected final String TEXT_179 = " views, Object parent, ";
  protected final String TEXT_180 = " result, boolean isLeafs) {" + NL + "\t\tfor (";
  protected final String TEXT_181 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_182 = "((";
  protected final String TEXT_183 = ") it.next(), parent, isLeafs));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_184 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_185 = ".MODEL_ID.equals(";
  protected final String TEXT_186 = ".getModelID(view));" + NL + "\t}" + NL + "\t";
  protected final String TEXT_187 = "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_188 = " getForeignShortcuts(";
  protected final String TEXT_189 = " diagram, Object parent) {" + NL + "\t\t";
  protected final String TEXT_190 = " result = new ";
  protected final String TEXT_191 = "();" + NL + "\t\tfor (";
  protected final String TEXT_192 = " it = diagram.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_193 = " nextView = (";
  protected final String TEXT_194 = ") it.next();" + NL + "\t\t\tif (!isOwnView(nextView) && nextView.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createNavigatorItems(result, parent);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_195 = NL + "}";
  protected final String TEXT_196 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genNavigator.getContentProviderClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentProvider"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.Viewer"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_21);
    Map createdDiagramGroups = new TreeMap();
for (Iterator it = genNavigator.getChildReferencesFrom(null).iterator(); it.hasNext();) {
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
	if (nextReference.getReferenceType() != GenNavigatorReferenceType.CHILDREN_LITERAL) {
		continue;
	}
	String parentVariable;
	if (nextReference.isInsideGroup()) {
		parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(parentVariable)) {
			createdDiagramGroups.put(parentVariable, nextReference);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(nextReference.getGroupName());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(nextReference.getGroupIcon());
    stringBuffer.append(TEXT_27);
    		}
    stringBuffer.append(TEXT_28);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_29);
    
	} else {
		parentVariable = "file";
    stringBuffer.append(TEXT_30);
    
	}
    stringBuffer.append(TEXT_31);
    
	if (nextReference.getChild() instanceof GenDiagram) {
		
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    
	} else {
		
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    
	}
    stringBuffer.append(TEXT_35);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_36);
    }

for (Iterator it = createdDiagramGroups.keySet().iterator(); it.hasNext();) {
	String groupNameKey = (String) it.next();
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdDiagramGroups.get(groupNameKey);
	if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_37);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_38);
    	}
    stringBuffer.append(TEXT_39);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_40);
    	if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_41);
    	}
}

    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    if (genDiagram.generateShortcutIcon()) {
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_54);
    
}
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    boolean generateGetForeignShortcuts = false;
Map getter2ReferenceMap = new TreeMap();
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesFrom(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_61);
    	if (nextCommonBase instanceof GenDiagram && ((GenDiagram) nextCommonBase).generateCreateShortcutAction()) {
		generateGetForeignShortcuts = true;
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_63);
    	}
	Map createdGroups = new TreeMap();
	for (Iterator it = childReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		String parentVariable;
		if (nextReference.isInsideGroup()) {
			parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(parentVariable)) {
				createdGroups.put(parentVariable, nextReference);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(nextReference.getGroupName());
    stringBuffer.append(TEXT_68);
    stringBuffer.append(nextReference.getGroupIcon());
    stringBuffer.append(TEXT_69);
    			}
    stringBuffer.append(TEXT_70);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_71);
    
		} else {
			parentVariable = "parentElement";
    stringBuffer.append(TEXT_72);
    
		}
		
		String getterNameBase = nextCommonBase.getUniqueIdentifier() + "To" + nextReference.getChild().getUniqueIdentifier();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
			getterNameBase = getterNameBase + "OutTarget";
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			getterNameBase = getterNameBase + "InSource";
		} else { /*nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
			getterNameBase = getterNameBase + "Children";
		}
		String getterName = getterNameBase;
		for (int i = 1; getter2ReferenceMap.containsKey(getterName); i++) {
			getterName = getterNameBase + "_" + i;
		}
		getter2ReferenceMap.put(getterName, nextReference);
		getterName = "get" + getterName;
		
    stringBuffer.append(getterName);
    stringBuffer.append(TEXT_73);
    if (nextCommonBase instanceof GenLink) {
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_75);
    }
    stringBuffer.append(TEXT_76);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_77);
    	}
	
	for (Iterator it = createdGroups.keySet().iterator(); it.hasNext();) {
		String nextGroupKey = (String) it.next();
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdGroups.get(nextGroupKey);
		if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_78);
    stringBuffer.append(nextGroupKey);
    stringBuffer.append(TEXT_79);
    		}
    stringBuffer.append(TEXT_80);
    stringBuffer.append(nextGroupKey);
    stringBuffer.append(TEXT_81);
    		if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_82);
    		}
	}
    stringBuffer.append(TEXT_83);
    }
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_91);
    GenModelGraphAnalyzer graphAnalyzer = new GenModelGraphAnalyzer(genDiagram);
for (Iterator it = getter2ReferenceMap.entrySet().iterator(); it.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) it.next();
	GenNavigatorChildReference childReference = (GenNavigatorChildReference) nextEntry.getValue();
	String methodName = (String) nextEntry.getKey();
	String parameterClassFQName;
	String parameterName;
	if (childReference.getParent() instanceof GenLink) {
		parameterClassFQName = "org.eclipse.gmf.runtime.notation.Edge";
		parameterName = "edge";
	} else {
		parameterClassFQName = "org.eclipse.gmf.runtime.notation.View";
		parameterName = "view";
	}
	List<List<GenCommonBase>> paths = graphAnalyzer.getConnectionPaths(childReference);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append("get" + methodName);
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(parameterClassFQName));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(parameterName);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_98);
    	boolean connectedViewsDeclared = false;
	for (List<GenCommonBase> nextPath : paths) {
		for (int i = 0; i < nextPath.size() - 1; i++) {
			GenCommonBase currentPathSegment = nextPath.get(i);
			GenCommonBase nextPathSegment = nextPath.get(i + 1);
			if (!connectedViewsDeclared) {
				connectedViewsDeclared = true;
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_100);
    
			}else {
    stringBuffer.append(TEXT_101);
    
			}
			if (currentPathSegment instanceof GenLink) {
				if (childReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
					
    stringBuffer.append(TEXT_102);
    
				} else { /*childReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL*/
					
    stringBuffer.append(TEXT_103);
    
				}
			} else {
				if (childReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
					
    stringBuffer.append(TEXT_104);
    
				} else if (childReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
					
    stringBuffer.append(TEXT_105);
    
				} else { /*childReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
					if (currentPathSegment instanceof GenDiagram && nextPathSegment instanceof GenLink) {
						/* References from diagram to links are represented by CHILDREN_LITERAL too */
						
    stringBuffer.append(TEXT_106);
    
					} else {
						
    stringBuffer.append(TEXT_107);
    
					}
				}
			}
    stringBuffer.append(TEXT_108);
    
			if (i == 0) {
				
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(parameterName);
    stringBuffer.append(TEXT_110);
    
			} else {
				
    stringBuffer.append(TEXT_111);
    
			}
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName(nextPathSegment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_114);
    		}
    stringBuffer.append(TEXT_115);
    stringBuffer.append("is" + methodName + "Leaf");
    stringBuffer.append(TEXT_116);
    stringBuffer.append(parameterName);
    stringBuffer.append(TEXT_117);
    	}
    stringBuffer.append(TEXT_118);
    stringBuffer.append("is" + methodName + "Leaf");
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName(parameterClassFQName));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(parameterName);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(childReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL ? "false" : "true");
    stringBuffer.append(TEXT_122);
    }
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_175);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_179);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_186);
    if (generateGetForeignShortcuts) {
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_194);
    }
    stringBuffer.append(TEXT_195);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_196);
    return stringBuffer.toString();
  }
}
@


1.9
log
@HashMap -> TreeMap
@
text
@@


1.8
log
@LinkHelper adopted to work correctly with shortcuts.
@
text
@d273 1
a273 1
    Map createdDiagramGroups = new HashMap();
d374 1
a374 1
Map getter2ReferenceMap = new HashMap();
d394 1
a394 1
	Map createdGroups = new HashMap();
@


1.7
log
@Labels for Shortcutted elements provided.
@
text
@d47 68
a114 68
  protected final String TEXT_27 = "\", ";
  protected final String TEXT_28 = ".MODEL_ID, file);";
  protected final String TEXT_29 = NL + "\t\t\t";
  protected final String TEXT_30 = ".addChildren(";
  protected final String TEXT_31 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_32 = "createNavigatorItems(selectViewsByType(resource.getContents(), ";
  protected final String TEXT_33 = ".MODEL_ID";
  protected final String TEXT_34 = ".getType(";
  protected final String TEXT_35 = ".VISUAL_ID)";
  protected final String TEXT_36 = "), ";
  protected final String TEXT_37 = "));";
  protected final String TEXT_38 = NL + "\t\t\tif (!";
  protected final String TEXT_39 = ".isEmpty()) {";
  protected final String TEXT_40 = NL + "\t\t\tresult.add(";
  protected final String TEXT_41 = ");";
  protected final String TEXT_42 = NL + "\t\t\t}";
  protected final String TEXT_43 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_44 = ") {" + NL + "\t\t\t";
  protected final String TEXT_45 = " group = (";
  protected final String TEXT_46 = ") parentElement;" + NL + "\t\t\treturn group.getChildren();" + NL + "\t\t} " + NL + "" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\t";
  protected final String TEXT_48 = " navigatorItem = (";
  protected final String TEXT_49 = ") parentElement;" + NL + "    \t\tif (navigatorItem.isLeaf() || !isOwnView(navigatorItem.getView())) {" + NL + "    \t\t\treturn EMPTY_ARRAY;" + NL + "    \t\t}" + NL + "    \t\treturn getViewChildren(navigatorItem.getView(), parentElement);" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_50 = NL + "\t\t// Due to plugin.xml content will be called only for \"own\" views" + NL + "\t\tif (parentElement instanceof ";
  protected final String TEXT_51 = ") {" + NL + "\t\t\t";
  protected final String TEXT_52 = " view = (";
  protected final String TEXT_53 = ") ((";
  protected final String TEXT_54 = ") parentElement).getAdapter(";
  protected final String TEXT_55 = ".class);" + NL + "\t\t\tif (view != null) {" + NL + "\t\t\t\treturn getViewChildren(view, parentElement);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_56 = NL + NL + "\t\treturn EMPTY_ARRAY;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    private Object[] getViewChildren(";
  protected final String TEXT_57 = " view, Object parentElement) {" + NL + "\t\tswitch (";
  protected final String TEXT_58 = ".getVisualID(view)) {";
  protected final String TEXT_59 = NL + "\t\tcase ";
  protected final String TEXT_60 = ".VISUAL_ID: {" + NL + "\t\t\t";
  protected final String TEXT_61 = " result = new ";
  protected final String TEXT_62 = "();";
  protected final String TEXT_63 = NL + "\t\t\tresult.addAll(getForeignShortcuts((";
  protected final String TEXT_64 = ") view, parentElement));";
  protected final String TEXT_65 = NL + "\t\t\t";
  protected final String TEXT_66 = " ";
  protected final String TEXT_67 = " = new ";
  protected final String TEXT_68 = "(\"";
  protected final String TEXT_69 = "\", \"";
  protected final String TEXT_70 = "\", ";
  protected final String TEXT_71 = ".MODEL_ID, parentElement);";
  protected final String TEXT_72 = NL + "\t\t\t";
  protected final String TEXT_73 = ".addChildren(";
  protected final String TEXT_74 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = "(";
  protected final String TEXT_77 = ") ";
  protected final String TEXT_78 = "view, ";
  protected final String TEXT_79 = "));";
  protected final String TEXT_80 = NL + "\t\t\tif (!";
  protected final String TEXT_81 = ".isEmpty()) {";
  protected final String TEXT_82 = NL + "\t\t\tresult.add(";
  protected final String TEXT_83 = ");";
  protected final String TEXT_84 = NL + "\t\t\t}";
  protected final String TEXT_85 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}";
  protected final String TEXT_86 = NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_87 = ") {" + NL + "    \t\t";
  protected final String TEXT_88 = " abstractNavigatorItem = (";
  protected final String TEXT_89 = ") element;" + NL + "\t\t\treturn abstractNavigatorItem.getParent();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_90 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_91 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_92 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_93 = " aMemento) {" + NL + "\t}" + NL;
  protected final String TEXT_94 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
d116 101
a216 103
  protected final String TEXT_96 = "(";
  protected final String TEXT_97 = " ";
  protected final String TEXT_98 = ", Object parent) {" + NL + "\t\t";
  protected final String TEXT_99 = " result = new ";
  protected final String TEXT_100 = "();";
  protected final String TEXT_101 = NL + "\t\t";
  protected final String TEXT_102 = " connectedViews = ";
  protected final String TEXT_103 = NL + "\t\tconnectedViews = ";
  protected final String TEXT_104 = "getLinksTargetByType";
  protected final String TEXT_105 = "getLinksSourceByType";
  protected final String TEXT_106 = "getOutgoingLinksByType";
  protected final String TEXT_107 = "getIncomingLinksByType";
  protected final String TEXT_108 = "getDiagramLinksByType";
  protected final String TEXT_109 = "getChildrenByType";
  protected final String TEXT_110 = "(";
  protected final String TEXT_111 = ".singleton(";
  protected final String TEXT_112 = ")";
  protected final String TEXT_113 = "connectedViews";
  protected final String TEXT_114 = ", ";
  protected final String TEXT_115 = ".getType(";
  protected final String TEXT_116 = ".VISUAL_ID));";
  protected final String TEXT_117 = NL + "\t\tcreateNavigatorItems(connectedViews, parent, result, ";
  protected final String TEXT_118 = "(";
  protected final String TEXT_119 = "));";
  protected final String TEXT_120 = NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean ";
  protected final String TEXT_121 = "(";
  protected final String TEXT_122 = " ";
  protected final String TEXT_123 = ") {" + NL + "\t\treturn ";
  protected final String TEXT_124 = ";" + NL + "\t}";
  protected final String TEXT_125 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_126 = " getLinksSourceByType(";
  protected final String TEXT_127 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_128 = " result = new ";
  protected final String TEXT_129 = "();" + NL + "\t \tfor (";
  protected final String TEXT_130 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_131 = " nextEdge = (";
  protected final String TEXT_132 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_133 = " nextEdgeSource = nextEdge.getSource();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType()) && !isOwnView(nextEdgeSource)) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_134 = " getLinksTargetByType(";
  protected final String TEXT_135 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_136 = " result = new ";
  protected final String TEXT_137 = "();" + NL + "\t \tfor (";
  protected final String TEXT_138 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_139 = " nextEdge = (";
  protected final String TEXT_140 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_141 = " nextEdgeSource = nextEdge.getTarget();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType()) && !isOwnView(nextEdgeSource)) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_142 = " getOutgoingLinksByType(";
  protected final String TEXT_143 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_144 = " result = new ";
  protected final String TEXT_145 = "();" + NL + "\t \tfor (";
  protected final String TEXT_146 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_147 = " nextNode = (";
  protected final String TEXT_148 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getSourceEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_149 = " getIncomingLinksByType(";
  protected final String TEXT_150 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_151 = " result = new ";
  protected final String TEXT_152 = "();" + NL + "\t \tfor (";
  protected final String TEXT_153 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_154 = " nextNode = (";
  protected final String TEXT_155 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getTargetEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_156 = " getChildrenByType(";
  protected final String TEXT_157 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_158 = " result = new ";
  protected final String TEXT_159 = "();" + NL + "\t \tfor (";
  protected final String TEXT_160 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_161 = " nextNode = (";
  protected final String TEXT_162 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getChildren(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_163 = " getDiagramLinksByType(";
  protected final String TEXT_164 = " diagrams, String type) {" + NL + "\t\t";
  protected final String TEXT_165 = " result = new ";
  protected final String TEXT_166 = "();" + NL + "\t \tfor (";
  protected final String TEXT_167 = " it = diagrams.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_168 = " nextDiagram = (";
  protected final String TEXT_169 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextDiagram.getEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_170 = " selectViewsByType(";
  protected final String TEXT_171 = " views, String type) {" + NL + "\t\t";
  protected final String TEXT_172 = " result = new ";
  protected final String TEXT_173 = "();" + NL + "\t\tfor (";
  protected final String TEXT_174 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_175 = " nextView = (";
  protected final String TEXT_176 = ") it.next();" + NL + "\t\t\tif (type.equals(nextView.getType()) && isOwnView(nextView)) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_177 = " createNavigatorItems(";
  protected final String TEXT_178 = " views, Object parent) {" + NL + "\t\t";
  protected final String TEXT_179 = " result = new ";
  protected final String TEXT_180 = "();" + NL + "\t\tcreateNavigatorItems(views, parent, result, false);" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createNavigatorItems(";
  protected final String TEXT_181 = " views, Object parent, ";
  protected final String TEXT_182 = " result, boolean isLeafs) {" + NL + "\t\tfor (";
  protected final String TEXT_183 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_184 = "((";
  protected final String TEXT_185 = ") it.next(), parent, isLeafs));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOwnView(";
  protected final String TEXT_186 = " view) {" + NL + "\t\treturn ";
  protected final String TEXT_187 = ".MODEL_ID.equals(";
  protected final String TEXT_188 = ".getModelID(view));" + NL + "\t}" + NL + "\t";
  protected final String TEXT_189 = "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_190 = " getForeignShortcuts(";
  protected final String TEXT_191 = " diagram, Object parent) {" + NL + "\t\t";
  protected final String TEXT_192 = " result = new ";
  protected final String TEXT_193 = "();" + NL + "\t\tfor (";
  protected final String TEXT_194 = " it = diagram.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_195 = " nextView = (";
  protected final String TEXT_196 = ") it.next();" + NL + "\t\t\tif (!isOwnView(nextView) && nextView.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createNavigatorItems(result, parent);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_197 = NL + "}";
  protected final String TEXT_198 = NL;
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d297 1
a297 1
    		}
a298 2
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_30);
d302 1
a302 1
    stringBuffer.append(TEXT_31);
d305 1
a305 1
    stringBuffer.append(TEXT_32);
d310 1
a310 1
    stringBuffer.append(TEXT_33);
d315 2
a317 2
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_35);
d320 2
a322 2
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_37);
d329 2
d332 2
a334 2
    stringBuffer.append(TEXT_39);
    	}
d336 1
a336 1
    stringBuffer.append(groupNameKey);
a337 2
    	if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_42);
d341 2
d348 1
a348 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d356 1
a356 1
    if (genDiagram.generateShortcutIcon()) {
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d362 2
a364 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a365 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_55);
d368 2
d371 1
a371 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a372 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_58);
d381 2
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
d386 1
a386 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a387 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_62);
d390 2
a392 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_64);
d402 2
d405 2
a407 2
    stringBuffer.append(TEXT_66);
    stringBuffer.append(parentVariable);
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d411 1
a411 1
    stringBuffer.append(nextReference.getGroupName());
d413 1
a413 1
    stringBuffer.append(nextReference.getGroupIcon());
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a416 4
    			}
    stringBuffer.append(TEXT_72);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_73);
d420 1
a420 1
    stringBuffer.append(TEXT_74);
d440 1
a440 1
    stringBuffer.append(TEXT_75);
d442 1
a442 1
    stringBuffer.append(TEXT_76);
d444 1
a444 1
    stringBuffer.append(TEXT_77);
d446 1
a446 1
    stringBuffer.append(TEXT_78);
d448 1
a448 1
    stringBuffer.append(TEXT_79);
d455 4
d462 2
d465 1
a465 2
    stringBuffer.append(TEXT_82);
    stringBuffer.append(nextGroupKey);
d467 1
a467 1
    		if (nextReference.isHideIfEmpty()) {
d469 1
a469 2
    		}
	}
d471 1
a471 1
    }
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
a482 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_93);
d498 1
a498 1
    stringBuffer.append(TEXT_94);
d500 1
a500 1
    stringBuffer.append(TEXT_95);
d502 1
a502 1
    stringBuffer.append(TEXT_96);
d504 1
a504 1
    stringBuffer.append(TEXT_97);
d506 1
a506 1
    stringBuffer.append(TEXT_98);
d508 1
a508 1
    stringBuffer.append(TEXT_99);
d510 1
a510 1
    stringBuffer.append(TEXT_100);
d518 1
a518 1
    stringBuffer.append(TEXT_101);
d520 1
a520 1
    stringBuffer.append(TEXT_102);
d523 1
a523 1
    stringBuffer.append(TEXT_103);
d529 1
a529 1
    stringBuffer.append(TEXT_104);
d533 1
a533 1
    stringBuffer.append(TEXT_105);
d539 1
a539 1
    stringBuffer.append(TEXT_106);
d543 1
a543 1
    stringBuffer.append(TEXT_107);
d549 1
a549 1
    stringBuffer.append(TEXT_108);
d553 1
a553 1
    stringBuffer.append(TEXT_109);
d558 1
a558 1
    stringBuffer.append(TEXT_110);
d563 1
a563 1
    stringBuffer.append(TEXT_111);
d565 1
a565 1
    stringBuffer.append(TEXT_112);
d569 1
a569 1
    stringBuffer.append(TEXT_113);
d572 4
d577 1
a577 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName(nextPathSegment.getEditPartQualifiedClassName()));
d581 1
a581 1
    		}
d583 2
a585 2
    stringBuffer.append(TEXT_118);
    stringBuffer.append(parameterName);
d587 1
a587 1
    	}
d589 1
a589 1
    stringBuffer.append("is" + methodName + "Leaf");
d591 1
a591 1
    stringBuffer.append(importManager.getImportedName(parameterClassFQName));
d593 1
a593 1
    stringBuffer.append(parameterName);
d595 1
a595 1
    stringBuffer.append(childReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL ? "false" : "true");
d597 1
a597 1
    }
d601 1
a601 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d603 1
a603 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d607 1
a607 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d617 1
a617 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d619 1
a619 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d621 1
a621 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d623 1
a623 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d625 1
a625 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d629 1
a629 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d633 1
a633 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d639 1
a639 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d651 1
a651 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d677 1
a677 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d681 1
a681 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d683 1
a683 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d689 1
a689 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d691 1
a691 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d693 1
a693 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d695 1
a695 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d697 1
a697 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d699 1
a699 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d707 1
a707 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d709 1
a709 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d711 1
a711 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d713 1
a713 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d715 1
a715 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d717 1
a717 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d719 1
a719 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d721 1
a721 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d723 1
a723 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d725 1
a725 1
    if (generateGetForeignShortcuts) {
d729 1
a729 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d731 1
a731 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d733 1
a733 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d735 1
a735 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d737 1
a737 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d739 1
a739 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a740 4
    }
    stringBuffer.append(TEXT_197);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_198);
@


1.6
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@d216 1
a216 1
  protected final String TEXT_196 = ") it.next();" + NL + "\t\t\tif (!isOwnView(nextView) && nextView.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$)" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createNavigatorItems(result, parent);" + NL + "\t}" + NL + "\t";
@


1.5
log
@Linked elements are leafs by default.
@
text
@d28 57
a84 57
  protected final String TEXT_8 = " viewer, Object oldInput, Object newInput) {" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\treturn getChildren(inputElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object[] getChildren(Object parentElement) {" + NL + "    \tif (parentElement instanceof ";
  protected final String TEXT_9 = ") {" + NL + "    \t\t";
  protected final String TEXT_10 = " abstractNavigatorItem = (";
  protected final String TEXT_11 = ") parentElement;" + NL + "\t\t\tif (!";
  protected final String TEXT_12 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\t\treturn EMPTY_ARRAY;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif (abstractNavigatorItem instanceof ";
  protected final String TEXT_13 = ") {" + NL + "    \t\t\t";
  protected final String TEXT_14 = " navigatorItem = (";
  protected final String TEXT_15 = ") abstractNavigatorItem;" + NL + "    \t\t\tif (navigatorItem.isLeaf()) {" + NL + "    \t\t\t\treturn EMPTY_ARRAY;" + NL + "    \t\t\t}" + NL + "\t\t\t\tswitch (navigatorItem.getVisualID()) {";
  protected final String TEXT_16 = NL + "\t\t\t\tcase ";
  protected final String TEXT_17 = ".VISUAL_ID: {" + NL + "\t\t\t\t\t";
  protected final String TEXT_18 = " result = new ";
  protected final String TEXT_19 = "();";
  protected final String TEXT_20 = NL + "\t\t\t\t\t";
  protected final String TEXT_21 = " ";
  protected final String TEXT_22 = " = new ";
  protected final String TEXT_23 = "(\"";
  protected final String TEXT_24 = "\", \"";
  protected final String TEXT_25 = "\", ";
  protected final String TEXT_26 = ".MODEL_ID, navigatorItem);";
  protected final String TEXT_27 = NL + "\t\t\t\t\t";
  protected final String TEXT_28 = ".addChildren(";
  protected final String TEXT_29 = NL + "\t\t\t\t\tresult.addAll(";
  protected final String TEXT_30 = "(";
  protected final String TEXT_31 = "(";
  protected final String TEXT_32 = ") ";
  protected final String TEXT_33 = "navigatorItem.getView(), ";
  protected final String TEXT_34 = "));";
  protected final String TEXT_35 = NL + "\t\t\t\tif (!";
  protected final String TEXT_36 = ".isEmpty()) {";
  protected final String TEXT_37 = NL + "\t\t\t\tresult.add(";
  protected final String TEXT_38 = ");";
  protected final String TEXT_39 = NL + "\t\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\t\treturn result.toArray();" + NL + "\t\t\t\t}";
  protected final String TEXT_41 = NL + "\t\t\t\t}" + NL + "\t\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_42 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_43 = " group = (";
  protected final String TEXT_44 = ") parentElement;" + NL + "\t\t\t\treturn group.getChildren();" + NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_45 = ") {" + NL + "\t    \t";
  protected final String TEXT_46 = " file = (";
  protected final String TEXT_47 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_48 = " editingDomain = (";
  protected final String TEXT_49 = ") ";
  protected final String TEXT_50 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\teditingDomain.setResourceToReadOnlyMap(new ";
  protected final String TEXT_51 = "() {" + NL + "\t\t\t\tpublic Object get(Object key) {" + NL + "\t\t\t\t\tif (!containsKey(key)) {" + NL + "\t\t\t\t\t\tput(key, Boolean.TRUE);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.get(key);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\t";
  protected final String TEXT_52 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_53 = " fileURI = ";
  protected final String TEXT_54 = ".createPlatformResourceURI(file.getFullPath().toString(), true);" + NL + "\t\t\t";
  protected final String TEXT_55 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_56 = " result = new ";
  protected final String TEXT_57 = "();";
  protected final String TEXT_58 = NL + "\t\t\t";
  protected final String TEXT_59 = " ";
  protected final String TEXT_60 = " = new ";
  protected final String TEXT_61 = "(\"";
  protected final String TEXT_62 = "\", \"";
  protected final String TEXT_63 = "\", ";
  protected final String TEXT_64 = ".MODEL_ID, file);";
d86 133
a218 112
  protected final String TEXT_66 = ".addChildren(";
  protected final String TEXT_67 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_68 = "createNavigatorItems(selectViewsByType(resource.getContents(), ";
  protected final String TEXT_69 = ".MODEL_ID";
  protected final String TEXT_70 = ".getType(";
  protected final String TEXT_71 = ".VISUAL_ID)";
  protected final String TEXT_72 = "), ";
  protected final String TEXT_73 = "));";
  protected final String TEXT_74 = NL + "\t\t\tif (!";
  protected final String TEXT_75 = ".isEmpty()) {";
  protected final String TEXT_76 = NL + "\t\t\tresult.add(";
  protected final String TEXT_77 = ");";
  protected final String TEXT_78 = NL + "\t\t\t}";
  protected final String TEXT_79 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_80 = ") {" + NL + "    \t\t";
  protected final String TEXT_81 = " abstractNavigatorItem = (";
  protected final String TEXT_82 = ") element;" + NL + "\t\t\tif (!";
  protected final String TEXT_83 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn abstractNavigatorItem.getParent();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_84 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_85 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_86 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_87 = " aMemento) {" + NL + "\t}" + NL;
  protected final String TEXT_88 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_89 = " ";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = " ";
  protected final String TEXT_92 = ", ";
  protected final String TEXT_93 = " parent) {" + NL + "\t\t";
  protected final String TEXT_94 = " result = new ";
  protected final String TEXT_95 = "();";
  protected final String TEXT_96 = NL + "\t\t";
  protected final String TEXT_97 = " connectedViews = ";
  protected final String TEXT_98 = NL + "\t\tconnectedViews = ";
  protected final String TEXT_99 = "getLinksTargetByType";
  protected final String TEXT_100 = "getLinksSourceByType";
  protected final String TEXT_101 = "getOutgoingLinksByType";
  protected final String TEXT_102 = "getIncomingLinksByType";
  protected final String TEXT_103 = "getChildrenByType";
  protected final String TEXT_104 = "(";
  protected final String TEXT_105 = ".singleton(";
  protected final String TEXT_106 = ")";
  protected final String TEXT_107 = "connectedViews";
  protected final String TEXT_108 = ", ";
  protected final String TEXT_109 = ".getType(";
  protected final String TEXT_110 = ".VISUAL_ID));";
  protected final String TEXT_111 = NL + "\t\tcreateNavigatorItems(connectedViews, parent, result, ";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = "));";
  protected final String TEXT_114 = NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean ";
  protected final String TEXT_115 = "(";
  protected final String TEXT_116 = " ";
  protected final String TEXT_117 = ") {" + NL + "\t\treturn ";
  protected final String TEXT_118 = ";" + NL + "\t}";
  protected final String TEXT_119 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_120 = " getLinksSourceByType(";
  protected final String TEXT_121 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_122 = " result = new ";
  protected final String TEXT_123 = "();" + NL + "\t \tfor (";
  protected final String TEXT_124 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_125 = " nextEdge = (";
  protected final String TEXT_126 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_127 = " nextEdgeSource = nextEdge.getSource();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType())) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_128 = " getLinksTargetByType(";
  protected final String TEXT_129 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_130 = " result = new ";
  protected final String TEXT_131 = "();" + NL + "\t \tfor (";
  protected final String TEXT_132 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_133 = " nextEdge = (";
  protected final String TEXT_134 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_135 = " nextEdgeSource = nextEdge.getTarget();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType())) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_136 = " getOutgoingLinksByType(";
  protected final String TEXT_137 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_138 = " result = new ";
  protected final String TEXT_139 = "();" + NL + "\t \tfor (";
  protected final String TEXT_140 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_141 = " nextNode = (";
  protected final String TEXT_142 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getSourceEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_143 = " getIncomingLinksByType(";
  protected final String TEXT_144 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_145 = " result = new ";
  protected final String TEXT_146 = "();" + NL + "\t \tfor (";
  protected final String TEXT_147 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_148 = " nextNode = (";
  protected final String TEXT_149 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getTargetEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_150 = " getChildrenByType(";
  protected final String TEXT_151 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_152 = " result = new ";
  protected final String TEXT_153 = "();" + NL + "\t \tfor (";
  protected final String TEXT_154 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_155 = " nextNode = (";
  protected final String TEXT_156 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getChildren(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_157 = " selectViewsByType(";
  protected final String TEXT_158 = " views, String type) {" + NL + "\t\t";
  protected final String TEXT_159 = " result = new ";
  protected final String TEXT_160 = "();" + NL + "\t\tfor (";
  protected final String TEXT_161 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_162 = " nextView = (";
  protected final String TEXT_163 = ") it.next();" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_164 = " createNavigatorItems(";
  protected final String TEXT_165 = " views, Object parent) {" + NL + "\t\t";
  protected final String TEXT_166 = " result = new ";
  protected final String TEXT_167 = "();" + NL + "\t\tfor (";
  protected final String TEXT_168 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_169 = "((";
  protected final String TEXT_170 = ") it.next(), parent, false));" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createNavigatorItems(";
  protected final String TEXT_171 = " views, ";
  protected final String TEXT_172 = " parent, ";
  protected final String TEXT_173 = " result, boolean isLeafs) {" + NL + "\t\tfor (";
  protected final String TEXT_174 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_175 = "((";
  protected final String TEXT_176 = ") it.next(), parent, isLeafs));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_177 = NL;
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d263 1
a263 7
    Map getter2ReferenceMap = new HashMap();
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesFrom(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d271 1
a271 8
    	Map createdGroups = new HashMap();
	for (Iterator it = childReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		String parentVariable;
		if (nextReference.isInsideGroup()) {
			parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(parentVariable)) {
				createdGroups.put(parentVariable, nextReference);
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d275 11
a285 1
    stringBuffer.append(parentVariable);
d289 1
a289 1
    stringBuffer.append(nextReference.getGroupName());
d291 1
a291 1
    stringBuffer.append(nextReference.getGroupIcon());
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d295 1
a295 1
    			}
d297 1
a297 1
    stringBuffer.append(parentVariable);
d299 1
a299 3
    
		} else {
			parentVariable = "navigatorItem";
d301 2
d304 2
a305 20
		}
		
		String getterNameBase = nextCommonBase.getUniqueIdentifier() + "To" + nextReference.getChild().getUniqueIdentifier();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
			getterNameBase = getterNameBase + "OutTarget";
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			getterNameBase = getterNameBase + "InSource";
		} else { /*nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
			getterNameBase = getterNameBase + "Children";
		}
		String getterName = getterNameBase;
		for (int i = 1; getter2ReferenceMap.containsKey(getterName); i++) {
			getterName = getterNameBase + "_" + i;
		}
		getter2ReferenceMap.put(getterName, nextReference);
		getterName = "get" + getterName;
		
    stringBuffer.append(getterName);
    stringBuffer.append(TEXT_30);
    if (nextCommonBase instanceof GenLink) {
d307 2
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d310 4
a313 1
    }
d315 4
a318 1
    stringBuffer.append(parentVariable);
d320 1
a320 6
    	}
	
	for (Iterator it = createdGroups.keySet().iterator(); it.hasNext();) {
		String nextGroupKey = (String) it.next();
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdGroups.get(nextGroupKey);
		if (nextReference.isHideIfEmpty()) {
d322 2
a323 1
    stringBuffer.append(nextGroupKey);
d325 1
a325 1
    		}
d327 6
a332 1
    stringBuffer.append(nextGroupKey);
d334 1
a334 1
    		if (nextReference.isHideIfEmpty()) {
d336 1
a336 2
    		}
	}
d338 1
a338 1
    }
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d342 3
a344 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d348 1
a348 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d350 1
a350 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d352 1
a352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d356 1
a356 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.AdapterFactoryEditingDomain"));
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory"));
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d362 1
a362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d364 1
a364 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d368 1
a368 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d370 2
a371 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d373 1
a373 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d375 8
a382 4
    Map createdDiagramGroups = new HashMap();
for (Iterator it = genNavigator.getChildReferencesFrom(null).iterator(); it.hasNext();) {
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
	if (nextReference.getReferenceType() != GenNavigatorReferenceType.CHILDREN_LITERAL) {
a384 7
	String parentVariable;
	if (nextReference.isInsideGroup()) {
		parentVariable = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(parentVariable)) {
			createdDiagramGroups.put(parentVariable, nextReference);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d386 1
a386 1
    stringBuffer.append(parentVariable);
d388 1
a388 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d390 1
a390 1
    stringBuffer.append(nextReference.getGroupName());
d392 2
a393 1
    stringBuffer.append(nextReference.getGroupIcon());
d395 1
a395 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d397 9
a405 1
    		}
d407 2
a409 4
    stringBuffer.append(TEXT_66);
    
	} else {
		parentVariable = "file";
d411 1
a411 2
    
	}
d413 1
a413 4
    
	if (nextReference.getChild() instanceof GenDiagram) {
		
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
d415 1
a415 4
    
	} else {
		
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
d419 1
a419 2
    
	}
d423 3
a425 6
    }

for (Iterator it = createdDiagramGroups.keySet().iterator(); it.hasNext();) {
	String groupNameKey = (String) it.next();
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdDiagramGroups.get(groupNameKey);
	if (nextReference.isHideIfEmpty()) {
d427 19
a445 1
    stringBuffer.append(groupNameKey);
d447 1
a447 1
    	}
d449 1
a449 1
    stringBuffer.append(groupNameKey);
d451 1
a451 1
    	if (nextReference.isHideIfEmpty()) {
d453 2
d456 5
a460 4
}

    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d462 1
a462 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d468 13
d482 1
a482 1
    stringBuffer.append(TEXT_84);
d484 1
a484 1
    stringBuffer.append(TEXT_85);
d486 1
a486 1
    stringBuffer.append(TEXT_86);
d488 1
a488 1
    stringBuffer.append(TEXT_87);
d504 1
a504 1
    stringBuffer.append(TEXT_88);
d506 1
a506 1
    stringBuffer.append(TEXT_89);
d508 1
a508 1
    stringBuffer.append(TEXT_90);
d510 1
a510 1
    stringBuffer.append(TEXT_91);
d512 1
a512 3
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_93);
d514 1
a514 1
    stringBuffer.append(TEXT_94);
d516 1
a516 1
    stringBuffer.append(TEXT_95);
d524 1
a524 1
    stringBuffer.append(TEXT_96);
d526 1
a526 1
    stringBuffer.append(TEXT_97);
d529 1
a529 1
    stringBuffer.append(TEXT_98);
d535 1
a535 1
    stringBuffer.append(TEXT_99);
d539 1
a539 1
    stringBuffer.append(TEXT_100);
d545 1
a545 1
    stringBuffer.append(TEXT_101);
d549 1
a549 1
    stringBuffer.append(TEXT_102);
d552 8
a559 2
					
    stringBuffer.append(TEXT_103);
d561 1
d564 1
a564 1
    stringBuffer.append(TEXT_104);
d569 1
a569 1
    stringBuffer.append(TEXT_105);
d571 1
a571 1
    stringBuffer.append(TEXT_106);
d575 1
a575 1
    stringBuffer.append(TEXT_107);
d578 1
a578 1
    stringBuffer.append(TEXT_108);
d580 1
a580 1
    stringBuffer.append(TEXT_109);
d582 1
a582 1
    stringBuffer.append(TEXT_110);
d584 1
a584 1
    stringBuffer.append(TEXT_111);
d586 1
a586 1
    stringBuffer.append(TEXT_112);
d588 1
a588 1
    stringBuffer.append(TEXT_113);
d590 1
a590 1
    stringBuffer.append(TEXT_114);
d592 1
a592 1
    stringBuffer.append(TEXT_115);
d594 1
a594 1
    stringBuffer.append(TEXT_116);
d596 1
a596 1
    stringBuffer.append(TEXT_117);
d598 1
a598 1
    stringBuffer.append(TEXT_118);
d600 1
a600 1
    stringBuffer.append(TEXT_119);
d602 1
a602 1
    stringBuffer.append(TEXT_120);
a603 12
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d607 1
a607 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d615 1
a615 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d617 1
a617 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d619 1
a619 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d623 1
a623 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d625 1
a625 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d629 1
a629 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d633 1
a633 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d639 1
a639 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d681 1
a681 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d683 1
a683 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d687 1
a687 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d689 1
a689 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d693 1
a693 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d695 1
a695 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d699 1
a699 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d703 42
d746 1
a746 1
    stringBuffer.append(TEXT_177);
@


1.4
log
@Using type access to Edges.
@
text
@d35 1
a35 1
  protected final String TEXT_15 = ") abstractNavigatorItem;" + NL + "\t\t\t\tswitch (navigatorItem.getVisualID()) {";
d50 148
a197 158
  protected final String TEXT_30 = "getViewByType(navigatorItem.getView().eResource().getContents(), ";
  protected final String TEXT_31 = ".MODEL_ID, ";
  protected final String TEXT_32 = ")";
  protected final String TEXT_33 = "getViewByType(navigatorItem.getView().getDiagram().getChildren(), ";
  protected final String TEXT_34 = ".getType(";
  protected final String TEXT_35 = ".VISUAL_ID), ";
  protected final String TEXT_36 = ")";
  protected final String TEXT_37 = "getViewByType(navigatorItem.getView().getDiagram().getEdges(), ";
  protected final String TEXT_38 = ".getType(";
  protected final String TEXT_39 = ".VISUAL_ID), ";
  protected final String TEXT_40 = ")";
  protected final String TEXT_41 = ".EMPTY_LIST";
  protected final String TEXT_42 = "(";
  protected final String TEXT_43 = "(";
  protected final String TEXT_44 = ") ";
  protected final String TEXT_45 = "navigatorItem.getView(), ";
  protected final String TEXT_46 = ")";
  protected final String TEXT_47 = ".EMPTY_LIST";
  protected final String TEXT_48 = ");";
  protected final String TEXT_49 = NL + "\t\t\t\tif (!";
  protected final String TEXT_50 = ".isEmpty()) {";
  protected final String TEXT_51 = NL + "\t\t\t\tresult.add(";
  protected final String TEXT_52 = ");";
  protected final String TEXT_53 = NL + "\t\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\t\treturn result.toArray();" + NL + "\t\t\t\t}";
  protected final String TEXT_55 = NL + "\t\t\t\t}" + NL + "\t\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_57 = " group = (";
  protected final String TEXT_58 = ") parentElement;" + NL + "\t\t\t\treturn group.getChildren();" + NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t    \t";
  protected final String TEXT_60 = " file = (";
  protected final String TEXT_61 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_62 = " editingDomain = (";
  protected final String TEXT_63 = ") ";
  protected final String TEXT_64 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\teditingDomain.setResourceToReadOnlyMap(new ";
  protected final String TEXT_65 = "() {" + NL + "\t\t\t\tpublic Object get(Object key) {" + NL + "\t\t\t\t\tif (!containsKey(key)) {" + NL + "\t\t\t\t\t\tput(key, Boolean.TRUE);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.get(key);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\t";
  protected final String TEXT_66 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_67 = " fileURI = ";
  protected final String TEXT_68 = ".createPlatformResourceURI(file.getFullPath().toString(), true);" + NL + "\t\t\t";
  protected final String TEXT_69 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_70 = " result = new ";
  protected final String TEXT_71 = "();";
  protected final String TEXT_72 = NL + "\t\t\t";
  protected final String TEXT_73 = " ";
  protected final String TEXT_74 = " = new ";
  protected final String TEXT_75 = "(\"";
  protected final String TEXT_76 = "\", \"";
  protected final String TEXT_77 = "\", ";
  protected final String TEXT_78 = ".MODEL_ID, file);";
  protected final String TEXT_79 = NL + "\t\t\t";
  protected final String TEXT_80 = ".addChildren(";
  protected final String TEXT_81 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_82 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_83 = ".MODEL_ID, ";
  protected final String TEXT_84 = ")";
  protected final String TEXT_85 = ".EMPTY_LIST";
  protected final String TEXT_86 = ".EMPTY_LIST";
  protected final String TEXT_87 = ");";
  protected final String TEXT_88 = NL + "\t\t\tif (!";
  protected final String TEXT_89 = ".isEmpty()) {";
  protected final String TEXT_90 = NL + "\t\t\tresult.add(";
  protected final String TEXT_91 = ");";
  protected final String TEXT_92 = NL + "\t\t\t}";
  protected final String TEXT_93 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_94 = ") {" + NL + "    \t\t";
  protected final String TEXT_95 = " abstractNavigatorItem = (";
  protected final String TEXT_96 = ") element;" + NL + "\t\t\tif (!";
  protected final String TEXT_97 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn abstractNavigatorItem.getParent();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_98 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_99 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_100 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_101 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_102 = " getViewByType(";
  protected final String TEXT_103 = " childViews, String type, Object parent) {" + NL + "\t\t";
  protected final String TEXT_104 = " result = new ";
  protected final String TEXT_105 = "();" + NL + "\t\tfor (";
  protected final String TEXT_106 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_108 = " nextView = (";
  protected final String TEXT_109 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_110 = "(nextView, parent));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_111 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_112 = " ";
  protected final String TEXT_113 = "(";
  protected final String TEXT_114 = " ";
  protected final String TEXT_115 = ", ";
  protected final String TEXT_116 = " parent) {" + NL + "\t\t";
  protected final String TEXT_117 = " result = new ";
  protected final String TEXT_118 = "();";
  protected final String TEXT_119 = NL + "\t\t";
  protected final String TEXT_120 = " connectedViews = ";
  protected final String TEXT_121 = NL + "\t\tconnectedViews = ";
  protected final String TEXT_122 = "getLinksTargetByType";
  protected final String TEXT_123 = "getLinksSourceByType";
  protected final String TEXT_124 = "getOutgoingLinksByType";
  protected final String TEXT_125 = "getIncomingLinksByType";
  protected final String TEXT_126 = "getChildrenByType";
  protected final String TEXT_127 = "(";
  protected final String TEXT_128 = ".singleton(";
  protected final String TEXT_129 = ")";
  protected final String TEXT_130 = "connectedViews";
  protected final String TEXT_131 = ", ";
  protected final String TEXT_132 = ".getType(";
  protected final String TEXT_133 = ".VISUAL_ID));";
  protected final String TEXT_134 = NL + "\t\tcreateNavigatorItems(connectedViews, parent, result);";
  protected final String TEXT_135 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_136 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_137 = " getLinksSourceByType(";
  protected final String TEXT_138 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_139 = " result = new ";
  protected final String TEXT_140 = "();" + NL + "\t \tfor (";
  protected final String TEXT_141 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_142 = " nextEdge = (";
  protected final String TEXT_143 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_144 = " nextEdgeSource = nextEdge.getSource();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType())) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_145 = " getLinksTargetByType(";
  protected final String TEXT_146 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_147 = " result = new ";
  protected final String TEXT_148 = "();" + NL + "\t \tfor (";
  protected final String TEXT_149 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_150 = " nextEdge = (";
  protected final String TEXT_151 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_152 = " nextEdgeSource = nextEdge.getTarget();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType())) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_153 = " getOutgoingLinksByType(";
  protected final String TEXT_154 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_155 = " result = new ";
  protected final String TEXT_156 = "();" + NL + "\t \tfor (";
  protected final String TEXT_157 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_158 = " nextNode = (";
  protected final String TEXT_159 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getSourceEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_160 = " getIncomingLinksByType(";
  protected final String TEXT_161 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_162 = " result = new ";
  protected final String TEXT_163 = "();" + NL + "\t \tfor (";
  protected final String TEXT_164 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_165 = " nextNode = (";
  protected final String TEXT_166 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getTargetEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_167 = " getChildrenByType(";
  protected final String TEXT_168 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_169 = " result = new ";
  protected final String TEXT_170 = "();" + NL + "\t \tfor (";
  protected final String TEXT_171 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_172 = " nextNode = (";
  protected final String TEXT_173 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getChildren(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_174 = " selectViewsByType(";
  protected final String TEXT_175 = " views, String type) {" + NL + "\t\t";
  protected final String TEXT_176 = " result = new ";
  protected final String TEXT_177 = "();" + NL + "\t\tfor (";
  protected final String TEXT_178 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_179 = " nextView = (";
  protected final String TEXT_180 = ") it.next();" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createNavigatorItems(";
  protected final String TEXT_181 = " views, ";
  protected final String TEXT_182 = " parent, ";
  protected final String TEXT_183 = " result) {" + NL + "\t\tfor (";
  protected final String TEXT_184 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_185 = "((";
  protected final String TEXT_186 = ") it.next(), parent));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_187 = NL;
d288 16
a303 3
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextReference.getChild() instanceof GenDiagram) {
			
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
d307 1
a307 1
    stringBuffer.append(parentVariable);
d309 1
a309 3
    
			} else if (nextReference.getChild() instanceof GenTopLevelNode) {
			
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a312 56
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_36);
    
			} else if (nextReference.getChild() instanceof GenLink) {
			
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_40);
    
			} else {
			/* Any other "Default" child refrences are not supported */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_41);
    
			}
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			String getterNameBase = "get" + nextCommonBase.getUniqueIdentifier() + "To" + nextReference.getChild().getUniqueIdentifier();
			if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
				getterNameBase = getterNameBase + "OutTarget";
			} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
				getterNameBase = getterNameBase + "InSource";
			} else { /*nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL*/
				getterNameBase = getterNameBase + "Children";
			}
			String getterName = getterNameBase;
			for (int i = 1; getter2ReferenceMap.containsKey(getterName); i++) {
				getterName = getterNameBase + "_" + i;
			}
			getter2ReferenceMap.put(getterName, nextReference);
			
    stringBuffer.append(getterName);
    stringBuffer.append(TEXT_42);
    if (nextCommonBase instanceof GenLink) {
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_44);
    }
    stringBuffer.append(TEXT_45);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_46);
    
		} else {
			/* Put processing of other types of the references here. */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_47);
    
		}
    stringBuffer.append(TEXT_48);
d319 1
a319 1
    stringBuffer.append(TEXT_49);
d321 1
a321 1
    stringBuffer.append(TEXT_50);
d323 1
a323 1
    stringBuffer.append(TEXT_51);
d325 1
a325 1
    stringBuffer.append(TEXT_52);
d327 1
a327 1
    stringBuffer.append(TEXT_53);
d330 1
a330 1
    stringBuffer.append(TEXT_54);
d332 1
a332 1
    stringBuffer.append(TEXT_55);
d334 1
a334 1
    stringBuffer.append(TEXT_56);
d336 1
a336 1
    stringBuffer.append(TEXT_57);
d338 1
a338 1
    stringBuffer.append(TEXT_58);
d340 1
a340 1
    stringBuffer.append(TEXT_59);
d342 1
a342 1
    stringBuffer.append(TEXT_60);
d344 1
a344 1
    stringBuffer.append(TEXT_61);
d346 1
a346 1
    stringBuffer.append(TEXT_62);
d348 1
a348 1
    stringBuffer.append(TEXT_63);
d350 1
a350 1
    stringBuffer.append(TEXT_64);
d352 1
a352 1
    stringBuffer.append(TEXT_65);
d354 1
a354 1
    stringBuffer.append(TEXT_66);
d356 1
a356 1
    stringBuffer.append(TEXT_67);
d358 1
a358 1
    stringBuffer.append(TEXT_68);
d360 1
a360 1
    stringBuffer.append(TEXT_69);
d362 1
a362 1
    stringBuffer.append(TEXT_70);
d364 1
a364 1
    stringBuffer.append(TEXT_71);
d368 3
d376 1
a376 1
    stringBuffer.append(TEXT_72);
d378 1
a378 1
    stringBuffer.append(TEXT_73);
d380 1
a380 1
    stringBuffer.append(TEXT_74);
d382 1
a382 1
    stringBuffer.append(TEXT_75);
d384 1
a384 1
    stringBuffer.append(TEXT_76);
d386 1
a386 1
    stringBuffer.append(TEXT_77);
d388 1
a388 1
    stringBuffer.append(TEXT_78);
d390 1
a390 1
    stringBuffer.append(TEXT_79);
d392 1
a392 1
    stringBuffer.append(TEXT_80);
d396 1
a396 1
    stringBuffer.append(TEXT_81);
d399 4
a402 4
	if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
		if (nextReference.getChild() instanceof GenDiagram) {
			
    stringBuffer.append(TEXT_82);
d404 1
a404 3
    stringBuffer.append(TEXT_83);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_84);
a405 7
		} else {
			/* Any other "Default" child refrences are not supported for resource */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_85);
    
		}
a406 1
		/* Any other ReferenceTypes are not supported for the resource */
d408 4
a411 2
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_86);
d414 3
a416 1
    stringBuffer.append(TEXT_87);
d423 1
a423 1
    stringBuffer.append(TEXT_88);
d425 1
a425 1
    stringBuffer.append(TEXT_89);
d427 1
a427 1
    stringBuffer.append(TEXT_90);
d429 1
a429 1
    stringBuffer.append(TEXT_91);
d431 1
a431 1
    stringBuffer.append(TEXT_92);
d435 1
a435 1
    stringBuffer.append(TEXT_93);
d437 1
a437 1
    stringBuffer.append(TEXT_94);
d439 1
a439 1
    stringBuffer.append(TEXT_95);
d441 1
a441 1
    stringBuffer.append(TEXT_96);
d443 1
a443 1
    stringBuffer.append(TEXT_97);
d445 1
a445 1
    stringBuffer.append(TEXT_98);
d447 1
a447 1
    stringBuffer.append(TEXT_99);
d449 1
a449 1
    stringBuffer.append(TEXT_100);
d451 1
a451 19
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_110);
d456 1
d467 1
a467 1
    stringBuffer.append(TEXT_111);
d469 3
a471 3
    stringBuffer.append(TEXT_112);
    stringBuffer.append((String) nextEntry.getKey());
    stringBuffer.append(TEXT_113);
d473 1
a473 1
    stringBuffer.append(TEXT_114);
d475 1
a475 1
    stringBuffer.append(TEXT_115);
d477 1
a477 1
    stringBuffer.append(TEXT_116);
d479 1
a479 1
    stringBuffer.append(TEXT_117);
d481 1
a481 1
    stringBuffer.append(TEXT_118);
d489 1
a489 1
    stringBuffer.append(TEXT_119);
d491 1
a491 1
    stringBuffer.append(TEXT_120);
d494 1
a494 1
    stringBuffer.append(TEXT_121);
d500 1
a500 1
    stringBuffer.append(TEXT_122);
d504 1
a504 1
    stringBuffer.append(TEXT_123);
d510 1
a510 1
    stringBuffer.append(TEXT_124);
d514 1
a514 1
    stringBuffer.append(TEXT_125);
d518 1
a518 1
    stringBuffer.append(TEXT_126);
d522 1
a522 1
    stringBuffer.append(TEXT_127);
d527 1
a527 1
    stringBuffer.append(TEXT_128);
d529 1
a529 1
    stringBuffer.append(TEXT_129);
d533 1
a533 1
    stringBuffer.append(TEXT_130);
d536 1
a536 1
    stringBuffer.append(TEXT_131);
d538 1
a538 1
    stringBuffer.append(TEXT_132);
d540 1
a540 1
    stringBuffer.append(TEXT_133);
d542 5
a546 1
    stringBuffer.append(TEXT_134);
d548 9
a556 1
    stringBuffer.append(TEXT_135);
d558 1
a558 1
    stringBuffer.append(TEXT_136);
d560 1
a560 1
    stringBuffer.append(TEXT_137);
d562 1
a562 1
    stringBuffer.append(TEXT_138);
d564 1
a564 1
    stringBuffer.append(TEXT_139);
d566 1
a566 1
    stringBuffer.append(TEXT_140);
d568 1
a568 1
    stringBuffer.append(TEXT_141);
d570 1
a570 1
    stringBuffer.append(TEXT_142);
d572 1
a572 1
    stringBuffer.append(TEXT_143);
d574 1
a574 1
    stringBuffer.append(TEXT_144);
d576 1
a576 1
    stringBuffer.append(TEXT_145);
d578 1
a578 1
    stringBuffer.append(TEXT_146);
d580 1
a580 1
    stringBuffer.append(TEXT_147);
d582 1
a582 1
    stringBuffer.append(TEXT_148);
d584 1
a584 1
    stringBuffer.append(TEXT_149);
d586 1
a586 1
    stringBuffer.append(TEXT_150);
d588 1
a588 1
    stringBuffer.append(TEXT_151);
d590 1
a590 1
    stringBuffer.append(TEXT_152);
d592 1
a592 1
    stringBuffer.append(TEXT_153);
d594 1
a594 1
    stringBuffer.append(TEXT_154);
d596 1
a596 1
    stringBuffer.append(TEXT_155);
d598 1
a598 1
    stringBuffer.append(TEXT_156);
d600 1
a600 1
    stringBuffer.append(TEXT_157);
d602 1
a602 1
    stringBuffer.append(TEXT_158);
d604 1
a604 1
    stringBuffer.append(TEXT_159);
d606 1
a606 1
    stringBuffer.append(TEXT_160);
d608 1
a608 1
    stringBuffer.append(TEXT_161);
d610 1
a610 1
    stringBuffer.append(TEXT_162);
d612 1
a612 1
    stringBuffer.append(TEXT_163);
d614 1
a614 1
    stringBuffer.append(TEXT_164);
d616 1
a616 1
    stringBuffer.append(TEXT_165);
d618 1
a618 1
    stringBuffer.append(TEXT_166);
d620 1
a620 1
    stringBuffer.append(TEXT_167);
d622 1
a622 1
    stringBuffer.append(TEXT_168);
d624 1
a624 1
    stringBuffer.append(TEXT_169);
d626 1
a626 1
    stringBuffer.append(TEXT_170);
d628 1
a628 1
    stringBuffer.append(TEXT_171);
d630 1
a630 1
    stringBuffer.append(TEXT_172);
d632 1
a632 1
    stringBuffer.append(TEXT_173);
d634 1
a634 1
    stringBuffer.append(TEXT_174);
d636 1
a636 1
    stringBuffer.append(TEXT_175);
d638 1
a638 1
    stringBuffer.append(TEXT_176);
d640 1
a640 1
    stringBuffer.append(TEXT_177);
d642 3
a644 1
    stringBuffer.append(TEXT_178);
d646 13
a658 1
    stringBuffer.append(TEXT_179);
d660 1
a660 1
    stringBuffer.append(TEXT_180);
d662 1
a662 1
    stringBuffer.append(TEXT_181);
d664 1
a664 1
    stringBuffer.append(TEXT_182);
d666 1
a666 1
    stringBuffer.append(TEXT_183);
d668 1
a668 1
    stringBuffer.append(TEXT_184);
d670 1
a670 1
    stringBuffer.append(TEXT_185);
d672 1
a672 1
    stringBuffer.append(TEXT_186);
d674 1
a674 1
    stringBuffer.append(TEXT_187);
@


1.3
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d62 146
a207 141
  protected final String TEXT_42 = "(navigatorItem.getView(), ";
  protected final String TEXT_43 = ")";
  protected final String TEXT_44 = ".EMPTY_LIST";
  protected final String TEXT_45 = ");";
  protected final String TEXT_46 = NL + "\t\t\t\tif (!";
  protected final String TEXT_47 = ".isEmpty()) {";
  protected final String TEXT_48 = NL + "\t\t\t\tresult.add(";
  protected final String TEXT_49 = ");";
  protected final String TEXT_50 = NL + "\t\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t\treturn result.toArray();" + NL + "\t\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\t\t}" + NL + "\t\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_53 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_54 = " group = (";
  protected final String TEXT_55 = ") parentElement;" + NL + "\t\t\t\treturn group.getChildren();" + NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t    \t";
  protected final String TEXT_57 = " file = (";
  protected final String TEXT_58 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_59 = " editingDomain = (";
  protected final String TEXT_60 = ") ";
  protected final String TEXT_61 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\teditingDomain.setResourceToReadOnlyMap(new ";
  protected final String TEXT_62 = "() {" + NL + "\t\t\t\tpublic Object get(Object key) {" + NL + "\t\t\t\t\tif (!containsKey(key)) {" + NL + "\t\t\t\t\t\tput(key, Boolean.TRUE);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.get(key);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\t";
  protected final String TEXT_63 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_64 = " fileURI = ";
  protected final String TEXT_65 = ".createPlatformResourceURI(file.getFullPath().toString(), true);" + NL + "\t\t\t";
  protected final String TEXT_66 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_67 = " result = new ";
  protected final String TEXT_68 = "();";
  protected final String TEXT_69 = NL + "\t\t\t";
  protected final String TEXT_70 = " ";
  protected final String TEXT_71 = " = new ";
  protected final String TEXT_72 = "(\"";
  protected final String TEXT_73 = "\", \"";
  protected final String TEXT_74 = "\", ";
  protected final String TEXT_75 = ".MODEL_ID, file);";
  protected final String TEXT_76 = NL + "\t\t\t";
  protected final String TEXT_77 = ".addChildren(";
  protected final String TEXT_78 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_79 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_80 = ".MODEL_ID, ";
  protected final String TEXT_81 = ")";
  protected final String TEXT_82 = ".EMPTY_LIST";
  protected final String TEXT_83 = ".EMPTY_LIST";
  protected final String TEXT_84 = ");";
  protected final String TEXT_85 = NL + "\t\t\tif (!";
  protected final String TEXT_86 = ".isEmpty()) {";
  protected final String TEXT_87 = NL + "\t\t\tresult.add(";
  protected final String TEXT_88 = ");";
  protected final String TEXT_89 = NL + "\t\t\t}";
  protected final String TEXT_90 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_91 = ") {" + NL + "    \t\t";
  protected final String TEXT_92 = " abstractNavigatorItem = (";
  protected final String TEXT_93 = ") element;" + NL + "\t\t\tif (!";
  protected final String TEXT_94 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn abstractNavigatorItem.getParent();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_95 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_96 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_97 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_98 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_99 = " getViewByType(";
  protected final String TEXT_100 = " childViews, String type, Object parent) {" + NL + "\t\t";
  protected final String TEXT_101 = " result = new ";
  protected final String TEXT_102 = "();" + NL + "\t\tfor (";
  protected final String TEXT_103 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_104 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_105 = " nextView = (";
  protected final String TEXT_106 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_107 = "(nextView, parent));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_108 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_109 = " ";
  protected final String TEXT_110 = "(";
  protected final String TEXT_111 = " view, ";
  protected final String TEXT_112 = " parent) {" + NL + "\t\t";
  protected final String TEXT_113 = " result = new ";
  protected final String TEXT_114 = "();";
  protected final String TEXT_115 = NL + "\t\t";
  protected final String TEXT_116 = " connectedViews = ";
  protected final String TEXT_117 = NL + "\t\tconnectedViews = ";
  protected final String TEXT_118 = "getLinksTargetByType";
  protected final String TEXT_119 = "getLinksSourceByType";
  protected final String TEXT_120 = "getOutgoingLinksByType";
  protected final String TEXT_121 = "getIncomingLinksByType";
  protected final String TEXT_122 = "getChildrenByType";
  protected final String TEXT_123 = "(";
  protected final String TEXT_124 = ".singleton(view)";
  protected final String TEXT_125 = "connectedViews";
  protected final String TEXT_126 = ", ";
  protected final String TEXT_127 = ".getType(";
  protected final String TEXT_128 = ".VISUAL_ID));";
  protected final String TEXT_129 = NL + "\t\tcreateNavigatorItems(connectedViews, parent, result);";
  protected final String TEXT_130 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_131 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_132 = " getLinksSourceByType(";
  protected final String TEXT_133 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_134 = " result = new ";
  protected final String TEXT_135 = "();" + NL + "\t \tfor (";
  protected final String TEXT_136 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_137 = " nextEdge = (";
  protected final String TEXT_138 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_139 = " nextEdgeSource = nextEdge.getSource();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType())) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_140 = " getLinksTargetByType(";
  protected final String TEXT_141 = " edges, String type) {" + NL + "\t\t";
  protected final String TEXT_142 = " result = new ";
  protected final String TEXT_143 = "();" + NL + "\t \tfor (";
  protected final String TEXT_144 = " it = edges.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_145 = " nextEdge = (";
  protected final String TEXT_146 = ") it.next();" + NL + "\t \t\t";
  protected final String TEXT_147 = " nextEdgeSource = nextEdge.getTarget();" + NL + "\t \t\tif (type.equals(nextEdgeSource.getType())) {" + NL + "\t \t\t\tresult.add(nextEdgeSource);" + NL + "\t \t\t}" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_148 = " getOutgoingLinksByType(";
  protected final String TEXT_149 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_150 = " result = new ";
  protected final String TEXT_151 = "();" + NL + "\t \tfor (";
  protected final String TEXT_152 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_153 = " nextNode = (";
  protected final String TEXT_154 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getSourceEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_155 = " getIncomingLinksByType(";
  protected final String TEXT_156 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_157 = " result = new ";
  protected final String TEXT_158 = "();" + NL + "\t \tfor (";
  protected final String TEXT_159 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_160 = " nextNode = (";
  protected final String TEXT_161 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getTargetEdges(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private ";
  protected final String TEXT_162 = " getChildrenByType(";
  protected final String TEXT_163 = " nodes, String type) {" + NL + "\t\t";
  protected final String TEXT_164 = " result = new ";
  protected final String TEXT_165 = "();" + NL + "\t \tfor (";
  protected final String TEXT_166 = " it = nodes.iterator(); it.hasNext();) {" + NL + "\t \t\t";
  protected final String TEXT_167 = " nextNode = (";
  protected final String TEXT_168 = ") it.next();" + NL + "\t\t\tresult.addAll(selectViewsByType(nextNode.getChildren(), type));" + NL + "\t \t}" + NL + "\t \treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_169 = " selectViewsByType(";
  protected final String TEXT_170 = " views, String type) {" + NL + "\t\t";
  protected final String TEXT_171 = " result = new ";
  protected final String TEXT_172 = "();" + NL + "\t\tfor (";
  protected final String TEXT_173 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_174 = " nextView = (";
  protected final String TEXT_175 = ") it.next();" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createNavigatorItems(";
  protected final String TEXT_176 = " views, ";
  protected final String TEXT_177 = " parent, ";
  protected final String TEXT_178 = " result) {" + NL + "\t\tfor (";
  protected final String TEXT_179 = " it = views.iterator(); it.hasNext();) {" + NL + "\t\t\tresult.add(new ";
  protected final String TEXT_180 = "((";
  protected final String TEXT_181 = ") it.next(), parent));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_182 = NL;
d351 6
d358 1
a358 1
    stringBuffer.append(TEXT_43);
d364 1
a364 1
    stringBuffer.append(TEXT_44);
d367 1
a367 1
    stringBuffer.append(TEXT_45);
d374 1
a374 1
    stringBuffer.append(TEXT_46);
d376 1
a376 1
    stringBuffer.append(TEXT_47);
d378 1
a378 1
    stringBuffer.append(TEXT_48);
d380 1
a380 1
    stringBuffer.append(TEXT_49);
d382 1
a382 1
    stringBuffer.append(TEXT_50);
d385 1
a385 1
    stringBuffer.append(TEXT_51);
d387 1
a387 1
    stringBuffer.append(TEXT_52);
d389 1
a389 1
    stringBuffer.append(TEXT_53);
d391 1
a391 1
    stringBuffer.append(TEXT_54);
d393 1
a393 1
    stringBuffer.append(TEXT_55);
d395 1
a395 1
    stringBuffer.append(TEXT_56);
d397 1
a397 1
    stringBuffer.append(TEXT_57);
d399 1
a399 1
    stringBuffer.append(TEXT_58);
d401 1
a401 1
    stringBuffer.append(TEXT_59);
d403 1
a403 1
    stringBuffer.append(TEXT_60);
d405 1
a405 1
    stringBuffer.append(TEXT_61);
d407 1
a407 1
    stringBuffer.append(TEXT_62);
d409 1
a409 1
    stringBuffer.append(TEXT_63);
d411 1
a411 1
    stringBuffer.append(TEXT_64);
d413 1
a413 1
    stringBuffer.append(TEXT_65);
d415 1
a415 1
    stringBuffer.append(TEXT_66);
d417 1
a417 1
    stringBuffer.append(TEXT_67);
d419 1
a419 1
    stringBuffer.append(TEXT_68);
d428 1
a428 1
    stringBuffer.append(TEXT_69);
d430 1
a430 1
    stringBuffer.append(TEXT_70);
d432 1
a432 1
    stringBuffer.append(TEXT_71);
d434 1
a434 1
    stringBuffer.append(TEXT_72);
d436 1
a436 1
    stringBuffer.append(TEXT_73);
d438 1
a438 1
    stringBuffer.append(TEXT_74);
d440 1
a440 1
    stringBuffer.append(TEXT_75);
d442 1
a442 1
    stringBuffer.append(TEXT_76);
d444 1
a444 1
    stringBuffer.append(TEXT_77);
d448 1
a448 1
    stringBuffer.append(TEXT_78);
d454 1
a454 1
    stringBuffer.append(TEXT_79);
d456 1
a456 1
    stringBuffer.append(TEXT_80);
d458 1
a458 1
    stringBuffer.append(TEXT_81);
d464 1
a464 1
    stringBuffer.append(TEXT_82);
d471 1
a471 1
    stringBuffer.append(TEXT_83);
d474 1
a474 1
    stringBuffer.append(TEXT_84);
d481 1
a481 1
    stringBuffer.append(TEXT_85);
d483 1
a483 1
    stringBuffer.append(TEXT_86);
d485 1
a485 1
    stringBuffer.append(TEXT_87);
d487 1
a487 1
    stringBuffer.append(TEXT_88);
d489 1
a489 1
    stringBuffer.append(TEXT_89);
d493 1
a493 1
    stringBuffer.append(TEXT_90);
d495 1
a495 1
    stringBuffer.append(TEXT_91);
d497 1
a497 1
    stringBuffer.append(TEXT_92);
d499 1
a499 1
    stringBuffer.append(TEXT_93);
d501 1
a501 1
    stringBuffer.append(TEXT_94);
d503 1
a503 1
    stringBuffer.append(TEXT_95);
d505 1
a505 1
    stringBuffer.append(TEXT_96);
d507 1
a507 1
    stringBuffer.append(TEXT_97);
d509 1
a509 1
    stringBuffer.append(TEXT_98);
d511 1
a511 1
    stringBuffer.append(TEXT_99);
d513 1
a513 1
    stringBuffer.append(TEXT_100);
d515 1
a515 1
    stringBuffer.append(TEXT_101);
d517 1
a517 1
    stringBuffer.append(TEXT_102);
d519 1
a519 1
    stringBuffer.append(TEXT_103);
d521 1
a521 1
    stringBuffer.append(TEXT_104);
d523 1
a523 1
    stringBuffer.append(TEXT_105);
d525 1
a525 1
    stringBuffer.append(TEXT_106);
d527 1
a527 1
    stringBuffer.append(TEXT_107);
d532 9
d542 1
a542 1
    stringBuffer.append(TEXT_108);
d544 1
a544 1
    stringBuffer.append(TEXT_109);
d546 5
a550 3
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_111);
d552 1
a552 1
    stringBuffer.append(TEXT_112);
d554 1
a554 1
    stringBuffer.append(TEXT_113);
d556 1
a556 1
    stringBuffer.append(TEXT_114);
d564 1
a564 1
    stringBuffer.append(TEXT_115);
d566 1
a566 1
    stringBuffer.append(TEXT_116);
d569 1
a569 1
    stringBuffer.append(TEXT_117);
d575 1
a575 1
    stringBuffer.append(TEXT_118);
d579 1
a579 1
    stringBuffer.append(TEXT_119);
d585 1
a585 1
    stringBuffer.append(TEXT_120);
d589 1
a589 1
    stringBuffer.append(TEXT_121);
d593 1
a593 1
    stringBuffer.append(TEXT_122);
d597 1
a597 1
    stringBuffer.append(TEXT_123);
d602 3
a604 1
    stringBuffer.append(TEXT_124);
d608 1
a608 1
    stringBuffer.append(TEXT_125);
d611 1
a611 1
    stringBuffer.append(TEXT_126);
d613 1
a613 1
    stringBuffer.append(TEXT_127);
d615 1
a615 1
    stringBuffer.append(TEXT_128);
d617 1
a617 1
    stringBuffer.append(TEXT_129);
d619 1
a619 1
    stringBuffer.append(TEXT_130);
d621 1
a621 1
    stringBuffer.append(TEXT_131);
d623 1
a623 1
    stringBuffer.append(TEXT_132);
d625 1
a625 1
    stringBuffer.append(TEXT_133);
d627 1
a627 1
    stringBuffer.append(TEXT_134);
d629 1
a629 1
    stringBuffer.append(TEXT_135);
d631 1
a631 1
    stringBuffer.append(TEXT_136);
d633 1
a633 1
    stringBuffer.append(TEXT_137);
d635 1
a635 1
    stringBuffer.append(TEXT_138);
d637 1
a637 1
    stringBuffer.append(TEXT_139);
d639 1
a639 1
    stringBuffer.append(TEXT_140);
d641 1
a641 1
    stringBuffer.append(TEXT_141);
d643 1
a643 1
    stringBuffer.append(TEXT_142);
d645 1
a645 1
    stringBuffer.append(TEXT_143);
d647 1
a647 1
    stringBuffer.append(TEXT_144);
d649 1
a649 1
    stringBuffer.append(TEXT_145);
d651 1
a651 1
    stringBuffer.append(TEXT_146);
d653 1
a653 1
    stringBuffer.append(TEXT_147);
d655 1
a655 1
    stringBuffer.append(TEXT_148);
d657 1
a657 1
    stringBuffer.append(TEXT_149);
d659 1
a659 1
    stringBuffer.append(TEXT_150);
d661 1
a661 1
    stringBuffer.append(TEXT_151);
d663 1
a663 1
    stringBuffer.append(TEXT_152);
d665 1
a665 1
    stringBuffer.append(TEXT_153);
d667 1
a667 1
    stringBuffer.append(TEXT_154);
d669 1
a669 1
    stringBuffer.append(TEXT_155);
d671 1
a671 1
    stringBuffer.append(TEXT_156);
d673 1
a673 1
    stringBuffer.append(TEXT_157);
d675 1
a675 1
    stringBuffer.append(TEXT_158);
d677 1
a677 1
    stringBuffer.append(TEXT_159);
d679 1
a679 1
    stringBuffer.append(TEXT_160);
d681 1
a681 1
    stringBuffer.append(TEXT_161);
d683 1
a683 1
    stringBuffer.append(TEXT_162);
d685 1
a685 1
    stringBuffer.append(TEXT_163);
d687 1
a687 1
    stringBuffer.append(TEXT_164);
d689 1
a689 1
    stringBuffer.append(TEXT_165);
d691 1
a691 1
    stringBuffer.append(TEXT_166);
d693 1
a693 1
    stringBuffer.append(TEXT_167);
d695 1
a695 1
    stringBuffer.append(TEXT_168);
d697 1
a697 1
    stringBuffer.append(TEXT_169);
d699 1
a699 1
    stringBuffer.append(TEXT_170);
d701 1
a701 1
    stringBuffer.append(TEXT_171);
d703 1
a703 1
    stringBuffer.append(TEXT_172);
d705 1
a705 1
    stringBuffer.append(TEXT_173);
d707 1
a707 1
    stringBuffer.append(TEXT_174);
d709 1
a709 1
    stringBuffer.append(TEXT_175);
d711 1
a711 1
    stringBuffer.append(TEXT_176);
d713 1
a713 1
    stringBuffer.append(TEXT_177);
d715 1
a715 1
    stringBuffer.append(TEXT_178);
d717 1
a717 1
    stringBuffer.append(TEXT_179);
d719 1
a719 1
    stringBuffer.append(TEXT_180);
d721 1
a721 1
    stringBuffer.append(TEXT_181);
d723 1
a723 1
    stringBuffer.append(TEXT_182);
@


1.2
log
@Parent element correctly provided to navigator.
@
text
@d7 1
d50 6
a55 6
  protected final String TEXT_30 = "getChildByType(navigatorItem.getView().getChildren(), ";
  protected final String TEXT_31 = ".getType(";
  protected final String TEXT_32 = ".VISUAL_ID), ";
  protected final String TEXT_33 = ")";
  protected final String TEXT_34 = "getViewByType(navigatorItem.getView().eResource().getContents(), ";
  protected final String TEXT_35 = ".MODEL_ID, ";
d57 1
a57 1
  protected final String TEXT_37 = "getViewByType(navigatorItem.getView().getDiagram().getChildren(), ";
d61 72
a132 72
  protected final String TEXT_41 = "getViewByType(navigatorItem.getView().getDiagram().getEdges(), ";
  protected final String TEXT_42 = ".getType(";
  protected final String TEXT_43 = ".VISUAL_ID), ";
  protected final String TEXT_44 = ")";
  protected final String TEXT_45 = ".EMPTY_LIST";
  protected final String TEXT_46 = "getConnectedViews(navigatorItem.getView(), ";
  protected final String TEXT_47 = ".getType(";
  protected final String TEXT_48 = ".VISUAL_ID), ";
  protected final String TEXT_49 = ", ";
  protected final String TEXT_50 = ")";
  protected final String TEXT_51 = ".EMPTY_LIST";
  protected final String TEXT_52 = ".EMPTY_LIST";
  protected final String TEXT_53 = ");";
  protected final String TEXT_54 = NL + "\t\t\t\tif (!";
  protected final String TEXT_55 = ".isEmpty()) {";
  protected final String TEXT_56 = NL + "\t\t\t\tresult.add(";
  protected final String TEXT_57 = ");";
  protected final String TEXT_58 = NL + "\t\t\t\t}";
  protected final String TEXT_59 = NL + "\t\t\t\treturn result.toArray();" + NL + "\t\t\t\t}";
  protected final String TEXT_60 = NL + "\t\t\t\t}" + NL + "\t\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_61 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_62 = " group = (";
  protected final String TEXT_63 = ") parentElement;" + NL + "\t\t\t\treturn group.getChildren();" + NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_64 = ") {" + NL + "\t    \t";
  protected final String TEXT_65 = " file = (";
  protected final String TEXT_66 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_67 = " editingDomain = (";
  protected final String TEXT_68 = ") ";
  protected final String TEXT_69 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\teditingDomain.setResourceToReadOnlyMap(new ";
  protected final String TEXT_70 = "() {" + NL + "\t\t\t\tpublic Object get(Object key) {" + NL + "\t\t\t\t\tif (!containsKey(key)) {" + NL + "\t\t\t\t\t\tput(key, Boolean.TRUE);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.get(key);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\t";
  protected final String TEXT_71 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_72 = " fileURI = ";
  protected final String TEXT_73 = ".createPlatformResourceURI(file.getFullPath().toString());" + NL + "\t\t\t";
  protected final String TEXT_74 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_75 = " result = new ";
  protected final String TEXT_76 = "();";
  protected final String TEXT_77 = NL + "\t\t\t";
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = " = new ";
  protected final String TEXT_80 = "(\"";
  protected final String TEXT_81 = "\", \"";
  protected final String TEXT_82 = "\", ";
  protected final String TEXT_83 = ".MODEL_ID, file);";
  protected final String TEXT_84 = NL + "\t\t\t";
  protected final String TEXT_85 = ".addChildren(";
  protected final String TEXT_86 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_87 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_88 = ".MODEL_ID, ";
  protected final String TEXT_89 = ")";
  protected final String TEXT_90 = ".EMPTY_LIST";
  protected final String TEXT_91 = "getChildByType(resource.getContents(), ";
  protected final String TEXT_92 = ".getType(";
  protected final String TEXT_93 = ".VISUAL_ID), ";
  protected final String TEXT_94 = ")";
  protected final String TEXT_95 = ".EMPTY_LIST";
  protected final String TEXT_96 = ");";
  protected final String TEXT_97 = NL + "\t\t\tif (!";
  protected final String TEXT_98 = ".isEmpty()) {";
  protected final String TEXT_99 = NL + "\t\t\tresult.add(";
  protected final String TEXT_100 = ");";
  protected final String TEXT_101 = NL + "\t\t\t}";
  protected final String TEXT_102 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_103 = ") {" + NL + "    \t\t";
  protected final String TEXT_104 = " abstractNavigatorItem = (";
  protected final String TEXT_105 = ") element;" + NL + "\t\t\tif (!";
  protected final String TEXT_106 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\treturn abstractNavigatorItem.getParent();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_107 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_108 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_109 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_110 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_111 = " getViewByType(";
  protected final String TEXT_112 = " childViews, String type, Object parent) {" + NL + "\t\t";
d134 69
a202 41
  protected final String TEXT_114 = "();" + NL + "\t\tfor (";
  protected final String TEXT_115 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_116 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_117 = " nextView = (";
  protected final String TEXT_118 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_119 = "(nextView, parent));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_120 = " getChildByType(";
  protected final String TEXT_121 = " childViews, String type, Object parent) {" + NL + "\t\t";
  protected final String TEXT_122 = " result = new ";
  protected final String TEXT_123 = "();" + NL + "\t\t";
  protected final String TEXT_124 = " children = new ";
  protected final String TEXT_125 = "(childViews);" + NL + "\t\tfor (int i = 0; i < children.size(); i++) {" + NL + "\t\t\tif (false == children.get(i) instanceof ";
  protected final String TEXT_126 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_127 = " nextChild = (";
  protected final String TEXT_128 = ") children.get(i);" + NL + "\t\t\tif (type.equals(nextChild.getType())) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_129 = "(nextChild, parent));" + NL + "\t\t\t} else if (!stopGettingChildren(nextChild, type)) {" + NL + "\t\t\t\tchildren.addAll(nextChild.getChildren());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingChildren(";
  protected final String TEXT_130 = " child, String type) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_131 = " getConnectedViews(";
  protected final String TEXT_132 = " rootView, String type, boolean isOutTarget, Object parent) {" + NL + "\t\t";
  protected final String TEXT_133 = " result = new ";
  protected final String TEXT_134 = "();" + NL + "\t\t";
  protected final String TEXT_135 = " connectedViews = new ";
  protected final String TEXT_136 = "();" + NL + "\t\tconnectedViews.add(rootView);" + NL + "\t\t";
  protected final String TEXT_137 = " visitedViews = new ";
  protected final String TEXT_138 = "();" + NL + "\t\tfor (int i = 0; i < connectedViews.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_139 = " nextView = (";
  protected final String TEXT_140 = ") connectedViews.get(i);" + NL + "\t\t\tif (visitedViews.contains(nextView)) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tvisitedViews.add(nextView);" + NL + "\t\t\tif (type.equals(nextView.getType()) && nextView != rootView) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_141 = "(nextView, parent));" + NL + "\t\t\t} else {" + NL + "\t\t\t\tif (isOutTarget && !stopGettingOutTarget(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getSourceEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_142 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getTarget());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} " + NL + "\t\t\t\tif (!isOutTarget && !stopGettingInSource(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getTargetEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_143 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getSource());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingInSource(";
  protected final String TEXT_144 = " nextView, ";
  protected final String TEXT_145 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingOutTarget(";
  protected final String TEXT_146 = " nextView, ";
  protected final String TEXT_147 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOneHopConnection(";
  protected final String TEXT_148 = " targetView, ";
  protected final String TEXT_149 = " sourceView) {" + NL + "\t\tif (sourceView == targetView) {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\tif (sourceView instanceof ";
  protected final String TEXT_150 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_151 = ";" + NL + "\t\t} if (sourceView instanceof ";
  protected final String TEXT_152 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_153 = ";" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_154 = NL;
d247 2
a248 1
    for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
d293 2
a294 1
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
a300 2
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_33);
d302 1
a302 2
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextReference.getChild() instanceof GenDiagram) {
d304 2
d312 1
a312 1
			} else if (nextReference.getChild() instanceof GenTopLevelNode) {
a321 10
			} else if (nextReference.getChild() instanceof GenLink) {
			
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_44);
    
d326 1
a326 1
    stringBuffer.append(TEXT_45);
d329 14
a342 3
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			boolean isOutTarget = nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL;
			if (nextCommonBase instanceof GenNode || nextCommonBase instanceof GenLink) {
d344 2
a345 7
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(isOutTarget);
    stringBuffer.append(TEXT_49);
d347 1
a347 1
    stringBuffer.append(TEXT_50);
a348 7
			} else {
			/* Any other "OUT_TAGET_LITERAL || IN_SOURCE_LITERAL" child refrences are not supported */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_51);
    
			}
d353 1
a353 1
    stringBuffer.append(TEXT_52);
d356 1
a356 1
    stringBuffer.append(TEXT_53);
d363 1
a363 1
    stringBuffer.append(TEXT_54);
d365 1
a365 1
    stringBuffer.append(TEXT_55);
d367 1
a367 1
    stringBuffer.append(TEXT_56);
d369 1
a369 1
    stringBuffer.append(TEXT_57);
d371 1
a371 1
    stringBuffer.append(TEXT_58);
d374 1
a374 1
    stringBuffer.append(TEXT_59);
d376 1
a376 1
    stringBuffer.append(TEXT_60);
d378 1
a378 1
    stringBuffer.append(TEXT_61);
d380 1
a380 1
    stringBuffer.append(TEXT_62);
d382 1
a382 1
    stringBuffer.append(TEXT_63);
d384 1
a384 1
    stringBuffer.append(TEXT_64);
d386 1
a386 1
    stringBuffer.append(TEXT_65);
d388 1
a388 1
    stringBuffer.append(TEXT_66);
d390 1
a390 1
    stringBuffer.append(TEXT_67);
d392 1
a392 1
    stringBuffer.append(TEXT_68);
d394 1
a394 1
    stringBuffer.append(TEXT_69);
d396 1
a396 1
    stringBuffer.append(TEXT_70);
d398 1
a398 1
    stringBuffer.append(TEXT_71);
d400 1
a400 1
    stringBuffer.append(TEXT_72);
d402 1
a402 1
    stringBuffer.append(TEXT_73);
d404 1
a404 1
    stringBuffer.append(TEXT_74);
d406 1
a406 1
    stringBuffer.append(TEXT_75);
d408 1
a408 1
    stringBuffer.append(TEXT_76);
d417 1
a417 1
    stringBuffer.append(TEXT_77);
d419 1
a419 1
    stringBuffer.append(TEXT_78);
d421 1
a421 1
    stringBuffer.append(TEXT_79);
d423 1
a423 1
    stringBuffer.append(TEXT_80);
d425 1
a425 1
    stringBuffer.append(TEXT_81);
d427 1
a427 1
    stringBuffer.append(TEXT_82);
d429 1
a429 1
    stringBuffer.append(TEXT_83);
d431 1
a431 1
    stringBuffer.append(TEXT_84);
d433 1
a433 1
    stringBuffer.append(TEXT_85);
d437 1
a437 1
    stringBuffer.append(TEXT_86);
d443 1
a443 1
    stringBuffer.append(TEXT_87);
d445 1
a445 1
    stringBuffer.append(TEXT_88);
d447 1
a447 1
    stringBuffer.append(TEXT_89);
d453 1
a453 1
    stringBuffer.append(TEXT_90);
a455 10
	} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
		
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(parentVariable);
    stringBuffer.append(TEXT_94);
    
d460 1
a460 1
    stringBuffer.append(TEXT_95);
d463 1
a463 1
    stringBuffer.append(TEXT_96);
d470 1
a470 1
    stringBuffer.append(TEXT_97);
d472 1
a472 1
    stringBuffer.append(TEXT_98);
d474 1
a474 1
    stringBuffer.append(TEXT_99);
d476 1
a476 1
    stringBuffer.append(TEXT_100);
d478 1
a478 1
    stringBuffer.append(TEXT_101);
d482 24
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d517 5
a521 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
d523 1
a523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d527 1
a527 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d529 1
a529 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d535 7
a541 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d543 1
a543 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d545 2
a546 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d548 5
a552 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d554 3
a556 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d558 5
a562 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d564 3
a566 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d568 3
a570 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d572 3
a574 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d576 4
a579 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d581 3
a583 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d585 2
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d596 2
a598 2
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d602 2
a604 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("java.util.Set"));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d624 1
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d642 56
d699 1
a699 1
    stringBuffer.append(TEXT_154);
@


1.1
log
@Read-only properties provided into the navigator.
@
text
@d45 1
a45 1
  protected final String TEXT_26 = ".MODEL_ID, navigatorItem.getView());";
d51 123
a173 137
  protected final String TEXT_32 = ".VISUAL_ID))";
  protected final String TEXT_33 = "getViewByType(navigatorItem.getView().eResource().getContents(), ";
  protected final String TEXT_34 = ".MODEL_ID)";
  protected final String TEXT_35 = "getViewByType(navigatorItem.getView().getDiagram().getChildren(), ";
  protected final String TEXT_36 = ".getType(";
  protected final String TEXT_37 = ".VISUAL_ID))";
  protected final String TEXT_38 = "getViewByType(navigatorItem.getView().getDiagram().getEdges(), ";
  protected final String TEXT_39 = ".getType(";
  protected final String TEXT_40 = ".VISUAL_ID))";
  protected final String TEXT_41 = ".EMPTY_LIST";
  protected final String TEXT_42 = "getConnectedViews(navigatorItem.getView(), ";
  protected final String TEXT_43 = ".getType(";
  protected final String TEXT_44 = ".VISUAL_ID), ";
  protected final String TEXT_45 = ")";
  protected final String TEXT_46 = ".EMPTY_LIST";
  protected final String TEXT_47 = ".EMPTY_LIST";
  protected final String TEXT_48 = ");";
  protected final String TEXT_49 = NL + "\t\t\t\tif (!";
  protected final String TEXT_50 = ".isEmpty()) {";
  protected final String TEXT_51 = NL + "\t\t\t\tresult.add(";
  protected final String TEXT_52 = ");";
  protected final String TEXT_53 = NL + "\t\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\t\treturn result.toArray();" + NL + "\t\t\t\t}";
  protected final String TEXT_55 = NL + "\t\t\t\t}" + NL + "\t\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_57 = " group = (";
  protected final String TEXT_58 = ") parentElement;" + NL + "\t\t\t\treturn group.getChildren();" + NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_59 = ") {" + NL + "\t    \t";
  protected final String TEXT_60 = " file = (";
  protected final String TEXT_61 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_62 = " editingDomain = (";
  protected final String TEXT_63 = ") ";
  protected final String TEXT_64 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\teditingDomain.setResourceToReadOnlyMap(new ";
  protected final String TEXT_65 = "() {" + NL + "\t\t\t\tpublic Object get(Object key) {" + NL + "\t\t\t\t\tif (!containsKey(key)) {" + NL + "\t\t\t\t\t\tput(key, Boolean.TRUE);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn super.get(key);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\t";
  protected final String TEXT_66 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_67 = " fileURI = ";
  protected final String TEXT_68 = ".createPlatformResourceURI(file.getFullPath().toString());" + NL + "\t\t\t";
  protected final String TEXT_69 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_70 = " result = new ";
  protected final String TEXT_71 = "();";
  protected final String TEXT_72 = NL + "\t\t\t";
  protected final String TEXT_73 = " ";
  protected final String TEXT_74 = " = new ";
  protected final String TEXT_75 = "(\"";
  protected final String TEXT_76 = "\", \"";
  protected final String TEXT_77 = "\", ";
  protected final String TEXT_78 = ".MODEL_ID, file);";
  protected final String TEXT_79 = NL + "\t\t\t";
  protected final String TEXT_80 = ".addChildren(";
  protected final String TEXT_81 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_82 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_83 = ".MODEL_ID)";
  protected final String TEXT_84 = ".EMPTY_LIST";
  protected final String TEXT_85 = "getChildByType(resource.getContents(), ";
  protected final String TEXT_86 = ".getType(";
  protected final String TEXT_87 = ".VISUAL_ID))";
  protected final String TEXT_88 = ".EMPTY_LIST";
  protected final String TEXT_89 = ");";
  protected final String TEXT_90 = NL + "\t\t\tif (!";
  protected final String TEXT_91 = ".isEmpty()) {";
  protected final String TEXT_92 = NL + "\t\t\tresult.add(";
  protected final String TEXT_93 = ");";
  protected final String TEXT_94 = NL + "\t\t\t}";
  protected final String TEXT_95 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "    \tif (element instanceof ";
  protected final String TEXT_96 = ") {" + NL + "    \t\t";
  protected final String TEXT_97 = " abstractNavigatorItem = (";
  protected final String TEXT_98 = ") element;" + NL + "\t\t\tif (!";
  protected final String TEXT_99 = ".MODEL_ID.equals(abstractNavigatorItem.getModelID())) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif (abstractNavigatorItem instanceof ";
  protected final String TEXT_100 = ") {" + NL + "    \t\t\t";
  protected final String TEXT_101 = " navigatorItem = (";
  protected final String TEXT_102 = ") abstractNavigatorItem;" + NL + "\t\t\t\tswitch (navigatorItem.getVisualID()) {";
  protected final String TEXT_103 = NL + "\t\t\t\tcase ";
  protected final String TEXT_104 = ".VISUAL_ID: { ";
  protected final String TEXT_105 = NL + "\t\t\t\t\t";
  protected final String TEXT_106 = " group = new ";
  protected final String TEXT_107 = "(\"";
  protected final String TEXT_108 = "\", \"";
  protected final String TEXT_109 = "\", ";
  protected final String TEXT_110 = ".MODEL_ID, ";
  protected final String TEXT_111 = NL + "\t\t\t\t\treturn ";
  protected final String TEXT_112 = "navigatorItem.getView().eContainer()";
  protected final String TEXT_113 = ".getFile(navigatorItem.getView().eResource())";
  protected final String TEXT_114 = ");" + NL + "\t\t\t\t\tgroup.addChild(navigatorItem.getView());" + NL + "\t\t\t\t\treturn group;";
  protected final String TEXT_115 = ";";
  protected final String TEXT_116 = "\t\t\t" + NL + "\t\t\t\t}";
  protected final String TEXT_117 = NL + "\t\t\t\t}" + NL + "\t\t\t} else if (abstractNavigatorItem instanceof ";
  protected final String TEXT_118 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_119 = " group = (";
  protected final String TEXT_120 = ") abstractNavigatorItem;" + NL + "\t\t\t\treturn group.getParent();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_121 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_122 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_123 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_124 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_125 = " getViewByType(";
  protected final String TEXT_126 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_127 = " result = new ";
  protected final String TEXT_128 = "();" + NL + "\t\tfor (";
  protected final String TEXT_129 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_130 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_131 = " nextView = (";
  protected final String TEXT_132 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_133 = "(nextView));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_134 = " getChildByType(";
  protected final String TEXT_135 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_136 = " result = new ";
  protected final String TEXT_137 = "();" + NL + "\t\t";
  protected final String TEXT_138 = " children = new ";
  protected final String TEXT_139 = "(childViews);" + NL + "\t\tfor (int i = 0; i < children.size(); i++) {" + NL + "\t\t\tif (false == children.get(i) instanceof ";
  protected final String TEXT_140 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_141 = " nextChild = (";
  protected final String TEXT_142 = ") children.get(i);" + NL + "\t\t\tif (type.equals(nextChild.getType())) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_143 = "(nextChild));" + NL + "\t\t\t} else if (!stopGettingChildren(nextChild, type)) {" + NL + "\t\t\t\tchildren.addAll(nextChild.getChildren());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingChildren(";
  protected final String TEXT_144 = " child, String type) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_145 = " getConnectedViews(";
  protected final String TEXT_146 = " rootView, String type, boolean isOutTarget) {" + NL + "\t\t";
  protected final String TEXT_147 = " result = new ";
  protected final String TEXT_148 = "();" + NL + "\t\t";
  protected final String TEXT_149 = " connectedViews = new ";
  protected final String TEXT_150 = "();" + NL + "\t\tconnectedViews.add(rootView);" + NL + "\t\t";
  protected final String TEXT_151 = " visitedViews = new ";
  protected final String TEXT_152 = "();" + NL + "\t\tfor (int i = 0; i < connectedViews.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_153 = " nextView = (";
  protected final String TEXT_154 = ") connectedViews.get(i);" + NL + "\t\t\tif (visitedViews.contains(nextView)) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tvisitedViews.add(nextView);" + NL + "\t\t\tif (type.equals(nextView.getType()) && nextView != rootView) {" + NL + "\t\t\t\tresult.add(new ";
  protected final String TEXT_155 = "(nextView));" + NL + "\t\t\t} else {" + NL + "\t\t\t\tif (isOutTarget && !stopGettingOutTarget(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getSourceEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_156 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getTarget());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} " + NL + "\t\t\t\tif (!isOutTarget && !stopGettingInSource(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getTargetEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_157 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getSource());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingInSource(";
  protected final String TEXT_158 = " nextView, ";
  protected final String TEXT_159 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingOutTarget(";
  protected final String TEXT_160 = " nextView, ";
  protected final String TEXT_161 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOneHopConnection(";
  protected final String TEXT_162 = " targetView, ";
  protected final String TEXT_163 = " sourceView) {" + NL + "\t\tif (sourceView == targetView) {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\tif (sourceView instanceof ";
  protected final String TEXT_164 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_165 = ";" + NL + "\t\t} if (sourceView instanceof ";
  protected final String TEXT_166 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_167 = ";" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_168 = NL;
d234 1
d236 3
a238 3
			String groupNameKey = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(groupNameKey)) {
				createdGroups.put(groupNameKey, nextReference);
d242 1
a242 1
    stringBuffer.append(groupNameKey);
d254 1
a254 1
    stringBuffer.append(groupNameKey);
d258 1
d270 2
d276 1
a276 1
    stringBuffer.append(TEXT_33);
d278 3
a280 1
    stringBuffer.append(TEXT_34);
d284 1
a284 1
    stringBuffer.append(TEXT_35);
d286 1
a286 1
    stringBuffer.append(TEXT_36);
d288 3
a290 1
    stringBuffer.append(TEXT_37);
d294 1
a294 1
    stringBuffer.append(TEXT_38);
d296 1
a296 1
    stringBuffer.append(TEXT_39);
d298 3
a300 1
    stringBuffer.append(TEXT_40);
d306 1
a306 1
    stringBuffer.append(TEXT_41);
d313 1
a313 1
    stringBuffer.append(TEXT_42);
d315 1
a315 1
    stringBuffer.append(TEXT_43);
d317 1
a317 1
    stringBuffer.append(TEXT_44);
d319 3
a321 1
    stringBuffer.append(TEXT_45);
d327 1
a327 1
    stringBuffer.append(TEXT_46);
d334 1
a334 1
    stringBuffer.append(TEXT_47);
d337 1
a337 1
    stringBuffer.append(TEXT_48);
d344 1
a344 1
    stringBuffer.append(TEXT_49);
d346 1
a346 1
    stringBuffer.append(TEXT_50);
d348 1
a348 1
    stringBuffer.append(TEXT_51);
d350 1
a350 1
    stringBuffer.append(TEXT_52);
d352 1
a352 1
    stringBuffer.append(TEXT_53);
d355 1
a355 1
    stringBuffer.append(TEXT_54);
d357 1
a357 1
    stringBuffer.append(TEXT_55);
d359 1
a359 1
    stringBuffer.append(TEXT_56);
d361 1
a361 1
    stringBuffer.append(TEXT_57);
d363 1
a363 1
    stringBuffer.append(TEXT_58);
d365 1
a365 1
    stringBuffer.append(TEXT_59);
d367 1
a367 1
    stringBuffer.append(TEXT_60);
d369 1
a369 1
    stringBuffer.append(TEXT_61);
d371 1
a371 1
    stringBuffer.append(TEXT_62);
d373 1
a373 1
    stringBuffer.append(TEXT_63);
d375 1
a375 1
    stringBuffer.append(TEXT_64);
d377 1
a377 1
    stringBuffer.append(TEXT_65);
d379 1
a379 1
    stringBuffer.append(TEXT_66);
d381 1
a381 1
    stringBuffer.append(TEXT_67);
d383 1
a383 1
    stringBuffer.append(TEXT_68);
d385 1
a385 1
    stringBuffer.append(TEXT_69);
d387 1
a387 1
    stringBuffer.append(TEXT_70);
d389 1
a389 1
    stringBuffer.append(TEXT_71);
d393 1
d395 4
a398 4
		String groupNameKey = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(groupNameKey)) {
			createdDiagramGroups.put(groupNameKey, nextReference);
    stringBuffer.append(TEXT_72);
d400 3
a402 3
    stringBuffer.append(TEXT_73);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_74);
d404 1
a404 1
    stringBuffer.append(TEXT_75);
d406 1
a406 1
    stringBuffer.append(TEXT_76);
d408 1
a408 1
    stringBuffer.append(TEXT_77);
d410 1
a410 1
    stringBuffer.append(TEXT_78);
d412 3
a414 3
    stringBuffer.append(TEXT_79);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_80);
d417 2
a418 1
    stringBuffer.append(TEXT_81);
a420 1
	
d424 1
a424 1
    stringBuffer.append(TEXT_82);
d426 3
a428 1
    stringBuffer.append(TEXT_83);
d434 1
a434 1
    stringBuffer.append(TEXT_84);
d439 1
a439 1
    stringBuffer.append(TEXT_85);
d441 1
a441 1
    stringBuffer.append(TEXT_86);
d443 3
a445 1
    stringBuffer.append(TEXT_87);
d451 1
a451 1
    stringBuffer.append(TEXT_88);
d454 1
a454 1
    stringBuffer.append(TEXT_89);
d461 1
a461 1
    stringBuffer.append(TEXT_90);
d463 1
a463 1
    stringBuffer.append(TEXT_91);
d465 1
a465 1
    stringBuffer.append(TEXT_92);
d467 1
a467 1
    stringBuffer.append(TEXT_93);
d469 1
a469 1
    stringBuffer.append(TEXT_94);
d473 1
a473 1
    stringBuffer.append(TEXT_95);
d475 1
a475 1
    stringBuffer.append(TEXT_96);
d477 1
a477 1
    stringBuffer.append(TEXT_97);
d479 1
a479 1
    stringBuffer.append(TEXT_98);
a480 41
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_102);
    for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	for (Iterator it = childReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
			theReference = nextReference;
		}
	}
	
	for (Iterator it = childReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			}
		}
	}
	
	if (theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_104);
    	if (theReference.isInsideGroup()) {
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d484 1
a484 1
    stringBuffer.append(theReference.getGroupName());
d486 1
a486 1
    stringBuffer.append(theReference.getGroupIcon());
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d490 1
a490 2
    
	} else {
d492 1
a492 6
    
	}
	
	if (theReference.getParent() != null) {
		/* Child reference only */
		
d494 1
a494 5
    
	} else {
		/* Child reference with parent == null or default reference for diagram */
		
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d496 1
a496 5
    
	}
	
	if (theReference.isInsideGroup()) {
		
d498 1
a498 2
    	} else {
		
d500 1
a500 1
    	}
d502 1
a502 1
    }
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorGroupQualifiedClassName()));
d510 1
a510 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d512 1
a512 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d530 1
a530 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d542 1
a542 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d544 1
a544 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d546 1
a546 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d552 1
a552 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d554 1
a554 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("java.util.Set"));
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a577 28
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_167);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_168);
@

