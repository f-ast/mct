head	1.21;
access;
symbols
	v20081022-1925:1.21
	v20081015-1925:1.21
	v20081008-1925:1.21
	v20081001-1925:1.21
	v20080924-1925:1.21
	v20080917-1925:1.21
	v20080911-1728:1.21
	v20080910-1520:1.21
	v20080903-1520:1.21
	v20080827-1520:1.21
	v20080813-1520:1.21
	v20080806-1520:1.21
	RC3_20:1.20
	v20070614-1400:1.20
	v20070608-1300:1.20
	v20070605-1400:1.20
	v20070601-1400:1.19
	v20070525-1500:1.19
	v20070520-1200:1.19
	v20070518-1300:1.18
	v20070504-1000:1.18
	v20070427-0600:1.18
	v20070420-1000:1.17
	v20070413-1300:1.17
	v20070405-1100:1.17
	v20070403-1500:1.17
	v20070330-1300:1.17
	v20060330-1300:1.17
	v20070322-1100:1.17
	v20060316-0600:1.17
	v20070307-0700:1.17
	v20070301-1200:1.17
	v20070228-2000:1.17
	v20070221-1500:1.17
	v20070208-1800:1.17
	v20070202-0200:1.14
	v20070103-0300:1.17
	M4_20:1.17
	v20061222-1800:1.17
	v20061218-1200:1.17
	v20061214-0000:1.17
	v20061120-1300:1.15
	M3_20:1.15
	v20061117-0800:1.15
	v20061027-1200:1.14
	v20061020-1000:1.14
	v20061013-1330:1.15
	v20060919-0800:1.14
	v20060907-1100:1.14
	M1_20:1.14
	v20060904-1500:1.14
	v20060824-1600:1.14
	v20060817-1500:1.14
	v20060728-0500:1.14
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060620-0400:1.14
	v20060616-1400:1.14
	v20060616-1200:1.14
	v20060609-1400:1.13
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.11
	v20060519-1300:1.11
	v20060519-0800:1.11
	v20060512-1000:1.10
	I20060512-1000:1.10
	I20060505-1400:1.10
	I20060428-1300:1.10
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.7
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.1
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.21
date	2007.06.15.14.58.03;	author dstadnik;	state dead;
branches;
next	1.20;
commitid	6d674672a8f74567;

1.20
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	17ef46643bcf4567;

1.19
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.18;
commitid	7de14650454a4567;

1.18
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	78b462dc68e4567;

1.17
date	2006.12.12.12.00.00;	author dstadnik;	state Exp;
branches;
next	1.16;
commitid	2d28457e99bb4567;

1.16
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	5f734567714f4567;

1.15
date	2006.09.26.15.41.04;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.11.41.48;	author dstadnik;	state dead;
branches;
next	1.7;

1.7
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.14.13.20.08;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.05.18.48.06;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.21
log
@[192850] Rewrite GraphicalNodeEditPolicy.javajet template in xpand
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class GraphicalNodeEditPolicyGenerator
{
  protected static String nl;
  public static synchronized GraphicalNodeEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    GraphicalNodeEditPolicyGenerator result = new GraphicalNodeEditPolicyGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_7 = " getConnectionCompleteCommand(" + NL + "\t\t\t";
  protected final String TEXT_8 = " request) {" + NL + "\t\t";
  protected final String TEXT_9 = " elementType = getElementType(request);";
  protected final String TEXT_10 = NL + "\t\tif (";
  protected final String TEXT_11 = ".";
  protected final String TEXT_12 = " == elementType) {";
  protected final String TEXT_13 = NL + "\t\t\tif (request.getSourceEditPart() != getHost()) {";
  protected final String TEXT_14 = NL + "\t\t\treturn getConnectionWithReorientedViewCompleteCommand(request);";
  protected final String TEXT_15 = NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t}";
  protected final String TEXT_17 = NL + "\t\treturn super.getConnectionCompleteCommand(request);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_18 = " getElementType(";
  protected final String TEXT_19 = " request) {" + NL + "\t\tif (request instanceof ";
  protected final String TEXT_20 = ") {" + NL + "\t\t\t";
  protected final String TEXT_21 = " requestAdapter = ((";
  protected final String TEXT_22 = ") request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (";
  protected final String TEXT_23 = ") requestAdapter.getAdapter(";
  protected final String TEXT_24 = ".class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_25 = " getConnectionWithReorientedViewCompleteCommand(";
  protected final String TEXT_26 = " request) {" + NL + "\t\t";
  protected final String TEXT_27 = " c = (";
  protected final String TEXT_28 = ") super.getConnectionCompleteCommand(request);" + NL + "\t\t";
  protected final String TEXT_29 = " cc = (";
  protected final String TEXT_30 = ") c.getICommand();" + NL + "\t\t";
  protected final String TEXT_31 = " editingDomain = ((";
  protected final String TEXT_32 = ") getHost()).getEditingDomain();" + NL + "\t\t";
  protected final String TEXT_33 = " rcvCommand =" + NL + "\t\t\tnew ";
  protected final String TEXT_34 = "(editingDomain, null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
  protected final String TEXT_35 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenNode genNode = (GenNode) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = genNode.getDiagram();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genNode.getGraphicalNodeEditPolicyClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_9);
    	for (Iterator it = genNode.getReorientedIncomingLinks().iterator(); it.hasNext();) {
		GenLink nextLink = (GenLink) it.next();
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_12);
    		if (nextLink.isOutgoingCreationAllowed()) {
    stringBuffer.append(TEXT_13);
    		}
    stringBuffer.append(TEXT_14);
    		if (nextLink.isOutgoingCreationAllowed()) {
    stringBuffer.append(TEXT_15);
    		}
    stringBuffer.append(TEXT_16);
    	}
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(genDiagram.getReorientConnectionViewCommandQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(genDiagram.getReorientConnectionViewCommandQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_35);
    return stringBuffer.toString();
  }
}
@


1.20
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.19
log
@Anna Karyakina's migration fix
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.18
log
@follow consisted spacing policy
@
text
@d19 35
a53 36
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_8 = " getConnectionCompleteCommand(" + NL + "\t\t\t";
  protected final String TEXT_9 = " request) {" + NL + "\t\t";
  protected final String TEXT_10 = " elementType = getElementType(request);";
  protected final String TEXT_11 = NL + "\t\tif (";
  protected final String TEXT_12 = ".";
  protected final String TEXT_13 = " == elementType) {";
  protected final String TEXT_14 = NL + "\t\t\tif (request.getSourceEditPart() != getHost()) {";
  protected final String TEXT_15 = NL + "\t\t\treturn getConnectionWithReorientedViewCompleteCommand(request);";
  protected final String TEXT_16 = NL + "\t\t\t}";
  protected final String TEXT_17 = NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\treturn super.getConnectionCompleteCommand(request);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_19 = " getElementType(";
  protected final String TEXT_20 = " request) {" + NL + "\t\tif (request instanceof ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\t";
  protected final String TEXT_22 = " requestAdapter = ((";
  protected final String TEXT_23 = ") request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (";
  protected final String TEXT_24 = ") requestAdapter.getAdapter(";
  protected final String TEXT_25 = ".class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_26 = " getConnectionWithReorientedViewCompleteCommand(";
  protected final String TEXT_27 = " request) {" + NL + "\t\t";
  protected final String TEXT_28 = " c = (";
  protected final String TEXT_29 = ") super.getConnectionCompleteCommand(request);" + NL + "\t\t";
  protected final String TEXT_30 = " cc = (";
  protected final String TEXT_31 = ") c.getICommand();" + NL + "\t\t";
  protected final String TEXT_32 = " editingDomain = ((";
  protected final String TEXT_33 = ") getHost()).getEditingDomain();" + NL + "\t\t";
  protected final String TEXT_34 = " rcvCommand =" + NL + "\t\t\tnew ";
  protected final String TEXT_35 = "(editingDomain, null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
  protected final String TEXT_36 = NL;
a62 1
    stringBuffer.append(TEXT_1);
d67 2
a69 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d72 2
d75 1
a75 1
    importManager.markImportLocation(stringBuffer);
d77 1
a77 1
    stringBuffer.append(genNode.getGraphicalNodeEditPolicyClassName());
d79 1
a79 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy"));
d81 1
a81 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
a84 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_10);
d87 2
d90 1
a90 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d92 1
a92 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d94 2
d97 1
a97 1
    stringBuffer.append(TEXT_14);
a98 2
    stringBuffer.append(TEXT_15);
    		if (nextLink.isOutgoingCreationAllowed()) {
d100 1
a100 1
    		}
d102 1
a102 1
    	}
d104 1
a104 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d106 1
a106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
d108 2
a110 2
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter"));
d112 1
a112 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest"));
d116 1
a116 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d118 1
a118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d120 1
a120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.requests.CreateConnectionRequest"));
d124 1
a124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getReorientConnectionViewCommandQualifiedClassName()));
a137 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_36);
@


1.17
log
@change getRevertedIncomingLinks() method to property for xpand templates
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d70 1
a70 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.16
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d87 1
a87 1
    	for (Iterator it = genNode.getReorientedIncomingGenLinks().iterator(); it.hasNext();) {
@


1.15
log
@do not generate GraphicalNodeEditPolicy unless there's smth for it to do
@
text
@d31 24
a54 5
  protected final String TEXT_13 = " == elementType) {" + NL + "\t\t\treturn getConnectionWithReorientedViewCompleteCommand(request);" + NL + "\t\t}";
  protected final String TEXT_14 = NL + "\t\treturn super.getConnectionCompleteCommand(request);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCompleteCommand(CreateConnectionRequest request) {" + NL + "\t\tICommandProxy c = (ICommandProxy) super.getConnectionCompleteCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t";
  protected final String TEXT_15 = " rcvCommand =" + NL + "\t\t\tnew ";
  protected final String TEXT_16 = "(editingDomain, null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;
d94 8
d103 31
a133 1
    stringBuffer.append(TEXT_14);
d135 1
a135 1
    stringBuffer.append(TEXT_15);
d137 1
a137 1
    stringBuffer.append(TEXT_16);
d139 1
a139 1
    stringBuffer.append(TEXT_17);
@


1.14
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d3 1
d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.requests.CreateConnectionRequest;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d24 12
a35 4
  protected final String TEXT_6 = " extends GraphicalNodeEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCompleteCommand(CreateConnectionRequest request) {" + NL + "\t\tICommandProxy c = (ICommandProxy) super.getConnectionCompleteCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t";
  protected final String TEXT_7 = " rcvCommand =" + NL + "\t\t\tnew ";
  protected final String TEXT_8 = "(editingDomain, null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d41 1
a41 1
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d43 1
d58 1
a58 1
    stringBuffer.append(genDiagram.getBaseGraphicalNodeEditPolicyClassName());
d60 17
d78 1
a78 1
    stringBuffer.append(TEXT_7);
d80 1
a80 1
    stringBuffer.append(TEXT_8);
d82 1
a82 1
    stringBuffer.append(TEXT_9);
@


1.13
log
@header comment should not be a javadoc comment
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.requests.CreateConnectionRequest;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d23 1
a23 1
  protected final String TEXT_6 = " extends GraphicalNodeEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCompleteCommand(CreateConnectionRequest request) {" + NL + "\t\tEtoolsProxyCommand c = (EtoolsProxyCommand) super.getConnectionCompleteCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t";
@


1.12
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.11
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d41 1
a41 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.10
log
@using M6 to generate code.
@
text
@d21 6
a26 8
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.requests.CreateConnectionRequest;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends GraphicalNodeEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCompleteCommand(CreateConnectionRequest request) {" + NL + "\t\tEtoolsProxyCommand c = (EtoolsProxyCommand) super.getConnectionCompleteCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t";
  protected final String TEXT_9 = " rcvCommand =" + NL + "\t\t\tnew ";
  protected final String TEXT_10 = "(editingDomain, null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;
d31 4
a34 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d44 1
d46 1
a46 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d48 1
a48 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
d50 1
a50 1
    importManager.markImportLocation(stringBuffer);
d52 1
a52 1
    stringBuffer.append(genDiagram.getBaseGraphicalNodeEditPolicyClassName());
d54 1
a54 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getReorientConnectionViewCommandQualifiedClassName()));
a55 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getReorientConnectionViewCommandQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_11);
@


1.9
log
@restore generators
@
text
@d32 1
a32 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.8
log
@#134095 do not store compiled templates in cvs
@
text
@d32 1
a32 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@Switching to eclipse M6.
@
text
@@


1.6
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d32 1
a32 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.5
log
@use new transactional emf api
@
text
@d18 11
a28 8
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.requests.CreateConnectionRequest;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends GraphicalNodeEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCompleteCommand(CreateConnectionRequest request) {" + NL + "\t\tEtoolsProxyCommand c = (EtoolsProxyCommand) super.getConnectionCompleteCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\t";
  protected final String TEXT_6 = " rcvCommand =" + NL + "\t\t\tnew ";
  protected final String TEXT_7 = "(editingDomain, null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d35 9
d45 1
a45 1
    stringBuffer.append(TEXT_2);
d47 1
a47 1
    stringBuffer.append(TEXT_3);
d49 1
a49 1
    stringBuffer.append(TEXT_4);
d51 1
a51 1
    stringBuffer.append(TEXT_5);
d53 1
a53 1
    stringBuffer.append(TEXT_6);
d55 1
a55 1
    stringBuffer.append(TEXT_7);
d57 1
a57 1
    stringBuffer.append(TEXT_8);
@


1.4
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.requests.CreateConnectionRequest;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.core.edithelpers.CreateElementRequestAdapter;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.GraphicalNodeEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewAndElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d22 1
a22 1
  protected final String TEXT_5 = " extends GraphicalNodeEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCompleteCommand(CreateConnectionRequest request) {" + NL + "\t\tEtoolsProxyCommand c = (EtoolsProxyCommand) super.getConnectionCompleteCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\t";
d24 1
a24 1
  protected final String TEXT_7 = "(null);" + NL + "\t\trcvCommand.setEdgeAdaptor(getViewAdapter());" + NL + "\t\tcc.compose(rcvCommand);" + NL + "\t\treturn c;" + NL + "\t}" + NL + "}";
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d30 1
a30 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.2
log
@#119279
Reverting link in accordance with model link.
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.1
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d22 1
a22 1
  protected final String TEXT_5 = " extends GraphicalNodeEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IElementType getElementType(CreateConnectionRequest request) {" + NL + "\t\tif (request instanceof CreateConnectionViewAndElementRequest) {" + NL + "\t\t\tCreateElementRequestAdapter requestAdapter = ((CreateConnectionViewAndElementRequest) request)" + NL + "\t\t\t\t\t.getConnectionViewAndElementDescriptor().getCreateElementRequestAdapter();" + NL + "\t\t\treturn (IElementType) requestAdapter.getAdapter(IElementType.class);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getConnectionWithReorientedViewCreateCommand(CreateConnectionRequest request) {" + NL + "\t\tEtoolsProxyCommand c = (EtoolsProxyCommand) super.getConnectionCreateCommand(request);" + NL + "\t\tCompositeCommand cc = (CompositeCommand) c.getICommand();" + NL + "\t\t";
@

