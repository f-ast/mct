head	1.60;
access;
symbols
	v20081022-1925:1.60
	v20081015-1925:1.60
	v20081008-1925:1.60
	v20081001-1925:1.60
	v20080924-1925:1.60
	v20080917-1925:1.60
	v20080911-1728:1.60
	v20080910-1520:1.60
	v20080903-1520:1.60
	v20080827-1520:1.60
	v20080813-1520:1.60
	v20080806-1520:1.60
	v20070420-1000:1.58
	v20070413-1300:1.58
	v20070405-1100:1.57
	v20070403-1500:1.56
	v20070330-1300:1.55
	v20060330-1300:1.55
	v20070322-1100:1.54
	v20060316-0600:1.54
	v20070307-0700:1.54
	v20070301-1200:1.54
	v20070228-2000:1.53
	v20070221-1500:1.53
	v20070208-1800:1.52
	v20070202-0200:1.42.2.1
	v20070103-0300:1.51
	M4_20:1.51
	v20061222-1800:1.51
	v20061218-1200:1.51
	v20061214-0000:1.51
	v20061120-1300:1.50
	M3_20:1.50
	v20061117-0800:1.50
	v20061027-1200:1.42.2.1
	v20061020-1000:1.42.2.1
	v20061013-1330:1.49
	v20060919-0800:1.42.2.1
	v20060907-1100:1.42.2.1
	M1_20:1.46
	v20060904-1500:1.46
	v20060824-1600:1.42.2.1
	v20060817-1500:1.42.2.1
	v20060728-0500:1.42
	v20060713-1700:1.42
	R1_0_maintenance:1.42.0.2
	R1_0:1.42
	v20060627-1200:1.42
	v20060626-1420:1.41
	v20060620-0400:1.41
	v20060616-1400:1.40
	v20060616-1200:1.40
	v20060609-1400:1.39
	v20060531-1730:1.38
	v20060530-1930:1.38
	v20060526-1200:1.36
	v20060519-1300:1.35
	v20060519-0800:1.34
	v20060512-1000:1.30
	I20060512-1000:1.30
	I20060505-1400:1.30
	I20060428-1300:1.30
	I20060424-0500:1.28
	I20060424-0300:1.28
	M6_10:1.26
	I20060407-1200:1.20
	I20060331-1000:1.18
	I20060324-0300:1.18
	I20060317-1300:1.17
	I20060317-1200:1.17
	I20060316-1300:1.17
	I20060309-1300:1.17
	M5_10:1.16
	S20060303-1600:1.16
	I20060227-1730:1.15
	I20060216-1945:1.14
	I20060210-1715:1.14
	I20060209-1815:1.14
	I20060203-0830:1.10
	I20060202-1415:1.10
	I20060129-1145:1.10
	I20060127-0900:1.10
	I20060120-1530:1.8
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.60
date	2007.04.24.18.22.42;	author ashatalin;	state dead;
branches;
next	1.59;
commitid	1456462e4af04567;

1.59
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.58;
commitid	78b462dc68e4567;

1.58
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.57;
commitid	58c0461bdcea4567;

1.57
date	2007.04.04.19.46.27;	author ashatalin;	state Exp;
branches;
next	1.56;
commitid	21fb461400904567;

1.56
date	2007.04.03.11.15.14;	author ashatalin;	state Exp;
branches;
next	1.55;
commitid	45b0461237404567;

1.55
date	2007.03.26.17.08.26;	author ashatalin;	state Exp;
branches;
next	1.54;
commitid	24de4607fe084567;

1.54
date	2007.03.01.13.05.36;	author dstadnik;	state Exp;
branches;
next	1.53;
commitid	1a6045e6cf9e4567;

1.53
date	2007.02.21.12.36.01;	author ashatalin;	state Exp;
branches;
next	1.52;
commitid	500645dc3caf4567;

1.52
date	2007.01.29.19.30.15;	author ashatalin;	state Exp;
branches;
next	1.51;
commitid	7ac145be4b464567;

1.51
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.50;
commitid	5f734567714f4567;

1.50
date	2006.10.18.14.21.46;	author dstadnik;	state Exp;
branches;
next	1.49;

1.49
date	2006.10.06.15.26.31;	author atikhomirov;	state Exp;
branches;
next	1.48;

1.48
date	2006.10.06.13.28.47;	author atikhomirov;	state Exp;
branches;
next	1.47;

1.47
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.08.21.12.31.00;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.08.17.17.06.15;	author ashatalin;	state Exp;
branches;
next	1.44;

1.44
date	2006.08.01.18.02.34;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.07.21.11.46.26;	author atikhomirov;	state Exp;
branches;
next	1.42;

1.42
date	2006.06.27.13.43.24;	author ashatalin;	state Exp;
branches
	1.42.2.1;
next	1.41;

1.41
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.39;

1.39
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.37;

1.37
date	2006.05.29.13.55.18;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.19.14.11.42;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.12.14.52.53;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.04.27.13.58.08;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.04.27.12.52.07;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.04.21.17.12.00;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.14.11.39.49;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.08.17.19.55;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.08.11.41.48;	author dstadnik;	state dead;
branches;
next	1.20;

1.20
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.04.14.12.04;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.03.15.34.18;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.17.12.02.06;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.13.09.29;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.25.11.55.43;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.03.17.25.14;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.12.13.54.08;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.07.17.07.00;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.29.18.33.25;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.29.16.42.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	;

1.42.2.1
date	2006.08.17.17.10.33;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.60
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class DiagramCanonicalEditPolicyGenerator {
 
  protected static String nl;
  public static synchronized DiagramCanonicalEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DiagramCanonicalEditPolicyGenerator result = new DiagramCanonicalEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.List;" + NL + "import java.util.Collection;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.emf.ecore.EObject;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "\t";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_10 = " getSemanticChildrenList() {";
  protected final String TEXT_11 = NL + "\t";
  protected final String TEXT_12 = " result = new ";
  protected final String TEXT_13 = "();" + NL + "\t";
  protected final String TEXT_14 = " modelObject = ((";
  protected final String TEXT_15 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_16 = " viewObject = (";
  protected final String TEXT_17 = ") getHost().getModel();";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = "\t";
  protected final String TEXT_20 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_21 = "\t\tnextValue = /*FIXME no containment/child feature found in the genmodel, toolsmith need to specify correct one here manually*/";
  protected final String TEXT_22 = "\tfor (";
  protected final String TEXT_23 = " values = ";
  protected final String TEXT_24 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_25 = ") values.next();";
  protected final String TEXT_26 = NL + "\tnextValue = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + "\tnodeVID = ";
  protected final String TEXT_29 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_30 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_31 = NL + "\tcase ";
  protected final String TEXT_32 = ".VISUAL_ID: {";
  protected final String TEXT_33 = NL + "\tif (";
  protected final String TEXT_34 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_35 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = "\t\tbreak;";
  protected final String TEXT_38 = "\t}";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "\t}";
  protected final String TEXT_41 = NL + "\treturn result;";
  protected final String TEXT_42 = NL + "\treturn ";
  protected final String TEXT_43 = ".EMPTY_LIST;";
  protected final String TEXT_44 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_45 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());" + NL + "\t}";
  protected final String TEXT_46 = NL + "\tint nodeVID = ";
  protected final String TEXT_47 = ".getVisualID(view);" + NL + "\tswitch (nodeVID) {\t";
  protected final String TEXT_48 = NL + "\tcase ";
  protected final String TEXT_49 = ".VISUAL_ID:";
  protected final String TEXT_50 = NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_51 = NL + "\treturn false;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_52 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_55 = " createdViews = new ";
  protected final String TEXT_56 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_57 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_58 = NL + "\t\t";
  protected final String TEXT_59 = " createdConnectionViews = new ";
  protected final String TEXT_60 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_61 = " layoutCmd = new ";
  protected final String TEXT_62 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_63 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_64 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_65 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_66 = " phantomNodes = new ";
  protected final String TEXT_67 = "();" + NL + "\t\t";
  protected final String TEXT_68 = " diagramModelObject = ((";
  protected final String TEXT_69 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_70 = " diagram = getDiagram();";
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_73 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_74 = " nextResourceObject = (";
  protected final String TEXT_75 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_76 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_77 = NL + "\tcase ";
  protected final String TEXT_78 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_81 = "\t}" + NL + "}";
  protected final String TEXT_82 = NL;
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = "for (";
  protected final String TEXT_85 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_86 = " nextView = (";
  protected final String TEXT_87 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_88 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_91 = " createPhantomNodes(";
  protected final String TEXT_92 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_93 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_94 = " descriptors = new ";
  protected final String TEXT_95 = "();" + NL + "\tfor (";
  protected final String TEXT_96 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_97 = " element = (";
  protected final String TEXT_98 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_99 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_100 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_101 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_102 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_103 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_104 = " cc = new ";
  protected final String TEXT_105 = "(";
  protected final String TEXT_106 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_107 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_108 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_109 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_110 = " createCommand = new ";
  protected final String TEXT_111 = "(((";
  protected final String TEXT_112 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_113 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_114 = " adapters = ";
  protected final String TEXT_115 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_116 = ".makeMutable(new ";
  protected final String TEXT_117 = "(((";
  protected final String TEXT_118 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_119 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_120 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_121 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_122 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_123 = " myLinkDescriptors = new ";
  protected final String TEXT_124 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_125 = " myEObject2ViewMap = new ";
  protected final String TEXT_126 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_127 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_128 = " existingLinks = new ";
  protected final String TEXT_129 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_130 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_131 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_132 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_133 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_134 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_135 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_136 = " view) {" + NL + "\t\t";
  protected final String TEXT_137 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_138 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_139 = NL + "\t\tcase ";
  protected final String TEXT_140 = ".VISUAL_ID:";
  protected final String TEXT_141 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_142 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_143 = " childView = (";
  protected final String TEXT_144 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_145 = " createConnections(";
  protected final String TEXT_146 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_147 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_148 = " adapters = new ";
  protected final String TEXT_149 = "();" + NL + "\t\tfor (";
  protected final String TEXT_150 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_151 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_152 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_153 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_154 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_155 = ".APPEND, false, ((";
  protected final String TEXT_156 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_157 = " ccr = new ";
  protected final String TEXT_158 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_159 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_160 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_161 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_162 = " viewAdapter = (";
  protected final String TEXT_163 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_164 = " getEditPartFor(";
  protected final String TEXT_165 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_166 = " view = (";
  protected final String TEXT_167 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_168 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_169 = NL;
  protected final String TEXT_170 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_171 = " container, ";
  protected final String TEXT_172 = " diagram) {" + NL + "\t";
  protected final String TEXT_173 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_174 = " container, ";
  protected final String TEXT_175 = " containerMetaclass) {\t";
  protected final String TEXT_176 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_177 = "_";
  protected final String TEXT_178 = "(container, containerMetaclass);";
  protected final String TEXT_179 = NL + "}" + NL;
  protected final String TEXT_180 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_181 = "_";
  protected final String TEXT_182 = "(";
  protected final String TEXT_183 = " container, ";
  protected final String TEXT_184 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_185 = ".eINSTANCE.get";
  protected final String TEXT_186 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_187 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_188 = " values = ";
  protected final String TEXT_189 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_190 = " nextValue = ((";
  protected final String TEXT_191 = ") values.next());";
  protected final String TEXT_192 = NL + "\t\t";
  protected final String TEXT_193 = " nextValue = (";
  protected final String TEXT_194 = ") ";
  protected final String TEXT_195 = ";";
  protected final String TEXT_196 = NL + "\t\tint linkVID = ";
  protected final String TEXT_197 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_198 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_199 = ";";
  protected final String TEXT_200 = NL + "\t\t\t";
  protected final String TEXT_201 = " targets = (";
  protected final String TEXT_202 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_203 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_204 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_205 = " dst = (";
  protected final String TEXT_206 = ") structuralFeatureResult;";
  protected final String TEXT_207 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_208 = ";";
  protected final String TEXT_209 = NL + "\t\t\t\t";
  protected final String TEXT_210 = " sources = (";
  protected final String TEXT_211 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_212 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_213 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_214 = " src = (";
  protected final String TEXT_215 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_216 = ".";
  protected final String TEXT_217 = ", linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_218 = NL + "\t\t\t\t";
  protected final String TEXT_219 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_220 = ".";
  protected final String TEXT_221 = ", linkVID));";
  protected final String TEXT_222 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_223 = NL + "\t\t}";
  protected final String TEXT_224 = NL + "\t}" + NL + "}";
  protected final String TEXT_225 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_226 = " container, ";
  protected final String TEXT_227 = " containerMetaclass, ";
  protected final String TEXT_228 = " diagram) {";
  protected final String TEXT_229 = NL;
  protected final String TEXT_230 = "\tif (";
  protected final String TEXT_231 = ".eINSTANCE.get";
  protected final String TEXT_232 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_233 = NL + "\t\tfor (";
  protected final String TEXT_234 = " destinations = ";
  protected final String TEXT_235 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_236 = " nextDestination = (";
  protected final String TEXT_237 = ") destinations.next();";
  protected final String TEXT_238 = NL + "\t\t";
  protected final String TEXT_239 = " nextDestination = (";
  protected final String TEXT_240 = ") ";
  protected final String TEXT_241 = ";";
  protected final String TEXT_242 = NL + "\t\tif (";
  protected final String TEXT_243 = ".VISUAL_ID == ";
  protected final String TEXT_244 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_245 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_246 = ".";
  protected final String TEXT_247 = ", ";
  protected final String TEXT_248 = ".VISUAL_ID));";
  protected final String TEXT_249 = NL + "\t\t";
  protected final String TEXT_250 = " nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_251 = ".getType(";
  protected final String TEXT_252 = ".VISUAL_ID), ";
  protected final String TEXT_253 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_254 = "Children(nextNode, nextDestination);";
  protected final String TEXT_255 = NL;
  protected final String TEXT_256 = NL + "\t\t}";
  protected final String TEXT_257 = NL + "\t\t}";
  protected final String TEXT_258 = NL + "\t}";
  protected final String TEXT_259 = NL;
  protected final String TEXT_260 = "\tif (";
  protected final String TEXT_261 = ".eINSTANCE.get";
  protected final String TEXT_262 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_263 = NL + "\t\tfor (";
  protected final String TEXT_264 = " destinations = ";
  protected final String TEXT_265 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_266 = " nextDestination = (";
  protected final String TEXT_267 = ") destinations.next();";
  protected final String TEXT_268 = NL + "\t\t";
  protected final String TEXT_269 = " nextDestination = (";
  protected final String TEXT_270 = ") ";
  protected final String TEXT_271 = ";";
  protected final String TEXT_272 = NL + "\t\tif (";
  protected final String TEXT_273 = ".VISUAL_ID == ";
  protected final String TEXT_274 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_275 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_276 = ".";
  protected final String TEXT_277 = ", ";
  protected final String TEXT_278 = ".VISUAL_ID));";
  protected final String TEXT_279 = NL;
  protected final String TEXT_280 = NL + "\t\t}";
  protected final String TEXT_281 = NL + "\t\t}";
  protected final String TEXT_282 = NL + "\t}";
  protected final String TEXT_283 = NL + "}" + NL + "\t";
  protected final String TEXT_284 = NL;
  protected final String TEXT_285 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_286 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_287 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_288 = NL;
  protected final String TEXT_289 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_290 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_291 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_292 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_293 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_294 = " source, ";
  protected final String TEXT_295 = " destination, ";
  protected final String TEXT_296 = " linkElement, ";
  protected final String TEXT_297 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tfinal ";
  protected final String TEXT_298 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_299 = "(linkElement) {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_300 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_301 = " source, ";
  protected final String TEXT_302 = " destination, ";
  protected final String TEXT_303 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_304 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_305 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_306 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_307 = " source, ";
  protected final String TEXT_308 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_309 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_310 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_311 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_312 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}" + NL + "" + NL + "}";
  protected final String TEXT_313 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
/*
	This template should be called only for non-design diagrams (domainDiagramElement != null) 
	because *CanonicalEditPolicy responsible for dealing with semantic model 
	elements and meaningless (should not be generated) for pure design diagrams.  
*/

final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getCanonicalEditPolicyClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy"));
    stringBuffer.append(TEXT_7);
    List genNodes = genDiagram.getTopLevelNodes();
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_10);
    if (genNodes.size() > 0) {
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(TEXT_18);
    
Map<GenFeature, List<GenNode>> genFeature2genNodeMap = new LinkedHashMap<GenFeature, List<GenNode>>();
for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
	GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet.isPhantomElement()) {
		// Skipping top-level phantoms
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
		genFeature2genNodeMap.put(childMetaFeature, new LinkedList<GenNode>());
	}
	genFeature2genNodeMap.get(childMetaFeature).add(nextNode);
}

if (genFeature2genNodeMap.size() > 0) {

    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_20);
    
}

for (Map.Entry<GenFeature, List<GenNode>> nextEntry : genFeature2genNodeMap.entrySet()) {
	GenFeature childMetaFeature = nextEntry.getKey();
	List<GenNode> genNodesCollection = nextEntry.getValue();
	if (childMetaFeature == null) {

    stringBuffer.append(TEXT_21);
    } else if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_25);
    	} else {
    stringBuffer.append(TEXT_26);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_27);
    	}
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    	final boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {
    stringBuffer.append(TEXT_30);
    	}
	for (GenNode nextNode : genNodesCollection) {
		if (generateSwitch) {
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    		} else {
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    		}
    stringBuffer.append(TEXT_35);
    stringBuffer.append(TEXT_36);
    		if (generateSwitch) {
    stringBuffer.append(TEXT_37);
    		}
    stringBuffer.append(TEXT_38);
    	}
	if (generateSwitch) {
    stringBuffer.append(TEXT_39);
    	}
	if (childMetaFeature != null && childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_40);
    	}
}
    stringBuffer.append(TEXT_41);
    } else {
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_45);
    if (!genNodes.isEmpty()) {
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    	for (Iterator it = genNodes.iterator(); it.hasNext();) {
		GenNode nextNode = (GenNode) it.next();
		if (nextNode.getModelFacet().isPhantomElement()) {
			continue;
		}
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_49);
    	}
    stringBuffer.append(TEXT_50);
    }
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
    final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_56);
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
    stringBuffer.append(TEXT_57);
    }
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_63);
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(TEXT_71);
    
if (!genClass2Phantom.isEmpty()) {

    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_76);
    
}
for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
	GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();

    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(TEXT_80);
    }
if (!genClass2Phantom.isEmpty()) {

    stringBuffer.append(TEXT_81);
    }
    stringBuffer.append(TEXT_82);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_121);
    }
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_138);
    
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();
	if (nextContainer instanceof GenCompartment) {
		continue;
	}
	if (nextContainer instanceof GenNode && ((GenNode) nextContainer).getModelFacet() == null) {
		continue;
	}

    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName(nextContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_140);
    
}		
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_168);
    
boolean createPhantoms = false;
List genLinks = genDiagram.getLinks();

    stringBuffer.append(TEXT_169);
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_175);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();

    stringBuffer.append(TEXT_176);
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
    stringBuffer.append(TEXT_177);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_178);
    
	}
}

    stringBuffer.append(TEXT_179);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
		GenFeature sourceMetaFeature = typeLinkModelFacet.getSourceMetaFeature();
		GenFeature targetMetaFeature = typeLinkModelFacet.getTargetMetaFeature();

    stringBuffer.append(TEXT_180);
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
    stringBuffer.append(TEXT_181);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_185);
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_186);
    		if (childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_188);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_189);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_190);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_191);
    		} else {
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_193);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_194);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_195);
    		}
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager));
    stringBuffer.append(TEXT_199);
     if (targetMetaFeature.isListType()){ 
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_202);
     } 
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_206);
     if (sourceMetaFeature != null) {
    stringBuffer.append(TEXT_207);
    stringBuffer.append(getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager));
    stringBuffer.append(TEXT_208);
     		if (sourceMetaFeature.isListType()){ 
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_211);
     		}
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(genDiagram.getElementTypesQualifiedClassName());
    stringBuffer.append(TEXT_216);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_217);
     } else { // sourceMetaFeature == null 
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(genDiagram.getElementTypesQualifiedClassName());
    stringBuffer.append(TEXT_220);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_221);
     }
    stringBuffer.append(TEXT_222);
    
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_223);
    
		}

    stringBuffer.append(TEXT_224);
    
	}
}

    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_228);
    
for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = true;

    stringBuffer.append(TEXT_229);
    
GenLink nextLink = (GenLink) genLinks.get(linkIndex);
if (false == nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
	continue;
}
FeatureLinkModelFacet linkFMF = (FeatureLinkModelFacet) nextLink.getModelFacet();
GenFeature genFeature = linkFMF.getMetaFeature();
GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
if (phantomsOnly ? (!genFeature.isContains() || phantomNode == null) : (genFeature.isContains())) {
// Processing only features which are isPhantoms == phantomsOnly
	continue;
}

    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_232);
    	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_237);
    	} else {
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_239);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_240);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_241);
    	}
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_243);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_244);
    	}
    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_246);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_247);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_248);
    	if (createPhantoms) {
    stringBuffer.append(TEXT_249);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_253);
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_254);
    	}
    stringBuffer.append(TEXT_255);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_256);
    	}
	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_257);
    	}
    stringBuffer.append(TEXT_258);
    
}

for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = false;

    stringBuffer.append(TEXT_259);
    
GenLink nextLink = (GenLink) genLinks.get(linkIndex);
if (false == nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
	continue;
}
FeatureLinkModelFacet linkFMF = (FeatureLinkModelFacet) nextLink.getModelFacet();
GenFeature genFeature = linkFMF.getMetaFeature();
GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
if (phantomsOnly ? (!genFeature.isContains() || phantomNode == null) : (genFeature.isContains())) {
// Processing only features which are isPhantoms == phantomsOnly
	continue;
}

    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_261);
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_262);
    	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_264);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_266);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_267);
    	} else {
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_270);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_271);
    	}
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_272);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_273);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_274);
    	}
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_276);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_278);
    stringBuffer.append(TEXT_279);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_280);
    	}
	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_281);
    	}
    stringBuffer.append(TEXT_282);
    }
    stringBuffer.append(TEXT_283);
    stringBuffer.append(TEXT_284);
    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_287);
    stringBuffer.append(TEXT_288);
    
// an inner class 

    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_290);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_295);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_296);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_297);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_298);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_300);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_302);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_303);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_304);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_305);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_306);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_307);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_308);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_309);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_310);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_311);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_312);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_313);
    return stringBuffer.toString();
  }
}@


1.59
log
@follow consisted spacing policy
@
text
@@


1.58
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d455 1
a455 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.57
log
@Processing phantoms
@
text
@d40 18
a57 18
  protected final String TEXT_21 = "\tfor (";
  protected final String TEXT_22 = " values = ";
  protected final String TEXT_23 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_24 = ") values.next();";
  protected final String TEXT_25 = NL + "\tnextValue = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + "\tnodeVID = ";
  protected final String TEXT_28 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_29 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_30 = NL + "\tcase ";
  protected final String TEXT_31 = ".VISUAL_ID: {";
  protected final String TEXT_32 = NL + "\tif (";
  protected final String TEXT_33 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_34 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t\tbreak;";
  protected final String TEXT_37 = "\t}";
  protected final String TEXT_38 = NL + "\t}";
d59 42
a100 42
  protected final String TEXT_40 = NL + "\treturn result;";
  protected final String TEXT_41 = NL + "\treturn ";
  protected final String TEXT_42 = ".EMPTY_LIST;";
  protected final String TEXT_43 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_44 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());" + NL + "\t}";
  protected final String TEXT_45 = NL + "\tint nodeVID = ";
  protected final String TEXT_46 = ".getVisualID(view);" + NL + "\tswitch (nodeVID) {\t";
  protected final String TEXT_47 = NL + "\tcase ";
  protected final String TEXT_48 = ".VISUAL_ID:";
  protected final String TEXT_49 = NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_50 = NL + "\treturn false;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_51 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_54 = " createdViews = new ";
  protected final String TEXT_55 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_56 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_57 = NL + "\t\t";
  protected final String TEXT_58 = " createdConnectionViews = new ";
  protected final String TEXT_59 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_60 = " layoutCmd = new ";
  protected final String TEXT_61 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_62 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_63 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_64 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_65 = " phantomNodes = new ";
  protected final String TEXT_66 = "();" + NL + "\t\t";
  protected final String TEXT_67 = " diagramModelObject = ((";
  protected final String TEXT_68 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_69 = " diagram = getDiagram();";
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_72 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_73 = " nextResourceObject = (";
  protected final String TEXT_74 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_75 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_76 = NL + "\tcase ";
  protected final String TEXT_77 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_78 = NL;
  protected final String TEXT_79 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_80 = "\t}" + NL + "}";
  protected final String TEXT_81 = NL;
d102 173
a274 173
  protected final String TEXT_83 = "for (";
  protected final String TEXT_84 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_85 = " nextView = (";
  protected final String TEXT_86 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_87 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_90 = " createPhantomNodes(";
  protected final String TEXT_91 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_92 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_93 = " descriptors = new ";
  protected final String TEXT_94 = "();" + NL + "\tfor (";
  protected final String TEXT_95 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_96 = " element = (";
  protected final String TEXT_97 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_98 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_99 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_100 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_101 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_102 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_103 = " cc = new ";
  protected final String TEXT_104 = "(";
  protected final String TEXT_105 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_106 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_107 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_108 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_109 = " createCommand = new ";
  protected final String TEXT_110 = "(((";
  protected final String TEXT_111 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_112 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_113 = " adapters = ";
  protected final String TEXT_114 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_115 = ".makeMutable(new ";
  protected final String TEXT_116 = "(((";
  protected final String TEXT_117 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_118 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_119 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_120 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_121 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_122 = " myLinkDescriptors = new ";
  protected final String TEXT_123 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_124 = " myEObject2ViewMap = new ";
  protected final String TEXT_125 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_126 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_127 = " existingLinks = new ";
  protected final String TEXT_128 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_129 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_130 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_131 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_132 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_133 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_134 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_135 = " view) {" + NL + "\t\t";
  protected final String TEXT_136 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_137 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_138 = NL + "\t\tcase ";
  protected final String TEXT_139 = ".VISUAL_ID:";
  protected final String TEXT_140 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_141 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_142 = " childView = (";
  protected final String TEXT_143 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_144 = " createConnections(";
  protected final String TEXT_145 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_146 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_147 = " adapters = new ";
  protected final String TEXT_148 = "();" + NL + "\t\tfor (";
  protected final String TEXT_149 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_150 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_151 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_152 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_153 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_154 = ".APPEND, false, ((";
  protected final String TEXT_155 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_156 = " ccr = new ";
  protected final String TEXT_157 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_158 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_159 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_160 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_161 = " viewAdapter = (";
  protected final String TEXT_162 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_163 = " getEditPartFor(";
  protected final String TEXT_164 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_165 = " view = (";
  protected final String TEXT_166 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_167 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_168 = NL;
  protected final String TEXT_169 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_170 = " container, ";
  protected final String TEXT_171 = " diagram) {" + NL + "\t";
  protected final String TEXT_172 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_173 = " container, ";
  protected final String TEXT_174 = " containerMetaclass) {\t";
  protected final String TEXT_175 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_176 = "_";
  protected final String TEXT_177 = "(container, containerMetaclass);";
  protected final String TEXT_178 = NL + "}" + NL;
  protected final String TEXT_179 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_180 = "_";
  protected final String TEXT_181 = "(";
  protected final String TEXT_182 = " container, ";
  protected final String TEXT_183 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_184 = ".eINSTANCE.get";
  protected final String TEXT_185 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_186 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_187 = " values = ";
  protected final String TEXT_188 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_189 = " nextValue = ((";
  protected final String TEXT_190 = ") values.next());";
  protected final String TEXT_191 = NL + "\t\t";
  protected final String TEXT_192 = " nextValue = (";
  protected final String TEXT_193 = ") ";
  protected final String TEXT_194 = ";";
  protected final String TEXT_195 = NL + "\t\tint linkVID = ";
  protected final String TEXT_196 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_197 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_198 = ";";
  protected final String TEXT_199 = NL + "\t\t\t";
  protected final String TEXT_200 = " targets = (";
  protected final String TEXT_201 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_202 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_203 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_204 = " dst = (";
  protected final String TEXT_205 = ") structuralFeatureResult;";
  protected final String TEXT_206 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_207 = ";";
  protected final String TEXT_208 = NL + "\t\t\t\t";
  protected final String TEXT_209 = " sources = (";
  protected final String TEXT_210 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_211 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_212 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_213 = " src = (";
  protected final String TEXT_214 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_215 = ".";
  protected final String TEXT_216 = ", linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_217 = NL + "\t\t\t\t";
  protected final String TEXT_218 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_219 = ".";
  protected final String TEXT_220 = ", linkVID));";
  protected final String TEXT_221 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_222 = NL + "\t\t}";
  protected final String TEXT_223 = NL + "\t}" + NL + "}";
  protected final String TEXT_224 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_225 = " container, ";
  protected final String TEXT_226 = " containerMetaclass, ";
  protected final String TEXT_227 = " diagram) {";
  protected final String TEXT_228 = NL;
  protected final String TEXT_229 = "\tif (";
  protected final String TEXT_230 = ".eINSTANCE.get";
  protected final String TEXT_231 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_232 = NL + "\t\tfor (";
  protected final String TEXT_233 = " destinations = ";
  protected final String TEXT_234 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_235 = " nextDestination = (";
  protected final String TEXT_236 = ") destinations.next();";
  protected final String TEXT_237 = NL + "\t\t";
  protected final String TEXT_238 = " nextDestination = (";
  protected final String TEXT_239 = ") ";
  protected final String TEXT_240 = ";";
  protected final String TEXT_241 = NL + "\t\tif (";
  protected final String TEXT_242 = ".VISUAL_ID == ";
  protected final String TEXT_243 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_244 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_245 = ".";
  protected final String TEXT_246 = ", ";
  protected final String TEXT_247 = ".VISUAL_ID));";
  protected final String TEXT_248 = NL + "\t\t";
  protected final String TEXT_249 = " nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_250 = ".getType(";
  protected final String TEXT_251 = ".VISUAL_ID), ";
  protected final String TEXT_252 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_253 = "Children(nextNode, nextDestination);";
  protected final String TEXT_254 = NL;
  protected final String TEXT_255 = NL + "\t\t}";
d276 23
a298 23
  protected final String TEXT_257 = NL + "\t}";
  protected final String TEXT_258 = NL;
  protected final String TEXT_259 = "\tif (";
  protected final String TEXT_260 = ".eINSTANCE.get";
  protected final String TEXT_261 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_262 = NL + "\t\tfor (";
  protected final String TEXT_263 = " destinations = ";
  protected final String TEXT_264 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_265 = " nextDestination = (";
  protected final String TEXT_266 = ") destinations.next();";
  protected final String TEXT_267 = NL + "\t\t";
  protected final String TEXT_268 = " nextDestination = (";
  protected final String TEXT_269 = ") ";
  protected final String TEXT_270 = ";";
  protected final String TEXT_271 = NL + "\t\tif (";
  protected final String TEXT_272 = ".VISUAL_ID == ";
  protected final String TEXT_273 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_274 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_275 = ".";
  protected final String TEXT_276 = ", ";
  protected final String TEXT_277 = ".VISUAL_ID));";
  protected final String TEXT_278 = NL;
  protected final String TEXT_279 = NL + "\t\t}";
d300 33
a332 32
  protected final String TEXT_281 = NL + "\t}";
  protected final String TEXT_282 = NL + "}" + NL + "\t";
  protected final String TEXT_283 = NL;
  protected final String TEXT_284 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_285 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_286 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_287 = NL;
  protected final String TEXT_288 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_289 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_290 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_291 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_292 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_293 = " source, ";
  protected final String TEXT_294 = " destination, ";
  protected final String TEXT_295 = " linkElement, ";
  protected final String TEXT_296 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tfinal ";
  protected final String TEXT_297 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_298 = "(linkElement) {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_299 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_300 = " source, ";
  protected final String TEXT_301 = " destination, ";
  protected final String TEXT_302 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_303 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_304 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_305 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_306 = " source, ";
  protected final String TEXT_307 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_308 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_309 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_310 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_311 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}" + NL + "" + NL + "}";
  protected final String TEXT_312 = NL;
d487 1
a487 1
Map genFeature2genNodeMap = new LinkedHashMap();
d497 1
a497 1
		genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
d499 1
a499 1
	((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
d502 1
a502 2
Set entrySet = genFeature2genNodeMap.entrySet();
if (entrySet.size() > 0) {
d510 4
a513 5
for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
	Collection genNodesCollection = (Collection) nextEntry.getValue();
	if (childMetaFeature.isListType()) {
d516 3
d520 1
a520 1
    stringBuffer.append(TEXT_22);
d522 1
a522 1
    stringBuffer.append(TEXT_23);
d524 1
a524 1
    stringBuffer.append(TEXT_24);
d526 1
a526 1
    stringBuffer.append(TEXT_25);
d528 1
a528 1
    stringBuffer.append(TEXT_26);
d530 1
a530 1
    stringBuffer.append(TEXT_27);
d532 2
a533 2
    stringBuffer.append(TEXT_28);
    	boolean generateSwitch = genNodesCollection.size() != 1;
d535 1
a535 1
    stringBuffer.append(TEXT_29);
d537 1
a537 3
	
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
d539 1
a539 1
    stringBuffer.append(TEXT_30);
d541 1
a541 1
    stringBuffer.append(TEXT_31);
d543 1
a543 1
    stringBuffer.append(TEXT_32);
d545 1
a545 1
    stringBuffer.append(TEXT_33);
a546 1
    stringBuffer.append(TEXT_34);
d548 1
d550 1
a550 1
    stringBuffer.append(TEXT_36);
d552 1
a552 1
    stringBuffer.append(TEXT_37);
d555 1
a555 1
    stringBuffer.append(TEXT_38);
d557 2
a558 2
	if (childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_39);
d561 1
a561 1
    stringBuffer.append(TEXT_40);
d563 1
a563 1
    stringBuffer.append(TEXT_41);
d565 1
a565 1
    stringBuffer.append(TEXT_42);
d567 1
a567 1
    stringBuffer.append(TEXT_43);
d569 1
a569 1
    stringBuffer.append(TEXT_44);
d571 1
a571 1
    stringBuffer.append(TEXT_45);
d573 1
a573 1
    stringBuffer.append(TEXT_46);
d579 1
a579 1
    stringBuffer.append(TEXT_47);
d581 1
a581 1
    stringBuffer.append(TEXT_48);
d583 1
a583 1
    stringBuffer.append(TEXT_49);
d585 1
a585 1
    stringBuffer.append(TEXT_50);
a586 1
    stringBuffer.append(TEXT_51);
d588 1
d590 1
a590 1
    stringBuffer.append(TEXT_53);
d592 1
a592 1
    stringBuffer.append(TEXT_54);
d594 1
a594 1
    stringBuffer.append(TEXT_55);
d596 1
a596 1
    stringBuffer.append(TEXT_56);
d598 1
a598 1
    stringBuffer.append(TEXT_57);
d600 1
a600 1
    stringBuffer.append(TEXT_58);
a601 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d605 2
d608 1
a608 1
    stringBuffer.append(TEXT_62);
a609 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d613 2
d616 1
a616 1
    stringBuffer.append(TEXT_66);
d618 1
a618 1
    stringBuffer.append(TEXT_67);
d620 1
a620 1
    stringBuffer.append(TEXT_68);
a621 1
    stringBuffer.append(TEXT_69);
d623 1
d628 1
a628 1
    stringBuffer.append(TEXT_71);
a629 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d633 2
d636 1
a636 1
    stringBuffer.append(TEXT_75);
d642 1
a642 1
    stringBuffer.append(TEXT_76);
a643 1
    stringBuffer.append(TEXT_77);
d646 1
d650 1
a650 1
    stringBuffer.append(TEXT_80);
a651 1
    stringBuffer.append(TEXT_81);
d654 1
a655 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d659 2
a661 1
    stringBuffer.append(TEXT_87);
a663 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d667 2
d670 1
a670 1
    stringBuffer.append(TEXT_92);
d672 1
a672 1
    stringBuffer.append(TEXT_93);
d674 1
a674 1
    stringBuffer.append(TEXT_94);
a675 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d679 2
d682 1
a682 1
    stringBuffer.append(TEXT_98);
d684 1
a684 1
    stringBuffer.append(TEXT_99);
d686 1
a686 1
    stringBuffer.append(TEXT_100);
d688 1
a688 1
    stringBuffer.append(TEXT_101);
a689 2
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d693 2
d696 1
a696 1
    stringBuffer.append(TEXT_105);
a697 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d701 2
d704 1
a704 1
    stringBuffer.append(TEXT_109);
d706 1
a706 1
    stringBuffer.append(TEXT_110);
d708 1
a708 1
    stringBuffer.append(TEXT_111);
d710 1
a710 1
    stringBuffer.append(TEXT_112);
d712 1
a712 1
    stringBuffer.append(TEXT_113);
d714 1
a714 1
    stringBuffer.append(TEXT_114);
d716 1
a716 1
    stringBuffer.append(TEXT_115);
d718 1
a718 1
    stringBuffer.append(TEXT_116);
d720 1
a720 1
    stringBuffer.append(TEXT_117);
a721 2
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d725 2
d728 1
a728 1
    stringBuffer.append(TEXT_121);
d730 1
a730 1
    stringBuffer.append(TEXT_122);
d732 1
a732 1
    stringBuffer.append(TEXT_123);
d734 1
a734 1
    stringBuffer.append(TEXT_124);
a735 2
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d739 2
d742 1
a742 1
    stringBuffer.append(TEXT_128);
a743 2
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d749 2
d752 1
a752 1
    stringBuffer.append(TEXT_133);
d754 1
a754 1
    stringBuffer.append(TEXT_134);
d756 1
a756 1
    stringBuffer.append(TEXT_135);
d758 1
a758 1
    stringBuffer.append(TEXT_136);
d760 1
a760 1
    stringBuffer.append(TEXT_137);
d771 1
a771 1
    stringBuffer.append(TEXT_138);
d773 1
a773 1
    stringBuffer.append(TEXT_139);
d776 1
a776 1
    stringBuffer.append(TEXT_140);
a777 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d781 1
a781 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d785 2
d788 1
a788 1
    stringBuffer.append(TEXT_146);
d790 1
a790 1
    stringBuffer.append(TEXT_147);
d792 1
a792 1
    stringBuffer.append(TEXT_148);
a793 2
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d797 1
a797 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d801 2
d804 1
a804 1
    stringBuffer.append(TEXT_154);
a805 2
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d809 1
a809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d813 2
a815 2
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d819 2
d822 1
a822 1
    stringBuffer.append(TEXT_163);
a823 2
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d827 2
d830 1
a830 1
    stringBuffer.append(TEXT_167);
a834 1
    stringBuffer.append(TEXT_168);
d836 1
d838 1
a838 1
    stringBuffer.append(TEXT_170);
d840 1
a840 1
    stringBuffer.append(TEXT_171);
d842 1
a842 1
    stringBuffer.append(TEXT_172);
d844 1
a844 1
    stringBuffer.append(TEXT_173);
d846 1
a846 1
    stringBuffer.append(TEXT_174);
d853 1
a853 1
    stringBuffer.append(TEXT_175);
d855 1
a855 1
    stringBuffer.append(TEXT_176);
d857 1
a857 1
    stringBuffer.append(TEXT_177);
d862 1
a862 1
    stringBuffer.append(TEXT_178);
d872 1
a872 1
    stringBuffer.append(TEXT_179);
d874 1
a874 1
    stringBuffer.append(TEXT_180);
d876 1
a876 1
    stringBuffer.append(TEXT_181);
d878 1
a878 1
    stringBuffer.append(TEXT_182);
d880 1
a880 1
    stringBuffer.append(TEXT_183);
d882 1
a882 1
    stringBuffer.append(TEXT_184);
d884 1
a884 1
    stringBuffer.append(TEXT_185);
d886 1
a886 1
    stringBuffer.append(TEXT_186);
d888 1
a888 1
    stringBuffer.append(TEXT_187);
a889 2
    stringBuffer.append(TEXT_188);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d893 2
a895 2
    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d899 2
d902 1
a902 1
    stringBuffer.append(TEXT_194);
d904 1
a904 1
    stringBuffer.append(TEXT_195);
d906 1
a906 1
    stringBuffer.append(TEXT_196);
d908 1
a908 1
    stringBuffer.append(TEXT_197);
d910 1
a910 1
    stringBuffer.append(TEXT_198);
a911 2
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d915 2
a917 2
    stringBuffer.append(TEXT_202);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d923 2
d926 1
a926 1
    stringBuffer.append(TEXT_206);
d928 1
a928 1
    stringBuffer.append(TEXT_207);
a929 2
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d933 2
a935 2
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d941 2
d944 1
a944 1
    stringBuffer.append(TEXT_215);
d946 1
a946 1
    stringBuffer.append(TEXT_216);
d948 1
a948 1
    stringBuffer.append(TEXT_217);
d950 1
a950 1
    stringBuffer.append(TEXT_218);
d952 1
a952 1
    stringBuffer.append(TEXT_219);
d954 1
a954 1
    stringBuffer.append(TEXT_220);
d956 1
a956 1
    stringBuffer.append(TEXT_221);
d960 1
a960 1
    stringBuffer.append(TEXT_222);
d964 1
a964 1
    stringBuffer.append(TEXT_223);
d969 1
a969 1
    stringBuffer.append(TEXT_224);
d971 1
a971 1
    stringBuffer.append(TEXT_225);
d973 1
a973 1
    stringBuffer.append(TEXT_226);
d975 1
a975 1
    stringBuffer.append(TEXT_227);
d980 1
a980 1
    stringBuffer.append(TEXT_228);
d994 1
a994 1
    stringBuffer.append(TEXT_229);
d996 1
a996 1
    stringBuffer.append(TEXT_230);
d998 1
a998 1
    stringBuffer.append(TEXT_231);
d1000 1
a1000 1
    stringBuffer.append(TEXT_232);
d1002 1
a1002 1
    stringBuffer.append(TEXT_233);
a1003 2
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1007 2
a1009 2
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1013 2
d1016 1
a1016 1
    stringBuffer.append(TEXT_240);
d1019 1
a1019 1
    stringBuffer.append(TEXT_241);
d1021 1
a1021 1
    stringBuffer.append(TEXT_242);
d1023 1
a1023 1
    stringBuffer.append(TEXT_243);
d1025 1
a1025 1
    stringBuffer.append(TEXT_244);
d1027 1
a1027 1
    stringBuffer.append(TEXT_245);
d1029 1
a1029 1
    stringBuffer.append(TEXT_246);
d1031 1
a1031 1
    stringBuffer.append(TEXT_247);
d1033 1
a1033 1
    stringBuffer.append(TEXT_248);
d1035 1
a1035 1
    stringBuffer.append(TEXT_249);
d1037 1
a1037 1
    stringBuffer.append(TEXT_250);
d1039 1
a1039 1
    stringBuffer.append(TEXT_251);
d1041 1
a1041 1
    stringBuffer.append(TEXT_252);
d1043 1
a1043 1
    stringBuffer.append(TEXT_253);
d1045 1
a1045 1
    stringBuffer.append(TEXT_254);
d1047 1
a1047 1
    stringBuffer.append(TEXT_255);
d1050 1
a1050 1
    stringBuffer.append(TEXT_256);
d1052 1
a1052 1
    stringBuffer.append(TEXT_257);
d1059 1
a1059 1
    stringBuffer.append(TEXT_258);
d1073 1
a1073 1
    stringBuffer.append(TEXT_259);
d1075 1
a1075 1
    stringBuffer.append(TEXT_260);
d1077 1
a1077 1
    stringBuffer.append(TEXT_261);
d1079 1
a1079 1
    stringBuffer.append(TEXT_262);
d1081 1
a1081 1
    stringBuffer.append(TEXT_263);
a1082 2
    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1086 2
a1088 2
    stringBuffer.append(TEXT_267);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1092 2
d1095 1
a1095 1
    stringBuffer.append(TEXT_270);
d1098 1
a1098 1
    stringBuffer.append(TEXT_271);
d1100 1
a1100 1
    stringBuffer.append(TEXT_272);
d1102 1
a1102 1
    stringBuffer.append(TEXT_273);
d1104 1
a1104 1
    stringBuffer.append(TEXT_274);
d1106 1
a1106 1
    stringBuffer.append(TEXT_275);
d1108 1
a1108 1
    stringBuffer.append(TEXT_276);
a1109 1
    stringBuffer.append(TEXT_277);
d1111 1
d1113 1
a1113 1
    stringBuffer.append(TEXT_279);
d1116 1
a1116 1
    stringBuffer.append(TEXT_280);
d1118 1
a1118 1
    stringBuffer.append(TEXT_281);
a1119 1
    stringBuffer.append(TEXT_282);
d1122 1
d1124 1
a1124 1
    stringBuffer.append(TEXT_285);
a1125 1
    stringBuffer.append(TEXT_286);
d1127 1
a1130 2
    stringBuffer.append(TEXT_288);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1136 2
a1138 2
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1144 1
a1144 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1148 2
d1151 1
a1151 1
    stringBuffer.append(TEXT_298);
a1152 2
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1156 1
a1156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1160 2
d1163 1
a1163 1
    stringBuffer.append(TEXT_304);
a1164 2
    stringBuffer.append(TEXT_305);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1174 2
d1177 1
a1177 1
    stringBuffer.append(TEXT_311);
d1179 1
a1179 1
    stringBuffer.append(TEXT_312);
@


1.56
log
@Do not generate "switch" if without "case"
@
text
@d575 4
a578 1
	GenNode nextNode = (GenNode) it.next();
@


1.55
log
@[157148] - Deleting an element programmatically isn't propagated to the diagram
@
text
@d63 269
a331 267
  protected final String TEXT_44 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn view.isSetElement() && (view.getElement() == null || view.getElement().eIsProxy());" + NL + "\t}" + NL + "\t" + NL + "\tint nodeVID = ";
  protected final String TEXT_45 = ".getVisualID(view);" + NL + "\tswitch (nodeVID) {\t";
  protected final String TEXT_46 = NL + "\tcase ";
  protected final String TEXT_47 = ".VISUAL_ID:";
  protected final String TEXT_48 = NL + "\t\treturn true;" + NL + "\t}" + NL + "\treturn false;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_49 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_50 = NL;
  protected final String TEXT_51 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_52 = " createdViews = new ";
  protected final String TEXT_53 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_54 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_55 = NL + "\t\t";
  protected final String TEXT_56 = " createdConnectionViews = new ";
  protected final String TEXT_57 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_58 = " layoutCmd = new ";
  protected final String TEXT_59 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_60 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_61 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_62 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_63 = " phantomNodes = new ";
  protected final String TEXT_64 = "();" + NL + "\t\t";
  protected final String TEXT_65 = " diagramModelObject = ((";
  protected final String TEXT_66 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_67 = " diagram = getDiagram();";
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_70 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_71 = " nextResourceObject = (";
  protected final String TEXT_72 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_73 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_74 = NL + "\tcase ";
  protected final String TEXT_75 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_78 = "\t}" + NL + "}";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = NL;
  protected final String TEXT_81 = "for (";
  protected final String TEXT_82 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_83 = " nextView = (";
  protected final String TEXT_84 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_85 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_86 = NL;
  protected final String TEXT_87 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_88 = " createPhantomNodes(";
  protected final String TEXT_89 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_90 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_91 = " descriptors = new ";
  protected final String TEXT_92 = "();" + NL + "\tfor (";
  protected final String TEXT_93 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_94 = " element = (";
  protected final String TEXT_95 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_96 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_97 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_98 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_99 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_100 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_101 = " cc = new ";
  protected final String TEXT_102 = "(";
  protected final String TEXT_103 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_104 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_105 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_106 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_107 = " createCommand = new ";
  protected final String TEXT_108 = "(((";
  protected final String TEXT_109 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_110 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_111 = " adapters = ";
  protected final String TEXT_112 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_113 = ".makeMutable(new ";
  protected final String TEXT_114 = "(((";
  protected final String TEXT_115 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_116 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_117 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_118 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_119 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_120 = " myLinkDescriptors = new ";
  protected final String TEXT_121 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_122 = " myEObject2ViewMap = new ";
  protected final String TEXT_123 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_124 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_125 = " existingLinks = new ";
  protected final String TEXT_126 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_127 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_128 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_129 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_130 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_131 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_132 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_133 = " view) {" + NL + "\t\t";
  protected final String TEXT_134 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_135 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_136 = NL + "\t\tcase ";
  protected final String TEXT_137 = ".VISUAL_ID:";
  protected final String TEXT_138 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_139 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_140 = " childView = (";
  protected final String TEXT_141 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_142 = " createConnections(";
  protected final String TEXT_143 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_144 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_145 = " adapters = new ";
  protected final String TEXT_146 = "();" + NL + "\t\tfor (";
  protected final String TEXT_147 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_148 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_149 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_150 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_151 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_152 = ".APPEND, false, ((";
  protected final String TEXT_153 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_154 = " ccr = new ";
  protected final String TEXT_155 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_156 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_157 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_158 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_159 = " viewAdapter = (";
  protected final String TEXT_160 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_161 = " getEditPartFor(";
  protected final String TEXT_162 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_163 = " view = (";
  protected final String TEXT_164 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_165 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_166 = NL;
  protected final String TEXT_167 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_168 = " container, ";
  protected final String TEXT_169 = " diagram) {" + NL + "\t";
  protected final String TEXT_170 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_171 = " container, ";
  protected final String TEXT_172 = " containerMetaclass) {\t";
  protected final String TEXT_173 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_174 = "_";
  protected final String TEXT_175 = "(container, containerMetaclass);";
  protected final String TEXT_176 = NL + "}" + NL;
  protected final String TEXT_177 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_178 = "_";
  protected final String TEXT_179 = "(";
  protected final String TEXT_180 = " container, ";
  protected final String TEXT_181 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_182 = ".eINSTANCE.get";
  protected final String TEXT_183 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_184 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_185 = " values = ";
  protected final String TEXT_186 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_187 = " nextValue = ((";
  protected final String TEXT_188 = ") values.next());";
  protected final String TEXT_189 = NL + "\t\t";
  protected final String TEXT_190 = " nextValue = (";
  protected final String TEXT_191 = ") ";
  protected final String TEXT_192 = ";";
  protected final String TEXT_193 = NL + "\t\tint linkVID = ";
  protected final String TEXT_194 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_195 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_196 = ";";
  protected final String TEXT_197 = NL + "\t\t\t";
  protected final String TEXT_198 = " targets = (";
  protected final String TEXT_199 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_200 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_201 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_202 = " dst = (";
  protected final String TEXT_203 = ") structuralFeatureResult;";
  protected final String TEXT_204 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_205 = ";";
  protected final String TEXT_206 = NL + "\t\t\t\t";
  protected final String TEXT_207 = " sources = (";
  protected final String TEXT_208 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_209 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_210 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_211 = " src = (";
  protected final String TEXT_212 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_213 = ".";
  protected final String TEXT_214 = ", linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_215 = NL + "\t\t\t\t";
  protected final String TEXT_216 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_217 = ".";
  protected final String TEXT_218 = ", linkVID));";
  protected final String TEXT_219 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_220 = NL + "\t\t}";
  protected final String TEXT_221 = NL + "\t}" + NL + "}";
  protected final String TEXT_222 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_223 = " container, ";
  protected final String TEXT_224 = " containerMetaclass, ";
  protected final String TEXT_225 = " diagram) {";
  protected final String TEXT_226 = NL;
  protected final String TEXT_227 = "\tif (";
  protected final String TEXT_228 = ".eINSTANCE.get";
  protected final String TEXT_229 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_230 = NL + "\t\tfor (";
  protected final String TEXT_231 = " destinations = ";
  protected final String TEXT_232 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_233 = " nextDestination = (";
  protected final String TEXT_234 = ") destinations.next();";
  protected final String TEXT_235 = NL + "\t\t";
  protected final String TEXT_236 = " nextDestination = (";
  protected final String TEXT_237 = ") ";
  protected final String TEXT_238 = ";";
  protected final String TEXT_239 = NL + "\t\tif (";
  protected final String TEXT_240 = ".VISUAL_ID == ";
  protected final String TEXT_241 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_242 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_243 = ".";
  protected final String TEXT_244 = ", ";
  protected final String TEXT_245 = ".VISUAL_ID));";
  protected final String TEXT_246 = NL + "\t\t";
  protected final String TEXT_247 = " nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_248 = ".getType(";
  protected final String TEXT_249 = ".VISUAL_ID), ";
  protected final String TEXT_250 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_251 = "Children(nextNode, nextDestination);";
  protected final String TEXT_252 = NL;
  protected final String TEXT_253 = NL + "\t\t}";
  protected final String TEXT_254 = NL + "\t\t}";
  protected final String TEXT_255 = NL + "\t}";
  protected final String TEXT_256 = NL;
  protected final String TEXT_257 = "\tif (";
  protected final String TEXT_258 = ".eINSTANCE.get";
  protected final String TEXT_259 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_260 = NL + "\t\tfor (";
  protected final String TEXT_261 = " destinations = ";
  protected final String TEXT_262 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_263 = " nextDestination = (";
  protected final String TEXT_264 = ") destinations.next();";
  protected final String TEXT_265 = NL + "\t\t";
  protected final String TEXT_266 = " nextDestination = (";
  protected final String TEXT_267 = ") ";
  protected final String TEXT_268 = ";";
  protected final String TEXT_269 = NL + "\t\tif (";
  protected final String TEXT_270 = ".VISUAL_ID == ";
  protected final String TEXT_271 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_272 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_273 = ".";
  protected final String TEXT_274 = ", ";
  protected final String TEXT_275 = ".VISUAL_ID));";
  protected final String TEXT_276 = NL;
  protected final String TEXT_277 = NL + "\t\t}";
  protected final String TEXT_278 = NL + "\t\t}";
  protected final String TEXT_279 = NL + "\t}";
  protected final String TEXT_280 = NL + "}" + NL + "\t";
  protected final String TEXT_281 = NL;
  protected final String TEXT_282 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_283 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_284 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_285 = NL;
  protected final String TEXT_286 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_287 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_288 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_289 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_290 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_291 = " source, ";
  protected final String TEXT_292 = " destination, ";
  protected final String TEXT_293 = " linkElement, ";
  protected final String TEXT_294 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tfinal ";
  protected final String TEXT_295 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_296 = "(linkElement) {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_297 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_298 = " source, ";
  protected final String TEXT_299 = " destination, ";
  protected final String TEXT_300 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_301 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_302 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_303 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_304 = " source, ";
  protected final String TEXT_305 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_306 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_307 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_308 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_309 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}" + NL + "" + NL + "}";
  protected final String TEXT_310 = NL;
d570 2
d573 2
a574 2
    stringBuffer.append(TEXT_45);
    for (Iterator it = genNodes.iterator(); it.hasNext();) {
d576 1
a576 1
    stringBuffer.append(TEXT_46);
a577 2
    stringBuffer.append(TEXT_47);
    }
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d581 1
d583 1
a583 1
    final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
a584 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d588 1
a588 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d590 1
a590 1
    }
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d598 2
a600 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d602 1
a602 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d606 2
a608 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d616 1
d618 3
d625 1
a625 1
    stringBuffer.append(TEXT_69);
d627 1
a627 1
    stringBuffer.append(TEXT_70);
d629 1
a629 1
    stringBuffer.append(TEXT_71);
d631 1
a631 1
    stringBuffer.append(TEXT_72);
d633 1
a633 1
    stringBuffer.append(TEXT_73);
d639 1
a639 1
    stringBuffer.append(TEXT_74);
a640 2
    stringBuffer.append(TEXT_75);
    stringBuffer.append(TEXT_76);
d642 2
d647 1
a647 1
    stringBuffer.append(TEXT_78);
a648 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(TEXT_80);
a649 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d652 2
a654 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d656 1
d658 1
a659 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d661 1
a662 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d664 1
a664 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d666 1
a666 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d668 1
a668 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d670 1
a670 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d672 2
a674 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d676 1
a676 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d678 1
a678 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d680 1
a680 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d682 1
a682 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d684 1
a684 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d686 2
a688 2
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d690 1
a690 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d692 1
a692 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d694 2
a696 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d698 1
a698 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d700 1
a700 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d702 1
a702 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d704 1
a704 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d706 1
a706 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d708 1
a708 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d710 1
a710 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d712 1
a712 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d716 1
a716 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d718 2
a720 2
    stringBuffer.append(TEXT_118);
    }
d722 1
a722 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d724 1
a724 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d728 1
a728 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d730 1
a730 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d732 2
a734 2
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d736 1
a736 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d738 1
a738 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d740 1
a740 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d744 4
d749 1
a749 1
    stringBuffer.append(TEXT_131);
d751 1
a751 1
    stringBuffer.append(TEXT_132);
d753 1
a753 1
    stringBuffer.append(TEXT_133);
d755 1
a755 1
    stringBuffer.append(TEXT_134);
d757 1
a757 1
    stringBuffer.append(TEXT_135);
d768 1
a768 1
    stringBuffer.append(TEXT_136);
d770 1
a770 1
    stringBuffer.append(TEXT_137);
d773 1
a773 1
    stringBuffer.append(TEXT_138);
d775 1
a775 1
    stringBuffer.append(TEXT_139);
d777 1
a777 1
    stringBuffer.append(TEXT_140);
d779 1
a779 1
    stringBuffer.append(TEXT_141);
d781 1
a781 1
    stringBuffer.append(TEXT_142);
d783 1
a783 1
    stringBuffer.append(TEXT_143);
d785 1
a785 1
    stringBuffer.append(TEXT_144);
d787 1
a787 1
    stringBuffer.append(TEXT_145);
d789 1
a789 1
    stringBuffer.append(TEXT_146);
d791 1
a791 1
    stringBuffer.append(TEXT_147);
d793 1
a793 1
    stringBuffer.append(TEXT_148);
d795 1
a795 1
    stringBuffer.append(TEXT_149);
d797 1
a797 1
    stringBuffer.append(TEXT_150);
d799 1
a799 1
    stringBuffer.append(TEXT_151);
d801 1
a801 1
    stringBuffer.append(TEXT_152);
d803 1
a803 1
    stringBuffer.append(TEXT_153);
d805 1
a805 1
    stringBuffer.append(TEXT_154);
d807 1
a807 1
    stringBuffer.append(TEXT_155);
d809 1
a809 1
    stringBuffer.append(TEXT_156);
d811 1
a811 1
    stringBuffer.append(TEXT_157);
d813 1
a813 1
    stringBuffer.append(TEXT_158);
d815 1
a815 1
    stringBuffer.append(TEXT_159);
d817 1
a817 1
    stringBuffer.append(TEXT_160);
d819 1
a819 1
    stringBuffer.append(TEXT_161);
d821 1
a821 1
    stringBuffer.append(TEXT_162);
d823 1
a823 1
    stringBuffer.append(TEXT_163);
d825 1
a825 1
    stringBuffer.append(TEXT_164);
d827 1
a827 1
    stringBuffer.append(TEXT_165);
a831 3
    stringBuffer.append(TEXT_166);
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a832 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d834 1
a834 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d836 1
a836 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d840 4
d850 1
a850 1
    stringBuffer.append(TEXT_173);
d852 1
a852 1
    stringBuffer.append(TEXT_174);
d854 1
a854 1
    stringBuffer.append(TEXT_175);
d859 1
a859 1
    stringBuffer.append(TEXT_176);
d869 1
a869 1
    stringBuffer.append(TEXT_177);
d871 1
a871 1
    stringBuffer.append(TEXT_178);
d873 1
a873 1
    stringBuffer.append(TEXT_179);
d875 1
a875 1
    stringBuffer.append(TEXT_180);
d877 1
a877 1
    stringBuffer.append(TEXT_181);
d879 1
a879 1
    stringBuffer.append(TEXT_182);
d881 1
a881 1
    stringBuffer.append(TEXT_183);
d883 1
a883 1
    stringBuffer.append(TEXT_184);
d885 1
a885 1
    stringBuffer.append(TEXT_185);
d887 1
a887 1
    stringBuffer.append(TEXT_186);
a888 4
    stringBuffer.append(TEXT_187);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_188);
    		} else {
d892 2
a894 2
    stringBuffer.append(TEXT_191);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d896 1
a896 1
    		}
d898 1
a898 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d900 1
a900 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d902 1
a902 1
    stringBuffer.append(getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager));
d904 1
a904 1
     if (targetMetaFeature.isListType()){ 
d906 1
a906 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d908 2
a910 2
    stringBuffer.append(TEXT_199);
     } 
d912 1
a912 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d914 1
a914 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d918 1
a918 1
     if (sourceMetaFeature != null) {
d920 1
a920 1
    stringBuffer.append(getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager));
d922 1
a922 1
     		if (sourceMetaFeature.isListType()){ 
d924 1
a924 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d926 2
a928 2
    stringBuffer.append(TEXT_208);
     		}
d930 1
a930 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d932 1
a932 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d936 4
d941 1
a941 1
    stringBuffer.append(TEXT_213);
d943 1
a943 1
    stringBuffer.append(TEXT_214);
d945 1
a945 1
    stringBuffer.append(TEXT_215);
d947 1
a947 1
    stringBuffer.append(TEXT_216);
d949 1
a949 1
    stringBuffer.append(TEXT_217);
d951 1
a951 1
    stringBuffer.append(TEXT_218);
d953 1
a953 1
    stringBuffer.append(TEXT_219);
d957 1
a957 1
    stringBuffer.append(TEXT_220);
d961 1
a961 1
    stringBuffer.append(TEXT_221);
d966 1
a966 1
    stringBuffer.append(TEXT_222);
d968 1
a968 1
    stringBuffer.append(TEXT_223);
d970 1
a970 1
    stringBuffer.append(TEXT_224);
d972 1
a972 1
    stringBuffer.append(TEXT_225);
d977 1
a977 1
    stringBuffer.append(TEXT_226);
d991 1
a991 1
    stringBuffer.append(TEXT_227);
d993 1
a993 1
    stringBuffer.append(TEXT_228);
d995 1
a995 1
    stringBuffer.append(TEXT_229);
d997 1
a997 1
    stringBuffer.append(TEXT_230);
d999 1
a999 1
    stringBuffer.append(TEXT_231);
d1001 1
a1001 1
    stringBuffer.append(TEXT_232);
d1003 1
a1003 1
    stringBuffer.append(TEXT_233);
d1005 1
a1005 1
    stringBuffer.append(TEXT_234);
d1007 1
a1007 1
    stringBuffer.append(TEXT_235);
d1009 1
a1009 1
    stringBuffer.append(TEXT_236);
d1011 1
a1011 1
    stringBuffer.append(TEXT_237);
d1013 1
a1013 1
    stringBuffer.append(TEXT_238);
d1016 1
a1016 1
    stringBuffer.append(TEXT_239);
d1018 1
a1018 1
    stringBuffer.append(TEXT_240);
d1020 1
a1020 1
    stringBuffer.append(TEXT_241);
d1022 1
a1022 1
    stringBuffer.append(TEXT_242);
d1024 1
a1024 1
    stringBuffer.append(TEXT_243);
d1026 1
a1026 1
    stringBuffer.append(TEXT_244);
d1028 1
a1028 1
    stringBuffer.append(TEXT_245);
d1030 1
a1030 1
    stringBuffer.append(TEXT_246);
d1032 1
a1032 1
    stringBuffer.append(TEXT_247);
d1034 1
a1034 1
    stringBuffer.append(TEXT_248);
d1036 1
a1036 1
    stringBuffer.append(TEXT_249);
d1038 1
a1038 1
    stringBuffer.append(TEXT_250);
d1040 1
a1040 1
    stringBuffer.append(TEXT_251);
d1042 1
a1042 1
    stringBuffer.append(TEXT_252);
d1044 1
a1044 1
    stringBuffer.append(TEXT_253);
d1047 1
a1047 1
    stringBuffer.append(TEXT_254);
d1049 1
a1049 1
    stringBuffer.append(TEXT_255);
d1056 1
a1056 1
    stringBuffer.append(TEXT_256);
d1070 1
a1070 1
    stringBuffer.append(TEXT_257);
d1072 1
a1072 1
    stringBuffer.append(TEXT_258);
d1074 1
a1074 1
    stringBuffer.append(TEXT_259);
d1076 1
a1076 1
    stringBuffer.append(TEXT_260);
d1078 1
a1078 1
    stringBuffer.append(TEXT_261);
d1080 1
a1080 1
    stringBuffer.append(TEXT_262);
d1082 1
a1082 1
    stringBuffer.append(TEXT_263);
d1084 1
a1084 1
    stringBuffer.append(TEXT_264);
d1086 1
a1086 1
    stringBuffer.append(TEXT_265);
d1088 1
a1088 1
    stringBuffer.append(TEXT_266);
d1090 1
a1090 1
    stringBuffer.append(TEXT_267);
d1092 1
a1092 1
    stringBuffer.append(TEXT_268);
d1095 1
a1095 1
    stringBuffer.append(TEXT_269);
d1097 1
a1097 1
    stringBuffer.append(TEXT_270);
d1099 1
a1099 1
    stringBuffer.append(TEXT_271);
d1101 1
a1101 1
    stringBuffer.append(TEXT_272);
d1103 1
a1103 1
    stringBuffer.append(TEXT_273);
d1105 1
a1105 1
    stringBuffer.append(TEXT_274);
d1107 2
a1108 2
    stringBuffer.append(TEXT_275);
    stringBuffer.append(TEXT_276);
d1110 1
a1110 1
    stringBuffer.append(TEXT_277);
d1113 1
a1113 1
    stringBuffer.append(TEXT_278);
d1115 1
a1115 1
    stringBuffer.append(TEXT_279);
a1116 2
    stringBuffer.append(TEXT_280);
    stringBuffer.append(TEXT_281);
a1117 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a1118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1120 1
d1122 3
a1127 4
    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_287);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1131 1
a1131 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1135 1
a1135 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1139 1
a1139 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1141 2
a1143 2
    stringBuffer.append(TEXT_295);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1147 1
a1147 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1149 2
a1151 2
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1153 2
a1155 2
    stringBuffer.append(TEXT_301);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1159 1
a1159 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1161 1
a1161 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1169 4
d1174 1
a1174 1
    stringBuffer.append(TEXT_309);
d1176 1
a1176 1
    stringBuffer.append(TEXT_310);
@


1.54
log
@rewrite NewDiagramFileWizard in xpand
@
text
@d63 32
a94 32
  protected final String TEXT_44 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_45 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_46 = NL;
  protected final String TEXT_47 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_48 = " createdViews = new ";
  protected final String TEXT_49 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_50 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_51 = NL + "\t\t";
  protected final String TEXT_52 = " createdConnectionViews = new ";
  protected final String TEXT_53 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_54 = " layoutCmd = new ";
  protected final String TEXT_55 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_56 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_57 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_58 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_59 = " phantomNodes = new ";
  protected final String TEXT_60 = "();" + NL + "\t\t";
  protected final String TEXT_61 = " diagramModelObject = ((";
  protected final String TEXT_62 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_63 = " diagram = getDiagram();";
  protected final String TEXT_64 = NL;
  protected final String TEXT_65 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_66 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_67 = " nextResourceObject = (";
  protected final String TEXT_68 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_69 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_70 = NL + "\tcase ";
  protected final String TEXT_71 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_74 = "\t}" + NL + "}";
  protected final String TEXT_75 = NL;
d96 97
a192 97
  protected final String TEXT_77 = "for (";
  protected final String TEXT_78 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_79 = " nextView = (";
  protected final String TEXT_80 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_81 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_82 = NL;
  protected final String TEXT_83 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_84 = " createPhantomNodes(";
  protected final String TEXT_85 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_86 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_87 = " descriptors = new ";
  protected final String TEXT_88 = "();" + NL + "\tfor (";
  protected final String TEXT_89 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_90 = " element = (";
  protected final String TEXT_91 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_92 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_93 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_94 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_95 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_96 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_97 = " cc = new ";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_100 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_101 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_102 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_103 = " createCommand = new ";
  protected final String TEXT_104 = "(((";
  protected final String TEXT_105 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_106 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_107 = " adapters = ";
  protected final String TEXT_108 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_109 = ".makeMutable(new ";
  protected final String TEXT_110 = "(((";
  protected final String TEXT_111 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_112 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_113 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_114 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_115 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_116 = " myLinkDescriptors = new ";
  protected final String TEXT_117 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_118 = " myEObject2ViewMap = new ";
  protected final String TEXT_119 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_120 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_121 = " existingLinks = new ";
  protected final String TEXT_122 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_123 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_125 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_126 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_127 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_128 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_129 = " view) {" + NL + "\t\t";
  protected final String TEXT_130 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_131 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_132 = NL + "\t\tcase ";
  protected final String TEXT_133 = ".VISUAL_ID:";
  protected final String TEXT_134 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_135 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_136 = " childView = (";
  protected final String TEXT_137 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_138 = " createConnections(";
  protected final String TEXT_139 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_140 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_141 = " adapters = new ";
  protected final String TEXT_142 = "();" + NL + "\t\tfor (";
  protected final String TEXT_143 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_144 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_145 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_146 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_147 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_148 = ".APPEND, false, ((";
  protected final String TEXT_149 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_150 = " ccr = new ";
  protected final String TEXT_151 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_152 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_153 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_154 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_155 = " viewAdapter = (";
  protected final String TEXT_156 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_157 = " getEditPartFor(";
  protected final String TEXT_158 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_159 = " view = (";
  protected final String TEXT_160 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_161 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_162 = NL;
  protected final String TEXT_163 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_164 = " container, ";
  protected final String TEXT_165 = " diagram) {" + NL + "\t";
  protected final String TEXT_166 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_167 = " container, ";
  protected final String TEXT_168 = " containerMetaclass) {\t";
  protected final String TEXT_169 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_170 = "_";
  protected final String TEXT_171 = "(container, containerMetaclass);";
  protected final String TEXT_172 = NL + "}" + NL;
  protected final String TEXT_173 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
d194 17
a210 17
  protected final String TEXT_175 = "(";
  protected final String TEXT_176 = " container, ";
  protected final String TEXT_177 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_178 = ".eINSTANCE.get";
  protected final String TEXT_179 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_180 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_181 = " values = ";
  protected final String TEXT_182 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_183 = " nextValue = ((";
  protected final String TEXT_184 = ") values.next());";
  protected final String TEXT_185 = NL + "\t\t";
  protected final String TEXT_186 = " nextValue = (";
  protected final String TEXT_187 = ") ";
  protected final String TEXT_188 = ";";
  protected final String TEXT_189 = NL + "\t\tint linkVID = ";
  protected final String TEXT_190 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_191 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
d212 20
a231 20
  protected final String TEXT_193 = NL + "\t\t\t";
  protected final String TEXT_194 = " targets = (";
  protected final String TEXT_195 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_196 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_197 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_198 = " dst = (";
  protected final String TEXT_199 = ") structuralFeatureResult;";
  protected final String TEXT_200 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_201 = ";";
  protected final String TEXT_202 = NL + "\t\t\t\t";
  protected final String TEXT_203 = " sources = (";
  protected final String TEXT_204 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_205 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_206 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_207 = " src = (";
  protected final String TEXT_208 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_209 = ".";
  protected final String TEXT_210 = ", linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_211 = NL + "\t\t\t\t";
  protected final String TEXT_212 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
d233 38
a270 38
  protected final String TEXT_214 = ", linkVID));";
  protected final String TEXT_215 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_216 = NL + "\t\t}";
  protected final String TEXT_217 = NL + "\t}" + NL + "}";
  protected final String TEXT_218 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_219 = " container, ";
  protected final String TEXT_220 = " containerMetaclass, ";
  protected final String TEXT_221 = " diagram) {";
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = "\tif (";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_226 = NL + "\t\tfor (";
  protected final String TEXT_227 = " destinations = ";
  protected final String TEXT_228 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_229 = " nextDestination = (";
  protected final String TEXT_230 = ") destinations.next();";
  protected final String TEXT_231 = NL + "\t\t";
  protected final String TEXT_232 = " nextDestination = (";
  protected final String TEXT_233 = ") ";
  protected final String TEXT_234 = ";";
  protected final String TEXT_235 = NL + "\t\tif (";
  protected final String TEXT_236 = ".VISUAL_ID == ";
  protected final String TEXT_237 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_238 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_239 = ".";
  protected final String TEXT_240 = ", ";
  protected final String TEXT_241 = ".VISUAL_ID));";
  protected final String TEXT_242 = NL + "\t\t";
  protected final String TEXT_243 = " nextNode = org.eclipse.gmf.runtime.diagram.core.services.ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_244 = ".getType(";
  protected final String TEXT_245 = ".VISUAL_ID), ";
  protected final String TEXT_246 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_247 = "Children(nextNode, nextDestination);";
  protected final String TEXT_248 = NL;
  protected final String TEXT_249 = NL + "\t\t}";
  protected final String TEXT_250 = NL + "\t\t}";
  protected final String TEXT_251 = NL + "\t}";
d272 28
a299 28
  protected final String TEXT_253 = "\tif (";
  protected final String TEXT_254 = ".eINSTANCE.get";
  protected final String TEXT_255 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_256 = NL + "\t\tfor (";
  protected final String TEXT_257 = " destinations = ";
  protected final String TEXT_258 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_259 = " nextDestination = (";
  protected final String TEXT_260 = ") destinations.next();";
  protected final String TEXT_261 = NL + "\t\t";
  protected final String TEXT_262 = " nextDestination = (";
  protected final String TEXT_263 = ") ";
  protected final String TEXT_264 = ";";
  protected final String TEXT_265 = NL + "\t\tif (";
  protected final String TEXT_266 = ".VISUAL_ID == ";
  protected final String TEXT_267 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_268 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_269 = ".";
  protected final String TEXT_270 = ", ";
  protected final String TEXT_271 = ".VISUAL_ID));";
  protected final String TEXT_272 = NL;
  protected final String TEXT_273 = NL + "\t\t}";
  protected final String TEXT_274 = NL + "\t\t}";
  protected final String TEXT_275 = NL + "\t}";
  protected final String TEXT_276 = NL + "}" + NL + "\t";
  protected final String TEXT_277 = NL;
  protected final String TEXT_278 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_279 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_280 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
d301 29
a329 25
  protected final String TEXT_282 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_283 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_284 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_285 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_286 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_287 = " source, ";
  protected final String TEXT_288 = " destination, ";
  protected final String TEXT_289 = " linkElement, ";
  protected final String TEXT_290 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tfinal ";
  protected final String TEXT_291 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_292 = "(linkElement) {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_293 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_294 = " source, ";
  protected final String TEXT_295 = " destination, ";
  protected final String TEXT_296 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_297 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_298 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_299 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_300 = " source, ";
  protected final String TEXT_301 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_302 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_303 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_304 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_305 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}" + NL + "" + NL + "}";
  protected final String TEXT_306 = NL;
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d570 2
d573 1
a573 1
    final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
d575 1
a575 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d577 1
a577 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
a578 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d580 1
a580 1
    }
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d592 1
a592 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d606 1
d608 7
d619 1
a619 1
    stringBuffer.append(TEXT_65);
d621 1
a621 1
    stringBuffer.append(TEXT_66);
d623 1
a623 1
    stringBuffer.append(TEXT_67);
d625 1
a625 1
    stringBuffer.append(TEXT_68);
d627 1
a627 1
    stringBuffer.append(TEXT_69);
d633 1
a633 1
    stringBuffer.append(TEXT_70);
d635 3
a637 3
    stringBuffer.append(TEXT_71);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(TEXT_73);
d641 1
a641 1
    stringBuffer.append(TEXT_74);
a642 6
    stringBuffer.append(TEXT_75);
    stringBuffer.append(TEXT_76);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a644 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d646 1
d648 1
d650 1
a650 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d652 1
a652 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a653 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a654 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d656 1
a656 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d658 1
a658 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d660 1
a660 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d662 1
a662 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d664 1
a664 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d666 1
a666 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d668 1
a668 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d670 2
a672 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d674 1
a674 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d676 1
a676 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d678 1
a678 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d680 1
a680 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d682 1
a682 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d684 1
a684 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d686 1
a686 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d688 1
a688 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d690 1
a690 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d692 1
a692 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d694 1
a694 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d696 1
a696 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d698 1
a698 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d700 1
a700 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d702 1
a702 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d704 1
a704 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d706 1
a706 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d708 1
a708 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d710 1
a710 1
    }
d712 1
a712 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d716 1
a716 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d718 1
a718 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d722 1
a722 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d724 1
a724 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d728 1
a728 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d730 1
a730 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d732 1
a732 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d734 1
a734 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d736 1
a736 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d738 1
a738 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d744 8
d762 1
a762 1
    stringBuffer.append(TEXT_132);
d764 1
a764 1
    stringBuffer.append(TEXT_133);
d767 1
a767 1
    stringBuffer.append(TEXT_134);
d769 1
a769 1
    stringBuffer.append(TEXT_135);
d771 1
a771 1
    stringBuffer.append(TEXT_136);
d773 1
a773 1
    stringBuffer.append(TEXT_137);
d775 1
a775 1
    stringBuffer.append(TEXT_138);
d777 1
a777 1
    stringBuffer.append(TEXT_139);
d779 1
a779 1
    stringBuffer.append(TEXT_140);
d781 1
a781 1
    stringBuffer.append(TEXT_141);
d783 1
a783 1
    stringBuffer.append(TEXT_142);
d785 1
a785 1
    stringBuffer.append(TEXT_143);
d787 1
a787 1
    stringBuffer.append(TEXT_144);
d789 1
a789 1
    stringBuffer.append(TEXT_145);
d791 1
a791 1
    stringBuffer.append(TEXT_146);
d793 1
a793 1
    stringBuffer.append(TEXT_147);
d795 1
a795 1
    stringBuffer.append(TEXT_148);
d797 1
a797 1
    stringBuffer.append(TEXT_149);
d799 1
a799 1
    stringBuffer.append(TEXT_150);
d801 1
a801 1
    stringBuffer.append(TEXT_151);
d803 1
a803 1
    stringBuffer.append(TEXT_152);
d805 1
a805 1
    stringBuffer.append(TEXT_153);
d807 1
a807 1
    stringBuffer.append(TEXT_154);
d809 1
a809 1
    stringBuffer.append(TEXT_155);
d811 1
a811 1
    stringBuffer.append(TEXT_156);
d813 1
a813 1
    stringBuffer.append(TEXT_157);
d815 1
a815 1
    stringBuffer.append(TEXT_158);
d817 1
a817 1
    stringBuffer.append(TEXT_159);
d819 1
a819 1
    stringBuffer.append(TEXT_160);
d821 1
a821 1
    stringBuffer.append(TEXT_161);
d826 2
a827 2
    stringBuffer.append(TEXT_162);
    stringBuffer.append(TEXT_163);
d829 1
a829 1
    stringBuffer.append(TEXT_164);
d831 1
a831 1
    stringBuffer.append(TEXT_165);
d833 1
a833 1
    stringBuffer.append(TEXT_166);
d835 1
a835 1
    stringBuffer.append(TEXT_167);
d837 1
a837 1
    stringBuffer.append(TEXT_168);
d844 1
a844 1
    stringBuffer.append(TEXT_169);
d846 1
a846 1
    stringBuffer.append(TEXT_170);
d848 1
a848 1
    stringBuffer.append(TEXT_171);
d853 1
a853 1
    stringBuffer.append(TEXT_172);
d863 1
a863 1
    stringBuffer.append(TEXT_173);
d865 1
a865 1
    stringBuffer.append(TEXT_174);
d867 1
a867 1
    stringBuffer.append(TEXT_175);
d869 1
a869 1
    stringBuffer.append(TEXT_176);
d871 1
a871 1
    stringBuffer.append(TEXT_177);
d873 1
a873 1
    stringBuffer.append(TEXT_178);
d875 1
a875 1
    stringBuffer.append(TEXT_179);
d877 1
a877 1
    stringBuffer.append(TEXT_180);
d879 1
a879 1
    stringBuffer.append(TEXT_181);
a880 8
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_184);
    		} else {
    stringBuffer.append(TEXT_185);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d884 1
a884 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d886 1
a886 1
    		}
d888 1
a888 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d890 1
a890 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d892 1
a892 1
    stringBuffer.append(getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager));
d894 1
a894 1
     if (targetMetaFeature.isListType()){ 
d896 1
a896 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d898 1
a898 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d900 1
a900 1
     } 
d902 1
a902 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d904 1
a904 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d906 1
a906 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d908 1
a908 1
     if (sourceMetaFeature != null) {
d910 1
a910 1
    stringBuffer.append(getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager));
d912 1
a912 1
     		if (sourceMetaFeature.isListType()){ 
d914 1
a914 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d916 1
a916 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d918 1
a918 1
     		}
d920 1
a920 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d922 1
a922 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d924 1
a924 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d926 1
a926 1
    stringBuffer.append(genDiagram.getElementTypesQualifiedClassName());
d928 1
a928 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d930 1
a930 1
     } else { // sourceMetaFeature == null 
d938 8
d947 1
a947 1
    stringBuffer.append(TEXT_215);
d951 1
a951 1
    stringBuffer.append(TEXT_216);
d955 1
a955 1
    stringBuffer.append(TEXT_217);
d960 1
a960 1
    stringBuffer.append(TEXT_218);
d962 1
a962 1
    stringBuffer.append(TEXT_219);
d964 1
a964 1
    stringBuffer.append(TEXT_220);
d966 1
a966 1
    stringBuffer.append(TEXT_221);
d971 1
a971 1
    stringBuffer.append(TEXT_222);
d985 1
a985 1
    stringBuffer.append(TEXT_223);
d987 1
a987 1
    stringBuffer.append(TEXT_224);
d989 1
a989 1
    stringBuffer.append(TEXT_225);
d991 1
a991 1
    stringBuffer.append(TEXT_226);
d993 1
a993 1
    stringBuffer.append(TEXT_227);
d995 1
a995 1
    stringBuffer.append(TEXT_228);
d997 1
a997 1
    stringBuffer.append(TEXT_229);
d999 1
a999 1
    stringBuffer.append(TEXT_230);
d1001 1
a1001 1
    stringBuffer.append(TEXT_231);
d1003 1
a1003 1
    stringBuffer.append(TEXT_232);
d1005 1
a1005 1
    stringBuffer.append(TEXT_233);
d1007 1
a1007 1
    stringBuffer.append(TEXT_234);
d1010 1
a1010 1
    stringBuffer.append(TEXT_235);
d1012 1
a1012 1
    stringBuffer.append(TEXT_236);
d1014 1
a1014 1
    stringBuffer.append(TEXT_237);
d1016 1
a1016 1
    stringBuffer.append(TEXT_238);
d1018 1
a1018 1
    stringBuffer.append(TEXT_239);
d1020 1
a1020 1
    stringBuffer.append(TEXT_240);
d1022 1
a1022 1
    stringBuffer.append(TEXT_241);
d1024 1
a1024 1
    stringBuffer.append(TEXT_242);
d1026 1
a1026 1
    stringBuffer.append(TEXT_243);
d1028 1
a1028 1
    stringBuffer.append(TEXT_244);
d1030 1
a1030 1
    stringBuffer.append(TEXT_245);
d1032 1
a1032 1
    stringBuffer.append(TEXT_246);
d1034 1
a1034 1
    stringBuffer.append(TEXT_247);
d1036 1
a1036 1
    stringBuffer.append(TEXT_248);
d1038 1
a1038 1
    stringBuffer.append(TEXT_249);
d1041 1
a1041 1
    stringBuffer.append(TEXT_250);
d1043 1
a1043 1
    stringBuffer.append(TEXT_251);
d1050 1
a1050 1
    stringBuffer.append(TEXT_252);
d1064 1
a1064 1
    stringBuffer.append(TEXT_253);
d1066 1
a1066 1
    stringBuffer.append(TEXT_254);
d1068 1
a1068 1
    stringBuffer.append(TEXT_255);
d1070 1
a1070 1
    stringBuffer.append(TEXT_256);
d1072 1
a1072 1
    stringBuffer.append(TEXT_257);
d1074 1
a1074 1
    stringBuffer.append(TEXT_258);
d1076 1
a1076 1
    stringBuffer.append(TEXT_259);
d1078 1
a1078 1
    stringBuffer.append(TEXT_260);
d1080 1
a1080 1
    stringBuffer.append(TEXT_261);
d1082 1
a1082 1
    stringBuffer.append(TEXT_262);
d1084 1
a1084 1
    stringBuffer.append(TEXT_263);
d1086 1
a1086 1
    stringBuffer.append(TEXT_264);
d1089 1
a1089 1
    stringBuffer.append(TEXT_265);
d1091 1
a1091 1
    stringBuffer.append(TEXT_266);
d1093 1
a1093 1
    stringBuffer.append(TEXT_267);
d1095 1
a1095 1
    stringBuffer.append(TEXT_268);
d1097 1
a1097 1
    stringBuffer.append(TEXT_269);
d1099 1
a1099 1
    stringBuffer.append(TEXT_270);
d1101 2
a1102 2
    stringBuffer.append(TEXT_271);
    stringBuffer.append(TEXT_272);
d1104 1
a1104 1
    stringBuffer.append(TEXT_273);
d1107 1
a1107 1
    stringBuffer.append(TEXT_274);
d1109 1
a1109 1
    stringBuffer.append(TEXT_275);
a1110 6
    stringBuffer.append(TEXT_276);
    stringBuffer.append(TEXT_277);
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1112 3
    
// an inner class 

d1114 1
a1114 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1116 1
a1116 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1117 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1119 3
a1121 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1129 1
a1129 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1131 1
a1131 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1133 1
a1133 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1135 2
a1137 2
    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1139 1
a1139 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1141 1
a1141 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1145 1
a1145 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1147 2
a1149 2
    stringBuffer.append(TEXT_299);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1151 1
a1151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1153 1
a1153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1155 1
a1155 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1159 8
d1168 1
a1168 1
    stringBuffer.append(TEXT_305);
d1170 1
a1170 1
    stringBuffer.append(TEXT_306);
@


1.53
log
@[174946] - CanonicalEditPolicy generated for diagram should keep ElementType inside SemanticAdapter for TypeLinks on creation
@
text
@d262 1
a262 1
  protected final String TEXT_243 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
@


1.52
log
@[172032] - Do not generate ??CanonicalEditPolicy for pure-design elements
@
text
@d227 40
a266 40
  protected final String TEXT_208 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_209 = NL + "\t\t\t\t";
  protected final String TEXT_210 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_211 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_212 = NL + "\t\t}";
  protected final String TEXT_213 = NL + "\t}" + NL + "}";
  protected final String TEXT_214 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_215 = " container, ";
  protected final String TEXT_216 = " containerMetaclass, ";
  protected final String TEXT_217 = " diagram) {";
  protected final String TEXT_218 = NL;
  protected final String TEXT_219 = "\tif (";
  protected final String TEXT_220 = ".eINSTANCE.get";
  protected final String TEXT_221 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_222 = NL + "\t\tfor (";
  protected final String TEXT_223 = " destinations = ";
  protected final String TEXT_224 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_225 = " nextDestination = (";
  protected final String TEXT_226 = ") destinations.next();";
  protected final String TEXT_227 = NL + "\t\t";
  protected final String TEXT_228 = " nextDestination = (";
  protected final String TEXT_229 = ") ";
  protected final String TEXT_230 = ";";
  protected final String TEXT_231 = NL + "\t\tif (";
  protected final String TEXT_232 = ".VISUAL_ID == ";
  protected final String TEXT_233 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_234 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_235 = ".";
  protected final String TEXT_236 = ", ";
  protected final String TEXT_237 = ".VISUAL_ID));";
  protected final String TEXT_238 = NL + "\t\t";
  protected final String TEXT_239 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_240 = ".getType(";
  protected final String TEXT_241 = ".VISUAL_ID), ";
  protected final String TEXT_242 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_243 = "Children(nextNode, nextDestination);";
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = NL + "\t\t}";
  protected final String TEXT_246 = NL + "\t\t}";
  protected final String TEXT_247 = NL + "\t}";
d268 28
a295 28
  protected final String TEXT_249 = "\tif (";
  protected final String TEXT_250 = ".eINSTANCE.get";
  protected final String TEXT_251 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_252 = NL + "\t\tfor (";
  protected final String TEXT_253 = " destinations = ";
  protected final String TEXT_254 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_255 = " nextDestination = (";
  protected final String TEXT_256 = ") destinations.next();";
  protected final String TEXT_257 = NL + "\t\t";
  protected final String TEXT_258 = " nextDestination = (";
  protected final String TEXT_259 = ") ";
  protected final String TEXT_260 = ";";
  protected final String TEXT_261 = NL + "\t\tif (";
  protected final String TEXT_262 = ".VISUAL_ID == ";
  protected final String TEXT_263 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_264 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_265 = ".";
  protected final String TEXT_266 = ", ";
  protected final String TEXT_267 = ".VISUAL_ID));";
  protected final String TEXT_268 = NL;
  protected final String TEXT_269 = NL + "\t\t}";
  protected final String TEXT_270 = NL + "\t\t}";
  protected final String TEXT_271 = NL + "\t}";
  protected final String TEXT_272 = NL + "}" + NL + "\t";
  protected final String TEXT_273 = NL;
  protected final String TEXT_274 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_275 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_276 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
d297 9
a305 9
  protected final String TEXT_278 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_279 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_280 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_281 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_282 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_283 = " source, ";
  protected final String TEXT_284 = " destination, ";
  protected final String TEXT_285 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_286 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
d308 18
a325 11
  protected final String TEXT_289 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_290 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_291 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_292 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_293 = " source, ";
  protected final String TEXT_294 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_295 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_296 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_297 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_298 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}" + NL + "" + NL + "}";
  protected final String TEXT_299 = NL;
d921 4
d926 1
a926 1
    stringBuffer.append(TEXT_209);
d928 5
a932 1
    stringBuffer.append(TEXT_210);
d934 1
a934 1
    stringBuffer.append(TEXT_211);
d938 1
a938 1
    stringBuffer.append(TEXT_212);
d942 1
a942 1
    stringBuffer.append(TEXT_213);
d947 1
a947 1
    stringBuffer.append(TEXT_214);
d949 1
a949 1
    stringBuffer.append(TEXT_215);
d951 1
a951 1
    stringBuffer.append(TEXT_216);
d953 1
a953 1
    stringBuffer.append(TEXT_217);
d958 1
a958 1
    stringBuffer.append(TEXT_218);
d972 1
a972 1
    stringBuffer.append(TEXT_219);
d974 1
a974 1
    stringBuffer.append(TEXT_220);
d976 1
a976 1
    stringBuffer.append(TEXT_221);
d978 1
a978 1
    stringBuffer.append(TEXT_222);
d980 1
a980 1
    stringBuffer.append(TEXT_223);
d982 1
a982 1
    stringBuffer.append(TEXT_224);
d984 1
a984 1
    stringBuffer.append(TEXT_225);
d986 1
a986 1
    stringBuffer.append(TEXT_226);
d988 1
a988 1
    stringBuffer.append(TEXT_227);
d990 1
a990 1
    stringBuffer.append(TEXT_228);
d992 1
a992 1
    stringBuffer.append(TEXT_229);
d994 1
a994 1
    stringBuffer.append(TEXT_230);
d997 1
a997 1
    stringBuffer.append(TEXT_231);
d999 1
a999 1
    stringBuffer.append(TEXT_232);
d1001 1
a1001 1
    stringBuffer.append(TEXT_233);
d1003 1
a1003 1
    stringBuffer.append(TEXT_234);
d1005 1
a1005 1
    stringBuffer.append(TEXT_235);
d1007 1
a1007 1
    stringBuffer.append(TEXT_236);
d1009 1
a1009 1
    stringBuffer.append(TEXT_237);
d1011 1
a1011 1
    stringBuffer.append(TEXT_238);
d1013 1
a1013 1
    stringBuffer.append(TEXT_239);
d1015 1
a1015 1
    stringBuffer.append(TEXT_240);
d1017 1
a1017 1
    stringBuffer.append(TEXT_241);
d1019 1
a1019 1
    stringBuffer.append(TEXT_242);
d1021 1
a1021 1
    stringBuffer.append(TEXT_243);
d1023 1
a1023 1
    stringBuffer.append(TEXT_244);
d1025 1
a1025 1
    stringBuffer.append(TEXT_245);
d1028 1
a1028 1
    stringBuffer.append(TEXT_246);
d1030 1
a1030 1
    stringBuffer.append(TEXT_247);
d1037 1
a1037 1
    stringBuffer.append(TEXT_248);
d1051 1
a1051 1
    stringBuffer.append(TEXT_249);
d1053 1
a1053 1
    stringBuffer.append(TEXT_250);
d1055 1
a1055 1
    stringBuffer.append(TEXT_251);
d1057 1
a1057 1
    stringBuffer.append(TEXT_252);
d1059 1
a1059 1
    stringBuffer.append(TEXT_253);
d1061 1
a1061 1
    stringBuffer.append(TEXT_254);
d1063 1
a1063 1
    stringBuffer.append(TEXT_255);
d1065 1
a1065 1
    stringBuffer.append(TEXT_256);
d1067 1
a1067 1
    stringBuffer.append(TEXT_257);
d1069 1
a1069 1
    stringBuffer.append(TEXT_258);
d1071 1
a1071 1
    stringBuffer.append(TEXT_259);
d1073 1
a1073 1
    stringBuffer.append(TEXT_260);
d1076 1
a1076 1
    stringBuffer.append(TEXT_261);
d1078 1
a1078 1
    stringBuffer.append(TEXT_262);
d1080 1
a1080 1
    stringBuffer.append(TEXT_263);
d1082 1
a1082 1
    stringBuffer.append(TEXT_264);
d1084 1
a1084 1
    stringBuffer.append(TEXT_265);
d1086 1
a1086 1
    stringBuffer.append(TEXT_266);
d1088 2
a1089 2
    stringBuffer.append(TEXT_267);
    stringBuffer.append(TEXT_268);
d1091 1
a1091 1
    stringBuffer.append(TEXT_269);
d1094 1
a1094 1
    stringBuffer.append(TEXT_270);
d1096 1
a1096 1
    stringBuffer.append(TEXT_271);
a1097 6
    stringBuffer.append(TEXT_272);
    stringBuffer.append(TEXT_273);
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1099 3
    
// an inner class 

d1101 1
a1101 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1103 1
a1103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1104 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1106 3
a1108 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1116 1
a1116 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1122 1
a1122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1126 1
a1126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1128 2
a1130 2
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1136 1
a1136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1138 1
a1138 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1142 14
d1157 1
a1157 1
    stringBuffer.append(TEXT_299);
@


1.51
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d63 32
a94 32
  protected final String TEXT_44 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_46 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_49 = " createdViews = new ";
  protected final String TEXT_50 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_51 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = " createdConnectionViews = new ";
  protected final String TEXT_54 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_55 = " layoutCmd = new ";
  protected final String TEXT_56 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_57 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_58 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_59 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_60 = " phantomNodes = new ";
  protected final String TEXT_61 = "();" + NL + "\t\t";
  protected final String TEXT_62 = " diagramModelObject = ((";
  protected final String TEXT_63 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_64 = " diagram = getDiagram();";
  protected final String TEXT_65 = NL;
  protected final String TEXT_66 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_67 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_68 = " nextResourceObject = (";
  protected final String TEXT_69 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_70 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_71 = NL + "\tcase ";
  protected final String TEXT_72 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_75 = "\t}" + NL + "}";
d96 169
a264 169
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "for (";
  protected final String TEXT_79 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_80 = " nextView = (";
  protected final String TEXT_81 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_82 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_85 = " createPhantomNodes(";
  protected final String TEXT_86 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_87 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_88 = " descriptors = new ";
  protected final String TEXT_89 = "();" + NL + "\tfor (";
  protected final String TEXT_90 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_91 = " element = (";
  protected final String TEXT_92 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_93 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_94 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_95 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_96 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_97 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_98 = " cc = new ";
  protected final String TEXT_99 = "(";
  protected final String TEXT_100 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_101 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_102 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_103 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_104 = " createCommand = new ";
  protected final String TEXT_105 = "(((";
  protected final String TEXT_106 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_107 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_108 = " adapters = ";
  protected final String TEXT_109 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_110 = ".makeMutable(new ";
  protected final String TEXT_111 = "(((";
  protected final String TEXT_112 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_113 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_114 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_115 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_116 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_117 = " myLinkDescriptors = new ";
  protected final String TEXT_118 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_119 = " myEObject2ViewMap = new ";
  protected final String TEXT_120 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_121 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_122 = " existingLinks = new ";
  protected final String TEXT_123 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_124 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_125 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_126 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_127 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_128 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_129 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_130 = " view) {" + NL + "\t\t";
  protected final String TEXT_131 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_132 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_133 = NL + "\t\tcase ";
  protected final String TEXT_134 = ".VISUAL_ID:";
  protected final String TEXT_135 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_136 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_137 = " childView = (";
  protected final String TEXT_138 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " createConnections(";
  protected final String TEXT_140 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_141 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_142 = " adapters = new ";
  protected final String TEXT_143 = "();" + NL + "\t\tfor (";
  protected final String TEXT_144 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_145 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_146 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_147 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_148 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_149 = ".APPEND, false, ((";
  protected final String TEXT_150 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_151 = " ccr = new ";
  protected final String TEXT_152 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_153 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_154 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_155 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_156 = " viewAdapter = (";
  protected final String TEXT_157 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_158 = " getEditPartFor(";
  protected final String TEXT_159 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_160 = " view = (";
  protected final String TEXT_161 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_162 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_165 = " container, ";
  protected final String TEXT_166 = " diagram) {" + NL + "\t";
  protected final String TEXT_167 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_168 = " container, ";
  protected final String TEXT_169 = " containerMetaclass) {\t";
  protected final String TEXT_170 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_171 = "_";
  protected final String TEXT_172 = "(container, containerMetaclass);";
  protected final String TEXT_173 = NL + "}" + NL;
  protected final String TEXT_174 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_175 = "_";
  protected final String TEXT_176 = "(";
  protected final String TEXT_177 = " container, ";
  protected final String TEXT_178 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_179 = ".eINSTANCE.get";
  protected final String TEXT_180 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_181 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_182 = " values = ";
  protected final String TEXT_183 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_184 = " nextValue = ((";
  protected final String TEXT_185 = ") values.next());";
  protected final String TEXT_186 = NL + "\t\t";
  protected final String TEXT_187 = " nextValue = (";
  protected final String TEXT_188 = ") ";
  protected final String TEXT_189 = ";";
  protected final String TEXT_190 = NL + "\t\tint linkVID = ";
  protected final String TEXT_191 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_192 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_193 = ";";
  protected final String TEXT_194 = NL + "\t\t\t";
  protected final String TEXT_195 = " targets = (";
  protected final String TEXT_196 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_197 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_198 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_199 = " dst = (";
  protected final String TEXT_200 = ") structuralFeatureResult;";
  protected final String TEXT_201 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_202 = ";";
  protected final String TEXT_203 = NL + "\t\t\t\t";
  protected final String TEXT_204 = " sources = (";
  protected final String TEXT_205 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_206 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_207 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_208 = " src = (";
  protected final String TEXT_209 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_210 = NL + "\t\t\t\t";
  protected final String TEXT_211 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_212 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_213 = NL + "\t\t}";
  protected final String TEXT_214 = NL + "\t}" + NL + "}";
  protected final String TEXT_215 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_216 = " container, ";
  protected final String TEXT_217 = " containerMetaclass, ";
  protected final String TEXT_218 = " diagram) {";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "\tif (";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_223 = NL + "\t\tfor (";
  protected final String TEXT_224 = " destinations = ";
  protected final String TEXT_225 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_226 = " nextDestination = (";
  protected final String TEXT_227 = ") destinations.next();";
  protected final String TEXT_228 = NL + "\t\t";
  protected final String TEXT_229 = " nextDestination = (";
  protected final String TEXT_230 = ") ";
  protected final String TEXT_231 = ";";
  protected final String TEXT_232 = NL + "\t\tif (";
  protected final String TEXT_233 = ".VISUAL_ID == ";
  protected final String TEXT_234 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_235 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_236 = ".";
  protected final String TEXT_237 = ", ";
  protected final String TEXT_238 = ".VISUAL_ID));";
  protected final String TEXT_239 = NL + "\t\t";
  protected final String TEXT_240 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_241 = ".getType(";
  protected final String TEXT_242 = ".VISUAL_ID), ";
  protected final String TEXT_243 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_244 = "Children(nextNode, nextDestination);";
  protected final String TEXT_245 = NL;
d266 23
a288 23
  protected final String TEXT_247 = NL + "\t\t}";
  protected final String TEXT_248 = NL + "\t}";
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = "\tif (";
  protected final String TEXT_251 = ".eINSTANCE.get";
  protected final String TEXT_252 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_253 = NL + "\t\tfor (";
  protected final String TEXT_254 = " destinations = ";
  protected final String TEXT_255 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_256 = " nextDestination = (";
  protected final String TEXT_257 = ") destinations.next();";
  protected final String TEXT_258 = NL + "\t\t";
  protected final String TEXT_259 = " nextDestination = (";
  protected final String TEXT_260 = ") ";
  protected final String TEXT_261 = ";";
  protected final String TEXT_262 = NL + "\t\tif (";
  protected final String TEXT_263 = ".VISUAL_ID == ";
  protected final String TEXT_264 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_265 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_266 = ".";
  protected final String TEXT_267 = ", ";
  protected final String TEXT_268 = ".VISUAL_ID));";
  protected final String TEXT_269 = NL;
d290 29
a318 31
  protected final String TEXT_271 = NL + "\t\t}";
  protected final String TEXT_272 = NL + "\t}";
  protected final String TEXT_273 = NL + "}" + NL + "\t";
  protected final String TEXT_274 = NL;
  protected final String TEXT_275 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_276 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_277 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_278 = NL;
  protected final String TEXT_279 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_280 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_281 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_282 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_283 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_284 = " source, ";
  protected final String TEXT_285 = " destination, ";
  protected final String TEXT_286 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_287 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_288 = " source, ";
  protected final String TEXT_289 = " destination, ";
  protected final String TEXT_290 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_291 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_292 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_293 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_294 = " source, ";
  protected final String TEXT_295 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_296 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_297 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_298 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_299 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_300 = NL + NL + "}";
  protected final String TEXT_301 = NL;
d426 6
d452 1
a452 5
    
GenClass modelElementInterface = genDiagram.getDomainDiagramElement();
if (modelElementInterface != null) {
	List genNodes = genDiagram.getTopLevelNodes();

d477 1
a477 1
	if (typeModelFacet == null || typeModelFacet.isPhantomElement()) {
d557 1
a557 1
    }
a558 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d560 1
a560 1
    if (modelElementInterface != null) {
d562 1
a562 1
    final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d568 1
a568 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d570 1
a570 1
    }
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d578 1
a578 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d580 1
a580 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d582 1
a582 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a593 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a594 1
    stringBuffer.append(TEXT_65);
d599 2
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a607 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_70);
d613 2
a615 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
a617 1
    stringBuffer.append(TEXT_74);
d621 2
a623 1
    }
d626 1
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a633 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d636 1
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d642 1
a642 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d644 1
a644 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d652 1
a652 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d654 1
a654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d656 1
a656 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d658 1
a658 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d660 1
a660 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d662 1
a662 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d666 1
a666 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d668 1
a668 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d670 1
a670 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d674 1
a674 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d676 1
a676 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d678 1
a678 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d680 1
a680 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d682 1
a682 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d684 1
a684 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d686 1
a686 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d688 1
a688 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d690 1
a690 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d692 1
a692 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d694 1
a694 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d698 1
a698 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d700 1
a700 1
    }
d702 1
a702 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d704 1
a704 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d706 1
a706 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d708 1
a708 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d712 1
a712 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d716 1
a716 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d722 1
a722 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d724 1
a724 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d728 1
a728 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d730 1
a730 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a731 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_132);
d742 2
a744 2
    stringBuffer.append(importManager.getImportedName(nextContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_134);
d747 2
d750 1
a750 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d754 1
a754 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d758 1
a758 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d760 1
a760 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d762 1
a762 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d764 1
a764 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d766 1
a766 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d770 1
a770 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d774 1
a774 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d776 1
a776 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d778 1
a778 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d782 1
a782 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d786 1
a786 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d788 1
a788 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d792 1
a792 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d794 1
a794 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d796 1
a796 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d800 1
a800 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a801 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_162);
d806 1
d808 1
d810 1
a810 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d812 1
a812 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d814 2
a816 2
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a817 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_169);
d824 2
d827 1
a827 1
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
a828 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_172);
d833 1
a833 1
    stringBuffer.append(TEXT_173);
d843 2
d846 1
a846 1
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
d848 1
a848 1
    stringBuffer.append(nextLink.getVisualID());
d850 1
a850 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d852 1
a852 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d854 1
a854 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d856 1
a856 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d858 1
a858 1
    		if (childMetaFeature.isListType()) {
d860 1
a860 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d862 1
a862 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d866 2
a868 2
    stringBuffer.append(TEXT_185);
    		} else {
d872 1
a872 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d874 1
a874 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d876 1
a876 1
    		}
d878 1
a878 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d880 1
a880 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d882 1
a882 1
    stringBuffer.append(getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager));
d884 1
a884 1
     if (targetMetaFeature.isListType()){ 
d888 1
a888 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d890 1
a890 1
     } 
d896 1
a896 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d898 1
a898 1
     if (sourceMetaFeature != null) {
d900 1
a900 1
    stringBuffer.append(getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager));
d902 1
a902 1
     		if (sourceMetaFeature.isListType()){ 
d906 1
a906 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d908 1
a908 1
     		}
d914 2
a916 2
    stringBuffer.append(TEXT_209);
     } else { // sourceMetaFeature == null 
d918 1
a918 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a919 2
     }
    stringBuffer.append(TEXT_212);
d923 1
a923 1
    stringBuffer.append(TEXT_213);
d927 1
a927 1
    stringBuffer.append(TEXT_214);
d932 2
d935 1
a935 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d937 1
a937 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
a938 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_218);
d943 1
a943 1
    stringBuffer.append(TEXT_219);
d957 2
d960 1
a960 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d962 1
a962 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d964 1
a964 1
    	if (genFeature.isListType()) {
d966 1
a966 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d968 1
a968 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d972 2
a974 2
    stringBuffer.append(TEXT_227);
    	} else {
d978 1
a978 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a979 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_231);
d982 2
d985 1
a985 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d987 1
a987 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d989 1
a989 1
    	}
d991 1
a991 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d993 1
a993 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d995 1
a995 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d997 1
a997 1
    	if (createPhantoms) {
d999 1
a999 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1001 1
a1001 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1003 1
a1003 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d1005 1
a1005 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d1007 1
a1007 1
    stringBuffer.append(phantomNode.getUniqueIdentifier());
d1009 2
d1012 1
a1012 2
    stringBuffer.append(TEXT_245);
    	if (phantomsOnly) {
a1014 1
	if (genFeature.isListType()) {
a1015 2
    	}
    stringBuffer.append(TEXT_248);
d1022 1
a1022 1
    stringBuffer.append(TEXT_249);
d1036 2
d1039 1
a1039 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d1041 1
a1041 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d1043 1
a1043 1
    	if (genFeature.isListType()) {
d1045 1
a1045 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d1047 1
a1047 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d1051 2
a1053 2
    stringBuffer.append(TEXT_257);
    	} else {
d1057 1
a1057 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1058 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_261);
d1061 2
d1064 1
a1064 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d1066 1
a1066 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d1068 1
a1068 1
    	}
d1070 1
a1070 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d1072 1
a1072 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
a1073 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d1075 1
d1077 2
a1078 1
    	if (phantomsOnly) {
a1080 1
	if (genFeature.isListType()) {
d1082 1
a1082 1
    	}
a1083 1
    }
d1086 1
d1088 1
a1088 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a1089 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1090 1
    stringBuffer.append(TEXT_278);
d1094 2
d1101 2
a1103 2
    stringBuffer.append(TEXT_282);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1109 2
a1111 2
    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1115 1
a1115 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1119 2
a1121 2
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1123 1
a1123 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1133 1
a1133 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1135 1
a1135 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a1136 4
    }
    stringBuffer.append(TEXT_300);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_301);
@


1.50
log
@#161380 simplify feature model facets
@
text
@d330 7
a336 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.49
log
@do not generate canonical edit policies unless needed
@
text
@d943 1
a943 1
if (false == nextLink.getModelFacet() instanceof FeatureModelFacet) {
d946 1
a946 1
FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
d1022 1
a1022 1
if (false == nextLink.getModelFacet() instanceof FeatureModelFacet) {
d1025 1
a1025 1
FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
@


1.48
log
@moved code-only parts from templates to model impl classes
@
text
@d29 4
a32 4
  protected final String TEXT_10 = " getSemanticChildrenList() {" + NL + "\t";
  protected final String TEXT_11 = " result = new ";
  protected final String TEXT_12 = "();";
  protected final String TEXT_13 = NL + "\t";
d37 20
a56 20
  protected final String TEXT_18 = "\t";
  protected final String TEXT_19 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_20 = "\tfor (";
  protected final String TEXT_21 = " values = ";
  protected final String TEXT_22 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_23 = ") values.next();";
  protected final String TEXT_24 = NL + "\tnextValue = ";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + "\tnodeVID = ";
  protected final String TEXT_27 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_28 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_29 = NL + "\tcase ";
  protected final String TEXT_30 = ".VISUAL_ID: {";
  protected final String TEXT_31 = NL + "\tif (";
  protected final String TEXT_32 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_33 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = "\t\tbreak;";
  protected final String TEXT_36 = "\t}";
  protected final String TEXT_37 = NL + "\t}";
d58 34
a91 34
  protected final String TEXT_39 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_40 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null && view.getElement().eIsProxy();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_42 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_45 = " createdViews = new ";
  protected final String TEXT_46 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_47 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " createdConnectionViews = new ";
  protected final String TEXT_50 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_51 = " layoutCmd = new ";
  protected final String TEXT_52 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_53 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_54 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_55 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_56 = " phantomNodes = new ";
  protected final String TEXT_57 = "();" + NL + "\t\t";
  protected final String TEXT_58 = " diagramModelObject = ((";
  protected final String TEXT_59 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_60 = " diagram = getDiagram();";
  protected final String TEXT_61 = NL;
  protected final String TEXT_62 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_63 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_64 = " nextResourceObject = (";
  protected final String TEXT_65 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_66 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_67 = NL + "\tcase ";
  protected final String TEXT_68 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_71 = "\t}" + NL + "}";
  protected final String TEXT_72 = NL;
d93 97
a189 97
  protected final String TEXT_74 = "for (";
  protected final String TEXT_75 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_76 = " nextView = (";
  protected final String TEXT_77 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_78 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_81 = " createPhantomNodes(";
  protected final String TEXT_82 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_83 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_84 = " descriptors = new ";
  protected final String TEXT_85 = "();" + NL + "\tfor (";
  protected final String TEXT_86 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_87 = " element = (";
  protected final String TEXT_88 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_89 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_90 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_91 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_92 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_93 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_94 = " cc = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_97 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_99 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_100 = " createCommand = new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_103 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_104 = " adapters = ";
  protected final String TEXT_105 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_106 = ".makeMutable(new ";
  protected final String TEXT_107 = "(((";
  protected final String TEXT_108 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_109 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_110 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_111 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_112 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_113 = " myLinkDescriptors = new ";
  protected final String TEXT_114 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_115 = " myEObject2ViewMap = new ";
  protected final String TEXT_116 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_117 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_118 = " existingLinks = new ";
  protected final String TEXT_119 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_120 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_121 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_123 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_124 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_125 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_126 = " view) {" + NL + "\t\t";
  protected final String TEXT_127 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_128 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_129 = NL + "\t\tcase ";
  protected final String TEXT_130 = ".VISUAL_ID:";
  protected final String TEXT_131 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_132 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_133 = " childView = (";
  protected final String TEXT_134 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_135 = " createConnections(";
  protected final String TEXT_136 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_137 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_138 = " adapters = new ";
  protected final String TEXT_139 = "();" + NL + "\t\tfor (";
  protected final String TEXT_140 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_141 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_142 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_143 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_144 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_145 = ".APPEND, false, ((";
  protected final String TEXT_146 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_147 = " ccr = new ";
  protected final String TEXT_148 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_149 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_150 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_151 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_152 = " viewAdapter = (";
  protected final String TEXT_153 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_154 = " getEditPartFor(";
  protected final String TEXT_155 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_156 = " view = (";
  protected final String TEXT_157 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_158 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_159 = NL;
  protected final String TEXT_160 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_161 = " container, ";
  protected final String TEXT_162 = " diagram) {" + NL + "\t";
  protected final String TEXT_163 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_164 = " container, ";
  protected final String TEXT_165 = " containerMetaclass) {\t";
  protected final String TEXT_166 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_167 = "_";
  protected final String TEXT_168 = "(container, containerMetaclass);";
  protected final String TEXT_169 = NL + "}" + NL;
  protected final String TEXT_170 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
d191 17
a207 17
  protected final String TEXT_172 = "(";
  protected final String TEXT_173 = " container, ";
  protected final String TEXT_174 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_175 = ".eINSTANCE.get";
  protected final String TEXT_176 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_177 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_178 = " values = ";
  protected final String TEXT_179 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_180 = " nextValue = ((";
  protected final String TEXT_181 = ") values.next());";
  protected final String TEXT_182 = NL + "\t\t";
  protected final String TEXT_183 = " nextValue = (";
  protected final String TEXT_184 = ") ";
  protected final String TEXT_185 = ";";
  protected final String TEXT_186 = NL + "\t\tint linkVID = ";
  protected final String TEXT_187 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_188 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
d209 55
a263 55
  protected final String TEXT_190 = NL + "\t\t\t";
  protected final String TEXT_191 = " targets = (";
  protected final String TEXT_192 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_193 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_194 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_195 = " dst = (";
  protected final String TEXT_196 = ") structuralFeatureResult;";
  protected final String TEXT_197 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_198 = ";";
  protected final String TEXT_199 = NL + "\t\t\t\t";
  protected final String TEXT_200 = " sources = (";
  protected final String TEXT_201 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_202 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_203 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_204 = " src = (";
  protected final String TEXT_205 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_206 = NL + "\t\t\t\t";
  protected final String TEXT_207 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_208 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_209 = NL + "\t\t}";
  protected final String TEXT_210 = NL + "\t}" + NL + "}";
  protected final String TEXT_211 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_212 = " container, ";
  protected final String TEXT_213 = " containerMetaclass, ";
  protected final String TEXT_214 = " diagram) {";
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = "\tif (";
  protected final String TEXT_217 = ".eINSTANCE.get";
  protected final String TEXT_218 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_219 = NL + "\t\tfor (";
  protected final String TEXT_220 = " destinations = ";
  protected final String TEXT_221 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_222 = " nextDestination = (";
  protected final String TEXT_223 = ") destinations.next();";
  protected final String TEXT_224 = NL + "\t\t";
  protected final String TEXT_225 = " nextDestination = (";
  protected final String TEXT_226 = ") ";
  protected final String TEXT_227 = ";";
  protected final String TEXT_228 = NL + "\t\tif (";
  protected final String TEXT_229 = ".VISUAL_ID == ";
  protected final String TEXT_230 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_231 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_232 = ".";
  protected final String TEXT_233 = ", ";
  protected final String TEXT_234 = ".VISUAL_ID));";
  protected final String TEXT_235 = NL + "\t\t";
  protected final String TEXT_236 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_237 = ".getType(";
  protected final String TEXT_238 = ".VISUAL_ID), ";
  protected final String TEXT_239 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_240 = "Children(nextNode, nextDestination);";
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = NL + "\t\t}";
  protected final String TEXT_243 = NL + "\t\t}";
  protected final String TEXT_244 = NL + "\t}";
d265 28
a292 28
  protected final String TEXT_246 = "\tif (";
  protected final String TEXT_247 = ".eINSTANCE.get";
  protected final String TEXT_248 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_249 = NL + "\t\tfor (";
  protected final String TEXT_250 = " destinations = ";
  protected final String TEXT_251 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_252 = " nextDestination = (";
  protected final String TEXT_253 = ") destinations.next();";
  protected final String TEXT_254 = NL + "\t\t";
  protected final String TEXT_255 = " nextDestination = (";
  protected final String TEXT_256 = ") ";
  protected final String TEXT_257 = ";";
  protected final String TEXT_258 = NL + "\t\tif (";
  protected final String TEXT_259 = ".VISUAL_ID == ";
  protected final String TEXT_260 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_261 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_262 = ".";
  protected final String TEXT_263 = ", ";
  protected final String TEXT_264 = ".VISUAL_ID));";
  protected final String TEXT_265 = NL;
  protected final String TEXT_266 = NL + "\t\t}";
  protected final String TEXT_267 = NL + "\t\t}";
  protected final String TEXT_268 = NL + "\t}";
  protected final String TEXT_269 = NL + "}" + NL + "\t";
  protected final String TEXT_270 = NL;
  protected final String TEXT_271 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_272 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_273 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
d294 9
a302 9
  protected final String TEXT_275 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_276 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_277 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_278 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_279 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_280 = " source, ";
  protected final String TEXT_281 = " destination, ";
  protected final String TEXT_282 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_283 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
d305 16
a320 12
  protected final String TEXT_286 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_287 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_288 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_289 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_290 = " source, ";
  protected final String TEXT_291 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_292 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_293 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_294 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_295 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_296 = NL + NL + "}";
  protected final String TEXT_297 = NL;
d451 2
d454 1
a454 1
    stringBuffer.append(TEXT_11);
a455 2
    stringBuffer.append(TEXT_12);
    if (genNodes.size() > 0) {
d465 1
a465 1
    }
d485 1
a485 1
    stringBuffer.append(TEXT_18);
d487 1
a487 1
    stringBuffer.append(TEXT_19);
d497 1
a497 1
    stringBuffer.append(TEXT_20);
d499 1
a499 1
    stringBuffer.append(TEXT_21);
d501 1
a501 1
    stringBuffer.append(TEXT_22);
d503 1
a503 1
    stringBuffer.append(TEXT_23);
d505 1
a505 1
    stringBuffer.append(TEXT_24);
d507 1
a507 1
    stringBuffer.append(TEXT_25);
d509 1
a509 1
    stringBuffer.append(TEXT_26);
d511 1
a511 1
    stringBuffer.append(TEXT_27);
d514 1
a514 1
    stringBuffer.append(TEXT_28);
d520 1
a520 1
    stringBuffer.append(TEXT_29);
d522 1
a522 1
    stringBuffer.append(TEXT_30);
d524 1
a524 1
    stringBuffer.append(TEXT_31);
d526 1
a526 1
    stringBuffer.append(TEXT_32);
a527 1
    stringBuffer.append(TEXT_33);
d529 1
d531 1
a531 1
    stringBuffer.append(TEXT_35);
d533 1
a533 1
    stringBuffer.append(TEXT_36);
d536 1
a536 1
    stringBuffer.append(TEXT_37);
d539 1
a539 1
    stringBuffer.append(TEXT_38);
a541 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d543 1
a543 1
    }
d547 1
a547 1
    if (modelElementInterface != null) {
d549 1
a549 1
    final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
d551 1
a551 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d553 1
a553 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d555 1
a555 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d557 1
a557 1
    }
d563 1
a563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d565 1
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d567 1
a567 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d569 1
a569 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d571 1
a571 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d573 1
a573 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d575 1
a575 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d577 1
a577 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d583 1
d585 7
d596 1
a596 1
    stringBuffer.append(TEXT_62);
d598 1
a598 1
    stringBuffer.append(TEXT_63);
d600 1
a600 1
    stringBuffer.append(TEXT_64);
d602 1
a602 1
    stringBuffer.append(TEXT_65);
d604 1
a604 1
    stringBuffer.append(TEXT_66);
d610 1
a610 1
    stringBuffer.append(TEXT_67);
d612 3
a614 3
    stringBuffer.append(TEXT_68);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(TEXT_70);
d618 1
a618 1
    stringBuffer.append(TEXT_71);
a619 6
    stringBuffer.append(TEXT_72);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a621 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d623 1
d625 1
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d629 1
a629 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a630 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a631 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d633 1
a633 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d639 1
a639 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d645 1
a645 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d647 2
a649 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d651 1
a651 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d677 1
a677 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d681 1
a681 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d683 1
a683 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d687 1
a687 1
    }
d689 1
a689 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d691 1
a691 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d693 1
a693 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d695 1
a695 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d699 1
a699 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d701 1
a701 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d707 1
a707 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d709 1
a709 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d711 1
a711 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d713 1
a713 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d715 1
a715 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d721 8
d739 1
a739 1
    stringBuffer.append(TEXT_129);
d741 1
a741 1
    stringBuffer.append(TEXT_130);
d744 1
a744 1
    stringBuffer.append(TEXT_131);
d746 1
a746 1
    stringBuffer.append(TEXT_132);
d748 1
a748 1
    stringBuffer.append(TEXT_133);
d750 1
a750 1
    stringBuffer.append(TEXT_134);
d752 1
a752 1
    stringBuffer.append(TEXT_135);
d754 1
a754 1
    stringBuffer.append(TEXT_136);
d756 1
a756 1
    stringBuffer.append(TEXT_137);
d758 1
a758 1
    stringBuffer.append(TEXT_138);
d760 1
a760 1
    stringBuffer.append(TEXT_139);
d762 1
a762 1
    stringBuffer.append(TEXT_140);
d764 1
a764 1
    stringBuffer.append(TEXT_141);
a765 8
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d771 1
a771 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d773 1
a773 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d775 1
a775 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d777 1
a777 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d779 1
a779 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d781 1
a781 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d783 1
a783 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d785 1
a785 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d787 1
a787 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d791 8
d803 2
a804 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(TEXT_160);
d806 1
a806 1
    stringBuffer.append(TEXT_161);
d808 1
a808 1
    stringBuffer.append(TEXT_162);
d810 1
a810 1
    stringBuffer.append(TEXT_163);
d812 1
a812 1
    stringBuffer.append(TEXT_164);
d814 1
a814 1
    stringBuffer.append(TEXT_165);
d821 1
a821 1
    stringBuffer.append(TEXT_166);
d823 1
a823 1
    stringBuffer.append(TEXT_167);
d825 1
a825 1
    stringBuffer.append(TEXT_168);
d830 1
a830 1
    stringBuffer.append(TEXT_169);
d840 1
a840 1
    stringBuffer.append(TEXT_170);
d842 1
a842 1
    stringBuffer.append(TEXT_171);
d844 1
a844 1
    stringBuffer.append(TEXT_172);
d846 1
a846 1
    stringBuffer.append(TEXT_173);
d848 1
a848 1
    stringBuffer.append(TEXT_174);
d850 1
a850 1
    stringBuffer.append(TEXT_175);
d852 1
a852 1
    stringBuffer.append(TEXT_176);
d854 1
a854 1
    stringBuffer.append(TEXT_177);
d856 1
a856 1
    stringBuffer.append(TEXT_178);
d858 1
a858 1
    stringBuffer.append(TEXT_179);
d860 1
a860 1
    stringBuffer.append(TEXT_180);
d862 1
a862 1
    stringBuffer.append(TEXT_181);
d864 1
a864 1
    stringBuffer.append(TEXT_182);
d866 1
a866 1
    stringBuffer.append(TEXT_183);
d868 1
a868 1
    stringBuffer.append(TEXT_184);
d870 1
a870 1
    stringBuffer.append(TEXT_185);
d872 1
a872 1
    stringBuffer.append(TEXT_186);
d874 1
a874 1
    stringBuffer.append(TEXT_187);
d876 1
a876 1
    stringBuffer.append(TEXT_188);
d878 1
a878 1
    stringBuffer.append(TEXT_189);
d880 1
a880 1
    stringBuffer.append(TEXT_190);
d882 1
a882 1
    stringBuffer.append(TEXT_191);
d884 1
a884 1
    stringBuffer.append(TEXT_192);
d886 1
a886 1
    stringBuffer.append(TEXT_193);
d888 1
a888 1
    stringBuffer.append(TEXT_194);
d890 1
a890 1
    stringBuffer.append(TEXT_195);
d892 1
a892 1
    stringBuffer.append(TEXT_196);
d894 1
a894 1
    stringBuffer.append(TEXT_197);
d896 1
a896 1
    stringBuffer.append(TEXT_198);
d898 1
a898 1
    stringBuffer.append(TEXT_199);
d900 1
a900 1
    stringBuffer.append(TEXT_200);
d902 1
a902 1
    stringBuffer.append(TEXT_201);
d904 1
a904 1
    stringBuffer.append(TEXT_202);
d906 1
a906 1
    stringBuffer.append(TEXT_203);
d908 1
a908 1
    stringBuffer.append(TEXT_204);
d910 1
a910 1
    stringBuffer.append(TEXT_205);
d912 1
a912 1
    stringBuffer.append(TEXT_206);
d914 1
a914 1
    stringBuffer.append(TEXT_207);
d916 1
a916 1
    stringBuffer.append(TEXT_208);
d920 1
a920 1
    stringBuffer.append(TEXT_209);
d924 1
a924 1
    stringBuffer.append(TEXT_210);
d929 1
a929 1
    stringBuffer.append(TEXT_211);
d931 1
a931 1
    stringBuffer.append(TEXT_212);
d933 1
a933 1
    stringBuffer.append(TEXT_213);
d935 1
a935 1
    stringBuffer.append(TEXT_214);
d940 1
a940 1
    stringBuffer.append(TEXT_215);
d954 1
a954 1
    stringBuffer.append(TEXT_216);
d956 1
a956 1
    stringBuffer.append(TEXT_217);
d958 1
a958 1
    stringBuffer.append(TEXT_218);
d960 1
a960 1
    stringBuffer.append(TEXT_219);
d962 1
a962 1
    stringBuffer.append(TEXT_220);
d964 1
a964 1
    stringBuffer.append(TEXT_221);
d966 1
a966 1
    stringBuffer.append(TEXT_222);
d968 1
a968 1
    stringBuffer.append(TEXT_223);
d970 1
a970 1
    stringBuffer.append(TEXT_224);
d972 1
a972 1
    stringBuffer.append(TEXT_225);
d974 1
a974 1
    stringBuffer.append(TEXT_226);
d976 1
a976 1
    stringBuffer.append(TEXT_227);
d979 1
a979 1
    stringBuffer.append(TEXT_228);
d981 1
a981 1
    stringBuffer.append(TEXT_229);
d983 1
a983 1
    stringBuffer.append(TEXT_230);
d985 1
a985 1
    stringBuffer.append(TEXT_231);
d987 1
a987 1
    stringBuffer.append(TEXT_232);
d989 1
a989 1
    stringBuffer.append(TEXT_233);
d991 1
a991 1
    stringBuffer.append(TEXT_234);
d993 1
a993 1
    stringBuffer.append(TEXT_235);
d995 1
a995 1
    stringBuffer.append(TEXT_236);
d997 1
a997 1
    stringBuffer.append(TEXT_237);
d999 1
a999 1
    stringBuffer.append(TEXT_238);
d1001 1
a1001 1
    stringBuffer.append(TEXT_239);
d1003 1
a1003 1
    stringBuffer.append(TEXT_240);
d1005 1
a1005 1
    stringBuffer.append(TEXT_241);
d1007 1
a1007 1
    stringBuffer.append(TEXT_242);
d1010 1
a1010 1
    stringBuffer.append(TEXT_243);
d1012 1
a1012 1
    stringBuffer.append(TEXT_244);
d1019 1
a1019 1
    stringBuffer.append(TEXT_245);
d1033 1
a1033 1
    stringBuffer.append(TEXT_246);
d1035 1
a1035 1
    stringBuffer.append(TEXT_247);
d1037 1
a1037 1
    stringBuffer.append(TEXT_248);
d1039 1
a1039 1
    stringBuffer.append(TEXT_249);
d1041 1
a1041 1
    stringBuffer.append(TEXT_250);
d1043 1
a1043 1
    stringBuffer.append(TEXT_251);
d1045 1
a1045 1
    stringBuffer.append(TEXT_252);
d1047 1
a1047 1
    stringBuffer.append(TEXT_253);
d1049 1
a1049 1
    stringBuffer.append(TEXT_254);
d1051 1
a1051 1
    stringBuffer.append(TEXT_255);
d1053 1
a1053 1
    stringBuffer.append(TEXT_256);
d1055 1
a1055 1
    stringBuffer.append(TEXT_257);
d1058 1
a1058 1
    stringBuffer.append(TEXT_258);
d1060 1
a1060 1
    stringBuffer.append(TEXT_259);
d1062 1
a1062 1
    stringBuffer.append(TEXT_260);
d1064 1
a1064 1
    stringBuffer.append(TEXT_261);
d1066 1
a1066 1
    stringBuffer.append(TEXT_262);
d1068 1
a1068 1
    stringBuffer.append(TEXT_263);
d1070 2
a1071 2
    stringBuffer.append(TEXT_264);
    stringBuffer.append(TEXT_265);
d1073 1
a1073 1
    stringBuffer.append(TEXT_266);
d1076 1
a1076 1
    stringBuffer.append(TEXT_267);
d1078 1
a1078 1
    stringBuffer.append(TEXT_268);
a1079 6
    stringBuffer.append(TEXT_269);
    stringBuffer.append(TEXT_270);
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_272);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a1081 3
    
// an inner class 

d1083 1
a1083 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1085 1
a1085 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1086 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1088 3
a1090 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1098 1
a1098 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1104 1
a1104 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1106 1
a1106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1108 1
a1108 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1110 2
a1112 2
    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1114 1
a1114 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1116 1
a1116 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1118 1
a1118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1122 8
d1131 1
a1131 1
    stringBuffer.append(TEXT_295);
d1133 1
a1133 1
    stringBuffer.append(TEXT_296);
d1135 1
a1135 1
    stringBuffer.append(TEXT_297);
@


1.47
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d547 1
a547 12
    
// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (nextModelFacet == null || !nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}

@


1.46
log
@#154515 "Initialize diagram" action can not process links by class in case if source/target EReferences are isMany
@
text
@d326 1
a326 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.45
log
@#141789 call "Arrange ALL" function in generation code for initialize the diagram
@
text
@d208 109
a316 101
  protected final String TEXT_189 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_190 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_191 = " dst = (";
  protected final String TEXT_192 = ") structuralFeatureResult;";
  protected final String TEXT_193 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_194 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_195 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_196 = " src = (";
  protected final String TEXT_197 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_198 = NL + "\t\t\t\t";
  protected final String TEXT_199 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_200 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_201 = NL + "\t\t}";
  protected final String TEXT_202 = NL + "\t}" + NL + "}";
  protected final String TEXT_203 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_204 = " container, ";
  protected final String TEXT_205 = " containerMetaclass, ";
  protected final String TEXT_206 = " diagram) {";
  protected final String TEXT_207 = NL;
  protected final String TEXT_208 = "\tif (";
  protected final String TEXT_209 = ".eINSTANCE.get";
  protected final String TEXT_210 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_211 = NL + "\t\tfor (";
  protected final String TEXT_212 = " destinations = ";
  protected final String TEXT_213 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_214 = " nextDestination = (";
  protected final String TEXT_215 = ") destinations.next();";
  protected final String TEXT_216 = NL + "\t\t";
  protected final String TEXT_217 = " nextDestination = (";
  protected final String TEXT_218 = ") ";
  protected final String TEXT_219 = ";";
  protected final String TEXT_220 = NL + "\t\tif (";
  protected final String TEXT_221 = ".VISUAL_ID == ";
  protected final String TEXT_222 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_223 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_224 = ".";
  protected final String TEXT_225 = ", ";
  protected final String TEXT_226 = ".VISUAL_ID));";
  protected final String TEXT_227 = NL + "\t\t";
  protected final String TEXT_228 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_229 = ".getType(";
  protected final String TEXT_230 = ".VISUAL_ID), ";
  protected final String TEXT_231 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_232 = "Children(nextNode, nextDestination);";
  protected final String TEXT_233 = NL;
  protected final String TEXT_234 = NL + "\t\t}";
  protected final String TEXT_235 = NL + "\t\t}";
  protected final String TEXT_236 = NL + "\t}";
  protected final String TEXT_237 = NL;
  protected final String TEXT_238 = "\tif (";
  protected final String TEXT_239 = ".eINSTANCE.get";
  protected final String TEXT_240 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_241 = NL + "\t\tfor (";
  protected final String TEXT_242 = " destinations = ";
  protected final String TEXT_243 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_244 = " nextDestination = (";
  protected final String TEXT_245 = ") destinations.next();";
  protected final String TEXT_246 = NL + "\t\t";
  protected final String TEXT_247 = " nextDestination = (";
  protected final String TEXT_248 = ") ";
  protected final String TEXT_249 = ";";
  protected final String TEXT_250 = NL + "\t\tif (";
  protected final String TEXT_251 = ".VISUAL_ID == ";
  protected final String TEXT_252 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_253 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_254 = ".";
  protected final String TEXT_255 = ", ";
  protected final String TEXT_256 = ".VISUAL_ID));";
  protected final String TEXT_257 = NL;
  protected final String TEXT_258 = NL + "\t\t}";
  protected final String TEXT_259 = NL + "\t\t}";
  protected final String TEXT_260 = NL + "\t}";
  protected final String TEXT_261 = NL + "}" + NL + "\t";
  protected final String TEXT_262 = NL;
  protected final String TEXT_263 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_264 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_265 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_266 = NL;
  protected final String TEXT_267 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_268 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_269 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_270 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_271 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_272 = " source, ";
  protected final String TEXT_273 = " destination, ";
  protected final String TEXT_274 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_275 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_276 = " source, ";
  protected final String TEXT_277 = " destination, ";
  protected final String TEXT_278 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_279 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_280 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_281 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_282 = " source, ";
  protected final String TEXT_283 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_284 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_285 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_286 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_287 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_288 = NL + NL + "}";
  protected final String TEXT_289 = NL;
d838 2
d878 1
a878 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d880 1
a880 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d882 1
a882 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d884 1
a884 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d886 1
a886 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d888 1
a888 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d894 1
a894 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d896 1
a896 1
    		} else {
d898 1
a898 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d900 1
a900 1
    		}
d902 16
d921 1
a921 1
    stringBuffer.append(TEXT_201);
d925 1
a925 1
    stringBuffer.append(TEXT_202);
d930 1
a930 1
    stringBuffer.append(TEXT_203);
d932 1
a932 1
    stringBuffer.append(TEXT_204);
d934 1
a934 1
    stringBuffer.append(TEXT_205);
d936 1
a936 1
    stringBuffer.append(TEXT_206);
d941 1
a941 1
    stringBuffer.append(TEXT_207);
d955 1
a955 1
    stringBuffer.append(TEXT_208);
d957 1
a957 1
    stringBuffer.append(TEXT_209);
d959 1
a959 1
    stringBuffer.append(TEXT_210);
d961 1
a961 1
    stringBuffer.append(TEXT_211);
d963 1
a963 1
    stringBuffer.append(TEXT_212);
d965 1
a965 1
    stringBuffer.append(TEXT_213);
d967 1
a967 1
    stringBuffer.append(TEXT_214);
d969 1
a969 1
    stringBuffer.append(TEXT_215);
d971 1
a971 1
    stringBuffer.append(TEXT_216);
d973 1
a973 1
    stringBuffer.append(TEXT_217);
d975 1
a975 1
    stringBuffer.append(TEXT_218);
d977 1
a977 1
    stringBuffer.append(TEXT_219);
d980 1
a980 1
    stringBuffer.append(TEXT_220);
d982 1
a982 1
    stringBuffer.append(TEXT_221);
d984 1
a984 1
    stringBuffer.append(TEXT_222);
d986 1
a986 1
    stringBuffer.append(TEXT_223);
d988 1
a988 1
    stringBuffer.append(TEXT_224);
d990 1
a990 1
    stringBuffer.append(TEXT_225);
d992 1
a992 1
    stringBuffer.append(TEXT_226);
d994 1
a994 1
    stringBuffer.append(TEXT_227);
d996 1
a996 1
    stringBuffer.append(TEXT_228);
d998 1
a998 1
    stringBuffer.append(TEXT_229);
d1000 1
a1000 1
    stringBuffer.append(TEXT_230);
d1002 1
a1002 1
    stringBuffer.append(TEXT_231);
d1004 1
a1004 1
    stringBuffer.append(TEXT_232);
d1006 1
a1006 1
    stringBuffer.append(TEXT_233);
d1008 1
a1008 1
    stringBuffer.append(TEXT_234);
d1011 1
a1011 1
    stringBuffer.append(TEXT_235);
d1013 1
a1013 1
    stringBuffer.append(TEXT_236);
d1020 1
a1020 1
    stringBuffer.append(TEXT_237);
d1034 1
a1034 1
    stringBuffer.append(TEXT_238);
d1036 1
a1036 1
    stringBuffer.append(TEXT_239);
d1038 1
a1038 1
    stringBuffer.append(TEXT_240);
d1040 1
a1040 1
    stringBuffer.append(TEXT_241);
d1042 1
a1042 1
    stringBuffer.append(TEXT_242);
d1044 1
a1044 1
    stringBuffer.append(TEXT_243);
d1046 1
a1046 1
    stringBuffer.append(TEXT_244);
d1048 1
a1048 1
    stringBuffer.append(TEXT_245);
d1050 1
a1050 1
    stringBuffer.append(TEXT_246);
d1052 1
a1052 1
    stringBuffer.append(TEXT_247);
d1054 1
a1054 1
    stringBuffer.append(TEXT_248);
d1056 1
a1056 1
    stringBuffer.append(TEXT_249);
d1059 1
a1059 1
    stringBuffer.append(TEXT_250);
d1061 1
a1061 1
    stringBuffer.append(TEXT_251);
d1063 1
a1063 1
    stringBuffer.append(TEXT_252);
d1065 1
a1065 1
    stringBuffer.append(TEXT_253);
d1067 1
a1067 1
    stringBuffer.append(TEXT_254);
d1069 1
a1069 1
    stringBuffer.append(TEXT_255);
d1071 2
a1072 2
    stringBuffer.append(TEXT_256);
    stringBuffer.append(TEXT_257);
d1074 1
a1074 1
    stringBuffer.append(TEXT_258);
d1077 1
a1077 1
    stringBuffer.append(TEXT_259);
d1079 1
a1079 1
    stringBuffer.append(TEXT_260);
d1081 3
a1083 3
    stringBuffer.append(TEXT_261);
    stringBuffer.append(TEXT_262);
    stringBuffer.append(TEXT_263);
d1085 1
a1085 1
    stringBuffer.append(TEXT_264);
d1087 2
a1088 2
    stringBuffer.append(TEXT_265);
    stringBuffer.append(TEXT_266);
d1092 1
a1092 1
    stringBuffer.append(TEXT_267);
d1094 1
a1094 1
    stringBuffer.append(TEXT_268);
d1096 1
a1096 1
    stringBuffer.append(TEXT_269);
d1098 1
a1098 1
    stringBuffer.append(TEXT_270);
d1100 1
a1100 1
    stringBuffer.append(TEXT_271);
d1102 1
a1102 1
    stringBuffer.append(TEXT_272);
d1104 1
a1104 1
    stringBuffer.append(TEXT_273);
d1106 1
a1106 1
    stringBuffer.append(TEXT_274);
d1108 1
a1108 1
    stringBuffer.append(TEXT_275);
d1110 1
a1110 1
    stringBuffer.append(TEXT_276);
d1112 1
a1112 1
    stringBuffer.append(TEXT_277);
d1114 1
a1114 1
    stringBuffer.append(TEXT_278);
d1116 1
a1116 1
    stringBuffer.append(TEXT_279);
d1118 1
a1118 1
    stringBuffer.append(TEXT_280);
d1120 1
a1120 1
    stringBuffer.append(TEXT_281);
d1122 1
a1122 1
    stringBuffer.append(TEXT_282);
d1124 1
a1124 1
    stringBuffer.append(TEXT_283);
d1126 1
a1126 1
    stringBuffer.append(TEXT_284);
d1128 1
a1128 1
    stringBuffer.append(TEXT_285);
d1130 1
a1130 1
    stringBuffer.append(TEXT_286);
d1132 1
a1132 1
    stringBuffer.append(TEXT_287);
d1134 1
a1134 1
    stringBuffer.append(TEXT_288);
d1136 1
a1136 1
    stringBuffer.append(TEXT_289);
@


1.44
log
@#116861 [Tests] Create unit-tests checking code generated for the models with "instance class name" specified

- templates corrected
@
text
@d63 17
a79 17
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();";
  protected final String TEXT_45 = NL + "\t\trefreshPhantoms();";
  protected final String TEXT_46 = NL + "\t\trefreshConnections();" + NL + "\t}";
  protected final String TEXT_47 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_48 = " phantomNodes = new ";
  protected final String TEXT_49 = "();" + NL + "\t\t";
  protected final String TEXT_50 = " diagramModelObject = ((";
  protected final String TEXT_51 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_52 = " diagram = getDiagram();";
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_55 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_56 = " nextResourceObject = (";
  protected final String TEXT_57 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_58 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_59 = NL + "\tcase ";
  protected final String TEXT_60 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
d81 228
a308 213
  protected final String TEXT_62 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_63 = "\t}" + NL + "}";
  protected final String TEXT_64 = NL;
  protected final String TEXT_65 = NL;
  protected final String TEXT_66 = "for (";
  protected final String TEXT_67 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_68 = " nextView = (";
  protected final String TEXT_69 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_70 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_73 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_74 = " descriptors = new ";
  protected final String TEXT_75 = "();" + NL + "\tfor (";
  protected final String TEXT_76 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_77 = " element = (";
  protected final String TEXT_78 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_79 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_80 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_81 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_82 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_83 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_84 = " cc = new ";
  protected final String TEXT_85 = "(";
  protected final String TEXT_86 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_87 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_88 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_89 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_90 = " createCommand = new ";
  protected final String TEXT_91 = "(((";
  protected final String TEXT_92 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_93 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_94 = ".makeMutable(new ";
  protected final String TEXT_95 = "(((";
  protected final String TEXT_96 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_97 = " adapters = (";
  protected final String TEXT_98 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_99 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_100 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_101 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_102 = " myLinkDescriptors = new ";
  protected final String TEXT_103 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_104 = " myEObject2ViewMap = new ";
  protected final String TEXT_105 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_106 = " existingLinks = new ";
  protected final String TEXT_107 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_108 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_109 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_110 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_111 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_112 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_113 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_114 = " view) {" + NL + "\t\t";
  protected final String TEXT_115 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_116 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_117 = NL + "\t\tcase ";
  protected final String TEXT_118 = ".VISUAL_ID:";
  protected final String TEXT_119 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_120 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_121 = " childView = (";
  protected final String TEXT_122 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_123 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_124 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_125 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_126 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_127 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_128 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_129 = ".APPEND, false, ((";
  protected final String TEXT_130 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_131 = " ccr = new ";
  protected final String TEXT_132 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_133 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_134 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_135 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_136 = " viewAdapter = (";
  protected final String TEXT_137 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_138 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_139 = " getEditPartFor(";
  protected final String TEXT_140 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_141 = " view = (";
  protected final String TEXT_142 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_143 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_144 = NL;
  protected final String TEXT_145 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_146 = " container, ";
  protected final String TEXT_147 = " diagram) {" + NL + "\t";
  protected final String TEXT_148 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_149 = " container, ";
  protected final String TEXT_150 = " containerMetaclass) {\t";
  protected final String TEXT_151 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_152 = "_";
  protected final String TEXT_153 = "(container, containerMetaclass);";
  protected final String TEXT_154 = NL + "}" + NL;
  protected final String TEXT_155 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_156 = "_";
  protected final String TEXT_157 = "(";
  protected final String TEXT_158 = " container, ";
  protected final String TEXT_159 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_160 = ".eINSTANCE.get";
  protected final String TEXT_161 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_162 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_163 = " values = ";
  protected final String TEXT_164 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_165 = " nextValue = ((";
  protected final String TEXT_166 = ") values.next());";
  protected final String TEXT_167 = NL + "\t\t";
  protected final String TEXT_168 = " nextValue = (";
  protected final String TEXT_169 = ") ";
  protected final String TEXT_170 = ";";
  protected final String TEXT_171 = NL + "\t\tint linkVID = ";
  protected final String TEXT_172 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_173 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_174 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_175 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_176 = " dst = (";
  protected final String TEXT_177 = ") structuralFeatureResult;";
  protected final String TEXT_178 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_179 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_180 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_181 = " src = (";
  protected final String TEXT_182 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_183 = NL + "\t\t\t\t";
  protected final String TEXT_184 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_185 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_186 = NL + "\t\t}";
  protected final String TEXT_187 = NL + "\t}" + NL + "}";
  protected final String TEXT_188 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_189 = " container, ";
  protected final String TEXT_190 = " containerMetaclass, ";
  protected final String TEXT_191 = " diagram) {";
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = "\tif (";
  protected final String TEXT_194 = ".eINSTANCE.get";
  protected final String TEXT_195 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_196 = NL + "\t\tfor (";
  protected final String TEXT_197 = " destinations = ";
  protected final String TEXT_198 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_199 = " nextDestination = (";
  protected final String TEXT_200 = ") destinations.next();";
  protected final String TEXT_201 = NL + "\t\t";
  protected final String TEXT_202 = " nextDestination = (";
  protected final String TEXT_203 = ") ";
  protected final String TEXT_204 = ";";
  protected final String TEXT_205 = NL + "\t\tif (";
  protected final String TEXT_206 = ".VISUAL_ID == ";
  protected final String TEXT_207 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_208 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_209 = ".";
  protected final String TEXT_210 = ", ";
  protected final String TEXT_211 = ".VISUAL_ID));";
  protected final String TEXT_212 = NL + "\t\t";
  protected final String TEXT_213 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_214 = ".getType(";
  protected final String TEXT_215 = ".VISUAL_ID), ";
  protected final String TEXT_216 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_217 = "Children(nextNode, nextDestination);";
  protected final String TEXT_218 = NL;
  protected final String TEXT_219 = NL + "\t\t}";
  protected final String TEXT_220 = NL + "\t\t}";
  protected final String TEXT_221 = NL + "\t}";
  protected final String TEXT_222 = NL;
  protected final String TEXT_223 = "\tif (";
  protected final String TEXT_224 = ".eINSTANCE.get";
  protected final String TEXT_225 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_226 = NL + "\t\tfor (";
  protected final String TEXT_227 = " destinations = ";
  protected final String TEXT_228 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_229 = " nextDestination = (";
  protected final String TEXT_230 = ") destinations.next();";
  protected final String TEXT_231 = NL + "\t\t";
  protected final String TEXT_232 = " nextDestination = (";
  protected final String TEXT_233 = ") ";
  protected final String TEXT_234 = ";";
  protected final String TEXT_235 = NL + "\t\tif (";
  protected final String TEXT_236 = ".VISUAL_ID == ";
  protected final String TEXT_237 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_238 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_239 = ".";
  protected final String TEXT_240 = ", ";
  protected final String TEXT_241 = ".VISUAL_ID));";
  protected final String TEXT_242 = NL;
  protected final String TEXT_243 = NL + "\t\t}";
  protected final String TEXT_244 = NL + "\t\t}";
  protected final String TEXT_245 = NL + "\t}";
  protected final String TEXT_246 = NL + "}" + NL + "\t";
  protected final String TEXT_247 = NL;
  protected final String TEXT_248 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_249 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_250 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_251 = NL;
  protected final String TEXT_252 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_254 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_255 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_256 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_257 = " source, ";
  protected final String TEXT_258 = " destination, ";
  protected final String TEXT_259 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_260 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_261 = " source, ";
  protected final String TEXT_262 = " destination, ";
  protected final String TEXT_263 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_264 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_265 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_266 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_267 = " source, ";
  protected final String TEXT_268 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_270 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_271 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_272 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_273 = NL + NL + "}";
  protected final String TEXT_274 = NL;
d552 1
a552 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d554 1
a554 1
    }
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d560 2
a562 2
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d568 1
d570 1
a570 4
    
if (!genClass2Phantom.isEmpty()) {

    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d576 2
a578 2
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d580 1
a580 5
    
}
for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
	GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();

d582 1
a582 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d585 1
a585 2
    stringBuffer.append(TEXT_62);
    }
d588 3
d592 1
a592 1
    }
d594 1
d596 1
d598 5
a602 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a605 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d608 3
d612 1
a613 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a614 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a623 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d644 1
a644 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d650 1
a650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d652 1
a652 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d654 1
a654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d656 12
d669 3
a671 1
    stringBuffer.append(TEXT_96);
d673 9
a681 1
    stringBuffer.append(TEXT_97);
d683 1
a683 1
    stringBuffer.append(TEXT_98);
d685 1
a685 1
    stringBuffer.append(TEXT_99);
d687 1
a687 1
    stringBuffer.append(TEXT_100);
d689 1
a689 1
    stringBuffer.append(TEXT_101);
d691 1
a691 1
    stringBuffer.append(TEXT_102);
d693 1
a693 1
    stringBuffer.append(TEXT_103);
d695 1
a695 1
    stringBuffer.append(TEXT_104);
d697 3
a699 1
    stringBuffer.append(TEXT_105);
d701 1
a701 1
    stringBuffer.append(TEXT_106);
d703 1
a703 1
    stringBuffer.append(TEXT_107);
d705 1
a705 1
    stringBuffer.append(TEXT_108);
d707 1
a707 1
    stringBuffer.append(TEXT_109);
d709 1
a709 1
    stringBuffer.append(TEXT_110);
d711 1
a711 1
    stringBuffer.append(TEXT_111);
d713 1
a713 1
    stringBuffer.append(TEXT_112);
d715 1
a715 1
    stringBuffer.append(TEXT_113);
d717 1
a717 1
    stringBuffer.append(TEXT_114);
d719 1
a719 1
    stringBuffer.append(TEXT_115);
d721 1
a721 1
    stringBuffer.append(TEXT_116);
d732 1
a732 1
    stringBuffer.append(TEXT_117);
d734 1
a734 1
    stringBuffer.append(TEXT_118);
d737 1
a737 1
    stringBuffer.append(TEXT_119);
d739 1
a739 1
    stringBuffer.append(TEXT_120);
d741 1
a741 1
    stringBuffer.append(TEXT_121);
d743 3
a745 1
    stringBuffer.append(TEXT_122);
d747 7
a753 1
    stringBuffer.append(TEXT_123);
d755 1
a755 1
    stringBuffer.append(TEXT_124);
d757 1
a757 1
    stringBuffer.append(TEXT_125);
d759 1
a759 1
    stringBuffer.append(TEXT_126);
d761 1
a761 1
    stringBuffer.append(TEXT_127);
d763 1
a763 1
    stringBuffer.append(TEXT_128);
d765 1
a765 1
    stringBuffer.append(TEXT_129);
d767 1
a767 1
    stringBuffer.append(TEXT_130);
d769 1
a769 1
    stringBuffer.append(TEXT_131);
d771 1
a771 1
    stringBuffer.append(TEXT_132);
d773 1
a773 1
    stringBuffer.append(TEXT_133);
d775 1
a775 1
    stringBuffer.append(TEXT_134);
d777 1
a777 1
    stringBuffer.append(TEXT_135);
d779 1
a779 1
    stringBuffer.append(TEXT_136);
d781 1
a781 3
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
    stringBuffer.append(TEXT_138);
d783 1
a783 1
    stringBuffer.append(TEXT_139);
d785 1
a785 1
    stringBuffer.append(TEXT_140);
d787 1
a787 1
    stringBuffer.append(TEXT_141);
d789 1
a789 1
    stringBuffer.append(TEXT_142);
d791 1
a791 1
    stringBuffer.append(TEXT_143);
d796 2
a797 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(TEXT_145);
d799 1
a799 1
    stringBuffer.append(TEXT_146);
d801 1
a801 1
    stringBuffer.append(TEXT_147);
d803 1
a803 1
    stringBuffer.append(TEXT_148);
d805 1
a805 1
    stringBuffer.append(TEXT_149);
d807 1
a807 1
    stringBuffer.append(TEXT_150);
d814 1
a814 1
    stringBuffer.append(TEXT_151);
d816 1
a816 1
    stringBuffer.append(TEXT_152);
d818 1
a818 1
    stringBuffer.append(TEXT_153);
d823 1
a823 1
    stringBuffer.append(TEXT_154);
d831 1
a831 1
    stringBuffer.append(TEXT_155);
d833 1
a833 1
    stringBuffer.append(TEXT_156);
d835 1
a835 1
    stringBuffer.append(TEXT_157);
d837 1
a837 1
    stringBuffer.append(TEXT_158);
d839 1
a839 1
    stringBuffer.append(TEXT_159);
d841 1
a841 1
    stringBuffer.append(TEXT_160);
d843 1
a843 1
    stringBuffer.append(TEXT_161);
d845 1
a845 1
    stringBuffer.append(TEXT_162);
d847 1
a847 1
    stringBuffer.append(TEXT_163);
d849 1
a849 1
    stringBuffer.append(TEXT_164);
d851 1
a851 1
    stringBuffer.append(TEXT_165);
d853 1
a853 1
    stringBuffer.append(TEXT_166);
d855 1
a855 1
    stringBuffer.append(TEXT_167);
d857 1
a857 1
    stringBuffer.append(TEXT_168);
d859 1
a859 1
    stringBuffer.append(TEXT_169);
d861 1
a861 1
    stringBuffer.append(TEXT_170);
d863 1
a863 1
    stringBuffer.append(TEXT_171);
d865 1
a865 1
    stringBuffer.append(TEXT_172);
d867 1
a867 1
    stringBuffer.append(TEXT_173);
d869 1
a869 1
    stringBuffer.append(TEXT_174);
d871 1
a871 1
    stringBuffer.append(TEXT_175);
d873 1
a873 1
    stringBuffer.append(TEXT_176);
d875 1
a875 1
    stringBuffer.append(TEXT_177);
d877 1
a877 1
    stringBuffer.append(TEXT_178);
d879 1
a879 1
    stringBuffer.append(TEXT_179);
d881 1
a881 1
    stringBuffer.append(TEXT_180);
d883 1
a883 1
    stringBuffer.append(TEXT_181);
d885 1
a885 1
    stringBuffer.append(TEXT_182);
d887 1
a887 1
    stringBuffer.append(TEXT_183);
d889 1
a889 1
    stringBuffer.append(TEXT_184);
d891 1
a891 1
    stringBuffer.append(TEXT_185);
d895 1
a895 1
    stringBuffer.append(TEXT_186);
d899 1
a899 1
    stringBuffer.append(TEXT_187);
d904 1
a904 1
    stringBuffer.append(TEXT_188);
d906 1
a906 1
    stringBuffer.append(TEXT_189);
d908 1
a908 1
    stringBuffer.append(TEXT_190);
d910 1
a910 1
    stringBuffer.append(TEXT_191);
d915 1
a915 1
    stringBuffer.append(TEXT_192);
d929 1
a929 1
    stringBuffer.append(TEXT_193);
d931 1
a931 1
    stringBuffer.append(TEXT_194);
d933 1
a933 1
    stringBuffer.append(TEXT_195);
d935 1
a935 1
    stringBuffer.append(TEXT_196);
d937 1
a937 1
    stringBuffer.append(TEXT_197);
d939 1
a939 1
    stringBuffer.append(TEXT_198);
d941 1
a941 1
    stringBuffer.append(TEXT_199);
d943 1
a943 1
    stringBuffer.append(TEXT_200);
d945 1
a945 1
    stringBuffer.append(TEXT_201);
d947 1
a947 1
    stringBuffer.append(TEXT_202);
d949 1
a949 1
    stringBuffer.append(TEXT_203);
d951 1
a951 1
    stringBuffer.append(TEXT_204);
d954 1
a954 1
    stringBuffer.append(TEXT_205);
d956 1
a956 1
    stringBuffer.append(TEXT_206);
d958 1
a958 1
    stringBuffer.append(TEXT_207);
d960 1
a960 1
    stringBuffer.append(TEXT_208);
d962 1
a962 1
    stringBuffer.append(TEXT_209);
d964 1
a964 1
    stringBuffer.append(TEXT_210);
d966 1
a966 1
    stringBuffer.append(TEXT_211);
d968 1
a968 1
    stringBuffer.append(TEXT_212);
d970 1
a970 1
    stringBuffer.append(TEXT_213);
d972 1
a972 1
    stringBuffer.append(TEXT_214);
d974 1
a974 1
    stringBuffer.append(TEXT_215);
d976 1
a976 1
    stringBuffer.append(TEXT_216);
d978 1
a978 1
    stringBuffer.append(TEXT_217);
d980 1
a980 1
    stringBuffer.append(TEXT_218);
d982 1
a982 1
    stringBuffer.append(TEXT_219);
d985 1
a985 1
    stringBuffer.append(TEXT_220);
d987 1
a987 1
    stringBuffer.append(TEXT_221);
d994 1
a994 1
    stringBuffer.append(TEXT_222);
d1008 1
a1008 1
    stringBuffer.append(TEXT_223);
d1010 1
a1010 1
    stringBuffer.append(TEXT_224);
d1012 1
a1012 1
    stringBuffer.append(TEXT_225);
d1014 1
a1014 1
    stringBuffer.append(TEXT_226);
d1016 1
a1016 1
    stringBuffer.append(TEXT_227);
d1018 1
a1018 1
    stringBuffer.append(TEXT_228);
d1020 1
a1020 1
    stringBuffer.append(TEXT_229);
d1022 1
a1022 1
    stringBuffer.append(TEXT_230);
d1024 1
a1024 1
    stringBuffer.append(TEXT_231);
d1026 1
a1026 1
    stringBuffer.append(TEXT_232);
d1028 1
a1028 1
    stringBuffer.append(TEXT_233);
d1030 1
a1030 1
    stringBuffer.append(TEXT_234);
d1033 1
a1033 1
    stringBuffer.append(TEXT_235);
d1035 1
a1035 1
    stringBuffer.append(TEXT_236);
d1037 1
a1037 1
    stringBuffer.append(TEXT_237);
d1039 1
a1039 1
    stringBuffer.append(TEXT_238);
d1041 1
a1041 1
    stringBuffer.append(TEXT_239);
d1043 1
a1043 1
    stringBuffer.append(TEXT_240);
d1045 2
a1046 2
    stringBuffer.append(TEXT_241);
    stringBuffer.append(TEXT_242);
d1048 1
a1048 1
    stringBuffer.append(TEXT_243);
d1051 1
a1051 1
    stringBuffer.append(TEXT_244);
d1053 1
a1053 1
    stringBuffer.append(TEXT_245);
d1055 3
a1057 3
    stringBuffer.append(TEXT_246);
    stringBuffer.append(TEXT_247);
    stringBuffer.append(TEXT_248);
d1059 1
a1059 1
    stringBuffer.append(TEXT_249);
d1061 2
a1062 2
    stringBuffer.append(TEXT_250);
    stringBuffer.append(TEXT_251);
d1066 1
a1066 1
    stringBuffer.append(TEXT_252);
d1068 1
a1068 1
    stringBuffer.append(TEXT_253);
d1070 1
a1070 1
    stringBuffer.append(TEXT_254);
d1072 1
a1072 1
    stringBuffer.append(TEXT_255);
d1074 1
a1074 1
    stringBuffer.append(TEXT_256);
d1076 1
a1076 1
    stringBuffer.append(TEXT_257);
d1078 1
a1078 1
    stringBuffer.append(TEXT_258);
d1080 1
a1080 1
    stringBuffer.append(TEXT_259);
d1082 1
a1082 1
    stringBuffer.append(TEXT_260);
d1084 1
a1084 1
    stringBuffer.append(TEXT_261);
d1086 1
a1086 1
    stringBuffer.append(TEXT_262);
d1088 1
a1088 1
    stringBuffer.append(TEXT_263);
d1090 1
a1090 1
    stringBuffer.append(TEXT_264);
d1092 1
a1092 1
    stringBuffer.append(TEXT_265);
d1094 1
a1094 1
    stringBuffer.append(TEXT_266);
d1096 1
a1096 1
    stringBuffer.append(TEXT_267);
d1098 1
a1098 1
    stringBuffer.append(TEXT_268);
d1100 1
a1100 1
    stringBuffer.append(TEXT_269);
d1102 1
a1102 1
    stringBuffer.append(TEXT_270);
d1104 1
a1104 1
    stringBuffer.append(TEXT_271);
d1106 1
a1106 1
    stringBuffer.append(TEXT_272);
d1108 1
a1108 1
    stringBuffer.append(TEXT_273);
d1110 1
a1110 1
    stringBuffer.append(TEXT_274);
@


1.43
log
@Split storeTypeModelFacetLinks into set of fine-grained methods to ease overriding. mgolubev.
@
text
@a767 1
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
@


1.42
log
@#148813 Do not remove diagram nodes with domain element located in resource by CanonicalEditPolicy
@
text
@d170 110
a279 110
  protected final String TEXT_151 = "\t\t" + NL + "\tif (";
  protected final String TEXT_152 = ".eINSTANCE.get";
  protected final String TEXT_153 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_154 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_155 = " values = ";
  protected final String TEXT_156 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_157 = " nextValue = ((";
  protected final String TEXT_158 = ") values.next());";
  protected final String TEXT_159 = NL + "\t\t";
  protected final String TEXT_160 = " nextValue = (";
  protected final String TEXT_161 = ") ";
  protected final String TEXT_162 = ";";
  protected final String TEXT_163 = NL + "\t\tint linkVID = ";
  protected final String TEXT_164 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_165 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_166 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_167 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_168 = " dst = (";
  protected final String TEXT_169 = ") structuralFeatureResult;";
  protected final String TEXT_170 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_171 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_172 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_173 = " src = (";
  protected final String TEXT_174 = ") structuralFeatureResult;";
  protected final String TEXT_175 = NL + "\t\t\t\t";
  protected final String TEXT_176 = " src = container;";
  protected final String TEXT_177 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_178 = NL + "\t\t\t\t}";
  protected final String TEXT_179 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_180 = NL + "\t\t}";
  protected final String TEXT_181 = NL + "\t}";
  protected final String TEXT_182 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_183 = " container, ";
  protected final String TEXT_184 = " containerMetaclass, ";
  protected final String TEXT_185 = " diagram) {";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = "\tif (";
  protected final String TEXT_188 = ".eINSTANCE.get";
  protected final String TEXT_189 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_190 = NL + "\t\tfor (";
  protected final String TEXT_191 = " destinations = ";
  protected final String TEXT_192 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_193 = " nextDestination = (";
  protected final String TEXT_194 = ") destinations.next();";
  protected final String TEXT_195 = NL + "\t\t";
  protected final String TEXT_196 = " nextDestination = (";
  protected final String TEXT_197 = ") ";
  protected final String TEXT_198 = ";";
  protected final String TEXT_199 = NL + "\t\tif (";
  protected final String TEXT_200 = ".VISUAL_ID == ";
  protected final String TEXT_201 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_202 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_203 = ".";
  protected final String TEXT_204 = ", ";
  protected final String TEXT_205 = ".VISUAL_ID));";
  protected final String TEXT_206 = NL + "\t\t";
  protected final String TEXT_207 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_208 = ".getType(";
  protected final String TEXT_209 = ".VISUAL_ID), ";
  protected final String TEXT_210 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_211 = "Children(nextNode, nextDestination);";
  protected final String TEXT_212 = NL;
  protected final String TEXT_213 = NL + "\t\t}";
  protected final String TEXT_214 = NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t}";
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = "\tif (";
  protected final String TEXT_218 = ".eINSTANCE.get";
  protected final String TEXT_219 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_220 = NL + "\t\tfor (";
  protected final String TEXT_221 = " destinations = ";
  protected final String TEXT_222 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_223 = " nextDestination = (";
  protected final String TEXT_224 = ") destinations.next();";
  protected final String TEXT_225 = NL + "\t\t";
  protected final String TEXT_226 = " nextDestination = (";
  protected final String TEXT_227 = ") ";
  protected final String TEXT_228 = ";";
  protected final String TEXT_229 = NL + "\t\tif (";
  protected final String TEXT_230 = ".VISUAL_ID == ";
  protected final String TEXT_231 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_232 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_233 = ".";
  protected final String TEXT_234 = ", ";
  protected final String TEXT_235 = ".VISUAL_ID));";
  protected final String TEXT_236 = NL;
  protected final String TEXT_237 = NL + "\t\t}";
  protected final String TEXT_238 = NL + "\t\t}";
  protected final String TEXT_239 = NL + "\t}";
  protected final String TEXT_240 = NL + "}" + NL + "\t";
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_243 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_244 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_247 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_248 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_249 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_250 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_251 = " source, ";
  protected final String TEXT_252 = " destination, ";
  protected final String TEXT_253 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_254 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_255 = " source, ";
  protected final String TEXT_256 = " destination, ";
  protected final String TEXT_257 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_258 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_259 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_260 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
d281 13
a293 7
  protected final String TEXT_262 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_263 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_264 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_265 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_266 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_267 = NL + NL + "}";
  protected final String TEXT_268 = NL;
d771 1
a771 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d773 1
a773 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d775 4
a778 1
    		if (childMetaFeature.isListType()) {
d780 7
a786 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d788 1
a788 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d790 1
a790 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d794 1
a794 1
    		} else {
d796 1
a796 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d798 1
a798 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d800 1
a800 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d802 1
a802 1
    		}
d804 1
a804 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d806 1
a806 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d808 1
a808 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d810 1
a810 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d816 1
a816 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d818 1
a818 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d820 1
a820 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d822 1
a822 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d824 2
a826 2
    stringBuffer.append(TEXT_174);
    		} else {
d830 1
a830 1
    		}
d834 12
d847 1
a847 1
    stringBuffer.append(TEXT_179);
d851 1
a851 1
    stringBuffer.append(TEXT_180);
d855 1
a855 1
    stringBuffer.append(TEXT_181);
d860 1
a860 1
    stringBuffer.append(TEXT_182);
d862 1
a862 1
    stringBuffer.append(TEXT_183);
d864 1
a864 1
    stringBuffer.append(TEXT_184);
d866 1
a866 1
    stringBuffer.append(TEXT_185);
d871 1
a871 1
    stringBuffer.append(TEXT_186);
d885 1
a885 1
    stringBuffer.append(TEXT_187);
d887 1
a887 1
    stringBuffer.append(TEXT_188);
d889 1
a889 1
    stringBuffer.append(TEXT_189);
d891 1
a891 1
    stringBuffer.append(TEXT_190);
d893 1
a893 1
    stringBuffer.append(TEXT_191);
d895 1
a895 1
    stringBuffer.append(TEXT_192);
d897 1
a897 1
    stringBuffer.append(TEXT_193);
d899 1
a899 1
    stringBuffer.append(TEXT_194);
d901 1
a901 1
    stringBuffer.append(TEXT_195);
d903 1
a903 1
    stringBuffer.append(TEXT_196);
d905 1
a905 1
    stringBuffer.append(TEXT_197);
d907 1
a907 1
    stringBuffer.append(TEXT_198);
d910 1
a910 1
    stringBuffer.append(TEXT_199);
d912 1
a912 1
    stringBuffer.append(TEXT_200);
d914 1
a914 1
    stringBuffer.append(TEXT_201);
d916 1
a916 1
    stringBuffer.append(TEXT_202);
d918 1
a918 1
    stringBuffer.append(TEXT_203);
d920 1
a920 1
    stringBuffer.append(TEXT_204);
d922 1
a922 1
    stringBuffer.append(TEXT_205);
d924 1
a924 1
    stringBuffer.append(TEXT_206);
d926 1
a926 1
    stringBuffer.append(TEXT_207);
d928 1
a928 1
    stringBuffer.append(TEXT_208);
d930 1
a930 1
    stringBuffer.append(TEXT_209);
d932 1
a932 1
    stringBuffer.append(TEXT_210);
d934 1
a934 1
    stringBuffer.append(TEXT_211);
d936 1
a936 1
    stringBuffer.append(TEXT_212);
d938 1
a938 1
    stringBuffer.append(TEXT_213);
d941 1
a941 1
    stringBuffer.append(TEXT_214);
d943 1
a943 1
    stringBuffer.append(TEXT_215);
d950 1
a950 1
    stringBuffer.append(TEXT_216);
d964 1
a964 1
    stringBuffer.append(TEXT_217);
d966 1
a966 1
    stringBuffer.append(TEXT_218);
d968 1
a968 1
    stringBuffer.append(TEXT_219);
d970 1
a970 1
    stringBuffer.append(TEXT_220);
d972 1
a972 1
    stringBuffer.append(TEXT_221);
d974 1
a974 1
    stringBuffer.append(TEXT_222);
d976 1
a976 1
    stringBuffer.append(TEXT_223);
d978 1
a978 1
    stringBuffer.append(TEXT_224);
d980 1
a980 1
    stringBuffer.append(TEXT_225);
d982 1
a982 1
    stringBuffer.append(TEXT_226);
d984 1
a984 1
    stringBuffer.append(TEXT_227);
d986 1
a986 1
    stringBuffer.append(TEXT_228);
d989 1
a989 1
    stringBuffer.append(TEXT_229);
d991 1
a991 1
    stringBuffer.append(TEXT_230);
a992 11
    stringBuffer.append(TEXT_231);
    	}
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(TEXT_236);
    	if (phantomsOnly) {
a994 1
	if (genFeature.isListType()) {
d996 1
a996 1
    	}
d998 1
a998 1
    }
d1000 1
d1003 1
a1003 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d1005 2
a1006 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d1008 1
d1010 1
a1010 3
    
// an inner class 

a1011 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1012 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1014 1
a1014 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1016 1
a1016 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a1017 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1019 3
a1021 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1025 1
a1025 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1029 2
a1031 2
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1033 1
a1033 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1035 1
a1035 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1037 1
a1037 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1043 12
d1056 1
a1056 1
    stringBuffer.append(TEXT_263);
d1058 1
a1058 1
    stringBuffer.append(TEXT_264);
d1060 1
a1060 1
    stringBuffer.append(TEXT_265);
d1062 1
a1062 1
    stringBuffer.append(TEXT_266);
d1064 1
a1064 1
    stringBuffer.append(TEXT_267);
d1066 1
a1066 1
    stringBuffer.append(TEXT_268);
@


1.42.2.1
log
@#141789 call "Arrange ALL" function in generation code for initialize the diagram
@
text
@d63 17
a79 17
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\t";
  protected final String TEXT_45 = " createdViews = new ";
  protected final String TEXT_46 = "();" + NL + "\t\tcreatedViews.addAll(refreshSemanticChildren());";
  protected final String TEXT_47 = NL + "\t\tcreatedViews.addAll(refreshPhantoms());";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " createdConnectionViews = new ";
  protected final String TEXT_50 = "();" + NL + "\t\tcreatedConnectionViews.addAll(refreshSemanticConnections());" + NL + "\t\tcreatedConnectionViews.addAll(refreshConnections());" + NL + "" + NL + "\t\tif (createdViews.size() > 1) {" + NL + "\t\t\t// perform a layout of the container" + NL + "\t\t\t";
  protected final String TEXT_51 = " layoutCmd = new ";
  protected final String TEXT_52 = "(host().getEditingDomain(), createdViews, host());" + NL + "\t\t\texecuteCommand(new ";
  protected final String TEXT_53 = "(layoutCmd));" + NL + "\t\t}" + NL + "" + NL + "\t\tcreatedViews.addAll(createdConnectionViews);" + NL + "\t\tmakeViewsImmutable(createdViews);" + NL + "\t}";
  protected final String TEXT_54 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_55 = " refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_56 = " phantomNodes = new ";
  protected final String TEXT_57 = "();" + NL + "\t\t";
  protected final String TEXT_58 = " diagramModelObject = ((";
  protected final String TEXT_59 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_60 = " diagram = getDiagram();";
d81 207
a287 222
  protected final String TEXT_62 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_63 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_64 = " nextResourceObject = (";
  protected final String TEXT_65 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_66 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_67 = NL + "\tcase ";
  protected final String TEXT_68 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_71 = "\t}" + NL + "}";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "for (";
  protected final String TEXT_75 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_76 = " nextView = (";
  protected final String TEXT_77 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_78 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\treturn createPhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_81 = " createPhantomNodes(";
  protected final String TEXT_82 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn ";
  protected final String TEXT_83 = ".EMPTY_LIST;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_84 = " descriptors = new ";
  protected final String TEXT_85 = "();" + NL + "\tfor (";
  protected final String TEXT_86 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_87 = " element = (";
  protected final String TEXT_88 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_89 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_90 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_91 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_92 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_93 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_94 = " cc = new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_97 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_99 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_100 = " createCommand = new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_103 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\t";
  protected final String TEXT_104 = " adapters = ";
  protected final String TEXT_105 = ".EMPTY_LIST;" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_106 = ".makeMutable(new ";
  protected final String TEXT_107 = "(((";
  protected final String TEXT_108 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\tadapters = (";
  protected final String TEXT_109 = ") request.getNewObject();" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "\treturn adapters;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_110 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_111 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_112 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_113 = " myLinkDescriptors = new ";
  protected final String TEXT_114 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_115 = " myEObject2ViewMap = new ";
  protected final String TEXT_116 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_117 = " refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_118 = " existingLinks = new ";
  protected final String TEXT_119 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_120 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_121 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_123 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_124 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_125 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\treturn createConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_126 = " view) {" + NL + "\t\t";
  protected final String TEXT_127 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_128 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_129 = NL + "\t\tcase ";
  protected final String TEXT_130 = ".VISUAL_ID:";
  protected final String TEXT_131 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_132 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_133 = " childView = (";
  protected final String TEXT_134 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_135 = " createConnections(";
  protected final String TEXT_136 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn ";
  protected final String TEXT_137 = ".EMPTY_LIST;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_138 = " adapters = new ";
  protected final String TEXT_139 = "();" + NL + "\t\tfor (";
  protected final String TEXT_140 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_141 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_142 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_143 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_144 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_145 = ".APPEND, false, ((";
  protected final String TEXT_146 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_147 = " ccr = new ";
  protected final String TEXT_148 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_149 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_150 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_151 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_152 = " viewAdapter = (";
  protected final String TEXT_153 = ") ccr.getNewObject();" + NL + "\t\t\t\tif (viewAdapter != null) {" + NL + "\t\t\t\t\tadapters.add(viewAdapter);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn adapters;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_154 = " getEditPartFor(";
  protected final String TEXT_155 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_156 = " view = (";
  protected final String TEXT_157 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_158 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_159 = NL;
  protected final String TEXT_160 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_161 = " container, ";
  protected final String TEXT_162 = " diagram) {" + NL + "\t";
  protected final String TEXT_163 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_164 = " container, ";
  protected final String TEXT_165 = " containerMetaclass) {\t";
  protected final String TEXT_166 = "\t\t" + NL + "\tif (";
  protected final String TEXT_167 = ".eINSTANCE.get";
  protected final String TEXT_168 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_169 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_170 = " values = ";
  protected final String TEXT_171 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_172 = " nextValue = ((";
  protected final String TEXT_173 = ") values.next());";
  protected final String TEXT_174 = NL + "\t\t";
  protected final String TEXT_175 = " nextValue = (";
  protected final String TEXT_176 = ") ";
  protected final String TEXT_177 = ";";
  protected final String TEXT_178 = NL + "\t\tint linkVID = ";
  protected final String TEXT_179 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_180 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_181 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_182 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_183 = " dst = (";
  protected final String TEXT_184 = ") structuralFeatureResult;";
  protected final String TEXT_185 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_186 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_187 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_188 = " src = (";
  protected final String TEXT_189 = ") structuralFeatureResult;";
  protected final String TEXT_190 = NL + "\t\t\t\t";
  protected final String TEXT_191 = " src = container;";
  protected final String TEXT_192 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_193 = NL + "\t\t\t\t}";
  protected final String TEXT_194 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_195 = NL + "\t\t}";
  protected final String TEXT_196 = NL + "\t}";
  protected final String TEXT_197 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_198 = " container, ";
  protected final String TEXT_199 = " containerMetaclass, ";
  protected final String TEXT_200 = " diagram) {";
  protected final String TEXT_201 = NL;
  protected final String TEXT_202 = "\tif (";
  protected final String TEXT_203 = ".eINSTANCE.get";
  protected final String TEXT_204 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_205 = NL + "\t\tfor (";
  protected final String TEXT_206 = " destinations = ";
  protected final String TEXT_207 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_208 = " nextDestination = (";
  protected final String TEXT_209 = ") destinations.next();";
  protected final String TEXT_210 = NL + "\t\t";
  protected final String TEXT_211 = " nextDestination = (";
  protected final String TEXT_212 = ") ";
  protected final String TEXT_213 = ";";
  protected final String TEXT_214 = NL + "\t\tif (";
  protected final String TEXT_215 = ".VISUAL_ID == ";
  protected final String TEXT_216 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_217 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_218 = ".";
  protected final String TEXT_219 = ", ";
  protected final String TEXT_220 = ".VISUAL_ID));";
  protected final String TEXT_221 = NL + "\t\t";
  protected final String TEXT_222 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_223 = ".getType(";
  protected final String TEXT_224 = ".VISUAL_ID), ";
  protected final String TEXT_225 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_226 = "Children(nextNode, nextDestination);";
  protected final String TEXT_227 = NL;
  protected final String TEXT_228 = NL + "\t\t}";
  protected final String TEXT_229 = NL + "\t\t}";
  protected final String TEXT_230 = NL + "\t}";
  protected final String TEXT_231 = NL;
  protected final String TEXT_232 = "\tif (";
  protected final String TEXT_233 = ".eINSTANCE.get";
  protected final String TEXT_234 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_235 = NL + "\t\tfor (";
  protected final String TEXT_236 = " destinations = ";
  protected final String TEXT_237 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_238 = " nextDestination = (";
  protected final String TEXT_239 = ") destinations.next();";
  protected final String TEXT_240 = NL + "\t\t";
  protected final String TEXT_241 = " nextDestination = (";
  protected final String TEXT_242 = ") ";
  protected final String TEXT_243 = ";";
  protected final String TEXT_244 = NL + "\t\tif (";
  protected final String TEXT_245 = ".VISUAL_ID == ";
  protected final String TEXT_246 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_247 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_248 = ".";
  protected final String TEXT_249 = ", ";
  protected final String TEXT_250 = ".VISUAL_ID));";
  protected final String TEXT_251 = NL;
  protected final String TEXT_252 = NL + "\t\t}";
  protected final String TEXT_253 = NL + "\t\t}";
  protected final String TEXT_254 = NL + "\t}";
  protected final String TEXT_255 = NL + "}" + NL + "\t";
  protected final String TEXT_256 = NL;
  protected final String TEXT_257 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_258 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_259 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_260 = NL;
  protected final String TEXT_261 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_262 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_263 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_264 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_265 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_266 = " source, ";
  protected final String TEXT_267 = " destination, ";
  protected final String TEXT_268 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_269 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_270 = " source, ";
  protected final String TEXT_271 = " destination, ";
  protected final String TEXT_272 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_273 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_274 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_275 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_276 = " source, ";
  protected final String TEXT_277 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_278 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_279 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_280 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_281 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_282 = NL + NL + "}";
  protected final String TEXT_283 = NL;
d531 1
a531 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d533 1
a533 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d537 1
a537 1
    }
d539 1
a539 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d541 1
a541 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d543 1
a543 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
d545 1
a545 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.DeferredLayoutCommand"));
a546 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d548 4
a551 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d553 1
a553 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d555 1
a555 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d557 1
a557 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d559 1
a559 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d561 5
a565 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d567 1
a567 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d570 2
a571 1
    
a573 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d575 1
a575 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a577 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d579 1
a579 5
    
}
for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
	GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();

d581 1
a581 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d583 1
d585 1
a586 3
    }
if (!genClass2Phantom.isEmpty()) {

a587 1
    }
d589 1
d591 1
d593 2
a595 2
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d597 1
a597 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d601 1
d603 1
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d607 1
a607 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d615 2
a617 2
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d619 1
a619 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d623 1
a623 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d625 1
a625 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d629 1
a629 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d631 1
a631 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d633 1
a633 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d639 1
a639 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d645 1
a645 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d651 1
a651 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d667 1
a667 1
    }
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
a676 24
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_128);
d687 1
a687 1
    stringBuffer.append(TEXT_129);
d689 1
a689 1
    stringBuffer.append(TEXT_130);
d692 1
a692 1
    stringBuffer.append(TEXT_131);
d694 1
a694 1
    stringBuffer.append(TEXT_132);
d696 1
a696 1
    stringBuffer.append(TEXT_133);
d698 1
a698 1
    stringBuffer.append(TEXT_134);
d700 1
a700 9
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_139);
d702 1
a702 1
    stringBuffer.append(TEXT_140);
d704 1
a704 1
    stringBuffer.append(TEXT_141);
d706 1
a706 1
    stringBuffer.append(TEXT_142);
d708 1
a708 1
    stringBuffer.append(TEXT_143);
d710 1
a710 1
    stringBuffer.append(TEXT_144);
d712 1
a712 1
    stringBuffer.append(TEXT_145);
d714 1
a714 1
    stringBuffer.append(TEXT_146);
d716 1
a716 1
    stringBuffer.append(TEXT_147);
d718 1
a718 1
    stringBuffer.append(TEXT_148);
d720 1
a720 1
    stringBuffer.append(TEXT_149);
d722 1
a722 1
    stringBuffer.append(TEXT_150);
d724 1
a724 1
    stringBuffer.append(TEXT_151);
d726 1
a726 1
    stringBuffer.append(TEXT_152);
d728 3
a730 1
    stringBuffer.append(TEXT_153);
d732 1
a732 1
    stringBuffer.append(TEXT_154);
d734 1
a734 1
    stringBuffer.append(TEXT_155);
d736 1
a736 1
    stringBuffer.append(TEXT_156);
d738 1
a738 1
    stringBuffer.append(TEXT_157);
d740 1
a740 1
    stringBuffer.append(TEXT_158);
d745 2
a746 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(TEXT_160);
d748 1
a748 1
    stringBuffer.append(TEXT_161);
d750 1
a750 1
    stringBuffer.append(TEXT_162);
d752 1
a752 1
    stringBuffer.append(TEXT_163);
d754 1
a754 1
    stringBuffer.append(TEXT_164);
d756 1
a756 1
    stringBuffer.append(TEXT_165);
d764 1
a764 1
    stringBuffer.append(TEXT_166);
d766 1
a766 1
    stringBuffer.append(TEXT_167);
d768 1
a768 1
    stringBuffer.append(TEXT_168);
d770 1
a770 1
    stringBuffer.append(TEXT_169);
d772 1
a772 1
    stringBuffer.append(TEXT_170);
d774 1
a774 1
    stringBuffer.append(TEXT_171);
d776 1
a776 1
    stringBuffer.append(TEXT_172);
d778 1
a778 1
    stringBuffer.append(TEXT_173);
d780 1
a780 1
    stringBuffer.append(TEXT_174);
d782 1
a782 1
    stringBuffer.append(TEXT_175);
d784 1
a784 1
    stringBuffer.append(TEXT_176);
d786 1
a786 1
    stringBuffer.append(TEXT_177);
d788 1
a788 1
    stringBuffer.append(TEXT_178);
d790 1
a790 1
    stringBuffer.append(TEXT_179);
d792 1
a792 1
    stringBuffer.append(TEXT_180);
d794 1
a794 1
    stringBuffer.append(TEXT_181);
d796 1
a796 1
    stringBuffer.append(TEXT_182);
d798 1
a798 1
    stringBuffer.append(TEXT_183);
d800 1
a800 1
    stringBuffer.append(TEXT_184);
d802 1
a802 1
    stringBuffer.append(TEXT_185);
d804 1
a804 1
    stringBuffer.append(TEXT_186);
d806 1
a806 1
    stringBuffer.append(TEXT_187);
d808 1
a808 1
    stringBuffer.append(TEXT_188);
d810 1
a810 1
    stringBuffer.append(TEXT_189);
d812 1
a812 1
    stringBuffer.append(TEXT_190);
d814 1
a814 1
    stringBuffer.append(TEXT_191);
d816 1
a816 1
    stringBuffer.append(TEXT_192);
d818 1
a818 1
    stringBuffer.append(TEXT_193);
d820 1
a820 1
    stringBuffer.append(TEXT_194);
d824 1
a824 1
    stringBuffer.append(TEXT_195);
d828 1
a828 1
    stringBuffer.append(TEXT_196);
d833 1
a833 1
    stringBuffer.append(TEXT_197);
d835 1
a835 1
    stringBuffer.append(TEXT_198);
d837 1
a837 1
    stringBuffer.append(TEXT_199);
d839 1
a839 1
    stringBuffer.append(TEXT_200);
d844 1
a844 1
    stringBuffer.append(TEXT_201);
d858 1
a858 1
    stringBuffer.append(TEXT_202);
d860 1
a860 1
    stringBuffer.append(TEXT_203);
d862 1
a862 1
    stringBuffer.append(TEXT_204);
d864 1
a864 1
    stringBuffer.append(TEXT_205);
d866 1
a866 1
    stringBuffer.append(TEXT_206);
d868 1
a868 1
    stringBuffer.append(TEXT_207);
d870 1
a870 1
    stringBuffer.append(TEXT_208);
d872 1
a872 1
    stringBuffer.append(TEXT_209);
d874 1
a874 1
    stringBuffer.append(TEXT_210);
d876 1
a876 1
    stringBuffer.append(TEXT_211);
d878 1
a878 1
    stringBuffer.append(TEXT_212);
d880 1
a880 1
    stringBuffer.append(TEXT_213);
d883 1
a883 1
    stringBuffer.append(TEXT_214);
d885 1
a885 1
    stringBuffer.append(TEXT_215);
d887 1
a887 1
    stringBuffer.append(TEXT_216);
d889 1
a889 1
    stringBuffer.append(TEXT_217);
d891 1
a891 1
    stringBuffer.append(TEXT_218);
d893 1
a893 1
    stringBuffer.append(TEXT_219);
d895 1
a895 1
    stringBuffer.append(TEXT_220);
d897 1
a897 1
    stringBuffer.append(TEXT_221);
d899 1
a899 1
    stringBuffer.append(TEXT_222);
d901 1
a901 1
    stringBuffer.append(TEXT_223);
d903 1
a903 1
    stringBuffer.append(TEXT_224);
d905 1
a905 1
    stringBuffer.append(TEXT_225);
d907 1
a907 1
    stringBuffer.append(TEXT_226);
d909 1
a909 1
    stringBuffer.append(TEXT_227);
d911 1
a911 1
    stringBuffer.append(TEXT_228);
d914 1
a914 1
    stringBuffer.append(TEXT_229);
d916 1
a916 1
    stringBuffer.append(TEXT_230);
d923 1
a923 1
    stringBuffer.append(TEXT_231);
d937 1
a937 1
    stringBuffer.append(TEXT_232);
d939 1
a939 1
    stringBuffer.append(TEXT_233);
d941 1
a941 1
    stringBuffer.append(TEXT_234);
d943 1
a943 1
    stringBuffer.append(TEXT_235);
d945 1
a945 1
    stringBuffer.append(TEXT_236);
d947 1
a947 1
    stringBuffer.append(TEXT_237);
d949 1
a949 1
    stringBuffer.append(TEXT_238);
d951 1
a951 1
    stringBuffer.append(TEXT_239);
d953 1
a953 1
    stringBuffer.append(TEXT_240);
d955 1
a955 1
    stringBuffer.append(TEXT_241);
d957 1
a957 1
    stringBuffer.append(TEXT_242);
d959 1
a959 1
    stringBuffer.append(TEXT_243);
d962 1
a962 1
    stringBuffer.append(TEXT_244);
d964 1
a964 1
    stringBuffer.append(TEXT_245);
d966 1
a966 1
    stringBuffer.append(TEXT_246);
d968 1
a968 1
    stringBuffer.append(TEXT_247);
d970 1
a970 1
    stringBuffer.append(TEXT_248);
d972 1
a972 1
    stringBuffer.append(TEXT_249);
d974 2
a975 2
    stringBuffer.append(TEXT_250);
    stringBuffer.append(TEXT_251);
d977 1
a977 1
    stringBuffer.append(TEXT_252);
d980 1
a980 1
    stringBuffer.append(TEXT_253);
d982 1
a982 1
    stringBuffer.append(TEXT_254);
d984 3
a986 3
    stringBuffer.append(TEXT_255);
    stringBuffer.append(TEXT_256);
    stringBuffer.append(TEXT_257);
d988 1
a988 1
    stringBuffer.append(TEXT_258);
d990 2
a991 2
    stringBuffer.append(TEXT_259);
    stringBuffer.append(TEXT_260);
d995 1
a995 1
    stringBuffer.append(TEXT_261);
d997 1
a997 1
    stringBuffer.append(TEXT_262);
d999 1
a999 1
    stringBuffer.append(TEXT_263);
d1001 1
a1001 1
    stringBuffer.append(TEXT_264);
d1003 1
a1003 1
    stringBuffer.append(TEXT_265);
d1005 1
a1005 1
    stringBuffer.append(TEXT_266);
d1007 1
a1007 1
    stringBuffer.append(TEXT_267);
d1009 1
a1009 1
    stringBuffer.append(TEXT_268);
d1011 1
a1011 1
    stringBuffer.append(TEXT_269);
d1013 1
a1013 1
    stringBuffer.append(TEXT_270);
d1015 1
a1015 1
    stringBuffer.append(TEXT_271);
d1017 1
a1017 1
    stringBuffer.append(TEXT_272);
d1019 1
a1019 1
    stringBuffer.append(TEXT_273);
d1021 1
a1021 1
    stringBuffer.append(TEXT_274);
d1023 1
a1023 1
    stringBuffer.append(TEXT_275);
d1025 1
a1025 1
    stringBuffer.append(TEXT_276);
d1027 1
a1027 1
    stringBuffer.append(TEXT_277);
d1029 1
a1029 1
    stringBuffer.append(TEXT_278);
d1031 1
a1031 1
    stringBuffer.append(TEXT_279);
d1033 1
a1033 1
    stringBuffer.append(TEXT_280);
d1035 1
a1035 1
    stringBuffer.append(TEXT_281);
d1037 1
a1037 1
    stringBuffer.append(TEXT_282);
d1039 1
a1039 1
    stringBuffer.append(TEXT_283);
@


1.41
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d59 1
a59 1
  protected final String TEXT_40 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
@


1.40
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d60 23
a82 23
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_42 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_43 = ".EMPTY_LIST;" + NL + "\t}\t";
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_45 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_46 = NL;
  protected final String TEXT_47 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();";
  protected final String TEXT_48 = NL + "\t\trefreshPhantoms();";
  protected final String TEXT_49 = NL + "\t\trefreshConnections();" + NL + "\t}";
  protected final String TEXT_50 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_51 = " phantomNodes = new ";
  protected final String TEXT_52 = "();" + NL + "\t\t";
  protected final String TEXT_53 = " diagramModelObject = ((";
  protected final String TEXT_54 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_55 = " diagram = getDiagram();";
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_58 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_59 = " nextResourceObject = (";
  protected final String TEXT_60 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_61 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_62 = NL + "\tcase ";
  protected final String TEXT_63 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
d84 84
a167 84
  protected final String TEXT_65 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_66 = "\t}" + NL + "}";
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = "for (";
  protected final String TEXT_70 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_71 = " nextView = (";
  protected final String TEXT_72 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_73 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_76 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_77 = " descriptors = new ";
  protected final String TEXT_78 = "();" + NL + "\tfor (";
  protected final String TEXT_79 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_80 = " element = (";
  protected final String TEXT_81 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_82 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_83 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_84 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_85 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_86 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_87 = " cc = new ";
  protected final String TEXT_88 = "(";
  protected final String TEXT_89 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_90 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_91 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_92 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_93 = " createCommand = new ";
  protected final String TEXT_94 = "(((";
  protected final String TEXT_95 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_96 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_97 = ".makeMutable(new ";
  protected final String TEXT_98 = "(((";
  protected final String TEXT_99 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_100 = " adapters = (";
  protected final String TEXT_101 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_102 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_103 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_104 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_105 = " myLinkDescriptors = new ";
  protected final String TEXT_106 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_107 = " myEObject2ViewMap = new ";
  protected final String TEXT_108 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_109 = " existingLinks = new ";
  protected final String TEXT_110 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_111 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_112 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_113 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_114 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_115 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_116 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_117 = " view) {" + NL + "\t\t";
  protected final String TEXT_118 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_119 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_120 = NL + "\t\tcase ";
  protected final String TEXT_121 = ".VISUAL_ID:";
  protected final String TEXT_122 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_123 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_124 = " childView = (";
  protected final String TEXT_125 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_126 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_127 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_128 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_129 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_130 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_131 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_132 = ".APPEND, false, ((";
  protected final String TEXT_133 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_134 = " ccr = new ";
  protected final String TEXT_135 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_136 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_137 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_138 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_139 = " viewAdapter = (";
  protected final String TEXT_140 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_141 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_142 = " getEditPartFor(";
  protected final String TEXT_143 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_144 = " view = (";
  protected final String TEXT_145 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_146 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
d169 46
a214 46
  protected final String TEXT_150 = " diagram) {" + NL + "\t";
  protected final String TEXT_151 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_152 = " container, ";
  protected final String TEXT_153 = " containerMetaclass) {\t";
  protected final String TEXT_154 = "\t\t" + NL + "\tif (";
  protected final String TEXT_155 = ".eINSTANCE.get";
  protected final String TEXT_156 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_157 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_158 = " values = ";
  protected final String TEXT_159 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_160 = " nextValue = ((";
  protected final String TEXT_161 = ") values.next());";
  protected final String TEXT_162 = NL + "\t\t";
  protected final String TEXT_163 = " nextValue = (";
  protected final String TEXT_164 = ") ";
  protected final String TEXT_165 = ";";
  protected final String TEXT_166 = NL + "\t\tint linkVID = ";
  protected final String TEXT_167 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_168 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_169 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_170 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_171 = " dst = (";
  protected final String TEXT_172 = ") structuralFeatureResult;";
  protected final String TEXT_173 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_174 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_175 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_176 = " src = (";
  protected final String TEXT_177 = ") structuralFeatureResult;";
  protected final String TEXT_178 = NL + "\t\t\t\t";
  protected final String TEXT_179 = " src = container;";
  protected final String TEXT_180 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_181 = NL + "\t\t\t\t}";
  protected final String TEXT_182 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t}";
  protected final String TEXT_185 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_186 = " container, ";
  protected final String TEXT_187 = " containerMetaclass, ";
  protected final String TEXT_188 = " diagram) {";
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = "\tif (";
  protected final String TEXT_191 = ".eINSTANCE.get";
  protected final String TEXT_192 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_193 = NL + "\t\tfor (";
  protected final String TEXT_194 = " destinations = ";
  protected final String TEXT_195 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
d216 29
a244 29
  protected final String TEXT_197 = ") destinations.next();";
  protected final String TEXT_198 = NL + "\t\t";
  protected final String TEXT_199 = " nextDestination = (";
  protected final String TEXT_200 = ") ";
  protected final String TEXT_201 = ";";
  protected final String TEXT_202 = NL + "\t\tif (";
  protected final String TEXT_203 = ".VISUAL_ID == ";
  protected final String TEXT_204 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_205 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_206 = ".";
  protected final String TEXT_207 = ", ";
  protected final String TEXT_208 = ".VISUAL_ID));";
  protected final String TEXT_209 = NL + "\t\t";
  protected final String TEXT_210 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_211 = ".getType(";
  protected final String TEXT_212 = ".VISUAL_ID), ";
  protected final String TEXT_213 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_214 = "Children(nextNode, nextDestination);";
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = NL + "\t\t}";
  protected final String TEXT_217 = NL + "\t\t}";
  protected final String TEXT_218 = NL + "\t}";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "\tif (";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_223 = NL + "\t\tfor (";
  protected final String TEXT_224 = " destinations = ";
  protected final String TEXT_225 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
d246 42
a287 45
  protected final String TEXT_227 = ") destinations.next();";
  protected final String TEXT_228 = NL + "\t\t";
  protected final String TEXT_229 = " nextDestination = (";
  protected final String TEXT_230 = ") ";
  protected final String TEXT_231 = ";";
  protected final String TEXT_232 = NL + "\t\tif (";
  protected final String TEXT_233 = ".VISUAL_ID == ";
  protected final String TEXT_234 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_235 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_236 = ".";
  protected final String TEXT_237 = ", ";
  protected final String TEXT_238 = ".VISUAL_ID));";
  protected final String TEXT_239 = NL;
  protected final String TEXT_240 = NL + "\t\t}";
  protected final String TEXT_241 = NL + "\t\t}";
  protected final String TEXT_242 = NL + "\t}";
  protected final String TEXT_243 = NL + "}" + NL + "\t";
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_246 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_247 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_248 = NL;
  protected final String TEXT_249 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_250 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_251 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_252 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_254 = " source, ";
  protected final String TEXT_255 = " destination, ";
  protected final String TEXT_256 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_257 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_258 = " source, ";
  protected final String TEXT_259 = " destination, ";
  protected final String TEXT_260 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_261 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_262 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_263 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_264 = " source, ";
  protected final String TEXT_265 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_266 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_267 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_268 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_270 = NL + NL + "}";
  protected final String TEXT_271 = NL;
d411 1
a411 1
if (modelElementInterface != null && genDiagram.isSynchronized()) {
d512 1
a512 1
    } else {
d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
a517 6
    }
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_45);
    if (modelElementInterface != null) {
    stringBuffer.append(TEXT_46);
d530 1
a530 1
    stringBuffer.append(TEXT_47);
d532 1
a532 1
    stringBuffer.append(TEXT_48);
d534 1
a534 1
    stringBuffer.append(TEXT_49);
d536 1
a536 1
    stringBuffer.append(TEXT_50);
d538 1
a538 1
    stringBuffer.append(TEXT_51);
d540 1
a540 1
    stringBuffer.append(TEXT_52);
d542 1
a542 1
    stringBuffer.append(TEXT_53);
d544 1
a544 1
    stringBuffer.append(TEXT_54);
d546 2
a547 2
    stringBuffer.append(TEXT_55);
    stringBuffer.append(TEXT_56);
d552 1
a552 1
    stringBuffer.append(TEXT_57);
d554 1
a554 1
    stringBuffer.append(TEXT_58);
d556 1
a556 1
    stringBuffer.append(TEXT_59);
d558 1
a558 1
    stringBuffer.append(TEXT_60);
d560 1
a560 1
    stringBuffer.append(TEXT_61);
d566 4
d571 3
a573 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d575 1
a577 3
    }
if (!genClass2Phantom.isEmpty()) {

d579 1
a579 1
    }
d581 1
d583 1
d585 1
a585 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a587 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d591 1
d593 1
d595 1
a595 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d597 1
a597 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d599 1
a599 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d601 1
a601 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d603 1
a603 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d615 1
a615 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d617 1
a617 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d619 1
a619 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d621 1
a621 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d623 1
a623 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d625 1
a625 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d629 1
a629 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d631 1
a631 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d633 2
a635 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d639 1
a639 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d645 1
a645 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d651 1
a651 1
    }
d653 2
d656 1
a656 1
    stringBuffer.append(TEXT_105);
a657 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d671 2
d674 1
a674 1
    stringBuffer.append(TEXT_114);
a675 2
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a676 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_119);
d687 1
a687 1
    stringBuffer.append(TEXT_120);
d689 1
a689 1
    stringBuffer.append(TEXT_121);
d692 1
a692 1
    stringBuffer.append(TEXT_122);
d694 1
a694 1
    stringBuffer.append(TEXT_123);
d696 1
a696 1
    stringBuffer.append(TEXT_124);
d698 1
a698 1
    stringBuffer.append(TEXT_125);
d700 1
a700 1
    stringBuffer.append(TEXT_126);
d702 1
a702 1
    stringBuffer.append(TEXT_127);
d704 1
a704 1
    stringBuffer.append(TEXT_128);
d706 1
a706 1
    stringBuffer.append(TEXT_129);
d708 1
a708 1
    stringBuffer.append(TEXT_130);
d710 1
a710 1
    stringBuffer.append(TEXT_131);
d712 1
a712 1
    stringBuffer.append(TEXT_132);
d714 1
a714 1
    stringBuffer.append(TEXT_133);
d716 1
a716 1
    stringBuffer.append(TEXT_134);
d718 1
a718 1
    stringBuffer.append(TEXT_135);
d720 1
a720 1
    stringBuffer.append(TEXT_136);
d722 1
a722 1
    stringBuffer.append(TEXT_137);
d724 1
a724 1
    stringBuffer.append(TEXT_138);
d726 1
a726 1
    stringBuffer.append(TEXT_139);
d728 1
a728 1
    stringBuffer.append(TEXT_140);
d730 1
a730 1
    stringBuffer.append(TEXT_141);
d732 1
a732 1
    stringBuffer.append(TEXT_142);
d734 1
a734 1
    stringBuffer.append(TEXT_143);
d736 1
a736 1
    stringBuffer.append(TEXT_144);
d738 1
a738 1
    stringBuffer.append(TEXT_145);
d740 1
a740 1
    stringBuffer.append(TEXT_146);
d745 5
d751 1
d755 1
a755 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a756 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_153);
d764 6
d771 1
a771 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d773 1
a773 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d775 1
a775 1
    		if (childMetaFeature.isListType()) {
d777 1
a777 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d779 1
a779 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d785 1
a785 1
    		} else {
d787 1
a787 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d789 1
a789 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d791 1
a791 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d793 1
a793 1
    		}
d795 1
a795 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d797 1
a797 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d799 1
a799 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d801 1
a801 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d803 1
a803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d807 1
a807 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d809 1
a809 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d811 1
a811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d815 1
a815 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d817 1
a817 1
    		} else {
d819 1
a819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a820 6
    		}
    stringBuffer.append(TEXT_180);
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
    stringBuffer.append(TEXT_181);
    		}
    stringBuffer.append(TEXT_182);
d824 1
a824 1
    stringBuffer.append(TEXT_183);
d828 1
a828 1
    stringBuffer.append(TEXT_184);
d833 1
a833 1
    stringBuffer.append(TEXT_185);
d835 1
a835 1
    stringBuffer.append(TEXT_186);
d837 1
a837 1
    stringBuffer.append(TEXT_187);
d839 1
a839 1
    stringBuffer.append(TEXT_188);
d844 1
a844 1
    stringBuffer.append(TEXT_189);
d858 6
d865 1
a865 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d867 1
a867 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d869 1
a869 1
    	if (genFeature.isListType()) {
d871 1
a871 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d873 1
a873 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d879 1
a879 1
    	} else {
d881 2
a882 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d884 1
a884 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d886 1
a886 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
a888 1
    	if (phantomsOnly) {
d890 1
a890 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d892 1
a892 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d894 1
a894 1
    	}
d896 1
a896 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d898 1
a898 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d900 1
a900 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d902 1
a902 1
    	if (createPhantoms) {
d904 1
a904 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d906 1
a906 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d908 1
a908 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d910 1
a910 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d912 2
a913 1
    stringBuffer.append(phantomNode.getUniqueIdentifier());
a916 7
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_216);
    	}
	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_217);
    	}
    stringBuffer.append(TEXT_218);
d923 1
a923 1
    stringBuffer.append(TEXT_219);
d937 6
d944 1
a944 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d946 1
a946 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d948 1
a948 1
    	if (genFeature.isListType()) {
d950 1
a950 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d952 1
a952 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d958 1
a958 1
    	} else {
d960 2
a961 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d963 1
a963 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d965 1
a965 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
a967 1
    	if (phantomsOnly) {
d969 1
a969 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d971 1
a971 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d973 1
a973 1
    	}
a974 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d976 1
a976 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d978 2
a979 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d981 1
d983 1
a983 1
    	if (phantomsOnly) {
a984 2
    	}
	if (genFeature.isListType()) {
a985 1
    	}
d987 1
a987 1
    }
d989 1
d992 3
a994 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d996 1
a996 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d998 1
d1000 1
a1000 3
    
// an inner class 

d1002 1
a1002 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1008 1
a1008 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1010 1
a1010 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1016 1
a1016 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1018 1
a1018 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1020 1
a1020 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1024 1
a1024 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1026 1
a1026 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1028 1
a1028 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1034 1
a1034 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1036 1
a1036 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1038 1
a1038 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a1039 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_269);
    }
    stringBuffer.append(TEXT_270);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_271);
@


1.39
log
@header comment should not be a javadoc comment
@
text
@d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
@


1.38
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.37
log
@avoid generating unused imports in pure pure design projects
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d401 1
a401 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.36
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.util.List;" + NL + "import java.util.Collection;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EObject;";
@


1.35
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.util.List;" + NL + "import java.util.Collection;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EObject;";
d25 31
a55 31
  protected final String TEXT_6 = " extends CanonicalConnectionEditPolicy {" + NL + "\t";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_9 = " getSemanticChildrenList() {" + NL + "\t";
  protected final String TEXT_10 = " result = new ";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t";
  protected final String TEXT_13 = " modelObject = ((";
  protected final String TEXT_14 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_15 = " viewObject = (";
  protected final String TEXT_16 = ") getHost().getModel();";
  protected final String TEXT_17 = "\t";
  protected final String TEXT_18 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_19 = "\tfor (";
  protected final String TEXT_20 = " values = ";
  protected final String TEXT_21 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_22 = ") values.next();";
  protected final String TEXT_23 = NL + "\tnextValue = ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + "\tnodeVID = ";
  protected final String TEXT_26 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_27 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_28 = NL + "\tcase ";
  protected final String TEXT_29 = ".VISUAL_ID: {";
  protected final String TEXT_30 = NL + "\tif (";
  protected final String TEXT_31 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_32 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_33 = NL;
  protected final String TEXT_34 = "\t\tbreak;";
  protected final String TEXT_35 = "\t}";
  protected final String TEXT_36 = NL + "\t}";
d57 29
a85 29
  protected final String TEXT_38 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_39 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_40 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_41 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_42 = ".EMPTY_LIST;" + NL + "\t}\t";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_44 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();";
  protected final String TEXT_47 = NL + "\t\trefreshPhantoms();";
  protected final String TEXT_48 = NL + "\t\trefreshConnections();" + NL + "\t}";
  protected final String TEXT_49 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_50 = " phantomNodes = new ";
  protected final String TEXT_51 = "();" + NL + "\t\t";
  protected final String TEXT_52 = " diagramModelObject = ((";
  protected final String TEXT_53 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_54 = " diagram = getDiagram();";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_57 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_58 = " nextResourceObject = (";
  protected final String TEXT_59 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_60 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_61 = NL + "\tcase ";
  protected final String TEXT_62 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_63 = NL;
  protected final String TEXT_64 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_65 = "\t}" + NL + "}";
  protected final String TEXT_66 = NL;
d87 204
a290 202
  protected final String TEXT_68 = "for (";
  protected final String TEXT_69 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_70 = " nextView = (";
  protected final String TEXT_71 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_72 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_75 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_76 = " descriptors = new ";
  protected final String TEXT_77 = "();" + NL + "\tfor (";
  protected final String TEXT_78 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_79 = " element = (";
  protected final String TEXT_80 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_81 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_82 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_83 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_84 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_85 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_86 = " cc = new ";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_89 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_90 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_91 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_92 = " createCommand = new ";
  protected final String TEXT_93 = "(((";
  protected final String TEXT_94 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_95 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_96 = ".makeMutable(new ";
  protected final String TEXT_97 = "(((";
  protected final String TEXT_98 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_99 = " adapters = (";
  protected final String TEXT_100 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_101 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_102 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_103 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_104 = " myLinkDescriptors = new ";
  protected final String TEXT_105 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_106 = " myEObject2ViewMap = new ";
  protected final String TEXT_107 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_108 = " existingLinks = new ";
  protected final String TEXT_109 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_110 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_111 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_112 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_113 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_114 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_115 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_116 = " view) {" + NL + "\t\t";
  protected final String TEXT_117 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_118 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_119 = NL + "\t\tcase ";
  protected final String TEXT_120 = ".VISUAL_ID:";
  protected final String TEXT_121 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_122 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_123 = " childView = (";
  protected final String TEXT_124 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_125 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_126 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_127 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_128 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_129 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_130 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_131 = ".APPEND, false, ((";
  protected final String TEXT_132 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_133 = " ccr = new ";
  protected final String TEXT_134 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_135 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_136 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_137 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_138 = " viewAdapter = (";
  protected final String TEXT_139 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_140 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_141 = " getEditPartFor(";
  protected final String TEXT_142 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_143 = " view = (";
  protected final String TEXT_144 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_145 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_148 = " container, ";
  protected final String TEXT_149 = " diagram) {" + NL + "\t";
  protected final String TEXT_150 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_151 = " container, ";
  protected final String TEXT_152 = " containerMetaclass) {\t";
  protected final String TEXT_153 = "\t\t" + NL + "\tif (";
  protected final String TEXT_154 = ".eINSTANCE.get";
  protected final String TEXT_155 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_156 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_157 = " values = ";
  protected final String TEXT_158 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_159 = " nextValue = ((";
  protected final String TEXT_160 = ") values.next());";
  protected final String TEXT_161 = NL + "\t\t";
  protected final String TEXT_162 = " nextValue = (";
  protected final String TEXT_163 = ") ";
  protected final String TEXT_164 = ";";
  protected final String TEXT_165 = NL + "\t\tint linkVID = ";
  protected final String TEXT_166 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_167 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_168 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_169 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_170 = " dst = (";
  protected final String TEXT_171 = ") structuralFeatureResult;";
  protected final String TEXT_172 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_173 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_174 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_175 = " src = (";
  protected final String TEXT_176 = ") structuralFeatureResult;";
  protected final String TEXT_177 = NL + "\t\t\t\t";
  protected final String TEXT_178 = " src = container;";
  protected final String TEXT_179 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_180 = NL + "\t\t\t\t}";
  protected final String TEXT_181 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_182 = NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t}";
  protected final String TEXT_184 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_185 = " container, ";
  protected final String TEXT_186 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = "\tif (";
  protected final String TEXT_189 = ".eINSTANCE.get";
  protected final String TEXT_190 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_191 = NL + "\t\tfor (";
  protected final String TEXT_192 = " destinations = ";
  protected final String TEXT_193 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_194 = " nextDestination = (";
  protected final String TEXT_195 = ") destinations.next();";
  protected final String TEXT_196 = NL + "\t\t";
  protected final String TEXT_197 = " nextDestination = (";
  protected final String TEXT_198 = ") ";
  protected final String TEXT_199 = ";";
  protected final String TEXT_200 = NL + "\t\tif (";
  protected final String TEXT_201 = ".VISUAL_ID == ";
  protected final String TEXT_202 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_203 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_204 = ".";
  protected final String TEXT_205 = ", ";
  protected final String TEXT_206 = ".VISUAL_ID));";
  protected final String TEXT_207 = NL + "\t\t";
  protected final String TEXT_208 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_209 = ".getType(";
  protected final String TEXT_210 = ".VISUAL_ID), ";
  protected final String TEXT_211 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_212 = "Children(nextNode, nextDestination);";
  protected final String TEXT_213 = NL;
  protected final String TEXT_214 = NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t\t}";
  protected final String TEXT_216 = NL + "\t}";
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = "\tif (";
  protected final String TEXT_219 = ".eINSTANCE.get";
  protected final String TEXT_220 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_221 = NL + "\t\tfor (";
  protected final String TEXT_222 = " destinations = ";
  protected final String TEXT_223 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_224 = " nextDestination = (";
  protected final String TEXT_225 = ") destinations.next();";
  protected final String TEXT_226 = NL + "\t\t";
  protected final String TEXT_227 = " nextDestination = (";
  protected final String TEXT_228 = ") ";
  protected final String TEXT_229 = ";";
  protected final String TEXT_230 = NL + "\t\tif (";
  protected final String TEXT_231 = ".VISUAL_ID == ";
  protected final String TEXT_232 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_233 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_234 = ".";
  protected final String TEXT_235 = ", ";
  protected final String TEXT_236 = ".VISUAL_ID));";
  protected final String TEXT_237 = NL;
  protected final String TEXT_238 = NL + "\t\t}";
  protected final String TEXT_239 = NL + "\t\t}";
  protected final String TEXT_240 = NL + "\t}";
  protected final String TEXT_241 = NL + "}" + NL + "\t";
  protected final String TEXT_242 = NL;
  protected final String TEXT_243 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_244 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_245 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_246 = NL;
  protected final String TEXT_247 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_248 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_249 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_250 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_251 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_252 = " source, ";
  protected final String TEXT_253 = " destination, ";
  protected final String TEXT_254 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_255 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_256 = " source, ";
  protected final String TEXT_257 = " destination, ";
  protected final String TEXT_258 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_259 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_260 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_261 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_262 = " source, ";
  protected final String TEXT_263 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_264 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_265 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_266 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_267 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_268 = NL + NL + "}";
  protected final String TEXT_269 = NL;
d410 2
a416 1
    stringBuffer.append(TEXT_7);
a417 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d421 2
d424 1
a424 1
    stringBuffer.append(TEXT_11);
d426 1
a426 1
    stringBuffer.append(TEXT_12);
a427 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d433 2
d455 1
a455 1
    stringBuffer.append(TEXT_17);
d457 1
a457 1
    stringBuffer.append(TEXT_18);
d467 1
a467 1
    stringBuffer.append(TEXT_19);
d469 1
a469 1
    stringBuffer.append(TEXT_20);
d471 1
a471 1
    stringBuffer.append(TEXT_21);
d473 1
a473 1
    stringBuffer.append(TEXT_22);
d475 1
a475 1
    stringBuffer.append(TEXT_23);
d477 1
a477 1
    stringBuffer.append(TEXT_24);
d479 1
a479 1
    stringBuffer.append(TEXT_25);
d481 1
a481 1
    stringBuffer.append(TEXT_26);
d484 1
a484 1
    stringBuffer.append(TEXT_27);
d490 1
a490 1
    stringBuffer.append(TEXT_28);
d492 1
a492 1
    stringBuffer.append(TEXT_29);
d494 1
a494 1
    stringBuffer.append(TEXT_30);
d496 1
a496 1
    stringBuffer.append(TEXT_31);
a497 1
    stringBuffer.append(TEXT_32);
d499 1
d501 1
a501 1
    stringBuffer.append(TEXT_34);
d503 1
a503 1
    stringBuffer.append(TEXT_35);
d506 1
a506 1
    stringBuffer.append(TEXT_36);
d509 1
a509 1
    stringBuffer.append(TEXT_37);
d512 1
a512 1
    stringBuffer.append(TEXT_38);
d514 1
a514 1
    stringBuffer.append(TEXT_39);
d516 1
a516 1
    stringBuffer.append(TEXT_40);
d518 1
a518 1
    stringBuffer.append(TEXT_41);
d520 1
a520 1
    stringBuffer.append(TEXT_42);
d522 1
a522 1
    stringBuffer.append(TEXT_43);
d524 1
a524 1
    stringBuffer.append(TEXT_44);
d526 1
a526 1
    stringBuffer.append(TEXT_45);
d539 1
a539 1
    stringBuffer.append(TEXT_46);
d541 1
a541 1
    stringBuffer.append(TEXT_47);
d543 1
a543 1
    stringBuffer.append(TEXT_48);
d545 1
a545 1
    stringBuffer.append(TEXT_49);
d547 1
a547 1
    stringBuffer.append(TEXT_50);
d549 1
a549 1
    stringBuffer.append(TEXT_51);
d551 1
a551 1
    stringBuffer.append(TEXT_52);
d553 1
a553 1
    stringBuffer.append(TEXT_53);
a554 1
    stringBuffer.append(TEXT_54);
d556 1
d561 1
a561 1
    stringBuffer.append(TEXT_56);
a562 2
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d566 2
d569 1
a569 1
    stringBuffer.append(TEXT_60);
d575 1
a575 1
    stringBuffer.append(TEXT_61);
a576 1
    stringBuffer.append(TEXT_62);
d579 1
d583 1
a583 1
    stringBuffer.append(TEXT_65);
a584 1
    stringBuffer.append(TEXT_66);
d587 1
a588 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d592 2
a594 1
    stringBuffer.append(TEXT_72);
d597 1
d599 1
a599 1
    stringBuffer.append(TEXT_75);
d601 1
a601 1
    stringBuffer.append(TEXT_76);
d603 1
a603 1
    stringBuffer.append(TEXT_77);
a604 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d608 2
d611 1
a611 1
    stringBuffer.append(TEXT_81);
d613 1
a613 1
    stringBuffer.append(TEXT_82);
d615 1
a615 1
    stringBuffer.append(TEXT_83);
d617 1
a617 1
    stringBuffer.append(TEXT_84);
a618 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d622 2
d625 1
a625 1
    stringBuffer.append(TEXT_88);
a626 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d630 2
d633 1
a633 1
    stringBuffer.append(TEXT_92);
d635 1
a635 1
    stringBuffer.append(TEXT_93);
d637 1
a637 1
    stringBuffer.append(TEXT_94);
d639 1
a639 1
    stringBuffer.append(TEXT_95);
d641 1
a641 1
    stringBuffer.append(TEXT_96);
d643 1
a643 1
    stringBuffer.append(TEXT_97);
a644 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d652 2
d655 1
a655 1
    stringBuffer.append(TEXT_103);
d657 1
a657 1
    stringBuffer.append(TEXT_104);
d659 1
a659 1
    stringBuffer.append(TEXT_105);
d661 1
a661 1
    stringBuffer.append(TEXT_106);
d663 1
a663 1
    stringBuffer.append(TEXT_107);
d665 1
a665 1
    stringBuffer.append(TEXT_108);
d667 1
a667 1
    stringBuffer.append(TEXT_109);
a668 2
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d674 2
d677 1
a677 1
    stringBuffer.append(TEXT_114);
d679 1
a679 1
    stringBuffer.append(TEXT_115);
d681 1
a681 1
    stringBuffer.append(TEXT_116);
d683 1
a683 1
    stringBuffer.append(TEXT_117);
d685 1
a685 1
    stringBuffer.append(TEXT_118);
d696 1
a696 1
    stringBuffer.append(TEXT_119);
d698 1
a698 1
    stringBuffer.append(TEXT_120);
d701 1
a701 1
    stringBuffer.append(TEXT_121);
a702 2
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d706 2
d709 1
a709 1
    stringBuffer.append(TEXT_125);
a710 2
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d718 2
d721 1
a721 1
    stringBuffer.append(TEXT_131);
a722 2
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d730 2
a732 2
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d736 2
d739 1
a739 1
    stringBuffer.append(TEXT_140);
d741 1
a741 1
    stringBuffer.append(TEXT_141);
a742 2
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d746 2
d749 1
a749 1
    stringBuffer.append(TEXT_145);
a753 1
    stringBuffer.append(TEXT_146);
d755 1
d757 1
a757 1
    stringBuffer.append(TEXT_148);
d759 1
a759 1
    stringBuffer.append(TEXT_149);
d761 1
a761 1
    stringBuffer.append(TEXT_150);
d763 1
a763 1
    stringBuffer.append(TEXT_151);
d765 1
a765 1
    stringBuffer.append(TEXT_152);
d773 1
a773 1
    stringBuffer.append(TEXT_153);
d775 1
a775 1
    stringBuffer.append(TEXT_154);
d777 1
a777 1
    stringBuffer.append(TEXT_155);
d779 1
a779 1
    stringBuffer.append(TEXT_156);
d781 1
a781 1
    stringBuffer.append(TEXT_157);
a782 2
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d786 2
a788 2
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d792 2
d795 1
a795 1
    stringBuffer.append(TEXT_164);
d797 1
a797 1
    stringBuffer.append(TEXT_165);
d799 1
a799 1
    stringBuffer.append(TEXT_166);
d801 1
a801 1
    stringBuffer.append(TEXT_167);
a802 2
    stringBuffer.append(TEXT_168);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d808 2
d811 1
a811 1
    stringBuffer.append(TEXT_172);
a812 2
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d818 2
d821 1
a821 1
    stringBuffer.append(TEXT_177);
d823 1
a823 1
    stringBuffer.append(TEXT_178);
d825 1
a825 1
    stringBuffer.append(TEXT_179);
d827 1
a827 1
    stringBuffer.append(TEXT_180);
d829 1
a829 1
    stringBuffer.append(TEXT_181);
d833 1
a833 1
    stringBuffer.append(TEXT_182);
d837 1
a837 1
    stringBuffer.append(TEXT_183);
d842 1
a842 1
    stringBuffer.append(TEXT_184);
d844 1
a844 1
    stringBuffer.append(TEXT_185);
d846 3
a848 1
    stringBuffer.append(TEXT_186);
d853 1
a853 1
    stringBuffer.append(TEXT_187);
d867 1
a867 1
    stringBuffer.append(TEXT_188);
d869 1
a869 1
    stringBuffer.append(TEXT_189);
d871 1
a871 1
    stringBuffer.append(TEXT_190);
d873 1
a873 1
    stringBuffer.append(TEXT_191);
d875 1
a875 1
    stringBuffer.append(TEXT_192);
d877 1
a877 1
    stringBuffer.append(TEXT_193);
d879 1
a879 1
    stringBuffer.append(TEXT_194);
d881 1
a881 1
    stringBuffer.append(TEXT_195);
d883 1
a883 1
    stringBuffer.append(TEXT_196);
d885 1
a885 1
    stringBuffer.append(TEXT_197);
d887 1
a887 1
    stringBuffer.append(TEXT_198);
d889 1
a889 1
    stringBuffer.append(TEXT_199);
d892 1
a892 1
    stringBuffer.append(TEXT_200);
d894 1
a894 1
    stringBuffer.append(TEXT_201);
d896 1
a896 1
    stringBuffer.append(TEXT_202);
d898 1
a898 1
    stringBuffer.append(TEXT_203);
d900 1
a900 1
    stringBuffer.append(TEXT_204);
d902 1
a902 1
    stringBuffer.append(TEXT_205);
d904 1
a904 1
    stringBuffer.append(TEXT_206);
d906 1
a906 1
    stringBuffer.append(TEXT_207);
d908 1
a908 1
    stringBuffer.append(TEXT_208);
d910 1
a910 1
    stringBuffer.append(TEXT_209);
d912 1
a912 1
    stringBuffer.append(TEXT_210);
d914 1
a914 1
    stringBuffer.append(TEXT_211);
d916 1
a916 1
    stringBuffer.append(TEXT_212);
d918 1
a918 1
    stringBuffer.append(TEXT_213);
d920 1
a920 1
    stringBuffer.append(TEXT_214);
d923 1
a923 1
    stringBuffer.append(TEXT_215);
d925 1
a925 1
    stringBuffer.append(TEXT_216);
d932 1
a932 1
    stringBuffer.append(TEXT_217);
d946 1
a946 1
    stringBuffer.append(TEXT_218);
d948 1
a948 1
    stringBuffer.append(TEXT_219);
d950 1
a950 1
    stringBuffer.append(TEXT_220);
d952 1
a952 1
    stringBuffer.append(TEXT_221);
d954 1
a954 1
    stringBuffer.append(TEXT_222);
d956 1
a956 1
    stringBuffer.append(TEXT_223);
d958 1
a958 1
    stringBuffer.append(TEXT_224);
d960 1
a960 1
    stringBuffer.append(TEXT_225);
d962 1
a962 1
    stringBuffer.append(TEXT_226);
d964 1
a964 1
    stringBuffer.append(TEXT_227);
d966 1
a966 1
    stringBuffer.append(TEXT_228);
d968 1
a968 1
    stringBuffer.append(TEXT_229);
d971 1
a971 1
    stringBuffer.append(TEXT_230);
d973 1
a973 1
    stringBuffer.append(TEXT_231);
d975 1
a975 1
    stringBuffer.append(TEXT_232);
d977 1
a977 1
    stringBuffer.append(TEXT_233);
d979 1
a979 1
    stringBuffer.append(TEXT_234);
d981 1
a981 1
    stringBuffer.append(TEXT_235);
d983 2
a984 2
    stringBuffer.append(TEXT_236);
    stringBuffer.append(TEXT_237);
d986 1
a986 1
    stringBuffer.append(TEXT_238);
d989 1
a989 1
    stringBuffer.append(TEXT_239);
d991 1
a991 1
    stringBuffer.append(TEXT_240);
a992 2
    stringBuffer.append(TEXT_241);
    stringBuffer.append(TEXT_242);
a993 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a994 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d996 1
d998 3
a1003 4
    stringBuffer.append(TEXT_247);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1007 1
a1007 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1011 1
a1011 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1015 1
a1015 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1019 2
a1021 2
    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1023 2
a1025 2
    stringBuffer.append(TEXT_259);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1029 1
a1029 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1031 1
a1031 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1039 4
d1044 1
a1044 1
    stringBuffer.append(TEXT_267);
d1046 1
a1046 1
    stringBuffer.append(TEXT_268);
d1048 1
a1048 1
    stringBuffer.append(TEXT_269);
@


1.34
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d688 3
@


1.33
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d437 1
a437 1
	if (typeModelFacet.isPhantomElement()) {
d529 1
a529 1
	if (!nextModelFacet.isPhantomElement()) {
@


1.32
log
@#131543 Obsolete code should be eliminated
@
text
@d23 266
a288 268
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import java.util.List;" + NL + "import java.util.Collection;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EObject;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends CanonicalConnectionEditPolicy {" + NL + "\t";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "/**" + NL + " * @@generated" + NL + " */" + NL + "protected ";
  protected final String TEXT_11 = " getSemanticChildrenList() {" + NL + "\t";
  protected final String TEXT_12 = " result = new ";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL + "\t";
  protected final String TEXT_15 = " modelObject = ((";
  protected final String TEXT_16 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_17 = " viewObject = (";
  protected final String TEXT_18 = ") getHost().getModel();";
  protected final String TEXT_19 = "\t";
  protected final String TEXT_20 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_21 = "\tfor (";
  protected final String TEXT_22 = " values = ";
  protected final String TEXT_23 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_24 = ") values.next();";
  protected final String TEXT_25 = NL + "\tnextValue = ";
  protected final String TEXT_26 = ";";
  protected final String TEXT_27 = NL + "\tnodeVID = ";
  protected final String TEXT_28 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_29 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_30 = NL + "\tcase ";
  protected final String TEXT_31 = ".VISUAL_ID: {";
  protected final String TEXT_32 = NL + "\tif (";
  protected final String TEXT_33 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_34 = NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = "\t\tbreak;";
  protected final String TEXT_37 = "\t}";
  protected final String TEXT_38 = NL + "\t}";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_41 = " view) {" + NL + "\tif (view.getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_43 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_44 = ".EMPTY_LIST;" + NL + "\t}\t";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_46 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();";
  protected final String TEXT_49 = NL + "\t\trefreshPhantoms();";
  protected final String TEXT_50 = NL + "\t\trefreshConnections();" + NL + "\t}";
  protected final String TEXT_51 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_52 = " phantomNodes = new ";
  protected final String TEXT_53 = "();" + NL + "\t\t";
  protected final String TEXT_54 = " diagramModelObject = ((";
  protected final String TEXT_55 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_56 = " diagram = getDiagram();";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_59 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_60 = " nextResourceObject = (";
  protected final String TEXT_61 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_62 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_63 = NL + "\tcase ";
  protected final String TEXT_64 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_65 = NL;
  protected final String TEXT_66 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_67 = "\t}" + NL + "}";
  protected final String TEXT_68 = NL;
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = "for (";
  protected final String TEXT_71 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_72 = " nextView = (";
  protected final String TEXT_73 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_74 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_77 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_78 = " descriptors = new ";
  protected final String TEXT_79 = "();" + NL + "\tfor (";
  protected final String TEXT_80 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_81 = " element = (";
  protected final String TEXT_82 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_83 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_84 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_85 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_86 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_87 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_88 = " cc = new ";
  protected final String TEXT_89 = "(";
  protected final String TEXT_90 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_91 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_92 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_93 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_94 = " createCommand = new ";
  protected final String TEXT_95 = "(((";
  protected final String TEXT_96 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_97 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_98 = ".makeMutable(new ";
  protected final String TEXT_99 = "(((";
  protected final String TEXT_100 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_101 = " adapters = (";
  protected final String TEXT_102 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_103 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_104 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_105 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_106 = " myLinkDescriptors = new ";
  protected final String TEXT_107 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_108 = " myEObject2ViewMap = new ";
  protected final String TEXT_109 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_110 = " existingLinks = new ";
  protected final String TEXT_111 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_112 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_113 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_114 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_115 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_116 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_117 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_118 = " view) {" + NL + "\t\t";
  protected final String TEXT_119 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_120 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_121 = NL + "\t\tcase ";
  protected final String TEXT_122 = ".VISUAL_ID:";
  protected final String TEXT_123 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_124 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_125 = " childView = (";
  protected final String TEXT_126 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_127 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_128 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_129 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_130 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_131 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_132 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_133 = ".APPEND, false, ((";
  protected final String TEXT_134 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_135 = " ccr = new ";
  protected final String TEXT_136 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_137 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_138 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_139 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_140 = " viewAdapter = (";
  protected final String TEXT_141 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_142 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " getEditPartFor(";
  protected final String TEXT_144 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_145 = " view = (";
  protected final String TEXT_146 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_147 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_150 = " container, ";
  protected final String TEXT_151 = " diagram) {" + NL + "\t";
  protected final String TEXT_152 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_153 = " container, ";
  protected final String TEXT_154 = " containerMetaclass) {\t";
  protected final String TEXT_155 = "\t\t" + NL + "\tif (";
  protected final String TEXT_156 = ".eINSTANCE.get";
  protected final String TEXT_157 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_158 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_159 = " values = ";
  protected final String TEXT_160 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_161 = " nextValue = ((";
  protected final String TEXT_162 = ") values.next());";
  protected final String TEXT_163 = NL + "\t\t";
  protected final String TEXT_164 = " nextValue = (";
  protected final String TEXT_165 = ") ";
  protected final String TEXT_166 = ";";
  protected final String TEXT_167 = NL + "\t\tint linkVID = ";
  protected final String TEXT_168 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_169 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_170 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_171 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_172 = " dst = (";
  protected final String TEXT_173 = ") structuralFeatureResult;";
  protected final String TEXT_174 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_175 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_176 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_177 = " src = (";
  protected final String TEXT_178 = ") structuralFeatureResult;";
  protected final String TEXT_179 = NL + "\t\t\t\t";
  protected final String TEXT_180 = " src = container;";
  protected final String TEXT_181 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_182 = NL + "\t\t\t\t}";
  protected final String TEXT_183 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t}";
  protected final String TEXT_186 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_187 = " container, ";
  protected final String TEXT_188 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = "\tif (";
  protected final String TEXT_191 = ".eINSTANCE.get";
  protected final String TEXT_192 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_193 = NL + "\t\tfor (";
  protected final String TEXT_194 = " destinations = ";
  protected final String TEXT_195 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_196 = " nextDestination = (";
  protected final String TEXT_197 = ") destinations.next();";
  protected final String TEXT_198 = NL + "\t\t";
  protected final String TEXT_199 = " nextDestination = (";
  protected final String TEXT_200 = ") ";
  protected final String TEXT_201 = ";";
  protected final String TEXT_202 = NL + "\t\tif (";
  protected final String TEXT_203 = ".VISUAL_ID == ";
  protected final String TEXT_204 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_205 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_206 = ".";
  protected final String TEXT_207 = ", ";
  protected final String TEXT_208 = ".VISUAL_ID));";
  protected final String TEXT_209 = NL + "\t\t";
  protected final String TEXT_210 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_211 = ".getType(";
  protected final String TEXT_212 = ".VISUAL_ID), ";
  protected final String TEXT_213 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_214 = "Children(nextNode, nextDestination);";
  protected final String TEXT_215 = NL;
  protected final String TEXT_216 = NL + "\t\t}";
  protected final String TEXT_217 = NL + "\t\t}";
  protected final String TEXT_218 = NL + "\t}";
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "\tif (";
  protected final String TEXT_221 = ".eINSTANCE.get";
  protected final String TEXT_222 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_223 = NL + "\t\tfor (";
  protected final String TEXT_224 = " destinations = ";
  protected final String TEXT_225 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_226 = " nextDestination = (";
  protected final String TEXT_227 = ") destinations.next();";
  protected final String TEXT_228 = NL + "\t\t";
  protected final String TEXT_229 = " nextDestination = (";
  protected final String TEXT_230 = ") ";
  protected final String TEXT_231 = ";";
  protected final String TEXT_232 = NL + "\t\tif (";
  protected final String TEXT_233 = ".VISUAL_ID == ";
  protected final String TEXT_234 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_235 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_236 = ".";
  protected final String TEXT_237 = ", ";
  protected final String TEXT_238 = ".VISUAL_ID));";
  protected final String TEXT_239 = NL;
  protected final String TEXT_240 = NL + "\t\t}";
  protected final String TEXT_241 = NL + "\t\t}";
  protected final String TEXT_242 = NL + "\t}";
  protected final String TEXT_243 = NL + "}" + NL + "\t";
  protected final String TEXT_244 = NL;
  protected final String TEXT_245 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_246 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_247 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_248 = NL;
  protected final String TEXT_249 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_250 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_251 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_252 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_254 = " source, ";
  protected final String TEXT_255 = " destination, ";
  protected final String TEXT_256 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_257 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_258 = " source, ";
  protected final String TEXT_259 = " destination, ";
  protected final String TEXT_260 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_261 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_262 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_263 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_264 = " source, ";
  protected final String TEXT_265 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_266 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_267 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_268 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_270 = NL + NL + "}";
  protected final String TEXT_271 = NL;
d390 2
a391 1
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d402 1
d404 1
a404 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d406 1
a406 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
a407 4
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getCanonicalEditPolicyClassName());
    stringBuffer.append(TEXT_8);
d413 3
d417 1
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d425 1
a425 1
    if (genNodes.size() > 0) {
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a430 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_18);
d451 1
a451 1
    stringBuffer.append(TEXT_19);
d453 1
a453 1
    stringBuffer.append(TEXT_20);
d463 1
a463 1
    stringBuffer.append(TEXT_21);
d465 1
a465 1
    stringBuffer.append(TEXT_22);
d467 1
a467 1
    stringBuffer.append(TEXT_23);
d469 1
a469 1
    stringBuffer.append(TEXT_24);
d471 1
a471 1
    stringBuffer.append(TEXT_25);
d473 1
a473 1
    stringBuffer.append(TEXT_26);
d475 1
a475 1
    stringBuffer.append(TEXT_27);
d477 1
a477 1
    stringBuffer.append(TEXT_28);
d480 1
a480 1
    stringBuffer.append(TEXT_29);
d486 4
d493 1
a493 1
    		} else {
a494 1
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
d496 2
a498 1
    stringBuffer.append(TEXT_34);
a499 4
    		if (generateSwitch) {
    stringBuffer.append(TEXT_36);
    		}
    stringBuffer.append(TEXT_37);
d502 1
a502 1
    stringBuffer.append(TEXT_38);
d505 1
a505 1
    stringBuffer.append(TEXT_39);
d508 4
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d515 1
a515 1
    } else {
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d521 1
a521 1
    }
a522 4
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_46);
    if (modelElementInterface != null) {
    stringBuffer.append(TEXT_47);
d535 4
d542 1
a542 1
    }
d544 1
a544 1
    if (genDiagram.isSynchronized() && genClass2Phantom.size() > 0) {
d546 1
a546 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d548 1
a548 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a552 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(TEXT_57);
d557 1
a557 1
    stringBuffer.append(TEXT_58);
d559 1
a559 1
    stringBuffer.append(TEXT_59);
d561 1
a561 1
    stringBuffer.append(TEXT_60);
d563 1
a563 1
    stringBuffer.append(TEXT_61);
d565 1
a565 1
    stringBuffer.append(TEXT_62);
d571 3
a574 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
a575 2
    stringBuffer.append(TEXT_65);
    stringBuffer.append(TEXT_66);
d579 3
a582 1
    }
d584 1
d586 1
d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a591 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d594 1
d596 1
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d604 1
a604 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d610 2
a612 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d624 1
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d642 1
a642 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d644 1
a644 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d650 1
a650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d652 1
a652 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d654 1
a654 1
    }
d656 1
a656 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d658 1
a658 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d660 1
a660 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d662 1
a662 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d664 1
a664 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d666 1
a666 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d668 1
a668 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d672 1
a672 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d674 1
a674 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d676 1
a676 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d678 1
a678 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d680 1
a680 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a681 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_120);
d689 1
a689 1
    stringBuffer.append(TEXT_121);
d691 1
a691 1
    stringBuffer.append(TEXT_122);
d694 1
a694 1
    stringBuffer.append(TEXT_123);
d696 1
a696 1
    stringBuffer.append(TEXT_124);
d698 1
a698 1
    stringBuffer.append(TEXT_125);
d700 1
a700 1
    stringBuffer.append(TEXT_126);
d702 1
a702 1
    stringBuffer.append(TEXT_127);
d704 1
a704 1
    stringBuffer.append(TEXT_128);
d706 1
a706 1
    stringBuffer.append(TEXT_129);
d708 1
a708 1
    stringBuffer.append(TEXT_130);
d710 1
a710 1
    stringBuffer.append(TEXT_131);
d712 1
a712 1
    stringBuffer.append(TEXT_132);
d714 1
a714 1
    stringBuffer.append(TEXT_133);
d716 1
a716 1
    stringBuffer.append(TEXT_134);
d718 1
a718 1
    stringBuffer.append(TEXT_135);
d720 1
a720 1
    stringBuffer.append(TEXT_136);
d722 1
a722 1
    stringBuffer.append(TEXT_137);
d724 1
a724 1
    stringBuffer.append(TEXT_138);
d726 1
a726 1
    stringBuffer.append(TEXT_139);
d728 1
a728 1
    stringBuffer.append(TEXT_140);
d730 1
a730 1
    stringBuffer.append(TEXT_141);
d732 1
a732 1
    stringBuffer.append(TEXT_142);
d734 1
a734 1
    stringBuffer.append(TEXT_143);
d736 1
a736 1
    stringBuffer.append(TEXT_144);
d738 1
a738 1
    stringBuffer.append(TEXT_145);
d740 1
a740 1
    stringBuffer.append(TEXT_146);
d742 1
a742 1
    stringBuffer.append(TEXT_147);
d747 3
d751 1
d753 2
a755 2
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a758 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_154);
d766 4
d771 1
a771 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d773 1
a773 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d775 1
a775 1
    		if (childMetaFeature.isListType()) {
d777 1
a777 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d779 1
a779 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d781 1
a781 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d785 1
a785 1
    		} else {
d787 1
a787 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d789 1
a789 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d791 1
a791 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d793 1
a793 1
    		}
d795 1
a795 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d797 1
a797 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d799 1
a799 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d803 1
a803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d805 2
a807 2
    stringBuffer.append(TEXT_173);
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d809 1
a809 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d813 1
a813 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d817 1
a817 1
    		} else {
d819 1
a819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a822 4
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
    stringBuffer.append(TEXT_182);
    		}
    stringBuffer.append(TEXT_183);
d826 1
a826 1
    stringBuffer.append(TEXT_184);
d830 1
a830 1
    stringBuffer.append(TEXT_185);
d835 1
a835 1
    stringBuffer.append(TEXT_186);
d837 1
a837 1
    stringBuffer.append(TEXT_187);
d839 1
a839 1
    stringBuffer.append(TEXT_188);
d844 1
a844 1
    stringBuffer.append(TEXT_189);
d858 4
d863 1
a863 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d865 1
a865 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d867 1
a867 1
    	if (genFeature.isListType()) {
d869 1
a869 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d871 1
a871 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d873 1
a873 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d877 1
a877 1
    	} else {
d879 1
a879 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a880 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_201);
d883 1
a883 1
    stringBuffer.append(TEXT_202);
d885 1
a885 1
    stringBuffer.append(TEXT_203);
d887 1
a887 1
    stringBuffer.append(TEXT_204);
d889 1
a889 1
    stringBuffer.append(TEXT_205);
d891 1
a891 1
    stringBuffer.append(TEXT_206);
d893 1
a893 1
    stringBuffer.append(TEXT_207);
d895 1
a895 1
    stringBuffer.append(TEXT_208);
d897 1
a897 1
    stringBuffer.append(TEXT_209);
d899 1
a899 1
    stringBuffer.append(TEXT_210);
d901 1
a901 1
    stringBuffer.append(TEXT_211);
d903 1
a903 1
    stringBuffer.append(TEXT_212);
d905 1
a905 1
    stringBuffer.append(TEXT_213);
d907 1
a907 1
    stringBuffer.append(TEXT_214);
d909 1
a909 1
    stringBuffer.append(TEXT_215);
d911 1
a911 1
    stringBuffer.append(TEXT_216);
d914 1
a914 1
    stringBuffer.append(TEXT_217);
d916 1
a916 1
    stringBuffer.append(TEXT_218);
d923 1
a923 1
    stringBuffer.append(TEXT_219);
d937 4
d942 1
a942 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d944 1
a944 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d946 1
a946 1
    	if (genFeature.isListType()) {
d948 1
a948 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d950 1
a950 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d952 1
a952 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d956 1
a956 1
    	} else {
d958 1
a958 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d960 2
a961 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d963 1
a963 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d965 2
a967 3
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d969 1
a969 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d971 1
a971 1
    	}
d973 1
a973 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a974 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d976 1
a976 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d978 2
d981 1
a981 1
    	if (phantomsOnly) {
d983 1
a983 2
    	}
	if (genFeature.isListType()) {
a984 1
    	}
a985 1
    }
d987 1
d989 1
a990 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a991 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_247);
    stringBuffer.append(TEXT_248);
d995 4
d1002 1
a1002 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1006 1
a1006 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1010 1
a1010 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1014 1
a1014 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1016 1
a1016 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1018 1
a1018 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1020 1
a1020 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1024 1
a1024 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1026 1
a1026 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1034 1
a1034 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1036 1
a1036 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1038 1
a1038 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a1039 4
    }
    stringBuffer.append(TEXT_270);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_271);
@


1.31
log
@#141463 ecore diagram : EClass shortcut disappears when creating a new EClass
@
text
@a391 3
// TODO: move this attribute to the genmodel
final boolean isSynchronizedDiagram = true;

d414 1
a414 1
if (modelElementInterface != null && isSynchronizedDiagram) {
d540 1
a540 1
    if (isSynchronizedDiagram && genClass2Phantom.size() > 0) {
d544 1
a544 1
    if (isSynchronizedDiagram && genClass2Phantom.size() > 0) {
@


1.30
log
@#135019 Canonical Edit Policy: Links that have changed visual IDs should not duplicate on diagram reopening
@
text
@d60 1
a60 1
  protected final String TEXT_41 = " view) {" + NL + "\treturn view.isSetElement() && view.getElement() != null;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
@


1.29
log
@#138869 Unchecked cast in generated storeTypeModelFacetLinks
@
text
@d60 231
a290 233
  protected final String TEXT_41 = " view) {" + NL + "\t";
  protected final String TEXT_42 = " domainModelElement = view.getElement();" + NL + "\treturn domainModelElement != null && domainModelElement != ((";
  protected final String TEXT_43 = ") getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected String getDefaultFactoryHint() {" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_45 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_46 = ".EMPTY_LIST;" + NL + "\t}\t";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_48 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();";
  protected final String TEXT_51 = NL + "\t\trefreshPhantoms();";
  protected final String TEXT_52 = NL + "\t\trefreshConnections();" + NL + "\t}";
  protected final String TEXT_53 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_54 = " phantomNodes = new ";
  protected final String TEXT_55 = "();" + NL + "\t\t";
  protected final String TEXT_56 = " diagramModelObject = ((";
  protected final String TEXT_57 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_58 = " diagram = getDiagram();";
  protected final String TEXT_59 = NL;
  protected final String TEXT_60 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_61 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_62 = " nextResourceObject = (";
  protected final String TEXT_63 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_64 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_65 = NL + "\tcase ";
  protected final String TEXT_66 = ".VISUAL_ID: {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_69 = "\t}" + NL + "}";
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = "for (";
  protected final String TEXT_73 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_74 = " nextView = (";
  protected final String TEXT_75 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_76 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_79 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_80 = " descriptors = new ";
  protected final String TEXT_81 = "();" + NL + "\tfor (";
  protected final String TEXT_82 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_83 = " element = (";
  protected final String TEXT_84 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_85 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_86 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_87 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_88 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_89 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_90 = " cc = new ";
  protected final String TEXT_91 = "(";
  protected final String TEXT_92 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_93 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_94 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_95 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_96 = " createCommand = new ";
  protected final String TEXT_97 = "(((";
  protected final String TEXT_98 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_99 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_100 = ".makeMutable(new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_103 = " adapters = (";
  protected final String TEXT_104 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_105 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_106 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_107 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_108 = " myLinkDescriptors = new ";
  protected final String TEXT_109 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_110 = " myEObject2ViewMap = new ";
  protected final String TEXT_111 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_112 = " existingLinks = new ";
  protected final String TEXT_113 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_114 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_115 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_116 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_117 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = ";
  protected final String TEXT_118 = ".getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_119 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_120 = " view) {" + NL + "\t\t";
  protected final String TEXT_121 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = ";
  protected final String TEXT_122 = ".getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_123 = NL + "\t\tcase ";
  protected final String TEXT_124 = ".VISUAL_ID:";
  protected final String TEXT_125 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_126 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_127 = " childView = (";
  protected final String TEXT_128 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_129 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_130 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_131 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_132 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_133 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_134 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), null, ";
  protected final String TEXT_135 = ".APPEND, false, ((";
  protected final String TEXT_136 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_137 = " ccr = new ";
  protected final String TEXT_138 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_139 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_140 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_141 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_142 = " viewAdapter = (";
  protected final String TEXT_143 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_144 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_145 = " getEditPartFor(";
  protected final String TEXT_146 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_147 = " view = (";
  protected final String TEXT_148 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_149 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_152 = " container, ";
  protected final String TEXT_153 = " diagram) {" + NL + "\t";
  protected final String TEXT_154 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_155 = " container, ";
  protected final String TEXT_156 = " containerMetaclass) {\t";
  protected final String TEXT_157 = "\t\t" + NL + "\tif (";
  protected final String TEXT_158 = ".eINSTANCE.get";
  protected final String TEXT_159 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_160 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_161 = " values = ";
  protected final String TEXT_162 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_163 = " nextValue = ((";
  protected final String TEXT_164 = ") values.next());";
  protected final String TEXT_165 = NL + "\t\t";
  protected final String TEXT_166 = " nextValue = (";
  protected final String TEXT_167 = ") ";
  protected final String TEXT_168 = ";";
  protected final String TEXT_169 = NL + "\t\tint linkVID = ";
  protected final String TEXT_170 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_171 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_172 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_173 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_174 = " dst = (";
  protected final String TEXT_175 = ") structuralFeatureResult;";
  protected final String TEXT_176 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_177 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_178 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_179 = " src = (";
  protected final String TEXT_180 = ") structuralFeatureResult;";
  protected final String TEXT_181 = NL + "\t\t\t\t";
  protected final String TEXT_182 = " src = container;";
  protected final String TEXT_183 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_184 = NL + "\t\t\t\t}";
  protected final String TEXT_185 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_186 = NL + "\t\t}";
  protected final String TEXT_187 = NL + "\t}";
  protected final String TEXT_188 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_189 = " container, ";
  protected final String TEXT_190 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_191 = NL;
  protected final String TEXT_192 = "\tif (";
  protected final String TEXT_193 = ".eINSTANCE.get";
  protected final String TEXT_194 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_195 = NL + "\t\tfor (";
  protected final String TEXT_196 = " destinations = ";
  protected final String TEXT_197 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_198 = " nextDestination = (";
  protected final String TEXT_199 = ") destinations.next();";
  protected final String TEXT_200 = NL + "\t\t";
  protected final String TEXT_201 = " nextDestination = (";
  protected final String TEXT_202 = ") ";
  protected final String TEXT_203 = ";";
  protected final String TEXT_204 = NL + "\t\tif (";
  protected final String TEXT_205 = ".VISUAL_ID == ";
  protected final String TEXT_206 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_207 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_208 = ".";
  protected final String TEXT_209 = ", ";
  protected final String TEXT_210 = ".VISUAL_ID));";
  protected final String TEXT_211 = NL + "\t\t";
  protected final String TEXT_212 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_213 = ".getType(";
  protected final String TEXT_214 = ".VISUAL_ID), ";
  protected final String TEXT_215 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_216 = "Children(nextNode, nextDestination);";
  protected final String TEXT_217 = NL;
  protected final String TEXT_218 = NL + "\t\t}";
  protected final String TEXT_219 = NL + "\t\t}";
  protected final String TEXT_220 = NL + "\t}";
  protected final String TEXT_221 = NL;
  protected final String TEXT_222 = "\tif (";
  protected final String TEXT_223 = ".eINSTANCE.get";
  protected final String TEXT_224 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_225 = NL + "\t\tfor (";
  protected final String TEXT_226 = " destinations = ";
  protected final String TEXT_227 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_228 = " nextDestination = (";
  protected final String TEXT_229 = ") destinations.next();";
  protected final String TEXT_230 = NL + "\t\t";
  protected final String TEXT_231 = " nextDestination = (";
  protected final String TEXT_232 = ") ";
  protected final String TEXT_233 = ";";
  protected final String TEXT_234 = NL + "\t\tif (";
  protected final String TEXT_235 = ".VISUAL_ID == ";
  protected final String TEXT_236 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_237 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_238 = ".";
  protected final String TEXT_239 = ", ";
  protected final String TEXT_240 = ".VISUAL_ID));";
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = NL + "\t\t}";
  protected final String TEXT_243 = NL + "\t\t}";
  protected final String TEXT_244 = NL + "\t}";
  protected final String TEXT_245 = NL + "}" + NL + "\t";
  protected final String TEXT_246 = NL;
  protected final String TEXT_247 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_248 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_249 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_250 = NL;
  protected final String TEXT_251 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_252 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_254 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_255 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_256 = " source, ";
  protected final String TEXT_257 = " destination, ";
  protected final String TEXT_258 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_259 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_260 = " source, ";
  protected final String TEXT_261 = " destination, ";
  protected final String TEXT_262 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_263 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_264 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_265 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_266 = " source, ";
  protected final String TEXT_267 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_268 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_270 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_271 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_272 = NL + NL + "}";
  protected final String TEXT_273 = NL;
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d522 1
a522 1
    } else {
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d528 1
a528 1
    }
a529 4
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_48);
    if (modelElementInterface != null) {
    stringBuffer.append(TEXT_49);
d542 4
d549 1
a549 1
    }
d551 1
a551 1
    if (isSynchronizedDiagram && genClass2Phantom.size() > 0) {
d553 1
a553 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d555 1
a555 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d557 1
a557 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a558 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a559 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(TEXT_59);
d564 1
a564 1
    stringBuffer.append(TEXT_60);
d566 1
a566 1
    stringBuffer.append(TEXT_61);
d568 1
a568 1
    stringBuffer.append(TEXT_62);
d570 1
a570 1
    stringBuffer.append(TEXT_63);
d572 1
a572 1
    stringBuffer.append(TEXT_64);
d578 3
a581 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
a582 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(TEXT_68);
d586 3
a589 1
    }
d591 1
d593 1
d595 1
a595 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d597 1
a597 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a598 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a599 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d601 1
d603 1
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d607 1
a607 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d609 1
a609 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d611 1
a611 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d613 1
a613 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d615 1
a615 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d617 2
a619 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d621 1
a621 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d623 1
a623 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d625 1
a625 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d627 1
a627 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d629 1
a629 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d631 1
a631 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d633 1
a633 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d637 1
a637 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d639 1
a639 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d641 1
a641 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d643 1
a643 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d645 1
a645 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d651 1
a651 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d661 1
a661 1
    }
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d665 1
a665 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d667 1
a667 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d681 1
a681 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d683 1
a683 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d687 1
a687 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a688 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_122);
d696 1
a696 1
    stringBuffer.append(TEXT_123);
d698 1
a698 1
    stringBuffer.append(TEXT_124);
d701 1
a701 1
    stringBuffer.append(TEXT_125);
d703 1
a703 1
    stringBuffer.append(TEXT_126);
d705 1
a705 1
    stringBuffer.append(TEXT_127);
d707 1
a707 1
    stringBuffer.append(TEXT_128);
d709 1
a709 1
    stringBuffer.append(TEXT_129);
d711 1
a711 1
    stringBuffer.append(TEXT_130);
d713 1
a713 1
    stringBuffer.append(TEXT_131);
d715 1
a715 1
    stringBuffer.append(TEXT_132);
d717 1
a717 1
    stringBuffer.append(TEXT_133);
d719 1
a719 1
    stringBuffer.append(TEXT_134);
d721 1
a721 1
    stringBuffer.append(TEXT_135);
d723 1
a723 1
    stringBuffer.append(TEXT_136);
d725 1
a725 1
    stringBuffer.append(TEXT_137);
d727 1
a727 1
    stringBuffer.append(TEXT_138);
d729 1
a729 1
    stringBuffer.append(TEXT_139);
d731 1
a731 1
    stringBuffer.append(TEXT_140);
d733 1
a733 1
    stringBuffer.append(TEXT_141);
d735 1
a735 1
    stringBuffer.append(TEXT_142);
d737 1
a737 1
    stringBuffer.append(TEXT_143);
d739 1
a739 1
    stringBuffer.append(TEXT_144);
d741 1
a741 1
    stringBuffer.append(TEXT_145);
d743 1
a743 1
    stringBuffer.append(TEXT_146);
d745 1
a745 1
    stringBuffer.append(TEXT_147);
d747 1
a747 1
    stringBuffer.append(TEXT_148);
d749 1
a749 1
    stringBuffer.append(TEXT_149);
d754 3
d758 1
d760 2
a762 2
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a765 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_156);
d773 4
d778 1
a778 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d780 1
a780 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d782 1
a782 1
    		if (childMetaFeature.isListType()) {
d784 1
a784 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d786 1
a786 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d788 1
a788 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d792 1
a792 1
    		} else {
d794 1
a794 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d796 1
a796 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d798 1
a798 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d800 1
a800 1
    		}
d802 1
a802 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d804 1
a804 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d806 1
a806 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d810 1
a810 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d812 2
a814 2
    stringBuffer.append(TEXT_175);
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d816 1
a816 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d820 1
a820 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d824 1
a824 1
    		} else {
d826 1
a826 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a829 4
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
    stringBuffer.append(TEXT_184);
    		}
    stringBuffer.append(TEXT_185);
d833 1
a833 1
    stringBuffer.append(TEXT_186);
d837 1
a837 1
    stringBuffer.append(TEXT_187);
d842 1
a842 1
    stringBuffer.append(TEXT_188);
d844 1
a844 1
    stringBuffer.append(TEXT_189);
d846 1
a846 1
    stringBuffer.append(TEXT_190);
d851 1
a851 1
    stringBuffer.append(TEXT_191);
d865 4
d870 1
a870 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d872 1
a872 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d874 1
a874 1
    	if (genFeature.isListType()) {
d876 1
a876 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d878 1
a878 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d880 1
a880 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d884 1
a884 1
    	} else {
d886 1
a886 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a887 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_202);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_203);
d890 1
a890 1
    stringBuffer.append(TEXT_204);
d892 1
a892 1
    stringBuffer.append(TEXT_205);
d894 1
a894 1
    stringBuffer.append(TEXT_206);
d896 1
a896 1
    stringBuffer.append(TEXT_207);
d898 1
a898 1
    stringBuffer.append(TEXT_208);
d900 1
a900 1
    stringBuffer.append(TEXT_209);
d902 1
a902 1
    stringBuffer.append(TEXT_210);
d904 1
a904 1
    stringBuffer.append(TEXT_211);
d906 1
a906 1
    stringBuffer.append(TEXT_212);
d908 1
a908 1
    stringBuffer.append(TEXT_213);
d910 1
a910 1
    stringBuffer.append(TEXT_214);
d912 1
a912 1
    stringBuffer.append(TEXT_215);
d914 1
a914 1
    stringBuffer.append(TEXT_216);
d916 1
a916 1
    stringBuffer.append(TEXT_217);
d918 1
a918 1
    stringBuffer.append(TEXT_218);
d921 1
a921 1
    stringBuffer.append(TEXT_219);
d923 1
a923 1
    stringBuffer.append(TEXT_220);
d930 1
a930 1
    stringBuffer.append(TEXT_221);
d944 4
d949 1
a949 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d951 1
a951 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d953 1
a953 1
    	if (genFeature.isListType()) {
d955 1
a955 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d957 1
a957 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d959 1
a959 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d963 1
a963 1
    	} else {
d965 1
a965 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d967 2
a968 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d970 1
a970 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d972 2
a974 3
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d976 1
a976 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d978 1
a978 1
    	}
d980 1
a980 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a981 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d983 1
a983 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d985 2
d988 1
a988 1
    	if (phantomsOnly) {
d990 1
a990 2
    	}
	if (genFeature.isListType()) {
a991 1
    	}
a992 1
    }
d994 1
d996 1
a997 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a998 3
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_249);
    stringBuffer.append(TEXT_250);
d1002 4
d1009 1
a1009 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1013 1
a1013 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1017 1
a1017 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1021 1
a1021 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1023 1
a1023 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1025 1
a1025 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1027 1
a1027 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1031 1
a1031 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1033 1
a1033 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1041 1
a1041 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1043 1
a1043 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1045 1
a1045 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a1046 4
    }
    stringBuffer.append(TEXT_272);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_273);
@


1.28
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d188 17
a204 17
  protected final String TEXT_169 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_170 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_171 = ") {" + NL + "\t\t\t";
  protected final String TEXT_172 = " dst = (";
  protected final String TEXT_173 = ") structuralFeatureResult;";
  protected final String TEXT_174 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_175 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_176 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_177 = " src = (";
  protected final String TEXT_178 = ") structuralFeatureResult;";
  protected final String TEXT_179 = NL + "\t\t\t";
  protected final String TEXT_180 = " src = container;";
  protected final String TEXT_181 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_182 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_183 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_184 = NL + "\t\t\t}";
  protected final String TEXT_185 = NL + "\t\t}";
d804 1
a804 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d806 1
a806 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d808 1
a808 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d812 1
a812 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d814 1
a814 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d816 1
a816 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d818 1
a818 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d822 1
a822 1
    		} else {
d826 1
a826 1
    		}
d828 1
a828 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d830 1
a830 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
@


1.27
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d47 1
a47 1
  protected final String TEXT_28 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
d83 1
a83 1
  protected final String TEXT_64 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
d201 1
a201 1
  protected final String TEXT_182 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
d225 1
a225 1
  protected final String TEXT_206 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
d255 1
a255 1
  protected final String TEXT_236 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
@


1.26
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d50 1
a50 1
  protected final String TEXT_31 = ": {";
d52 1
a52 1
  protected final String TEXT_33 = " == nodeVID) {";
d85 1
a85 1
  protected final String TEXT_66 = ": {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);";
d143 1
a143 1
  protected final String TEXT_124 = ":";
d202 1
a202 1
  protected final String TEXT_183 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
d224 1
a224 1
  protected final String TEXT_205 = " == ";
d229 1
a229 1
  protected final String TEXT_210 = "));";
d232 5
a236 5
  protected final String TEXT_213 = ".VISUAL_ID, ";
  protected final String TEXT_214 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_215 = "Children(nextNode, nextDestination);";
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = NL + "\t\t}";
d238 23
a260 23
  protected final String TEXT_219 = NL + "\t}";
  protected final String TEXT_220 = NL;
  protected final String TEXT_221 = "\tif (";
  protected final String TEXT_222 = ".eINSTANCE.get";
  protected final String TEXT_223 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_224 = NL + "\t\tfor (";
  protected final String TEXT_225 = " destinations = ";
  protected final String TEXT_226 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_227 = " nextDestination = (";
  protected final String TEXT_228 = ") destinations.next();";
  protected final String TEXT_229 = NL + "\t\t";
  protected final String TEXT_230 = " nextDestination = (";
  protected final String TEXT_231 = ") ";
  protected final String TEXT_232 = ";";
  protected final String TEXT_233 = NL + "\t\tif (";
  protected final String TEXT_234 = " == ";
  protected final String TEXT_235 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_236 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_237 = ".";
  protected final String TEXT_238 = ", ";
  protected final String TEXT_239 = "));";
  protected final String TEXT_240 = NL;
  protected final String TEXT_241 = NL + "\t\t}";
d262 31
a292 30
  protected final String TEXT_243 = NL + "\t}";
  protected final String TEXT_244 = NL + "}" + NL + "\t";
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_247 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_248 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_251 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_252 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_254 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_255 = " source, ";
  protected final String TEXT_256 = " destination, ";
  protected final String TEXT_257 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_258 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_259 = " source, ";
  protected final String TEXT_260 = " destination, ";
  protected final String TEXT_261 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_262 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_263 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_264 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_265 = " source, ";
  protected final String TEXT_266 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_267 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_268 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_270 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_271 = NL + NL + "}";
  protected final String TEXT_272 = NL;
d496 1
a496 1
    stringBuffer.append(nextNode.getVisualID());
d500 1
a500 1
    stringBuffer.append(nextNode.getVisualID());
d585 1
a585 1
    stringBuffer.append(phantomNode.getVisualID());
d703 1
a703 1
    stringBuffer.append(nextContainer.getVisualID());
d830 1
a830 1
    stringBuffer.append(nextLink.getVisualID());
d897 1
a897 1
    stringBuffer.append(phantomNode.getVisualID());
d907 1
a907 1
    stringBuffer.append(nextLink.getVisualID());
d913 2
d916 1
a916 1
    stringBuffer.append(TEXT_213);
d918 1
a918 1
    stringBuffer.append(TEXT_214);
d920 1
a920 1
    stringBuffer.append(TEXT_215);
d922 1
a922 1
    stringBuffer.append(TEXT_216);
d924 1
a924 1
    stringBuffer.append(TEXT_217);
d927 1
a927 1
    stringBuffer.append(TEXT_218);
d929 1
a929 1
    stringBuffer.append(TEXT_219);
d936 1
a936 1
    stringBuffer.append(TEXT_220);
d950 1
a950 1
    stringBuffer.append(TEXT_221);
d952 1
a952 1
    stringBuffer.append(TEXT_222);
d954 1
a954 1
    stringBuffer.append(TEXT_223);
d956 1
a956 1
    stringBuffer.append(TEXT_224);
d958 1
a958 1
    stringBuffer.append(TEXT_225);
a959 2
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d963 2
a965 2
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d969 2
d972 1
a972 1
    stringBuffer.append(TEXT_232);
a974 2
    stringBuffer.append(TEXT_233);
    stringBuffer.append(phantomNode.getVisualID());
d976 2
d979 1
a979 1
    stringBuffer.append(TEXT_235);
d981 1
a981 1
    stringBuffer.append(TEXT_236);
d983 1
a983 1
    stringBuffer.append(TEXT_237);
a984 2
    stringBuffer.append(TEXT_238);
    stringBuffer.append(nextLink.getVisualID());
d986 1
d988 1
d990 1
a990 1
    stringBuffer.append(TEXT_241);
d993 1
a993 1
    stringBuffer.append(TEXT_242);
d995 1
a995 1
    stringBuffer.append(TEXT_243);
a996 1
    stringBuffer.append(TEXT_244);
d999 1
d1001 1
a1001 1
    stringBuffer.append(TEXT_247);
a1002 1
    stringBuffer.append(TEXT_248);
d1004 1
a1007 2
    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1013 2
a1015 2
    stringBuffer.append(TEXT_254);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1021 2
a1023 2
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1027 1
a1027 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1031 2
d1034 1
a1034 1
    stringBuffer.append(TEXT_263);
a1035 2
    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1045 2
d1048 1
a1048 1
    stringBuffer.append(TEXT_270);
d1050 1
a1050 1
    stringBuffer.append(TEXT_271);
d1052 1
a1052 1
    stringBuffer.append(TEXT_272);
@


1.25
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d62 1
a62 1
  protected final String TEXT_43 = ") getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "}";
@


1.24
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d136 156
a291 158
  protected final String TEXT_117 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_118 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_119 = " view) {" + NL + "\t\t";
  protected final String TEXT_120 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_121 = NL + "\t\tcase ";
  protected final String TEXT_122 = ":";
  protected final String TEXT_123 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_124 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_125 = " childView = (";
  protected final String TEXT_126 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_127 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_128 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_129 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_130 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tString factoryHint = \"\";" + NL + "\t\t\t";
  protected final String TEXT_131 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_132 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), getFactoryHint(nextLinkDescriptor.getSemanticAdapter(), factoryHint), ";
  protected final String TEXT_133 = ".APPEND, false, ((";
  protected final String TEXT_134 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_135 = " ccr = new ";
  protected final String TEXT_136 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_137 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_138 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_139 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_140 = " viewAdapter = (";
  protected final String TEXT_141 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_142 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " getEditPartFor(";
  protected final String TEXT_144 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_145 = " view = (";
  protected final String TEXT_146 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_147 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_150 = " container, ";
  protected final String TEXT_151 = " diagram) {" + NL + "\t";
  protected final String TEXT_152 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_153 = " container, ";
  protected final String TEXT_154 = " containerMetaclass) {\t";
  protected final String TEXT_155 = "\t\t" + NL + "\tif (";
  protected final String TEXT_156 = ".eINSTANCE.get";
  protected final String TEXT_157 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_158 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_159 = " values = ";
  protected final String TEXT_160 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_161 = " nextValue = ((";
  protected final String TEXT_162 = ") values.next());";
  protected final String TEXT_163 = NL + "\t\t";
  protected final String TEXT_164 = " nextValue = (";
  protected final String TEXT_165 = ") ";
  protected final String TEXT_166 = ";";
  protected final String TEXT_167 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_168 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_169 = ") {" + NL + "\t\t\t";
  protected final String TEXT_170 = " dst = (";
  protected final String TEXT_171 = ") structuralFeatureResult;";
  protected final String TEXT_172 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_173 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_174 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_175 = " src = (";
  protected final String TEXT_176 = ") structuralFeatureResult;";
  protected final String TEXT_177 = NL + "\t\t\t";
  protected final String TEXT_178 = " src = container;";
  protected final String TEXT_179 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_180 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_181 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_182 = NL + "\t\t\t}";
  protected final String TEXT_183 = NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t}";
  protected final String TEXT_186 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_187 = " container, ";
  protected final String TEXT_188 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_189 = NL;
  protected final String TEXT_190 = "\tif (";
  protected final String TEXT_191 = ".eINSTANCE.get";
  protected final String TEXT_192 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_193 = NL + "\t\tfor (";
  protected final String TEXT_194 = " destinations = ";
  protected final String TEXT_195 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_196 = " nextDestination = (";
  protected final String TEXT_197 = ") destinations.next();";
  protected final String TEXT_198 = NL + "\t\t";
  protected final String TEXT_199 = " nextDestination = (";
  protected final String TEXT_200 = ") ";
  protected final String TEXT_201 = ";";
  protected final String TEXT_202 = NL + "\t\tif (";
  protected final String TEXT_203 = " == ";
  protected final String TEXT_204 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_205 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_206 = ".";
  protected final String TEXT_207 = ", ";
  protected final String TEXT_208 = "));";
  protected final String TEXT_209 = NL + "\t\t";
  protected final String TEXT_210 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_211 = ".VISUAL_ID, ";
  protected final String TEXT_212 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_213 = "Children(nextNode, nextDestination);";
  protected final String TEXT_214 = NL;
  protected final String TEXT_215 = NL + "\t\t}";
  protected final String TEXT_216 = NL + "\t\t}";
  protected final String TEXT_217 = NL + "\t}";
  protected final String TEXT_218 = NL;
  protected final String TEXT_219 = "\tif (";
  protected final String TEXT_220 = ".eINSTANCE.get";
  protected final String TEXT_221 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_222 = NL + "\t\tfor (";
  protected final String TEXT_223 = " destinations = ";
  protected final String TEXT_224 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_225 = " nextDestination = (";
  protected final String TEXT_226 = ") destinations.next();";
  protected final String TEXT_227 = NL + "\t\t";
  protected final String TEXT_228 = " nextDestination = (";
  protected final String TEXT_229 = ") ";
  protected final String TEXT_230 = ";";
  protected final String TEXT_231 = NL + "\t\tif (";
  protected final String TEXT_232 = " == ";
  protected final String TEXT_233 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_234 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_235 = ".";
  protected final String TEXT_236 = ", ";
  protected final String TEXT_237 = "));";
  protected final String TEXT_238 = NL;
  protected final String TEXT_239 = NL + "\t\t}";
  protected final String TEXT_240 = NL + "\t\t}";
  protected final String TEXT_241 = NL + "\t}";
  protected final String TEXT_242 = NL + "}" + NL + "\t";
  protected final String TEXT_243 = NL;
  protected final String TEXT_244 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_245 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_246 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_247 = NL;
  protected final String TEXT_248 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_249 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_250 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_251 = NL;
  protected final String TEXT_252 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_254 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_255 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_256 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_257 = " source, ";
  protected final String TEXT_258 = " destination, ";
  protected final String TEXT_259 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_260 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_261 = " source, ";
  protected final String TEXT_262 = " destination, ";
  protected final String TEXT_263 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_264 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_265 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_266 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_267 = " source, ";
  protected final String TEXT_268 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_270 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_271 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_272 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_273 = NL + NL + "}";
  protected final String TEXT_274 = NL;
d684 2
d687 1
a687 1
    stringBuffer.append(TEXT_118);
d689 1
a689 1
    stringBuffer.append(TEXT_119);
d691 3
a693 1
    stringBuffer.append(TEXT_120);
d701 1
a701 1
    stringBuffer.append(TEXT_121);
d703 1
a703 1
    stringBuffer.append(TEXT_122);
d706 1
a706 1
    stringBuffer.append(TEXT_123);
d708 1
a708 1
    stringBuffer.append(TEXT_124);
d710 1
a710 1
    stringBuffer.append(TEXT_125);
d712 1
a712 1
    stringBuffer.append(TEXT_126);
d714 1
a714 1
    stringBuffer.append(TEXT_127);
d716 1
a716 1
    stringBuffer.append(TEXT_128);
d718 1
a718 1
    stringBuffer.append(TEXT_129);
d720 1
a720 1
    stringBuffer.append(TEXT_130);
d722 1
a722 1
    stringBuffer.append(TEXT_131);
d724 1
a724 1
    stringBuffer.append(TEXT_132);
d726 1
a726 1
    stringBuffer.append(TEXT_133);
d728 1
a728 1
    stringBuffer.append(TEXT_134);
d730 1
a730 1
    stringBuffer.append(TEXT_135);
d732 1
a732 1
    stringBuffer.append(TEXT_136);
d734 1
a734 1
    stringBuffer.append(TEXT_137);
d736 1
a736 1
    stringBuffer.append(TEXT_138);
d738 1
a738 1
    stringBuffer.append(TEXT_139);
d740 1
a740 1
    stringBuffer.append(TEXT_140);
d742 1
a742 1
    stringBuffer.append(TEXT_141);
d744 1
a744 1
    stringBuffer.append(TEXT_142);
d746 1
a746 1
    stringBuffer.append(TEXT_143);
d748 1
a748 1
    stringBuffer.append(TEXT_144);
d750 1
a750 1
    stringBuffer.append(TEXT_145);
d752 1
a752 1
    stringBuffer.append(TEXT_146);
d754 1
a754 1
    stringBuffer.append(TEXT_147);
a757 1
String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
a758 3
    stringBuffer.append(TEXT_148);
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a759 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d761 1
a761 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d763 1
a763 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d767 4
d778 1
a778 1
    stringBuffer.append(TEXT_155);
d780 1
a780 1
    stringBuffer.append(TEXT_156);
d782 1
a782 1
    stringBuffer.append(TEXT_157);
d784 1
a784 1
    stringBuffer.append(TEXT_158);
d786 1
a786 1
    stringBuffer.append(TEXT_159);
d788 1
a788 3
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_161);
a789 2
    stringBuffer.append(TEXT_162);
    		} else {
d793 2
a795 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d797 1
a797 1
    		}
d799 1
a799 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d801 1
a801 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d803 1
a803 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d807 1
a807 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d809 1
a809 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d811 1
a811 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d813 1
a813 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d817 1
a817 1
    		} else {
d821 4
d826 1
a826 1
    stringBuffer.append(TEXT_179);
d828 1
a828 1
    stringBuffer.append(TEXT_180);
d830 1
a830 1
    stringBuffer.append(TEXT_181);
d832 1
a832 1
    stringBuffer.append(TEXT_182);
d834 1
a834 1
    stringBuffer.append(TEXT_183);
d838 1
a838 1
    stringBuffer.append(TEXT_184);
d842 1
a842 1
    stringBuffer.append(TEXT_185);
d847 1
a847 1
    stringBuffer.append(TEXT_186);
d849 1
a849 1
    stringBuffer.append(TEXT_187);
d851 1
a851 1
    stringBuffer.append(TEXT_188);
d856 1
a856 1
    stringBuffer.append(TEXT_189);
d870 1
a870 1
    stringBuffer.append(TEXT_190);
d872 1
a872 1
    stringBuffer.append(TEXT_191);
d874 1
a874 1
    stringBuffer.append(TEXT_192);
d876 1
a876 1
    stringBuffer.append(TEXT_193);
d878 1
a878 1
    stringBuffer.append(TEXT_194);
d880 1
a880 1
    stringBuffer.append(TEXT_195);
d882 1
a882 1
    stringBuffer.append(TEXT_196);
d884 1
a884 1
    stringBuffer.append(TEXT_197);
d886 1
a886 1
    stringBuffer.append(TEXT_198);
d888 1
a888 1
    stringBuffer.append(TEXT_199);
d890 1
a890 1
    stringBuffer.append(TEXT_200);
d892 1
a892 1
    stringBuffer.append(TEXT_201);
d895 1
a895 1
    stringBuffer.append(TEXT_202);
d897 1
a897 1
    stringBuffer.append(TEXT_203);
d899 1
a899 1
    stringBuffer.append(TEXT_204);
d901 1
a901 1
    stringBuffer.append(TEXT_205);
d903 1
a903 1
    stringBuffer.append(TEXT_206);
d905 1
a905 1
    stringBuffer.append(TEXT_207);
d907 1
a907 1
    stringBuffer.append(TEXT_208);
d909 1
a909 1
    stringBuffer.append(TEXT_209);
d911 1
a911 1
    stringBuffer.append(TEXT_210);
d913 3
a915 3
    stringBuffer.append(TEXT_211);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_212);
d917 1
a917 1
    stringBuffer.append(TEXT_213);
d919 1
a919 1
    stringBuffer.append(TEXT_214);
d921 1
a921 1
    stringBuffer.append(TEXT_215);
d924 1
a924 1
    stringBuffer.append(TEXT_216);
d926 1
a926 1
    stringBuffer.append(TEXT_217);
d933 1
a933 1
    stringBuffer.append(TEXT_218);
d947 1
a947 1
    stringBuffer.append(TEXT_219);
d949 1
a949 1
    stringBuffer.append(TEXT_220);
d951 1
a951 1
    stringBuffer.append(TEXT_221);
d953 1
a953 1
    stringBuffer.append(TEXT_222);
d955 1
a955 1
    stringBuffer.append(TEXT_223);
d957 1
a957 1
    stringBuffer.append(TEXT_224);
d959 1
a959 1
    stringBuffer.append(TEXT_225);
d961 1
a961 1
    stringBuffer.append(TEXT_226);
d963 1
a963 1
    stringBuffer.append(TEXT_227);
d965 1
a965 1
    stringBuffer.append(TEXT_228);
d967 1
a967 1
    stringBuffer.append(TEXT_229);
d969 1
a969 1
    stringBuffer.append(TEXT_230);
d972 1
a972 1
    stringBuffer.append(TEXT_231);
d974 1
a974 1
    stringBuffer.append(TEXT_232);
d976 1
a976 1
    stringBuffer.append(TEXT_233);
d978 1
a978 1
    stringBuffer.append(TEXT_234);
d980 1
a980 1
    stringBuffer.append(TEXT_235);
d982 1
a982 1
    stringBuffer.append(TEXT_236);
d984 2
a985 2
    stringBuffer.append(TEXT_237);
    stringBuffer.append(TEXT_238);
d987 1
a987 1
    stringBuffer.append(TEXT_239);
d990 1
a990 1
    stringBuffer.append(TEXT_240);
d992 1
a992 1
    stringBuffer.append(TEXT_241);
a993 2
    stringBuffer.append(TEXT_242);
    stringBuffer.append(TEXT_243);
a994 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a995 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d997 1
d999 1
a1000 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a1001 3
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_250);
    stringBuffer.append(TEXT_251);
d1005 4
d1012 1
a1012 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1016 1
a1016 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1020 1
a1020 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1024 1
a1024 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1026 1
a1026 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1028 1
a1028 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1030 1
a1030 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1034 1
a1034 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1036 1
a1036 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1044 1
a1044 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1046 1
a1046 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1048 1
a1048 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a1049 4
    }
    stringBuffer.append(TEXT_273);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_274);
@


1.23
log
@using M6 to generate code.
@
text
@d47 1
a47 1
  protected final String TEXT_28 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");";
d83 3
a85 3
  protected final String TEXT_64 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_65 = NL + "\t\tcase ";
  protected final String TEXT_66 = ": {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);" + NL + "\t\t\tbreak;" + NL + "\t\t}";
d87 2
a88 2
  protected final String TEXT_68 = "\t}" + NL + "}";
  protected final String TEXT_69 = NL;
d90 112
a201 112
  protected final String TEXT_71 = "for (";
  protected final String TEXT_72 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_73 = " nextView = (";
  protected final String TEXT_74 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_75 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_78 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_79 = " descriptors = new ";
  protected final String TEXT_80 = "();" + NL + "\tfor (";
  protected final String TEXT_81 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_82 = " element = (";
  protected final String TEXT_83 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_84 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_85 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_86 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_87 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_88 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_89 = " cc = new ";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_92 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_93 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_94 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_95 = " createCommand = new ";
  protected final String TEXT_96 = "(((";
  protected final String TEXT_97 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_98 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_99 = ".makeMutable(new ";
  protected final String TEXT_100 = "(((";
  protected final String TEXT_101 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_102 = " adapters = (";
  protected final String TEXT_103 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_104 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_105 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_106 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_107 = " myLinkDescriptors = new ";
  protected final String TEXT_108 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_109 = " myEObject2ViewMap = new ";
  protected final String TEXT_110 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_111 = " existingLinks = new ";
  protected final String TEXT_112 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_113 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_114 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_115 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_116 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_117 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_118 = " view) {" + NL + "\t\t";
  protected final String TEXT_119 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_120 = NL + "\t\tcase ";
  protected final String TEXT_121 = ":";
  protected final String TEXT_122 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_123 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_124 = " childView = (";
  protected final String TEXT_125 = ") children.next();" + NL + "\t\t\tcollectAllLinks(childView);" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_126 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_127 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_128 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_129 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tString factoryHint = \"\";" + NL + "\t\t\t";
  protected final String TEXT_130 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_131 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), getFactoryHint(nextLinkDescriptor.getSemanticAdapter(), factoryHint), ";
  protected final String TEXT_132 = ".APPEND, false, ((";
  protected final String TEXT_133 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_134 = " ccr = new ";
  protected final String TEXT_135 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_136 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_137 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_138 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_139 = " viewAdapter = (";
  protected final String TEXT_140 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_141 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_142 = " getEditPartFor(";
  protected final String TEXT_143 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_144 = " view = (";
  protected final String TEXT_145 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_146 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_147 = NL;
  protected final String TEXT_148 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_149 = " container, ";
  protected final String TEXT_150 = " diagram) {" + NL + "\t";
  protected final String TEXT_151 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_152 = " container, ";
  protected final String TEXT_153 = " containerMetaclass) {\t";
  protected final String TEXT_154 = "\t\t" + NL + "\tif (";
  protected final String TEXT_155 = ".eINSTANCE.get";
  protected final String TEXT_156 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_157 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_158 = " values = ";
  protected final String TEXT_159 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_160 = " nextValue = ((";
  protected final String TEXT_161 = ") values.next());";
  protected final String TEXT_162 = NL + "\t\t";
  protected final String TEXT_163 = " nextValue = (";
  protected final String TEXT_164 = ") ";
  protected final String TEXT_165 = ";";
  protected final String TEXT_166 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_167 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_168 = ") {" + NL + "\t\t\t";
  protected final String TEXT_169 = " dst = (";
  protected final String TEXT_170 = ") structuralFeatureResult;";
  protected final String TEXT_171 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_172 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_173 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_174 = " src = (";
  protected final String TEXT_175 = ") structuralFeatureResult;";
  protected final String TEXT_176 = NL + "\t\t\t";
  protected final String TEXT_177 = " src = container;";
  protected final String TEXT_178 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_179 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_180 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_181 = NL + "\t\t\t}";
  protected final String TEXT_182 = NL + "\t\t}";
d203 91
a293 89
  protected final String TEXT_184 = NL + "\t}";
  protected final String TEXT_185 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_186 = " container, ";
  protected final String TEXT_187 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_188 = NL;
  protected final String TEXT_189 = "\tif (";
  protected final String TEXT_190 = ".eINSTANCE.get";
  protected final String TEXT_191 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_192 = NL + "\t\tfor (";
  protected final String TEXT_193 = " destinations = ";
  protected final String TEXT_194 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_195 = " nextDestination = (";
  protected final String TEXT_196 = ") destinations.next();";
  protected final String TEXT_197 = NL + "\t\t";
  protected final String TEXT_198 = " nextDestination = (";
  protected final String TEXT_199 = ") ";
  protected final String TEXT_200 = ";";
  protected final String TEXT_201 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_202 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_203 = " == nodeVID) {";
  protected final String TEXT_204 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_205 = ".";
  protected final String TEXT_206 = ", ";
  protected final String TEXT_207 = "));";
  protected final String TEXT_208 = NL + "\t\t";
  protected final String TEXT_209 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_210 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_211 = "Children(nextNode, nextDestination);";
  protected final String TEXT_212 = NL;
  protected final String TEXT_213 = NL + "\t\t}";
  protected final String TEXT_214 = NL + "\t\t}";
  protected final String TEXT_215 = NL + "\t}";
  protected final String TEXT_216 = NL;
  protected final String TEXT_217 = "\tif (";
  protected final String TEXT_218 = ".eINSTANCE.get";
  protected final String TEXT_219 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_220 = NL + "\t\tfor (";
  protected final String TEXT_221 = " destinations = ";
  protected final String TEXT_222 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_223 = " nextDestination = (";
  protected final String TEXT_224 = ") destinations.next();";
  protected final String TEXT_225 = NL + "\t\t";
  protected final String TEXT_226 = " nextDestination = (";
  protected final String TEXT_227 = ") ";
  protected final String TEXT_228 = ";";
  protected final String TEXT_229 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_230 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_231 = " == nodeVID) {";
  protected final String TEXT_232 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_233 = ".";
  protected final String TEXT_234 = ", ";
  protected final String TEXT_235 = "));";
  protected final String TEXT_236 = NL;
  protected final String TEXT_237 = NL + "\t\t}";
  protected final String TEXT_238 = NL + "\t\t}";
  protected final String TEXT_239 = NL + "\t}";
  protected final String TEXT_240 = NL + "}" + NL + "\t";
  protected final String TEXT_241 = NL;
  protected final String TEXT_242 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_243 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_244 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_245 = NL;
  protected final String TEXT_246 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_247 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_248 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_249 = NL;
  protected final String TEXT_250 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_251 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_252 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_253 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_254 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_255 = " source, ";
  protected final String TEXT_256 = " destination, ";
  protected final String TEXT_257 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_258 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_259 = " source, ";
  protected final String TEXT_260 = " destination, ";
  protected final String TEXT_261 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_262 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_263 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_264 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_265 = " source, ";
  protected final String TEXT_266 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_267 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_268 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_269 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_270 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_271 = NL + NL + "}";
  protected final String TEXT_272 = NL;
a579 1
    }
d581 3
a583 2
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();
a587 3
    
	}

d589 2
a590 1
    
d593 1
a593 1
    stringBuffer.append(TEXT_68);
a594 1
    stringBuffer.append(TEXT_69);
d597 1
a598 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d602 2
a604 1
    stringBuffer.append(TEXT_75);
d607 1
d609 1
a609 1
    stringBuffer.append(TEXT_78);
d611 1
a611 1
    stringBuffer.append(TEXT_79);
d613 1
a613 1
    stringBuffer.append(TEXT_80);
a614 2
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d618 2
d621 1
a621 1
    stringBuffer.append(TEXT_84);
d623 1
a623 1
    stringBuffer.append(TEXT_85);
d625 1
a625 1
    stringBuffer.append(TEXT_86);
d627 1
a627 1
    stringBuffer.append(TEXT_87);
a628 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d632 2
d635 1
a635 1
    stringBuffer.append(TEXT_91);
a636 2
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d640 2
d643 1
a643 1
    stringBuffer.append(TEXT_95);
d645 1
a645 1
    stringBuffer.append(TEXT_96);
d647 1
a647 1
    stringBuffer.append(TEXT_97);
d649 1
a649 1
    stringBuffer.append(TEXT_98);
d651 1
a651 1
    stringBuffer.append(TEXT_99);
d653 1
a653 1
    stringBuffer.append(TEXT_100);
a654 2
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d658 1
a658 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d662 2
d665 1
a665 1
    stringBuffer.append(TEXT_106);
d667 1
a667 1
    stringBuffer.append(TEXT_107);
d669 1
a669 1
    stringBuffer.append(TEXT_108);
d671 1
a671 1
    stringBuffer.append(TEXT_109);
d673 1
a673 1
    stringBuffer.append(TEXT_110);
d675 1
a675 1
    stringBuffer.append(TEXT_111);
d677 1
a677 1
    stringBuffer.append(TEXT_112);
a678 2
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d684 2
d687 1
a687 1
    stringBuffer.append(TEXT_117);
d689 1
a689 1
    stringBuffer.append(TEXT_118);
d691 1
a691 1
    stringBuffer.append(TEXT_119);
d699 1
a699 1
    stringBuffer.append(TEXT_120);
d701 1
a701 1
    stringBuffer.append(TEXT_121);
d704 1
a704 1
    stringBuffer.append(TEXT_122);
a705 2
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d709 2
d712 1
a712 1
    stringBuffer.append(TEXT_126);
a713 2
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d717 1
a717 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d721 2
d724 1
a724 1
    stringBuffer.append(TEXT_132);
a725 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d729 1
a729 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d733 2
a735 2
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d739 2
d742 1
a742 1
    stringBuffer.append(TEXT_141);
d744 1
a744 1
    stringBuffer.append(TEXT_142);
a745 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d749 2
d752 1
a752 1
    stringBuffer.append(TEXT_146);
a757 1
    stringBuffer.append(TEXT_147);
d759 1
d761 1
a761 1
    stringBuffer.append(TEXT_149);
d763 1
a763 1
    stringBuffer.append(TEXT_150);
d765 1
a765 1
    stringBuffer.append(TEXT_151);
d767 1
a767 1
    stringBuffer.append(TEXT_152);
d769 1
a769 1
    stringBuffer.append(TEXT_153);
d777 1
a777 1
    stringBuffer.append(TEXT_154);
d779 1
a779 1
    stringBuffer.append(TEXT_155);
d781 1
a781 1
    stringBuffer.append(TEXT_156);
d783 1
a783 1
    stringBuffer.append(TEXT_157);
d785 1
a785 1
    stringBuffer.append(TEXT_158);
a786 2
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d790 2
a792 2
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d796 2
d799 1
a799 1
    stringBuffer.append(TEXT_165);
d801 1
a801 1
    stringBuffer.append(TEXT_166);
a802 2
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d808 2
d811 1
a811 1
    stringBuffer.append(TEXT_171);
a812 2
    stringBuffer.append(TEXT_172);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d818 2
d821 1
a821 1
    stringBuffer.append(TEXT_176);
d823 1
a823 1
    stringBuffer.append(TEXT_177);
d825 1
a825 1
    stringBuffer.append(TEXT_178);
d827 1
a827 1
    stringBuffer.append(TEXT_179);
d829 1
a829 1
    stringBuffer.append(TEXT_180);
d831 1
a831 1
    stringBuffer.append(TEXT_181);
d833 1
a833 1
    stringBuffer.append(TEXT_182);
d837 1
a837 1
    stringBuffer.append(TEXT_183);
d841 1
a841 1
    stringBuffer.append(TEXT_184);
d846 1
a846 1
    stringBuffer.append(TEXT_185);
d848 1
a848 1
    stringBuffer.append(TEXT_186);
d850 1
a850 1
    stringBuffer.append(TEXT_187);
d855 1
a855 1
    stringBuffer.append(TEXT_188);
d869 1
a869 1
    stringBuffer.append(TEXT_189);
d871 1
a871 1
    stringBuffer.append(TEXT_190);
d873 1
a873 1
    stringBuffer.append(TEXT_191);
d875 1
a875 1
    stringBuffer.append(TEXT_192);
d877 1
a877 1
    stringBuffer.append(TEXT_193);
a878 2
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d882 2
a884 2
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d888 2
d891 1
a891 1
    stringBuffer.append(TEXT_200);
a893 2
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d897 2
d900 1
a900 1
    stringBuffer.append(TEXT_204);
d902 1
a902 1
    stringBuffer.append(TEXT_205);
d904 1
a904 1
    stringBuffer.append(TEXT_206);
d906 1
a906 1
    stringBuffer.append(TEXT_207);
d908 1
a908 1
    stringBuffer.append(TEXT_208);
d910 3
a912 1
    stringBuffer.append(TEXT_209);
d914 1
a914 1
    stringBuffer.append(TEXT_210);
d916 1
a916 1
    stringBuffer.append(TEXT_211);
d918 1
a918 1
    stringBuffer.append(TEXT_212);
d920 1
a920 1
    stringBuffer.append(TEXT_213);
d923 1
a923 1
    stringBuffer.append(TEXT_214);
d925 1
a925 1
    stringBuffer.append(TEXT_215);
d932 1
a932 1
    stringBuffer.append(TEXT_216);
d946 1
a946 1
    stringBuffer.append(TEXT_217);
d948 1
a948 1
    stringBuffer.append(TEXT_218);
d950 1
a950 1
    stringBuffer.append(TEXT_219);
d952 1
a952 1
    stringBuffer.append(TEXT_220);
d954 1
a954 1
    stringBuffer.append(TEXT_221);
d956 1
a956 1
    stringBuffer.append(TEXT_222);
d958 1
a958 1
    stringBuffer.append(TEXT_223);
d960 1
a960 1
    stringBuffer.append(TEXT_224);
d962 1
a962 1
    stringBuffer.append(TEXT_225);
d964 1
a964 1
    stringBuffer.append(TEXT_226);
d966 1
a966 1
    stringBuffer.append(TEXT_227);
d968 1
a968 1
    stringBuffer.append(TEXT_228);
d971 1
a971 3
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_230);
a972 2
    stringBuffer.append(TEXT_231);
    	}
d974 1
a974 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d976 1
a976 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d978 1
a978 1
    stringBuffer.append(nextLink.getVisualID());
d980 1
d982 3
d986 1
a986 1
    stringBuffer.append(TEXT_237);
d989 1
a989 1
    stringBuffer.append(TEXT_238);
d991 1
a991 1
    stringBuffer.append(TEXT_239);
a992 2
    stringBuffer.append(TEXT_240);
    stringBuffer.append(TEXT_241);
a993 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
a994 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d996 1
d998 1
a999 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a1000 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d1002 1
d1004 3
a1009 4
    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1013 1
a1013 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1017 1
a1017 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1021 1
a1021 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1025 2
a1027 2
    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1029 2
a1031 2
    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1035 1
a1035 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1037 1
a1037 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1045 4
d1050 1
a1050 1
    stringBuffer.append(TEXT_270);
d1052 1
a1052 1
    stringBuffer.append(TEXT_271);
d1054 1
a1054 1
    stringBuffer.append(TEXT_272);
@


1.22
log
@restore generators
@
text
@d391 1
a391 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.21
log
@#134095 do not store compiled templates in cvs
@
text
@d391 1
a391 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.20
log
@Switching to eclipse M6.
@
text
@@


1.19
log
@#134737 Create connections (links) to the inner elements in CanonicalEditPolicy/InitDiagramFileAction
#134751 Generated code should return semantic children in a correct sequence from CanonicalEditPolicy.getSemanticChildrenList()
@
text
@d391 1
a391 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.18
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d38 51
a88 51
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = "\t";
  protected final String TEXT_21 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_22 = "\tfor (";
  protected final String TEXT_23 = " values = ";
  protected final String TEXT_24 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_25 = ") values.next();";
  protected final String TEXT_26 = NL + "\tnextValue = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + "\tnodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\tif (";
  protected final String TEXT_30 = " == nodeVID) {" + NL + "\t\tresult.add(nextValue);";
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = "\t}";
  protected final String TEXT_33 = NL + "\t}";
  protected final String TEXT_34 = NL + "\treturn result;" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected boolean shouldDeleteView(";
  protected final String TEXT_35 = " view) {" + NL + "\t";
  protected final String TEXT_36 = " domainModelElement = view.getElement();" + NL + "\treturn domainModelElement != null && domainModelElement != ((";
  protected final String TEXT_37 = ") getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "}";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " getSemanticChildrenList() {" + NL + "\t\treturn ";
  protected final String TEXT_40 = ".EMPTY_LIST;" + NL + "\t}\t";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\treturn ";
  protected final String TEXT_42 = ".EMPTY_LIST;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn false;" + NL + "\t}" + NL;
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSemantic() {" + NL + "\t\tsuper.refreshSemantic();";
  protected final String TEXT_45 = NL + "\t\trefreshPhantoms();";
  protected final String TEXT_46 = NL + "\t\trefreshConnections();" + NL + "\t}";
  protected final String TEXT_47 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshPhantoms() {" + NL + "\t\t";
  protected final String TEXT_48 = " phantomNodes = new ";
  protected final String TEXT_49 = "();" + NL + "\t\t";
  protected final String TEXT_50 = " diagramModelObject = ((";
  protected final String TEXT_51 = ") getHost().getModel()).getElement();" + NL + "\t\t";
  protected final String TEXT_52 = " diagram = getDiagram();";
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_55 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_56 = " nextResourceObject = (";
  protected final String TEXT_57 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_58 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_59 = NL + "\t\tcase ";
  protected final String TEXT_60 = ": {" + NL + "\t\t\tphantomNodes.add(nextResourceObject);" + NL + "\t\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_61 = NL;
  protected final String TEXT_62 = "\t}" + NL + "}";
  protected final String TEXT_63 = NL;
  protected final String TEXT_64 = NL;
  protected final String TEXT_65 = "for (";
  protected final String TEXT_66 = " diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t";
  protected final String TEXT_67 = " nextView = (";
  protected final String TEXT_68 = ") diagramNodes.next();" + NL + "\t";
  protected final String TEXT_69 = " nextViewElement = nextView.getElement();" + NL + "\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\tphantomNodes.remove(nextViewElement);" + NL + "\t}\t" + NL + "}" + NL + "\t\tcreatePhantomNodes(phantomNodes);" + NL + "\t}" + NL;
d90 188
a277 188
  protected final String TEXT_71 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_72 = " nodes) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_73 = " descriptors = new ";
  protected final String TEXT_74 = "();" + NL + "\tfor (";
  protected final String TEXT_75 = " elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_76 = " element = (";
  protected final String TEXT_77 = ")elements.next();" + NL + "\t\t";
  protected final String TEXT_78 = ".ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_79 = " diagram = getDiagram();" + NL + "\t";
  protected final String TEXT_80 = " diagramEditPart = getDiagramEditPart();" + NL + "\t" + NL + "\t";
  protected final String TEXT_81 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_82 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_83 = " cc = new ";
  protected final String TEXT_84 = "(";
  protected final String TEXT_85 = ".AddCommand_Label);" + NL + "\t\tfor (";
  protected final String TEXT_86 = " descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_87 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_88 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_89 = " createCommand = new ";
  protected final String TEXT_90 = "(((";
  protected final String TEXT_91 = ") getHost()).getEditingDomain(), descriptor, diagram);" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_92 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_93 = ".makeMutable(new ";
  protected final String TEXT_94 = "(((";
  protected final String TEXT_95 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_96 = " adapters = (";
  protected final String TEXT_97 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_98 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_99 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_100 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_101 = " myLinkDescriptors = new ";
  protected final String TEXT_102 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_103 = " myEObject2ViewMap = new ";
  protected final String TEXT_104 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void refreshConnections() {" + NL + "\t\ttry {" + NL + "\t\t\tcollectAllLinks(getDiagram());" + NL + "\t\t\t";
  protected final String TEXT_105 = " existingLinks = new ";
  protected final String TEXT_106 = "(getDiagram().getEdges());" + NL + "\t\t\tfor (";
  protected final String TEXT_107 = " diagramLinks = existingLinks.iterator(); diagramLinks.hasNext();) {" + NL + "\t\t\t\tEdge nextDiagramLink = (Edge) diagramLinks.next();" + NL + "\t\t\t\t";
  protected final String TEXT_108 = " diagramLinkObject = nextDiagramLink.getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_109 = " diagramLinkSrc = nextDiagramLink.getSource().getElement();" + NL + "\t\t\t\t";
  protected final String TEXT_110 = " diagramLinkDst = nextDiagramLink.getTarget().getElement();" + NL + "\t\t\t\tint diagramLinkVisualID = getVisualID(nextDiagramLink);" + NL + "\t\t\t\tfor (";
  protected final String TEXT_111 = " modelLinkDescriptors = myLinkDescriptors.iterator(); modelLinkDescriptors.hasNext();) {" + NL + "\t\t\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) modelLinkDescriptors.next();" + NL + "\t\t\t\t\tif (diagramLinkObject == nextLinkDescriptor.getLinkElement() && diagramLinkSrc == nextLinkDescriptor.getSource() && diagramLinkDst == nextLinkDescriptor.getDestination() && diagramLinkVisualID == nextLinkDescriptor.getVisualID()) {" + NL + "\t\t\t\t\t\tdiagramLinks.remove();" + NL + "\t\t\t\t\t\tmodelLinkDescriptors.remove();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tdeleteViews(existingLinks.iterator());" + NL + "\t\t\tcreateConnections(myLinkDescriptors);" + NL + "\t\t} finally {" + NL + "\t\t\tmyLinkDescriptors.clear();" + NL + "\t\t\tmyEObject2ViewMap.clear();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void collectAllLinks(";
  protected final String TEXT_112 = " view) {" + NL + "\t\t";
  protected final String TEXT_113 = " modelElement = view.getElement();" + NL + "\t\tint diagramElementVisualID = getVisualID(view);" + NL + "\t\tswitch (diagramElementVisualID) {";
  protected final String TEXT_114 = NL + "\t\tcase ";
  protected final String TEXT_115 = ":";
  protected final String TEXT_116 = " { myEObject2ViewMap.put(modelElement, view);" + NL + "\t\t\tstoreLinks(modelElement, getDiagram());" + NL + "\t\t\tfor (";
  protected final String TEXT_117 = " children = view.getChildren().iterator(); children.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_118 = " childView = (";
  protected final String TEXT_119 = ") children.next();" + NL + "\t\t\t\tcollectAllLinks(childView);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tdefault: {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createConnections(";
  protected final String TEXT_120 = " linkDescriptors) {" + NL + "\t\tif (linkDescriptors.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfor (";
  protected final String TEXT_121 = " linkDescriptorsIterator = linkDescriptors.iterator(); linkDescriptorsIterator.hasNext();) {" + NL + "\t\t\tfinal LinkDescriptor nextLinkDescriptor = (LinkDescriptor) linkDescriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_122 = " sourceEditPart = getEditPartFor(nextLinkDescriptor.getSource());" + NL + "\t\t\t";
  protected final String TEXT_123 = " targetEditPart = getEditPartFor(nextLinkDescriptor.getDestination());" + NL + "\t\t\tif (sourceEditPart == null || targetEditPart == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tString factoryHint = \"\";" + NL + "\t\t\t";
  protected final String TEXT_124 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_125 = ".ConnectionViewDescriptor(nextLinkDescriptor.getSemanticAdapter(), getFactoryHint(nextLinkDescriptor.getSemanticAdapter(), factoryHint), ";
  protected final String TEXT_126 = ".APPEND, false, ((";
  protected final String TEXT_127 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t\t";
  protected final String TEXT_128 = " ccr = new ";
  protected final String TEXT_129 = "(descriptor);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_130 = ".REQ_CONNECTION_START);" + NL + "\t\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\t\tccr.setType(";
  protected final String TEXT_131 = ".REQ_CONNECTION_END);" + NL + "\t\t\t";
  protected final String TEXT_132 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\t\texecuteCommand(cmd);" + NL + "\t\t\t\t";
  protected final String TEXT_133 = " viewAdapter = (";
  protected final String TEXT_134 = ") ccr.getNewObject();" + NL + "\t\t\t\t";
  protected final String TEXT_135 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_136 = " getEditPartFor(";
  protected final String TEXT_137 = " modelElement) {" + NL + "\t\t";
  protected final String TEXT_138 = " view = (";
  protected final String TEXT_139 = ") myEObject2ViewMap.get(modelElement);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn (";
  protected final String TEXT_140 = ") getHost().getViewer().getEditPartRegistry().get(view);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_143 = " container, ";
  protected final String TEXT_144 = " diagram) {" + NL + "\t";
  protected final String TEXT_145 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_146 = " container, ";
  protected final String TEXT_147 = " containerMetaclass) {\t";
  protected final String TEXT_148 = "\t\t" + NL + "\tif (";
  protected final String TEXT_149 = ".eINSTANCE.get";
  protected final String TEXT_150 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_151 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_152 = " values = ";
  protected final String TEXT_153 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_154 = " nextValue = ((";
  protected final String TEXT_155 = ") values.next());";
  protected final String TEXT_156 = NL + "\t\t";
  protected final String TEXT_157 = " nextValue = (";
  protected final String TEXT_158 = ") ";
  protected final String TEXT_159 = ";";
  protected final String TEXT_160 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_161 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_162 = ") {" + NL + "\t\t\t";
  protected final String TEXT_163 = " dst = (";
  protected final String TEXT_164 = ") structuralFeatureResult;";
  protected final String TEXT_165 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_166 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_167 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_168 = " src = (";
  protected final String TEXT_169 = ") structuralFeatureResult;";
  protected final String TEXT_170 = NL + "\t\t\t";
  protected final String TEXT_171 = " src = container;";
  protected final String TEXT_172 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_173 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_174 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_175 = NL + "\t\t\t}";
  protected final String TEXT_176 = NL + "\t\t}";
  protected final String TEXT_177 = NL + "\t\t}";
  protected final String TEXT_178 = NL + "\t}";
  protected final String TEXT_179 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_180 = " container, ";
  protected final String TEXT_181 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_182 = NL;
  protected final String TEXT_183 = "\tif (";
  protected final String TEXT_184 = ".eINSTANCE.get";
  protected final String TEXT_185 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_186 = NL + "\t\tfor (";
  protected final String TEXT_187 = " destinations = ";
  protected final String TEXT_188 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_189 = " nextDestination = (";
  protected final String TEXT_190 = ") destinations.next();";
  protected final String TEXT_191 = NL + "\t\t";
  protected final String TEXT_192 = " nextDestination = (";
  protected final String TEXT_193 = ") ";
  protected final String TEXT_194 = ";";
  protected final String TEXT_195 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_196 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_197 = " == nodeVID) {";
  protected final String TEXT_198 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_199 = ".";
  protected final String TEXT_200 = ", ";
  protected final String TEXT_201 = "));";
  protected final String TEXT_202 = NL + "\t\t";
  protected final String TEXT_203 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_204 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_205 = "Children(nextNode, nextDestination);";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL + "\t\t}";
  protected final String TEXT_208 = NL + "\t\t}";
  protected final String TEXT_209 = NL + "\t}";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = "\tif (";
  protected final String TEXT_212 = ".eINSTANCE.get";
  protected final String TEXT_213 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_214 = NL + "\t\tfor (";
  protected final String TEXT_215 = " destinations = ";
  protected final String TEXT_216 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_217 = " nextDestination = (";
  protected final String TEXT_218 = ") destinations.next();";
  protected final String TEXT_219 = NL + "\t\t";
  protected final String TEXT_220 = " nextDestination = (";
  protected final String TEXT_221 = ") ";
  protected final String TEXT_222 = ";";
  protected final String TEXT_223 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_224 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_225 = " == nodeVID) {";
  protected final String TEXT_226 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_227 = ".";
  protected final String TEXT_228 = ", ";
  protected final String TEXT_229 = "));";
  protected final String TEXT_230 = NL;
  protected final String TEXT_231 = NL + "\t\t}";
  protected final String TEXT_232 = NL + "\t\t}";
  protected final String TEXT_233 = NL + "\t}";
  protected final String TEXT_234 = NL + "}" + NL + "\t";
  protected final String TEXT_235 = NL;
  protected final String TEXT_236 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_237 = " getDiagram() {" + NL + "\treturn ((";
  protected final String TEXT_238 = ") getHost().getModel()).getDiagram();" + NL + "}" + NL;
  protected final String TEXT_239 = NL;
  protected final String TEXT_240 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_241 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_242 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL;
  protected final String TEXT_243 = NL;
  protected final String TEXT_244 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_245 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_246 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_247 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_248 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_249 = " source, ";
  protected final String TEXT_250 = " destination, ";
  protected final String TEXT_251 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_252 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_253 = " source, ";
  protected final String TEXT_254 = " destination, ";
  protected final String TEXT_255 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_256 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_257 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_258 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
d279 13
a291 7
  protected final String TEXT_260 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_261 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_262 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_263 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_264 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_265 = NL + NL + "}";
  protected final String TEXT_266 = NL;
d429 1
a429 4
    
for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
	if (nodeIndex == 0) {

d439 1
a439 2
    	}
    stringBuffer.append(TEXT_19);
d441 13
a453 5
GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
TypeModelFacet typeModelFacet = nextNode.getModelFacet();
if (typeModelFacet.isPhantomElement()) {
// Skipping top-level phantoms
	continue;
a454 3
GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	
if (nodeIndex == 0) {
d456 5
a461 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_21);
d465 5
a469 1
if (childMetaFeature.isListType()) {
d471 2
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d476 1
a476 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d478 1
a478 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d480 1
a480 1
    } else {
d482 1
a482 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d484 1
a484 1
    }
d486 2
a487 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d489 6
a495 1
    stringBuffer.append(TEXT_30);
d497 1
d499 1
a499 1
    if (childMetaFeature.isListType()) {
d501 1
a501 2
    }
    }
d503 14
d518 1
a518 1
    stringBuffer.append(TEXT_35);
d520 1
a520 1
    stringBuffer.append(TEXT_36);
d522 1
a522 1
    stringBuffer.append(TEXT_37);
d524 1
a524 1
    stringBuffer.append(TEXT_38);
d526 1
a526 1
    stringBuffer.append(TEXT_39);
d528 1
a528 1
    stringBuffer.append(TEXT_40);
d530 1
a530 1
    stringBuffer.append(TEXT_41);
d532 1
a532 1
    stringBuffer.append(TEXT_42);
d534 1
a534 1
    stringBuffer.append(TEXT_43);
d547 1
a547 1
    stringBuffer.append(TEXT_44);
d549 1
a549 1
    stringBuffer.append(TEXT_45);
d551 1
a551 1
    stringBuffer.append(TEXT_46);
d553 1
a553 1
    stringBuffer.append(TEXT_47);
d555 1
a555 1
    stringBuffer.append(TEXT_48);
d557 1
a557 1
    stringBuffer.append(TEXT_49);
d559 1
a559 1
    stringBuffer.append(TEXT_50);
d561 1
a561 1
    stringBuffer.append(TEXT_51);
d563 2
a564 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
d569 1
a569 1
    stringBuffer.append(TEXT_54);
d571 1
a571 1
    stringBuffer.append(TEXT_55);
d573 1
a573 1
    stringBuffer.append(TEXT_56);
d575 1
a575 1
    stringBuffer.append(TEXT_57);
d577 1
a577 1
    stringBuffer.append(TEXT_58);
d583 1
a583 1
    stringBuffer.append(TEXT_59);
d585 1
a585 1
    stringBuffer.append(TEXT_60);
d589 1
a589 1
    stringBuffer.append(TEXT_61);
d593 1
a593 1
    stringBuffer.append(TEXT_62);
d595 3
a597 3
    stringBuffer.append(TEXT_63);
    stringBuffer.append(TEXT_64);
    stringBuffer.append(TEXT_65);
d599 1
a599 1
    stringBuffer.append(TEXT_66);
d601 1
a601 1
    stringBuffer.append(TEXT_67);
d603 1
a603 1
    stringBuffer.append(TEXT_68);
d605 3
a607 3
    stringBuffer.append(TEXT_69);
    stringBuffer.append(TEXT_70);
    stringBuffer.append(TEXT_71);
d609 1
a609 1
    stringBuffer.append(TEXT_72);
d611 1
a611 1
    stringBuffer.append(TEXT_73);
d613 1
a613 1
    stringBuffer.append(TEXT_74);
d615 1
a615 1
    stringBuffer.append(TEXT_75);
d617 1
a617 1
    stringBuffer.append(TEXT_76);
d619 1
a619 1
    stringBuffer.append(TEXT_77);
d621 1
a621 1
    stringBuffer.append(TEXT_78);
d623 1
a623 1
    stringBuffer.append(TEXT_79);
d625 1
a625 1
    stringBuffer.append(TEXT_80);
d627 1
a627 1
    stringBuffer.append(TEXT_81);
d629 1
a629 1
    stringBuffer.append(TEXT_82);
d631 1
a631 1
    stringBuffer.append(TEXT_83);
d633 1
a633 1
    stringBuffer.append(TEXT_84);
d635 1
a635 1
    stringBuffer.append(TEXT_85);
d637 1
a637 1
    stringBuffer.append(TEXT_86);
d639 1
a639 1
    stringBuffer.append(TEXT_87);
d641 1
a641 1
    stringBuffer.append(TEXT_88);
d643 1
a643 1
    stringBuffer.append(TEXT_89);
d645 1
a645 1
    stringBuffer.append(TEXT_90);
d647 1
a647 1
    stringBuffer.append(TEXT_91);
d649 1
a649 1
    stringBuffer.append(TEXT_92);
d651 1
a651 1
    stringBuffer.append(TEXT_93);
d653 1
a653 1
    stringBuffer.append(TEXT_94);
d655 1
a655 1
    stringBuffer.append(TEXT_95);
d657 1
a657 1
    stringBuffer.append(TEXT_96);
d659 1
a659 1
    stringBuffer.append(TEXT_97);
d661 1
a661 1
    stringBuffer.append(TEXT_98);
d663 1
a663 1
    stringBuffer.append(TEXT_99);
d665 1
a665 1
    stringBuffer.append(TEXT_100);
d667 1
a667 1
    stringBuffer.append(TEXT_101);
d669 1
a669 1
    stringBuffer.append(TEXT_102);
d671 1
a671 1
    stringBuffer.append(TEXT_103);
d673 1
a673 1
    stringBuffer.append(TEXT_104);
d675 1
a675 1
    stringBuffer.append(TEXT_105);
d677 1
a677 1
    stringBuffer.append(TEXT_106);
d679 1
a679 1
    stringBuffer.append(TEXT_107);
d681 1
a681 1
    stringBuffer.append(TEXT_108);
d683 1
a683 1
    stringBuffer.append(TEXT_109);
d685 1
a685 1
    stringBuffer.append(TEXT_110);
d687 1
a687 1
    stringBuffer.append(TEXT_111);
d689 1
a689 1
    stringBuffer.append(TEXT_112);
d691 1
a691 1
    stringBuffer.append(TEXT_113);
d699 1
a699 1
    stringBuffer.append(TEXT_114);
d701 1
a701 1
    stringBuffer.append(TEXT_115);
d704 1
a704 1
    stringBuffer.append(TEXT_116);
d706 1
a706 1
    stringBuffer.append(TEXT_117);
d708 1
a708 1
    stringBuffer.append(TEXT_118);
d710 1
a710 1
    stringBuffer.append(TEXT_119);
d712 1
a712 1
    stringBuffer.append(TEXT_120);
d714 1
a714 1
    stringBuffer.append(TEXT_121);
d716 1
a716 1
    stringBuffer.append(TEXT_122);
d718 1
a718 1
    stringBuffer.append(TEXT_123);
d720 1
a720 1
    stringBuffer.append(TEXT_124);
d722 1
a722 1
    stringBuffer.append(TEXT_125);
d724 1
a724 1
    stringBuffer.append(TEXT_126);
d726 1
a726 1
    stringBuffer.append(TEXT_127);
d728 1
a728 1
    stringBuffer.append(TEXT_128);
d730 1
a730 1
    stringBuffer.append(TEXT_129);
d732 1
a732 1
    stringBuffer.append(TEXT_130);
d734 1
a734 1
    stringBuffer.append(TEXT_131);
d736 1
a736 1
    stringBuffer.append(TEXT_132);
d738 1
a738 1
    stringBuffer.append(TEXT_133);
d740 1
a740 1
    stringBuffer.append(TEXT_134);
d742 1
a742 1
    stringBuffer.append(TEXT_135);
d744 1
a744 1
    stringBuffer.append(TEXT_136);
d746 1
a746 1
    stringBuffer.append(TEXT_137);
d748 1
a748 1
    stringBuffer.append(TEXT_138);
d750 1
a750 1
    stringBuffer.append(TEXT_139);
d752 1
a752 1
    stringBuffer.append(TEXT_140);
d758 2
a759 2
    stringBuffer.append(TEXT_141);
    stringBuffer.append(TEXT_142);
d761 1
a761 1
    stringBuffer.append(TEXT_143);
d763 1
a763 1
    stringBuffer.append(TEXT_144);
d765 1
a765 1
    stringBuffer.append(TEXT_145);
d767 1
a767 1
    stringBuffer.append(TEXT_146);
d769 1
a769 1
    stringBuffer.append(TEXT_147);
d777 1
a777 1
    stringBuffer.append(TEXT_148);
d779 1
a779 1
    stringBuffer.append(TEXT_149);
d781 1
a781 1
    stringBuffer.append(TEXT_150);
d783 1
a783 1
    stringBuffer.append(TEXT_151);
d785 1
a785 1
    stringBuffer.append(TEXT_152);
d787 1
a787 1
    stringBuffer.append(TEXT_153);
d789 1
a789 1
    stringBuffer.append(TEXT_154);
d791 1
a791 1
    stringBuffer.append(TEXT_155);
d793 1
a793 1
    stringBuffer.append(TEXT_156);
d795 1
a795 1
    stringBuffer.append(TEXT_157);
d797 1
a797 1
    stringBuffer.append(TEXT_158);
d799 1
a799 1
    stringBuffer.append(TEXT_159);
d801 1
a801 1
    stringBuffer.append(TEXT_160);
d803 1
a803 1
    stringBuffer.append(TEXT_161);
d805 1
a805 1
    stringBuffer.append(TEXT_162);
d807 1
a807 1
    stringBuffer.append(TEXT_163);
d809 1
a809 1
    stringBuffer.append(TEXT_164);
d811 1
a811 1
    stringBuffer.append(TEXT_165);
d813 1
a813 1
    stringBuffer.append(TEXT_166);
d815 1
a815 1
    stringBuffer.append(TEXT_167);
d817 1
a817 1
    stringBuffer.append(TEXT_168);
d819 1
a819 1
    stringBuffer.append(TEXT_169);
d821 1
a821 1
    stringBuffer.append(TEXT_170);
d823 1
a823 1
    stringBuffer.append(TEXT_171);
d825 1
a825 1
    stringBuffer.append(TEXT_172);
d827 1
a827 1
    stringBuffer.append(TEXT_173);
d829 1
a829 1
    stringBuffer.append(TEXT_174);
d831 1
a831 1
    stringBuffer.append(TEXT_175);
d833 1
a833 1
    stringBuffer.append(TEXT_176);
d837 1
a837 1
    stringBuffer.append(TEXT_177);
d841 1
a841 1
    stringBuffer.append(TEXT_178);
d846 1
a846 1
    stringBuffer.append(TEXT_179);
d848 1
a848 1
    stringBuffer.append(TEXT_180);
d850 1
a850 1
    stringBuffer.append(TEXT_181);
d855 1
a855 1
    stringBuffer.append(TEXT_182);
d869 1
a869 1
    stringBuffer.append(TEXT_183);
d871 1
a871 1
    stringBuffer.append(TEXT_184);
d873 1
a873 1
    stringBuffer.append(TEXT_185);
d875 1
a875 1
    stringBuffer.append(TEXT_186);
d877 1
a877 1
    stringBuffer.append(TEXT_187);
d879 1
a879 1
    stringBuffer.append(TEXT_188);
d881 1
a881 1
    stringBuffer.append(TEXT_189);
d883 1
a883 1
    stringBuffer.append(TEXT_190);
d885 1
a885 1
    stringBuffer.append(TEXT_191);
d887 1
a887 1
    stringBuffer.append(TEXT_192);
d889 1
a889 1
    stringBuffer.append(TEXT_193);
d891 1
a891 1
    stringBuffer.append(TEXT_194);
d894 1
a894 1
    stringBuffer.append(TEXT_195);
d896 1
a896 1
    stringBuffer.append(TEXT_196);
d898 1
a898 1
    stringBuffer.append(TEXT_197);
d900 1
a900 1
    stringBuffer.append(TEXT_198);
d902 1
a902 1
    stringBuffer.append(TEXT_199);
d904 1
a904 1
    stringBuffer.append(TEXT_200);
d906 1
a906 1
    stringBuffer.append(TEXT_201);
d908 1
a908 1
    stringBuffer.append(TEXT_202);
d910 1
a910 1
    stringBuffer.append(TEXT_203);
d912 1
a912 1
    stringBuffer.append(TEXT_204);
d914 1
a914 1
    stringBuffer.append(TEXT_205);
d916 1
a916 1
    stringBuffer.append(TEXT_206);
d918 1
a918 1
    stringBuffer.append(TEXT_207);
d921 1
a921 1
    stringBuffer.append(TEXT_208);
d923 1
a923 1
    stringBuffer.append(TEXT_209);
d930 1
a930 1
    stringBuffer.append(TEXT_210);
d944 1
a944 1
    stringBuffer.append(TEXT_211);
d946 1
a946 1
    stringBuffer.append(TEXT_212);
d948 1
a948 1
    stringBuffer.append(TEXT_213);
d950 1
a950 1
    stringBuffer.append(TEXT_214);
d952 1
a952 1
    stringBuffer.append(TEXT_215);
d954 1
a954 1
    stringBuffer.append(TEXT_216);
d956 1
a956 1
    stringBuffer.append(TEXT_217);
d958 1
a958 1
    stringBuffer.append(TEXT_218);
d960 1
a960 1
    stringBuffer.append(TEXT_219);
d962 1
a962 1
    stringBuffer.append(TEXT_220);
d964 1
a964 1
    stringBuffer.append(TEXT_221);
d966 1
a966 1
    stringBuffer.append(TEXT_222);
d969 1
a969 1
    stringBuffer.append(TEXT_223);
d971 1
a971 1
    stringBuffer.append(TEXT_224);
a972 11
    stringBuffer.append(TEXT_225);
    	}
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_228);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_229);
    stringBuffer.append(TEXT_230);
    	if (phantomsOnly) {
a974 1
	if (genFeature.isListType()) {
d976 1
a976 1
    	}
d978 1
a978 1
    }
d980 1
d983 1
a983 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d985 2
a986 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d988 1
d990 1
a991 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a992 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d994 1
d996 1
a996 3
    
// an inner class 

a997 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a998 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1000 1
a1000 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1002 1
a1002 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
a1003 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1005 3
a1007 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1011 1
a1011 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1015 2
a1017 2
    stringBuffer.append(TEXT_254);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1019 1
a1019 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1021 1
a1021 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1023 1
a1023 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1029 10
d1040 3
a1042 1
    stringBuffer.append(TEXT_261);
d1044 1
a1044 1
    stringBuffer.append(TEXT_262);
d1046 1
a1046 1
    stringBuffer.append(TEXT_263);
d1048 1
a1048 1
    stringBuffer.append(TEXT_264);
d1050 1
a1050 1
    stringBuffer.append(TEXT_265);
d1052 1
a1052 1
    stringBuffer.append(TEXT_266);
@


1.17
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d25 1
a25 1
  protected final String TEXT_6 = NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "import java.util.Collection;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EObject;";
d27 1
a27 1
  protected final String TEXT_8 = " extends CanonicalConnectionEditPolicy {";
d29 257
a285 127
  protected final String TEXT_10 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_11 = " getSemanticChildrenList() {" + NL + "\t\t\tList result = new ";
  protected final String TEXT_12 = "();";
  protected final String TEXT_13 = NL + "\t\t\t";
  protected final String TEXT_14 = " modelElement = (";
  protected final String TEXT_15 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\t";
  protected final String TEXT_16 = " nextValue;" + NL + "\t\t\tint nodeVID;";
  protected final String TEXT_17 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_18 = " it = ";
  protected final String TEXT_19 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_20 = ") it.next();";
  protected final String TEXT_21 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_22 = ";";
  protected final String TEXT_23 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_24 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_25 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t}";
  protected final String TEXT_27 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\t";
  protected final String TEXT_28 = " domainModelElement = view.getElement();" + NL + "\t\t\treturn domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tList result = new LinkedList();";
  protected final String TEXT_30 = NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_31 = " modelElement = (";
  protected final String TEXT_32 = ") diagram.getElement();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_33 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_34 = NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_35 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_36 = NL + "\t\tcase ";
  protected final String TEXT_37 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_38 = ";";
  protected final String TEXT_39 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected void refreshSemantic() {" + NL + "\tsuper.refreshSemantic();";
  protected final String TEXT_42 = NL + "\trefreshReferenceOnlyConnections();";
  protected final String TEXT_43 = NL + "\trefreshPhantoms();";
  protected final String TEXT_44 = NL + "}";
  protected final String TEXT_45 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class PhantomLinkInfo {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject myDst;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int myIndex;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String myType;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_46 = " myElementType;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, int index, String linkType, ";
  protected final String TEXT_47 = " elementType) {" + NL + "\t\tmyDst = dst;" + NL + "\t\tmyIndex = index;" + NL + "\t\tmyType = linkType;" + NL + "\t\tmyElementType = elementType;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, String linkType, ";
  protected final String TEXT_48 = " elementType) {" + NL + "\t\tthis(dst, 0, linkType, elementType);" + NL + "\t}" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshPhantoms() {" + NL + "\t";
  protected final String TEXT_49 = " phantomNodes = new ";
  protected final String TEXT_50 = "();" + NL + "\t";
  protected final String TEXT_51 = " phantomLinks = new ";
  protected final String TEXT_52 = "();" + NL + "\t";
  protected final String TEXT_53 = " modelElement = (";
  protected final String TEXT_54 = ") ((";
  protected final String TEXT_55 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_56 = " modelElementMetaclass = modelElement.eClass();" + NL + "\t";
  protected final String TEXT_57 = " eObject2ViewMap = new ";
  protected final String TEXT_58 = "();";
  protected final String TEXT_59 = NL + "\tif (-1 != modelElementMetaclass.getFeatureID(";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "())) {";
  protected final String TEXT_62 = NL + "\t\tint linkIndex = 0;" + NL + "\t\tfor (";
  protected final String TEXT_63 = " values = ";
  protected final String TEXT_64 = ".iterator(); values.hasNext(); linkIndex++) {" + NL + "\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_65 = NL + "\t\tEObject nextValue = ";
  protected final String TEXT_66 = ";";
  protected final String TEXT_67 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_68 = ".INSTANCE.getNodeVisualID(getDiagram(), nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_69 = " == nodeVID) {" + NL + "\t\t\tphantomNodes.add(nextValue);" + NL + "\t\t\tphantomLinks.add(new PhantomLinkInfo(nextValue";
  protected final String TEXT_70 = ", linkIndex";
  protected final String TEXT_71 = ", ";
  protected final String TEXT_72 = ".";
  protected final String TEXT_73 = ", ";
  protected final String TEXT_74 = ".";
  protected final String TEXT_75 = "));" + NL + "\t\t}";
  protected final String TEXT_76 = NL + "\t\t}";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\tfor (Iterator resourceObjects = modelElement.eResource().getContents().iterator(); resourceObjects.hasNext();) {" + NL + "\t\tEObject nextResourceEObject = (EObject) resourceObjects.next();" + NL + "\t\tif (nextResourceEObject != modelElement) {" + NL + "\t\t\tphantomNodes.add(nextResourceEObject);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\tfor (Iterator diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_80 = " nextView = (";
  protected final String TEXT_81 = ") diagramNodes.next();" + NL + "\t\tEObject nextViewElement = nextView.getElement();" + NL + "\t\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\t\tphantomNodes.remove(nextViewElement);" + NL + "\t\t\teObject2ViewMap.put(nextViewElement, nextView);" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\tfor (Iterator diagramEdges = getDiagram().getEdges().iterator(); diagramEdges.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_82 = " nextEdge = (";
  protected final String TEXT_83 = ") diagramEdges.next();" + NL + "\t\tif (nextEdge.getSource().getElement() != modelElement) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\tEObject target = nextEdge.getTarget().getElement();" + NL + "\t\tString linkType = nextEdge.getType();" + NL + "\t\tfor (Iterator linkInfos = phantomLinks.iterator(); linkInfos.hasNext();) {" + NL + "\t\t\tPhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfos.next();" + NL + "\t\t\tif (nextLinkInfo.myDst == target && nextLinkInfo.myType.equals(linkType)) {" + NL + "\t\t\t\tlinkInfos.remove();" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tcreatePhantomNodes(phantomNodes, eObject2ViewMap);" + NL + "\tcreatePhantomLinks(phantomLinks, eObject2ViewMap);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_84 = " nodes, ";
  protected final String TEXT_85 = " eObject2ViewMap) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_86 = " descriptors = new ";
  protected final String TEXT_87 = "();" + NL + "\tfor (Iterator elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\tEObject element = (EObject)elements.next();" + NL + "\t\tCreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_88 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_89 = " diagramEditPart = getDiagramEditPart();" + NL + "\t";
  protected final String TEXT_90 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_91 = " cc = new ";
  protected final String TEXT_92 = "(";
  protected final String TEXT_93 = ".AddCommand_Label);" + NL + "\t\tfor (Iterator descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_94 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_95 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_96 = " createCommand = new ";
  protected final String TEXT_97 = "(((";
  protected final String TEXT_98 = ") getHost()).getEditingDomain(), descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_99 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_100 = ".makeMutable(new ";
  protected final String TEXT_101 = "(((";
  protected final String TEXT_102 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_103 = " adapters = (";
  protected final String TEXT_104 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_105 = " createdView = (";
  protected final String TEXT_106 = ") ((";
  protected final String TEXT_107 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_108 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_109 = " linkInfos, ";
  protected final String TEXT_110 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_111 = " dstView = (";
  protected final String TEXT_112 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_113 = " targetEditPart = (";
  protected final String TEXT_114 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_115 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_116 = " adapter = new ";
  protected final String TEXT_117 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_118 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_119 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_120 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_121 = ".APPEND, false, ((";
  protected final String TEXT_122 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_123 = " ccr = new ";
  protected final String TEXT_124 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_125 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_126 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_127 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_128 = " viewAdapter = (";
  protected final String TEXT_129 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_130 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_131 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_132 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_133 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_134 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_135 = NL + "}";
  protected final String TEXT_136 = NL;
d387 3
d412 2
a413 2
if (modelElementInterface != null) {
	Collection genNodes = genDiagram.getTopLevelNodes();
d419 2
d422 1
a422 1
    stringBuffer.append(TEXT_12);
d424 2
a425 2
if (genNodes.size() > 0) {
	String modelElementInterfaceName = importManager.getImportedName(modelElementInterface.getQualifiedInterfaceName());
a426 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(modelElementInterfaceName);
d428 1
a428 1
    stringBuffer.append(modelElementInterfaceName);
d430 1
a430 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d432 1
a432 13
    
}

    
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet.isPhantomElement()) {
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (childMetaFeature.isListType()) {

d434 1
a434 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d436 1
a436 1
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
a437 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_20);
d439 9
a447 1
	} else {
d449 2
a451 2
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_22);
d453 3
a455 1
	}
d457 2
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d462 1
a462 1
    stringBuffer.append(nextNode.getVisualID());
d464 1
a464 3
    
	if (childMetaFeature.isListType()) {

d466 1
a466 4
    
	}
}

d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d470 1
a470 1
    }
d472 1
a472 4
    
if (modelElementInterface != null) {
	String modelElementInterfaceName = importManager.getImportedName(modelElementInterface.getQualifiedInterfaceName());

a473 1
    stringBuffer.append(modelElementInterfaceName);
a474 1
    stringBuffer.append(modelElementInterfaceName);
d476 1
a476 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d479 1
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d483 1
a483 7
    
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextGenLink = (GenLink) it.next();
	if (nextGenLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkFacet = (TypeLinkModelFacet) nextGenLink.getModelFacet(); 
		GenFeature nextLinkTargetFeature = typeLinkFacet.getTargetMetaFeature();

d485 1
a485 1
    stringBuffer.append(nextGenLink.getVisualID());
d487 1
a487 3
    stringBuffer.append(nextLinkTargetFeature.isListType() ? "(EObject) " : "");
    stringBuffer.append(getFeatureValueGetter("relationship", nextLinkTargetFeature, true, importManager));
    stringBuffer.append(nextLinkTargetFeature.isListType() ? ".get(0)" : "");
d489 1
a489 4
    
	}
}

d491 1
a491 6
    
{
	GenClass domainMetaclass = genDiagram.getDomainDiagramElement();
	GenContainerBase genContainerBase = genDiagram;
	if (domainMetaclass != null) {

d493 1
a493 16
    
boolean isDiagram = genContainerBase instanceof GenDiagram;

Collection phantomLinks = new ArrayList();
for (Iterator it = genDiagram.getLinks().iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet nextModelFacet = (FeatureModelFacet) nextLink.getModelFacet();
		if (nextModelFacet.getMetaFeature().isContains()) {
			phantomLinks.add(nextLink);
		}
	}
}

if (phantomLinks.size() > 0 || isDiagram) {

d495 1
a495 3
    
	if (isDiagram) {

d497 1
a497 5
    
	}
	
	if (phantomLinks.size() > 0) {

d500 7
d508 2
d512 1
a512 16
    
}

if (phantomLinks.size() > 0) {
	String domainMetaclassInterfaceName = importManager.getImportedName(domainMetaclass.getQualifiedInterfaceName());
	// Collecting all phantom elements
	Map genClass2Phantom = new LinkedHashMap();
	for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
		GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
		TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
		if (!nextModelFacet.isPhantomElement()) {
			continue;
		}
		genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
	}

d514 1
a514 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d516 1
a516 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d518 1
a518 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d520 1
a520 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d522 1
a522 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d524 1
a524 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d526 1
a526 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
a527 1
    stringBuffer.append(domainMetaclassInterfaceName);
d529 4
a532 1
    stringBuffer.append(domainMetaclassInterfaceName);
d534 1
a534 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d536 1
a536 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d538 1
a538 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d540 1
a540 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d542 1
d544 2
a545 4
	for (Iterator it = phantomLinks.iterator(); it.hasNext();) {
		GenLink phantomLink = (GenLink) it.next();
		FeatureModelFacet linkFMF = (FeatureModelFacet) phantomLink.getModelFacet();
		GenFeature genFeature = linkFMF.getMetaFeature();
d548 1
a548 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d550 3
a552 1
    stringBuffer.append(genFeature.getFeatureAccessorName());
d555 1
a555 3
		GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
		if (phantomNode != null) {
			if (genFeature.isListType()) {
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a559 1
    stringBuffer.append(getFeatureValueGetter("modelElement", genFeature, true, importManager));
a560 3
    
			} else {

d562 1
a562 1
    stringBuffer.append(getFeatureValueGetter("modelElement", genFeature, true, importManager));
d564 1
a564 3
    
			}

d566 1
a566 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d568 1
a568 1
    stringBuffer.append(phantomNode.getVisualID());
a569 1
    if (genFeature.isListType()) {
a570 1
    }
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d574 1
a574 1
    stringBuffer.append(phantomLink.getUniqueIdentifier());
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d578 1
a578 1
    stringBuffer.append(phantomLink.getUniqueIdentifier());
d580 1
a580 3
    
			if (genFeature.isListType()) {

d582 1
a582 4
    
			}
		}

d584 1
a584 5
    
	}
	
	if (isDiagram) {

d586 1
a586 3
    
	}

d588 1
a588 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d602 1
a602 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d606 1
a606 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d608 1
a608 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d610 1
a610 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d612 1
a612 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CompositeCommand"));
d614 1
a614 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages"));
d616 1
a616 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d618 1
a618 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateViewRequest"));
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.ICommand"));
d622 1
a622 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.CreateCommand"));
d624 1
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d638 1
a638 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d642 1
a642 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d644 1
a644 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d646 1
a646 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d648 1
a648 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d650 1
a650 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d654 1
a654 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d656 7
a662 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d664 1
a664 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d666 2
a667 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d669 1
a669 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d671 1
a671 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d673 1
a673 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d675 1
a675 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d677 1
a677 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d679 1
a679 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d681 1
a681 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d687 1
a687 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d689 1
a689 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d691 1
a691 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d693 1
a693 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d695 1
a695 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.SetViewMutabilityCommand"));
d697 1
a697 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d699 8
d708 7
a714 1
    stringBuffer.append(TEXT_132);
d716 90
a805 1
    stringBuffer.append(TEXT_133);
d807 1
d810 8
d819 13
a831 1
if (isDiagram) {
d833 55
a887 1
    stringBuffer.append(TEXT_134);
d891 4
d896 10
a905 1
	}
d908 107
a1014 1
    stringBuffer.append(TEXT_135);
d1016 1
a1016 1
    stringBuffer.append(TEXT_136);
@


1.16
log
@#127696 Templates should use new transaction API
In case of phantom nodes.
@
text
@d20 136
a155 133
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "import java.util.Collection;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EObject;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends CanonicalConnectionEditPolicy {";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_8 = " getSemanticChildrenList() {" + NL + "\t\t\tList result = new ";
  protected final String TEXT_9 = "();";
  protected final String TEXT_10 = NL + "\t\t\t";
  protected final String TEXT_11 = " modelElement = (";
  protected final String TEXT_12 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\t";
  protected final String TEXT_13 = " nextValue;" + NL + "\t\t\tint nodeVID;";
  protected final String TEXT_14 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_15 = " it = ";
  protected final String TEXT_16 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_17 = ") it.next();";
  protected final String TEXT_18 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_19 = ";";
  protected final String TEXT_20 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_22 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t}";
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\t";
  protected final String TEXT_25 = " domainModelElement = view.getElement();" + NL + "\t\t\treturn domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tList result = new LinkedList();";
  protected final String TEXT_27 = NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_28 = " modelElement = (";
  protected final String TEXT_29 = ") diagram.getElement();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_30 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_32 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_33 = NL + "\t\tcase ";
  protected final String TEXT_34 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ";";
  protected final String TEXT_36 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected void refreshSemantic() {" + NL + "\tsuper.refreshSemantic();";
  protected final String TEXT_39 = NL + "\trefreshReferenceOnlyConnections();";
  protected final String TEXT_40 = NL + "\trefreshPhantoms();";
  protected final String TEXT_41 = NL + "}";
  protected final String TEXT_42 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class PhantomLinkInfo {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject myDst;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int myIndex;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String myType;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_43 = " myElementType;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, int index, String linkType, ";
  protected final String TEXT_44 = " elementType) {" + NL + "\t\tmyDst = dst;" + NL + "\t\tmyIndex = index;" + NL + "\t\tmyType = linkType;" + NL + "\t\tmyElementType = elementType;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, String linkType, ";
  protected final String TEXT_45 = " elementType) {" + NL + "\t\tthis(dst, 0, linkType, elementType);" + NL + "\t}" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshPhantoms() {" + NL + "\t";
  protected final String TEXT_46 = " phantomNodes = new ";
  protected final String TEXT_47 = "();" + NL + "\t";
  protected final String TEXT_48 = " phantomLinks = new ";
  protected final String TEXT_49 = "();" + NL + "\t";
  protected final String TEXT_50 = " modelElement = (";
  protected final String TEXT_51 = ") ((";
  protected final String TEXT_52 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_53 = " modelElementMetaclass = modelElement.eClass();" + NL + "\t";
  protected final String TEXT_54 = " eObject2ViewMap = new ";
  protected final String TEXT_55 = "();";
  protected final String TEXT_56 = NL + "\tif (-1 != modelElementMetaclass.getFeatureID(";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "())) {";
  protected final String TEXT_59 = NL + "\t\tint linkIndex = 0;" + NL + "\t\tfor (";
  protected final String TEXT_60 = " values = ";
  protected final String TEXT_61 = ".iterator(); values.hasNext(); linkIndex++) {" + NL + "\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_62 = NL + "\t\tEObject nextValue = ";
  protected final String TEXT_63 = ";";
  protected final String TEXT_64 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_65 = ".INSTANCE.getNodeVisualID(getDiagram(), nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_66 = " == nodeVID) {" + NL + "\t\t\tphantomNodes.add(nextValue);" + NL + "\t\t\tphantomLinks.add(new PhantomLinkInfo(nextValue";
  protected final String TEXT_67 = ", linkIndex";
  protected final String TEXT_68 = ", ";
  protected final String TEXT_69 = ".";
  protected final String TEXT_70 = ", ";
  protected final String TEXT_71 = ".";
  protected final String TEXT_72 = "));" + NL + "\t\t}";
  protected final String TEXT_73 = NL + "\t\t}";
  protected final String TEXT_74 = NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\tfor (Iterator resourceObjects = modelElement.eResource().getContents().iterator(); resourceObjects.hasNext();) {" + NL + "\t\tEObject nextResourceEObject = (EObject) resourceObjects.next();" + NL + "\t\tif (nextResourceEObject != modelElement) {" + NL + "\t\t\tphantomNodes.add(nextResourceEObject);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_76 = NL + NL + "\tfor (Iterator diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_77 = " nextView = (";
  protected final String TEXT_78 = ") diagramNodes.next();" + NL + "\t\tEObject nextViewElement = nextView.getElement();" + NL + "\t\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\t\tphantomNodes.remove(nextViewElement);" + NL + "\t\t\teObject2ViewMap.put(nextViewElement, nextView);" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\tfor (Iterator diagramEdges = getDiagram().getEdges().iterator(); diagramEdges.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_79 = " nextEdge = (";
  protected final String TEXT_80 = ") diagramEdges.next();" + NL + "\t\tif (nextEdge.getSource().getElement() != modelElement) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\tEObject target = nextEdge.getTarget().getElement();" + NL + "\t\tString linkType = nextEdge.getType();" + NL + "\t\tfor (Iterator linkInfos = phantomLinks.iterator(); linkInfos.hasNext();) {" + NL + "\t\t\tPhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfos.next();" + NL + "\t\t\tif (nextLinkInfo.myDst == target && nextLinkInfo.myType.equals(linkType)) {" + NL + "\t\t\t\tlinkInfos.remove();" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tcreatePhantomNodes(phantomNodes, eObject2ViewMap);" + NL + "\tcreatePhantomLinks(phantomLinks, eObject2ViewMap);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_81 = " nodes, ";
  protected final String TEXT_82 = " eObject2ViewMap) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_83 = " descriptors = new ";
  protected final String TEXT_84 = "();" + NL + "\tfor (Iterator elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\tEObject element = (EObject)elements.next();" + NL + "\t\tCreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_85 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_86 = " diagramEditPart = getDiagramEditPart();" + NL + "\t";
  protected final String TEXT_87 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_88 = " cc = new ";
  protected final String TEXT_89 = "(";
  protected final String TEXT_90 = ".AddCommand_Label);" + NL + "\t\tfor (Iterator descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_91 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_92 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_93 = " createCommand = new ";
  protected final String TEXT_94 = "(((";
  protected final String TEXT_95 = ") getHost()).getEditingDomain(), descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_96 = "(cc);" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_97 = ".makeMutable(new ";
  protected final String TEXT_98 = "(((";
  protected final String TEXT_99 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_100 = " adapters = (";
  protected final String TEXT_101 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_102 = " createdView = (";
  protected final String TEXT_103 = ") ((";
  protected final String TEXT_104 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_105 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_106 = " linkInfos, ";
  protected final String TEXT_107 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_108 = " dstView = (";
  protected final String TEXT_109 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_110 = " targetEditPart = (";
  protected final String TEXT_111 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_112 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_113 = " adapter = new ";
  protected final String TEXT_114 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_115 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_116 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_117 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_118 = ".APPEND, false, ((";
  protected final String TEXT_119 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_120 = " ccr = new ";
  protected final String TEXT_121 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_122 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_123 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_124 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_125 = " viewAdapter = (";
  protected final String TEXT_126 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_127 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_128 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_129 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_130 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_131 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_132 = NL + "}";
  protected final String TEXT_133 = NL;
d260 9
d270 1
a270 1
    stringBuffer.append(TEXT_2);
d272 1
a272 1
    stringBuffer.append(TEXT_3);
d274 1
a274 1
    stringBuffer.append(TEXT_4);
d276 1
a276 1
    stringBuffer.append(TEXT_5);
d282 2
a283 2
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
d285 1
a285 1
    stringBuffer.append(TEXT_8);
d287 1
a287 1
    stringBuffer.append(TEXT_9);
d292 1
a292 1
    stringBuffer.append(TEXT_10);
d294 1
a294 1
    stringBuffer.append(TEXT_11);
d296 1
a296 1
    stringBuffer.append(TEXT_12);
d298 1
a298 1
    stringBuffer.append(TEXT_13);
d312 1
a312 1
    stringBuffer.append(TEXT_14);
d314 1
a314 1
    stringBuffer.append(TEXT_15);
d316 1
a316 1
    stringBuffer.append(TEXT_16);
d318 1
a318 1
    stringBuffer.append(TEXT_17);
d322 1
a322 1
    stringBuffer.append(TEXT_18);
d324 1
a324 1
    stringBuffer.append(TEXT_19);
d328 1
a328 1
    stringBuffer.append(TEXT_20);
d330 1
a330 1
    stringBuffer.append(TEXT_21);
d332 1
a332 1
    stringBuffer.append(TEXT_22);
d336 1
a336 1
    stringBuffer.append(TEXT_23);
d341 1
a341 1
    stringBuffer.append(TEXT_24);
d343 1
a343 1
    stringBuffer.append(TEXT_25);
d345 1
a345 1
    stringBuffer.append(TEXT_26);
d350 1
a350 1
    stringBuffer.append(TEXT_27);
d352 1
a352 1
    stringBuffer.append(TEXT_28);
d354 1
a354 1
    stringBuffer.append(TEXT_29);
d356 1
a356 1
    stringBuffer.append(TEXT_30);
d358 1
a358 1
    stringBuffer.append(TEXT_31);
d360 1
a360 1
    stringBuffer.append(TEXT_32);
d368 1
a368 1
    stringBuffer.append(TEXT_33);
d370 1
a370 1
    stringBuffer.append(TEXT_34);
d374 1
a374 1
    stringBuffer.append(TEXT_35);
d379 1
a379 1
    stringBuffer.append(TEXT_36);
d386 1
a386 1
    stringBuffer.append(TEXT_37);
d403 1
a403 1
    stringBuffer.append(TEXT_38);
d407 1
a407 1
    stringBuffer.append(TEXT_39);
d413 1
a413 1
    stringBuffer.append(TEXT_40);
d417 1
a417 1
    stringBuffer.append(TEXT_41);
d434 1
a434 1
    stringBuffer.append(TEXT_42);
d436 1
a436 1
    stringBuffer.append(TEXT_43);
d438 1
a438 1
    stringBuffer.append(TEXT_44);
d440 1
a440 1
    stringBuffer.append(TEXT_45);
d442 1
a442 1
    stringBuffer.append(TEXT_46);
d444 1
a444 1
    stringBuffer.append(TEXT_47);
d446 1
a446 1
    stringBuffer.append(TEXT_48);
d448 1
a448 1
    stringBuffer.append(TEXT_49);
d450 1
a450 1
    stringBuffer.append(TEXT_50);
d452 1
a452 1
    stringBuffer.append(TEXT_51);
d454 1
a454 1
    stringBuffer.append(TEXT_52);
d456 1
a456 1
    stringBuffer.append(TEXT_53);
d458 1
a458 1
    stringBuffer.append(TEXT_54);
d460 1
a460 1
    stringBuffer.append(TEXT_55);
d467 1
a467 1
    stringBuffer.append(TEXT_56);
d469 1
a469 1
    stringBuffer.append(TEXT_57);
d471 1
a471 1
    stringBuffer.append(TEXT_58);
d477 1
a477 1
    stringBuffer.append(TEXT_59);
d479 1
a479 1
    stringBuffer.append(TEXT_60);
d481 1
a481 1
    stringBuffer.append(TEXT_61);
d485 1
a485 1
    stringBuffer.append(TEXT_62);
d487 1
a487 1
    stringBuffer.append(TEXT_63);
d491 1
a491 1
    stringBuffer.append(TEXT_64);
d493 1
a493 1
    stringBuffer.append(TEXT_65);
d495 1
a495 1
    stringBuffer.append(TEXT_66);
d497 1
a497 1
    stringBuffer.append(TEXT_67);
d499 1
a499 1
    stringBuffer.append(TEXT_68);
d501 1
a501 1
    stringBuffer.append(TEXT_69);
d503 1
a503 1
    stringBuffer.append(TEXT_70);
d505 1
a505 1
    stringBuffer.append(TEXT_71);
d507 1
a507 1
    stringBuffer.append(TEXT_72);
d511 1
a511 1
    stringBuffer.append(TEXT_73);
d516 1
a516 1
    stringBuffer.append(TEXT_74);
d522 1
a522 1
    stringBuffer.append(TEXT_75);
d526 1
a526 1
    stringBuffer.append(TEXT_76);
d528 1
a528 1
    stringBuffer.append(TEXT_77);
d530 1
a530 1
    stringBuffer.append(TEXT_78);
d532 1
a532 1
    stringBuffer.append(TEXT_79);
d534 1
a534 1
    stringBuffer.append(TEXT_80);
d536 1
a536 1
    stringBuffer.append(TEXT_81);
d538 1
a538 1
    stringBuffer.append(TEXT_82);
d540 1
a540 1
    stringBuffer.append(TEXT_83);
d542 1
a542 1
    stringBuffer.append(TEXT_84);
d544 1
a544 1
    stringBuffer.append(TEXT_85);
d546 1
a546 1
    stringBuffer.append(TEXT_86);
d548 1
a548 1
    stringBuffer.append(TEXT_87);
d550 1
a550 1
    stringBuffer.append(TEXT_88);
d552 1
a552 1
    stringBuffer.append(TEXT_89);
d554 1
a554 1
    stringBuffer.append(TEXT_90);
d556 1
a556 1
    stringBuffer.append(TEXT_91);
d558 1
a558 1
    stringBuffer.append(TEXT_92);
d560 1
a560 1
    stringBuffer.append(TEXT_93);
d562 1
a562 1
    stringBuffer.append(TEXT_94);
d564 1
a564 1
    stringBuffer.append(TEXT_95);
d566 1
a566 1
    stringBuffer.append(TEXT_96);
d568 1
a568 1
    stringBuffer.append(TEXT_97);
d570 1
a570 1
    stringBuffer.append(TEXT_98);
d572 1
a572 1
    stringBuffer.append(TEXT_99);
d574 1
a574 1
    stringBuffer.append(TEXT_100);
a575 6
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d585 1
a585 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d587 1
a587 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d591 2
a593 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d595 1
a595 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d597 1
a597 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d599 1
a599 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d601 1
a601 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d603 1
a603 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d605 1
a605 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d609 4
d614 3
a616 1
    stringBuffer.append(TEXT_121);
d618 1
a618 1
    stringBuffer.append(TEXT_122);
d620 1
a620 1
    stringBuffer.append(TEXT_123);
d622 1
a622 1
    stringBuffer.append(TEXT_124);
d624 1
a624 1
    stringBuffer.append(TEXT_125);
d626 1
a626 1
    stringBuffer.append(TEXT_126);
d628 1
a628 1
    stringBuffer.append(TEXT_127);
d630 1
a630 1
    stringBuffer.append(TEXT_128);
d632 1
a632 1
    stringBuffer.append(TEXT_129);
d634 1
a634 1
    stringBuffer.append(TEXT_130);
d641 1
a641 1
    stringBuffer.append(TEXT_131);
d649 1
a649 1
    stringBuffer.append(TEXT_132);
d651 1
a651 1
    stringBuffer.append(TEXT_133);
@


1.15
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d113 40
a152 39
  protected final String TEXT_94 = "(descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_95 = "(cc.unwrap());" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_96 = ".makeMutable(new ";
  protected final String TEXT_97 = "(((";
  protected final String TEXT_98 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_99 = " adapters = (";
  protected final String TEXT_100 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_101 = " createdView = (";
  protected final String TEXT_102 = ") ((";
  protected final String TEXT_103 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_104 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_105 = " linkInfos, ";
  protected final String TEXT_106 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_107 = " dstView = (";
  protected final String TEXT_108 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_109 = " targetEditPart = (";
  protected final String TEXT_110 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_111 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_112 = " adapter = new ";
  protected final String TEXT_113 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_114 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_115 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_116 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_117 = ".APPEND, false, ((";
  protected final String TEXT_118 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_119 = " ccr = new ";
  protected final String TEXT_120 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_121 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_122 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_123 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_124 = " viewAdapter = (";
  protected final String TEXT_125 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_126 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_127 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_128 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_129 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_130 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_131 = NL + "}";
  protected final String TEXT_132 = NL;
d551 2
d554 1
a554 1
    stringBuffer.append(TEXT_95);
d556 1
a556 1
    stringBuffer.append(TEXT_96);
d558 1
a558 1
    stringBuffer.append(TEXT_97);
a559 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d563 1
a563 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d567 2
d570 1
a570 1
    stringBuffer.append(TEXT_103);
d572 1
a572 1
    stringBuffer.append(TEXT_104);
d574 1
a574 1
    stringBuffer.append(TEXT_105);
a575 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d579 1
a579 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d585 1
a585 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d589 2
a591 2
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d595 2
d598 1
a598 1
    stringBuffer.append(TEXT_117);
a599 2
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.CreateConnectionViewRequest"));
d603 1
a603 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.requests.RequestConstants"));
d607 2
a609 2
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d613 2
d616 1
a616 1
    stringBuffer.append(TEXT_126);
a617 2
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d621 2
d629 1
a629 1
    stringBuffer.append(TEXT_130);
d637 1
a637 1
    stringBuffer.append(TEXT_131);
d639 1
a639 1
    stringBuffer.append(TEXT_132);
@


1.14
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d45 21
a65 21
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_27 = " modelElement = (";
  protected final String TEXT_28 = ") diagram.getElement();" + NL + "\t\tList result = new LinkedList();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_29 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_30 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_31 = NL + "\t\tcase ";
  protected final String TEXT_32 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_33 = ";";
  protected final String TEXT_34 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "protected void refreshSemantic() {" + NL + "\tsuper.refreshSemantic();";
  protected final String TEXT_37 = NL + "\trefreshReferenceOnlyConnections();";
  protected final String TEXT_38 = NL + "\trefreshPhantoms();";
  protected final String TEXT_39 = NL + "}";
  protected final String TEXT_40 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class PhantomLinkInfo {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject myDst;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int myIndex;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String myType;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_41 = " myElementType;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, int index, String linkType, ";
  protected final String TEXT_42 = " elementType) {" + NL + "\t\tmyDst = dst;" + NL + "\t\tmyIndex = index;" + NL + "\t\tmyType = linkType;" + NL + "\t\tmyElementType = elementType;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate PhantomLinkInfo(EObject dst, String linkType, ";
  protected final String TEXT_43 = " elementType) {" + NL + "\t\tthis(dst, 0, linkType, elementType);" + NL + "\t}" + NL + "" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshPhantoms() {" + NL + "\t";
  protected final String TEXT_44 = " phantomNodes = new ";
  protected final String TEXT_45 = "();" + NL + "\t";
  protected final String TEXT_46 = " phantomLinks = new ";
d67 20
a86 20
  protected final String TEXT_48 = " modelElement = (";
  protected final String TEXT_49 = ") ((";
  protected final String TEXT_50 = ") getHost().getModel()).getElement();" + NL + "\t";
  protected final String TEXT_51 = " modelElementMetaclass = modelElement.eClass();" + NL + "\t";
  protected final String TEXT_52 = " eObject2ViewMap = new ";
  protected final String TEXT_53 = "();";
  protected final String TEXT_54 = NL + "\tif (-1 != modelElementMetaclass.getFeatureID(";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "())) {";
  protected final String TEXT_57 = NL + "\t\tint linkIndex = 0;" + NL + "\t\tfor (";
  protected final String TEXT_58 = " values = ";
  protected final String TEXT_59 = ".iterator(); values.hasNext(); linkIndex++) {" + NL + "\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_60 = NL + "\t\tEObject nextValue = ";
  protected final String TEXT_61 = ";";
  protected final String TEXT_62 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_63 = ".INSTANCE.getNodeVisualID(getDiagram(), nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_64 = " == nodeVID) {" + NL + "\t\t\tphantomNodes.add(nextValue);" + NL + "\t\t\tphantomLinks.add(new PhantomLinkInfo(nextValue";
  protected final String TEXT_65 = ", linkIndex";
  protected final String TEXT_66 = ", ";
  protected final String TEXT_67 = ".";
d89 63
a151 61
  protected final String TEXT_70 = "));" + NL + "\t\t}";
  protected final String TEXT_71 = NL + "\t\t}";
  protected final String TEXT_72 = NL + "\t}";
  protected final String TEXT_73 = NL + NL + "\tfor (Iterator resourceObjects = modelElement.eResource().getContents().iterator(); resourceObjects.hasNext();) {" + NL + "\t\tEObject nextResourceEObject = (EObject) resourceObjects.next();" + NL + "\t\tif (nextResourceEObject != modelElement) {" + NL + "\t\t\tphantomNodes.add(nextResourceEObject);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\tfor (Iterator diagramNodes = getDiagram().getChildren().iterator(); diagramNodes.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_75 = " nextView = (";
  protected final String TEXT_76 = ") diagramNodes.next();" + NL + "\t\tEObject nextViewElement = nextView.getElement();" + NL + "\t\tif (phantomNodes.contains(nextViewElement)) {" + NL + "\t\t\tphantomNodes.remove(nextViewElement);" + NL + "\t\t\teObject2ViewMap.put(nextViewElement, nextView);" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\tfor (Iterator diagramEdges = getDiagram().getEdges().iterator(); diagramEdges.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_77 = " nextEdge = (";
  protected final String TEXT_78 = ") diagramEdges.next();" + NL + "\t\tif (nextEdge.getSource().getElement() != modelElement) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\tEObject target = nextEdge.getTarget().getElement();" + NL + "\t\tString linkType = nextEdge.getType();" + NL + "\t\tfor (Iterator linkInfos = phantomLinks.iterator(); linkInfos.hasNext();) {" + NL + "\t\t\tPhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfos.next();" + NL + "\t\t\tif (nextLinkInfo.myDst == target && nextLinkInfo.myType.equals(linkType)) {" + NL + "\t\t\t\tlinkInfos.remove();" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\tcreatePhantomNodes(phantomNodes, eObject2ViewMap);" + NL + "\tcreatePhantomLinks(phantomLinks, eObject2ViewMap);" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomNodes(";
  protected final String TEXT_79 = " nodes, ";
  protected final String TEXT_80 = " eObject2ViewMap) {" + NL + "\tif (nodes.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_81 = " descriptors = new ";
  protected final String TEXT_82 = "();" + NL + "\tfor (Iterator elements = nodes.iterator(); elements.hasNext();) {" + NL + "\t\tEObject element = (EObject)elements.next();" + NL + "\t\tCreateViewRequest.ViewDescriptor descriptor = getViewDescriptor(element);" + NL + "\t\tdescriptors.add(descriptor);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_83 = " request = getCreateViewRequest(descriptors);" + NL + "\t";
  protected final String TEXT_84 = " diagramEditPart = getDiagramEditPart();" + NL + "\t";
  protected final String TEXT_85 = " cmd = diagramEditPart.getCommand(request);" + NL + "\tif (cmd == null) {" + NL + "\t\t";
  protected final String TEXT_86 = " cc = new ";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ".AddCommand_Label);" + NL + "\t\tfor (Iterator descriptorsIterator = descriptors.iterator(); descriptorsIterator.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_89 = ".ViewDescriptor descriptor = (";
  protected final String TEXT_90 = ".ViewDescriptor) descriptorsIterator.next();" + NL + "\t\t\t";
  protected final String TEXT_91 = " createCommand = new ";
  protected final String TEXT_92 = "(descriptor, getDiagram());" + NL + "\t\t\tcc.compose(createCommand);" + NL + "\t\t}" + NL + "\t\tcmd = new ";
  protected final String TEXT_93 = "(cc.unwrap());" + NL + "\t}\t" + NL + "\t" + NL + "\tif ( cmd != null && cmd.canExecute() ) {" + NL + "\t\t";
  protected final String TEXT_94 = ".makeMutable(new ";
  protected final String TEXT_95 = "(((";
  protected final String TEXT_96 = ") diagramEditPart).getNotationView())).execute();" + NL + "\t\texecuteCommand(cmd);" + NL + "\t\t";
  protected final String TEXT_97 = " adapters = (";
  protected final String TEXT_98 = ") request.getNewObject();" + NL + "\t\tmakeViewsImmutable(adapters);" + NL + "\t\tfor (Iterator viewAdapters = adapters.iterator(); viewAdapters.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_99 = " createdView = (";
  protected final String TEXT_100 = ") ((";
  protected final String TEXT_101 = ") viewAdapters.next()).getAdapter(";
  protected final String TEXT_102 = ".class);" + NL + "\t\t\tif (createdView.getElement() != null) {" + NL + "\t\t\t\teObject2ViewMap.put(createdView.getElement(), createdView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\tdiagramEditPart.refresh();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createPhantomLinks(";
  protected final String TEXT_103 = " linkInfos, ";
  protected final String TEXT_104 = " eObject2ViewMap) {" + NL + "\tif (linkInfos.isEmpty()) {" + NL + "\t\treturn;" + NL + "\t}" + NL + "\tfor (Iterator linkInfoIterator = linkInfos.iterator(); linkInfoIterator.hasNext();) {" + NL + "\t\tfinal PhantomLinkInfo nextLinkInfo = (PhantomLinkInfo) linkInfoIterator.next();" + NL + "\t\t";
  protected final String TEXT_105 = " dstView = (";
  protected final String TEXT_106 = ") eObject2ViewMap.get(nextLinkInfo.myDst);" + NL + "\t\tif (dstView == null) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_107 = " targetEditPart = (";
  protected final String TEXT_108 = ") getHost().getViewer().getEditPartRegistry().get(dstView);\t\t" + NL + "\t\t";
  protected final String TEXT_109 = " sourceEditPart = getHost();" + NL + "\t\tString factoryHint = \"\";" + NL + "\t\t";
  protected final String TEXT_110 = " adapter = new ";
  protected final String TEXT_111 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_112 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\t\t\treturn nextLinkInfo.myElementType;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_113 = ".ConnectionViewDescriptor descriptor = new ";
  protected final String TEXT_114 = ".ConnectionViewDescriptor(adapter, getFactoryHint(adapter, factoryHint), ";
  protected final String TEXT_115 = ".APPEND, false, ((";
  protected final String TEXT_116 = ") getHost()).getDiagramPreferencesHint());" + NL + "\t\t";
  protected final String TEXT_117 = " ccr = new ";
  protected final String TEXT_118 = "(descriptor);" + NL + "\t\tccr.setType(";
  protected final String TEXT_119 = ".REQ_CONNECTION_START);" + NL + "\t\tccr.setSourceEditPart(sourceEditPart);" + NL + "\t\tsourceEditPart.getCommand(ccr);" + NL + "\t\tccr.setTargetEditPart(targetEditPart);" + NL + "\t\tccr.setType(";
  protected final String TEXT_120 = ".REQ_CONNECTION_END);" + NL + "\t\t";
  protected final String TEXT_121 = " cmd = targetEditPart.getCommand(ccr);" + NL + "\t\tif (cmd != null && cmd.canExecute()) {" + NL + "\t\t\texecuteCommand(cmd);" + NL + "\t\t\t";
  protected final String TEXT_122 = " viewAdapter = (";
  protected final String TEXT_123 = ") ccr.getNewObject();" + NL + "\t\t\t";
  protected final String TEXT_124 = ".makeImmutable(viewAdapter).execute();" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_125 = " getDiagram() {" + NL + "\treturn ((View) getHost().getModel()).getDiagram();" + NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_126 = " getDiagramEditPart() {" + NL + "\treturn (";
  protected final String TEXT_127 = ") getHost().getViewer().getEditPartRegistry().get(getDiagram());" + NL + "}";
  protected final String TEXT_128 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void refreshReferenceOnlyConnections() {" + NL + "// TODO: implement this method" + NL + "}";
  protected final String TEXT_129 = NL + NL + "}";
  protected final String TEXT_130 = NL;
d266 1
a266 1
{
d331 2
d334 2
a335 2
}
String modelElementInterfaceName = importManager.getImportedName(modelElementInterface.getQualifiedInterfaceName());
a336 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(modelElementInterfaceName);
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d344 4
d355 1
a355 1
    stringBuffer.append(TEXT_31);
d357 1
a357 1
    stringBuffer.append(TEXT_32);
d361 1
a361 1
    stringBuffer.append(TEXT_33);
d366 1
a366 1
    stringBuffer.append(TEXT_34);
d371 1
d373 1
a373 1
    stringBuffer.append(TEXT_35);
d390 1
a390 1
    stringBuffer.append(TEXT_36);
d394 1
a394 1
    stringBuffer.append(TEXT_37);
d400 1
a400 1
    stringBuffer.append(TEXT_38);
d404 1
a404 1
    stringBuffer.append(TEXT_39);
a420 4
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d424 1
a424 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d426 1
a426 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d432 4
d437 1
a437 1
    stringBuffer.append(TEXT_48);
d439 1
a439 1
    stringBuffer.append(TEXT_49);
d441 1
a441 1
    stringBuffer.append(TEXT_50);
d443 1
a443 1
    stringBuffer.append(TEXT_51);
d445 1
a445 1
    stringBuffer.append(TEXT_52);
d447 1
a447 1
    stringBuffer.append(TEXT_53);
d454 1
a454 1
    stringBuffer.append(TEXT_54);
d456 1
a456 1
    stringBuffer.append(TEXT_55);
d458 1
a458 1
    stringBuffer.append(TEXT_56);
d464 1
a464 1
    stringBuffer.append(TEXT_57);
d466 1
a466 1
    stringBuffer.append(TEXT_58);
d468 1
a468 1
    stringBuffer.append(TEXT_59);
d472 1
a472 1
    stringBuffer.append(TEXT_60);
d474 1
a474 1
    stringBuffer.append(TEXT_61);
d478 1
a478 1
    stringBuffer.append(TEXT_62);
d480 1
a480 1
    stringBuffer.append(TEXT_63);
d482 1
a482 1
    stringBuffer.append(TEXT_64);
d484 1
a484 1
    stringBuffer.append(TEXT_65);
d486 1
a486 1
    stringBuffer.append(TEXT_66);
d488 1
a488 1
    stringBuffer.append(TEXT_67);
d490 1
a490 1
    stringBuffer.append(TEXT_68);
d492 1
a492 1
    stringBuffer.append(TEXT_69);
d494 1
a494 1
    stringBuffer.append(TEXT_70);
d498 1
a498 1
    stringBuffer.append(TEXT_71);
d503 1
a503 1
    stringBuffer.append(TEXT_72);
d509 1
a509 1
    stringBuffer.append(TEXT_73);
d513 1
a513 1
    stringBuffer.append(TEXT_74);
d515 1
a515 1
    stringBuffer.append(TEXT_75);
d517 1
a517 1
    stringBuffer.append(TEXT_76);
d519 1
a519 1
    stringBuffer.append(TEXT_77);
d521 1
a521 1
    stringBuffer.append(TEXT_78);
d523 1
a523 1
    stringBuffer.append(TEXT_79);
d525 1
a525 1
    stringBuffer.append(TEXT_80);
d527 1
a527 1
    stringBuffer.append(TEXT_81);
d529 1
a529 1
    stringBuffer.append(TEXT_82);
d531 1
a531 1
    stringBuffer.append(TEXT_83);
d533 1
a533 1
    stringBuffer.append(TEXT_84);
d535 1
a535 1
    stringBuffer.append(TEXT_85);
d537 1
a537 1
    stringBuffer.append(TEXT_86);
d539 1
a539 1
    stringBuffer.append(TEXT_87);
d541 1
a541 1
    stringBuffer.append(TEXT_88);
d543 1
a543 1
    stringBuffer.append(TEXT_89);
d545 1
a545 1
    stringBuffer.append(TEXT_90);
d547 1
a547 1
    stringBuffer.append(TEXT_91);
d549 1
a549 1
    stringBuffer.append(TEXT_92);
d551 1
a551 1
    stringBuffer.append(TEXT_93);
d553 1
a553 1
    stringBuffer.append(TEXT_94);
d555 1
a555 1
    stringBuffer.append(TEXT_95);
d557 1
a557 1
    stringBuffer.append(TEXT_96);
d559 1
a559 1
    stringBuffer.append(TEXT_97);
d561 1
a561 1
    stringBuffer.append(TEXT_98);
a562 4
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d572 2
a574 2
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d580 4
d585 1
a585 1
    stringBuffer.append(TEXT_110);
d587 1
a587 1
    stringBuffer.append(TEXT_111);
d589 1
a589 1
    stringBuffer.append(TEXT_112);
d591 1
a591 1
    stringBuffer.append(TEXT_113);
d593 1
a593 1
    stringBuffer.append(TEXT_114);
d595 1
a595 1
    stringBuffer.append(TEXT_115);
d597 1
a597 1
    stringBuffer.append(TEXT_116);
d599 1
a599 1
    stringBuffer.append(TEXT_117);
d601 1
a601 1
    stringBuffer.append(TEXT_118);
d603 1
a603 1
    stringBuffer.append(TEXT_119);
d605 1
a605 1
    stringBuffer.append(TEXT_120);
d607 1
a607 1
    stringBuffer.append(TEXT_121);
d609 1
a609 1
    stringBuffer.append(TEXT_122);
d611 1
a611 1
    stringBuffer.append(TEXT_123);
d613 1
a613 1
    stringBuffer.append(TEXT_124);
d615 1
a615 1
    stringBuffer.append(TEXT_125);
d617 1
a617 1
    stringBuffer.append(TEXT_126);
d619 1
a619 1
    stringBuffer.append(TEXT_127);
d626 1
a626 1
    stringBuffer.append(TEXT_128);
d631 1
d634 1
a634 1
    stringBuffer.append(TEXT_129);
d636 1
a636 1
    stringBuffer.append(TEXT_130);
@


1.13
log
@#126896
generating CanonicalEditPolicy for visualizing containment reference as diagram link.
@
text
@d151 1
a151 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d195 1
a195 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d238 1
a238 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d251 1
a251 1
GenDiagram genDiagram = (GenDiagram) argument;
@


1.12
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d27 5
a31 5
  protected final String TEXT_8 = " getSemanticChildrenList() {" + NL + "\t\t\t";
  protected final String TEXT_9 = " modelElement = (";
  protected final String TEXT_10 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t\t\t";
d43 107
a149 11
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\tEObject domainModelElement = view.getElement();" + NL + "\t\t\treturn domainModelElement != null && domainModelElement != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_26 = " modelElement = (";
  protected final String TEXT_27 = ") diagram.getElement();" + NL + "\t\tList result = new LinkedList();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_28 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_29 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_30 = NL + "\t\tcase ";
  protected final String TEXT_31 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ";";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, Collection children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_34 = NL;
d263 1
a263 1
String modelElementInterfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
d271 1
a271 1
    stringBuffer.append(modelElementInterfaceName);
a272 4
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_11);
d275 1
d277 4
d327 1
a327 1
    }
d329 4
a332 1
    stringBuffer.append(modelElementInterfaceName);
d336 1
a336 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d340 2
d349 1
a349 1
    stringBuffer.append(TEXT_30);
d351 1
a351 1
    stringBuffer.append(TEXT_31);
d355 148
a502 1
    stringBuffer.append(TEXT_32);
d505 116
d623 4
a626 1
    stringBuffer.append(TEXT_33);
d628 1
a628 1
    stringBuffer.append(TEXT_34);
@


1.11
log
@ImportManager moved to oeg.common
@
text
@d194 3
@


1.10
log
@#124784
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.9
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d43 1
a43 1
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\treturn view.getElement() != ((View) getHost().getModel()).getElement() && super.shouldDeleteView(view);" + NL + "\t\t}";
@


1.8
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d129 9
a137 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
d247 1
@


1.7
log
@#122537
Removing usages of deprecated API.
@
text
@d163 1
a163 1
	Collection genNodes = genDiagram.getNodes();
@


1.6
log
@Correcting shouldDeleteView() method to call super implementation.
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalConnectionEditPolicy;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.emf.ecore.EObject;";
d52 1
a52 1
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}" + NL + "}";
@


1.5
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d43 1
a43 1
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected boolean shouldDeleteView(View view) {" + NL + "\t\t\treturn view.getElement() != ((View) getHost().getModel()).getElement();" + NL + "\t\t}";
@


1.4
log
@Not finished: childnodes could be contained in node, not only in compartment.
@
text
@d29 25
a53 28
  protected final String TEXT_10 = ") ((View) getHost().getModel()).getElement();";
  protected final String TEXT_11 = NL + "\t\t\tList result = new ";
  protected final String TEXT_12 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_13 = " it = getViewChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tView nextView = (View) it.next();" + NL + "\t\t\t\tif (nextView.getElement() == modelElement) {" + NL + "\t\t\t\t\tresult.add(modelElement);" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t\t\t";
  protected final String TEXT_16 = " nextValue;" + NL + "\t\t\tint nodeVID;";
  protected final String TEXT_17 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_18 = " it = ";
  protected final String TEXT_19 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_20 = ") it.next();";
  protected final String TEXT_21 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_22 = ";";
  protected final String TEXT_23 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_24 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_25 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t}";
  protected final String TEXT_27 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_29 = " modelElement = (";
  protected final String TEXT_30 = ") diagram.getElement();" + NL + "\t\tList result = new LinkedList();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_31 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_32 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_33 = NL + "\t\tcase ";
  protected final String TEXT_34 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ";";
  protected final String TEXT_36 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_37 = NL;
d173 1
a173 8
    
/**
 * [++]
 * This code was added to sate visual element without underlying semanti one
 * see http://www.eclipse.org/newsportal/article.php?id=536&group=eclipse.technology.gmf#536
 * for the details
 */

a174 10
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_13);
    
/**
 * [--]
 */

    stringBuffer.append(TEXT_14);
d178 1
a178 1
    stringBuffer.append(TEXT_15);
d180 1
a180 1
    stringBuffer.append(TEXT_16);
d191 1
a191 1
    stringBuffer.append(TEXT_17);
d193 1
a193 1
    stringBuffer.append(TEXT_18);
d195 1
a195 1
    stringBuffer.append(TEXT_19);
d197 1
a197 1
    stringBuffer.append(TEXT_20);
d201 1
a201 1
    stringBuffer.append(TEXT_21);
d203 1
a203 1
    stringBuffer.append(TEXT_22);
d207 1
a207 1
    stringBuffer.append(TEXT_23);
d209 1
a209 1
    stringBuffer.append(TEXT_24);
d211 1
a211 1
    stringBuffer.append(TEXT_25);
d215 1
a215 1
    stringBuffer.append(TEXT_26);
d220 1
a220 1
    stringBuffer.append(TEXT_27);
d222 1
a222 1
    stringBuffer.append(TEXT_28);
d224 1
a224 1
    stringBuffer.append(TEXT_29);
d226 1
a226 1
    stringBuffer.append(TEXT_30);
d228 1
a228 1
    stringBuffer.append(TEXT_31);
d230 1
a230 1
    stringBuffer.append(TEXT_32);
d238 1
a238 1
    stringBuffer.append(TEXT_33);
d240 1
a240 1
    stringBuffer.append(TEXT_34);
d243 1
a243 1
    stringBuffer.append(TEXT_35);
d248 1
a248 1
    stringBuffer.append(TEXT_36);
d250 1
a250 1
    stringBuffer.append(TEXT_37);
@


1.3
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d27 1
a27 1
  protected final String TEXT_8 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
d29 28
a56 25
  protected final String TEXT_10 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_11 = "();" + NL + "\t\t\t";
  protected final String TEXT_12 = " nextValue;";
  protected final String TEXT_13 = NL + "\t\t\tint nodeVID;";
  protected final String TEXT_14 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_15 = " it = ";
  protected final String TEXT_16 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_17 = ") it.next();";
  protected final String TEXT_18 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_19 = ";";
  protected final String TEXT_20 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_22 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t}";
  protected final String TEXT_24 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_26 = " modelElement = (";
  protected final String TEXT_27 = ") diagram.getElement();" + NL + "\t\tList result = new LinkedList();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_28 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_29 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_30 = NL + "\t\tcase ";
  protected final String TEXT_31 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ";";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_34 = NL;
d176 9
a185 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d187 8
d198 3
a200 1
    stringBuffer.append(TEXT_13);
d211 1
a211 1
    stringBuffer.append(TEXT_14);
d213 1
a213 1
    stringBuffer.append(TEXT_15);
d215 1
a215 1
    stringBuffer.append(TEXT_16);
d217 1
a217 1
    stringBuffer.append(TEXT_17);
d221 1
a221 1
    stringBuffer.append(TEXT_18);
d223 1
a223 1
    stringBuffer.append(TEXT_19);
d227 1
a227 1
    stringBuffer.append(TEXT_20);
d229 1
a229 1
    stringBuffer.append(TEXT_21);
d231 1
a231 1
    stringBuffer.append(TEXT_22);
d235 1
a235 1
    stringBuffer.append(TEXT_23);
d240 1
a240 1
    stringBuffer.append(TEXT_24);
d242 1
a242 1
    stringBuffer.append(TEXT_25);
d244 1
a244 1
    stringBuffer.append(TEXT_26);
d246 1
a246 1
    stringBuffer.append(TEXT_27);
d248 1
a248 1
    stringBuffer.append(TEXT_28);
d250 1
a250 1
    stringBuffer.append(TEXT_29);
d258 1
a258 1
    stringBuffer.append(TEXT_30);
d260 1
a260 1
    stringBuffer.append(TEXT_31);
d263 1
a263 1
    stringBuffer.append(TEXT_32);
d268 1
a268 1
    stringBuffer.append(TEXT_33);
d270 1
a270 1
    stringBuffer.append(TEXT_34);
@


1.2
log
@Copilation error corrected in case of multiplicity = 1
@
text
@d136 9
@


1.1
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d32 22
a53 21
  protected final String TEXT_13 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_14 = " it = ";
  protected final String TEXT_15 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_16 = ") it.next();";
  protected final String TEXT_17 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_18 = ";";
  protected final String TEXT_19 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_20 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_21 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\t}";
  protected final String TEXT_23 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List getSemanticConnectionsList() {" + NL + "\t\tDiagram diagram = (Diagram) getHost().getModel();" + NL + "\t\t";
  protected final String TEXT_25 = " modelElement = (";
  protected final String TEXT_26 = ") diagram.getElement();" + NL + "\t\tList result = new LinkedList();" + NL + "\t\tfor (Iterator diagramElements = modelElement.eContents().iterator(); diagramElements.hasNext();) {" + NL + "\t\t\tEObject nextDiagramElement = (EObject) diagramElements.next();" + NL + "\t\t\tfor (Iterator childElements = nextDiagramElement.eContents().iterator(); childElements.hasNext();) {" + NL + "\t\t\t\tEObject nextChild = (EObject) childElements.next();" + NL + "\t\t\t\tif (";
  protected final String TEXT_27 = ".INSTANCE.getLinkWithClassVisualID(nextChild) != -1) {" + NL + "\t\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getSourceElement(EObject relationship) {" + NL + "\t\treturn relationship.eContainer();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected EObject getTargetElement(EObject relationship) {" + NL + "\t\tint vID = ";
  protected final String TEXT_28 = ".INSTANCE.getLinkWithClassVisualID(relationship);" + NL + "\t\tswitch (vID) {";
  protected final String TEXT_29 = NL + "\t\tcase ";
  protected final String TEXT_30 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_31 = ";";
  protected final String TEXT_32 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * For now we are skipping links which was generated based on \"GenLinkReferenceOnly\" classes" + NL + "\t * since they do not handle any domain model objects inside, so we can not process them using" + NL + "\t * CanonicalConnectionEditPolicy class" + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldIncludeConnection(Edge connector, List children) {" + NL + "\t\treturn super.shouldIncludeConnection(connector, children) && connector.getElement() != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_33 = NL;
d169 7
d182 1
a182 1
    stringBuffer.append(TEXT_13);
d184 1
a184 1
    stringBuffer.append(TEXT_14);
d186 1
a186 1
    stringBuffer.append(TEXT_15);
d188 1
a188 1
    stringBuffer.append(TEXT_16);
d192 1
a192 1
    stringBuffer.append(TEXT_17);
d194 1
a194 1
    stringBuffer.append(TEXT_18);
d198 1
a198 1
    stringBuffer.append(TEXT_19);
d200 1
a200 1
    stringBuffer.append(TEXT_20);
d202 1
a202 1
    stringBuffer.append(TEXT_21);
d206 1
a206 1
    stringBuffer.append(TEXT_22);
d211 1
a211 1
    stringBuffer.append(TEXT_23);
a212 2
    stringBuffer.append(TEXT_24);
    stringBuffer.append(modelElementInterfaceName);
d216 1
a216 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d220 2
d229 1
a229 1
    stringBuffer.append(TEXT_29);
d231 1
a231 1
    stringBuffer.append(TEXT_30);
d234 1
a234 1
    stringBuffer.append(TEXT_31);
d239 1
a239 1
    stringBuffer.append(TEXT_32);
d241 1
a241 1
    stringBuffer.append(TEXT_33);
@

