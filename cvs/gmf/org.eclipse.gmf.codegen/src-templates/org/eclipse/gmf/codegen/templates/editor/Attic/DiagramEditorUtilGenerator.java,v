head	1.56;
access;
symbols
	v20081022-1925:1.56
	v20081015-1925:1.56
	v20081008-1925:1.56
	v20081001-1925:1.56
	v20080924-1925:1.56
	v20080917-1925:1.56
	v20080911-1728:1.56
	v20080910-1520:1.56
	v20080903-1520:1.56
	v20080827-1520:1.56
	v20080813-1520:1.56
	v20080806-1520:1.56
	v20070202-0200:1.34
	v20070103-0300:1.55
	M4_20:1.55
	v20061222-1800:1.55
	v20061218-1200:1.55
	v20061214-0000:1.55
	v20061120-1300:1.50
	M3_20:1.47
	v20061117-0800:1.47
	v20061027-1200:1.34
	v20061020-1000:1.34
	v20061013-1330:1.38
	v20060919-0800:1.34
	v20060907-1100:1.34
	M1_20:1.35
	v20060904-1500:1.35
	v20060824-1600:1.34
	v20060817-1500:1.34
	v20060728-0500:1.34
	v20060713-1700:1.34
	R1_0_maintenance:1.34.0.2
	R1_0:1.34
	v20060627-1200:1.34
	v20060626-1420:1.34
	v20060620-0400:1.34
	v20060616-1400:1.34
	v20060616-1200:1.34
	v20060609-1400:1.34
	v20060531-1730:1.33
	v20060530-1930:1.33
	v20060526-1200:1.31
	v20060519-1300:1.31
	v20060519-0800:1.31
	v20060512-1000:1.30
	I20060512-1000:1.30
	I20060505-1400:1.28
	I20060428-1300:1.27
	I20060424-0500:1.27
	I20060424-0300:1.27
	M6_10:1.27
	I20060407-1200:1.24
	I20060331-1000:1.22
	I20060324-0300:1.21
	I20060317-1300:1.20
	I20060317-1200:1.20
	I20060316-1300:1.20
	I20060309-1300:1.20
	M5_10:1.18
	S20060303-1600:1.18
	I20060227-1730:1.16
	I20060216-1945:1.15
	I20060210-1715:1.15
	I20060209-1815:1.15
	I20060203-0830:1.10
	I20060202-1415:1.10
	I20060129-1145:1.10
	I20060127-0900:1.10
	I20060120-1530:1.8
	I20060113-1700:1.8
	M4_10:1.8
	I20060107-1100:1.8
	I20060105-1630:1.8
	I20051230-1230:1.8
	I20051223-1100:1.8
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.7
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.5
	I20051106-0900:1.4
	v20051030:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.56
date	2007.02.02.19.45.10;	author atikhomirov;	state dead;
branches;
next	1.55;
commitid	1a2145c394c34567;

1.55
date	2006.12.11.09.58.32;	author radvorak;	state Exp;
branches;
next	1.54;
commitid	5d2a457d2bc44567;

1.54
date	2006.12.07.13.09.08;	author ashatalin;	state Exp;
branches;
next	1.53;
commitid	58e6457812734567;

1.53
date	2006.12.01.19.10.27;	author radvorak;	state Exp;
branches;
next	1.52;
commitid	144145707e224567;

1.52
date	2006.11.22.14.59.29;	author dstadnik;	state Exp;
branches;
next	1.51;
commitid	2e20456465d04567;

1.51
date	2006.11.21.11.43.34;	author dstadnik;	state Exp;
branches;
next	1.50;
commitid	109b4562e6644567;

1.50
date	2006.11.20.18.46.04;	author ashatalin;	state Exp;
branches;
next	1.49;
commitid	2b754561f7eb4567;

1.49
date	2006.11.17.12.15.36;	author dstadnik;	state Exp;
branches;
next	1.48;
commitid	153d455da7e74567;

1.48
date	2006.11.17.11.46.55;	author dstadnik;	state Exp;
branches;
next	1.47;
commitid	3ca455da12e4567;

1.47
date	2006.11.10.15.56.09;	author ashatalin;	state Exp;
branches;
next	1.46;
commitid	7c954554a1184567;

1.46
date	2006.11.03.20.42.47;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.11.03.12.28.31;	author dstadnik;	state Exp;
branches;
next	1.44;

1.44
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.10.24.17.25.11;	author dstadnik;	state Exp;
branches;
next	1.42;

1.42
date	2006.10.24.15.55.34;	author dstadnik;	state Exp;
branches;
next	1.41;

1.41
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.40;

1.40
date	2006.10.19.13.49.53;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.09.29.18.48.22;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.29.17.02.46;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.09.27.17.03.34;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.08.01.18.02.34;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.05.29.13.55.19;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.15.17.30.44;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.10.17.20.15;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.10.14.05.58;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.03.19.19.34;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.24;

1.24
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.06.13.05.16;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.03.29.15.01.32;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.03.18.03.12.51;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.07.16.41.22;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.28.18.15.00;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.17.12.02.07;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.26.18.36.27;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.26.13.36.41;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.20.18.29.34;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.15.00.13.01;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.56
log
@DiagramEditorUtil with xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.emf.ecore.*;

public class DiagramEditorUtilGenerator
{
  protected static String nl;
  public static synchronized DiagramEditorUtilGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DiagramEditorUtilGenerator result = new DiagramEditorUtilGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean openDiagram(Resource diagram) throws PartInitException {";
  protected final String TEXT_7 = NL + "\t\treturn ";
  protected final String TEXT_8 = ".openEditor((";
  protected final String TEXT_9 = ") diagram.getContents().get(0));";
  protected final String TEXT_10 = NL + "\t\t";
  protected final String TEXT_11 = " page = ";
  protected final String TEXT_12 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();" + NL + "\t\tpage.openEditor(new ";
  protected final String TEXT_13 = "(diagram.getURI()), ";
  protected final String TEXT_14 = ".ID);" + NL + "\t\treturn true;";
  protected final String TEXT_15 = NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void setCharset(URI uri) {" + NL + "\t\t";
  protected final String TEXT_17 = " file = getFile(uri);" + NL + "\t\tif (file == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\tfile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_18 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_19 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Unable to set charset for file \" + file.getFullPath(), e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static IFile getFile(URI uri) {" + NL + "\t\tif (uri.toString().startsWith(\"platform:/resource\")) { //$NON-NLS-1$" + NL + "\t\t\tString path = uri.toString().substring(\"platform:/resource\".length()); //$NON-NLS-1$" + NL + "\t\t\t";
  protected final String TEXT_21 = " workspaceResource =" + NL + "\t\t\t\t";
  protected final String TEXT_22 = ".getWorkspace().getRoot().findMember(new ";
  protected final String TEXT_23 = "(path));" + NL + "\t\t\tif (workspaceResource instanceof ";
  protected final String TEXT_24 = ") {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_25 = ") workspaceResource;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean exists(";
  protected final String TEXT_27 = " path) {";
  protected final String TEXT_28 = NL + "\t\treturn ";
  protected final String TEXT_29 = ".getWorkspace().getRoot().exists(path);";
  protected final String TEXT_30 = NL + "\t\treturn path.toFile().exists();";
  protected final String TEXT_31 = NL + "\t}" + NL + "" + NL + "\t/**";
  protected final String TEXT_32 = NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>";
  protected final String TEXT_33 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */";
  protected final String TEXT_34 = NL + "\tpublic static final Resource createDiagram(URI diagramURI,";
  protected final String TEXT_35 = NL + "\t\t\tURI modelURI,";
  protected final String TEXT_36 = NL + "\t\t\tIProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);";
  protected final String TEXT_37 = NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);";
  protected final String TEXT_38 = NL + "\t\tfinal String diagramName = diagramURI.lastSegment();" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_39 = NL + "\t\t\t\t";
  protected final String TEXT_40 = " model = createInitialModel();" + NL + "\t\t\t\tattachModelToResource(model, ";
  protected final String TEXT_41 = "model";
  protected final String TEXT_42 = "diagram";
  protected final String TEXT_43 = "Resource);";
  protected final String TEXT_44 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_45 = NL + "\t\t\t\t";
  protected final String TEXT_46 = "(";
  protected final String TEXT_47 = ") ";
  protected final String TEXT_48 = "model, ";
  protected final String TEXT_49 = NL + "\t\t\t\t\t";
  protected final String TEXT_50 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_51 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramName);";
  protected final String TEXT_52 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_53 = "(";
  protected final String TEXT_54 = ") ";
  protected final String TEXT_55 = "model);";
  protected final String TEXT_56 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_57 = " options = new ";
  protected final String TEXT_58 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_59 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_60 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_61 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_62 = NL + "\t\t\t\t";
  protected final String TEXT_63 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_64 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_65 = NL + "\t\tsetCharset(modelURI);";
  protected final String TEXT_66 = NL + "\t\tsetCharset(diagramURI);";
  protected final String TEXT_67 = NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_68 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_69 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_70 = ".";
  protected final String TEXT_71 = ".create";
  protected final String TEXT_72 = "();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * Store model element in the resource." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void attachModelToResource(";
  protected final String TEXT_73 = " model, Resource resource) {";
  protected final String TEXT_74 = NL + "\t\tresource.getContents().add(";
  protected final String TEXT_75 = "createInitialRoot(";
  protected final String TEXT_76 = "model";
  protected final String TEXT_77 = ")";
  protected final String TEXT_78 = ");" + NL + "\t}" + NL;
  protected final String TEXT_79 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_80 = " createInitialRoot(";
  protected final String TEXT_81 = " model) {";
  protected final String TEXT_82 = NL + "\t\treturn ";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = ") ";
  protected final String TEXT_85 = "model;";
  protected final String TEXT_86 = NL + "\t\t";
  protected final String TEXT_87 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_88 = ".";
  protected final String TEXT_89 = ".create";
  protected final String TEXT_90 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_91 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_92 = NL + "\t}";
  protected final String TEXT_93 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static void selectElementsInDiagram(";
  protected final String TEXT_94 = " diagramPart, ";
  protected final String TEXT_95 = "/*EditPart*/ editParts) {" + NL + "\t\tdiagramPart.getDiagramGraphicalViewer().deselectAll();" + NL + "" + NL + "\t\t";
  protected final String TEXT_96 = " firstPrimary = null;" + NL + "\t\tfor (java.util.Iterator it = editParts.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_97 = " nextPart = (";
  protected final String TEXT_98 = ") it.next();" + NL + "\t\t\tdiagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);" + NL + "\t\t\tif(firstPrimary == null && nextPart instanceof ";
  protected final String TEXT_99 = ") {" + NL + "\t\t\t\tfirstPrimary = nextPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\tif(!editParts.isEmpty()) {" + NL + "\t\t\tdiagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (";
  protected final String TEXT_100 = ")editParts.get(0));" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static org.eclipse.gmf.runtime.notation.View findView(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart, org.eclipse.emf.ecore.EObject targetElement, LazyElement2ViewMap lazyElement2ViewMap) {" + NL + "\t\tboolean hasStructuralURI = false;\t\t\t\t\t\t" + NL + "\t\tif(targetElement.eResource() instanceof org.eclipse.emf.ecore.xmi.XMLResource) {" + NL + "\t\t\thasStructuralURI = ((org.eclipse.emf.ecore.xmi.XMLResource)targetElement.eResource()).getID(targetElement) == null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\torg.eclipse.gmf.runtime.notation.View view = null;" + NL + "\t\tif(hasStructuralURI && !lazyElement2ViewMap.getElement2ViewMap().isEmpty()) {" + NL + "\t\t\tview = (org.eclipse.gmf.runtime.notation.View)lazyElement2ViewMap.getElement2ViewMap().get(targetElement);" + NL + "\t\t} else if (findElementsInDiagramByID(diagramEditPart, targetElement, lazyElement2ViewMap.editPartTmpHolder) > 0) {" + NL + "\t\t\torg.eclipse.gef.EditPart editPart = (EditPart) lazyElement2ViewMap.editPartTmpHolder.get(0);" + NL + "\t\t\tlazyElement2ViewMap.editPartTmpHolder.clear();" + NL + "\t\t\tview = editPart.getModel() instanceof org.eclipse.gmf.runtime.notation.View ? (org.eclipse.gmf.runtime.notation.View) editPart.getModel() : null;" + NL + "\t\t}" + NL + "\t" + NL + "\t\treturn (view == null) ? diagramEditPart.getDiagramView() : view;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int findElementsInDiagramByID(org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramPart, org.eclipse.emf.ecore.EObject element, java.util.List editPartCollector) {" + NL + "\t\torg.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer viewer = (org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramGraphicalViewer) diagramPart.getViewer();" + NL + "\t\tfinal int intialNumOfEditParts = editPartCollector.size();" + NL + "\t\t" + NL + "\t\tif (element instanceof org.eclipse.gmf.runtime.notation.View) { // support notation element lookup" + NL + "\t\t\torg.eclipse.gef.EditPart editPart = (org.eclipse.gef.EditPart) viewer.getEditPartRegistry().get(element);" + NL + "\t\t\tif (editPart != null) {" + NL + "\t\t\t\teditPartCollector.add(editPart);" + NL + "\t\t\t\treturn 1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\tString elementID = org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil.getProxyID(element);" + NL + "\t\tjava.util.List associatedParts = viewer.findEditPartsForElement(elementID, org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart.class);" + NL + "\t\t// perform the possible hierarchy disjoint -> take the top-most parts only" + NL + "\t\tfor (java.util.Iterator editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {" + NL + "\t\t\torg.eclipse.gef.EditPart nextPart = (org.eclipse.gef.EditPart) editPartIt.next();" + NL + "\t\t\torg.eclipse.gef.EditPart parentPart = nextPart.getParent();" + NL + "\t\t\twhile (parentPart != null && !associatedParts.contains(parentPart)) {" + NL + "\t\t\t\tparentPart = parentPart.getParent();" + NL + "\t\t\t}" + NL + "\t\t\tif (parentPart == null) {" + NL + "\t\t\t\teditPartCollector.add(nextPart);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\tif (intialNumOfEditParts == editPartCollector.size()) {" + NL + "\t\t\tif (!associatedParts.isEmpty()) {" + NL + "\t\t\t\teditPartCollector.add(associatedParts.iterator().next());" + NL + "\t\t\t} else {" + NL + "\t\t\t\tif (element.eContainer() != null) {" + NL + "\t\t\t\t\treturn findElementsInDiagramByID(diagramPart, element.eContainer(), editPartCollector);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn editPartCollector.size() - intialNumOfEditParts;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class LazyElement2ViewMap {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate java.util.Map element2ViewMap;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate org.eclipse.gmf.runtime.notation.View scope;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tprivate java.util.Set elementSet;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic final java.util.List editPartTmpHolder = new java.util.ArrayList();" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic LazyElement2ViewMap(org.eclipse.gmf.runtime.notation.View scope, java.util.Set elements) {" + NL + "\t\t\tthis.scope = scope;" + NL + "\t\t\tthis.elementSet = elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tpublic final java.util.Map getElement2ViewMap() {" + NL + "\t\t\tif(element2ViewMap == null) {" + NL + "\t\t\t\telement2ViewMap = new java.util.HashMap();" + NL + "\t\t\t\t// map possible notation elements to itself as these can't be found by view.getElement()" + NL + "\t\t\t\tfor (java.util.Iterator it = elementSet.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\torg.eclipse.emf.ecore.EObject element = (org.eclipse.emf.ecore.EObject) it.next();" + NL + "\t\t\t\t\tif(element instanceof org.eclipse.gmf.runtime.notation.View) {" + NL + "\t\t\t\t\t\torg.eclipse.gmf.runtime.notation.View view = (org.eclipse.gmf.runtime.notation.View) element;" + NL + "\t\t\t\t\t\tif(view.getDiagram() == scope.getDiagram()) {" + NL + "\t\t\t\t\t\t\telement2ViewMap.put(element, element); // take only those that part of our diagram" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\tbuildElement2ViewMap(scope, element2ViewMap, elementSet);\t\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn element2ViewMap;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tstatic java.util.Map buildElement2ViewMap(org.eclipse.gmf.runtime.notation.View parentView, java.util.Map element2ViewMap, java.util.Set elements) {" + NL + "\t\t\tif(elements.size() == element2ViewMap.size()) return element2ViewMap;" + NL + "" + NL + "\t\t\tif(parentView.isSetElement() && !element2ViewMap.containsKey(parentView.getElement()) && elements.contains(parentView.getElement())) {" + NL + "\t\t\t\telement2ViewMap.put(parentView.getElement(), parentView);" + NL + "\t\t\t\tif(elements.size() == element2ViewMap.size()) return element2ViewMap;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (java.util.Iterator it = parentView.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tbuildElement2ViewMap((org.eclipse.gmf.runtime.notation.View) it.next(), element2ViewMap, elements);\t\t\t" + NL + "\t\t\t\tif(elements.size() == element2ViewMap.size()) return element2ViewMap;" + NL + "\t\t\t}" + NL + "\t\t\tfor (java.util.Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\tbuildElement2ViewMap((org.eclipse.gmf.runtime.notation.View) it.next(), element2ViewMap, elements);\t\t\t" + NL + "\t\t\t\tif(elements.size() == element2ViewMap.size()) return element2ViewMap;" + NL + "\t\t\t}" + NL + "\t\t\tfor (java.util.Iterator it = parentView.getSourceEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\tbuildElement2ViewMap((org.eclipse.gmf.runtime.notation.View) it.next(), element2ViewMap, elements);\t\t\t" + NL + "\t\t\t\tif(elements.size() == element2ViewMap.size()) return element2ViewMap;" + NL + "\t\t\t}\t" + NL + "\t\t\treturn element2ViewMap;" + NL + "\t\t}" + NL + "\t} //LazyElement2ViewMap\t" + NL + "}";
  protected final String TEXT_101 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_6);
    if (editorGen.getApplication() == null) {
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.util.EditUIUtil"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_9);
    } else {
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPage"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(editorGen.getEditor().getQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    }
    stringBuffer.append(TEXT_15);
    if (editorGen.getApplication() == null) {
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IResource"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_25);
    }
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
    stringBuffer.append(TEXT_27);
    if (editorGen.getApplication() == null) {
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_29);
    } else {
    stringBuffer.append(TEXT_30);
    }
    stringBuffer.append(TEXT_31);
    if (editorGen.getApplication() == null) {
    stringBuffer.append(TEXT_32);
    }
    stringBuffer.append(TEXT_33);
    final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
    stringBuffer.append(TEXT_34);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_35);
    }
    stringBuffer.append(TEXT_36);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_37);
    }
    stringBuffer.append(TEXT_38);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_40);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_41);
    } else {
    stringBuffer.append(TEXT_42);
    }
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_45);
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_47);
    }
    stringBuffer.append(TEXT_48);
    }
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
    stringBuffer.append(TEXT_51);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_52);
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_54);
    }
    stringBuffer.append(TEXT_55);
    }
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource"));
    stringBuffer.append(TEXT_59);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_60);
    }
    stringBuffer.append(TEXT_61);
    // TODO CommandResult.newErrorCommandResult(e) would be better? 
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_64);
    if (editorGen.getApplication() == null) {
    	if (standaloneDomainModel) {
    stringBuffer.append(TEXT_65);
    	}
    stringBuffer.append(TEXT_66);
    }
    stringBuffer.append(TEXT_67);
    if (genDiagram.getDomainDiagramElement() != null) {
	final String diagramElementImportedName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
	final GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();
    stringBuffer.append(TEXT_68);
    stringBuffer.append(diagramElementImportedName);
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
    stringBuffer.append(TEXT_71);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getName());
    stringBuffer.append(TEXT_72);
    stringBuffer.append(diagramElementImportedName);
    stringBuffer.append(TEXT_73);
    	boolean createDocRoot = standaloneDomainModel /*may need docRoot only if separate file for domain model*/ && domainGenPackage.hasDocumentRoot();
	boolean generateCreateInitialRoot = genDiagram.getDomainDiagramElement().isExternalInterface() || createDocRoot;
    stringBuffer.append(TEXT_74);
    if (generateCreateInitialRoot) {
    stringBuffer.append(TEXT_75);
    }
    stringBuffer.append(TEXT_76);
    if (generateCreateInitialRoot) {
    stringBuffer.append(TEXT_77);
    }
    stringBuffer.append(TEXT_78);
    	if (generateCreateInitialRoot) {
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(diagramElementImportedName);
    stringBuffer.append(TEXT_81);
    		if (!createDocRoot) { 
    stringBuffer.append(TEXT_82);
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_84);
    }
    stringBuffer.append(TEXT_85);
    		} else {
			// would be better to get GenClass for docRoot and directly use setter
			GenClass docRoot = domainGenPackage.getDocumentRoot();
			String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
			for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
				GenFeature genFeature = (GenFeature) it.next();
				boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
				// Perhaps, makes sense to check instanceof EReference && isContainment
				if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
					featureAccessor = genFeature.getAccessorName();
					break;
				}
			} /*for*/

    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName(docRoot.getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
    stringBuffer.append(TEXT_89);
    stringBuffer.append(docRoot.getName());
    stringBuffer.append(TEXT_90);
    stringBuffer.append(featureAccessor);
    stringBuffer.append(TEXT_91);
    		}
    stringBuffer.append(TEXT_92);
    	} /*if generateCreateInitialRoot*/
} /* domainDiagramElement != null */
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_100);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_101);
    return stringBuffer.toString();
  }
}
@


1.55
log
@[166814] Refactor diagram editor Audits&Metrics support
@
text
@@


1.54
log
@Separate method generated for saving newly created model object inside resource. Could be necessary to decorate model object on saving it in the resource set.
@
text
@d112 1
a112 1
  protected final String TEXT_93 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int findElementsInDiagram(";
d114 7
a120 22
  protected final String TEXT_95 = " elementURI, ";
  protected final String TEXT_96 = "/*EditPart*/ editPartCollector) {" + NL + "\t\tfinal int originalNumOfEditParts = editPartCollector.size();" + NL + "\t\t";
  protected final String TEXT_97 = " element = null;" + NL + "\t\ttry {" + NL + "\t\t\telement = diagramPart.getDiagram().eResource().getResourceSet().getEObject(elementURI, false);" + NL + "\t\t} catch(RuntimeException e) {" + NL + "\t\t\t";
  protected final String TEXT_98 = ".getInstance().logError(\"Failed to get EObject by uri: \" + elementURI, e); //$NON-NLS-1$" + NL + "\t\t\treturn 0;" + NL + "\t\t}" + NL + "\t\tif(element == null) {" + NL + "\t\t\treturn 0;" + NL + "\t\t} else if(element instanceof ";
  protected final String TEXT_99 = ") {" + NL + "\t\t\t";
  protected final String TEXT_100 = " editPart = (";
  protected final String TEXT_101 = ")diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(element);" + NL + "\t\t\tif(editPart != null) {" + NL + "\t\t\t\teditPartCollector.add(editPart);" + NL + "\t\t\t\treturn 1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tString elementID = ";
  protected final String TEXT_102 = ".getProxyID(element);" + NL + "\t\t";
  protected final String TEXT_103 = " associatedParts = diagramPart.getDiagramGraphicalViewer()" + NL + "\t\t\t.findEditPartsForElement(elementID, ";
  protected final String TEXT_104 = ".class);" + NL + "\t\t// peform the possible hierarchy disjoint -> take the top-most parts" + NL + "\t\tfor (";
  protected final String TEXT_105 = " editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_106 = " nextPart = (org.eclipse.gef.EditPart)editPartIt.next();" + NL + "\t\t\t";
  protected final String TEXT_107 = " parentPart = nextPart.getParent();" + NL + "\t\t\twhile(parentPart != null && !associatedParts.contains(parentPart)) {" + NL + "\t\t\t\tparentPart = parentPart.getParent();" + NL + "\t\t\t}\t\t" + NL + "\t\t\tif(parentPart == null) {" + NL + "\t\t\t\teditPartCollector.add(nextPart);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif(originalNumOfEditParts == editPartCollector.size()) {" + NL + "\t\t\tif(!associatedParts.isEmpty()) {" + NL + "\t\t\t\teditPartCollector.add(associatedParts.iterator().next());" + NL + "\t\t\t} else {" + NL + "\t\t\t\telement = element.eContainer();" + NL + "\t\t\t\tif(element != null) {" + NL + "\t\t\t\t\treturn findElementsInDiagram(diagramPart, ";
  protected final String TEXT_108 = ".getURI(element), editPartCollector);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn editPartCollector.size() - originalNumOfEditParts;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static void selectElementsInDiagram(";
  protected final String TEXT_109 = " diagramPart, ";
  protected final String TEXT_110 = "/*EditPart*/ editParts) {" + NL + "\t\tdiagramPart.getDiagramGraphicalViewer().deselectAll();" + NL + "" + NL + "\t\t";
  protected final String TEXT_111 = " firstPrimary = null;" + NL + "\t\tfor (java.util.Iterator it = editParts.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_112 = " nextPart = (";
  protected final String TEXT_113 = ") it.next();" + NL + "\t\t\tdiagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);" + NL + "\t\t\tif(firstPrimary == null && nextPart instanceof ";
  protected final String TEXT_114 = ") {" + NL + "\t\t\t\tfirstPrimary = nextPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\tif(!editParts.isEmpty()) {" + NL + "\t\t\tdiagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (";
  protected final String TEXT_115 = ")editParts.get(0));" + NL + "\t\t}" + NL + "\t}\t" + NL + "}";
  protected final String TEXT_116 = NL;
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
a352 30
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil"));
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IPrimaryEditPart"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
    stringBuffer.append(TEXT_115);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_116);
@


1.53
log
@[161018] Metrics View should support navigation to destination diagram element.
@
text
@d59 77
a135 70
  protected final String TEXT_40 = " model = createInitialModel();";
  protected final String TEXT_41 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_42 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_43 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_44 = NL + "\t\t\t\t";
  protected final String TEXT_45 = "(";
  protected final String TEXT_46 = ") ";
  protected final String TEXT_47 = "model, ";
  protected final String TEXT_48 = NL + "\t\t\t\t\t";
  protected final String TEXT_49 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_50 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramName);";
  protected final String TEXT_51 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_52 = "(";
  protected final String TEXT_53 = ") ";
  protected final String TEXT_54 = "model);";
  protected final String TEXT_55 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_56 = " options = new ";
  protected final String TEXT_57 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_58 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_59 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_60 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_61 = NL + "\t\t\t\t";
  protected final String TEXT_62 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_63 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_64 = NL + "\t\tsetCharset(modelURI);";
  protected final String TEXT_65 = NL + "\t\tsetCharset(diagramURI);";
  protected final String TEXT_66 = NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_67 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_68 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_69 = ".";
  protected final String TEXT_70 = ".create";
  protected final String TEXT_71 = "();" + NL + "\t}" + NL;
  protected final String TEXT_72 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_73 = " createInitialRoot(";
  protected final String TEXT_74 = " model) {";
  protected final String TEXT_75 = NL + "\t\treturn ";
  protected final String TEXT_76 = "(";
  protected final String TEXT_77 = ") ";
  protected final String TEXT_78 = "model;";
  protected final String TEXT_79 = NL + "\t\t";
  protected final String TEXT_80 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_81 = ".";
  protected final String TEXT_82 = ".create";
  protected final String TEXT_83 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_84 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_85 = NL + "\t}";
  protected final String TEXT_86 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int findElementsInDiagram(";
  protected final String TEXT_87 = " diagramPart, ";
  protected final String TEXT_88 = " elementURI, ";
  protected final String TEXT_89 = "/*EditPart*/ editPartCollector) {" + NL + "\t\tfinal int originalNumOfEditParts = editPartCollector.size();" + NL + "\t\t";
  protected final String TEXT_90 = " element = null;" + NL + "\t\ttry {" + NL + "\t\t\telement = diagramPart.getDiagram().eResource().getResourceSet().getEObject(elementURI, false);" + NL + "\t\t} catch(RuntimeException e) {" + NL + "\t\t\t";
  protected final String TEXT_91 = ".getInstance().logError(\"Failed to get EObject by uri: \" + elementURI, e); //$NON-NLS-1$" + NL + "\t\t\treturn 0;" + NL + "\t\t}" + NL + "\t\tif(element == null) {" + NL + "\t\t\treturn 0;" + NL + "\t\t} else if(element instanceof ";
  protected final String TEXT_92 = ") {" + NL + "\t\t\t";
  protected final String TEXT_93 = " editPart = (";
  protected final String TEXT_94 = ")diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(element);" + NL + "\t\t\tif(editPart != null) {" + NL + "\t\t\t\teditPartCollector.add(editPart);" + NL + "\t\t\t\treturn 1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tString elementID = ";
  protected final String TEXT_95 = ".getProxyID(element);" + NL + "\t\t";
  protected final String TEXT_96 = " associatedParts = diagramPart.getDiagramGraphicalViewer()" + NL + "\t\t\t.findEditPartsForElement(elementID, ";
  protected final String TEXT_97 = ".class);" + NL + "\t\t// peform the possible hierarchy disjoint -> take the top-most parts" + NL + "\t\tfor (";
  protected final String TEXT_98 = " editPartIt = associatedParts.iterator(); editPartIt.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_99 = " nextPart = (org.eclipse.gef.EditPart)editPartIt.next();" + NL + "\t\t\t";
  protected final String TEXT_100 = " parentPart = nextPart.getParent();" + NL + "\t\t\twhile(parentPart != null && !associatedParts.contains(parentPart)) {" + NL + "\t\t\t\tparentPart = parentPart.getParent();" + NL + "\t\t\t}\t\t" + NL + "\t\t\tif(parentPart == null) {" + NL + "\t\t\t\teditPartCollector.add(nextPart);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tif(originalNumOfEditParts == editPartCollector.size()) {" + NL + "\t\t\tif(!associatedParts.isEmpty()) {" + NL + "\t\t\t\teditPartCollector.add(associatedParts.iterator().next());" + NL + "\t\t\t} else {" + NL + "\t\t\t\telement = element.eContainer();" + NL + "\t\t\t\tif(element != null) {" + NL + "\t\t\t\t\treturn findElementsInDiagram(diagramPart, ";
  protected final String TEXT_101 = ".getURI(element), editPartCollector);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn editPartCollector.size() - originalNumOfEditParts;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static void selectElementsInDiagram(";
  protected final String TEXT_102 = " diagramPart, ";
  protected final String TEXT_103 = "/*EditPart*/ editParts) {" + NL + "\t\tdiagramPart.getDiagramGraphicalViewer().deselectAll();" + NL + "" + NL + "\t\t";
  protected final String TEXT_104 = " firstPrimary = null;" + NL + "\t\tfor (java.util.Iterator it = editParts.iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_105 = " nextPart = (";
  protected final String TEXT_106 = ") it.next();" + NL + "\t\t\tdiagramPart.getDiagramGraphicalViewer().appendSelection(nextPart);" + NL + "\t\t\tif(firstPrimary == null && nextPart instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t\tfirstPrimary = nextPart;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\tif(!editParts.isEmpty()) {" + NL + "\t\t\tdiagramPart.getDiagramGraphicalViewer().reveal(firstPrimary != null ? firstPrimary : (";
  protected final String TEXT_108 = ")editParts.get(0));" + NL + "\t\t}" + NL + "\t}\t" + NL + "}";
  protected final String TEXT_109 = NL;
d228 1
a228 1
    	if (standaloneDomainModel) {
d230 1
a230 1
    	} else {
d232 1
a232 4
    
	}
}

d234 2
d237 1
a237 1
    stringBuffer.append(TEXT_44);
d239 1
a239 1
    stringBuffer.append(TEXT_45);
a240 2
    stringBuffer.append(TEXT_46);
    }
d244 2
d247 1
a247 1
    stringBuffer.append(TEXT_49);
d249 1
a249 1
    stringBuffer.append(TEXT_50);
d251 1
a251 1
    stringBuffer.append(TEXT_51);
d253 1
a253 1
    stringBuffer.append(TEXT_52);
a254 2
    stringBuffer.append(TEXT_53);
    }
d258 2
d261 1
a261 1
    stringBuffer.append(TEXT_56);
d263 1
a263 1
    stringBuffer.append(TEXT_57);
d265 1
a265 1
    stringBuffer.append(TEXT_58);
d267 1
a267 1
    stringBuffer.append(TEXT_59);
d269 1
a269 1
    stringBuffer.append(TEXT_60);
a270 2
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d274 2
d278 1
a278 1
    stringBuffer.append(TEXT_64);
d280 1
a280 1
    stringBuffer.append(TEXT_65);
d282 1
a282 1
    stringBuffer.append(TEXT_66);
d284 3
a286 4
final String diagramElementImportedName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());
final GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();

    stringBuffer.append(TEXT_67);
d288 1
a288 1
    stringBuffer.append(TEXT_68);
d290 1
a290 1
    stringBuffer.append(TEXT_69);
d292 1
a292 1
    stringBuffer.append(TEXT_70);
a293 2
    stringBuffer.append(TEXT_71);
    if (standaloneDomainModel /*may need docRoot only if separate file for domain model*/) {
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d297 2
a298 1
    stringBuffer.append(diagramElementImportedName);
d300 1
a300 1
    if (!domainGenPackage.hasDocumentRoot()) { 
d302 1
a302 1
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d308 1
a308 14
    } else {
// would be better to get GenClass for docRoot and directly use setter
GenClass docRoot = domainGenPackage.getDocumentRoot();
String featureAccessor = "null"; // Alternative is: genDiagram.getDomainDiagramElement().getInterfaceName(); although it's a hack. Seems better to fail right away
for (java.util.Iterator it = docRoot.getGenFeatures().iterator(); it.hasNext(); ) {
	GenFeature genFeature = (GenFeature) it.next();
	boolean unspecifiedUpperBound = ETypedElement.UNSPECIFIED_MULTIPLICITY == genFeature.getEcoreFeature().getUpperBound();
	// Perhaps, makes sense to check instanceof EReference && isContainment
	if (genFeature.isSet() && unspecifiedUpperBound && genDiagram.getDomainDiagramElement().equals(genFeature.getTypeGenClass())) {
		featureAccessor = genFeature.getAccessorName();
		break;
	}
} /*for*/

d310 1
a310 1
    stringBuffer.append(importManager.getImportedName(docRoot.getQualifiedInterfaceName()));
d312 1
a312 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d314 1
a314 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d316 1
a316 1
    stringBuffer.append(docRoot.getName());
d318 1
a318 1
    stringBuffer.append(featureAccessor);
d322 14
a335 2
    } /*if standaloneDomainModel*/
} /* domainDiagramElement != null */
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d349 2
a350 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d352 1
a352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart"));
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d362 1
a362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil"));
d368 1
a368 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
d372 1
a372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d374 1
a374 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPart"));
d378 14
d393 1
a393 1
    stringBuffer.append(TEXT_107);
d395 1
a395 1
    stringBuffer.append(TEXT_108);
d397 1
a397 1
    stringBuffer.append(TEXT_109);
@


1.52
log
@[165303] Use one more page in generated wizard to ask for model file when standalone domain model option is set
@
text
@d105 24
a128 2
  protected final String TEXT_86 = NL + "}";
  protected final String TEXT_87 = NL;
d334 44
d379 1
a379 1
    stringBuffer.append(TEXT_87);
@


1.51
log
@refactor: pass uris to diagram editor util
@
text
@d45 13
a57 13
  protected final String TEXT_26 = NL + NL + "\t/**";
  protected final String TEXT_27 = NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>";
  protected final String TEXT_28 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */";
  protected final String TEXT_29 = NL + "\tpublic static final Resource createDiagram(URI diagramURI,";
  protected final String TEXT_30 = NL + "\t\t\tURI modelURI,";
  protected final String TEXT_31 = NL + "\t\t\tIProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(diagramURI);";
  protected final String TEXT_32 = NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(modelURI);";
  protected final String TEXT_33 = NL + "\t\tfinal String diagramName = diagramURI.lastSegment();" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_34 = NL + "\t\t\t\t";
  protected final String TEXT_35 = " model = createInitialModel();";
  protected final String TEXT_36 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_37 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_38 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
d59 48
a106 43
  protected final String TEXT_40 = "(";
  protected final String TEXT_41 = ") ";
  protected final String TEXT_42 = "model, ";
  protected final String TEXT_43 = NL + "\t\t\t\t\t";
  protected final String TEXT_44 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_45 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramName);";
  protected final String TEXT_46 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = ") ";
  protected final String TEXT_49 = "model);";
  protected final String TEXT_50 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_51 = " options = new ";
  protected final String TEXT_52 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_53 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_54 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_55 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_56 = NL + "\t\t\t\t";
  protected final String TEXT_57 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_58 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t\tsetCharset(modelURI);";
  protected final String TEXT_60 = NL + "\t\tsetCharset(diagramURI);";
  protected final String TEXT_61 = NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_62 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_63 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_64 = ".";
  protected final String TEXT_65 = ".create";
  protected final String TEXT_66 = "();" + NL + "\t}" + NL;
  protected final String TEXT_67 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_68 = " createInitialRoot(";
  protected final String TEXT_69 = " model) {";
  protected final String TEXT_70 = NL + "\t\treturn ";
  protected final String TEXT_71 = "(";
  protected final String TEXT_72 = ") ";
  protected final String TEXT_73 = "model;";
  protected final String TEXT_74 = NL + "\t\t";
  protected final String TEXT_75 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_76 = ".";
  protected final String TEXT_77 = ".create";
  protected final String TEXT_78 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_79 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_80 = NL + "\t}";
  protected final String TEXT_81 = NL + "}";
  protected final String TEXT_82 = NL;
d171 2
a173 2
    stringBuffer.append(TEXT_27);
    }
d175 1
a175 1
    final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
d177 1
a177 1
    if (standaloneDomainModel) {
d181 1
a181 1
    if (standaloneDomainModel) {
d185 10
d196 1
a196 1
    stringBuffer.append(TEXT_34);
d198 1
a198 1
    stringBuffer.append(TEXT_35);
d200 1
a200 1
    stringBuffer.append(TEXT_36);
d202 1
a202 1
    stringBuffer.append(TEXT_37);
d207 1
a207 1
    stringBuffer.append(TEXT_38);
d209 1
a209 1
    stringBuffer.append(TEXT_39);
d211 1
a211 1
    stringBuffer.append(TEXT_40);
d213 1
a213 1
    stringBuffer.append(TEXT_41);
d215 1
a215 1
    stringBuffer.append(TEXT_42);
d217 1
a217 1
    stringBuffer.append(TEXT_43);
d219 1
a219 1
    stringBuffer.append(TEXT_44);
d221 1
a221 1
    stringBuffer.append(TEXT_45);
d223 1
a223 1
    stringBuffer.append(TEXT_46);
d225 1
a225 1
    stringBuffer.append(TEXT_47);
d227 1
a227 1
    stringBuffer.append(TEXT_48);
d229 1
a229 1
    stringBuffer.append(TEXT_49);
d231 1
a231 1
    stringBuffer.append(TEXT_50);
d233 1
a233 1
    stringBuffer.append(TEXT_51);
d235 1
a235 1
    stringBuffer.append(TEXT_52);
d237 1
a237 1
    stringBuffer.append(TEXT_53);
d239 1
a239 1
    stringBuffer.append(TEXT_54);
d241 1
a241 1
    stringBuffer.append(TEXT_55);
d243 1
a243 1
    stringBuffer.append(TEXT_56);
d245 1
a245 1
    stringBuffer.append(TEXT_57);
d247 1
a247 1
    stringBuffer.append(TEXT_58);
d250 1
a250 1
    stringBuffer.append(TEXT_59);
d252 1
a252 1
    stringBuffer.append(TEXT_60);
d254 1
a254 1
    stringBuffer.append(TEXT_61);
d259 1
a259 1
    stringBuffer.append(TEXT_62);
d261 1
a261 1
    stringBuffer.append(TEXT_63);
d263 1
a263 1
    stringBuffer.append(TEXT_64);
d265 1
a265 1
    stringBuffer.append(TEXT_65);
d267 1
a267 1
    stringBuffer.append(TEXT_66);
d269 1
a269 1
    stringBuffer.append(TEXT_67);
d271 1
a271 1
    stringBuffer.append(TEXT_68);
d273 1
a273 1
    stringBuffer.append(TEXT_69);
d275 1
a275 1
    stringBuffer.append(TEXT_70);
d277 1
a277 1
    stringBuffer.append(TEXT_71);
d279 1
a279 1
    stringBuffer.append(TEXT_72);
d281 1
a281 1
    stringBuffer.append(TEXT_73);
d296 1
a296 1
    stringBuffer.append(TEXT_74);
d298 1
a298 1
    stringBuffer.append(TEXT_75);
d300 1
a300 1
    stringBuffer.append(TEXT_76);
d302 1
a302 1
    stringBuffer.append(TEXT_77);
d304 1
a304 1
    stringBuffer.append(TEXT_78);
d306 1
a306 1
    stringBuffer.append(TEXT_79);
d308 1
a308 1
    stringBuffer.append(TEXT_80);
d311 1
a311 1
    stringBuffer.append(TEXT_81);
d313 1
a313 1
    stringBuffer.append(TEXT_82);
@


1.50
log
@[164952] - Unable to generate diagram editor without domain model
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d31 71
a101 67
  protected final String TEXT_12 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();" + NL + "\t\t";
  protected final String TEXT_13 = " editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(diagram.getURI().toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\t";
  protected final String TEXT_14 = ".openError(page.getWorkbenchWindow().getShell(), \"Error\"," + NL + "\t\t\t\t\t";
  protected final String TEXT_15 = ".bind(\"There is no editor registered for the file ''{0}''.\", diagram.getURI()));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tpage.openEditor(new ";
  protected final String TEXT_16 = "(diagram.getURI()), editorDescriptor.getId());" + NL + "\t\treturn true;";
  protected final String TEXT_17 = NL + "\t}";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void setCharset(IPath path) {" + NL + "\t\t";
  protected final String TEXT_19 = " file = ";
  protected final String TEXT_20 = ".getWorkspace().getRoot().getFile(path);" + NL + "\t\ttry {" + NL + "\t\t\tfile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_21 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_22 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_23 = ".getInstance().logError(\"Unable to set charset for file \" + path, e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_24 = NL + NL + "\t/**";
  protected final String TEXT_25 = NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>";
  protected final String TEXT_26 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */" + NL + "\tpublic static final Resource createDiagram(IPath containerFullPath, String fileNameParameter, IProgressMonitor progressMonitor) {" + NL + "\t\tfinal String fileName = fileNameParameter;" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tIPath diagramPath = containerFullPath.append(fileName);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(diagramPath.toString()));";
  protected final String TEXT_27 = NL + "\t\tIPath modelPath = diagramPath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_28 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(modelPath.toString()));";
  protected final String TEXT_29 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_30 = NL + "\t\t\t\t";
  protected final String TEXT_31 = " model = createInitialModel();";
  protected final String TEXT_32 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_33 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_34 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_35 = NL + "\t\t\t\t";
  protected final String TEXT_36 = "(";
  protected final String TEXT_37 = ") ";
  protected final String TEXT_38 = "model, ";
  protected final String TEXT_39 = NL + "\t\t\t\t\t";
  protected final String TEXT_40 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_41 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(fileName);";
  protected final String TEXT_42 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_43 = "(";
  protected final String TEXT_44 = ") ";
  protected final String TEXT_45 = "model);";
  protected final String TEXT_46 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_47 = " options = new ";
  protected final String TEXT_48 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_49 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_50 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_51 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = NL + "\t\t\t\t";
  protected final String TEXT_53 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_54 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_55 = NL + "\t\tsetCharset(modelPath);";
  protected final String TEXT_56 = NL + "\t\tsetCharset(diagramPath);";
  protected final String TEXT_57 = NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_58 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_59 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_60 = ".";
  protected final String TEXT_61 = ".create";
  protected final String TEXT_62 = "();" + NL + "\t}" + NL;
  protected final String TEXT_63 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_64 = " createInitialRoot(";
  protected final String TEXT_65 = " model) {";
  protected final String TEXT_66 = NL + "\t\treturn ";
  protected final String TEXT_67 = "(";
  protected final String TEXT_68 = ") ";
  protected final String TEXT_69 = "model;";
  protected final String TEXT_70 = NL + "\t\t";
  protected final String TEXT_71 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_72 = ".";
  protected final String TEXT_73 = ".create";
  protected final String TEXT_74 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_75 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_76 = NL + "\t}";
  protected final String TEXT_77 = NL + "}";
  protected final String TEXT_78 = NL;
d138 1
a138 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorDescriptor"));
d140 1
a140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d142 1
a142 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d144 1
a144 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d146 1
a146 1
    }
d148 1
a148 1
    if (editorGen.getApplication() == null) {
d150 1
a150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d152 1
a152 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d154 1
a154 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d160 1
a160 1
    }
d162 1
a162 1
    if (editorGen.getApplication() == null) {
d166 1
a166 4
    
final boolean standaloneDomainModel = !editorGen.isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
if (standaloneDomainModel) {

d168 1
a168 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d170 1
a170 1
    }
d172 1
a172 2
    
if (genDiagram.getDomainDiagramElement() != null) {
d174 8
d183 1
a183 1
    stringBuffer.append(TEXT_31);
d185 1
a185 1
    stringBuffer.append(TEXT_32);
d187 1
a187 1
    stringBuffer.append(TEXT_33);
d192 1
a192 1
    stringBuffer.append(TEXT_34);
d194 1
a194 1
    stringBuffer.append(TEXT_35);
d196 1
a196 1
    stringBuffer.append(TEXT_36);
d198 1
a198 1
    stringBuffer.append(TEXT_37);
d200 1
a200 1
    stringBuffer.append(TEXT_38);
d202 1
a202 1
    stringBuffer.append(TEXT_39);
d204 1
a204 1
    stringBuffer.append(TEXT_40);
d206 1
a206 1
    stringBuffer.append(TEXT_41);
d208 1
a208 1
    stringBuffer.append(TEXT_42);
d210 1
a210 1
    stringBuffer.append(TEXT_43);
d212 1
a212 1
    stringBuffer.append(TEXT_44);
d214 1
a214 1
    stringBuffer.append(TEXT_45);
d216 1
a216 1
    stringBuffer.append(TEXT_46);
d218 1
a218 1
    stringBuffer.append(TEXT_47);
d220 1
a220 1
    stringBuffer.append(TEXT_48);
d222 1
a222 1
    stringBuffer.append(TEXT_49);
d224 1
a224 1
    stringBuffer.append(TEXT_50);
d226 1
a226 1
    stringBuffer.append(TEXT_51);
d228 1
a228 1
    stringBuffer.append(TEXT_52);
d230 1
a230 1
    stringBuffer.append(TEXT_53);
d232 1
a232 1
    stringBuffer.append(TEXT_54);
d235 1
a235 1
    stringBuffer.append(TEXT_55);
d237 1
a237 1
    stringBuffer.append(TEXT_56);
d239 1
a239 1
    stringBuffer.append(TEXT_57);
d244 1
a244 1
    stringBuffer.append(TEXT_58);
d246 1
a246 1
    stringBuffer.append(TEXT_59);
d248 1
a248 1
    stringBuffer.append(TEXT_60);
d250 1
a250 1
    stringBuffer.append(TEXT_61);
d252 1
a252 1
    stringBuffer.append(TEXT_62);
d254 1
a254 1
    stringBuffer.append(TEXT_63);
d256 1
a256 1
    stringBuffer.append(TEXT_64);
d258 1
a258 1
    stringBuffer.append(TEXT_65);
d260 1
a260 1
    stringBuffer.append(TEXT_66);
d262 1
a262 1
    stringBuffer.append(TEXT_67);
d264 1
a264 1
    stringBuffer.append(TEXT_68);
d266 1
a266 1
    stringBuffer.append(TEXT_69);
d281 1
a281 1
    stringBuffer.append(TEXT_70);
d283 1
a283 1
    stringBuffer.append(TEXT_71);
d285 1
a285 1
    stringBuffer.append(TEXT_72);
d287 1
a287 1
    stringBuffer.append(TEXT_73);
d289 1
a289 1
    stringBuffer.append(TEXT_74);
d291 1
a291 1
    stringBuffer.append(TEXT_75);
d293 1
a293 1
    stringBuffer.append(TEXT_76);
d296 1
a296 1
    stringBuffer.append(TEXT_77);
d298 1
a298 1
    stringBuffer.append(TEXT_78);
@


1.49
log
@remove core.resources dep for rcp app
@
text
@d27 71
a97 70
  protected final String TEXT_8 = ".openEditor((EObject) diagram.getContents().get(0));";
  protected final String TEXT_9 = NL + "\t\t";
  protected final String TEXT_10 = " page = ";
  protected final String TEXT_11 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage();" + NL + "\t\t";
  protected final String TEXT_12 = " editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(diagram.getURI().toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\t";
  protected final String TEXT_13 = ".openError(page.getWorkbenchWindow().getShell(), \"Error\"," + NL + "\t\t\t\t\t";
  protected final String TEXT_14 = ".bind(\"There is no editor registered for the file ''{0}''.\", diagram.getURI()));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tpage.openEditor(new ";
  protected final String TEXT_15 = "(diagram.getURI()), editorDescriptor.getId());" + NL + "\t\treturn true;";
  protected final String TEXT_16 = NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void setCharset(IPath path) {" + NL + "\t\t";
  protected final String TEXT_18 = " file = ";
  protected final String TEXT_19 = ".getWorkspace().getRoot().getFile(path);" + NL + "\t\ttry {" + NL + "\t\t\tfile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_20 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_21 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_22 = ".getInstance().logError(\"Unable to set charset for file \" + path, e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_23 = NL + NL + "\t/**";
  protected final String TEXT_24 = NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>";
  protected final String TEXT_25 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */" + NL + "\tpublic static final Resource createDiagram(IPath containerFullPath, String fileNameParameter, IProgressMonitor progressMonitor) {" + NL + "\t\tfinal String fileName = fileNameParameter;" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tIPath diagramPath = containerFullPath.append(fileName);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(diagramPath.toString()));";
  protected final String TEXT_26 = NL + "\t\tIPath modelPath = diagramPath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_27 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(modelPath.toString()));";
  protected final String TEXT_28 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_29 = NL + "\t\t\t\t";
  protected final String TEXT_30 = " model = createInitialModel();";
  protected final String TEXT_31 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_32 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_33 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_34 = NL + "\t\t\t\t";
  protected final String TEXT_35 = "(";
  protected final String TEXT_36 = ") ";
  protected final String TEXT_37 = "model, ";
  protected final String TEXT_38 = NL + "\t\t\t\t\t";
  protected final String TEXT_39 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_40 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(fileName);";
  protected final String TEXT_41 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_42 = "(";
  protected final String TEXT_43 = ") ";
  protected final String TEXT_44 = "model);";
  protected final String TEXT_45 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_46 = " options = new ";
  protected final String TEXT_47 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_48 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_49 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_50 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_51 = NL + "\t\t\t\t";
  protected final String TEXT_52 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_53 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_54 = NL + "\t\tsetCharset(modelPath);";
  protected final String TEXT_55 = NL + "\t\tsetCharset(diagramPath);";
  protected final String TEXT_56 = NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_57 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_58 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = ".create";
  protected final String TEXT_61 = "();" + NL + "\t}" + NL;
  protected final String TEXT_62 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_63 = " createInitialRoot(";
  protected final String TEXT_64 = " model) {";
  protected final String TEXT_65 = NL + "\t\treturn ";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = ") ";
  protected final String TEXT_68 = "model;";
  protected final String TEXT_69 = NL + "\t\t";
  protected final String TEXT_70 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_71 = ".";
  protected final String TEXT_72 = ".create";
  protected final String TEXT_73 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_74 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_75 = NL + "\t}";
  protected final String TEXT_76 = NL + "}";
  protected final String TEXT_77 = NL;
d126 2
d129 1
a129 1
    stringBuffer.append(TEXT_9);
d131 1
a131 1
    stringBuffer.append(TEXT_10);
d133 1
a133 1
    stringBuffer.append(TEXT_11);
d135 1
a135 1
    stringBuffer.append(TEXT_12);
d137 1
a137 1
    stringBuffer.append(TEXT_13);
d139 1
a139 1
    stringBuffer.append(TEXT_14);
d141 1
a141 1
    stringBuffer.append(TEXT_15);
d143 1
a143 1
    stringBuffer.append(TEXT_16);
d145 1
a145 1
    stringBuffer.append(TEXT_17);
d147 1
a147 1
    stringBuffer.append(TEXT_18);
d149 1
a149 1
    stringBuffer.append(TEXT_19);
d151 1
a151 1
    stringBuffer.append(TEXT_20);
d153 1
a153 1
    stringBuffer.append(TEXT_21);
d155 1
a155 1
    stringBuffer.append(TEXT_22);
d157 1
a157 1
    stringBuffer.append(TEXT_23);
d159 1
a159 1
    stringBuffer.append(TEXT_24);
d161 1
a161 1
    stringBuffer.append(TEXT_25);
d166 1
a166 1
    stringBuffer.append(TEXT_26);
d168 1
a168 1
    stringBuffer.append(TEXT_27);
d170 1
a170 1
    stringBuffer.append(TEXT_28);
d173 1
a173 1
    stringBuffer.append(TEXT_29);
d175 1
a175 1
    stringBuffer.append(TEXT_30);
d177 1
a177 1
    stringBuffer.append(TEXT_31);
d179 1
a179 1
    stringBuffer.append(TEXT_32);
d184 1
a184 1
    stringBuffer.append(TEXT_33);
d186 1
a186 1
    stringBuffer.append(TEXT_34);
d188 1
a188 1
    stringBuffer.append(TEXT_35);
a189 2
    stringBuffer.append(TEXT_36);
    }
d193 2
d196 1
a196 1
    stringBuffer.append(TEXT_39);
d198 1
a198 1
    stringBuffer.append(TEXT_40);
d200 1
a200 1
    stringBuffer.append(TEXT_41);
d202 1
a202 1
    stringBuffer.append(TEXT_42);
a203 2
    stringBuffer.append(TEXT_43);
    }
d207 2
d210 1
a210 1
    stringBuffer.append(TEXT_46);
d212 1
a212 1
    stringBuffer.append(TEXT_47);
d214 1
a214 1
    stringBuffer.append(TEXT_48);
d216 1
a216 1
    stringBuffer.append(TEXT_49);
d218 1
a218 1
    stringBuffer.append(TEXT_50);
a219 2
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d223 2
d227 1
a227 1
    stringBuffer.append(TEXT_54);
d229 1
a229 1
    stringBuffer.append(TEXT_55);
d231 1
a231 1
    stringBuffer.append(TEXT_56);
d236 1
a236 1
    stringBuffer.append(TEXT_57);
d238 1
a238 1
    stringBuffer.append(TEXT_58);
d240 1
a240 1
    stringBuffer.append(TEXT_59);
d242 1
a242 1
    stringBuffer.append(TEXT_60);
d244 1
a244 1
    stringBuffer.append(TEXT_61);
d246 1
a246 1
    stringBuffer.append(TEXT_62);
d248 1
a248 1
    stringBuffer.append(TEXT_63);
d250 1
a250 1
    stringBuffer.append(TEXT_64);
d252 1
a252 1
    stringBuffer.append(TEXT_65);
d254 1
a254 1
    stringBuffer.append(TEXT_66);
d256 1
a256 1
    stringBuffer.append(TEXT_67);
d258 1
a258 1
    stringBuffer.append(TEXT_68);
d273 1
a273 1
    stringBuffer.append(TEXT_69);
d275 1
a275 1
    stringBuffer.append(TEXT_70);
d277 1
a277 1
    stringBuffer.append(TEXT_71);
d279 1
a279 1
    stringBuffer.append(TEXT_72);
d281 1
a281 1
    stringBuffer.append(TEXT_73);
d283 1
a283 1
    stringBuffer.append(TEXT_74);
d285 1
a285 1
    stringBuffer.append(TEXT_75);
d288 1
a288 1
    stringBuffer.append(TEXT_76);
d290 1
a290 1
    stringBuffer.append(TEXT_77);
@


1.48
log
@fix diagram open code for rcp app
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d35 62
a96 58
  protected final String TEXT_16 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void setCharset(IPath path) {" + NL + "\t\tIFile file = ";
  protected final String TEXT_17 = ".getWorkspace().getRoot().getFile(path);" + NL + "\t\ttry {" + NL + "\t\t\tfile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_18 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_19 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Unable to set charset for file \" + path, e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**";
  protected final String TEXT_21 = NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>";
  protected final String TEXT_22 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */" + NL + "\tpublic static final Resource createDiagram(IPath containerFullPath, String fileNameParameter, IProgressMonitor progressMonitor) {" + NL + "\t\tfinal String fileName = fileNameParameter;" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tIPath diagramPath = containerFullPath.append(fileName);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(diagramPath.toString()));";
  protected final String TEXT_23 = NL + "\t\tIPath modelPath = diagramPath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_24 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(modelPath.toString()));";
  protected final String TEXT_25 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_26 = NL + "\t\t\t\t";
  protected final String TEXT_27 = " model = createInitialModel();";
  protected final String TEXT_28 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_29 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_30 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_31 = NL + "\t\t\t\t";
  protected final String TEXT_32 = "(";
  protected final String TEXT_33 = ") ";
  protected final String TEXT_34 = "model, ";
  protected final String TEXT_35 = NL + "\t\t\t\t\t";
  protected final String TEXT_36 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_37 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(fileName);";
  protected final String TEXT_38 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = ") ";
  protected final String TEXT_41 = "model);";
  protected final String TEXT_42 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_43 = " options = new ";
  protected final String TEXT_44 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_45 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_46 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_47 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_48 = NL + "\t\t\t\t";
  protected final String TEXT_49 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_50 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_51 = NL + "\t\tsetCharset(modelPath);";
  protected final String TEXT_52 = NL + "\t\tsetCharset(diagramPath);" + NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_53 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_54 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_55 = ".";
  protected final String TEXT_56 = ".create";
  protected final String TEXT_57 = "();" + NL + "\t}" + NL;
  protected final String TEXT_58 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_59 = " createInitialRoot(";
  protected final String TEXT_60 = " model) {";
  protected final String TEXT_61 = NL + "\t\treturn ";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = ") ";
  protected final String TEXT_64 = "model;";
  protected final String TEXT_65 = NL + "\t\t";
  protected final String TEXT_66 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = ".create";
  protected final String TEXT_69 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_70 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_71 = NL + "\t}";
  protected final String TEXT_72 = NL + "}";
  protected final String TEXT_73 = NL;
d141 4
d146 1
a146 1
    stringBuffer.append(TEXT_17);
d148 1
a148 1
    stringBuffer.append(TEXT_18);
d150 1
a150 1
    stringBuffer.append(TEXT_19);
d152 3
a154 1
    stringBuffer.append(TEXT_20);
d156 1
a156 1
    stringBuffer.append(TEXT_21);
d158 1
a158 1
    stringBuffer.append(TEXT_22);
d163 1
a163 1
    stringBuffer.append(TEXT_23);
d165 1
a165 1
    stringBuffer.append(TEXT_24);
d167 1
a167 1
    stringBuffer.append(TEXT_25);
d170 1
a170 1
    stringBuffer.append(TEXT_26);
d172 1
a172 1
    stringBuffer.append(TEXT_27);
d174 1
a174 1
    stringBuffer.append(TEXT_28);
d176 1
a176 1
    stringBuffer.append(TEXT_29);
d181 1
a181 1
    stringBuffer.append(TEXT_30);
d183 1
a183 1
    stringBuffer.append(TEXT_31);
d185 1
a185 1
    stringBuffer.append(TEXT_32);
d187 1
a187 1
    stringBuffer.append(TEXT_33);
d189 1
a189 1
    stringBuffer.append(TEXT_34);
d191 1
a191 1
    stringBuffer.append(TEXT_35);
d193 1
a193 1
    stringBuffer.append(TEXT_36);
d195 1
a195 1
    stringBuffer.append(TEXT_37);
d197 1
a197 1
    stringBuffer.append(TEXT_38);
d199 1
a199 1
    stringBuffer.append(TEXT_39);
d201 1
a201 1
    stringBuffer.append(TEXT_40);
d203 1
a203 1
    stringBuffer.append(TEXT_41);
d205 1
a205 1
    stringBuffer.append(TEXT_42);
d207 1
a207 1
    stringBuffer.append(TEXT_43);
d209 1
a209 1
    stringBuffer.append(TEXT_44);
d211 1
a211 1
    stringBuffer.append(TEXT_45);
d213 1
a213 1
    stringBuffer.append(TEXT_46);
d215 1
a215 1
    stringBuffer.append(TEXT_47);
d217 1
a217 1
    stringBuffer.append(TEXT_48);
d219 1
a219 1
    stringBuffer.append(TEXT_49);
d221 6
a226 3
    stringBuffer.append(TEXT_50);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_51);
d228 1
a228 1
    stringBuffer.append(TEXT_52);
d233 1
a233 1
    stringBuffer.append(TEXT_53);
d235 1
a235 1
    stringBuffer.append(TEXT_54);
d237 1
a237 1
    stringBuffer.append(TEXT_55);
d239 1
a239 1
    stringBuffer.append(TEXT_56);
d241 1
a241 1
    stringBuffer.append(TEXT_57);
d243 1
a243 1
    stringBuffer.append(TEXT_58);
d245 1
a245 1
    stringBuffer.append(TEXT_59);
d247 1
a247 1
    stringBuffer.append(TEXT_60);
d249 1
a249 1
    stringBuffer.append(TEXT_61);
d251 1
a251 1
    stringBuffer.append(TEXT_62);
d253 1
a253 1
    stringBuffer.append(TEXT_63);
d255 1
a255 1
    stringBuffer.append(TEXT_64);
d270 1
a270 1
    stringBuffer.append(TEXT_65);
d272 1
a272 1
    stringBuffer.append(TEXT_66);
d274 1
a274 1
    stringBuffer.append(TEXT_67);
d276 1
a276 1
    stringBuffer.append(TEXT_68);
d278 1
a278 1
    stringBuffer.append(TEXT_69);
d280 1
a280 1
    stringBuffer.append(TEXT_70);
d282 1
a282 1
    stringBuffer.append(TEXT_71);
d285 1
a285 1
    stringBuffer.append(TEXT_72);
d287 1
a287 1
    stringBuffer.append(TEXT_73);
@


1.47
log
@[163810] - Diagram editor generated by N20061107 always creates a domain file called "<name>.taipan"?!?
@
text
@d28 65
a92 63
  protected final String TEXT_9 = NL + "\t\tURI fileURI = URI.createFileURI(file.getLocation().toString());" + NL + "\t\t";
  protected final String TEXT_10 = " editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".openError(page.getWorkbenchWindow().getShell(), \"Error\"," + NL + "\t\t\t\t\t";
  protected final String TEXT_12 = ".bind(\"There is no editor registered for the file ''{0}''.\", fileURI.toFileString()));" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn page.openEditor(new ";
  protected final String TEXT_13 = "(fileURI), editorDescriptor.getId());";
  protected final String TEXT_14 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void setCharset(IPath path) {" + NL + "\t\tIFile file = ";
  protected final String TEXT_15 = ".getWorkspace().getRoot().getFile(path);" + NL + "\t\ttry {" + NL + "\t\t\tfile.setCharset(\"UTF-8\", new ";
  protected final String TEXT_16 = "()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_17 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_18 = ".getInstance().logError(\"Unable to set charset for file \" + path, e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**";
  protected final String TEXT_19 = NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>";
  protected final String TEXT_20 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */" + NL + "\tpublic static final Resource createDiagram(IPath containerFullPath, String fileNameParameter, IProgressMonitor progressMonitor) {" + NL + "\t\tfinal String fileName = fileNameParameter;" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tIPath diagramPath = containerFullPath.append(fileName);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(diagramPath.toString()));";
  protected final String TEXT_21 = NL + "\t\tIPath modelPath = diagramPath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_22 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(modelPath.toString()));";
  protected final String TEXT_23 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_24 = NL + "\t\t\t\t";
  protected final String TEXT_25 = " model = createInitialModel();";
  protected final String TEXT_26 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_27 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_28 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_29 = NL + "\t\t\t\t";
  protected final String TEXT_30 = "(";
  protected final String TEXT_31 = ") ";
  protected final String TEXT_32 = "model, ";
  protected final String TEXT_33 = NL + "\t\t\t\t\t";
  protected final String TEXT_34 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_35 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(fileName);";
  protected final String TEXT_36 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_37 = "(";
  protected final String TEXT_38 = ") ";
  protected final String TEXT_39 = "model);";
  protected final String TEXT_40 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_41 = " options = new ";
  protected final String TEXT_42 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_43 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_44 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_45 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_46 = NL + "\t\t\t\t";
  protected final String TEXT_47 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_48 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_49 = NL + "\t\tsetCharset(modelPath);";
  protected final String TEXT_50 = NL + "\t\tsetCharset(diagramPath);" + NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_51 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_52 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = ".create";
  protected final String TEXT_55 = "();" + NL + "\t}" + NL;
  protected final String TEXT_56 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_57 = " createInitialRoot(";
  protected final String TEXT_58 = " model) {";
  protected final String TEXT_59 = NL + "\t\treturn ";
  protected final String TEXT_60 = "(";
  protected final String TEXT_61 = ") ";
  protected final String TEXT_62 = "model;";
  protected final String TEXT_63 = NL + "\t\t";
  protected final String TEXT_64 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = ".create";
  protected final String TEXT_67 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_68 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_69 = NL + "\t}";
  protected final String TEXT_70 = NL + "}";
  protected final String TEXT_71 = NL;
d123 4
d128 1
a128 1
    stringBuffer.append(TEXT_10);
d130 1
a130 1
    stringBuffer.append(TEXT_11);
d132 1
a132 1
    stringBuffer.append(TEXT_12);
d134 1
a134 1
    stringBuffer.append(TEXT_13);
d136 1
a136 1
    stringBuffer.append(TEXT_14);
d138 1
a138 1
    stringBuffer.append(TEXT_15);
d140 1
a140 1
    stringBuffer.append(TEXT_16);
d142 1
a142 1
    stringBuffer.append(TEXT_17);
d144 1
a144 1
    stringBuffer.append(TEXT_18);
d146 1
a146 1
    stringBuffer.append(TEXT_19);
d148 1
a148 1
    stringBuffer.append(TEXT_20);
d153 1
a153 1
    stringBuffer.append(TEXT_21);
d155 1
a155 1
    stringBuffer.append(TEXT_22);
d157 1
a157 1
    stringBuffer.append(TEXT_23);
d160 1
a160 1
    stringBuffer.append(TEXT_24);
d162 1
a162 1
    stringBuffer.append(TEXT_25);
d164 1
a164 1
    stringBuffer.append(TEXT_26);
d166 1
a166 1
    stringBuffer.append(TEXT_27);
d171 1
a171 1
    stringBuffer.append(TEXT_28);
d173 1
a173 1
    stringBuffer.append(TEXT_29);
d175 1
a175 1
    stringBuffer.append(TEXT_30);
d177 1
a177 1
    stringBuffer.append(TEXT_31);
d179 1
a179 1
    stringBuffer.append(TEXT_32);
d181 1
a181 1
    stringBuffer.append(TEXT_33);
d183 1
a183 1
    stringBuffer.append(TEXT_34);
d185 1
a185 1
    stringBuffer.append(TEXT_35);
d187 1
a187 1
    stringBuffer.append(TEXT_36);
d189 1
a189 1
    stringBuffer.append(TEXT_37);
d191 1
a191 1
    stringBuffer.append(TEXT_38);
d193 1
a193 1
    stringBuffer.append(TEXT_39);
d195 1
a195 1
    stringBuffer.append(TEXT_40);
d197 1
a197 1
    stringBuffer.append(TEXT_41);
d199 1
a199 1
    stringBuffer.append(TEXT_42);
d201 1
a201 1
    stringBuffer.append(TEXT_43);
d203 1
a203 1
    stringBuffer.append(TEXT_44);
d205 1
a205 1
    stringBuffer.append(TEXT_45);
d207 1
a207 1
    stringBuffer.append(TEXT_46);
d209 1
a209 1
    stringBuffer.append(TEXT_47);
d211 1
a211 1
    stringBuffer.append(TEXT_48);
d213 1
a213 1
    stringBuffer.append(TEXT_49);
d215 1
a215 1
    stringBuffer.append(TEXT_50);
d220 1
a220 1
    stringBuffer.append(TEXT_51);
d222 1
a222 1
    stringBuffer.append(TEXT_52);
d224 1
a224 1
    stringBuffer.append(TEXT_53);
d226 1
a226 1
    stringBuffer.append(TEXT_54);
d228 1
a228 1
    stringBuffer.append(TEXT_55);
d230 1
a230 1
    stringBuffer.append(TEXT_56);
d232 1
a232 1
    stringBuffer.append(TEXT_57);
d234 1
a234 1
    stringBuffer.append(TEXT_58);
d236 1
a236 1
    stringBuffer.append(TEXT_59);
d238 1
a238 1
    stringBuffer.append(TEXT_60);
d240 1
a240 1
    stringBuffer.append(TEXT_61);
d242 1
a242 1
    stringBuffer.append(TEXT_62);
d257 1
a257 1
    stringBuffer.append(TEXT_63);
d259 1
a259 1
    stringBuffer.append(TEXT_64);
d261 1
a261 1
    stringBuffer.append(TEXT_65);
d263 1
a263 1
    stringBuffer.append(TEXT_66);
d265 1
a265 1
    stringBuffer.append(TEXT_67);
d267 1
a267 1
    stringBuffer.append(TEXT_68);
d269 1
a269 1
    stringBuffer.append(TEXT_69);
d272 1
a272 1
    stringBuffer.append(TEXT_70);
d274 1
a274 1
    stringBuffer.append(TEXT_71);
@


1.46
log
@"final" modifier will be removed by merger on next code regeneration.
@
text
@d40 51
a90 50
  protected final String TEXT_21 = NL + "\t\tIPath modelPath = diagramPath.removeFileExtension().addFileExtension(\"taipan\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(modelPath.toString()));";
  protected final String TEXT_22 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", Collections.EMPTY_LIST) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_23 = NL + "\t\t\t\t";
  protected final String TEXT_24 = " model = createInitialModel();";
  protected final String TEXT_25 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_26 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_27 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_28 = NL + "\t\t\t\t";
  protected final String TEXT_29 = "(";
  protected final String TEXT_30 = ") ";
  protected final String TEXT_31 = "model, ";
  protected final String TEXT_32 = NL + "\t\t\t\t\t";
  protected final String TEXT_33 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_34 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(fileName);";
  protected final String TEXT_35 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_36 = "(";
  protected final String TEXT_37 = ") ";
  protected final String TEXT_38 = "model);";
  protected final String TEXT_39 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_40 = " options = new ";
  protected final String TEXT_41 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_42 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$";
  protected final String TEXT_43 = NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_44 = NL + "\t\t\t\tdiagramResource.save(options);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_45 = NL + "\t\t\t\t";
  protected final String TEXT_46 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_47 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_48 = NL + "\t\tsetCharset(modelPath);";
  protected final String TEXT_49 = NL + "\t\tsetCharset(diagramPath);" + NL + "\t\treturn diagramResource;" + NL + "\t}";
  protected final String TEXT_50 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_51 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_52 = ".";
  protected final String TEXT_53 = ".create";
  protected final String TEXT_54 = "();" + NL + "\t}" + NL;
  protected final String TEXT_55 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_56 = " createInitialRoot(";
  protected final String TEXT_57 = " model) {";
  protected final String TEXT_58 = NL + "\t\treturn ";
  protected final String TEXT_59 = "(";
  protected final String TEXT_60 = ") ";
  protected final String TEXT_61 = "model;";
  protected final String TEXT_62 = NL + "\t\t";
  protected final String TEXT_63 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".";
  protected final String TEXT_65 = ".create";
  protected final String TEXT_66 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_67 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_68 = NL + "\t}";
  protected final String TEXT_69 = NL + "}";
  protected final String TEXT_70 = NL;
d148 2
d151 1
a151 1
    stringBuffer.append(TEXT_22);
d154 1
a154 1
    stringBuffer.append(TEXT_23);
d156 1
a156 1
    stringBuffer.append(TEXT_24);
d158 1
a158 1
    stringBuffer.append(TEXT_25);
d160 1
a160 1
    stringBuffer.append(TEXT_26);
d165 1
a165 1
    stringBuffer.append(TEXT_27);
d167 1
a167 1
    stringBuffer.append(TEXT_28);
d169 1
a169 1
    stringBuffer.append(TEXT_29);
a170 2
    stringBuffer.append(TEXT_30);
    }
d174 2
d177 1
a177 1
    stringBuffer.append(TEXT_33);
d179 1
a179 1
    stringBuffer.append(TEXT_34);
d181 1
a181 1
    stringBuffer.append(TEXT_35);
d183 1
a183 1
    stringBuffer.append(TEXT_36);
a184 2
    stringBuffer.append(TEXT_37);
    }
d188 2
d191 1
a191 1
    stringBuffer.append(TEXT_40);
d193 1
a193 1
    stringBuffer.append(TEXT_41);
d195 1
a195 1
    stringBuffer.append(TEXT_42);
d197 1
a197 1
    stringBuffer.append(TEXT_43);
d199 1
a199 1
    stringBuffer.append(TEXT_44);
a200 2
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d204 2
d207 1
a207 1
    stringBuffer.append(TEXT_48);
d209 1
a209 1
    stringBuffer.append(TEXT_49);
d214 1
a214 1
    stringBuffer.append(TEXT_50);
d216 1
a216 1
    stringBuffer.append(TEXT_51);
d218 1
a218 1
    stringBuffer.append(TEXT_52);
d220 1
a220 1
    stringBuffer.append(TEXT_53);
d222 1
a222 1
    stringBuffer.append(TEXT_54);
d224 1
a224 1
    stringBuffer.append(TEXT_55);
d226 1
a226 1
    stringBuffer.append(TEXT_56);
d228 1
a228 1
    stringBuffer.append(TEXT_57);
d230 1
a230 1
    stringBuffer.append(TEXT_58);
d232 1
a232 1
    stringBuffer.append(TEXT_59);
d234 1
a234 1
    stringBuffer.append(TEXT_60);
d236 1
a236 1
    stringBuffer.append(TEXT_61);
d251 1
a251 1
    stringBuffer.append(TEXT_62);
d253 1
a253 1
    stringBuffer.append(TEXT_63);
d255 1
a255 1
    stringBuffer.append(TEXT_64);
d257 1
a257 1
    stringBuffer.append(TEXT_65);
d259 1
a259 1
    stringBuffer.append(TEXT_66);
d261 1
a261 1
    stringBuffer.append(TEXT_67);
d263 1
a263 1
    stringBuffer.append(TEXT_68);
d266 1
a266 1
    stringBuffer.append(TEXT_69);
d268 1
a268 1
    stringBuffer.append(TEXT_70);
@


1.45
log
@remove deps from core.resources
@
text
@d39 1
a39 1
  protected final String TEXT_20 = NL + "\t * @@generated" + NL + "\t * @@return the created resource, or <code>null</code> if the resource was not created" + NL + "\t */" + NL + "\tpublic static final Resource createDiagram(IPath containerFullPath, final String fileName, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tIPath diagramPath = containerFullPath.append(fileName);" + NL + "\t\tfinal Resource diagramResource = editingDomain.getResourceSet().createResource(URI.createPlatformResourceURI(diagramPath.toString()));";
@


1.44
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IEditorPart;" + NL + "import org.eclipse.ui.IWorkbenchPage;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 65
a89 75
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final URI createAndOpenDiagram(IPath containerPath, String fileName, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = createNewDiagramFile(containerPath, fileName, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\topenDiagramEditor(window, diagramFile, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchWindow window, IFile file, boolean saveDiagram, IProgressMonitor progressMonitor) {" + NL + "\t\tIEditorPart editorPart = null;" + NL + "\t\ttry {" + NL + "\t\t\tIWorkbenchPage page = window.getActivePage();" + NL + "\t\t\tif (page != null) {" + NL + "\t\t\t\teditorPart = openDiagramEditor(page, file);" + NL + "\t\t\t\tif (saveDiagram) {" + NL + "\t\t\t\t\teditorPart.doSave(progressMonitor);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tfile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\treturn editorPart;" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(\"Error opening diagram\", e);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchPage page, IFile file) throws PartInitException {";
  protected final String TEXT_8 = NL + "\t\treturn ";
  protected final String TEXT_9 = ".openEditor(page, file);";
  protected final String TEXT_10 = NL + "\t\tURI fileURI = URI.createFileURI(file.getLocation().toString());" + NL + "\t\t";
  protected final String TEXT_11 = " editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\t";
  protected final String TEXT_12 = ".openError(page.getWorkbenchWindow().getShell(), \"Error\"," + NL + "\t\t\t\t\t";
  protected final String TEXT_13 = ".bind(\"There is no editor registered for the file ''{0}''.\", fileURI.toFileString()));" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn page.openEditor(new ";
  protected final String TEXT_14 = "(fileURI), editorDescriptor.getId());";
  protected final String TEXT_15 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(IPath containerFullPath, String fileName, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tfinal IFile diagramFile = createNewFile(containerFullPath, fileName, shell);" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);";
  protected final String TEXT_16 = NL + "\t\tIPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_17 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new ";
  protected final String TEXT_18 = "(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString(), true));" + NL + "\t\taffectedFiles.add(modelFile);";
  protected final String TEXT_19 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_20 = NL + "\t\t\t\t";
  protected final String TEXT_21 = " model = createInitialModel();";
  protected final String TEXT_22 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_23 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_24 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_25 = NL + "\t\t\t\t";
  protected final String TEXT_26 = "(";
  protected final String TEXT_27 = ") ";
  protected final String TEXT_28 = "model, ";
  protected final String TEXT_29 = NL + "\t\t\t\t\t";
  protected final String TEXT_30 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_31 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_32 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_33 = "(";
  protected final String TEXT_34 = ") ";
  protected final String TEXT_35 = "model);";
  protected final String TEXT_36 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {";
  protected final String TEXT_37 = NL + "\t\t\t\t";
  protected final String TEXT_38 = " options = new ";
  protected final String TEXT_39 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_40 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_41 = NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_42 = NL + "\t\t\t\t";
  protected final String TEXT_43 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_44 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_45 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_46 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_47 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_49 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_50 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}";
  protected final String TEXT_51 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_52 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = ".create";
  protected final String TEXT_55 = "();" + NL + "\t}" + NL;
  protected final String TEXT_56 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_57 = " createInitialRoot(";
  protected final String TEXT_58 = " model) {";
  protected final String TEXT_59 = NL + "\t\treturn ";
  protected final String TEXT_60 = "(";
  protected final String TEXT_61 = ") ";
  protected final String TEXT_62 = "model;";
  protected final String TEXT_63 = NL + "\t\t";
  protected final String TEXT_64 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = ".create";
  protected final String TEXT_67 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_68 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_69 = NL + "\t}";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static IFile createNewFile(IPath containerPath, String fileName, Shell shell) {" + NL + "\t\tIPath newFilePath = containerPath.append(fileName);" + NL + "\t\tIFile newFileHandle = ";
  protected final String TEXT_71 = ".getWorkspace().getRoot().getFile(newFilePath);" + NL + "\t\ttry {" + NL + "\t\t\tcreateFile(newFileHandle);" + NL + "\t\t} catch (";
  protected final String TEXT_72 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_73 = ".openError(shell, \"Creation Problems\", null, e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn newFileHandle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected static void createFile(IFile fileHandle) throws ";
  protected final String TEXT_74 = " {" + NL + "\t\ttry {" + NL + "\t\t\tfileHandle.create(new ";
  protected final String TEXT_75 = "(new byte[0])," + NL + "\t\t\t\t\tfalse, new ";
  protected final String TEXT_76 = "());" + NL + "\t\t} catch (";
  protected final String TEXT_77 = " e) {" + NL + "\t\t\t// If the file already existed locally, just refresh to get contents" + NL + "\t\t\tif (e.getStatus().getCode() == ";
  protected final String TEXT_78 = ".PATH_OCCUPIED) {" + NL + "\t\t\t\tfileHandle.refreshLocal(";
  protected final String TEXT_79 = ".DEPTH_ZERO, null);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthrow e;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_80 = NL;
d114 1
a114 1
    stringBuffer.append(importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName()));
d116 1
a116 1
    if (editorGen.getApplication() == null) {
d118 1
a118 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
d120 1
a120 1
    } else {
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorDescriptor"));
d124 1
a124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d126 1
a126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d130 10
d141 1
a141 1
    stringBuffer.append(TEXT_15);
d146 1
a146 5
    stringBuffer.append(TEXT_16);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
    stringBuffer.append(TEXT_18);
d148 1
a148 1
    stringBuffer.append(TEXT_19);
d151 1
a151 1
    stringBuffer.append(TEXT_20);
d153 1
a153 1
    stringBuffer.append(TEXT_21);
d155 1
a155 1
    stringBuffer.append(TEXT_22);
d157 1
a157 1
    stringBuffer.append(TEXT_23);
d162 1
a162 1
    stringBuffer.append(TEXT_24);
d164 1
a164 1
    stringBuffer.append(TEXT_25);
d166 1
a166 1
    stringBuffer.append(TEXT_26);
d168 1
a168 1
    stringBuffer.append(TEXT_27);
d170 1
a170 1
    stringBuffer.append(TEXT_28);
d172 1
a172 1
    stringBuffer.append(TEXT_29);
d174 1
a174 1
    stringBuffer.append(TEXT_30);
d176 1
a176 1
    stringBuffer.append(TEXT_31);
d178 1
a178 1
    stringBuffer.append(TEXT_32);
d180 1
a180 1
    stringBuffer.append(TEXT_33);
d182 1
a182 1
    stringBuffer.append(TEXT_34);
d184 1
a184 1
    stringBuffer.append(TEXT_35);
d186 1
a186 3
    stringBuffer.append(TEXT_36);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_37);
d188 1
a188 1
    stringBuffer.append(TEXT_38);
d190 1
a190 1
    stringBuffer.append(TEXT_39);
a191 4
    stringBuffer.append(TEXT_40);
    }
    stringBuffer.append(TEXT_41);
    // TODO CommandResult.newErrorCommandResult(e) would be better? 
d193 1
a193 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d197 1
a197 1
    if (standaloneDomainModel) {
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d203 2
a205 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
a206 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_50);
d211 2
d214 1
a214 1
    stringBuffer.append(diagramElementImportedName);
d216 1
a216 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d218 1
a218 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d220 1
a220 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getName());
d222 1
a222 1
    if (standaloneDomainModel /*may need docRoot only if separate file for domain model*/) {
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d226 1
a226 1
    stringBuffer.append(diagramElementImportedName);
d228 1
a228 1
    if (!domainGenPackage.hasDocumentRoot()) { 
d230 1
a230 1
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a233 2
    }
    stringBuffer.append(TEXT_62);
d248 2
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName(docRoot.getQualifiedInterfaceName()));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d255 1
a255 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d257 1
a257 1
    stringBuffer.append(docRoot.getName());
d259 1
a259 1
    stringBuffer.append(featureAccessor);
a260 2
    }
    stringBuffer.append(TEXT_69);
d263 2
a265 20
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("java.io.ByteArrayInputStream"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IResourceStatus"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IResource"));
    stringBuffer.append(TEXT_79);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_80);
@


1.43
log
@remove file creator template
@
text
@d25 1
a25 1
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final URI createAndOpenDiagram(IPath containerPath, String fileName, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = createNewDiagramFile(containerPath, fileName, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\topenDiagramEditor(window, diagramFile, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn URI.createPlatformResourceURI(diagramFile.getFullPath().toString());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchWindow window, IFile file, boolean saveDiagram, IProgressMonitor progressMonitor) {" + NL + "\t\tIEditorPart editorPart = null;" + NL + "\t\ttry {" + NL + "\t\t\tIWorkbenchPage page = window.getActivePage();" + NL + "\t\t\tif (page != null) {" + NL + "\t\t\t\teditorPart = openDiagramEditor(page, file);" + NL + "\t\t\t\tif (saveDiagram) {" + NL + "\t\t\t\t\teditorPart.doSave(progressMonitor);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tfile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\treturn editorPart;" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\t";
d34 1
a34 1
  protected final String TEXT_15 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(IPath containerFullPath, String fileName, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tfinal IFile diagramFile = createNewFile(containerFullPath, fileName, shell);" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);";
d37 1
a37 1
  protected final String TEXT_18 = "(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);";
@


1.42
log
@simplify file names handling
@
text
@d34 66
a99 58
  protected final String TEXT_15 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(IPath containerFullPath, String fileName, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tfinal IFile diagramFile = ";
  protected final String TEXT_16 = ".createNewFile(containerFullPath, fileName, shell);" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);";
  protected final String TEXT_17 = NL + "\t\tIPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_18 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new ";
  protected final String TEXT_19 = "(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);";
  protected final String TEXT_20 = NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_21 = NL + "\t\t\t\t";
  protected final String TEXT_22 = " model = createInitialModel();";
  protected final String TEXT_23 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_24 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_25 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_26 = NL + "\t\t\t\t";
  protected final String TEXT_27 = "(";
  protected final String TEXT_28 = ") ";
  protected final String TEXT_29 = "model, ";
  protected final String TEXT_30 = NL + "\t\t\t\t\t";
  protected final String TEXT_31 = ".MODEL_ID," + NL + "\t\t\t\t\t";
  protected final String TEXT_32 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_33 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_34 = "(";
  protected final String TEXT_35 = ") ";
  protected final String TEXT_36 = "model);";
  protected final String TEXT_37 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {";
  protected final String TEXT_38 = NL + "\t\t\t\t";
  protected final String TEXT_39 = " options = new ";
  protected final String TEXT_40 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_41 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_42 = NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_43 = NL + "\t\t\t\t";
  protected final String TEXT_44 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_45 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_46 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_47 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_48 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_49 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_50 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_51 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}";
  protected final String TEXT_52 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_53 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_54 = ".";
  protected final String TEXT_55 = ".create";
  protected final String TEXT_56 = "();" + NL + "\t}" + NL;
  protected final String TEXT_57 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_58 = " createInitialRoot(";
  protected final String TEXT_59 = " model) {";
  protected final String TEXT_60 = NL + "\t\treturn ";
  protected final String TEXT_61 = "(";
  protected final String TEXT_62 = ") ";
  protected final String TEXT_63 = "model;";
  protected final String TEXT_64 = NL + "\t\t";
  protected final String TEXT_65 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = ".create";
  protected final String TEXT_68 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_69 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_70 = NL + "\t}";
  protected final String TEXT_71 = NL + "}";
  protected final String TEXT_72 = NL;
a141 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName()));
    stringBuffer.append(TEXT_16);
d146 2
d149 1
a149 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d151 1
a151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
a152 2
    }
    stringBuffer.append(TEXT_20);
d155 2
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
d160 1
a160 1
    	if (standaloneDomainModel) {
a161 2
    	} else {
    stringBuffer.append(TEXT_24);
d166 2
d169 1
a169 1
    if (genDiagram.getDomainDiagramElement() != null) {
d171 1
a171 1
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
d173 1
a173 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d177 1
a177 1
    }
d179 1
a179 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d181 1
a181 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d183 1
a183 1
    if (genDiagram.getDomainDiagramElement() != null) {
d185 1
a185 1
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
d187 1
a187 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d191 1
a191 1
    }
d193 1
a193 1
    if (standaloneDomainModel) {
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d197 1
a197 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource"));
d201 1
a201 1
    }
d203 1
a203 1
    // TODO CommandResult.newErrorCommandResult(e) would be better? 
d207 1
a207 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d209 1
a209 1
    if (standaloneDomainModel) {
d211 1
a211 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d213 1
a213 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d215 1
a215 1
    }
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
a218 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_51);
d223 2
d226 1
a226 1
    stringBuffer.append(diagramElementImportedName);
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d230 1
a230 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d232 1
a232 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getName());
d234 1
a234 1
    if (standaloneDomainModel /*may need docRoot only if separate file for domain model*/) {
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d238 1
a238 1
    stringBuffer.append(diagramElementImportedName);
d240 1
a240 1
    if (!domainGenPackage.hasDocumentRoot()) { 
d242 1
a242 1
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a245 2
    }
    stringBuffer.append(TEXT_63);
d260 2
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName(docRoot.getQualifiedInterfaceName()));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d267 1
a267 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d269 1
a269 1
    stringBuffer.append(docRoot.getName());
d271 1
a271 1
    stringBuffer.append(featureAccessor);
a272 2
    }
    stringBuffer.append(TEXT_70);
d275 2
d278 16
d295 1
a295 1
    stringBuffer.append(TEXT_72);
@


1.41
log
@remove unused parameters
@
text
@d35 1
a35 1
  protected final String TEXT_16 = ".getInstance().createNewFile(containerFullPath, fileName, shell);" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);";
@


1.40
log
@Correcting Progress monitor.
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IEditorPart;" + NL + "import org.eclipse.ui.IWorkbenchPage;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 26
a50 26
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final URI createAndOpenDiagram(";
  protected final String TEXT_7 = " diagramFileCreator," + NL + "\t\t\tIPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\topenDiagramEditor(window, diagramFile, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn URI.createPlatformResourceURI(diagramFile.getFullPath().toString());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchWindow window, IFile file, boolean saveDiagram, IProgressMonitor progressMonitor) {" + NL + "\t\tIEditorPart editorPart = null;" + NL + "\t\ttry {" + NL + "\t\t\tIWorkbenchPage page = window.getActivePage();" + NL + "\t\t\tif (page != null) {" + NL + "\t\t\t\teditorPart = openDiagramEditor(page, file);" + NL + "\t\t\t\tif (saveDiagram) {" + NL + "\t\t\t\t\teditorPart.doSave(progressMonitor);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tfile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\treturn editorPart;" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(\"Error opening diagram\", e);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchPage page, IFile file) throws PartInitException {";
  protected final String TEXT_9 = NL + "\t\treturn ";
  protected final String TEXT_10 = ".openEditor(page, file);";
  protected final String TEXT_11 = NL + "\t\tURI fileURI = URI.createFileURI(file.getLocation().toString());" + NL + "\t\t";
  protected final String TEXT_12 = " editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\t";
  protected final String TEXT_13 = ".openError(page.getWorkbenchWindow().getShell(), \"Error\"," + NL + "\t\t\t\t\t";
  protected final String TEXT_14 = ".bind(\"There is no editor registered for the file ''{0}''.\", fileURI.toFileString()));" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn page.openEditor(new ";
  protected final String TEXT_15 = "(fileURI), editorDescriptor.getId());";
  protected final String TEXT_16 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(";
  protected final String TEXT_17 = " diagramFileCreator," + NL + "\t\t\tIPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 3); //$NON-NLS-1$" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell);" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);";
  protected final String TEXT_18 = NL + "\t\tIPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_19 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new ";
  protected final String TEXT_20 = "(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);";
  protected final String TEXT_21 = NL + "\t\tfinal String kindParam = kind;" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_22 = NL + "\t\t\t\t";
  protected final String TEXT_23 = " model = createInitialModel();";
  protected final String TEXT_24 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_25 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_26 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_27 = NL + "\t\t\t\t";
  protected final String TEXT_28 = "(";
  protected final String TEXT_29 = ") ";
  protected final String TEXT_30 = "model, ";
  protected final String TEXT_31 = NL + "\t\t\t\tkindParam, ";
d116 1
a116 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName()));
d118 1
a118 1
    stringBuffer.append(importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName()));
d120 1
a120 1
    if (editorGen.getApplication() == null) {
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
d124 1
a124 1
    } else {
d126 1
a126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorDescriptor"));
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d134 1
a134 1
    }
a135 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName()));
    stringBuffer.append(TEXT_17);
d140 2
d143 1
a143 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d145 1
a145 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Path"));
a146 2
    }
    stringBuffer.append(TEXT_21);
d149 2
d152 1
a152 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
d154 1
a154 1
    	if (standaloneDomainModel) {
a155 2
    	} else {
    stringBuffer.append(TEXT_25);
d160 2
d163 1
a163 1
    if (genDiagram.getDomainDiagramElement() != null) {
d165 1
a165 1
    if (genDiagram.getDomainDiagramElement().isExternalInterface()) {
d167 1
a167 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d171 1
a171 1
    }
@


1.39
log
@#114200 remove resource deps from wizard
@
text
@d36 1
a36 1
  protected final String TEXT_17 = " diagramFileCreator," + NL + "\t\t\tIPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 4); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell);" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);";
@


1.38
log
@#114200 refactor 'open diagram editor' code to support RCP
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IEditorPart;" + NL + "import org.eclipse.ui.IWorkbenchPage;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 12
a36 12
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\topenDiagramEditor(window, diagramFile, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchWindow window, IFile file, boolean saveDiagram, IProgressMonitor progressMonitor) {" + NL + "\t\tIEditorPart editorPart = null;" + NL + "\t\ttry {" + NL + "\t\t\tIWorkbenchPage page = window.getActivePage();" + NL + "\t\t\tif (page != null) {" + NL + "\t\t\t\teditorPart = openDiagramEditor(page, file);" + NL + "\t\t\t\tif (saveDiagram) {" + NL + "\t\t\t\t\teditorPart.doSave(progressMonitor);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tfile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\treturn editorPart;" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(\"Error opening diagram\", e);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IEditorPart openDiagramEditor(IWorkbenchPage page, IFile file) throws PartInitException {";
  protected final String TEXT_8 = NL + "\t\treturn ";
  protected final String TEXT_9 = ".openEditor(page, file);";
  protected final String TEXT_10 = NL + "\t\t";
  protected final String TEXT_11 = " fileURI = ";
  protected final String TEXT_12 = ".createFileURI(file.getLocation().toString());" + NL + "\t\t";
  protected final String TEXT_13 = " editorDescriptor = page.getWorkbenchWindow().getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\t";
  protected final String TEXT_14 = ".openError(page.getWorkbenchWindow().getShell(), \"Error\", ";
  protected final String TEXT_15 = ".bind(\"There is no editor registered for the file ''{0}''.\", fileURI.toFileString()));" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn page.openEditor(new ";
  protected final String TEXT_16 = "(fileURI), editorDescriptor.getId());";
  protected final String TEXT_17 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 4); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
d39 1
a39 1
  protected final String TEXT_20 = "(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);" + NL + "\t\t";
d114 1
a114 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
d116 2
d119 1
a119 1
    stringBuffer.append(TEXT_7);
d121 1
a121 1
    stringBuffer.append(TEXT_8);
d123 1
a123 1
    stringBuffer.append(TEXT_9);
a124 2
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d126 1
a126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorDescriptor"));
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d136 1
a136 1
    }
@


1.37
log
@#114200 avoid IDE usage in RCP mode
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IEditorPart;" + NL + "import org.eclipse.ui.IWorkbenchPage;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 12
a36 12
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\topenDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final DiagramEditPart openDiagram(IFile file, IWorkbenchWindow window, boolean saveDiagram, IProgressMonitor progressMonitor) {" + NL + "\t\tIEditorPart editorPart = null;" + NL + "\t\ttry {" + NL + "\t\t\tIWorkbenchPage page = window.getActivePage();" + NL + "\t\t\tif (page != null) {";
  protected final String TEXT_7 = NL + "\t\t\t\teditorPart = ";
  protected final String TEXT_8 = ".openEditor(page, file, true);";
  protected final String TEXT_9 = NL + "\t\t\t\t";
  protected final String TEXT_10 = " fileURI = ";
  protected final String TEXT_11 = ".createFileURI(file.getLocation().toString());" + NL + "\t\t\t\t";
  protected final String TEXT_12 = " editorDescriptor = window.getWorkbench().getEditorRegistry().getDefaultEditor(fileURI.toFileString());" + NL + "\t\t\t\tif (editorDescriptor == null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_13 = ".openError(window.getShell(), \"Error\", ";
  protected final String TEXT_14 = ".bind(\"There is no editor registered for the file ''{0}''.\", fileURI.toFileString()));" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\teditorPart = page.openEditor(new ";
  protected final String TEXT_15 = "(fileURI), editorDescriptor.getId());";
  protected final String TEXT_16 = NL + "\t\t\t\tif (saveDiagram) {" + NL + "\t\t\t\t\teditorPart.doSave(progressMonitor);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tfile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\treturn ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart();" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(\"Error opening diagram\", e);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 4); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
d116 2
d119 1
a119 1
    stringBuffer.append(TEXT_7);
d121 1
a121 1
    stringBuffer.append(TEXT_8);
a122 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d126 2
d129 1
a129 1
    stringBuffer.append(TEXT_12);
d131 1
a131 1
    stringBuffer.append(TEXT_13);
d133 1
a133 1
    stringBuffer.append(TEXT_14);
d135 1
a135 1
    stringBuffer.append(TEXT_15);
a136 2
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName()));
@


1.36
log
@#114200 remove gmf runtime ide dependencies
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IEditorPart;" + NL + "import org.eclipse.ui.IWorkbenchPage;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.ide.IDE;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 67
a91 57
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\topenDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final DiagramEditPart openDiagram(IFile file, IWorkbenchWindow window, boolean saveDiagram, IProgressMonitor progressMonitor) {" + NL + "\t\tIEditorPart editorPart = null;" + NL + "\t\ttry {" + NL + "\t\t\tIWorkbenchPage page = window.getActivePage();" + NL + "\t\t\tif (page != null) {" + NL + "\t\t\t\teditorPart = IDE.openEditor(page, file, true);" + NL + "\t\t\t\tif (saveDiagram) {" + NL + "\t\t\t\t\teditorPart.doSave(progressMonitor);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tfile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\treturn ((IDiagramWorkbenchPart) editorPart).getDiagramEditPart();" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(\"Error opening diagram\", e);" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 4); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
  protected final String TEXT_8 = NL + "\t\tIPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_9 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new ";
  protected final String TEXT_10 = "(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);" + NL + "\t\t";
  protected final String TEXT_11 = NL + "\t\tfinal String kindParam = kind;" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_12 = NL + "\t\t\t\t";
  protected final String TEXT_13 = " model = createInitialModel();";
  protected final String TEXT_14 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_15 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_16 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_17 = NL + "\t\t\t\t";
  protected final String TEXT_18 = "(";
  protected final String TEXT_19 = ") ";
  protected final String TEXT_20 = "model, ";
  protected final String TEXT_21 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_22 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_23 = NL + "\t\t\t\t\tdiagram.setElement(";
  protected final String TEXT_24 = "(";
  protected final String TEXT_25 = ") ";
  protected final String TEXT_26 = "model);";
  protected final String TEXT_27 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {";
  protected final String TEXT_28 = NL + "\t\t\t\t";
  protected final String TEXT_29 = " options = new ";
  protected final String TEXT_30 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_31 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_32 = NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_33 = NL + "\t\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_35 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_36 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_37 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_38 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_39 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_40 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_41 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}";
  protected final String TEXT_42 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_43 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = ".create";
  protected final String TEXT_46 = "();" + NL + "\t}" + NL;
  protected final String TEXT_47 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_48 = " createInitialRoot(";
  protected final String TEXT_49 = " model) {";
  protected final String TEXT_50 = NL + "\t\treturn ";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = ") ";
  protected final String TEXT_53 = "model;";
  protected final String TEXT_54 = NL + "\t\t";
  protected final String TEXT_55 = " docRoot =" + NL + "\t\t\t\t";
  protected final String TEXT_56 = ".";
  protected final String TEXT_57 = ".create";
  protected final String TEXT_58 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_59 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_60 = NL + "\t}";
  protected final String TEXT_61 = NL + "}";
  protected final String TEXT_62 = NL;
d116 20
d137 1
a137 1
    stringBuffer.append(TEXT_7);
d142 1
a142 1
    stringBuffer.append(TEXT_8);
d144 1
a144 1
    stringBuffer.append(TEXT_9);
d146 1
a146 1
    stringBuffer.append(TEXT_10);
d148 1
a148 1
    stringBuffer.append(TEXT_11);
d151 1
a151 1
    stringBuffer.append(TEXT_12);
d153 1
a153 1
    stringBuffer.append(TEXT_13);
d155 1
a155 1
    stringBuffer.append(TEXT_14);
d157 1
a157 1
    stringBuffer.append(TEXT_15);
d162 1
a162 1
    stringBuffer.append(TEXT_16);
d164 1
a164 1
    stringBuffer.append(TEXT_17);
d166 1
a166 1
    stringBuffer.append(TEXT_18);
d168 1
a168 1
    stringBuffer.append(TEXT_19);
d170 1
a170 1
    stringBuffer.append(TEXT_20);
d172 1
a172 1
    stringBuffer.append(TEXT_21);
d174 1
a174 1
    stringBuffer.append(TEXT_22);
d176 1
a176 1
    stringBuffer.append(TEXT_23);
d178 1
a178 1
    stringBuffer.append(TEXT_24);
d180 1
a180 1
    stringBuffer.append(TEXT_25);
d182 1
a182 1
    stringBuffer.append(TEXT_26);
d184 1
a184 1
    stringBuffer.append(TEXT_27);
d186 1
a186 1
    stringBuffer.append(TEXT_28);
d188 1
a188 1
    stringBuffer.append(TEXT_29);
d190 1
a190 1
    stringBuffer.append(TEXT_30);
d192 1
a192 1
    stringBuffer.append(TEXT_31);
d194 1
a194 1
    stringBuffer.append(TEXT_32);
d196 1
a196 1
    stringBuffer.append(TEXT_33);
d198 1
a198 1
    stringBuffer.append(TEXT_34);
d200 1
a200 1
    stringBuffer.append(TEXT_35);
d202 1
a202 1
    stringBuffer.append(TEXT_36);
d204 1
a204 1
    stringBuffer.append(TEXT_37);
d206 1
a206 1
    stringBuffer.append(TEXT_38);
d208 1
a208 1
    stringBuffer.append(TEXT_39);
d210 1
a210 1
    stringBuffer.append(TEXT_40);
d212 1
a212 1
    stringBuffer.append(TEXT_41);
d217 1
a217 1
    stringBuffer.append(TEXT_42);
d219 1
a219 1
    stringBuffer.append(TEXT_43);
d221 1
a221 1
    stringBuffer.append(TEXT_44);
d223 1
a223 1
    stringBuffer.append(TEXT_45);
d225 1
a225 1
    stringBuffer.append(TEXT_46);
d227 1
a227 1
    stringBuffer.append(TEXT_47);
d229 1
a229 1
    stringBuffer.append(TEXT_48);
d231 1
a231 1
    stringBuffer.append(TEXT_49);
d233 1
a233 1
    stringBuffer.append(TEXT_50);
d235 1
a235 1
    stringBuffer.append(TEXT_51);
d237 1
a237 1
    stringBuffer.append(TEXT_52);
d239 1
a239 1
    stringBuffer.append(TEXT_53);
d254 1
a254 1
    stringBuffer.append(TEXT_54);
d256 1
a256 1
    stringBuffer.append(TEXT_55);
d258 1
a258 1
    stringBuffer.append(TEXT_56);
d260 1
a260 1
    stringBuffer.append(TEXT_57);
d262 1
a262 1
    stringBuffer.append(TEXT_58);
d264 1
a264 1
    stringBuffer.append(TEXT_59);
d266 1
a266 1
    stringBuffer.append(TEXT_60);
d269 1
a269 1
    stringBuffer.append(TEXT_61);
d271 1
a271 1
    stringBuffer.append(TEXT_62);
@


1.35
log
@#116861 [Tests] Create unit-tests checking code generated for the models with "instance class name" specified

- templates corrected
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 2
a26 2
  protected final String TEXT_6 = " extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = ";
  protected final String TEXT_7 = ".createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 4); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
d74 1
a74 1
  protected final String TEXT_55 = " docRoot = ";
d106 1
a106 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
@


1.34
log
@header comment should not be a javadoc comment
@
text
@d36 46
a81 37
  protected final String TEXT_17 = NL + "\t\t\t\tmodel, ";
  protected final String TEXT_18 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_19 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_20 = NL + "\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_21 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {";
  protected final String TEXT_22 = NL + "\t\t\t\t";
  protected final String TEXT_23 = " options = new ";
  protected final String TEXT_24 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_25 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_26 = NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_27 = NL + "\t\t\t\t";
  protected final String TEXT_28 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_29 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_30 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_31 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_32 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_33 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_34 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_35 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}";
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_37 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = ".create";
  protected final String TEXT_40 = "();" + NL + "\t}" + NL;
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_42 = " createInitialRoot(";
  protected final String TEXT_43 = " model) {";
  protected final String TEXT_44 = NL + "\t\treturn model;";
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = " docRoot = ";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = ".create";
  protected final String TEXT_49 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_50 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_51 = NL + "\t}";
  protected final String TEXT_52 = NL + "}";
  protected final String TEXT_53 = NL;
d135 1
a135 1
    }
d137 1
a137 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d139 1
a139 1
    if (genDiagram.getDomainDiagramElement() != null) {
d143 1
a143 1
    if (standaloneDomainModel) {
d145 1
a145 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d147 1
a147 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d149 1
a149 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource"));
d153 1
a153 1
    // TODO CommandResult.newErrorCommandResult(e) would be better? 
d155 1
a155 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d157 1
a157 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d159 1
a159 1
    if (standaloneDomainModel) {
d161 1
a161 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d163 1
a163 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d165 1
a165 1
    }
d167 1
a167 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d171 12
d187 1
a187 1
    stringBuffer.append(TEXT_36);
d189 1
a189 1
    stringBuffer.append(TEXT_37);
d191 1
a191 1
    stringBuffer.append(TEXT_38);
d193 1
a193 1
    stringBuffer.append(TEXT_39);
d195 1
a195 1
    stringBuffer.append(TEXT_40);
d197 1
a197 1
    stringBuffer.append(TEXT_41);
d199 1
a199 1
    stringBuffer.append(TEXT_42);
d201 1
a201 1
    stringBuffer.append(TEXT_43);
d203 7
a209 1
    stringBuffer.append(TEXT_44);
d224 1
a224 1
    stringBuffer.append(TEXT_45);
d226 1
a226 1
    stringBuffer.append(TEXT_46);
d228 1
a228 1
    stringBuffer.append(TEXT_47);
d230 1
a230 1
    stringBuffer.append(TEXT_48);
d232 1
a232 1
    stringBuffer.append(TEXT_49);
d234 1
a234 1
    stringBuffer.append(TEXT_50);
d236 1
a236 1
    stringBuffer.append(TEXT_51);
d239 1
a239 1
    stringBuffer.append(TEXT_52);
d241 1
a241 1
    stringBuffer.append(TEXT_53);
@


1.33
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.32
log
@avoid generating unused imports in pure pure design projects
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d88 1
a88 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.31
log
@Reverted fix for #139375 (unable to edit diagrams generated from XSD schema) from reflective to qualified classes (made possible with EMF RC3)
@
text
@d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d28 45
a72 43
  protected final String TEXT_9 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new Path(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);" + NL + "\t\t";
  protected final String TEXT_10 = NL + "\t\tfinal String kindParam = kind;" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_11 = NL + "\t\t\t\t";
  protected final String TEXT_12 = " model = createInitialModel();";
  protected final String TEXT_13 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_14 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_15 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_16 = NL + "\t\t\t\tmodel, ";
  protected final String TEXT_17 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_18 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_19 = NL + "\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_20 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {";
  protected final String TEXT_21 = NL + "\t\t\t\t";
  protected final String TEXT_22 = " options = new ";
  protected final String TEXT_23 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_24 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_25 = NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_26 = NL + "\t\t\t\t";
  protected final String TEXT_27 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_28 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_29 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_30 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_31 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_32 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_33 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}";
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_36 = " createInitialModel() {" + NL + "\t\treturn ";
  protected final String TEXT_37 = ".";
  protected final String TEXT_38 = ".create";
  protected final String TEXT_39 = "();" + NL + "\t}" + NL;
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static EObject createInitialRoot(";
  protected final String TEXT_41 = " model) {";
  protected final String TEXT_42 = NL + "\t\treturn model;";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = " docRoot = ";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = ".create";
  protected final String TEXT_47 = "();" + NL + "\t\tdocRoot.set";
  protected final String TEXT_48 = "(model);" + NL + "\t\treturn docRoot;";
  protected final String TEXT_49 = NL + "\t}";
  protected final String TEXT_50 = NL + "}";
  protected final String TEXT_51 = NL;
d106 2
d109 1
a109 1
    stringBuffer.append(TEXT_10);
d112 1
a112 1
    stringBuffer.append(TEXT_11);
d114 1
a114 1
    stringBuffer.append(TEXT_12);
d116 1
a116 1
    stringBuffer.append(TEXT_13);
d118 1
a118 1
    stringBuffer.append(TEXT_14);
d123 1
a123 1
    stringBuffer.append(TEXT_15);
d125 1
a125 1
    stringBuffer.append(TEXT_16);
d127 1
a127 1
    stringBuffer.append(TEXT_17);
d129 1
a129 1
    stringBuffer.append(TEXT_18);
d131 1
a131 1
    stringBuffer.append(TEXT_19);
d133 1
a133 1
    stringBuffer.append(TEXT_20);
d135 1
a135 1
    stringBuffer.append(TEXT_21);
d137 1
a137 1
    stringBuffer.append(TEXT_22);
d139 1
a139 1
    stringBuffer.append(TEXT_23);
d141 1
a141 1
    stringBuffer.append(TEXT_24);
d143 1
a143 1
    stringBuffer.append(TEXT_25);
a144 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d148 2
d151 1
a151 1
    stringBuffer.append(TEXT_29);
d153 1
a153 1
    stringBuffer.append(TEXT_30);
d155 1
a155 1
    stringBuffer.append(TEXT_31);
d157 1
a157 1
    stringBuffer.append(TEXT_32);
d159 1
a159 1
    stringBuffer.append(TEXT_33);
d161 1
a161 1
    stringBuffer.append(TEXT_34);
d166 1
a166 1
    stringBuffer.append(TEXT_35);
d168 1
a168 1
    stringBuffer.append(TEXT_36);
d170 1
a170 1
    stringBuffer.append(TEXT_37);
d172 1
a172 1
    stringBuffer.append(TEXT_38);
d174 1
a174 1
    stringBuffer.append(TEXT_39);
d176 3
a178 1
    stringBuffer.append(TEXT_40);
d180 1
a180 1
    stringBuffer.append(TEXT_41);
d182 1
a182 1
    stringBuffer.append(TEXT_42);
d197 1
a197 1
    stringBuffer.append(TEXT_43);
d199 1
a199 1
    stringBuffer.append(TEXT_44);
d201 1
a201 1
    stringBuffer.append(TEXT_45);
d203 1
a203 1
    stringBuffer.append(TEXT_46);
d205 1
a205 1
    stringBuffer.append(TEXT_47);
d207 1
a207 1
    stringBuffer.append(TEXT_48);
d209 1
a209 1
    stringBuffer.append(TEXT_49);
d212 1
a212 1
    stringBuffer.append(TEXT_50);
d214 1
a214 1
    stringBuffer.append(TEXT_51);
@


1.30
log
@#139375 unable to edit diagrams generated from XSD schema
@
text
@d30 38
a67 38
  protected final String TEXT_11 = NL + "\t\t\t\tEObject model = createInitialModel();";
  protected final String TEXT_12 = NL + "\t\t\t\tmodelResource.getContents().add(createInitialRoot(model));";
  protected final String TEXT_13 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_14 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_15 = NL + "\t\t\t\tmodel, ";
  protected final String TEXT_16 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_18 = NL + "\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_19 = NL + "\t\t\t\t}" + NL + "\t\t\ttry {";
  protected final String TEXT_20 = NL + "\t\t\t\t";
  protected final String TEXT_21 = " options = new ";
  protected final String TEXT_22 = "();" + NL + "\t\t\t\toptions.put(";
  protected final String TEXT_23 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\t\tmodelResource.save(options);";
  protected final String TEXT_24 = NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t} catch (IOException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_25 = NL + "\t\t\t\t";
  protected final String TEXT_26 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_27 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_28 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_29 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_30 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_32 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static EObject createInitialModel() {";
  protected final String TEXT_34 = NL + "\t\treturn ";
  protected final String TEXT_35 = ".";
  protected final String TEXT_36 = ".create(";
  protected final String TEXT_37 = ".eINSTANCE.get";
  protected final String TEXT_38 = "());" + NL + "\t}" + NL;
  protected final String TEXT_39 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static EObject createInitialRoot(EObject model) {";
  protected final String TEXT_40 = NL + "\t\treturn model;";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " eClass = ";
  protected final String TEXT_43 = ".INSTANCE.getDocumentRoot(";
  protected final String TEXT_44 = ".eINSTANCE);" + NL + "\t\t";
  protected final String TEXT_45 = " eStructuralFeature = eClass.getEStructuralFeature(\"";
  protected final String TEXT_46 = "\");" + NL + "\t\tEObject rootObject = ";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = ".create(eClass);" + NL + "\t\trootObject.eSet(eStructuralFeature, model);" + NL + "\t\treturn rootObject;";
d109 2
d112 1
a112 1
    stringBuffer.append(TEXT_12);
d114 1
a114 1
    stringBuffer.append(TEXT_13);
d119 1
a119 1
    stringBuffer.append(TEXT_14);
d121 1
a121 1
    stringBuffer.append(TEXT_15);
d123 1
a123 1
    stringBuffer.append(TEXT_16);
d125 1
a125 1
    stringBuffer.append(TEXT_17);
d127 1
a127 1
    stringBuffer.append(TEXT_18);
d129 1
a129 1
    stringBuffer.append(TEXT_19);
d131 1
a131 1
    stringBuffer.append(TEXT_20);
d133 1
a133 1
    stringBuffer.append(TEXT_21);
d135 1
a135 1
    stringBuffer.append(TEXT_22);
d137 1
a137 1
    stringBuffer.append(TEXT_23);
d139 1
a139 1
    stringBuffer.append(TEXT_24);
a140 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d144 2
d147 1
a147 1
    stringBuffer.append(TEXT_28);
d149 1
a149 1
    stringBuffer.append(TEXT_29);
d151 1
a151 1
    stringBuffer.append(TEXT_30);
d153 1
a153 1
    stringBuffer.append(TEXT_31);
d155 1
a155 1
    stringBuffer.append(TEXT_32);
d157 3
a159 2
    stringBuffer.append(TEXT_33);
    
a161 2
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d163 1
a163 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d165 1
a165 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d167 1
a167 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d169 2
d172 3
a174 1
    stringBuffer.append(TEXT_39);
d176 1
a176 1
    stringBuffer.append(TEXT_40);
d179 8
a186 6
EClass docRoot = org.eclipse.emf.ecore.util.ExtendedMetaData.INSTANCE.getDocumentRoot(domainGenPackage.getEcorePackage());
String featureName = genDiagram.getDomainDiagramElement().getInterfaceName().toLowerCase(); // using interface name is a HACK
for (int i = 0, size = docRoot.getFeatureCount(); i < size; i++) {
	EStructuralFeature eStructuralFeature = docRoot.getEStructuralFeature(i);
	if (genDiagram.getDomainDiagramElement().getEcoreClass().equals(eStructuralFeature.getEType())) {
		featureName = eStructuralFeature.getName();
a190 4
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.ExtendedMetaData"));
d192 1
a192 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d196 1
a196 1
    stringBuffer.append(featureName);
d198 1
a198 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d200 1
a200 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d205 1
@


1.29
log
@importAssistant for #139375 changes
@
text
@d38 33
a70 32
  protected final String TEXT_19 = NL + "\t\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\ttry {";
  protected final String TEXT_21 = NL + "\t\t\t";
  protected final String TEXT_22 = " options = new ";
  protected final String TEXT_23 = "();" + NL + "\t\t\toptions.put(";
  protected final String TEXT_24 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\tmodelResource.save(options);";
  protected final String TEXT_25 = NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException e) {" + NL + "\t\t\t";
  protected final String TEXT_26 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t}\t" + NL;
  protected final String TEXT_27 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_28 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_29 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_30 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_31 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_32 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Create a new instance of domain element associated with canvas." + NL + "\t * <!-- begin-user-doc -->" + NL + "\t * <!-- end-user-doc -->" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static EObject createInitialModel() {";
  protected final String TEXT_33 = NL + "\t\treturn ";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = ".create(";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "());" + NL + "\t}" + NL;
  protected final String TEXT_38 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static EObject createInitialRoot(EObject model) {";
  protected final String TEXT_39 = NL + "\t\treturn model;";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = " eClass = ";
  protected final String TEXT_42 = ".INSTANCE.getDocumentRoot(";
  protected final String TEXT_43 = ".eINSTANCE);" + NL + "\t\t";
  protected final String TEXT_44 = " eStructuralFeature = eClass.getEStructuralFeature(\"";
  protected final String TEXT_45 = "\");" + NL + "\t\tEObject rootObject = ";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = ".create(eClass);" + NL + "\t\trootObject.eSet(eStructuralFeature, model);" + NL + "\t\treturn rootObject;";
  protected final String TEXT_48 = NL + "\t}";
  protected final String TEXT_49 = NL + "}";
  protected final String TEXT_50 = NL;
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d130 1
a130 1
    if (standaloneDomainModel) {
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource"));
d138 1
a138 1
    }
d142 2
d145 1
a145 1
    stringBuffer.append(TEXT_27);
d147 1
a147 1
    stringBuffer.append(TEXT_28);
d149 1
a149 1
    stringBuffer.append(TEXT_29);
d151 1
a151 1
    stringBuffer.append(TEXT_30);
d153 1
a153 1
    stringBuffer.append(TEXT_31);
d155 1
a155 1
    stringBuffer.append(TEXT_32);
d159 1
a159 1
    stringBuffer.append(TEXT_33);
d161 1
a161 1
    stringBuffer.append(TEXT_34);
d163 1
a163 1
    stringBuffer.append(TEXT_35);
d165 1
a165 1
    stringBuffer.append(TEXT_36);
d167 1
a167 1
    stringBuffer.append(TEXT_37);
d169 1
a169 1
    stringBuffer.append(TEXT_38);
d171 1
a171 1
    stringBuffer.append(TEXT_39);
d184 1
a184 1
    stringBuffer.append(TEXT_40);
d186 1
a186 1
    stringBuffer.append(TEXT_41);
d188 1
a188 1
    stringBuffer.append(TEXT_42);
d190 1
a190 1
    stringBuffer.append(TEXT_43);
d192 1
a192 1
    stringBuffer.append(TEXT_44);
d194 1
a194 1
    stringBuffer.append(TEXT_45);
d196 1
a196 1
    stringBuffer.append(TEXT_46);
d198 1
a198 1
    stringBuffer.append(TEXT_47);
d200 1
a200 1
    stringBuffer.append(TEXT_48);
d202 1
a202 1
    stringBuffer.append(TEXT_49);
d204 1
a204 1
    stringBuffer.append(TEXT_50);
@


1.28
log
@#139375 respect documentRoot for models generated from schema (like emf/templates/editor/ModelWizard.javajet#createInitialModel  does)
@
text
@d59 11
a69 9
  protected final String TEXT_40 = NL + "\t\tEClass eClass = ";
  protected final String TEXT_41 = ".INSTANCE.getDocumentRoot(";
  protected final String TEXT_42 = ".eINSTANCE);" + NL + "\t\tEStructuralFeature eStructuralFeature = eClass.getEStructuralFeature(\"";
  protected final String TEXT_43 = "\");" + NL + "\t\tEObject rootObject = ";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = ".create(eClass);" + NL + "\t\trootObject.eSet(eStructuralFeature, model);" + NL + "\t\treturn rootObject;";
  protected final String TEXT_46 = NL + "\t}";
  protected final String TEXT_47 = NL + "}";
  protected final String TEXT_48 = NL;
d182 2
d185 1
a185 1
    stringBuffer.append(TEXT_41);
d187 3
a189 1
    stringBuffer.append(TEXT_42);
d191 1
a191 1
    stringBuffer.append(TEXT_43);
d193 1
a193 1
    stringBuffer.append(TEXT_44);
d195 1
a195 1
    stringBuffer.append(TEXT_45);
d197 1
a197 1
    stringBuffer.append(TEXT_46);
d199 1
a199 1
    stringBuffer.append(TEXT_47);
d201 1
a201 1
    stringBuffer.append(TEXT_48);
@


1.27
log
@using M6 to generate code.
@
text
@d6 1
d30 38
a67 27
  protected final String TEXT_11 = NL + "\t\t\t\tEObject model = ";
  protected final String TEXT_12 = ".";
  protected final String TEXT_13 = ".create(";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\t\t\tmodelResource.getContents().add(model);";
  protected final String TEXT_17 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_18 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_19 = NL + "\t\t\t\tmodel, ";
  protected final String TEXT_20 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_21 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_22 = NL + "\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_23 = NL + "\t\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_24 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\ttry {";
  protected final String TEXT_25 = NL + "\t\t\t";
  protected final String TEXT_26 = " options = new ";
  protected final String TEXT_27 = "();" + NL + "\t\t\toptions.put(";
  protected final String TEXT_28 = ".OPTION_ENCODING, \"UTF-8\"); //$NON-NLS-1$" + NL + "\t\t\tmodelResource.save(options);";
  protected final String TEXT_29 = NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException e) {" + NL + "\t\t\t";
  protected final String TEXT_30 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t}\t" + NL;
  protected final String TEXT_31 = NL + "\t\ttry {" + NL + "\t\t\tmodelFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_32 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(\"Unable to set charset for model file\", e); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_34 = NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new SubProgressMonitor(progressMonitor, 1)); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_35 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_36 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_37 = NL;
a104 2
	GenPackage domainGenPackage = genDiagram.getDomainDiagramElement().getGenPackage();

d106 1
a106 1
    stringBuffer.append(importManager.getImportedName(domainGenPackage.getQualifiedFactoryInterfaceName()));
d108 1
a108 1
    stringBuffer.append(domainGenPackage.getFactoryInstanceName());
d110 4
a113 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d115 1
a115 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d117 1
a117 1
    	if (standaloneDomainModel) {
d119 1
a119 1
    	} else {
d121 1
a121 4
    
	}
}

d123 1
a123 1
    if (genDiagram.getDomainDiagramElement() != null) {
d125 1
a125 1
    }
d127 1
a127 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d129 1
a129 1
    if (genDiagram.getDomainDiagramElement() != null) {
d131 1
a131 1
    }
d133 1
a133 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d135 1
a135 1
    if (standaloneDomainModel) {
d137 1
a137 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d139 1
a139 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d141 1
a141 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.xmi.XMIResource"));
d143 2
a145 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d147 1
a147 1
    if (standaloneDomainModel) {
d149 1
a149 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d151 3
a153 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d155 1
a155 1
    }
d157 1
a157 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d159 1
a159 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d161 33
d195 1
a195 1
    stringBuffer.append(TEXT_37);
@


1.26
log
@restore generators
@
text
@d59 1
a59 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.25
log
@#134095 do not store compiled templates in cvs
@
text
@d59 1
a59 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.24
log
@Switching to eclipse M6.
@
text
@@


1.23
log
@#132465 Bidi3.2: [HCG]Encoding of the mindmap diagram is always ASCII
@
text
@d59 1
a59 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.22
log
@#132465 Bidi3.2: [HCG]Encoding of the mindmap diagram is always ASCII
@
text
@d25 1
a25 1
  protected final String TEXT_7 = ".createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 2); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
d48 8
a55 2
  protected final String TEXT_30 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t}\t" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_31 = NL;
d137 12
d150 1
a150 1
    stringBuffer.append(TEXT_31);
@


1.21
log
@#131439 Factory.eINSTANCE should be FactoryImpl.eINSTANCE
@
text
@d43 7
a49 4
  protected final String TEXT_25 = NL + "\t\t\tmodelResource.save(Collections.EMPTY_MAP);";
  protected final String TEXT_26 = NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException e) {" + NL + "\t\t\t";
  protected final String TEXT_27 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t}\t" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_28 = NL;
d121 6
d128 1
a128 1
    stringBuffer.append(TEXT_26);
d130 1
a130 1
    stringBuffer.append(TEXT_27);
d132 1
a132 1
    stringBuffer.append(TEXT_28);
@


1.20
log
@#130491 typo (missed "()")  in generated code
@
text
@d5 1
d30 17
a46 16
  protected final String TEXT_12 = ".eINSTANCE.create(";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t\t\t\tmodelResource.getContents().add(model);";
  protected final String TEXT_16 = NL + "\t\t\t\tdiagramResource.getContents().add(model);";
  protected final String TEXT_17 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_18 = NL + "\t\t\t\tmodel, ";
  protected final String TEXT_19 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_20 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_21 = NL + "\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_22 = NL + "\t\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_23 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\ttry {";
  protected final String TEXT_24 = NL + "\t\t\tmodelResource.save(Collections.EMPTY_MAP);";
  protected final String TEXT_25 = NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException e) {" + NL + "\t\t\t";
  protected final String TEXT_26 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t}\t" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_27 = NL;
d82 4
a85 1
    if (genDiagram.getDomainDiagramElement() != null) {
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedFactoryInterfaceName()));
d89 2
d92 1
a92 1
    stringBuffer.append(TEXT_13);
d94 1
a94 1
    stringBuffer.append(TEXT_14);
d96 1
a96 1
    stringBuffer.append(TEXT_15);
d98 1
a98 1
    stringBuffer.append(TEXT_16);
d103 1
a103 1
    stringBuffer.append(TEXT_17);
d105 1
a105 1
    stringBuffer.append(TEXT_18);
d107 1
a107 1
    stringBuffer.append(TEXT_19);
d109 1
a109 1
    stringBuffer.append(TEXT_20);
d111 1
a111 1
    stringBuffer.append(TEXT_21);
d113 1
a113 1
    stringBuffer.append(TEXT_22);
d115 1
a115 1
    stringBuffer.append(TEXT_23);
d117 1
a117 1
    stringBuffer.append(TEXT_24);
d119 1
a119 1
    stringBuffer.append(TEXT_25);
d121 1
a121 1
    stringBuffer.append(TEXT_26);
d123 1
a123 1
    stringBuffer.append(TEXT_27);
@


1.19
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d33 1
a33 1
  protected final String TEXT_16 = NL + "\t\t\t\tdiagramResource.getContents.add(model);";
@


1.18
log
@#127696 Templates should use new transaction API
@
text
@d18 27
a44 24
  protected final String TEXT_1 = NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = ";
  protected final String TEXT_4 = ".createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 2); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
  protected final String TEXT_5 = NL + "\t\tIPath modelFileRelativePath = diagramFile.getFullPath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_6 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new Path(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = resourceSet.createResource(URI.createPlatformResourceURI(modelFile.getFullPath().toString()));" + NL + "\t\taffectedFiles.add(modelFile);" + NL + "\t\t";
  protected final String TEXT_7 = NL + "\t\tfinal String kindParam = kind;" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(editingDomain, \"Creating diagram and model\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {";
  protected final String TEXT_8 = NL + "\t\t\t\tEObject model = ";
  protected final String TEXT_9 = ".eINSTANCE.create(";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "());";
  protected final String TEXT_12 = NL + "\t\t\t\tmodelResource.getContents().add(model);";
  protected final String TEXT_13 = NL + "\t\t\t\tdiagramResource.getContents.add(model);";
  protected final String TEXT_14 = NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_15 = NL + "\t\t\t\tmodel, ";
  protected final String TEXT_16 = NL + "\t\t\t\tkindParam, ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_18 = NL + "\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_19 = NL + "\t\t\t\t}" + NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new SubProgressMonitor(progressMonitor, 1), null);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\ttry {";
  protected final String TEXT_21 = NL + "\t\t\tmodelResource.save(Collections.EMPTY_MAP);";
  protected final String TEXT_22 = NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException e) {" + NL + "\t\t\t";
  protected final String TEXT_23 = ".getInstance().logError(\"Unable to store model and diagram resources\", e); //$NON-NLS-1$" + NL + "\t\t}\t" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_24 = NL;
a53 1
importManager.emitPackageStatement(stringBuffer);
d55 10
d66 1
a66 1
    stringBuffer.append(TEXT_2);
d68 1
a68 1
    stringBuffer.append(TEXT_3);
d70 1
a70 1
    stringBuffer.append(TEXT_4);
d75 1
a75 1
    stringBuffer.append(TEXT_5);
d77 1
a77 1
    stringBuffer.append(TEXT_6);
d79 1
a79 1
    stringBuffer.append(TEXT_7);
d81 1
a81 1
    stringBuffer.append(TEXT_8);
d83 1
a83 1
    stringBuffer.append(TEXT_9);
d85 1
a85 1
    stringBuffer.append(TEXT_10);
d87 1
a87 1
    stringBuffer.append(TEXT_11);
d89 1
a89 1
    stringBuffer.append(TEXT_12);
d91 1
a91 1
    stringBuffer.append(TEXT_13);
a95 6
    stringBuffer.append(TEXT_14);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d101 1
a101 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d103 1
a103 1
    if (standaloneDomainModel) {
d109 6
d116 1
a116 1
    stringBuffer.append(TEXT_24);
@


1.17
log
@#127696 Templates should use new transaction API
@
text
@d18 1
a18 1
  protected final String TEXT_1 = NL + "import java.io.IOException;" + NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.commands.ExecutionException;" + NL + "import org.eclipse.core.commands.operations.OperationHistoryFactory;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.core.runtime.SubProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d21 1
a21 1
  protected final String TEXT_4 = ".createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\tprogressMonitor.beginTask(\"Creating diagram and model files\", 2); //$NON-NLS-1$" + NL + "\t\tfinal IProgressMonitor subProgressMonitor = new SubProgressMonitor(progressMonitor, 1);" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(subProgressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t\tfinal Resource diagramResource = editingDomain.createResource(URI.createFileURI(diagramFile.getLocation().toOSString()).toString());" + NL + "\t\tList affectedFiles = new ArrayList();" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t";
d23 1
a23 1
  protected final String TEXT_6 = "\"); //$NON-NLS-1$" + NL + "\t\tIFile modelFile = diagramFile.getParent().getFile(new Path(modelFileRelativePath.lastSegment()));" + NL + "\t\tfinal Resource modelResource = editingDomain.createResource(URI.createFileURI(modelFile.getLocation().toOSString()).toString());" + NL + "\t\taffectedFiles.add(modelFile);" + NL + "\t\t";
@


1.16
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d18 1
a18 1
  protected final String TEXT_1 = NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
d21 21
a41 18
  protected final String TEXT_4 = ".createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tfinal MEditingDomain editingDomain = MEditingDomain.createNewDomain();" + NL + "\t\tfinal IProgressMonitor progressMonitorCopy = progressMonitor;" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitorCopy);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "" + NL + "\t\tIPath diagramFilePath = diagramFile.getLocation();" + NL + "\t\tfinal Resource diagramResource = editingDomain.createResource(diagramFilePath.toOSString());";
  protected final String TEXT_5 = NL + "\t\tIPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_6 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.createResource(modelFilePath.toOSString());";
  protected final String TEXT_7 = NL + NL + "\t\tif (diagramResource != null";
  protected final String TEXT_8 = " && modelResource != null";
  protected final String TEXT_9 = ") {" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\teditingDomain.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {";
  protected final String TEXT_10 = NL + "\t\t\t\t\tEObject model = editingDomain.create(";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "());";
  protected final String TEXT_13 = NL + "\t\t\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\t\t\teditingDomain.saveResource(modelResource);";
  protected final String TEXT_14 = NL + "\t\t\t\t\tdiagramResource.getContents.add(model);";
  protected final String TEXT_15 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(";
  protected final String TEXT_16 = NL + "\t\t\t\t\tmodel, ";
  protected final String TEXT_17 = NL + "\t\t\t\t\tkindParam, ";
  protected final String TEXT_18 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\t\tdiagram.setName(diagramFile.getName());";
  protected final String TEXT_19 = NL + "\t\t\t\t\t\tdiagram.setElement(model);";
  protected final String TEXT_20 = NL + "\t\t\t\t\t\teditingDomain.saveResource(diagramResource);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_21 = NL;
d68 1
a68 1
    if (standaloneDomainModel) {
d70 1
a70 1
    }
d72 1
a72 1
    if (genDiagram.getDomainDiagramElement() != null) {
d74 1
a74 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d76 1
a76 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d78 1
a78 1
    	if (standaloneDomainModel) {
a79 2
    	} else {
    stringBuffer.append(TEXT_14);
d84 2
d87 1
a87 1
    if (genDiagram.getDomainDiagramElement() != null) {
d89 1
a89 1
    }
d91 1
a91 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d93 1
a93 1
    if (genDiagram.getDomainDiagramElement() != null) {
d95 4
d100 3
a102 1
    stringBuffer.append(TEXT_20);
d104 1
a104 1
    stringBuffer.append(TEXT_21);
@


1.15
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d26 13
a38 8
  protected final String TEXT_9 = ") {" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\teditingDomain.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {" + NL + "\t\t\t\t\tEObject model = editingDomain.create(";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "());";
  protected final String TEXT_12 = "\t\t\t\t\t" + NL + "\t\t\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\t\t\teditingDomain.saveResource(modelResource);";
  protected final String TEXT_13 = NL + "\t\t\t\t\tdiagramResource.getContents.add(model);";
  protected final String TEXT_14 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(model, kindParam, ";
  protected final String TEXT_15 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\t\tdiagram.setName(diagramFile.getName());" + NL + "\t\t\t\t\t\tdiagram.setElement(model);" + NL + "\t\t\t\t\t\teditingDomain.saveResource(diagramResource);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_16 = NL;
d56 4
a59 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d65 1
a65 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d69 2
d72 1
a72 1
    stringBuffer.append(TEXT_10);
a73 2
    stringBuffer.append(TEXT_11);
    if (!editorGen.isSameFileForDiagramAndModel()) {
d75 1
a75 1
    } else {
d77 9
d87 1
a87 1
    stringBuffer.append(TEXT_14);
d89 5
a93 1
    stringBuffer.append(TEXT_15);
d95 1
a95 1
    stringBuffer.append(TEXT_16);
@


1.14
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d18 16
a33 18
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MEditingDomain;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator, IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window, IProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "\t\tIFile diagramFile = ";
  protected final String TEXT_6 = ".createNewDiagramFile(diagramFileCreator, containerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it creates resources." + NL + "\t * </p>" + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator, IPath containerFullPath, String fileName, InputStream initialContents, String kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "\t\tfinal MEditingDomain editingDomain = MEditingDomain.createNewDomain();" + NL + "\t\tfinal IProgressMonitor progressMonitorCopy = progressMonitor;" + NL + "\t\tfinal IFile diagramFile = diagramFileCreator.createNewFile(containerFullPath, fileName, initialContents, shell, new IRunnableContext() {" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitorCopy);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "" + NL + "\t\tIPath diagramFilePath = diagramFile.getLocation();" + NL + "\t\tfinal Resource diagramResource = editingDomain.createResource(diagramFilePath.toOSString());";
  protected final String TEXT_7 = NL + "\t\tIPath modelFilePath = diagramFilePath.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_8 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = editingDomain.createResource(modelFilePath.toOSString());";
  protected final String TEXT_9 = NL + NL + "\t\tif (diagramResource != null";
  protected final String TEXT_10 = " && modelResource != null";
  protected final String TEXT_11 = ") {" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\teditingDomain.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {" + NL + "\t\t\t\t\tEObject model = editingDomain.create(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "());";
  protected final String TEXT_14 = "\t\t\t\t\t" + NL + "\t\t\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\t\t\teditingDomain.saveResource(modelResource);";
  protected final String TEXT_15 = NL + "\t\t\t\t\tdiagramResource.getContents.add(model);";
  protected final String TEXT_16 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(model, kindParam, ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\t\tdiagram.setName(diagramFile.getName());" + NL + "\t\t\t\t\t\tdiagram.setElement(model);" + NL + "\t\t\t\t\t\teditingDomain.saveResource(diagramResource);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
d39 5
a43 2
GenDiagram genDiagram = (GenDiagram) argument;
GenEditorGenerator editorGen = genDiagram.getEditorGen();
d45 1
a45 1
    stringBuffer.append(editorGen.getEditor().getPackageName());
d47 1
a47 1
    ImportUtil importManager = new ImportUtil(editorGen.getEditor().getPackageName());
d49 1
a49 1
    importManager.markImportLocation(stringBuffer);
d51 1
a51 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
d53 1
a53 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
d55 2
a57 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(editorGen.getDomainFileExtension());
d61 1
a61 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d63 1
a63 1
    }
d65 1
a65 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d67 1
a67 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d69 1
a69 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d71 1
a71 1
    } else {
d73 1
a73 1
    }
a74 4
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
    stringBuffer.append(TEXT_17);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_18);
@


1.13
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d44 1
a44 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d46 1
a46 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.12
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d40 3
a42 1
    GenDiagram genDiagram = (GenDiagram) argument;
d54 1
a54 1
    if (!genDiagram.isSameFileForDiagramAndModel()) {
d56 1
a56 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase());
d60 1
a60 1
    if (!genDiagram.isSameFileForDiagramAndModel()) {
d68 1
a68 1
    if (!genDiagram.isSameFileForDiagramAndModel()) {
@


1.11
log
@ImportManager moved to oeg.common
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d28 8
a35 9
  protected final String TEXT_11 = ") {" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\teditingDomain.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {";
  protected final String TEXT_12 = NL + "\t\t\t\t\tEObject model = editingDomain.create(";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = "\t\t\t\t\t" + NL + "\t\t\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\t\t\teditingDomain.saveResource(modelResource);";
  protected final String TEXT_16 = NL + "\t\t\t\t\tdiagramResource.getContents.add(model);";
  protected final String TEXT_17 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(model, kindParam, ";
  protected final String TEXT_18 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tdiagramResource.getContents().add(diagram);" + NL + "\t\t\t\t\t\tdiagram.setName(diagramFile.getName());" + NL + "\t\t\t\t\t\tdiagram.setElement(model);" + NL + "\t\t\t\t\t\teditingDomain.saveResource(diagramResource);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_19 = NL;
d62 1
a62 4
    
GenPackage genPackage = genDiagram.getDomainMetaModel();
String domainPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());

d64 1
a64 1
    stringBuffer.append(domainPackageInterfaceName);
d66 1
a66 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d68 1
a68 1
    if (!genDiagram.isSameFileForDiagramAndModel()) {
d70 1
a70 1
    } else {
d72 1
a72 1
    }
d74 1
a74 1
    stringBuffer.append(genDiagram.getPlugin().getActivatorClassName());
a75 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_19);
@


1.10
log
@#121427
Fixing problems with re-creation recently removed diagram.
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.ImportUtil;
@


1.9
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Status;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
d23 8
a30 8
  protected final String TEXT_5 = " extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator," + NL + "\t\tIPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "" + NL + "\t\tIFile diagramFile = ";
  protected final String TEXT_6 = ".createNewDiagramFile(diagramFileCreator," + NL + "\t\t\tcontainerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates a new diagram file resource in the selected container and with" + NL + "\t * the selected name. Creates any missing resource containers along the" + NL + "\t * path; does nothing if the container resources already exist." + NL + "\t * <p>" + NL + "\t * In normal usage, this method is invoked after the user has pressed Finish" + NL + "\t * on the wizard; the enablement of the Finish button implies that all" + NL + "\t * controls on on this page currently contain valid values." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * Note that this page caches the new file once it has been successfully" + NL + "\t * created; subsequent invocations of this method will answer the same file" + NL + "\t * resource without attempting to create it again." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it" + NL + "\t * creates resources." + NL + "\t * </p>" + NL + "\t * " + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was" + NL + "\t *         not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator," + NL + "\t\tIPath containerFullPath, String fileName, InputStream initialContents," + NL + "\t\tString kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "" + NL + "\t\tfinal IProgressMonitor progressMonitorParam = progressMonitor;" + NL + "\t\tfinal IFile newDiagramFile = diagramFileCreator.createNewFile(containerFullPath," + NL + "\t\t\tfileName, initialContents, shell, new IRunnableContext() {" + NL + "" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitorParam);" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_7 = NL + "\t\tIPath modelFilePath = newDiagramFile.getLocation().removeFileExtension();" + NL + "\t\tmodelFilePath = modelFilePath.addFileExtension(\"";
  protected final String TEXT_8 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = ResourceUtil.create(modelFilePath.toOSString(), null);";
  protected final String TEXT_9 = NL + "\t\tResource notationModel = null;" + NL + "\t\ttry {" + NL + "\t\t\tnewDiagramFile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\tString completeFileName = newDiagramFile.getLocation().toOSString();" + NL + "\t\t\tnotationModel = ResourceUtil.create(completeFileName, null);" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tIStatus status = new Status(IStatus.ERROR, ";
  protected final String TEXT_10 = ".ID, 0, e.getMessage(), e);" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().getLog().log(status);" + NL + "\t\t}" + NL + "" + NL + "\t\tif (notationModel != null) {" + NL + "\t\t\tfinal Resource notationModelParam = notationModel;" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {";
  protected final String TEXT_12 = NL + "\t\t\t\t\tEObject model = EObjectUtil.create(";
d32 5
a36 5
  protected final String TEXT_14 = "());" + NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(model, kindParam, ";
  protected final String TEXT_15 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(diagram);";
  protected final String TEXT_16 = NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(model);";
  protected final String TEXT_17 = NL + "\t\t\t\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\t\t\t\tResourceUtil.save(modelResource);";
  protected final String TEXT_18 = NL + "\t\t\t\t\t\tdiagram.setName(newDiagramFile.getName());" + NL + "\t\t\t\t\t\tdiagram.setElement(model);" + NL + "\t\t\t\t\t\tResourceUtil.save(notationModelParam);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn newDiagramFile;" + NL + "\t}" + NL + "}";
d60 1
a60 1
    stringBuffer.append(genDiagram.getPlugin().getActivatorClassName());
d62 1
a62 1
    stringBuffer.append(genDiagram.getPlugin().getActivatorClassName());
d73 1
a73 1
    stringBuffer.append(genDiagram.getPlugin().getActivatorClassName());
d75 1
a75 1
    if (genDiagram.isSameFileForDiagramAndModel()) {
d77 1
a77 1
    } else {
d79 1
a79 1
    }
@


1.8
log
@Removing usages of deprecated API.
@
text
@d32 2
a33 2
  protected final String TEXT_14 = "());" + NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(model, kindParam, new PreferencesHint(";
  protected final String TEXT_15 = ".EDITOR_ID));" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(diagram);";
d60 1
a60 1
    stringBuffer.append(genDiagram.getPluginClassName());
d62 1
a62 1
    stringBuffer.append(genDiagram.getPluginClassName());
d73 1
a73 1
    stringBuffer.append(genDiagram.getPluginClassName());
@


1.7
log
@#116031 avoid hardcoded class names in templates
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Status;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
d32 1
a32 1
  protected final String TEXT_14 = "());" + NL + "\t\t\t\t\tDiagram diagram = DiagramUtil.createDiagram(model, kindParam, new PreferencesHint(";
@


1.6
log
@catch up with recent API changes in the runtime
@
text
@d22 16
a37 14
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class DiagramEditorUtil extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(DiagramFileCreator diagramFileCreator," + NL + "\t\tIPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "" + NL + "\t\tIFile diagramFile = DiagramEditorUtil.createNewDiagramFile(diagramFileCreator," + NL + "\t\t\tcontainerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates a new diagram file resource in the selected container and with" + NL + "\t * the selected name. Creates any missing resource containers along the" + NL + "\t * path; does nothing if the container resources already exist." + NL + "\t * <p>" + NL + "\t * In normal usage, this method is invoked after the user has pressed Finish" + NL + "\t * on the wizard; the enablement of the Finish button implies that all" + NL + "\t * controls on on this page currently contain valid values." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * Note that this page caches the new file once it has been successfully" + NL + "\t * created; subsequent invocations of this method will answer the same file" + NL + "\t * resource without attempting to create it again." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it" + NL + "\t * creates resources." + NL + "\t * </p>" + NL + "\t * " + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was" + NL + "\t *         not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(DiagramFileCreator diagramFileCreator," + NL + "\t\tIPath containerFullPath, String fileName, InputStream initialContents," + NL + "\t\tString kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "" + NL + "\t\tfinal IProgressMonitor progressMonitorParam = progressMonitor;" + NL + "\t\tfinal IFile newDiagramFile = diagramFileCreator.createNewFile(containerFullPath," + NL + "\t\t\tfileName, initialContents, shell, new IRunnableContext() {" + NL + "" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitorParam);" + NL + "\t\t\t}" + NL + "\t\t});";
  protected final String TEXT_5 = NL + "\t\tIPath modelFilePath = newDiagramFile.getLocation().removeFileExtension();" + NL + "\t\tmodelFilePath = modelFilePath.addFileExtension(\"";
  protected final String TEXT_6 = "\"); //$NON-NLS-1$" + NL + "\t\tfinal Resource modelResource = ResourceUtil.create(modelFilePath.toOSString(), null);";
  protected final String TEXT_7 = NL + "\t\tResource notationModel = null;" + NL + "\t\ttry {" + NL + "\t\t\tnewDiagramFile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\tString completeFileName = newDiagramFile.getLocation().toOSString();" + NL + "\t\t\tnotationModel = ResourceUtil.create(completeFileName, null);" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tIStatus status = new Status(IStatus.ERROR, ";
  protected final String TEXT_8 = ".ID, 0, e.getMessage(), e);" + NL + "\t\t\t";
  protected final String TEXT_9 = ".getInstance().getLog().log(status);" + NL + "\t\t}" + NL + "" + NL + "\t\tif (notationModel != null) {" + NL + "\t\t\tfinal Resource notationModelParam = notationModel;" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {";
  protected final String TEXT_10 = NL + "\t\t\t\t\tEObject model = EObjectUtil.create(";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "());" + NL + "\t\t\t\t\tDiagram diagram = DiagramUtil.createDiagram(model, kindParam, new PreferencesHint(";
  protected final String TEXT_13 = ".EDITOR_ID));" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(diagram);";
  protected final String TEXT_14 = NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(model);";
  protected final String TEXT_15 = NL + "\t\t\t\t\t\tmodelResource.getContents().add(model);" + NL + "\t\t\t\t\t\tResourceUtil.save(modelResource);";
  protected final String TEXT_16 = NL + "\t\t\t\t\t\tdiagram.setName(newDiagramFile.getName());" + NL + "\t\t\t\t\t\tdiagram.setElement(model);" + NL + "\t\t\t\t\t\tResourceUtil.save(notationModelParam);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn newDiagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;
d50 4
d55 1
a55 1
    stringBuffer.append(TEXT_5);
d57 1
a57 1
    stringBuffer.append(TEXT_6);
d59 1
a59 1
    stringBuffer.append(TEXT_7);
d61 1
a61 1
    stringBuffer.append(TEXT_8);
d63 1
a63 1
    stringBuffer.append(TEXT_9);
d68 1
a68 1
    stringBuffer.append(TEXT_10);
d70 1
a70 1
    stringBuffer.append(TEXT_11);
d72 1
a72 1
    stringBuffer.append(TEXT_12);
d74 1
a74 1
    stringBuffer.append(TEXT_13);
d76 1
a76 1
    stringBuffer.append(TEXT_14);
d78 1
a78 1
    stringBuffer.append(TEXT_15);
d80 1
a80 1
    stringBuffer.append(TEXT_16);
d82 1
a82 1
    stringBuffer.append(TEXT_17);
@


1.5
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@d21 2
a22 2
  protected final String TEXT_3 = NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Status;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.EditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class DiagramEditorUtil extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(EditorFileCreator diagramFileCreator," + NL + "\t\tIPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "" + NL + "\t\tIFile diagramFile = DiagramEditorUtil.createNewDiagramFile(diagramFileCreator," + NL + "\t\t\tcontainerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates a new diagram file resource in the selected container and with" + NL + "\t * the selected name. Creates any missing resource containers along the" + NL + "\t * path; does nothing if the container resources already exist." + NL + "\t * <p>" + NL + "\t * In normal usage, this method is invoked after the user has pressed Finish" + NL + "\t * on the wizard; the enablement of the Finish button implies that all" + NL + "\t * controls on on this page currently contain valid values." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * Note that this page caches the new file once it has been successfully" + NL + "\t * created; subsequent invocations of this method will answer the same file" + NL + "\t * resource without attempting to create it again." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it" + NL + "\t * creates resources." + NL + "\t * </p>" + NL + "\t * " + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was" + NL + "\t *         not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(EditorFileCreator diagramFileCreator," + NL + "\t\tIPath containerFullPath, String fileName, InputStream initialContents," + NL + "\t\tString kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "" + NL + "\t\tfinal IProgressMonitor progressMonitorParam = progressMonitor;" + NL + "\t\tfinal IFile newDiagramFile = diagramFileCreator.createNewFile(containerFullPath," + NL + "\t\t\tfileName, initialContents, shell, new IRunnableContext() {" + NL + "" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitorParam);" + NL + "\t\t\t}" + NL + "\t\t});";
@


1.4
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d65 1
a65 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getName());
@


1.3
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d21 15
a35 9
  protected final String TEXT_3 = NL + "import java.io.InputStream;" + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Status;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.EditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.jface.operation.IRunnableContext;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class DiagramEditorUtil extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(EditorFileCreator diagramFileCreator," + NL + "\t\tIPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "" + NL + "\t\tIFile diagramFile = DiagramEditorUtil.createNewDiagramFile(diagramFileCreator," + NL + "\t\t\tcontainerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates a new diagram file resource in the selected container and with" + NL + "\t * the selected name. Creates any missing resource containers along the" + NL + "\t * path; does nothing if the container resources already exist." + NL + "\t * <p>" + NL + "\t * In normal usage, this method is invoked after the user has pressed Finish" + NL + "\t * on the wizard; the enablement of the Finish button implies that all" + NL + "\t * controls on on this page currently contain valid values." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * Note that this page caches the new file once it has been successfully" + NL + "\t * created; subsequent invocations of this method will answer the same file" + NL + "\t * resource without attempting to create it again." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it" + NL + "\t * creates resources." + NL + "\t * </p>" + NL + "\t * " + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was" + NL + "\t *         not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(EditorFileCreator diagramFileCreator," + NL + "\t\tIPath containerFullPath, String fileName, InputStream initialContents," + NL + "\t\tString kind, Shell shell, IProgressMonitor progressMonitor) {" + NL + "" + NL + "\t\tfinal IProgressMonitor progressMonitorParam = progressMonitor;" + NL + "\t\tfinal IFile newDiagramFile = diagramFileCreator.createNewFile(containerFullPath," + NL + "\t\t\tfileName, initialContents, shell, new IRunnableContext() {" + NL + "" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitorParam);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "" + NL + "\t\tResource notationModel = null;" + NL + "\t\ttry {" + NL + "\t\t\tnewDiagramFile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\tInputStream stream = newDiagramFile.getContents();" + NL + "\t\t\tString completeFileName = newDiagramFile.getLocation().toOSString();" + NL + "\t\t\ttry {" + NL + "\t\t\t\tnotationModel = ResourceUtil.create(completeFileName, null);" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tstream.close();" + NL + "\t\t\t}" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tIStatus status = new Status(IStatus.ERROR, ";
  protected final String TEXT_5 = ".ID, 0, e.getMessage(), e);" + NL + "\t\t\t";
  protected final String TEXT_6 = ".getInstance().getLog().log(status);" + NL + "\t\t}" + NL + "" + NL + "\t\tif (notationModel != null) {" + NL + "\t\t\tfinal Resource notationModelParam = notationModel;" + NL + "\t\t\tfinal String kindParam = kind;" + NL + "\t\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {";
  protected final String TEXT_7 = NL + "\t\t\t\t\tEObject model = EObjectUtil.create(";
  protected final String TEXT_8 = ".eINSTANCE.get";
  protected final String TEXT_9 = "());" + NL + "\t\t\t\t\tIAdaptable adapter = new EObjectAdapter(model);" + NL + "\t\t\t\t\tDiagram diagram = DiagramUtil.createDiagram(model, kindParam," + NL + "\t\t\t\t\t\tnew PreferencesHint(";
  protected final String TEXT_10 = ".EDITOR_ID));" + NL + "\t\t\t\t\tif (diagram != null) {" + NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(diagram);" + NL + "\t\t\t\t\t\tnotationModelParam.getContents().add(model);" + NL + "\t\t\t\t\t\tdiagram.setName(newDiagramFile.getName());" + NL + "\t\t\t\t\t\tdiagram.setElement(model);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "" + NL + "\t\treturn newDiagramFile;" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;
d48 6
d55 1
a55 1
    stringBuffer.append(TEXT_5);
d57 1
a57 1
    stringBuffer.append(TEXT_6);
d62 1
a62 1
    stringBuffer.append(TEXT_7);
d64 1
a64 1
    stringBuffer.append(TEXT_8);
d66 1
a66 1
    stringBuffer.append(TEXT_9);
d68 7
a74 1
    stringBuffer.append(TEXT_10);
d76 1
a76 1
    stringBuffer.append(TEXT_11);
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class DiagramEditorUtil extends IDEEditorUtil {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IFile createAndOpenDiagram(EditorFileCreator diagramFileCreator," + NL + "\t\tIPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow window," + NL + "\t\tIProgressMonitor progressMonitor, boolean openEditor, boolean saveDiagram) {" + NL + "" + NL + "\t\tIFile diagramFile = DiagramEditorUtil.createNewDiagramFile(diagramFileCreator," + NL + "\t\t\tcontainerPath, fileName, initialContents, kind, window.getShell(), progressMonitor);" + NL + "\t\tif (diagramFile != null && openEditor) {" + NL + "\t\t\tIDEEditorUtil.openDiagram(diagramFile, window, saveDiagram, progressMonitor);" + NL + "\t\t}" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates a new diagram file resource in the selected container and with" + NL + "\t * the selected name. Creates any missing resource containers along the" + NL + "\t * path; does nothing if the container resources already exist." + NL + "\t * <p>" + NL + "\t * In normal usage, this method is invoked after the user has pressed Finish" + NL + "\t * on the wizard; the enablement of the Finish button implies that all" + NL + "\t * controls on on this page currently contain valid values." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * Note that this page caches the new file once it has been successfully" + NL + "\t * created; subsequent invocations of this method will answer the same file" + NL + "\t * resource without attempting to create it again." + NL + "\t * </p>" + NL + "\t * <p>" + NL + "\t * This method should be called within a workspace modify operation since it" + NL + "\t * creates resources." + NL + "\t * </p>" + NL + "\t * " + NL + "\t * @@generated" + NL + "\t * @@return the created file resource, or <code>null</code> if the file was" + NL + "\t *         not created" + NL + "\t */" + NL + "\tpublic static final IFile createNewDiagramFile(EditorFileCreator diagramFileCreator," + NL + "\t\tIPath containerFullPath, String fileName, InputStream initialContents," + NL + "\t\tfinal String kind, Shell shell, final IProgressMonitor progressMonitor) {" + NL + "" + NL + "\t\tfinal IFile newDiagramFile = diagramFileCreator.createNewFile(containerFullPath," + NL + "\t\t\tfileName, initialContents, shell, new IRunnableContext() {" + NL + "" + NL + "\t\t\tpublic void run(boolean fork, boolean cancelable, IRunnableWithProgress runnable) throws InvocationTargetException, InterruptedException {" + NL + "\t\t\t\trunnable.run(progressMonitor);" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "" + NL + "\t\tResource notationModel = null;" + NL + "\t\ttry {" + NL + "\t\t\tnewDiagramFile.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\tInputStream stream = newDiagramFile.getContents();" + NL + "\t\t\tString completeFileName = newDiagramFile.getLocation().toOSString();" + NL + "\t\t\ttry {" + NL + "\t\t\t\tnotationModel = ResourceUtil.create(completeFileName, null);" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tstream.close();" + NL + "\t\t\t}" + NL + "\t\t} catch (Exception e) {" + NL + "\t\t\tIStatus status = new Status(IStatus.ERROR, ";
d24 1
a24 1
  protected final String TEXT_6 = ".getInstance().getLog().log(status);" + NL + "\t\t}" + NL + "" + NL + "\t\tif (notationModel != null) {" + NL + "\t\t\tfinal Resource notationModelParam = notationModel;" + NL + "\t\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {";
d27 1
a27 1
  protected final String TEXT_9 = "());" + NL + "\t\t\t\t\tIAdaptable adapter = new EObjectAdapter(model);" + NL + "\t\t\t\t\tDiagram diagram = DiagramUtil.createDiagram(model, kind," + NL + "\t\t\t\t\t\tnew PreferencesHint(";
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@a2 2
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.common.util.EList;
a34 1
    GenModel genModel = genDiagram.getEmfGenModel();
d47 1
a47 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@

