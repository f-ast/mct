head	1.41;
access;
symbols
	v20081022-1925:1.41
	v20081015-1925:1.41
	v20081008-1925:1.41
	v20081001-1925:1.41
	v20080924-1925:1.41
	v20080917-1925:1.41
	v20080911-1728:1.41
	v20080910-1520:1.41
	v20080903-1520:1.41
	v20080827-1520:1.41
	v20080813-1520:1.41
	v20080806-1520:1.41
	v20070202-0200:1.35
	v20061214-0000:1.40
	v20061120-1300:1.39
	M3_20:1.39
	v20061117-0800:1.39
	v20061027-1200:1.35
	v20061020-1000:1.35
	v20061013-1330:1.39
	v20060919-0800:1.35
	v20060907-1100:1.35
	M1_20:1.36
	v20060904-1500:1.36
	v20060824-1600:1.35
	v20060817-1500:1.35
	v20060728-0500:1.35
	v20060713-1700:1.35
	R1_0_maintenance:1.35.0.2
	R1_0:1.35
	v20060627-1200:1.35
	v20060626-1420:1.35
	v20060620-0400:1.35
	v20060616-1400:1.34
	v20060616-1200:1.34
	v20060609-1400:1.33
	v20060531-1730:1.31
	v20060530-1930:1.31
	v20060526-1200:1.30
	v20060519-1300:1.29
	v20060519-0800:1.29
	v20060512-1000:1.27
	I20060512-1000:1.27
	I20060505-1400:1.27
	I20060428-1300:1.27
	I20060424-0500:1.27
	I20060424-0300:1.26
	M6_10:1.25
	I20060407-1200:1.21
	I20060331-1000:1.20
	I20060324-0300:1.20
	I20060317-1300:1.20
	I20060317-1200:1.20
	I20060316-1300:1.19
	I20060309-1300:1.19
	M5_10:1.18
	S20060303-1600:1.18
	I20060227-1730:1.18
	I20060216-1945:1.18
	I20060210-1715:1.18
	I20060209-1815:1.18
	I20060203-0830:1.16
	I20060202-1415:1.16
	I20060129-1145:1.16
	I20060127-0900:1.16
	I20060120-1530:1.14
	I20060113-1700:1.13
	M4_10:1.13
	I20060107-1100:1.13
	I20060105-1630:1.13
	I20051230-1230:1.13
	I20051223-1100:1.13
	I20051217-0925:1.13
	I20051208-2000:1.12
	I20051201-1800:1.12
	I20051124-2000:1.11
	M3_10:1.9
	I20051118-1245:1.9
	I20051111-1800:1.4
	I20051106-0900:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.41
date	2006.12.15.17.46.19;	author dstadnik;	state dead;
branches;
next	1.40;
commitid	3a134582df6a4567;

1.40
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.39;
commitid	5f734567714f4567;

1.39
date	2006.10.06.12.15.31;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.06.12.15.32.53;	author ashatalin;	state Exp;
branches;
next	1.33;

1.33
date	2006.06.06.17.48.32;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.30;

1.30
date	2006.05.25.15.04.51;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.04.24.13.54.54;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.21;

1.21
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.03.17.13.20.58;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.24.10.23.26;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.29.18.33.26;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.23.10.11.53;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.23.07.50.50;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.18.11.54.08;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.16.15.45.26;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.04.18.26.17;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.41
log
@rewrite compartment edit part template in xpand
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.codegen.gmfgen.util.*;

public class CompartmentEditPartGenerator {
 
  protected static String nl;
  public static synchronized CompartmentEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CompartmentEditPartGenerator result = new CompartmentEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(";
  protected final String TEXT_14 = " evt) {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getCompartmentName() {" + NL + "\t\treturn \"";
  protected final String TEXT_16 = "\";" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_18 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_19 = " result = (";
  protected final String TEXT_20 = ")super.createFigure();" + NL + "\t\tresult.setTitleVisibility(false);" + NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_22 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_23 = ".PRIMARY_DRAG_ROLE, new ";
  protected final String TEXT_24 = "());";
  protected final String TEXT_25 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_26 = "());";
  protected final String TEXT_27 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_28 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_29 = "());";
  protected final String TEXT_30 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_31 = "());";
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_34 = "\", new ";
  protected final String TEXT_35 = "()); //$NON-NLS-1$";
  protected final String TEXT_36 = NL + "\t}";
  protected final String TEXT_37 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_38 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_39 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_40 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_41 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_42 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_43 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_44 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_45 = " size = new ";
  protected final String TEXT_46 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_47 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_48 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_49 = " loc = new ";
  protected final String TEXT_50 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_51 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_52 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setRatio(Double ratio) {";
  protected final String TEXT_54 = NL + "\t\tif (getFigure().getParent().getLayoutManager() instanceof ";
  protected final String TEXT_55 = ") {" + NL + "\t\t\tsuper.setRatio(ratio);" + NL + "\t\t}";
  protected final String TEXT_56 = NL + "\t\t// nothing to do -- parent layout does not accept Double constraints as ratio" + NL + "\t\t// super.setRatio(ratio); ";
  protected final String TEXT_57 = NL + "\t}" + NL + "}";
  protected final String TEXT_58 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genCompartment.getDiagram();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genCompartment.getEditPartClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genCompartment.isListLayout() ? 
		importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : 
		importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart"));
    stringBuffer.append(TEXT_7);
    {	GenCommonBase genCommonBase = genCompartment;
    stringBuffer.append(TEXT_8);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genCompartment.getEditPartClassName());
    stringBuffer.append(TEXT_12);
    if (genCompartment.isListLayout()) {
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_14);
    }
    stringBuffer.append(TEXT_15);
    stringBuffer.append(genCompartment.getTitle());
    stringBuffer.append(TEXT_16);
    if (!genCompartment.isNeedsTitle()) {
	//by default titles are shown even if there are no TitleStyle
	//we need to switch it off

    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure"));
    stringBuffer.append(TEXT_20);
    }
    stringBuffer.append(TEXT_21);
    if (genCompartment.isCanCollapse()){ 
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ResizableCompartmentEditPolicy"));
    stringBuffer.append(TEXT_24);
    }
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_26);
    if (!genCompartment.getChildNodes().isEmpty()) {
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
    stringBuffer.append(TEXT_29);
    	if (genCompartment.needsCanonicalEditPolicy()) {
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(genCompartment.getCanonicalEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_31);
    
	}
}

    {	GenCommonBase genCommonBase = genCompartment;
    stringBuffer.append(TEXT_32);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_33);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_35);
    }
    }
    stringBuffer.append(TEXT_36);
    
if (ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode().getLayoutType())) {
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
    stringBuffer.append(TEXT_52);
    
} // helper.isStoring

    stringBuffer.append(TEXT_53);
    
if (ViewmapLayoutType.UNKNOWN_LITERAL.equals(genCompartment.getNode().getLayoutType())) {

    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ConstrainedToolbarLayout"));
    stringBuffer.append(TEXT_55);
    
} else {

    stringBuffer.append(TEXT_56);
    
}

    stringBuffer.append(TEXT_57);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_58);
    return stringBuffer.toString();
  }
}@


1.40
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@@


1.39
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@d87 7
a93 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.38
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d248 1
a248 1
    	if (genDiagram.isSynchronized()) {
@


1.37
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d259 1
a259 2
for (java.util.Iterator it = genCommonBase.getCustomBehaviour().iterator(); it.hasNext();) {
	CustomBehaviour behaviour = (CustomBehaviour) it.next();
@


1.36
log
@add custom behaviour
@
text
@d87 1
a87 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.35
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d51 27
a77 26
  protected final String TEXT_32 = NL + "\t}";
  protected final String TEXT_33 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
  protected final String TEXT_34 = " createFigure() {" + NL + "\t//\t";
  protected final String TEXT_35 = " result = super.createFigure();" + NL + "\t//\tresult.setBorder(new ";
  protected final String TEXT_36 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_37 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_38 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_39 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_40 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_41 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_42 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_43 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_44 = " size = new ";
  protected final String TEXT_45 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_46 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_47 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_48 = " loc = new ";
  protected final String TEXT_49 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_50 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_51 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_52 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setRatio(Double ratio) {";
  protected final String TEXT_53 = NL + "\t\tif (getFigure().getParent().getLayoutManager() instanceof ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\tsuper.setRatio(ratio);" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\t// nothing to do -- parent layout does not accept Double constraints as ratio" + NL + "\t\t// super.setRatio(ratio); ";
  protected final String TEXT_56 = NL + "\t}" + NL + "}";
  protected final String TEXT_57 = NL;
d202 1
a202 2
    {
GenCommonBase genCommonBase = genCompartment;
d252 2
a253 1
    	}
d255 2
d259 3
a261 1
if (ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode().getLayoutType())) {
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d267 2
a268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LineBorder"));
d270 3
a273 2
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d297 2
d300 1
a300 1
    stringBuffer.append(TEXT_50);
d302 1
a302 1
    stringBuffer.append(TEXT_51);
d306 1
a306 1
    stringBuffer.append(TEXT_52);
d310 1
a310 1
    stringBuffer.append(TEXT_53);
d312 1
a312 1
    stringBuffer.append(TEXT_54);
d316 1
a316 1
    stringBuffer.append(TEXT_55);
d320 1
a320 1
    stringBuffer.append(TEXT_56);
d322 1
a322 1
    stringBuffer.append(TEXT_57);
@


1.34
log
@[mgolubev] #146531 Install ResizableCompartmentEditPolicy for child compartments in all the generated LayoutEditPolicies for NodeEditParts
@
text
@d48 29
a76 28
  protected final String TEXT_29 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_30 = "());";
  protected final String TEXT_31 = NL + "\t}";
  protected final String TEXT_32 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
  protected final String TEXT_33 = " createFigure() {" + NL + "\t//\t";
  protected final String TEXT_34 = " result = super.createFigure();" + NL + "\t//\tresult.setBorder(new ";
  protected final String TEXT_35 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_36 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_37 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_38 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_39 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_40 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_41 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_42 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_43 = " size = new ";
  protected final String TEXT_44 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_45 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_46 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_47 = " loc = new ";
  protected final String TEXT_48 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_49 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_50 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_51 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setRatio(Double ratio) {";
  protected final String TEXT_52 = NL + "\t\tif (getFigure().getParent().getLayoutManager() instanceof ";
  protected final String TEXT_53 = ") {" + NL + "\t\t\tsuper.setRatio(ratio);" + NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\t// nothing to do -- parent layout does not accept Double constraints as ratio" + NL + "\t\t// super.setRatio(ratio); ";
  protected final String TEXT_55 = NL + "\t}" + NL + "}";
  protected final String TEXT_56 = NL;
d248 2
a250 2
    stringBuffer.append(TEXT_30);
    }
d252 3
a256 2
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d260 2
d263 1
a263 1
    stringBuffer.append(TEXT_35);
a264 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d276 1
a276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d280 1
a280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d288 2
d291 1
a291 1
    stringBuffer.append(TEXT_49);
d293 1
a293 1
    stringBuffer.append(TEXT_50);
d297 1
a297 1
    stringBuffer.append(TEXT_51);
d301 1
a301 1
    stringBuffer.append(TEXT_52);
d303 1
a303 1
    stringBuffer.append(TEXT_53);
d307 1
a307 1
    stringBuffer.append(TEXT_54);
d311 1
a311 1
    stringBuffer.append(TEXT_55);
d313 1
a313 1
    stringBuffer.append(TEXT_56);
@


1.33
log
@[mgolubev] #143934 Compartment title is not shown on diagram
@
text
@d40 5
a44 5
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_22 = "());";
  protected final String TEXT_23 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_24 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_25 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d46 30
a75 26
  protected final String TEXT_27 = NL + "\t}";
  protected final String TEXT_28 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
  protected final String TEXT_29 = " createFigure() {" + NL + "\t//\t";
  protected final String TEXT_30 = " result = super.createFigure();" + NL + "\t//\tresult.setBorder(new ";
  protected final String TEXT_31 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_32 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_33 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_34 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_35 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_36 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_37 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_38 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_39 = " size = new ";
  protected final String TEXT_40 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_41 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_42 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_43 = " loc = new ";
  protected final String TEXT_44 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_45 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_46 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setRatio(Double ratio) {";
  protected final String TEXT_48 = NL + "\t\tif (getFigure().getParent().getLayoutManager() instanceof ";
  protected final String TEXT_49 = ") {" + NL + "\t\t\tsuper.setRatio(ratio);" + NL + "\t\t}";
  protected final String TEXT_50 = NL + "\t\t// nothing to do -- parent layout does not accept Double constraints as ratio" + NL + "\t\t// super.setRatio(ratio); ";
  protected final String TEXT_51 = NL + "\t}" + NL + "}";
  protected final String TEXT_52 = NL;
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
d233 1
a233 1
    if (!genCompartment.getChildNodes().isEmpty()) {
d235 1
a235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getCanonicalEditPolicyQualifiedClassName()));
d241 1
a241 1
    }
d243 1
a243 2
    
if (ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode().getLayoutType())) {
d245 1
a245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LineBorder"));
d251 2
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d258 1
a258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d268 1
a268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d274 8
d283 1
a283 1
    stringBuffer.append(TEXT_43);
d285 1
a285 1
    stringBuffer.append(TEXT_44);
d287 1
a287 1
    stringBuffer.append(TEXT_45);
d289 1
a289 1
    stringBuffer.append(TEXT_46);
d293 1
a293 1
    stringBuffer.append(TEXT_47);
d297 1
a297 1
    stringBuffer.append(TEXT_48);
d299 1
a299 1
    stringBuffer.append(TEXT_49);
d303 1
a303 1
    stringBuffer.append(TEXT_50);
d307 1
a307 1
    stringBuffer.append(TEXT_51);
d309 1
a309 1
    stringBuffer.append(TEXT_52);
@


1.32
log
@header comment should not be a javadoc comment
@
text
@d34 38
a71 33
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_16 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_17 = "());";
  protected final String TEXT_18 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_19 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_20 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_21 = "());";
  protected final String TEXT_22 = NL + "\t}";
  protected final String TEXT_23 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
  protected final String TEXT_24 = " createFigure() {" + NL + "\t//\t";
  protected final String TEXT_25 = " result = super.createFigure();" + NL + "\t//\tresult.setBorder(new ";
  protected final String TEXT_26 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_27 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_28 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_29 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_30 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_31 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_32 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_33 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_34 = " size = new ";
  protected final String TEXT_35 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_36 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_37 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_38 = " loc = new ";
  protected final String TEXT_39 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_40 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_41 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setRatio(Double ratio) {";
  protected final String TEXT_43 = NL + "\t\tif (getFigure().getParent().getLayoutManager() instanceof ";
  protected final String TEXT_44 = ") {" + NL + "\t\t\tsuper.setRatio(ratio);" + NL + "\t\t}";
  protected final String TEXT_45 = NL + "\t\t// nothing to do -- parent layout does not accept Double constraints as ratio" + NL + "\t\t// super.setRatio(ratio); ";
  protected final String TEXT_46 = NL + "\t}" + NL + "}";
  protected final String TEXT_47 = NL;
d214 4
a217 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
d219 1
a219 1
    if (!genCompartment.getChildNodes().isEmpty()) {
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d223 1
a223 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d225 1
a225 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getCanonicalEditPolicyQualifiedClassName()));
d227 1
a227 1
    }
d229 1
a229 2
    
if (ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode().getLayoutType())) {
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d233 1
a233 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d235 1
a235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LineBorder"));
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d239 2
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d260 10
d271 1
a271 1
    stringBuffer.append(TEXT_38);
d273 1
a273 1
    stringBuffer.append(TEXT_39);
d275 1
a275 1
    stringBuffer.append(TEXT_40);
d277 1
a277 1
    stringBuffer.append(TEXT_41);
d281 1
a281 1
    stringBuffer.append(TEXT_42);
d285 1
a285 1
    stringBuffer.append(TEXT_43);
d287 1
a287 1
    stringBuffer.append(TEXT_44);
d291 1
a291 1
    stringBuffer.append(TEXT_45);
d295 1
a295 1
    stringBuffer.append(TEXT_46);
d297 1
a297 1
    stringBuffer.append(TEXT_47);
@


1.31
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.30
log
@[mgolubev] #143666 CCE when compartment is added into the content pane with layout
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d178 1
a178 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.29
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d45 1
a45 1
  protected final String TEXT_26 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshRatio() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
d61 6
a66 2
  protected final String TEXT_42 = NL + "}";
  protected final String TEXT_43 = NL;
d187 3
a189 1
    stringBuffer.append(genCompartment.isListLayout() ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart"));
d260 3
a262 1
    }
d264 14
d279 1
a279 1
    stringBuffer.append(TEXT_43);
@


1.28
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d23 40
a62 42
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ";
  protected final String TEXT_9 = " {";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_12 = ";";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(";
  protected final String TEXT_16 = " evt) {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_18 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_21 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_22 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_23 = "());";
  protected final String TEXT_24 = NL + "\t}";
  protected final String TEXT_25 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
  protected final String TEXT_26 = " createFigure() {" + NL + "\t//\t";
  protected final String TEXT_27 = " result = super.createFigure();" + NL + "\t//\tresult.setBorder(new ";
  protected final String TEXT_28 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshRatio() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_29 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_31 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_32 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_33 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_35 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_36 = " size = new ";
  protected final String TEXT_37 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_38 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_39 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_40 = " loc = new ";
  protected final String TEXT_41 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_42 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_43 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_44 = NL + "}";
  protected final String TEXT_45 = NL;
d164 2
a165 1
GenCompartment genCompartment = (GenCompartment) ((Object[]) argument)[0];
d177 1
d179 1
a179 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d181 1
a181 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d183 1
a183 3
    
importManager.markImportLocation(stringBuffer);

d185 2
a186 1
    stringBuffer.append(genCompartment.getEditPartClassName());
a187 1
    stringBuffer.append(genCompartment.isListLayout() ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart"));
d189 1
a189 2
    {
GenCommonBase genCommonBase = genCompartment;
d191 1
d193 1
a193 1
    stringBuffer.append(genCommonBase.getVisualID());
d195 1
a195 1
    }
d197 1
a197 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d199 1
a199 1
    if (genCompartment.isListLayout()) {
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d203 1
a203 1
    }
d205 1
a205 1
    stringBuffer.append(genCompartment.getTitle());
d207 1
a207 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
d209 1
a209 1
    if (!genCompartment.getChildNodes().isEmpty()) {
d211 1
a211 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d213 1
a213 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d215 2
a216 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getCanonicalEditPolicyQualifiedClassName()));
d218 1
a218 1
    }
d220 1
a220 2
    
if (ViewmapLayoutTypeHelper.getSharedInstance().isStoringChildPositions(genCompartment.getNode().getLayoutType())) {
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LineBorder"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d240 2
a242 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a257 4
    }
    stringBuffer.append(TEXT_44);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_45);
@


1.27
log
@remove temp code
@
text
@d6 1
d44 1
a44 1
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
d221 2
a222 1
    if (!genCompartment.getNode().isListLayout()) {
@


1.26
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d62 2
a63 25
  protected final String TEXT_44 = NL + NL + "\t/**" + NL + "\t * Temporary fix for the https://bugs.eclipse.org/bugs/show_bug.cgi?id=132219" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_45 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_46 = " mm = getMapMode();" + NL + "\t\t";
  protected final String TEXT_47 = " rcf =" + NL + "\t\t\t(";
  protected final String TEXT_48 = ") super.createFigure();" + NL + "\t\tif (rcf instanceof ";
  protected final String TEXT_49 = ") {" + NL + "\t\t\t";
  protected final String TEXT_50 = " insets = new ";
  protected final String TEXT_51 = "(mm.DPtoLP(1), mm.DPtoLP(2), mm.DPtoLP(1), mm.DPtoLP(0));" + NL + "\t\t\t";
  protected final String TEXT_52 = " size = new ";
  protected final String TEXT_53 = "(mm.DPtoLP(15), mm.DPtoLP(15));" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_54 = " scrollpane = rcf.getScrollPane();" + NL + "\t\t\tscrollpane.setHorizontalScrollBar(new ";
  protected final String TEXT_55 = "(";
  protected final String TEXT_56 = ".HORIZONTAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));" + NL + "\t\t\tscrollpane.setVerticalScrollBar(new ";
  protected final String TEXT_57 = "(";
  protected final String TEXT_58 = ".VERTICAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));" + NL + "" + NL + "\t\t\tint MB = mm.DPtoLP(5);" + NL + "\t\t\tscrollpane.setBorder(new ";
  protected final String TEXT_59 = "(MB, MB, MB, MB));" + NL + "\t\t\tint SZ = mm.DPtoLP(10);" + NL + "\t\t\tscrollpane.setMinimumSize(new ";
  protected final String TEXT_60 = "(SZ, SZ));" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_61 = " insets = new ";
  protected final String TEXT_62 = "(mm.DPtoLP(1), mm.DPtoLP(2), mm.DPtoLP(1), mm.DPtoLP(0));" + NL + "\t\t\t";
  protected final String TEXT_63 = " size = new ";
  protected final String TEXT_64 = "(mm.DPtoLP(15), mm.DPtoLP(15));" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_65 = " scrollPane = rcf.getScrollPane();" + NL + "\t\t\tscrollPane.setVerticalScrollBar(new ";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = ".VERTICAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));" + NL + "\t\t}" + NL + "\t\treturn rcf;" + NL + "\t}" + NL + "}";
  protected final String TEXT_68 = NL;
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
a261 46
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ShapeCompartmentFigure"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Orientable"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Orientable"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MarginBorder"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Orientable"));
    stringBuffer.append(TEXT_67);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_68);
@


1.25
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d29 2
a30 2
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String VISUAL_ID = \"";
  protected final String TEXT_12 = "\";";
@


1.24
log
@using M6 to generate code.
@
text
@d27 10
a36 10
  protected final String TEXT_9 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(";
  protected final String TEXT_12 = " evt) {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_14 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_17 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_18 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
d38 49
a86 45
  protected final String TEXT_20 = NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t//public ";
  protected final String TEXT_22 = " createFigure() {" + NL + "\t//\t";
  protected final String TEXT_23 = " result = super.createFigure();" + NL + "\t//\tresult.setBorder(new ";
  protected final String TEXT_24 = "());" + NL + "\t//\treturn result;" + NL + "\t//}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshRatio() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_25 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_26 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_27 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_28 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_29 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_31 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_32 = " size = new ";
  protected final String TEXT_33 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_35 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_36 = " loc = new ";
  protected final String TEXT_37 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_38 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_39 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_40 = NL + NL + "\t/**" + NL + "\t * Temporary fix for the https://bugs.eclipse.org/bugs/show_bug.cgi?id=132219" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_41 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_42 = " mm = getMapMode();" + NL + "\t\t";
  protected final String TEXT_43 = " rcf =" + NL + "\t\t\t(";
  protected final String TEXT_44 = ") super.createFigure();" + NL + "\t\tif (rcf instanceof ";
  protected final String TEXT_45 = ") {" + NL + "\t\t\t";
  protected final String TEXT_46 = " insets = new ";
  protected final String TEXT_47 = "(mm.DPtoLP(1), mm.DPtoLP(2), mm.DPtoLP(1), mm.DPtoLP(0));" + NL + "\t\t\t";
  protected final String TEXT_48 = " size = new ";
  protected final String TEXT_49 = "(mm.DPtoLP(15), mm.DPtoLP(15));" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_50 = " scrollpane = rcf.getScrollPane();" + NL + "\t\t\tscrollpane.setHorizontalScrollBar(new ";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = ".HORIZONTAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));" + NL + "\t\t\tscrollpane.setVerticalScrollBar(new ";
  protected final String TEXT_53 = "(";
  protected final String TEXT_54 = ".VERTICAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));" + NL + "" + NL + "\t\t\tint MB = mm.DPtoLP(5);" + NL + "\t\t\tscrollpane.setBorder(new ";
  protected final String TEXT_55 = "(MB, MB, MB, MB));" + NL + "\t\t\tint SZ = mm.DPtoLP(10);" + NL + "\t\t\tscrollpane.setMinimumSize(new ";
  protected final String TEXT_56 = "(SZ, SZ));" + NL + "\t\t} else {" + NL + "\t\t\t";
  protected final String TEXT_57 = " insets = new ";
  protected final String TEXT_58 = "(mm.DPtoLP(1), mm.DPtoLP(2), mm.DPtoLP(1), mm.DPtoLP(0));" + NL + "\t\t\t";
  protected final String TEXT_59 = " size = new ";
  protected final String TEXT_60 = "(mm.DPtoLP(15), mm.DPtoLP(15));" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_61 = " scrollPane = rcf.getScrollPane();" + NL + "\t\t\tscrollPane.setVerticalScrollBar(new ";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = ".VERTICAL, insets, size, mm.DPtoLP(10), mm.DPtoLP(50)));" + NL + "\t\t}" + NL + "\t\treturn rcf;" + NL + "\t}" + NL + "}";
  protected final String TEXT_64 = NL;
d213 2
a214 1
    stringBuffer.append(genCompartment.getEditPartClassName());
a215 1
    if (genCompartment.isListLayout()) {
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d221 1
a221 1
    stringBuffer.append(genCompartment.getTitle());
d223 1
a223 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
d225 1
a225 1
    if (!genCompartment.getChildNodes().isEmpty()) {
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy"));
d229 1
a229 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy"));
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getCanonicalEditPolicyQualifiedClassName()));
d233 1
a233 1
    }
d235 1
a235 1
    if (!genCompartment.getNode().isListLayout()) {
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d241 1
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LineBorder"));
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d245 1
a245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d273 1
a273 1
    }
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure"));
d281 1
a281 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ResizableCompartmentFigure"));
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.figures.ShapeCompartmentFigure"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d291 1
a291 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d293 1
a293 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ScrollPane"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar"));
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Orientable"));
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Orientable"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MarginBorder"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Insets"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d315 8
d324 1
a324 1
    stringBuffer.append(TEXT_61);
d326 1
a326 1
    stringBuffer.append(TEXT_62);
d328 1
a328 1
    stringBuffer.append(TEXT_63);
d330 1
a330 1
    stringBuffer.append(TEXT_64);
@


1.23
log
@restore generators
@
text
@d182 1
a182 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.22
log
@#134095 do not store compiled templates in cvs
@
text
@d182 1
a182 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.21
log
@Switching to eclipse M6.
@
text
@@


1.20
log
@temp fix for #132219
@
text
@d182 1
a182 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.19
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d39 4
a42 4
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_22 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_23 = " result = super.createFigure();" + NL + "\t\tresult.setBorder(new ";
  protected final String TEXT_24 = "());" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshRatio() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
d58 25
a82 2
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
d271 46
d318 1
a318 1
    stringBuffer.append(TEXT_41);
@


1.18
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d19 41
a59 38
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(";
  protected final String TEXT_9 = " evt) {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_11 = "\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_12 = "());";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new ";
  protected final String TEXT_14 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new ";
  protected final String TEXT_15 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t}";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_19 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_20 = " result = super.createFigure();" + NL + "\t\tresult.setBorder(new ";
  protected final String TEXT_21 = "());" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshRatio() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_22 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_23 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_24 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_25 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_26 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_27 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_28 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_29 = " size = new ";
  protected final String TEXT_30 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_31 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_32 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_33 = " loc = new ";
  protected final String TEXT_34 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_35 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_36 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_37 = NL + "}";
  protected final String TEXT_38 = NL;
d165 9
d175 1
a175 1
    stringBuffer.append(TEXT_2);
d177 1
a177 1
    stringBuffer.append(TEXT_3);
d181 1
a181 1
    stringBuffer.append(TEXT_4);
d183 1
a183 1
    stringBuffer.append(TEXT_5);
d185 1
a185 1
    stringBuffer.append(TEXT_6);
d187 1
a187 1
    stringBuffer.append(TEXT_7);
d189 1
a189 1
    stringBuffer.append(TEXT_8);
d191 1
a191 1
    stringBuffer.append(TEXT_9);
d193 1
a193 1
    stringBuffer.append(TEXT_10);
d195 1
a195 1
    stringBuffer.append(TEXT_11);
d197 1
a197 1
    stringBuffer.append(TEXT_12);
d199 1
a199 1
    stringBuffer.append(TEXT_13);
d201 1
a201 1
    stringBuffer.append(TEXT_14);
d203 1
a203 1
    stringBuffer.append(TEXT_15);
d205 1
a205 1
    stringBuffer.append(TEXT_16);
d207 1
a207 1
    stringBuffer.append(TEXT_17);
d209 1
a209 1
    stringBuffer.append(TEXT_18);
d211 1
a211 1
    stringBuffer.append(TEXT_19);
d213 1
a213 1
    stringBuffer.append(TEXT_20);
d215 1
a215 1
    stringBuffer.append(TEXT_21);
a216 6
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d230 4
d235 3
a237 1
    stringBuffer.append(TEXT_32);
d239 1
a239 1
    stringBuffer.append(TEXT_33);
d241 1
a241 1
    stringBuffer.append(TEXT_34);
d243 1
a243 1
    stringBuffer.append(TEXT_35);
d245 1
a245 1
    stringBuffer.append(TEXT_36);
d247 1
a247 1
    stringBuffer.append(TEXT_37);
d249 1
a249 1
    stringBuffer.append(TEXT_38);
@


1.17
log
@ImportManager moved to oeg.common
@
text
@d58 1
a58 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d102 1
a102 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d145 1
a145 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d158 1
a158 1
GenCompartment genCompartment = (GenCompartment) argument;
@


1.16
log
@#124830 Add all children of the list compartment to the popup bar of the parent node
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.*;
@


1.15
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d35 22
a56 24
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.POPUPBAR_ROLE, new ";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_21 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_22 = " result = super.createFigure();" + NL + "\t\tresult.setBorder(new ";
  protected final String TEXT_23 = "());" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshRatio() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshVisuals() {" + NL + "\t\tsuper.refreshVisuals();" + NL + "\t\trefreshBounds();" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void handleNotificationEvent(";
  protected final String TEXT_24 = " notification) {" + NL + "\t\tsuper.handleNotificationEvent(notification);" + NL + "\t\tObject feature = notification.getFeature();" + NL + "\t\tif (";
  protected final String TEXT_25 = ".eINSTANCE.getSize_Width().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_26 = ".eINSTANCE.getSize_Height().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_27 = ".eINSTANCE.getLocation_X().equals(feature)" + NL + "\t\t\t|| ";
  protected final String TEXT_28 = ".eINSTANCE.getLocation_Y().equals(feature)) {" + NL + "\t\t\trefreshBounds();" + NL + "\t\t} " + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshBounds() {" + NL + "\t\tint width = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_29 = ".eINSTANCE.getSize_Width())).intValue();" + NL + "\t\tint height = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_30 = ".eINSTANCE.getSize_Height())).intValue();" + NL + "\t\t";
  protected final String TEXT_31 = " size = new ";
  protected final String TEXT_32 = "(width, height);" + NL + "\t\tint x = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_33 = ".eINSTANCE.getLocation_X())).intValue();" + NL + "\t\tint y = ((Integer) getStructuralFeatureValue(";
  protected final String TEXT_34 = ".eINSTANCE.getLocation_Y())).intValue();" + NL + "\t\t";
  protected final String TEXT_35 = " loc = new ";
  protected final String TEXT_36 = "(x, y);" + NL + "\t\t((";
  protected final String TEXT_37 = ") getParent()).setLayoutConstraint(this, getFigure(), new ";
  protected final String TEXT_38 = "(loc, size));" + NL + "\t}";
  protected final String TEXT_39 = NL + "}";
  protected final String TEXT_40 = NL;
a159 1
boolean isParentFlowLayout = !genCompartment.getNode().isListLayout();
d194 1
a194 4
    
}
if (genCompartment.isListLayout()) {

d196 1
a196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy"));
d198 1
a198 1
    }
d200 1
a200 3
    
if (isParentFlowLayout) {

d202 1
a202 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d204 1
a204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
d206 1
a206 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.LineBorder"));
d208 1
a208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d220 2
a222 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationPackage"));
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Point"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.GraphicalEditPart"));
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
a237 6
    
}

    stringBuffer.append(TEXT_39);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_40);
@


1.14
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d134 9
a142 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
@


1.13
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@d156 1
a156 1
boolean isParentFlowLayout = genCompartment.getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL;
a164 1
final boolean isListLayout = genCompartment.getLayoutKind() == CompartmentLayoutKind.TOOLBAR_LITERAL;
d169 1
a169 1
    stringBuffer.append(isListLayout ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeCompartmentEditPart"));
d173 1
a173 1
    if (isListLayout) {
d193 1
a193 1
if (isListLayout) {
@


1.12
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d37 22
a58 2
  protected final String TEXT_19 = NL + "\t}" + NL + "}";
  protected final String TEXT_20 = NL;
d156 1
d201 44
d246 1
a246 1
    stringBuffer.append(TEXT_20);
@


1.11
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d121 9
@


1.10
log
@#117299 add popup bar edit policy
@
text
@a2 1
import java.util.*;
d21 17
a37 17
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_8 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_9 = "\";" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_10 = "());";
  protected final String TEXT_11 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_12 = "CanonicalEditPolicy());";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.POPUPBAR_ROLE, new ";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t}" + NL + "\t";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_18 = "CanonicalEditPolicy extends ";
  protected final String TEXT_19 = " {" + NL + "\t";
a38 21
  protected final String TEXT_21 = "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_22 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
  protected final String TEXT_23 = " modelElement = (";
  protected final String TEXT_24 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_25 = "();" + NL + "\t\t\t";
  protected final String TEXT_26 = " nextValue;";
  protected final String TEXT_27 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_28 = " it = ";
  protected final String TEXT_29 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_30 = ") it.next();";
  protected final String TEXT_31 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_32 = ";";
  protected final String TEXT_33 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_34 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_35 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\t}";
  protected final String TEXT_37 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFactoryHint(";
  protected final String TEXT_39 = " elementAdapter) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "" + NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
d131 2
a133 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d135 1
a135 5
importManager.addImport("org.eclipse.emf.common.notify.Notification");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
d137 1
a137 3
boolean isListLayout = genCompartment.getLayoutKind() == CompartmentLayoutKind.TOOLBAR_LITERAL;

    stringBuffer.append(TEXT_3);
d139 1
a139 1
    stringBuffer.append(TEXT_4);
d141 1
a141 1
    stringBuffer.append(TEXT_5);
a142 4
    stringBuffer.append(TEXT_6);
    
if (isListLayout) {

d144 1
a144 3
    
}

d146 1
a146 1
    stringBuffer.append(genCompartment.getTitle());
d148 1
a148 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
d150 1
a150 3
    
if (genCompartment.getChildNodes().size() > 0) {

d152 1
a152 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d154 1
a154 4
    
}
if (isListLayout) {

d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.PopupBarEditPolicy"));
d158 1
a158 1
    }
d160 2
d163 2
a164 3
if (genCompartment.getChildNodes().size() > 0) {
	GenChildContainer childContainer = genCompartment;
	GenNode containerNode = genCompartment.getNode();
a165 1
    stringBuffer.append(TEXT_16);
d167 1
a167 1
    stringBuffer.append(childContainer.getEditPartClassName());
d169 1
a169 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy"));
d171 1
a171 5
    
{
	String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
	Collection genNodes = childContainer.getChildNodes();

a172 60
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_26);
    
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextNode = (GenNode) it.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_30);
    
	} else {

    stringBuffer.append(TEXT_31);
    stringBuffer.append(getFeatureValueGetter("modelElement", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_32);
    
	}

    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_35);
    
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_36);
    
	}
}

    stringBuffer.append(TEXT_37);
    
}

    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_39);
    
}

    stringBuffer.append(TEXT_40);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_41);
@


1.9
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d32 29
a60 27
  protected final String TEXT_13 = NL + "\t}" + NL + "\t";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_16 = "CanonicalEditPolicy extends ";
  protected final String TEXT_17 = " {" + NL + "\t";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_20 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
  protected final String TEXT_21 = " modelElement = (";
  protected final String TEXT_22 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_23 = "();" + NL + "\t\t\t";
  protected final String TEXT_24 = " nextValue;";
  protected final String TEXT_25 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_26 = " it = ";
  protected final String TEXT_27 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_28 = ") it.next();";
  protected final String TEXT_29 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_30 = ";";
  protected final String TEXT_31 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_32 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_33 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_34 = NL + "\t\t\t}";
  protected final String TEXT_35 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_36 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFactoryHint(";
  protected final String TEXT_37 = " elementAdapter) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "" + NL + "\t}";
  protected final String TEXT_38 = NL + "}";
  protected final String TEXT_39 = NL;
d191 1
d194 4
d203 2
a204 2
    stringBuffer.append(TEXT_14);
    stringBuffer.append(TEXT_15);
d206 1
a206 1
    stringBuffer.append(TEXT_16);
d208 1
a208 1
    stringBuffer.append(TEXT_17);
d214 2
a215 2
    stringBuffer.append(TEXT_18);
    stringBuffer.append(TEXT_19);
d217 1
a217 1
    stringBuffer.append(TEXT_20);
d219 1
a219 1
    stringBuffer.append(TEXT_21);
d221 1
a221 1
    stringBuffer.append(TEXT_22);
d223 1
a223 1
    stringBuffer.append(TEXT_23);
d225 1
a225 1
    stringBuffer.append(TEXT_24);
d233 1
a233 1
    stringBuffer.append(TEXT_25);
d235 1
a235 1
    stringBuffer.append(TEXT_26);
d237 1
a237 1
    stringBuffer.append(TEXT_27);
d239 1
a239 1
    stringBuffer.append(TEXT_28);
d243 1
a243 1
    stringBuffer.append(TEXT_29);
d245 1
a245 1
    stringBuffer.append(TEXT_30);
d249 1
a249 1
    stringBuffer.append(TEXT_31);
d251 1
a251 1
    stringBuffer.append(TEXT_32);
d253 1
a253 1
    stringBuffer.append(TEXT_33);
d257 1
a257 1
    stringBuffer.append(TEXT_34);
d262 1
a262 1
    stringBuffer.append(TEXT_35);
d266 1
a266 1
    stringBuffer.append(TEXT_36);
d268 1
a268 1
    stringBuffer.append(TEXT_37);
d272 1
a272 1
    stringBuffer.append(TEXT_38);
d274 1
a274 1
    stringBuffer.append(TEXT_39);
@


1.8
log
@get rid of 'never used locally' compilation warning
@
text
@d23 36
a58 33
  protected final String TEXT_4 = " extends ListCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_6 = "\";" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_7 = "());";
  protected final String TEXT_8 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_9 = "CanonicalEditPolicy());";
  protected final String TEXT_10 = NL + "\t}" + NL + "\t";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_13 = "CanonicalEditPolicy extends ";
  protected final String TEXT_14 = " {" + NL + "\t";
  protected final String TEXT_15 = NL;
  protected final String TEXT_16 = "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_17 = " getSemanticChildrenList() {\t" + NL + "\t\t\t";
  protected final String TEXT_18 = " modelElement = (";
  protected final String TEXT_19 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_20 = "();" + NL + "\t\t\t";
  protected final String TEXT_21 = " nextValue;";
  protected final String TEXT_22 = "\t" + NL + "\t\t\tfor (";
  protected final String TEXT_23 = " it = ";
  protected final String TEXT_24 = ".iterator(); it.hasNext();) {" + NL + "\t\t\t\tnextValue = (";
  protected final String TEXT_25 = ") it.next();";
  protected final String TEXT_26 = NL + "\t\t\tnextValue = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getNodeVisualID((View) getHost().getModel(), nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_30 = " == nodeVID) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_31 = NL + "\t\t\t}";
  protected final String TEXT_32 = "\t\t\t" + NL + "\t\t\treturn result;" + NL + "\t\t}";
  protected final String TEXT_33 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected String getFactoryHint(";
  protected final String TEXT_34 = " elementAdapter) {" + NL + "\t\t\treturn \"\";" + NL + "\t\t}" + NL + "" + NL + "\t}";
  protected final String TEXT_35 = NL + "}";
  protected final String TEXT_36 = NL;
a154 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart");
d160 2
d165 2
d168 9
a176 1
    stringBuffer.append(TEXT_5);
d178 1
a178 1
    stringBuffer.append(TEXT_6);
d180 1
a180 1
    stringBuffer.append(TEXT_7);
d184 1
a184 1
    stringBuffer.append(TEXT_8);
d186 1
a186 1
    stringBuffer.append(TEXT_9);
d190 1
a190 1
    stringBuffer.append(TEXT_10);
d196 2
a197 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(TEXT_12);
d199 1
a199 1
    stringBuffer.append(TEXT_13);
d201 1
a201 1
    stringBuffer.append(TEXT_14);
d207 2
a208 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(TEXT_16);
d210 1
a210 1
    stringBuffer.append(TEXT_17);
d212 1
a212 1
    stringBuffer.append(TEXT_18);
d214 1
a214 1
    stringBuffer.append(TEXT_19);
d216 1
a216 1
    stringBuffer.append(TEXT_20);
d218 1
a218 1
    stringBuffer.append(TEXT_21);
d226 1
a226 1
    stringBuffer.append(TEXT_22);
d228 1
a228 1
    stringBuffer.append(TEXT_23);
d230 1
a230 1
    stringBuffer.append(TEXT_24);
d232 1
a232 1
    stringBuffer.append(TEXT_25);
d236 1
a236 1
    stringBuffer.append(TEXT_26);
d238 1
a238 1
    stringBuffer.append(TEXT_27);
d242 1
a242 1
    stringBuffer.append(TEXT_28);
d244 1
a244 1
    stringBuffer.append(TEXT_29);
d246 1
a246 1
    stringBuffer.append(TEXT_30);
d250 1
a250 1
    stringBuffer.append(TEXT_31);
d255 1
a255 1
    stringBuffer.append(TEXT_32);
d259 1
a259 1
    stringBuffer.append(TEXT_33);
d261 1
a261 1
    stringBuffer.append(TEXT_34);
d265 1
a265 1
    stringBuffer.append(TEXT_35);
d267 1
a267 1
    stringBuffer.append(TEXT_36);
@


1.7
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@d57 1
a57 1
	private String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d101 1
a101 1
	private String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
@


1.6
log
@#116655

Generating correct access for all the features.
@
text
@d26 30
a55 35
  protected final String TEXT_7 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_8 = "CanonicalEditPolicy());" + NL + "\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t}" + NL + "\t";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_11 = "CanonicalEditPolicy extends ";
  protected final String TEXT_12 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_13 = " getSemanticChildrenList() {\t";
  protected final String TEXT_14 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_15 = " modelElement = (";
  protected final String TEXT_16 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new ";
  protected final String TEXT_17 = "();" + NL;
  protected final String TEXT_18 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t\t";
  protected final String TEXT_21 = " featureValue = ";
  protected final String TEXT_22 = ";" + NL + "\t\t\tif (featureValue != null) {" + NL + "\t\t\t\tresult.add(featureValue);" + NL + "\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\t";
  protected final String TEXT_24 = " featureValues = ";
  protected final String TEXT_25 = ";" + NL + "\t\t\tfor (";
  protected final String TEXT_26 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_27 = " nextValue = (";
  protected final String TEXT_28 = ") it.next();";
  protected final String TEXT_29 = NL + "\t\t\t";
  protected final String TEXT_30 = " nextValue = ";
  protected final String TEXT_31 = ";";
  protected final String TEXT_32 = NL + "\t\t\tif (nextValue != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_33 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_34 = NL + "\t\t\t\tif (";
  protected final String TEXT_35 = ".eINSTANCE.get";
  protected final String TEXT_36 = "().equals(nextEClass)) {" + NL + "\t\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t\t} ";
  protected final String TEXT_37 = NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t\t}";
  protected final String TEXT_39 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
d167 4
d172 5
a176 1
    stringBuffer.append(TEXT_8);
d178 1
a178 1
{
a181 3
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(childContainer.getEditPartClassName());
a182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy"));
d184 1
a184 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d186 2
d189 3
a191 1
String modelElementInterfaceName = importManager.getImportedName(containerNode.getModelFacet().getMetaClass().getQualifiedInterfaceName());
a192 2
    stringBuffer.append(TEXT_14);
    stringBuffer.append(modelElementInterfaceName);
a193 1
    stringBuffer.append(modelElementInterfaceName);
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d197 1
a197 41
    
/*
	Since there could e several child nodes with the same childMetaFeatures, but different domainMetaClasses
specified, we are creating a Map{GenFeature -> Collection{GenChildNodes}}. If GenChildNode without specified 
domainMetaClass found, all the rest of GenChildNodes with the same childMetaFeature will be ignored because
all the elements from this childMetaFeature will be treated as "this" type of GenChildNodes (without specified 
domainMetaClass).
*/

Map childFeature2NodesMap = new HashMap();
for (Iterator it = childContainer.getChildNodes().iterator(); it.hasNext();) {
	GenChildNode nextChildNode = (GenChildNode) it.next();
	GenFeature genFeature = nextChildNode.getModelFacet().getChildMetaFeature();
	List genChildNodes; 
	if (!childFeature2NodesMap.containsKey(genFeature)) {
		genChildNodes = new ArrayList();
		childFeature2NodesMap.put(genFeature, genChildNodes);
	} else {
		genChildNodes = (List) childFeature2NodesMap.get(genFeature);
	}

	if (nextChildNode.getDomainMetaClass() == null) {
		genChildNodes.clear();
		genChildNodes.add(nextChildNode);
		continue;
	}
	if (genChildNodes.size() == 1 && ((GenChildNode) genChildNodes.get(0)).getDomainMetaClass() == null) {
		continue;
	}
	genChildNodes.add(nextChildNode);
}
		
// For each childMetaFeature:
for (Iterator it = childFeature2NodesMap.entrySet().iterator(); it.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) it.next();
	GenFeature nextFeature = (GenFeature) nextEntry.getKey();
	List childNodes = (List) nextEntry.getValue();
	if (childNodes.size() == 1 && ((GenChildNode) childNodes.get(0)).getDomainMetaClass() == null) {
// GenChildNode without specified domainMetaClass found:
		if (nextFeature.isListType()) {

d199 1
a199 1
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
d201 1
a201 3
    
		} else {

d203 1
a203 1
    stringBuffer.append(importManager.getImportedName(nextFeature.getTypeGenClass().getQualifiedInterfaceName()));
a204 2
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
    stringBuffer.append(TEXT_22);
d206 5
a210 7
		}
// Continue with the next entry in the Map
		continue;
	}

// GenChildNodes with specified domainMetaClass found:			
	if (nextFeature.isListType()) {
d212 2
d215 1
a215 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d217 1
a217 1
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
d219 3
a221 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d223 1
a223 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a224 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_28);
d226 1
a226 1
	} else {
d228 2
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName(nextFeature.getTypeGenClass().getQualifiedInterfaceName()));
d233 3
a235 1
    stringBuffer.append(getFeatureValueGetter("modelElement", nextFeature, false, importManager));
d239 1
a241 22
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_33);
    			
	for (Iterator childNodesIterator = childNodes.iterator(); childNodesIterator.hasNext();) {
		GenChildNode nextChildNode = (GenChildNode) childNodesIterator.next();
		GenClass domainMetaclass = nextChildNode.getDomainMetaClass();

    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(domainMetaclass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(domainMetaclass.getClassifierAccessorName());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(childNodesIterator.hasNext() ? "else" : "");
    
	}
	if (nextFeature.isListType()) {

    stringBuffer.append(TEXT_37);
    
	}

    stringBuffer.append(TEXT_38);
d245 3
a247 1
    stringBuffer.append(TEXT_39);
d251 1
a251 1
    stringBuffer.append(TEXT_40);
d253 1
a253 1
    stringBuffer.append(TEXT_41);
@


1.5
log
@#116448
Correcting CanonicalEditPolicy + SemanticEditPolicy to support references with multiplicities "1","n".
@
text
@d8 2
a9 2
public class CompartmentEditPartGenerator
{
d37 14
a50 14
  protected final String TEXT_18 = NL + "\t\t\tresult.addAll(modelElement.";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t\t\tObject featureValue = modelElement.";
  protected final String TEXT_21 = "();" + NL + "\t\t\tif (featureValue != null) {" + NL + "\t\t\t\tresult.add(featureValue);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\t";
  protected final String TEXT_23 = " featureValues = modelElement.";
  protected final String TEXT_24 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_25 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_26 = " nextValue = (";
  protected final String TEXT_27 = ") it.next();";
  protected final String TEXT_28 = NL + "\t\t\t";
  protected final String TEXT_29 = " nextValue = (";
  protected final String TEXT_30 = ") modelElement.";
  protected final String TEXT_31 = "();";
d62 82
a143 1
  public String generate(Object argument)
d239 1
a239 1
    stringBuffer.append(nextFeature.getGetAccessor());
d245 1
a245 1
    stringBuffer.append(nextFeature.getGetAccessor());
d247 2
d258 1
a258 1
    stringBuffer.append(TEXT_22);
a259 2
    stringBuffer.append(TEXT_23);
    stringBuffer.append(nextFeature.getGetAccessor());
d261 2
a263 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d267 2
a271 2
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d275 1
a275 1
    stringBuffer.append(nextFeature.getGetAccessor());
d315 1
a315 1
}
@


1.4
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d37 4
a40 4
  protected final String TEXT_18 = NL + "\t\t\tresult.";
  protected final String TEXT_19 = "(((";
  protected final String TEXT_20 = ") modelElement).";
  protected final String TEXT_21 = "());";
d42 19
a60 20
  protected final String TEXT_23 = " featureValues = ((";
  protected final String TEXT_24 = ") modelElement).";
  protected final String TEXT_25 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_26 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_27 = " nextValue = (";
  protected final String TEXT_28 = ") it.next();";
  protected final String TEXT_29 = NL + "\t\t\t";
  protected final String TEXT_30 = " nextValue = (";
  protected final String TEXT_31 = ") ((";
  protected final String TEXT_32 = ") modelElement).";
  protected final String TEXT_33 = "();";
  protected final String TEXT_34 = NL + "\t\t\t";
  protected final String TEXT_35 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_36 = NL + "\t\t\tif (";
  protected final String TEXT_37 = ".eINSTANCE.get";
  protected final String TEXT_38 = "().equals(nextEClass)) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t} ";
  protected final String TEXT_39 = NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_41 = NL + "}";
  protected final String TEXT_42 = NL;
d117 8
d148 1
d154 2
d158 1
a158 1
    stringBuffer.append(nextFeature.isListType() ? "addAll" : "add");
d160 3
a162 1
    stringBuffer.append(modelElementInterfaceName);
d167 2
d171 2
a172 1
			
d178 1
a178 1
    stringBuffer.append(modelElementInterfaceName);
d180 1
a180 1
    stringBuffer.append(nextFeature.getGetAccessor());
d182 1
a182 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a185 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_28);
d189 2
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a195 4
    stringBuffer.append(modelElementInterfaceName);
    stringBuffer.append(TEXT_32);
    stringBuffer.append(nextFeature.getGetAccessor());
    stringBuffer.append(TEXT_33);
d199 1
a199 1
    stringBuffer.append(TEXT_34);
d201 1
a201 1
    stringBuffer.append(TEXT_35);
d207 1
a207 1
    stringBuffer.append(TEXT_36);
d209 1
a209 1
    stringBuffer.append(TEXT_37);
d211 1
a211 1
    stringBuffer.append(TEXT_38);
d217 1
a217 1
    stringBuffer.append(TEXT_39);
d220 3
d225 1
a225 1
    stringBuffer.append(TEXT_40);
d229 2
a231 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_42);
@


1.3
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d22 17
a38 17
  protected final String TEXT_3 = NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ListCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean hasModelChildrenChanged(Notification evt) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getTitleName() {" + NL + "\t\treturn \"";
  protected final String TEXT_7 = "\";" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_8 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_9 = "CanonicalEditPolicy());" + NL + "\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_10 = "CanonicalEditPolicy extends CanonicalEditPolicy {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticChildrenList() {\t";
  protected final String TEXT_11 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_12 = " modelElement = (";
  protected final String TEXT_13 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new LinkedList();" + NL;
  protected final String TEXT_14 = NL + "\t\t\tresult.";
  protected final String TEXT_15 = "(((";
  protected final String TEXT_16 = ") modelElement).";
  protected final String TEXT_17 = "());";
  protected final String TEXT_18 = NL + "\t\t\t";
  protected final String TEXT_19 = " featureValues = ((";
d40 22
a61 17
  protected final String TEXT_21 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_22 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_23 = " nextValue = (";
  protected final String TEXT_24 = ") it.next();";
  protected final String TEXT_25 = NL + "\t\t\t";
  protected final String TEXT_26 = " nextValue = (";
  protected final String TEXT_27 = ") ((";
  protected final String TEXT_28 = ") modelElement).";
  protected final String TEXT_29 = "();";
  protected final String TEXT_30 = NL + "\t\t\t";
  protected final String TEXT_31 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_32 = NL + "\t\t\tif (";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "().equals(nextEClass)) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t} ";
  protected final String TEXT_35 = NL + "\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_37 = NL;
d73 10
a82 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d84 1
a84 1
    importManager.markImportLocation(stringBuffer);
d88 1
a88 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d90 1
a90 1
    stringBuffer.append(genCompartment.getTitle());
d92 1
a92 1
    stringBuffer.append(importManager.getImportedName(genCompartment.getItemSemanticEditPolicyQualifiedClassName()));
d94 5
a98 1
    stringBuffer.append(genCompartment.getEditPartClassName());
a99 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d101 6
a107 1
GenNode containerNode = genCompartment.getNode();
d110 1
a110 1
    stringBuffer.append(TEXT_11);
d112 1
a112 1
    stringBuffer.append(TEXT_12);
d114 3
a116 1
    stringBuffer.append(TEXT_13);
d119 1
a119 1
for (Iterator it = genCompartment.getChildNodes().iterator(); it.hasNext();) {
d147 1
a147 1
    stringBuffer.append(TEXT_14);
d149 1
a149 1
    stringBuffer.append(TEXT_15);
d151 1
a151 1
    stringBuffer.append(TEXT_16);
d153 1
a153 1
    stringBuffer.append(TEXT_17);
d160 1
a160 1
    stringBuffer.append(TEXT_18);
d162 1
a162 1
    stringBuffer.append(TEXT_19);
d164 1
a164 1
    stringBuffer.append(TEXT_20);
d166 1
a166 1
    stringBuffer.append(TEXT_21);
d168 1
a168 1
    stringBuffer.append(TEXT_22);
d170 1
a170 1
    stringBuffer.append(TEXT_23);
d172 1
a172 1
    stringBuffer.append(TEXT_24);
d176 1
a176 1
    stringBuffer.append(TEXT_25);
d178 1
a178 1
    stringBuffer.append(TEXT_26);
d180 1
a180 1
    stringBuffer.append(TEXT_27);
d182 1
a182 1
    stringBuffer.append(TEXT_28);
d184 1
a184 1
    stringBuffer.append(TEXT_29);
d188 1
a188 1
    stringBuffer.append(TEXT_30);
d190 1
a190 1
    stringBuffer.append(TEXT_31);
d196 1
a196 1
    stringBuffer.append(TEXT_32);
d198 1
a198 1
    stringBuffer.append(TEXT_33);
d200 1
a200 1
    stringBuffer.append(TEXT_34);
d206 1
a206 1
    stringBuffer.append(TEXT_35);
d211 5
a215 1
    stringBuffer.append(TEXT_36);
d217 1
a217 1
    stringBuffer.append(TEXT_37);
@


1.2
log
@[ashatalin] #115107 remove uses of deprecated runtime code in templates
@
text
@d26 31
a56 30
  protected final String TEXT_7 = "\";" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CREATION_ROLE, new CreationEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.DRAG_DROP_ROLE, new DragDropEditPolicy());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.CANONICAL_ROLE, new ";
  protected final String TEXT_8 = "CanonicalEditPolicy());" + NL + "\t\t//installEditPolicy(EditPolicy.NODE_ROLE, null);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ";
  protected final String TEXT_9 = "CanonicalEditPolicy extends CanonicalEditPolicy {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected List getSemanticChildrenList() {\t";
  protected final String TEXT_10 = "\t\t" + NL + "\t\t\t";
  protected final String TEXT_11 = " modelElement = (";
  protected final String TEXT_12 = ") ((View) getHost().getModel()).getElement();" + NL + "\t\t\tList result = new LinkedList();" + NL;
  protected final String TEXT_13 = NL + "\t\t\tresult.";
  protected final String TEXT_14 = "(((";
  protected final String TEXT_15 = ") modelElement).";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\t\t";
  protected final String TEXT_18 = " featureValues = ((";
  protected final String TEXT_19 = ") modelElement).";
  protected final String TEXT_20 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_21 = " it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_22 = " nextValue = (";
  protected final String TEXT_23 = ") it.next();";
  protected final String TEXT_24 = NL + "\t\t\t";
  protected final String TEXT_25 = " nextValue = (";
  protected final String TEXT_26 = ") ((";
  protected final String TEXT_27 = ") modelElement).";
  protected final String TEXT_28 = "();";
  protected final String TEXT_29 = NL + "\t\t\t";
  protected final String TEXT_30 = " nextEClass = nextValue.eClass();";
  protected final String TEXT_31 = NL + "\t\t\tif (";
  protected final String TEXT_32 = ".eINSTANCE.get";
  protected final String TEXT_33 = "().equals(nextEClass)) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t} ";
  protected final String TEXT_34 = NL + "\t\t\t}";
  protected final String TEXT_35 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_36 = NL;
d78 1
a78 1
    stringBuffer.append(genCompartment.getEditPartClassName());
d82 2
a87 2
    stringBuffer.append(TEXT_10);
    stringBuffer.append(modelElementInterfaceName);
d91 2
d123 1
a123 1
    stringBuffer.append(TEXT_13);
d125 1
a125 1
    stringBuffer.append(TEXT_14);
d127 1
a127 1
    stringBuffer.append(TEXT_15);
d129 1
a129 1
    stringBuffer.append(TEXT_16);
d136 1
a136 1
    stringBuffer.append(TEXT_17);
d138 1
a138 1
    stringBuffer.append(TEXT_18);
d140 1
a140 1
    stringBuffer.append(TEXT_19);
d142 1
a142 1
    stringBuffer.append(TEXT_20);
a143 2
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d147 2
a151 2
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d155 2
d158 1
a158 1
    stringBuffer.append(TEXT_27);
d160 1
a160 1
    stringBuffer.append(TEXT_28);
d164 1
a164 1
    stringBuffer.append(TEXT_29);
d166 1
a166 1
    stringBuffer.append(TEXT_30);
d172 1
a172 1
    stringBuffer.append(TEXT_31);
d174 1
a174 1
    stringBuffer.append(TEXT_32);
d176 1
a176 1
    stringBuffer.append(TEXT_33);
d182 1
a182 1
    stringBuffer.append(TEXT_34);
d187 1
a187 1
    stringBuffer.append(TEXT_35);
d189 1
a189 1
    stringBuffer.append(TEXT_36);
@


1.1
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.util.Collection;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ListCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CanonicalEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.CreationEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.DragDropEditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;";
d36 20
a55 13
  protected final String TEXT_17 = NL + "\t\t\tCollection featureValues = ((";
  protected final String TEXT_18 = ") modelElement).";
  protected final String TEXT_19 = "();" + NL + "\t\t\tfor (Iterator it = featureValues.iterator(); it.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) it.next();";
  protected final String TEXT_20 = NL + "\t\t\tEObject nextValue = (EObject) ((";
  protected final String TEXT_21 = ") modelElement).";
  protected final String TEXT_22 = "();";
  protected final String TEXT_23 = NL + "\t\t\tEClass nextEClass = nextValue.eClass();";
  protected final String TEXT_24 = NL + "\t\t\tif (";
  protected final String TEXT_25 = ".eINSTANCE.get";
  protected final String TEXT_26 = "().equals(nextEClass)) {" + NL + "\t\t\t\tresult.add(nextValue);" + NL + "\t\t\t} ";
  protected final String TEXT_27 = NL + "\t\t\t}";
  protected final String TEXT_28 = NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_29 = NL;
d134 2
d137 1
a137 1
    stringBuffer.append(TEXT_18);
d139 7
a145 1
    stringBuffer.append(TEXT_19);
d149 5
a153 1
    stringBuffer.append(TEXT_20);
d155 1
a155 1
    stringBuffer.append(TEXT_21);
d157 1
a157 1
    stringBuffer.append(TEXT_22);
d161 3
a163 1
    stringBuffer.append(TEXT_23);
d169 1
a169 1
    stringBuffer.append(TEXT_24);
d171 1
a171 1
    stringBuffer.append(TEXT_25);
d173 1
a173 1
    stringBuffer.append(TEXT_26);
d179 1
a179 1
    stringBuffer.append(TEXT_27);
d184 1
a184 1
    stringBuffer.append(TEXT_28);
d186 1
a186 1
    stringBuffer.append(TEXT_29);
@

