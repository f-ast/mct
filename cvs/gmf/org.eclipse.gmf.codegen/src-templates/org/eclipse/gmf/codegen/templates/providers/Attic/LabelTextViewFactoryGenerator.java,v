head	1.24;
access;
symbols
	v20081022-1925:1.24
	v20081015-1925:1.24
	v20081008-1925:1.24
	v20081001-1925:1.24
	v20080924-1925:1.24
	v20080917-1925:1.24
	v20080911-1728:1.24
	v20080910-1520:1.24
	v20080903-1520:1.24
	v20080827-1520:1.24
	v20080813-1520:1.24
	v20080806-1520:1.24
	v20070601-1400:1.23
	v20070525-1500:1.23
	v20070520-1200:1.23
	v20070518-1300:1.22
	v20070504-1000:1.22
	v20070427-0600:1.22
	v20070420-1000:1.21
	v20070413-1300:1.21
	v20070405-1100:1.21
	v20070403-1500:1.21
	v20070330-1300:1.21
	v20060330-1300:1.21
	v20070322-1100:1.21
	v20060316-0600:1.21
	v20070307-0700:1.21
	v20070301-1200:1.21
	v20070228-2000:1.21
	v20070221-1500:1.21
	v20070208-1800:1.21
	v20070202-0200:1.21
	v20070103-0300:1.21
	M4_20:1.21
	v20061222-1800:1.21
	v20061218-1200:1.21
	v20061214-0000:1.21
	v20061120-1300:1.21
	M3_20:1.21
	v20061117-0800:1.21
	v20061027-1200:1.21
	v20061020-1000:1.21
	v20061013-1330:1.21
	v20060919-0800:1.21
	v20060907-1100:1.21
	M1_20:1.21
	v20060904-1500:1.21
	v20060824-1600:1.21
	v20060817-1500:1.21
	v20060728-0500:1.21
	v20060713-1700:1.21
	R1_0_maintenance:1.21.0.2
	R1_0:1.21
	v20060627-1200:1.21
	v20060626-1420:1.21
	v20060620-0400:1.20
	v20060616-1400:1.20
	v20060616-1200:1.20
	v20060609-1400:1.20
	v20060531-1730:1.18
	v20060530-1930:1.18
	v20060526-1200:1.17
	v20060519-1300:1.17
	v20060519-0800:1.17
	v20060512-1000:1.15
	I20060512-1000:1.15
	I20060505-1400:1.15
	I20060428-1300:1.15
	I20060424-0500:1.15
	I20060424-0300:1.15
	M6_10:1.14
	I20060407-1200:1.10
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.8
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.7
	I20060216-1945:1.7
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.24
date	2007.06.04.12.58.12;	author dstadnik;	state dead;
branches;
next	1.23;
commitid	6a8946640c624567;

1.23
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.22;
commitid	7de14650454a4567;

1.22
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.21;
commitid	78b462dc68e4567;

1.21
date	2006.06.21.15.22.41;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.20.17.08.07;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.10;

1.10
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.24
log
@rewrite label view factories in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.codegen.gmfgen.util.*;

public class LabelTextViewFactoryGenerator
{
  protected static String nl;
  public static synchronized LabelTextViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LabelTextViewFactoryGenerator result = new LabelTextViewFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_7 = " styles = new ";
  protected final String TEXT_8 = "();";
  protected final String TEXT_9 = NL + "\t\tstyles.add(";
  protected final String TEXT_10 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_11 = NL + "\t\tstyles.add(";
  protected final String TEXT_12 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_13 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_14 = "\t\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_15 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_16 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenNodeLabel genLabel = (GenNodeLabel) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLabel.getDiagram();
ViewmapLayoutTypeHelper layoutHelper = ViewmapLayoutTypeHelper.getSharedInstance();

final boolean hasShapeStyles = layoutHelper.isStoringChildPositions(genLabel.getNode());
final boolean isDesignLabel = genLabel.getModelFacet() instanceof DesignLabelModelFacet;

Viewmap viewmap = genLabel.getViewmap();
StyleAttributes styleAttributes = (viewmap == null) ? null : (StyleAttributes)viewmap.find(StyleAttributes.class);
final boolean isFixedFont = styleAttributes != null && styleAttributes.isFixedFont();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genLabel.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(layoutHelper.isStoringChildPositions(genLabel.getNode()) ?
	importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractShapeViewFactory") :
	importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_8);
    
if (hasShapeStyles || isDesignLabel) {

    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_10);
    
}
if (hasShapeStyles) {

    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_13);
    
	if (!isFixedFont) {

    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_15);
    
	}
}

    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
    return stringBuffer.toString();
  }
}
@


1.23
log
@Anna Karyakina's migration fix
@
text
@@


1.22
log
@follow consisted spacing policy
@
text
@d19 17
a35 18
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_8 = " styles = new ";
  protected final String TEXT_9 = "();";
  protected final String TEXT_10 = NL + "\t\tstyles.add(";
  protected final String TEXT_11 = ".eINSTANCE.createDescriptionStyle());";
  protected final String TEXT_12 = NL + "\t\tstyles.add(";
  protected final String TEXT_13 = ".eINSTANCE.createFillStyle());" + NL + "\t\tstyles.add(";
  protected final String TEXT_14 = ".eINSTANCE.createLineStyle());";
  protected final String TEXT_15 = "\t\t" + NL + "\t\tstyles.add(";
  protected final String TEXT_16 = ".eINSTANCE.createFontStyle());";
  protected final String TEXT_17 = NL + "\t\treturn styles;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
a52 1
    stringBuffer.append(TEXT_1);
d57 2
a59 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d62 2
d65 1
a65 1
    importManager.markImportLocation(stringBuffer);
a66 2
    stringBuffer.append(genLabel.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_6);
d70 2
d73 1
a73 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a74 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_9);
d78 2
a80 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_11);
d85 2
a89 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_14);
d93 2
a95 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.NotationFactory"));
    stringBuffer.append(TEXT_16);
d100 2
a102 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_18);
@


1.21
log
@[mgolubev] #147853 Fonts defined in the gmfgraph model should be used by the generated labels
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d60 1
a60 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.20
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d25 12
a36 6
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}";
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createStyles(View view) {" + NL + "\t\t";
  protected final String TEXT_9 = " styles = super.createStyles(view);" + NL + "\t\tstyles.add(";
  protected final String TEXT_10 = ".eINSTANCE.createDescriptionStyle());" + NL + "\t\treturn styles;" + NL + "\t}";
  protected final String TEXT_11 = NL + "}";
  protected final String TEXT_12 = NL;
d47 7
d73 1
a73 1
    if (genLabel.getModelFacet() instanceof DesignLabelModelFacet) {
d75 1
a75 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d77 4
a81 2
    stringBuffer.append(TEXT_10);
    }
d83 20
d104 1
a104 1
    stringBuffer.append(TEXT_12);
@


1.19
log
@header comment should not be a javadoc comment
@
text
@d25 6
a30 2
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d52 1
a52 3
    
importManager.markImportLocation(stringBuffer);

d60 8
d69 1
a69 1
    stringBuffer.append(TEXT_8);
@


1.18
log
@Correcting copyright processing
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.17
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d43 1
a43 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.16
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d22 5
a26 6
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends ";
  protected final String TEXT_8 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d32 2
a33 1
GenNodeLabel genLabel = (GenNodeLabel) ((Object[]) argument)[0];
a34 1
ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());
d46 1
a47 2
    stringBuffer.append(genDiagram.getNotationViewFactoriesPackageName());
    stringBuffer.append(TEXT_5);
d51 2
a53 2
    stringBuffer.append(genLabel.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_7);
d57 2
a59 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
@


1.15
log
@Removing obsolete code to get rid of compilation warnings.
@
text
@d5 1
d36 1
d56 3
a58 3
    stringBuffer.append(genLabel.getNode().isListLayout() ?
	importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory") :
	importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractShapeViewFactory"));
@


1.14
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d25 2
a26 3
  protected final String TEXT_8 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_9 = NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d58 1
a58 1
    GenCommonBase genElement = genLabel;
a59 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_10);
@


1.13
log
@using M6 to generate code.
@
text
@d26 2
a27 5
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_11 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_12 = "\"); //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
a50 2
importManager.addImport("org.eclipse.emf.ecore.EAnnotation");
importManager.addImport("org.eclipse.emf.ecore.EcoreFactory");
d61 1
a62 6
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genElement.getVisualID());
    stringBuffer.append(TEXT_12);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_13);
@


1.12
log
@restore generators
@
text
@d34 1
a34 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@#134095 do not store compiled templates in cvs
@
text
@d34 1
a34 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.10
log
@Switching to eclipse M6.
@
text
@@


1.9
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d34 1
a34 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.8
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d22 1
a22 1
  protected final String TEXT_5 = ";" + NL;
d24 1
a24 1
  protected final String TEXT_7 = NL + "\textends ";
d36 2
a37 2
GenLabel label = (GenLabel) ((Object[]) argument)[0];
GenDiagram genDiagram = label.getDiagram();
a53 1
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
a55 2
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
boolean isFlowLayout = label instanceof GenNodeLabel && !((GenNodeLabel) label).getNode().isListLayout();
d58 1
a58 1
    stringBuffer.append(label instanceof ExternalLabel ? ((ExternalLabel) label).getTextNotationViewFactoryClassName() : label.getNotationViewFactoryClassName());
d60 3
a62 1
    stringBuffer.append(isFlowLayout ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractShapeViewFactory") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory"));
d64 1
a64 1
    GenCommonBase genElement = label;
@


1.7
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 13
a30 10
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = NL + "\textends ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_8 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_9 = "\"); //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d41 9
d51 1
a51 1
    stringBuffer.append(TEXT_2);
d60 1
a60 1
    stringBuffer.append(TEXT_3);
d62 1
a62 1
    stringBuffer.append(TEXT_4);
d64 1
a64 1
    stringBuffer.append(TEXT_5);
d66 2
a67 2
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
d69 1
a69 1
    stringBuffer.append(TEXT_8);
d71 1
a71 1
    stringBuffer.append(TEXT_9);
d73 1
a73 1
    stringBuffer.append(TEXT_10);
@


1.6
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d33 1
a33 1
GenLabel label = (GenLabel) argument;
@


1.5
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d56 1
a56 1
    stringBuffer.append(genDiagram.getEditorGen().getDomainGenModel().getModelName());
@


1.4
log
@ImportManager moved to oeg.common
@
text
@d56 1
a56 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
@


1.3
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.2
log
@#114178
Create shortcut functionality added
@
text
@d46 1
a46 1
boolean isFlowLayout = label instanceof GenNodeLabel ? ((GenNodeLabel) label).getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL : false;
@


1.1
log
@#122054 support external node labels (partial fix)
@
text
@d24 4
a27 3
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_8 = "\");" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d34 2
a35 2
GenDiagram diagram = label.getDiagram();
ImportUtil importManager = new ImportUtil(diagram.getNotationViewFactoriesPackageName());
d38 1
a38 1
    stringBuffer.append(diagram.getNotationViewFactoriesPackageName());
d56 2
d59 1
a59 1
    stringBuffer.append(TEXT_8);
d61 1
a61 1
    stringBuffer.append(TEXT_9);
@

