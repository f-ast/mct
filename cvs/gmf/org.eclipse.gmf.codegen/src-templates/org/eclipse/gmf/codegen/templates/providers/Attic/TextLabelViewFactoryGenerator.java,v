head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.2
	I20051106-0900:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.01.17.11.46.14;	author ashatalin;	state dead;
branches;
next	1.6;

1.6
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.12.10.41.33;	author dstadnik;	state dead;
branches;
next	1.4;

1.4
date	2005.12.10.14.59.33;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.04.13.28.37;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removing obsolete templates
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.codegen.util.*;

public class TextLabelViewFactoryGenerator
{
  protected static String nl;
  public static synchronized TextLabelViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    TextLabelViewFactoryGenerator result = new TextLabelViewFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_8 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_9 = "\"); //$NON-NLS-1$" + NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    
GenLabel label = (GenLabel) argument;
GenDiagram genDiagram = label.getDiagram();
boolean isFlowLayout = label instanceof GenNodeLabel ? ((GenNodeLabel) label).getNode().getChildContainersPlacement() == CompartmentPlacementKind.FLOW_LITERAL : false;
ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());

    stringBuffer.append(TEXT_1);
    stringBuffer.append(genDiagram.getNotationViewFactoriesPackageName());
    stringBuffer.append(TEXT_2);
    
importManager.markImportLocation(stringBuffer);
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.emf.ecore.EAnnotation");
importManager.addImport("org.eclipse.emf.ecore.EcoreFactory");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");

    stringBuffer.append(TEXT_3);
    stringBuffer.append(label instanceof GenLinkLabel ? ((GenLinkLabel) label).getTextNotationViewFactoryClassName() : label.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(isFlowLayout ? importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractShapeViewFactory") : importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory"));
    stringBuffer.append(TEXT_5);
    GenCommonBase genElement = label;
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genElement.getVisualID());
    stringBuffer.append(TEXT_9);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}
@


1.6
log
@#114178
Create shortcut functionality added
@
text
@@


1.5
log
@#122054 support external node labels (partial fix)
@
text
@d24 3
a26 2
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_8 = "\");" + NL + "\t}" + NL + "}";
d33 1
a33 1
GenDiagram diagram = label.getDiagram();
d35 1
a35 1
ImportUtil importManager = new ImportUtil(diagram.getNotationViewFactoriesPackageName());
d38 1
a38 1
    stringBuffer.append(diagram.getNotationViewFactoriesPackageName());
d55 2
d58 1
a58 1
    stringBuffer.append(TEXT_8);
@


1.4
log
@#118059
- ChildNodes could be places directly inside the node, without compartment
- XY layout is possible for Gen*Nodes
@
text
@@


1.3
log
@#116798 create distinct package for the view factories
@
text
@d4 1
d19 7
a25 6
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.BasicNodeViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends BasicNodeViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_6 = "\");" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
d30 6
a35 2
    GenLabel label = (GenLabel) argument;
    GenDiagram diagram = label.getDiagram();
d39 8
a47 2
    stringBuffer.append(TEXT_3);
    GenCommonBase genElement = label;
d49 1
d51 1
a51 1
    stringBuffer.append(genElement.getVisualID());
d54 3
@


1.2
log
@clean unused code
@
text
@d31 1
a31 1
    stringBuffer.append(diagram.getProvidersPackageName());
@


1.1
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@a3 1
import org.eclipse.gmf.codegen.util.*;
@

