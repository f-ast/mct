head	1.19;
access;
symbols
	v20081022-1925:1.19
	v20081015-1925:1.19
	v20081008-1925:1.19
	v20081001-1925:1.19
	v20080924-1925:1.19
	v20080917-1925:1.19
	v20080911-1728:1.19
	v20080910-1520:1.19
	v20080903-1520:1.19
	v20080827-1520:1.19
	v20080813-1520:1.19
	v20080806-1520:1.19
	v20070403-1500:1.18
	v20070330-1300:1.18
	v20060330-1300:1.18
	v20070322-1100:1.18
	v20060316-0600:1.18
	v20070307-0700:1.18
	v20070301-1200:1.18
	v20070228-2000:1.18
	v20070221-1500:1.18
	v20070208-1800:1.18
	v20070202-0200:1.16
	v20070103-0300:1.17
	M4_20:1.17
	v20061222-1800:1.17
	v20061218-1200:1.17
	v20061214-0000:1.17
	v20061120-1300:1.17
	M3_20:1.17
	v20061117-0800:1.17
	v20061027-1200:1.16
	v20061020-1000:1.16
	v20061013-1330:1.16
	v20060919-0800:1.16
	v20060907-1100:1.16
	M1_20:1.16
	v20060904-1500:1.16
	v20060824-1600:1.16
	v20060817-1500:1.16
	v20060728-0500:1.16
	v20060713-1700:1.16
	R1_0_maintenance:1.16.0.2
	R1_0:1.16
	v20060627-1200:1.16
	v20060626-1420:1.16
	v20060620-0400:1.16
	v20060616-1400:1.16
	v20060616-1200:1.16
	v20060609-1400:1.16
	v20060531-1730:1.15
	v20060530-1930:1.15
	v20060526-1200:1.13
	v20060519-1300:1.13
	v20060519-0800:1.13
	v20060512-1000:1.12
	I20060512-1000:1.12
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.12
	I20060424-0300:1.12
	M6_10:1.12
	I20060407-1200:1.9
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.7
	S20060303-1600:1.7
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.19
date	2007.04.03.19.28.21;	author ashatalin;	state dead;
branches;
next	1.18;
commitid	24744612aad14567;

1.18
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	21cf45be38464567;

1.17
date	2006.10.18.14.21.46;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.29.13.55.18;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.08.11.41.48;	author dstadnik;	state dead;
branches;
next	1.9;

1.9
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.03.15.34.18;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.14.13.58.45;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.09.16.29.01;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.19
log
@[177758] - Link from a node to a link is not possible
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class LinkItemSemanticEditPolicyGenerator
{
  protected static String nl;
  public static synchronized LinkItemSemanticEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LinkItemSemanticEditPolicyGenerator result = new LinkItemSemanticEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " getDestroyReferenceCommand(";
  protected final String TEXT_10 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_11 = "(req)";
  protected final String TEXT_12 = " {" + NL + "\t\t" + NL + "\t\t\tprotected ";
  protected final String TEXT_13 = " doExecuteWithResult(";
  protected final String TEXT_14 = " progressMonitor, ";
  protected final String TEXT_15 = " info) throws ";
  protected final String TEXT_16 = " {" + NL + "\t\t\t\t";
  protected final String TEXT_17 = " referencedObject = getReferencedObject();" + NL + "\t\t\t\t";
  protected final String TEXT_18 = " resource = referencedObject.eResource();" + NL + "\t\t\t\t";
  protected final String TEXT_19 = " result = super.doExecuteWithResult(progressMonitor, info);" + NL + "\t\t\t\tresource.getContents().add(referencedObject);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_20 = ");" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_22 = " getDestroyElementCommand(";
  protected final String TEXT_23 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_24 = "(req));" + NL + "\t}";
  protected final String TEXT_25 = NL + "}";
  protected final String TEXT_26 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
/*
	This template should be called only for non-design links (genLink.getModelFacet() != null) 
	because *ItemSemanticEditPolicy responsible for dealing with semantic model elements and 
	meaningless (should not	be generated) for pure design links.
*/

final GenLink genLink = (GenLink) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLink.getDiagram();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genLink.getItemSemanticEditPolicyClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand"));
    stringBuffer.append(TEXT_11);
    
	FeatureLinkModelFacet modelFacet = (FeatureLinkModelFacet) genLink.getModelFacet();
	if (modelFacet.getMetaFeature().isContains()) {
// Processing "phantom" objects

    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.commands.ExecutionException"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.command.CommandResult"));
    stringBuffer.append(TEXT_19);
    
	}

    stringBuffer.append(TEXT_20);
    } else if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyElementCommand"));
    stringBuffer.append(TEXT_24);
    }
    stringBuffer.append(TEXT_25);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_26);
    return stringBuffer.toString();
  }
}
@


1.18
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@@


1.17
log
@#161380 simplify feature model facets
@
text
@d49 6
@


1.16
log
@header comment should not be a javadoc comment
@
text
@d70 1
a70 1
    if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d79 1
a79 1
	FeatureModelFacet modelFacet = (FeatureModelFacet) genLink.getModelFacet();
@


1.15
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.14
log
@avoid generating unused imports in pure pure design projects
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d59 1
a59 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.13
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.commands.Command;";
d25 19
a43 17
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(";
  protected final String TEXT_9 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_10 = "(req)";
  protected final String TEXT_11 = " {" + NL + "\t\t" + NL + "\t\t\tprotected ";
  protected final String TEXT_12 = " doExecuteWithResult(";
  protected final String TEXT_13 = " progressMonitor, ";
  protected final String TEXT_14 = " info) throws ";
  protected final String TEXT_15 = " {" + NL + "\t\t\t\t";
  protected final String TEXT_16 = " referencedObject = getReferencedObject();" + NL + "\t\t\t\t";
  protected final String TEXT_17 = " resource = referencedObject.eResource();" + NL + "\t\t\t\t";
  protected final String TEXT_18 = " result = super.doExecuteWithResult(progressMonitor, info);" + NL + "\t\t\t\tresource.getContents().add(referencedObject);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_19 = ");" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(";
  protected final String TEXT_21 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_22 = "(req));" + NL + "\t}";
  protected final String TEXT_23 = NL + "}";
  protected final String TEXT_24 = NL;
d72 2
d75 1
a75 1
    stringBuffer.append(TEXT_9);
d77 1
a77 1
    stringBuffer.append(TEXT_10);
d83 1
a83 1
    stringBuffer.append(TEXT_11);
d85 1
a85 1
    stringBuffer.append(TEXT_12);
d87 1
a87 1
    stringBuffer.append(TEXT_13);
d89 1
a89 1
    stringBuffer.append(TEXT_14);
d91 1
a91 1
    stringBuffer.append(TEXT_15);
d93 1
a93 1
    stringBuffer.append(TEXT_16);
d95 1
a95 1
    stringBuffer.append(TEXT_17);
d97 1
a97 1
    stringBuffer.append(TEXT_18);
d101 1
a101 1
    stringBuffer.append(TEXT_19);
d103 3
a105 1
    stringBuffer.append(TEXT_20);
d107 1
a107 1
    stringBuffer.append(TEXT_21);
d109 1
a109 1
    stringBuffer.append(TEXT_22);
d111 1
a111 1
    stringBuffer.append(TEXT_23);
d113 1
a113 1
    stringBuffer.append(TEXT_24);
@


1.12
log
@using M6 to generate code.
@
text
@d21 21
a41 23
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gef.commands.Command;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ";
  protected final String TEXT_9 = " {";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(";
  protected final String TEXT_11 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_12 = "(req)";
  protected final String TEXT_13 = " {" + NL + "\t\t" + NL + "\t\t\tprotected ";
  protected final String TEXT_14 = " doExecuteWithResult(";
  protected final String TEXT_15 = " progressMonitor, ";
  protected final String TEXT_16 = " info) throws ";
  protected final String TEXT_17 = " {" + NL + "\t\t\t\t";
  protected final String TEXT_18 = " referencedObject = getReferencedObject();" + NL + "\t\t\t\t";
  protected final String TEXT_19 = " resource = referencedObject.eResource();" + NL + "\t\t\t\t";
  protected final String TEXT_20 = " result = super.doExecuteWithResult(progressMonitor, info);" + NL + "\t\t\t\tresource.getContents().add(referencedObject);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_21 = ");" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(";
  protected final String TEXT_23 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_24 = "(req));" + NL + "\t}";
  protected final String TEXT_25 = NL + "}";
  protected final String TEXT_26 = NL;
d47 2
a48 1
GenLink genLink = (GenLink) ((Object[]) argument)[0];
d60 1
d62 1
a62 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d64 1
a64 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
d66 1
a66 1
    importManager.markImportLocation(stringBuffer);
d68 1
a68 1
    stringBuffer.append(genLink.getItemSemanticEditPolicyClassName());
d70 1
a70 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getBaseItemSemanticEditPolicyQualifiedClassName()));
d72 1
a72 1
    if (genLink.getModelFacet() instanceof FeatureModelFacet) {
a73 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand"));
    stringBuffer.append(TEXT_12);
d79 1
a79 1
    stringBuffer.append(TEXT_13);
d81 1
a81 1
    stringBuffer.append(TEXT_14);
d83 1
a83 1
    stringBuffer.append(TEXT_15);
d85 1
a85 1
    stringBuffer.append(TEXT_16);
d87 1
a87 1
    stringBuffer.append(TEXT_17);
d89 1
a89 1
    stringBuffer.append(TEXT_18);
d91 1
a91 1
    stringBuffer.append(TEXT_19);
d93 1
a93 1
    stringBuffer.append(TEXT_20);
d97 1
a97 1
    stringBuffer.append(TEXT_21);
d99 1
a99 1
    stringBuffer.append(TEXT_22);
d101 1
a101 1
    stringBuffer.append(TEXT_23);
d103 1
a103 1
    stringBuffer.append(TEXT_24);
d105 1
a105 1
    stringBuffer.append(TEXT_25);
d107 1
a107 1
    stringBuffer.append(TEXT_26);
@


1.11
log
@restore generators
@
text
@d47 1
a47 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.10
log
@#134095 do not store compiled templates in cvs
@
text
@d47 1
a47 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.9
log
@Switching to eclipse M6.
@
text
@@


1.8
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d47 1
a47 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@#127696 Templates should use new transaction API
In case of phantom nodes.
@
text
@d18 26
a43 23
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gef.commands.Command;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(";
  protected final String TEXT_8 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_9 = "(req)";
  protected final String TEXT_10 = " {" + NL + "\t\t" + NL + "\t\t\tprotected ";
  protected final String TEXT_11 = " doExecuteWithResult(";
  protected final String TEXT_12 = " progressMonitor, ";
  protected final String TEXT_13 = " info) throws ";
  protected final String TEXT_14 = " {" + NL + "\t\t\t\t";
  protected final String TEXT_15 = " referencedObject = getReferencedObject();" + NL + "\t\t\t\t";
  protected final String TEXT_16 = " resource = referencedObject.eResource();" + NL + "\t\t\t\t";
  protected final String TEXT_17 = " result = super.doExecuteWithResult(progressMonitor, info);" + NL + "\t\t\t\tresource.getContents().add(referencedObject);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_18 = ");" + NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(";
  protected final String TEXT_20 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_21 = "(req));" + NL + "\t}";
  protected final String TEXT_22 = NL + "}";
  protected final String TEXT_23 = NL;
d53 9
d63 1
a63 1
    stringBuffer.append(TEXT_2);
d65 1
a65 1
    stringBuffer.append(TEXT_3);
d67 1
a67 1
    stringBuffer.append(TEXT_4);
d69 1
a69 1
    stringBuffer.append(TEXT_5);
d71 1
a71 1
    stringBuffer.append(TEXT_6);
d73 1
a73 1
    stringBuffer.append(TEXT_7);
d75 1
a75 1
    stringBuffer.append(TEXT_8);
d77 1
a77 1
    stringBuffer.append(TEXT_9);
d83 1
a83 1
    stringBuffer.append(TEXT_10);
d85 1
a85 1
    stringBuffer.append(TEXT_11);
d87 1
a87 1
    stringBuffer.append(TEXT_12);
d89 1
a89 1
    stringBuffer.append(TEXT_13);
d91 1
a91 1
    stringBuffer.append(TEXT_14);
d93 1
a93 1
    stringBuffer.append(TEXT_15);
d95 1
a95 1
    stringBuffer.append(TEXT_16);
d97 1
a97 1
    stringBuffer.append(TEXT_17);
d101 1
a101 1
    stringBuffer.append(TEXT_18);
d103 1
a103 1
    stringBuffer.append(TEXT_19);
d105 1
a105 1
    stringBuffer.append(TEXT_20);
d107 1
a107 1
    stringBuffer.append(TEXT_21);
d109 1
a109 1
    stringBuffer.append(TEXT_22);
d111 1
a111 1
    stringBuffer.append(TEXT_23);
@


1.6
log
@use new transactional emf api
@
text
@d28 13
a40 11
  protected final String TEXT_11 = " doExecute(";
  protected final String TEXT_12 = " progressMonitor) {" + NL + "\t\t\t\t";
  protected final String TEXT_13 = " referencedObject = getReferencedObject();" + NL + "\t\t\t\t";
  protected final String TEXT_14 = " resource = referencedObject.eResource();" + NL + "\t\t\t\t";
  protected final String TEXT_15 = " result = super.doExecute(progressMonitor);" + NL + "\t\t\t\tresource.getContents().add(referencedObject);" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_16 = ");" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(";
  protected final String TEXT_18 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_19 = "(req));" + NL + "\t}";
  protected final String TEXT_20 = NL + "}";
  protected final String TEXT_21 = NL;
d76 4
d81 1
a81 1
    stringBuffer.append(TEXT_13);
d83 1
a83 1
    stringBuffer.append(TEXT_14);
d85 1
a85 1
    stringBuffer.append(TEXT_15);
d89 1
a89 1
    stringBuffer.append(TEXT_16);
d91 1
a91 1
    stringBuffer.append(TEXT_17);
d93 1
a93 1
    stringBuffer.append(TEXT_18);
d95 1
a95 1
    stringBuffer.append(TEXT_19);
d97 1
a97 1
    stringBuffer.append(TEXT_20);
d99 1
a99 1
    stringBuffer.append(TEXT_21);
@


1.5
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d88 1
a88 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.commands.core.commands.MSLDestroyElementCommand"));
@


1.4
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d44 1
a44 1
GenLink genLink = (GenLink) argument;
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d26 13
a38 6
  protected final String TEXT_9 = "(req));" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(";
  protected final String TEXT_11 = " req) {" + NL + "\t\treturn getMSLWrapper(new ";
  protected final String TEXT_12 = "(req));" + NL + "\t}";
  protected final String TEXT_13 = NL + "}";
  protected final String TEXT_14 = NL;
d64 20
d85 1
a85 1
    stringBuffer.append(TEXT_10);
d87 1
a87 1
    stringBuffer.append(TEXT_11);
d89 1
a89 1
    stringBuffer.append(TEXT_12);
d91 1
a91 1
    stringBuffer.append(TEXT_13);
d93 1
a93 1
    stringBuffer.append(TEXT_14);
@


1.2
log
@Wrapping optional imports into importManager.getImportedName() calls
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.commands.MSLDestroyElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.DestroyReferenceCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;";
d24 8
a31 4
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn getMSLWrapper(new DestroyReferenceCommand(req));" + NL + "\t}";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn getMSLWrapper(new MSLDestroyElementCommand(req));" + NL + "\t}";
  protected final String TEXT_9 = NL + "}";
  protected final String TEXT_10 = NL;
d53 4
d58 5
a62 1
    stringBuffer.append(TEXT_8);
d64 1
a64 1
    stringBuffer.append(TEXT_9);
d66 1
a66 1
    stringBuffer.append(TEXT_10);
@

