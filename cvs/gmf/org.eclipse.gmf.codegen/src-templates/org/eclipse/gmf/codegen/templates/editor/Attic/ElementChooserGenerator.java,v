head	1.28;
access;
symbols
	v20081022-1925:1.28
	v20081015-1925:1.28
	v20081008-1925:1.28
	v20081001-1925:1.28
	v20080924-1925:1.28
	v20080917-1925:1.28
	v20080911-1728:1.28
	v20080910-1520:1.28
	v20080903-1520:1.28
	v20080827-1520:1.28
	v20080813-1520:1.28
	v20080806-1520:1.28
	v20070608-1300:1.27
	v20070605-1400:1.27
	v20070601-1400:1.26
	v20070525-1500:1.26
	v20070520-1200:1.26
	v20070518-1300:1.25
	v20070504-1000:1.25
	v20070427-0600:1.25
	v20070420-1000:1.24
	v20070413-1300:1.24
	v20070405-1100:1.24
	v20070403-1500:1.24
	v20070330-1300:1.23
	v20060330-1300:1.23
	v20070322-1100:1.23
	v20060316-0600:1.23
	v20070307-0700:1.23
	v20070301-1200:1.23
	v20070228-2000:1.23
	v20070221-1500:1.23
	v20070208-1800:1.23
	v20070202-0200:1.19.2.2
	v20070103-0300:1.23
	M4_20:1.23
	v20061222-1800:1.23
	v20061218-1200:1.23
	v20061214-0000:1.23
	v20061120-1300:1.23
	M3_20:1.23
	v20061117-0800:1.23
	v20061027-1200:1.19.2.2
	v20061020-1000:1.19.2.2
	v20061013-1330:1.22
	v20060919-0800:1.19.2.2
	v20060907-1100:1.19.2.2
	M1_20:1.20
	v20060904-1500:1.20
	v20060824-1600:1.19.2.1
	v20060817-1500:1.19.2.1
	v20060728-0500:1.19
	v20060713-1700:1.19
	R1_0_maintenance:1.19.0.2
	R1_0:1.19
	v20060627-1200:1.19
	v20060626-1420:1.19
	v20060620-0400:1.19
	v20060616-1400:1.19
	v20060616-1200:1.19
	v20060609-1400:1.19
	v20060531-1730:1.17
	v20060530-1930:1.17
	v20060526-1200:1.16
	v20060519-1300:1.16
	v20060519-0800:1.16
	v20060512-1000:1.16
	I20060512-1000:1.16
	I20060505-1400:1.16
	I20060428-1300:1.16
	I20060424-0500:1.16
	I20060424-0300:1.16
	M6_10:1.16
	I20060407-1200:1.13
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.10
	I20060216-1945:1.10
	I20060210-1715:1.10
	I20060209-1815:1.10
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.28
date	2007.06.13.12.49.09;	author ashatalin;	state dead;
branches;
next	1.27;
commitid	55a1466fe7bb4567;

1.27
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.26;
commitid	17ef46643bcf4567;

1.26
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.25;
commitid	7de14650454a4567;

1.25
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.24;
commitid	78b462dc68e4567;

1.24
date	2007.04.02.14.40.42;	author ashatalin;	state Exp;
branches;
next	1.23;
commitid	2da2461115e94567;

1.23
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.29.18.11.19;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.09.05.16.01.38;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.08.16.15.20.11;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.05.16.33.13;	author ashatalin;	state Exp;
branches
	1.19.2.1;
next	1.18;

1.18
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.13;

1.13
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.01.14.55.16;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.31.19.02.08;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.13.36.41;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.12.23.10.49;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.17.20.28;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	;

1.19.2.1
date	2006.08.16.15.23.48;	author ashatalin;	state Exp;
branches;
next	1.19.2.2;

1.19.2.2
date	2006.09.01.12.42.40;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.28
log
@[191853] - Convert /editor/ElementChooser.javajet template to xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;

public class ElementChooserGenerator
{
  protected static String nl;
  public static synchronized ElementChooserGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ElementChooserGenerator result = new ElementChooserGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends Dialog {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = " mySelectedModelElementURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate View myView;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "(Shell parentShell, View view) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tgetShell().setText(\"Select model element\");" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
  protected final String TEXT_9 = NL + "\t\t\t\"";
  protected final String TEXT_10 = "\".equals(fileExtension) ";
  protected final String TEXT_11 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getSelectedModelElementURI() {" + NL + "\t\treturn mySelectedModelElementURI;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int open() {" + NL + "\t\tint result = super.open();" + NL + "\t\tfor (";
  protected final String TEXT_12 = " it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_13 = " resource = (";
  protected final String TEXT_14 = ") it.next();" + NL + "\t\t\tresource.unload();" + NL + "\t\t}" + NL + "\t\tmyEditingDomain.dispose();" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new ";
  protected final String TEXT_15 = "();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(" + NL + "\t\t\t\t";
  protected final String TEXT_16 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tIPath resourcePath = modelFile.getFullPath();" + NL + "\t\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tResource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString(), true), true);" + NL + "\t\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t\t} catch (WrappedException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(" + NL + "\t\t\t\t\t\t\t\"Unable to load resource: \" + resourcePath.toString(), e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Collections.EMPTY_LIST.toArray();" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(" + NL + "\t\t\t\t";
  protected final String TEXT_18 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_20 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_21 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_22 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tEObject selectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(selectedModelElement), myView, null, ViewUtil.APPEND," + NL + "\t\t\t\t\t\t\t\ttrue, ";
  protected final String TEXT_23 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\tmySelectedModelElementURI = org.eclipse.emf.ecore.util.EcoreUtil.getURI(selectedModelElement);" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElementURI = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_24 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getElementChooserClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getElementChooserClassName());
    stringBuffer.append(TEXT_8);
    
for (Iterator it = genDiagram.getContainsShortcutsTo().iterator(); it.hasNext();) {
	String nextFileExtension = (String) it.next();

    stringBuffer.append(TEXT_9);
    stringBuffer.append(nextFileExtension);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(it.hasNext() ? "||" : ";");
    
}

    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication() == null ?
				"org.eclipse.ui.model.WorkbenchContentProvider" : "org.eclipse.ui.model.BaseWorkbenchContentProvider"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_24);
    return stringBuffer.toString();
  }
}
@


1.27
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.26
log
@Anna Karyakina's migration fix
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.25
log
@follow consisted spacing policy
@
text
@d19 24
a42 25
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends Dialog {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " mySelectedModelElementURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate View myView;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_8 = " myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(Shell parentShell, View view) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tgetShell().setText(\"Select model element\");" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
  protected final String TEXT_10 = NL + "\t\t\t\"";
  protected final String TEXT_11 = "\".equals(fileExtension) ";
  protected final String TEXT_12 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getSelectedModelElementURI() {" + NL + "\t\treturn mySelectedModelElementURI;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int open() {" + NL + "\t\tint result = super.open();" + NL + "\t\tfor (";
  protected final String TEXT_13 = " it = myEditingDomain.getResourceSet().getResources().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_14 = " resource = (";
  protected final String TEXT_15 = ") it.next();" + NL + "\t\t\tresource.unload();" + NL + "\t\t}" + NL + "\t\tmyEditingDomain.dispose();" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new ";
  protected final String TEXT_16 = "();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(" + NL + "\t\t\t\t";
  protected final String TEXT_17 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tIPath resourcePath = modelFile.getFullPath();" + NL + "\t\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tResource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString(), true), true);" + NL + "\t\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t\t} catch (WrappedException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_18 = ".getInstance().logError(" + NL + "\t\t\t\t\t\t\t\"Unable to load resource: \" + resourcePath.toString(), e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Collections.EMPTY_LIST.toArray();" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(" + NL + "\t\t\t\t";
  protected final String TEXT_19 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_20 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_21 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_22 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_23 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tEObject selectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(selectedModelElement), myView, null, ViewUtil.APPEND," + NL + "\t\t\t\t\t\t\t\ttrue, ";
  protected final String TEXT_24 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\tmySelectedModelElementURI = org.eclipse.emf.ecore.util.EcoreUtil.getURI(selectedModelElement);" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElementURI = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_25 = NL;
a50 1
    stringBuffer.append(TEXT_1);
d55 2
a57 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d60 2
d63 1
a63 1
    importManager.markImportLocation(stringBuffer);
d65 1
a65 1
    stringBuffer.append(genDiagram.getElementChooserClassName());
d67 1
a67 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d69 1
a69 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
a70 2
    stringBuffer.append(genDiagram.getElementChooserClassName());
    stringBuffer.append(TEXT_9);
d75 2
a77 2
    stringBuffer.append(nextFileExtension);
    stringBuffer.append(TEXT_11);
d82 2
d85 1
a85 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a88 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_15);
d91 2
d98 1
a98 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d102 1
a102 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d106 1
a106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d108 1
a108 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a109 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_25);
@


1.24
log
@Unloading resources + disposing editing domain on closing view/dialog
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d58 1
a58 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.23
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.edit.domain.EditingDomain;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
d24 20
a43 15
  protected final String TEXT_6 = " extends Dialog {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject mySelectedModelElement;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate View myView;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(Shell parentShell, View view) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tgetShell().setText(\"Select model element\");" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
  protected final String TEXT_8 = NL + "\t\t\t\"";
  protected final String TEXT_9 = "\".equals(fileExtension) ";
  protected final String TEXT_10 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getSelectedModelElementURI() {" + NL + "\t\tResource resource = mySelectedModelElement.eResource();" + NL + "\t\treturn resource.getURI().appendFragment(resource.getURIFragment(mySelectedModelElement));" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new ";
  protected final String TEXT_11 = "();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(" + NL + "\t\t\t\t";
  protected final String TEXT_12 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tIPath resourcePath = modelFile.getFullPath();" + NL + "\t\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tResource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString(), true), true);" + NL + "\t\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t\t} catch (WrappedException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(" + NL + "\t\t\t\t\t\t\t\"Unable to load resource: \" + resourcePath.toString(), e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Collections.EMPTY_LIST.toArray();" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_15 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_16 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_17 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_18 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmySelectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND," + NL + "\t\t\t\t\t\t\t\ttrue, ";
  protected final String TEXT_19 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_20 = NL;
d67 4
d72 1
a72 1
    stringBuffer.append(TEXT_7);
d77 1
a77 1
    stringBuffer.append(TEXT_8);
d79 1
a79 1
    stringBuffer.append(TEXT_9);
d84 7
a90 1
    stringBuffer.append(TEXT_10);
d93 1
a93 1
    stringBuffer.append(TEXT_11);
d95 1
a95 1
    stringBuffer.append(TEXT_12);
d97 1
a97 1
    stringBuffer.append(TEXT_13);
d99 1
a99 1
    stringBuffer.append(TEXT_14);
d101 1
a101 1
    stringBuffer.append(TEXT_15);
d103 1
a103 1
    stringBuffer.append(TEXT_16);
d105 1
a105 1
    stringBuffer.append(TEXT_17);
d107 1
a107 1
    stringBuffer.append(TEXT_18);
d109 1
a109 1
    stringBuffer.append(TEXT_19);
d111 1
a111 1
    stringBuffer.append(TEXT_20);
@


1.22
log
@#114200 use 'base' workbench content provider for RCP
@
text
@d30 1
a30 1
  protected final String TEXT_12 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tIPath resourcePath = modelFile.getFullPath();" + NL + "\t\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tResource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString()), true);" + NL + "\t\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t\t} catch (WrappedException e) {" + NL + "\t\t\t\t\t";
@


1.21
log
@forgotten translated templates
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.edit.domain.EditingDomain;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchContentProvider;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
d28 11
a38 10
  protected final String TEXT_10 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getSelectedModelElementURI() {" + NL + "\t\tResource resource = mySelectedModelElement.eResource();" + NL + "\t\treturn resource.getURI().appendFragment(resource.getURIFragment(mySelectedModelElement));" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(";
  protected final String TEXT_11 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tIPath resourcePath = modelFile.getFullPath();" + NL + "\t\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tResource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString()), true);" + NL + "\t\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t\t} catch (WrappedException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_12 = ".getInstance().logError(\"Unable to load resource: \" + resourcePath.toString(), e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Collections.EMPTY_LIST.toArray();" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_13 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_14 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_15 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_16 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_17 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmySelectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_18 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_19 = NL;
d76 2
a77 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d91 2
d94 1
a94 1
    stringBuffer.append(TEXT_18);
d96 1
a96 1
    stringBuffer.append(TEXT_19);
@


1.20
log
@#154055 Allow shortcut creation for model elements returned by DelegatingWrapperItemProvider
@
text
@d33 5
a37 3
  protected final String TEXT_15 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmySelectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_16 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_17 = NL;
d85 4
d90 1
a90 1
    stringBuffer.append(TEXT_16);
d92 1
a92 1
    stringBuffer.append(TEXT_17);
@


1.19
log
@- ElementChooserDialog title generated
- diagram file extension marked as non-nls
@
text
@d31 5
a35 3
  protected final String TEXT_13 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_14 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_15 = NL;
d79 4
d84 1
a84 1
    stringBuffer.append(TEXT_14);
d86 1
a86 1
    stringBuffer.append(TEXT_15);
@


1.19.2.1
log
@#154055 Allow shortcut creation for model elements returned by DelegatingWrapperItemProvider
@
text
@d31 3
a33 5
  protected final String TEXT_13 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_14 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_15 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmySelectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_16 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_17 = NL;
d77 1
a77 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d79 1
a79 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
a80 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
@


1.19.2.2
log
@[155966] - No valid diagram root in "Initialize ... diagram file" wizard on XSD generated models
@
text
@d33 3
a35 5
  protected final String TEXT_15 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_16 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_17 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmySelectedModelElement = (EObject) selectedElement;" + NL + "\t\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_18 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\t\treturn;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_19 = NL;
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d85 1
a85 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
a86 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_19);
@


1.18
log
@header comment should not be a javadoc comment
@
text
@d25 1
a25 1
  protected final String TEXT_7 = "(Shell parentShell, View view) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
@


1.17
log
@Correcting copyright processing
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.16
log
@using M6 to generate code.
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d48 1
a48 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.15
log
@restore generators
@
text
@d37 1
a37 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.14
log
@#134095 do not store compiled templates in cvs
@
text
@d37 1
a37 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.13
log
@Switching to eclipse M6.
@
text
@@


1.12
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d37 1
a37 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@#127696 Templates should use new transaction API
@
text
@d19 15
a33 12
  protected final String TEXT_1 = NL + "import java.util.Collections;" + NL + "" + NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.common.util.WrappedException;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.edit.domain.EditingDomain;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchContentProvider;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends Dialog {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject mySelectedModelElement;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate View myView;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "(Shell parentShell, View view) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
  protected final String TEXT_5 = NL + "\t\t\t\"";
  protected final String TEXT_6 = "\".equals(fileExtension) ";
  protected final String TEXT_7 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getSelectedModelElementURI() {" + NL + "\t\tResource resource = mySelectedModelElement.eResource();" + NL + "\t\treturn resource.getURI().appendFragment(resource.getURIFragment(mySelectedModelElement));" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(";
  protected final String TEXT_8 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tIPath resourcePath = modelFile.getFullPath();" + NL + "\t\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tResource modelResource = resourceSet.getResource(URI.createPlatformResourceURI(resourcePath.toString()), true);" + NL + "\t\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t\t} catch (WrappedException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Unable to load resource: \" + resourcePath.toString(), e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Collections.EMPTY_LIST.toArray();" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_10 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_11 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_12 = NL;
a41 1
importManager.emitPackageStatement(stringBuffer);
d43 10
d54 1
a54 1
    stringBuffer.append(TEXT_2);
d56 1
a56 1
    stringBuffer.append(TEXT_3);
d58 1
a58 1
    stringBuffer.append(TEXT_4);
d63 1
a63 1
    stringBuffer.append(TEXT_5);
d65 1
a65 1
    stringBuffer.append(TEXT_6);
d70 1
a70 1
    stringBuffer.append(TEXT_7);
d72 1
a72 1
    stringBuffer.append(TEXT_8);
d74 1
a74 1
    stringBuffer.append(TEXT_9);
d76 1
a76 1
    stringBuffer.append(TEXT_10);
d78 1
a78 1
    stringBuffer.append(TEXT_11);
d80 1
a80 1
    stringBuffer.append(TEXT_12);
@


1.10
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d19 1
a19 1
  protected final String TEXT_1 = NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchContentProvider;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
d21 1
a21 1
  protected final String TEXT_3 = " extends Dialog {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject mySelectedModelElement;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate View myView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d25 3
a27 3
  protected final String TEXT_7 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject getSelectedModelElement() {" + NL + "\t\treturn mySelectedModelElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(";
  protected final String TEXT_8 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tString resourcePath = modelFile.getLocation().toOSString();" + NL + "\t\t\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\t\t\tif (modelResource == null) {" + NL + "\t\t\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Error while loading resource: \" + resourcePath, e);" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(";
@


1.9
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d19 12
a30 14
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.core.services.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchContentProvider;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends Dialog {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EObject mySelectedModelElement;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate View myView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(Shell parentShell, View view) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
  protected final String TEXT_7 = NL + "\t\t\t\"";
  protected final String TEXT_8 = "\".equals(fileExtension) ";
  protected final String TEXT_9 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject getSelectedModelElement() {" + NL + "\t\treturn mySelectedModelElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(";
  protected final String TEXT_10 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tString resourcePath = modelFile.getLocation().toOSString();" + NL + "\t\t\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\t\t\tif (modelResource == null) {" + NL + "\t\t\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Error while loading resource: \" + resourcePath, e);" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_12 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_13 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_14 = NL;
d35 5
a39 1
    GenDiagram genDiagram = (GenDiagram) argument;
d41 1
a41 1
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
d43 1
a43 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorGen().getEditor().getPackageName());
d45 1
a45 1
    importManager.markImportLocation(stringBuffer);
a46 4
    stringBuffer.append(genDiagram.getElementChooserClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getElementChooserClassName());
    stringBuffer.append(TEXT_6);
d51 1
a51 1
    stringBuffer.append(TEXT_7);
d53 1
a53 1
    stringBuffer.append(TEXT_8);
d58 4
d67 1
a67 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a68 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_14);
@


1.8
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d39 1
a39 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d41 1
a41 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.7
log
@ImportManager moved to oeg.common
@
text
@d61 1
a61 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d63 1
a63 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d65 1
a65 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d67 1
a67 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.6
log
@#125893
Logging methods
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.ImportUtil;
@


1.5
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d28 5
a32 4
  protected final String TEXT_10 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tString resourcePath = modelFile.getLocation().toOSString();" + NL + "\t\t\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\t\t\tif (modelResource == null) {" + NL + "\t\t\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_11 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(ViewService.getInstance().provides(Node.class, new EObjectAdapter(mySelectedModelElement), myView, null, ViewUtil.APPEND, true, ";
  protected final String TEXT_12 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_13 = NL;
d67 2
d70 1
a70 1
    stringBuffer.append(TEXT_13);
@


1.4
log
@Fixed:
#114178
#114179
@
text
@d60 1
a60 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
d62 1
a62 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
d64 1
a64 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
@


1.3
log
@#114178
Create shortcut functionality added
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchContentProvider;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
d23 2
a24 2
  protected final String TEXT_5 = " extends Dialog {" + NL + "" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "\tprivate EObject mySelectedModelElement;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(Shell parentShell) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\tString fileExtension = file.getFullPath().getFileExtension();" + NL + "\t\treturn ";
d29 3
a31 2
  protected final String TEXT_11 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(true);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_12 = NL;
d64 2
d67 1
a67 1
    stringBuffer.append(TEXT_12);
@


1.2
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d5 1
d24 7
a30 5
  protected final String TEXT_6 = "(Shell parentShell) {" + NL + "\t\tsuper(parentShell);" + NL + "\t\tsetShellStyle(getShellStyle() | SWT.RESIZE);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createDialogArea(Composite parent) {" + NL + "\t\tComposite composite = (Composite) super.createDialogArea(parent);" + NL + "\t\tcreateModelBrowser(composite);" + NL + "\t\treturn composite;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Control createButtonBar(Composite parent) {" + NL + "\t\tControl buttonBar = super.createButtonBar(parent);" + NL + "\t\tsetOkButtonEnabled(false);" + NL + "\t\treturn buttonBar;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createModelBrowser(Composite composite) {" + NL + "\t\tmyTreeViewer = new TreeViewer(composite, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);" + NL + "\t\tGridData layoutData = new GridData(GridData.FILL_BOTH);" + NL + "\t\tlayoutData.heightHint = 300;" + NL + "\t\tlayoutData.widthHint = 300;" + NL + "\t\tmyTreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\tmyTreeViewer.setContentProvider(new ModelElementsTreeContentProvider());" + NL + "\t\tmyTreeViewer.setLabelProvider(new ModelElementsTreeLabelProvider());" + NL + "\t\tmyTreeViewer.setInput(ResourcesPlugin.getWorkspace().getRoot());" + NL + "\t\tmyTreeViewer.addFilter(new ModelFilesFilter());" + NL + "\t\tmyTreeViewer.addSelectionChangedListener(new OkButtonEnabler());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setOkButtonEnabled(boolean enabled) {" + NL + "\t\tgetButton(IDialogConstants.OK_ID).setEnabled(enabled);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isValidModelFile(IFile file) {" + NL + "\t\treturn \"";
  protected final String TEXT_7 = "\".equals(file.getFullPath().getFileExtension());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject getSelectedModelElement() {" + NL + "\t\treturn mySelectedModelElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(";
  protected final String TEXT_8 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tString resourcePath = modelFile.getLocation().toOSString();" + NL + "\t\t\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\t\t\tif (modelResource == null) {" + NL + "\t\t\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(";
  protected final String TEXT_9 = ".getInstance().getItemProvidersAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(true);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_10 = NL;
d47 4
a50 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase());
d52 7
d60 1
a60 1
    stringBuffer.append(TEXT_8);
d62 1
a62 1
    stringBuffer.append(TEXT_9);
d64 1
a64 1
    stringBuffer.append(TEXT_10);
@


1.1
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.resources.IContainer;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.notify.AdapterFactory;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.edit.provider.ComposedAdapterFactory;" + NL + "import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;" + NL + "import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider;" + NL + "import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.viewers.ILabelProvider;" + NL + "import org.eclipse.jface.viewers.ILabelProviderListener;" + NL + "import org.eclipse.jface.viewers.ISelectionChangedListener;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.viewers.ITreeContentProvider;" + NL + "import org.eclipse.jface.viewers.SelectionChangedEvent;" + NL + "import org.eclipse.jface.viewers.TreeViewer;" + NL + "import org.eclipse.jface.viewers.Viewer;" + NL + "import org.eclipse.jface.viewers.ViewerFilter;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "import org.eclipse.swt.layout.GridData;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.swt.widgets.Control;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.model.WorkbenchContentProvider;" + NL + "import org.eclipse.ui.model.WorkbenchLabelProvider;";
d22 1
a22 1
  protected final String TEXT_5 = " extends Dialog {" + NL + "" + NL + "\tprivate AdapterFactory myModelAdapterFactory = null;" + NL + "\tprivate TreeViewer myTreeViewer;" + NL + "\tprivate EObject mySelectedModelElement;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d24 4
a27 3
  protected final String TEXT_7 = "\".equals(file.getFullPath().getFileExtension());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate AdapterFactory getModelAdapterFactory() {" + NL + "\t\tif (myModelAdapterFactory == null) {" + NL + "\t\t\tList factories = new ArrayList();" + NL + "\t\t\tfactories.add(new ResourceItemProviderAdapterFactory());" + NL + "\t\t\tfactories.add(new ";
  protected final String TEXT_8 = "());" + NL + "\t\t\tfactories.add(new ReflectiveItemProviderAdapterFactory());" + NL + "\t\t\tmyModelAdapterFactory = new ComposedAdapterFactory(factories);" + NL + "\t\t}" + NL + "\t\treturn myModelAdapterFactory;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EObject getSelectedModelElement() {" + NL + "\t\treturn mySelectedModelElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeContentProvider implements ITreeContentProvider {" + NL + "\t\t" + NL + "\t\tprivate ITreeContentProvider myWorkbenchContentProvider = new WorkbenchContentProvider();" + NL + "\t\tprivate AdapterFactoryContentProvider myAdapterFctoryContentProvier = new AdapterFactoryContentProvider(getModelAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getChildren(Object parentElement) {" + NL + "\t\t\tObject[] result = myWorkbenchContentProvider.getChildren(parentElement);" + NL + "\t\t\tif (result != null && result.length > 0) {" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\tif (parentElement instanceof IFile) {" + NL + "\t\t\t\tIFile modelFile = (IFile) parentElement;" + NL + "\t\t\t\tString resourcePath = modelFile.getLocation().toOSString();" + NL + "\t\t\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\t\t\tif (modelResource == null) {" + NL + "\t\t\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getChildren(modelResource);" + NL + "\t\t\t}" + NL + "\t\t\treturn myAdapterFctoryContentProvier.getChildren(parentElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object getParent(Object element) {" + NL + "\t\t\tObject parent = myWorkbenchContentProvider.getParent(element);" + NL + "\t\t\tif (parent != null) {" + NL + "\t\t\t\treturn parent;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof EObject) {" + NL + "\t\t\t\tEObject eObject = (EObject) element;" + NL + "\t\t\t\tif (eObject.eContainer() == null && eObject.eResource().getURI().isFile()) {" + NL + "\t\t\t\t\tString path = eObject.eResource().getURI().path();" + NL + "\t\t\t\t\treturn ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(path));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn myAdapterFctoryContentProvier.getParent(eObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasChildren(Object element) {" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\treturn isValidModelFile((IFile) element);" + NL + "\t\t\t}" + NL + "\t\t\treturn myWorkbenchContentProvider.hasChildren(element) || myAdapterFctoryContentProvier.hasChildren(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\t\tObject[] elements = myWorkbenchContentProvider.getElements(inputElement);" + NL + "\t\t\treturn elements;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchContentProvider.dispose();" + NL + "\t\t\tmyAdapterFctoryContentProvier.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void inputChanged(Viewer viewer, Object oldInput, Object newInput) {" + NL + "\t\t\tmyWorkbenchContentProvider.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t\tmyAdapterFctoryContentProvier.inputChanged(viewer, oldInput, newInput);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelElementsTreeLabelProvider implements ILabelProvider {" + NL + "\t\t" + NL + "\t\tprivate WorkbenchLabelProvider myWorkbenchLabelProvider = new WorkbenchLabelProvider();" + NL + "\t\tprivate AdapterFactoryLabelProvider myAdapterFactoryLabelProvider = new AdapterFactoryLabelProvider(getModelAdapterFactory());" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic Image getImage(Object element) {" + NL + "\t\t\tImage result = myWorkbenchLabelProvider.getImage(element);" + NL + "\t\t\treturn result != null ? result : myAdapterFactoryLabelProvider.getImage(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic String getText(Object element) {" + NL + "\t\t\tString result = myWorkbenchLabelProvider.getText(element);" + NL + "\t\t\treturn result != null && result.length() > 0 ? result : myAdapterFactoryLabelProvider.getText(element);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void addListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.addListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.addListener(listener);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void dispose() {" + NL + "\t\t\tmyWorkbenchLabelProvider.dispose();" + NL + "\t\t\tmyAdapterFactoryLabelProvider.dispose();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isLabelProperty(Object element, String property) {" + NL + "\t\t\treturn myWorkbenchLabelProvider.isLabelProperty(element, property) || myAdapterFactoryLabelProvider.isLabelProperty(element, property);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void removeListener(ILabelProviderListener listener) {" + NL + "\t\t\tmyWorkbenchLabelProvider.removeListener(listener);" + NL + "\t\t\tmyAdapterFactoryLabelProvider.removeListener(listener);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class ModelFilesFilter extends ViewerFilter {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean select(Viewer viewer, Object parentElement, Object element) {" + NL + "\t\t\tif (element instanceof IContainer) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tif (element instanceof IFile) {" + NL + "\t\t\t\tIFile file = (IFile) element;" + NL + "\t\t\t\treturn isValidModelFile(file);" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate class OkButtonEnabler implements ISelectionChangedListener {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(SelectionChangedEvent event) {" + NL + "\t\t\tif (event.getSelection() instanceof IStructuredSelection) {" + NL + "\t\t\t\tIStructuredSelection selection = (IStructuredSelection) event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmySelectedModelElement = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t\tsetOkButtonEnabled(true);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tmySelectedModelElement = null;" + NL + "\t\t\tsetOkButtonEnabled(false);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_9 = NL;
d46 1
a46 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedItemProviderAdapterFactoryClassName()));
d48 2
d51 1
a51 1
    stringBuffer.append(TEXT_9);
@

