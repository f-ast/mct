head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20081015-1925:1.12
	v20081008-1925:1.12
	v20081001-1925:1.12
	v20080924-1925:1.12
	v20080917-1925:1.12
	v20080911-1728:1.12
	v20080910-1520:1.12
	v20080903-1520:1.12
	v20080827-1520:1.12
	v20080813-1520:1.12
	v20080806-1520:1.12
	v20070608-1300:1.11
	v20070605-1400:1.11
	v20070601-1400:1.10
	v20070525-1500:1.10
	v20070520-1200:1.10
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070405-1100:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070307-0700:1.8
	v20070301-1200:1.8
	v20070228-2000:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.7.2.1
	v20070103-0300:1.8
	M4_20:1.8
	v20061222-1800:1.8
	v20061218-1200:1.8
	v20061214-0000:1.8
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7.2.1
	v20061020-1000:1.7.2.1
	v20061013-1330:1.8
	v20060919-0800:1.7.2.1
	v20060907-1100:1.7.2.1
	M1_20:1.8
	v20060904-1500:1.8
	v20060824-1600:1.7.2.1
	v20060817-1500:1.7.2.1
	v20060728-0500:1.7.2.1
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2007.06.13.14.48.18;	author ashatalin;	state dead;
branches;
next	1.11;
commitid	3455467003af4567;

1.11
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	17ef46643bcf4567;

1.10
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.9;
commitid	7de14650454a4567;

1.9
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.8;
commitid	78b462dc68e4567;

1.8
date	2006.07.24.14.38.16;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.01.12.42.51;	author atikhomirov;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.14.07.21.22;	author dstadnik;	state Exp;
branches;
next	;

1.7.2.1
date	2006.07.24.14.42.12;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[191858] - Convert /providers/ShortcutsDecoratorProvider.javajet template to xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ShortcutsDecoratorProviderGenerator
{
  protected static String nl;
  public static synchronized ShortcutsDecoratorProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ShortcutsDecoratorProviderGenerator result = new ShortcutsDecoratorProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractProvider implements IDecoratorProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String SHORTCUTS_DECORATOR_ID = \"shortcuts\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\treturn view != null && ";
  protected final String TEXT_6 = ".MODEL_ID.equals(";
  protected final String TEXT_7 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class ShortcutsDecorator extends AbstractDecorator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ShortcutsDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\trefresh();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tImage image = ";
  protected final String TEXT_8 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"); //$NON-NLS-1$" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getShortcutsDecoratorProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
    return stringBuffer.toString();
  }
}
@


1.11
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.10
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.9
log
@follow consisted spacing policy
@
text
@d18 9
a26 10
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractProvider implements IDecoratorProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String SHORTCUTS_DECORATOR_ID = \"shortcuts\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\treturn view != null && ";
  protected final String TEXT_7 = ".MODEL_ID.equals(";
  protected final String TEXT_8 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class ShortcutsDecorator extends AbstractDecorator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ShortcutsDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\trefresh();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tImage image = ";
  protected final String TEXT_9 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"); //$NON-NLS-1$" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
a34 1
    stringBuffer.append(TEXT_1);
d39 2
a41 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d44 2
d47 1
a47 1
    importManager.markImportLocation(stringBuffer);
d49 1
a49 1
    stringBuffer.append(genDiagram.getShortcutsDecoratorProviderClassName());
d51 1
a51 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d53 1
a53 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d55 1
a55 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
a56 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_10);
@


1.8
log
@[fisakov] #151522 Shortcut decorator provider removes decoration on refresh
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d42 1
a42 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.7
log
@regenerated source files with non-nls markers
@
text
@d25 2
a26 2
  protected final String TEXT_8 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class ShortcutsDecorator extends AbstractDecorator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ShortcutsDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\trefresh();" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tImage image = ";
  protected final String TEXT_9 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"); //$NON-NLS-1$" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.7.2.1
log
@[fisakov] #151522 Shortcut decorator provider removes decoration on refresh
@
text
@d25 2
a26 2
  protected final String TEXT_8 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class ShortcutsDecorator extends AbstractDecorator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ShortcutsDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\trefresh();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tImage image = ";
  protected final String TEXT_9 = ".getInstance().getBundledImage(\"icons/shortcut.gif\"); //$NON-NLS-1$" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.6
log
@header comment should not be a javadoc comment
@
text
@d26 1
a26 1
  protected final String TEXT_9 = ".getInstance().getBundledImage(\"icons/shortcut.gif\");" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.5
log
@fix some nls markers
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.4
log
@Correcting copyright processing
@
text
@d23 1
a23 1
  protected final String TEXT_6 = " extends AbstractProvider implements IDecoratorProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String SHORTCUTS_DECORATOR_ID = \"shortcuts\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\treturn view != null && ";
@


1.3
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d42 1
a42 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.2
log
@#131543 Obsolete code should be eliminated
@
text
@d21 7
a27 9
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ShapeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractProvider implements IDecoratorProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String SHORTCUTS_DECORATOR_ID = \"shortcuts\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\treturn view != null && ";
  protected final String TEXT_9 = ".MODEL_ID.equals(";
  protected final String TEXT_10 = ".getModelID(view));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class ShortcutsDecorator extends AbstractDecorator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ShortcutsDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\trefresh();" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tImage image = ";
  protected final String TEXT_11 = ".getInstance().getBundledImage(\"icons/shortcut.gif\");" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d32 4
a35 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d45 1
d47 1
a47 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d49 1
a49 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d51 1
a51 1
    importManager.markImportLocation(stringBuffer);
d53 1
a53 1
    stringBuffer.append(genDiagram.getShortcutsDecoratorProviderClassName());
d55 1
a55 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d57 1
a57 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a58 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
@


1.1
log
@#135693 Use decoration service to provide shortcut image
@
text
@d25 5
a29 3
  protected final String TEXT_8 = " extends AbstractProvider implements IDecoratorProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String SHORTCUTS_DECORATOR_ID = \"shortcuts\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\treturn decoratorTarget.getAdapter(View.class) != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\tEAnnotation annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(SHORTCUTS_DECORATOR_ID, new ShortcutsDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected class ShortcutsDecorator extends AbstractDecorator {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ShortcutsDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\trefresh();" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tImage image = ";
  protected final String TEXT_9 = ".getInstance().getBundledImage(\"icons/shortcut.gif\");" + NL + "\t\t\tif (editPart instanceof ShapeEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(image, IDecoratorTarget.Direction.SOUTH_WEST, 0, false));" + NL + "\t\t\t} else if (editPart instanceof ConnectionEditPart) {" + NL + "\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(image, 50, false));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d53 4
d58 1
a58 1
    stringBuffer.append(TEXT_9);
d60 1
a60 1
    stringBuffer.append(TEXT_10);
@

