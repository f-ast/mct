head	1.15;
access;
symbols
	v20081022-1925:1.15
	v20081015-1925:1.15
	v20081008-1925:1.15
	v20081001-1925:1.15
	v20080924-1925:1.15
	v20080917-1925:1.15
	v20080911-1728:1.15
	v20080910-1520:1.15
	v20080903-1520:1.15
	v20080827-1520:1.15
	v20080813-1520:1.15
	v20080806-1520:1.15
	v20070202-0200:1.14
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.14
	v20061020-1000:1.14
	v20061013-1330:1.14
	v20060919-0800:1.14
	v20060907-1100:1.14
	M1_20:1.14
	v20060904-1500:1.14
	v20060824-1600:1.14
	v20060817-1500:1.14
	v20060728-0500:1.14
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060620-0400:1.14
	v20060616-1400:1.14
	v20060616-1200:1.14
	v20060609-1400:1.13
	v20060531-1730:1.12
	M6_10:1.10
	I20060407-1200:1.6
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2006.11.22.10.21.44;	author ashatalin;	state dead;
branches;
next	1.14;
commitid	7860456424b04567;

1.14
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.31.19.53.02;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.18.12.19.27;	author dstadnik;	state dead;
branches;
next	1.10;

1.10
date	2006.04.14.10.48.27;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.11.41.48;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.07.15.45.27;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.17.15.39;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.15
log
@[152717] - Do not generate *ReferenceConnectionEditPolicy
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ReferenceConnectionEditPolicyGenerator
{
  protected static String nl;
  public static synchronized ReferenceConnectionEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ReferenceConnectionEditPolicyGenerator result = new ReferenceConnectionEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.Request;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.CompoundCommand;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gef.editparts.AbstractConnectionEditPart;" + NL + "import org.eclipse.gef.editpolicies.ConnectionEditPolicy;" + NL + "import org.eclipse.gef.requests.GroupRequest;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.dialogs.MessageDialogWithToggle;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "import org.eclipse.jface.util.Assert;" + NL + "import org.eclipse.swt.widgets.Display;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ConnectionEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected final Command getDeleteCommand(GroupRequest deleteRequest) {" + NL + "\t\tboolean isDeleteFromKeyBoard = deleteRequest instanceof GroupRequestViaKeyboard;" + NL + "\t\tif (shouldDeleteSemantic()) {" + NL + "\t\t\treturn createDeleteSemanticCommand(deleteRequest);" + NL + "\t\t} else {" + NL + "\t\t\tboolean proceedToDeleteView = true;" + NL + "\t\t\tif (isDeleteFromKeyBoard) {" + NL + "\t\t\t\tGroupRequestViaKeyboard groupRequestViaKeyboard = (GroupRequestViaKeyboard) deleteRequest;" + NL + "\t\t\t\tif (groupRequestViaKeyboard.isShowInformationDialog()) {" + NL + "\t\t\t\t\tproceedToDeleteView = showPrompt();" + NL + "\t\t\t\t\tgroupRequestViaKeyboard.setShowInformationDialog(false);" + NL + "\t\t\t\t\tif (!(proceedToDeleteView))" + NL + "\t\t\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn createDeleteViewCommand(deleteRequest);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteSemantic() {" + NL + "\t\tAssert.isTrue(getHost() instanceof AbstractConnectionEditPart);" + NL + "\t\tAbstractConnectionEditPart cep = (AbstractConnectionEditPart) getHost();" + NL + "\t\tboolean isCanonical = false;" + NL + "\t\tif (cep.getSource() != null)" + NL + "\t\t\tisCanonical = IsCanonical(cep.getSource());" + NL + "\t\tif (cep.getTarget() != null)" + NL + "\t\t\treturn isCanonical ? isCanonical : IsCanonical(cep.getTarget());" + NL + "\t\treturn isCanonical;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean IsCanonical(EditPart ep) {" + NL + "\t\tEditPart parent = ep.getParent();" + NL + "\t\treturn parent instanceof GraphicalEditPart ? ((GraphicalEditPart) parent).isCanonical() : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteViewCommand(GroupRequest deleteRequest) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn new ICommandProxy(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tEditCommandRequestWrapper semReq = new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false), deleteRequest.getExtendedData());" + NL + "\t\tCommand semanticCmd = getHost().getCommand(semReq);" + NL + "\t\tif (semanticCmd != null && semanticCmd.canExecute()) {" + NL + "\t\t\tCompoundCommand cc = new CompoundCommand();" + NL + "\t\t\tcc.add(semanticCmd);" + NL + "\t\t\treturn cc;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean showPrompt() {" + NL + "\t\tboolean prompt = ((IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()).getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);" + NL + "\t\tif (prompt)" + NL + "\t\t\tif (showMessageDialog())" + NL + "\t\t\t\treturn true;" + NL + "\t\t\telse" + NL + "\t\t\t\treturn false;" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean showMessageDialog() {" + NL + "\t\tMessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoQuestion(Display.getCurrent().getActiveShell(), DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE," + NL + "\t\t\t\tDELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false, (IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\tIPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);" + NL + "\t\tif (dialog.getReturnCode() == IDialogConstants.YES_ID)" + NL + "\t\t\treturn true;" + NL + "\t\telse" + NL + "\t\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Command getCommand(Request request) {" + NL + "\t\tif (request instanceof GroupRequestViaKeyboard) {" + NL + "\t\t\treturn getDeleteCommand((GroupRequest) request);" + NL + "\t\t}" + NL + "\t\treturn super.getCommand(request);" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getReferenceConnectionEditPolicyClassName());
    stringBuffer.append(TEXT_6);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
@


1.14
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@@


1.13
log
@header comment should not be a javadoc comment
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.Request;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.CompoundCommand;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gef.editparts.AbstractConnectionEditPart;" + NL + "import org.eclipse.gef.editpolicies.ConnectionEditPolicy;" + NL + "import org.eclipse.gef.requests.GroupRequest;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.dialogs.MessageDialogWithToggle;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "import org.eclipse.jface.util.Assert;" + NL + "import org.eclipse.swt.widgets.Display;";
d23 1
a23 1
  protected final String TEXT_6 = " extends ConnectionEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected final Command getDeleteCommand(GroupRequest deleteRequest) {" + NL + "\t\tboolean isDeleteFromKeyBoard = deleteRequest instanceof GroupRequestViaKeyboard;" + NL + "\t\tif (shouldDeleteSemantic()) {" + NL + "\t\t\treturn createDeleteSemanticCommand(deleteRequest);" + NL + "\t\t} else {" + NL + "\t\t\tboolean proceedToDeleteView = true;" + NL + "\t\t\tif (isDeleteFromKeyBoard) {" + NL + "\t\t\t\tGroupRequestViaKeyboard groupRequestViaKeyboard = (GroupRequestViaKeyboard) deleteRequest;" + NL + "\t\t\t\tif (groupRequestViaKeyboard.isShowInformationDialog()) {" + NL + "\t\t\t\t\tproceedToDeleteView = showPrompt();" + NL + "\t\t\t\t\tgroupRequestViaKeyboard.setShowInformationDialog(false);" + NL + "\t\t\t\t\tif (!(proceedToDeleteView))" + NL + "\t\t\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn createDeleteViewCommand(deleteRequest);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteSemantic() {" + NL + "\t\tAssert.isTrue(getHost() instanceof AbstractConnectionEditPart);" + NL + "\t\tAbstractConnectionEditPart cep = (AbstractConnectionEditPart) getHost();" + NL + "\t\tboolean isCanonical = false;" + NL + "\t\tif (cep.getSource() != null)" + NL + "\t\t\tisCanonical = IsCanonical(cep.getSource());" + NL + "\t\tif (cep.getTarget() != null)" + NL + "\t\t\treturn isCanonical ? isCanonical : IsCanonical(cep.getTarget());" + NL + "\t\treturn isCanonical;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean IsCanonical(EditPart ep) {" + NL + "\t\tEditPart parent = ep.getParent();" + NL + "\t\treturn parent instanceof GraphicalEditPart ? ((GraphicalEditPart) parent).isCanonical() : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteViewCommand(GroupRequest deleteRequest) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn new EtoolsProxyCommand(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tEditCommandRequestWrapper semReq = new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false), deleteRequest.getExtendedData());" + NL + "\t\tCommand semanticCmd = getHost().getCommand(semReq);" + NL + "\t\tif (semanticCmd != null && semanticCmd.canExecute()) {" + NL + "\t\t\tCompoundCommand cc = new CompoundCommand();" + NL + "\t\t\tcc.add(semanticCmd);" + NL + "\t\t\treturn cc;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean showPrompt() {" + NL + "\t\tboolean prompt = ((IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()).getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);" + NL + "\t\tif (prompt)" + NL + "\t\t\tif (showMessageDialog())" + NL + "\t\t\t\treturn true;" + NL + "\t\t\telse" + NL + "\t\t\t\treturn false;" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean showMessageDialog() {" + NL + "\t\tMessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoQuestion(Display.getCurrent().getActiveShell(), DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE," + NL + "\t\t\t\tDELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false, (IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\tIPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);" + NL + "\t\tif (dialog.getReturnCode() == IDialogConstants.YES_ID)" + NL + "\t\t\treturn true;" + NL + "\t\telse" + NL + "\t\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Command getCommand(Request request) {" + NL + "\t\tif (request instanceof GroupRequestViaKeyboard) {" + NL + "\t\t\treturn getDeleteCommand((GroupRequest) request);" + NL + "\t\t}" + NL + "\t\treturn super.getCommand(request);" + NL + "\t}" + NL + "}";
@


1.12
log
@#144251 Example ecore diagram editor creates invalid ecore file

Should be possible to remove reference-only links.
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.11
log
@remove ref connection edit policy - not required anymore
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d21 4
a24 6
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.Request;" + NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.CompoundCommand;" + NL + "import org.eclipse.gef.commands.UnexecutableCommand;" + NL + "import org.eclipse.gef.editparts.AbstractConnectionEditPart;" + NL + "import org.eclipse.gef.editpolicies.ConnectionEditPolicy;" + NL + "import org.eclipse.gef.requests.GroupRequest;" + NL + "import org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.l10n.DiagramUIMessages;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.IPreferenceConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.EditCommandRequestWrapper;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.requests.GroupRequestViaKeyboard;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.dialogs.IDialogConstants;" + NL + "import org.eclipse.jface.dialogs.MessageDialogWithToggle;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "import org.eclipse.jface.util.Assert;" + NL + "import org.eclipse.swt.widgets.Display;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ConnectionEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_DIAGRAM_DLG_TITLE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Title;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_DIAGRAM_DLG_MESSAGE = DiagramUIMessages.PromptingDeleteAction_DeleteFromDiagramDialog_Message;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DELETE_FROM_MODEL_DLG_TOGGLE_LABEL = DiagramUIMessages.MessageDialogWithToggle_DoNotPromptAgainToggle_label;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected final Command getDeleteCommand(GroupRequest deleteRequest) {" + NL + "\t\tboolean isDeleteFromKeyBoard = deleteRequest instanceof GroupRequestViaKeyboard;" + NL + "\t\tif (shouldDeleteSemantic()) {" + NL + "\t\t\treturn createDeleteSemanticCommand(deleteRequest);" + NL + "\t\t} else {" + NL + "\t\t\tboolean proceedToDeleteView = true;" + NL + "\t\t\tif (isDeleteFromKeyBoard) {" + NL + "\t\t\t\tGroupRequestViaKeyboard groupRequestViaKeyboard = (GroupRequestViaKeyboard) deleteRequest;" + NL + "\t\t\t\tif (groupRequestViaKeyboard.isShowInformationDialog()) {" + NL + "\t\t\t\t\tproceedToDeleteView = showPrompt();" + NL + "\t\t\t\t\tgroupRequestViaKeyboard.setShowInformationDialog(false);" + NL + "\t\t\t\t\tif (!(proceedToDeleteView))" + NL + "\t\t\t\t\t\treturn UnexecutableCommand.INSTANCE;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn createDeleteViewCommand(deleteRequest);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteSemantic() {" + NL + "\t\tAssert.isTrue(getHost() instanceof AbstractConnectionEditPart);" + NL + "\t\tAbstractConnectionEditPart cep = (AbstractConnectionEditPart) getHost();" + NL + "\t\tboolean isCanonical = false;" + NL + "\t\tif (cep.getSource() != null)" + NL + "\t\t\tisCanonical = IsCanonical(cep.getSource());" + NL + "\t\tif (cep.getTarget() != null)" + NL + "\t\t\treturn isCanonical ? isCanonical : IsCanonical(cep.getTarget());" + NL + "\t\treturn isCanonical;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean IsCanonical(EditPart ep) {" + NL + "\t\tEditPart parent = ep.getParent();" + NL + "\t\treturn parent instanceof GraphicalEditPart ? ((GraphicalEditPart) parent).isCanonical() : false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteViewCommand(GroupRequest deleteRequest) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\treturn new EtoolsProxyCommand(new DeleteCommand(editingDomain, (View) getHost().getModel()));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteSemanticCommand(GroupRequest deleteRequest) {" + NL + "\t\tTransactionalEditingDomain editingDomain = ((IGraphicalEditPart) getHost()).getEditingDomain();" + NL + "\t\tEditCommandRequestWrapper semReq = new EditCommandRequestWrapper(new DestroyElementRequest(editingDomain, false));" + NL + "\t\tCommand semanticCmd = getHost().getCommand(semReq);" + NL + "\t\tif (semanticCmd != null && semanticCmd.canExecute()) {" + NL + "\t\t\tCompoundCommand cc = new CompoundCommand();" + NL + "\t\t\tcc.add(semanticCmd);" + NL + "\t\t\treturn cc;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean showPrompt() {" + NL + "\t\tboolean prompt = ((IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()).getBoolean(IPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);" + NL + "\t\tif (prompt)" + NL + "\t\t\tif (showMessageDialog())" + NL + "\t\t\t\treturn true;" + NL + "\t\t\telse" + NL + "\t\t\t\treturn false;" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean showMessageDialog() {" + NL + "\t\tMessageDialogWithToggle dialog = MessageDialogWithToggle.openYesNoQuestion(Display.getCurrent().getActiveShell(), DELETE_FROM_DIAGRAM_DLG_TITLE, DELETE_FROM_DIAGRAM_DLG_MESSAGE," + NL + "\t\t\t\tDELETE_FROM_MODEL_DLG_TOGGLE_LABEL, false, (IPreferenceStore) ((IGraphicalEditPart) getHost()).getDiagramPreferencesHint().getPreferenceStore()," + NL + "\t\t\t\tIPreferenceConstants.PREF_PROMPT_ON_DEL_FROM_DIAGRAM);" + NL + "\t\tif (dialog.getReturnCode() == IDialogConstants.YES_ID)" + NL + "\t\t\treturn true;" + NL + "\t\telse" + NL + "\t\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Command getCommand(Request request) {" + NL + "\t\tif (request instanceof GroupRequestViaKeyboard) {" + NL + "\t\t\treturn getDeleteCommand((GroupRequest) request);" + NL + "\t\t}" + NL + "\t\treturn super.getCommand(request);" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d29 4
a32 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d39 1
a39 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
d42 1
d44 1
a44 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d46 1
a46 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
d48 1
a48 1
    importManager.markImportLocation(stringBuffer);
a49 4
    stringBuffer.append(genDiagram.getReferenceConnectionEditPolicyClassName());
    stringBuffer.append(TEXT_8);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
@


1.10
log
@do not use deprecated api
@
text
@@


1.9
log
@using M6 to generate code.
@
text
@d23 1
a23 1
  protected final String TEXT_6 = NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.CompoundCommand;" + NL + "import org.eclipse.gef.requests.GroupRequest;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionEditPolicy;";
d25 1
a25 1
  protected final String TEXT_8 = " extends ConnectionEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteSemantic() {" + NL + "\t\treturn false;" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteViewCommand(GroupRequest deleteRequest) {" + NL + "\t\tCompoundCommand cmd = new CompoundCommand();" + NL + "\t\tcmd.add(super.createDeleteViewCommand(deleteRequest));" + NL + "\t\tcmd.add(createDeleteSemanticCommand(deleteRequest));" + NL + "\t\treturn cmd;" + NL + "\t}" + NL + "}";
@


1.8
log
@restore generators
@
text
@d30 1
a30 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@#134095 do not store compiled templates in cvs
@
text
@d30 1
a30 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.6
log
@Switching to eclipse M6.
@
text
@@


1.5
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d30 1
a30 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 9
a26 6
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gef.commands.Command;" + NL + "import org.eclipse.gef.commands.CompoundCommand;" + NL + "import org.eclipse.gef.requests.GroupRequest;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.ConnectionEditPolicy;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ConnectionEditPolicy {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean shouldDeleteSemantic() {" + NL + "\t\treturn false;" + NL + "\t};" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Command createDeleteViewCommand(GroupRequest deleteRequest) {" + NL + "\t\tCompoundCommand cmd = new CompoundCommand();" + NL + "\t\tcmd.add(super.createDeleteViewCommand(deleteRequest));" + NL + "\t\tcmd.add(createDeleteSemanticCommand(deleteRequest));" + NL + "\t\treturn cmd;" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;
d31 1
a31 1
    GenDiagram diagram = (GenDiagram) ((Object[]) argument)[0];
d33 4
a36 1
    stringBuffer.append(diagram.getEditPoliciesPackageName());
d38 1
a38 1
    ImportUtil importManager = new ImportUtil(diagram.getEditPoliciesPackageName());
d40 1
a40 1
    importManager.markImportLocation(stringBuffer);
d42 1
a42 1
    stringBuffer.append(diagram.getReferenceConnectionEditPolicyClassName());
d44 6
d51 1
a51 1
    stringBuffer.append(TEXT_6);
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d28 1
a28 1
    GenDiagram diagram = (GenDiagram) argument;
@


1.2
log
@#116031 avoid hardcoded class names in templates
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.1
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d36 1
a36 1
    stringBuffer.append(importManager.getImportedName(diagram.getReferenceConnectionEditPolicyQualifiedClassName()));
@

