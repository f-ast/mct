head	1.38;
access;
symbols
	v20081022-1925:1.38
	v20081015-1925:1.38
	v20081008-1925:1.38
	v20081001-1925:1.38
	v20080924-1925:1.38
	v20080917-1925:1.38
	v20080911-1728:1.38
	v20080910-1520:1.38
	v20080903-1520:1.38
	v20080827-1520:1.38
	v20080813-1520:1.38
	v20080806-1520:1.38
	v20070228-2000:1.37
	v20070221-1500:1.37
	v20070208-1800:1.36
	v20070202-0200:1.24.2.1
	v20070103-0300:1.35
	M4_20:1.35
	v20061222-1800:1.35
	v20061218-1200:1.35
	v20061214-0000:1.35
	v20061120-1300:1.34
	M3_20:1.34
	v20061117-0800:1.34
	v20061027-1200:1.24.2.1
	v20061020-1000:1.24.2.1
	v20061013-1330:1.31
	v20060919-0800:1.24.2.1
	v20060907-1100:1.24.2.1
	M1_20:1.27
	v20060904-1500:1.27
	v20060824-1600:1.24
	v20060817-1500:1.24
	v20060728-0500:1.24
	v20060713-1700:1.24
	R1_0_maintenance:1.24.0.2
	R1_0:1.24
	v20060627-1200:1.24
	v20060626-1420:1.24
	v20060620-0400:1.24
	v20060616-1400:1.23
	v20060616-1200:1.23
	v20060609-1400:1.23
	v20060531-1730:1.20
	v20060530-1930:1.20
	v20060526-1200:1.19
	v20060519-1300:1.18
	v20060519-0800:1.18
	v20060512-1000:1.15
	I20060512-1000:1.15
	I20060505-1400:1.15
	I20060428-1300:1.15
	I20060424-0500:1.13
	I20060424-0300:1.13
	M6_10:1.11
	I20060407-1200:1.6
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.38
date	2007.03.01.13.05.36;	author dstadnik;	state dead;
branches;
next	1.37;
commitid	1a6045e6cf9e4567;

1.37
date	2007.02.21.12.36.01;	author ashatalin;	state Exp;
branches;
next	1.36;
commitid	500645dc3caf4567;

1.36
date	2007.01.29.19.30.15;	author ashatalin;	state Exp;
branches;
next	1.35;
commitid	7ac145be4b464567;

1.35
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.34;
commitid	5f734567714f4567;

1.34
date	2006.11.03.12.28.31;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.10.18.14.21.47;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.10.06.13.28.48;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.09.29.18.48.22;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.09.05.16.01.38;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.08.21.12.31.00;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.08.01.18.02.34;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.07.21.11.46.26;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.19.11.06.40;	author dstadnik;	state Exp;
branches
	1.24.2.1;
next	1.23;

1.23
date	2006.06.05.16.33.13;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.06.02.15.08.49;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.15.18.34.06;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.27.12.52.07;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.25.20.29.12;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.21.17.12.00;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.13.22.22.24;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.6;

1.6
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.06.13.05.16;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.04.14.12.04;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.19.16.57.17;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.14.17.40.30;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.14.14.18.23;	author ashatalin;	state Exp;
branches;
next	;

1.24.2.1
date	2006.09.01.12.42.40;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.38
log
@rewrite NewDiagramFileWizard in xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import java.util.*;
import org.eclipse.gmf.common.codegen.*;

public class NewDiagramFileWizardGenerator {
 
  protected static String nl;
  public static synchronized NewDiagramFileWizardGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NewDiagramFileWizardGenerator result = new NewDiagramFileWizardGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends Wizard {" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate TransactionalEditingDomain myEditingDomain;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate WizardNewFileCreationPage myFileCreationPage;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPage myWorkbenchPage;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate EObject myDiagramRoot;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection, EObject diagramRoot, TransactionalEditingDomain editingDomain) {" + NL + "\t\tassert selectedModelFile != null : \"Null selectedModelFile in ";
  protected final String TEXT_7 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert workbenchPage != null : \"Null workbenchPage in ";
  protected final String TEXT_8 = " constructor\"; //$NON-NLS-1$" + NL + "\t\tassert selection != null : \"Null selection in ";
  protected final String TEXT_9 = " constructor\"; //$NON-NLS-1$" + NL + "\t    assert diagramRoot != null : \"Null diagramRoot in ";
  protected final String TEXT_10 = " constructor\"; //$NON-NLS-1$" + NL + "\t    assert editingDomain != null : \"Null editingDomain in ";
  protected final String TEXT_11 = " constructor\"; //$NON-NLS-1$" + NL + "\t    " + NL + "\t   \tmySelectedModelFile = selectedModelFile;" + NL + "\t   \tmyWorkbenchPage = workbenchPage;" + NL + "\t   \tmySelection = selection;" + NL + "\t   \tmyDiagramRoot = diagramRoot;" + NL + "\t   \tmyEditingDomain = editingDomain;" + NL + "\t}" + NL + "\t     \t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection) {" + NL + "" + NL + "\t\t\tpublic void createControl(Composite parent) {" + NL + "\t\t\t\tsuper.createControl(parent);" + NL + "\t\t\t\t" + NL + "\t\t\t\tIContainer parentContainer = mySelectedModelFile.getParent();" + NL + "\t\t\t\tString originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();" + NL + "\t\t\t\tString fileExtension = \".";
  protected final String TEXT_12 = "\"; //$NON-NLS-1$" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; parentContainer.getFile(new Path(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram based on \" + ";
  protected final String TEXT_13 = ".MODEL_ID + \" model content\");" + NL + "\t\taddPage(myFileCreationPage);" + NL + "\t\taddPage(new RootElementSelectorPage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new NullProgressMonitor()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_14 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString(), true));" + NL + "" + NL + "\t\tList affectedFiles = new LinkedList();" + NL + "\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_16 = ".getDiagramVisualID(myDiagramRoot);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_17 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(myDiagramRoot, ";
  protected final String TEXT_18 = ".MODEL_ID, ";
  protected final String TEXT_19 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tdiagramResource.getContents().add(diagram);";
  protected final String TEXT_20 = NL + "\t\t\t\tdiagramResource.getContents().add(diagram.getElement());";
  protected final String TEXT_21 = NL + "\t\t\t\tinitDiagramContents(diagram, myDiagramRoot);";
  protected final String TEXT_22 = NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t";
  protected final String TEXT_23 = ".openDiagram(diagramResource);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_24 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_25 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (PartInitException ex) {" + NL + "\t\t\t";
  protected final String TEXT_26 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t}\t\t\t" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_29 = " myLinkDescriptors = new ";
  protected final String TEXT_30 = "();" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_31 = " myEObject2NodeMap = new ";
  protected final String TEXT_32 = "();" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_33 = " diagram, ";
  protected final String TEXT_34 = " diagramModelObject) {" + NL + "\tcreate";
  protected final String TEXT_35 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_38 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_39 = " nextResourceObject = (";
  protected final String TEXT_40 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_41 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_42 = NL + "\tcase ";
  protected final String TEXT_43 = ".VISUAL_ID: {" + NL + "\t\t";
  protected final String TEXT_44 = " nextNode = ViewService.createNode(diagram, nextResourceObject, ";
  protected final String TEXT_45 = ".getType(";
  protected final String TEXT_46 = ".VISUAL_ID), ";
  protected final String TEXT_47 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_48 = "Children(nextNode, nextResourceObject);";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_51 = "\t}" + NL + "}";
  protected final String TEXT_52 = "\t\t" + NL + "\tcreateLinks(diagram);" + NL + "}";
  protected final String TEXT_53 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_54 = "Children(";
  protected final String TEXT_55 = " viewObject, ";
  protected final String TEXT_56 = " modelObject) {";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = "\t";
  protected final String TEXT_59 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_60 = "\tfor (";
  protected final String TEXT_61 = " values = ";
  protected final String TEXT_62 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_63 = ") values.next();";
  protected final String TEXT_64 = NL + "\tnextValue = ";
  protected final String TEXT_65 = ";";
  protected final String TEXT_66 = NL + "\tnodeVID = ";
  protected final String TEXT_67 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_68 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_69 = NL + "\tcase ";
  protected final String TEXT_70 = ".VISUAL_ID: {";
  protected final String TEXT_71 = NL + "\tif (";
  protected final String TEXT_72 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_73 = NL + "\t\t";
  protected final String TEXT_74 = " nextNode = ViewService.createNode(viewObject, nextValue, ";
  protected final String TEXT_75 = ".getType(";
  protected final String TEXT_76 = ".VISUAL_ID), ";
  protected final String TEXT_77 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_78 = "Children(nextNode, nextValue);";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "\t\tbreak;";
  protected final String TEXT_81 = "\t}";
  protected final String TEXT_82 = NL + "\t}";
  protected final String TEXT_83 = NL + "\t}";
  protected final String TEXT_84 = NL + "\t";
  protected final String TEXT_85 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_86 = ".getType(";
  protected final String TEXT_87 = ".VISUAL_ID));" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_88 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_89 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_90 = NL + "}";
  protected final String TEXT_91 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_92 = " getCompartment(";
  protected final String TEXT_93 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_94 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_95 = " nextView = (";
  protected final String TEXT_96 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_97 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_98 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_99 = NL;
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_102 = " container, ";
  protected final String TEXT_103 = " diagram) {" + NL + "\t";
  protected final String TEXT_104 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_105 = " container, ";
  protected final String TEXT_106 = " containerMetaclass) {\t";
  protected final String TEXT_107 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_108 = "_";
  protected final String TEXT_109 = "(container, containerMetaclass);";
  protected final String TEXT_110 = NL + "}" + NL;
  protected final String TEXT_111 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_112 = "_";
  protected final String TEXT_113 = "(";
  protected final String TEXT_114 = " container, ";
  protected final String TEXT_115 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_116 = ".eINSTANCE.get";
  protected final String TEXT_117 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_118 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_119 = " values = ";
  protected final String TEXT_120 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_121 = " nextValue = ((";
  protected final String TEXT_122 = ") values.next());";
  protected final String TEXT_123 = NL + "\t\t";
  protected final String TEXT_124 = " nextValue = (";
  protected final String TEXT_125 = ") ";
  protected final String TEXT_126 = ";";
  protected final String TEXT_127 = NL + "\t\tint linkVID = ";
  protected final String TEXT_128 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_129 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_130 = ";";
  protected final String TEXT_131 = NL + "\t\t\t";
  protected final String TEXT_132 = " targets = (";
  protected final String TEXT_133 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_134 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_135 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_136 = " dst = (";
  protected final String TEXT_137 = ") structuralFeatureResult;";
  protected final String TEXT_138 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_139 = ";";
  protected final String TEXT_140 = NL + "\t\t\t\t";
  protected final String TEXT_141 = " sources = (";
  protected final String TEXT_142 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_143 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_144 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_145 = " src = (";
  protected final String TEXT_146 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_147 = ".";
  protected final String TEXT_148 = ", linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_149 = NL + "\t\t\t\t";
  protected final String TEXT_150 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, ";
  protected final String TEXT_151 = ".";
  protected final String TEXT_152 = ", linkVID));";
  protected final String TEXT_153 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_154 = NL + "\t\t}";
  protected final String TEXT_155 = NL + "\t}" + NL + "}";
  protected final String TEXT_156 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_157 = " container, ";
  protected final String TEXT_158 = " containerMetaclass, ";
  protected final String TEXT_159 = " diagram) {";
  protected final String TEXT_160 = NL;
  protected final String TEXT_161 = "\tif (";
  protected final String TEXT_162 = ".eINSTANCE.get";
  protected final String TEXT_163 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_164 = NL + "\t\tfor (";
  protected final String TEXT_165 = " destinations = ";
  protected final String TEXT_166 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_167 = " nextDestination = (";
  protected final String TEXT_168 = ") destinations.next();";
  protected final String TEXT_169 = NL + "\t\t";
  protected final String TEXT_170 = " nextDestination = (";
  protected final String TEXT_171 = ") ";
  protected final String TEXT_172 = ";";
  protected final String TEXT_173 = NL + "\t\tif (";
  protected final String TEXT_174 = ".VISUAL_ID == ";
  protected final String TEXT_175 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_176 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_177 = ".";
  protected final String TEXT_178 = ", ";
  protected final String TEXT_179 = ".VISUAL_ID));";
  protected final String TEXT_180 = NL + "\t\t";
  protected final String TEXT_181 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_182 = ".getType(";
  protected final String TEXT_183 = ".VISUAL_ID), ";
  protected final String TEXT_184 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_185 = "Children(nextNode, nextDestination);";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = NL + "\t\t}";
  protected final String TEXT_188 = NL + "\t\t}";
  protected final String TEXT_189 = NL + "\t}";
  protected final String TEXT_190 = NL;
  protected final String TEXT_191 = "\tif (";
  protected final String TEXT_192 = ".eINSTANCE.get";
  protected final String TEXT_193 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_194 = NL + "\t\tfor (";
  protected final String TEXT_195 = " destinations = ";
  protected final String TEXT_196 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_197 = " nextDestination = (";
  protected final String TEXT_198 = ") destinations.next();";
  protected final String TEXT_199 = NL + "\t\t";
  protected final String TEXT_200 = " nextDestination = (";
  protected final String TEXT_201 = ") ";
  protected final String TEXT_202 = ";";
  protected final String TEXT_203 = NL + "\t\tif (";
  protected final String TEXT_204 = ".VISUAL_ID == ";
  protected final String TEXT_205 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_206 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_207 = ".";
  protected final String TEXT_208 = ", ";
  protected final String TEXT_209 = ".VISUAL_ID));";
  protected final String TEXT_210 = NL;
  protected final String TEXT_211 = NL + "\t\t}";
  protected final String TEXT_212 = NL + "\t\t}";
  protected final String TEXT_213 = NL + "\t}";
  protected final String TEXT_214 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_215 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_216 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_217 = " edge = (";
  protected final String TEXT_218 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_219 = ".APPEND, ";
  protected final String TEXT_220 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_221 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_222 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_223 = NL;
  protected final String TEXT_224 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_225 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_226 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_227 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_228 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_229 = " source, ";
  protected final String TEXT_230 = " destination, ";
  protected final String TEXT_231 = " linkElement, ";
  protected final String TEXT_232 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tfinal ";
  protected final String TEXT_233 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_234 = "(linkElement) {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_235 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_236 = " source, ";
  protected final String TEXT_237 = " destination, ";
  protected final String TEXT_238 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_239 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_240 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_241 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_242 = " source, ";
  protected final String TEXT_243 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_244 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_245 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_246 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_247 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_248 = "\t" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_249 = " implements ";
  protected final String TEXT_250 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_251 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_252 = " topLevel = new ";
  protected final String TEXT_253 = "(parent, ";
  protected final String TEXT_254 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_255 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_256 = "(";
  protected final String TEXT_257 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_258 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_259 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_260 = " panel = new ";
  protected final String TEXT_261 = "(parent, ";
  protected final String TEXT_262 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_263 = "(";
  protected final String TEXT_264 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_265 = " layout = new ";
  protected final String TEXT_266 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_267 = " label = new ";
  protected final String TEXT_268 = "(panel, ";
  protected final String TEXT_269 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_270 = "(";
  protected final String TEXT_271 = ".HORIZONTAL_ALIGN_BEGINNING));" + NL + "\t\t" + NL + "\t\t\t";
  protected final String TEXT_272 = " treeViewer = new ";
  protected final String TEXT_273 = "(panel, ";
  protected final String TEXT_274 = ".SINGLE | ";
  protected final String TEXT_275 = ".H_SCROLL | ";
  protected final String TEXT_276 = ".V_SCROLL | ";
  protected final String TEXT_277 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_278 = " layoutData = new ";
  protected final String TEXT_279 = "(";
  protected final String TEXT_280 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\ttreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\t\ttreeViewer.setContentProvider(new ";
  protected final String TEXT_281 = "(";
  protected final String TEXT_282 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setLabelProvider(new ";
  protected final String TEXT_283 = "(";
  protected final String TEXT_284 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setInput(myDiagramRoot.eResource());" + NL + "\t\t\ttreeViewer.setSelection(new ";
  protected final String TEXT_285 = "(myDiagramRoot));" + NL + "\t\t\ttreeViewer.addSelectionChangedListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_286 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_287 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_288 = " selection = (";
  protected final String TEXT_289 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_290 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_291 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_292 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_293 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (EObject) selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_294 = "(new ";
  protected final String TEXT_295 = "(myDiagramRoot), ";
  protected final String TEXT_296 = ".MODEL_ID, ";
  protected final String TEXT_297 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    
importManager.emitPackageStatement(stringBuffer);

importManager.addImport("java.io.IOException");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.List");
importManager.addImport("java.util.LinkedList");
importManager.addImport("org.eclipse.core.commands.ExecutionException");
importManager.addImport("org.eclipse.core.commands.operations.OperationHistoryFactory");
importManager.addImport("org.eclipse.core.resources.IContainer");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.core.runtime.NullProgressMonitor");
importManager.addImport("org.eclipse.core.runtime.Path");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.CommandResult");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.services.ViewService");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.jface.viewers.IStructuredSelection");
importManager.addImport("org.eclipse.jface.wizard.Wizard");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.dialogs.WizardNewFileCreationPage");
importManager.addImport("org.eclipse.ui.IWorkbenchPage");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_10);
    stringBuffer.append(genDiagram.getNewDiagramFileWizardClassName());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_19);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_20);
    
}
if (!genDiagram.isSynchronized()) {

    stringBuffer.append(TEXT_21);
    }
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_26);
    if (!genDiagram.isSynchronized()) {
    stringBuffer.append(TEXT_27);
    
List genLinks = genDiagram.getLinks();

    final Map<GenClass, GenTopLevelNode> genClass2Phantom = genDiagram.getGenClass2PhantomMap();
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_35);
    stringBuffer.append(TEXT_36);
    
if (!genClass2Phantom.isEmpty()) {

    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_41);
    
}
for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
	GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();

    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(TEXT_50);
    }
if (!genClass2Phantom.isEmpty()) {

    stringBuffer.append(TEXT_51);
    }
    
// TODO: remove "createLinks()" method - this task should be done by canonicalEditPolicies

    stringBuffer.append(TEXT_52);
    
boolean generateGetCompartment = false;

for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();

    stringBuffer.append(TEXT_53);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_56);
    	{
		List genNodes = nextContainer.getContainedNodes();
    stringBuffer.append(TEXT_57);
    
Map genFeature2genNodeMap = new LinkedHashMap();
for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
	GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	if (typeModelFacet.isPhantomElement()) {
		// Skipping top-level phantoms
		continue;
	}
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	if (!genFeature2genNodeMap.containsKey(childMetaFeature)) {
		genFeature2genNodeMap.put(childMetaFeature, new ArrayList());
	}
	((Collection) genFeature2genNodeMap.get(childMetaFeature)).add(nextNode);
}

Set entrySet = genFeature2genNodeMap.entrySet();
if (entrySet.size() > 0) {

    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_59);
    
}

for (Iterator entries = entrySet.iterator(); entries.hasNext();) {
	Map.Entry nextEntry = (Map.Entry) entries.next();
	GenFeature childMetaFeature = (GenFeature) nextEntry.getKey();
	Collection genNodesCollection = (Collection) nextEntry.getValue();
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_63);
    	} else {
    stringBuffer.append(TEXT_64);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_65);
    	}
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_67);
    	boolean generateSwitch = genNodesCollection.size() != 1;
	if (generateSwitch) {
    stringBuffer.append(TEXT_68);
    	}
	
	for (Iterator genNodesIterator = genNodesCollection.iterator(); genNodesIterator.hasNext();) {
		GenNode nextNode = (GenNode) genNodesIterator.next();
		if (generateSwitch) {
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_70);
    		} else {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_72);
    		}
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_77);
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_78);
    stringBuffer.append(TEXT_79);
    		if (generateSwitch) {
    stringBuffer.append(TEXT_80);
    		}
    stringBuffer.append(TEXT_81);
    	}
	if (generateSwitch) {
    stringBuffer.append(TEXT_82);
    	}
	if (childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_83);
    	}
}
    	}

	if (nextContainer instanceof GenNode) {
		GenNode nextNode = (GenNode) nextContainer;
		for (int i = 0; i < nextNode.getCompartments().size(); i++) {
			generateGetCompartment = true;
			GenCompartment nextCompartment = (GenCompartment) nextNode.getCompartments().get(i);

    stringBuffer.append(TEXT_84);
    stringBuffer.append(i == 0 ? importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node") : "");
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName(nextCompartment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(nextCompartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_88);
    
		}
	}
	if (false == nextContainer instanceof GenCompartment) {

    stringBuffer.append(TEXT_89);
    	}
    stringBuffer.append(TEXT_90);
    
}

if (generateGetCompartment) {

    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_98);
    
}

    stringBuffer.append(TEXT_99);
    boolean createPhantoms = true;
    stringBuffer.append(TEXT_100);
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_106);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();

    stringBuffer.append(TEXT_107);
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
    stringBuffer.append(TEXT_108);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_109);
    
	}
}

    stringBuffer.append(TEXT_110);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
		GenFeature sourceMetaFeature = typeLinkModelFacet.getSourceMetaFeature();
		GenFeature targetMetaFeature = typeLinkModelFacet.getTargetMetaFeature();

    stringBuffer.append(TEXT_111);
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
    stringBuffer.append(TEXT_112);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_117);
    		if (childMetaFeature.isListType()) {
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_122);
    		} else {
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_126);
    		}
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager));
    stringBuffer.append(TEXT_130);
     if (targetMetaFeature.isListType()){ 
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_133);
     } 
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_137);
     if (sourceMetaFeature != null) {
    stringBuffer.append(TEXT_138);
    stringBuffer.append(getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager));
    stringBuffer.append(TEXT_139);
     		if (sourceMetaFeature.isListType()){ 
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_142);
     		}
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(genDiagram.getElementTypesQualifiedClassName());
    stringBuffer.append(TEXT_147);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_148);
     } else { // sourceMetaFeature == null 
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(genDiagram.getElementTypesQualifiedClassName());
    stringBuffer.append(TEXT_151);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_152);
     }
    stringBuffer.append(TEXT_153);
    
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_154);
    
		}

    stringBuffer.append(TEXT_155);
    
	}
}

    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_159);
    
for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = true;

    stringBuffer.append(TEXT_160);
    
GenLink nextLink = (GenLink) genLinks.get(linkIndex);
if (false == nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
	continue;
}
FeatureLinkModelFacet linkFMF = (FeatureLinkModelFacet) nextLink.getModelFacet();
GenFeature genFeature = linkFMF.getMetaFeature();
GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
if (phantomsOnly ? (!genFeature.isContains() || phantomNode == null) : (genFeature.isContains())) {
// Processing only features which are isPhantoms == phantomsOnly
	continue;
}

    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_163);
    	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_164);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_165);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_166);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_167);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_168);
    	} else {
    stringBuffer.append(TEXT_169);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_170);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_171);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_172);
    	}
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_173);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_174);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_175);
    	}
    stringBuffer.append(TEXT_176);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_177);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_178);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_179);
    	if (createPhantoms) {
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_182);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_184);
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_185);
    	}
    stringBuffer.append(TEXT_186);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_187);
    	}
	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_188);
    	}
    stringBuffer.append(TEXT_189);
    
}

for (int linkIndex = 0; linkIndex < genLinks.size(); linkIndex++) {
	boolean phantomsOnly = false;

    stringBuffer.append(TEXT_190);
    
GenLink nextLink = (GenLink) genLinks.get(linkIndex);
if (false == nextLink.getModelFacet() instanceof FeatureLinkModelFacet) {
	continue;
}
FeatureLinkModelFacet linkFMF = (FeatureLinkModelFacet) nextLink.getModelFacet();
GenFeature genFeature = linkFMF.getMetaFeature();
GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
if (phantomsOnly ? (!genFeature.isContains() || phantomNode == null) : (genFeature.isContains())) {
// Processing only features which are isPhantoms == phantomsOnly
	continue;
}

    stringBuffer.append(TEXT_191);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_192);
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_193);
    	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_194);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_195);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_198);
    	} else {
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_201);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_202);
    	}
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_203);
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_204);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_205);
    	}
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(TEXT_210);
    	if (phantomsOnly) {
    stringBuffer.append(TEXT_211);
    	}
	if (genFeature.isListType()) {
    stringBuffer.append(TEXT_212);
    	}
    stringBuffer.append(TEXT_213);
    }
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(TEXT_223);
    
// an inner class 

    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_225);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_226);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_227);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_229);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_230);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_231);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_232);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_235);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_236);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_237);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_238);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_239);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_240);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_241);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_242);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_243);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_244);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_245);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_246);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_247);
    }
    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
    stringBuffer.append(TEXT_249);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
    stringBuffer.append(TEXT_250);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_251);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_252);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_253);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_254);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_255);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_256);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_257);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_258);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_259);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_260);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
    stringBuffer.append(TEXT_261);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_263);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_264);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_265);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
    stringBuffer.append(TEXT_266);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_267);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
    stringBuffer.append(TEXT_268);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_269);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_270);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_271);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
    stringBuffer.append(TEXT_272);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
    stringBuffer.append(TEXT_273);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_277);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_278);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
    stringBuffer.append(TEXT_280);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
    stringBuffer.append(TEXT_281);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_282);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider"));
    stringBuffer.append(TEXT_283);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_284);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_285);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.SelectionChangedEvent"));
    stringBuffer.append(TEXT_286);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_287);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_288);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_289);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
    stringBuffer.append(TEXT_290);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
    stringBuffer.append(TEXT_291);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
    stringBuffer.append(TEXT_292);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
    stringBuffer.append(TEXT_293);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation"));
    stringBuffer.append(TEXT_294);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_295);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_296);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_297);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}@


1.37
log
@[174946] - CanonicalEditPolicy generated for diagram should keep ElementType inside SemanticAdapter for TypeLinks on creation
@
text
@@


1.36
log
@[172032] - Do not generate ??CanonicalEditPolicy for pure-design elements
@
text
@d165 40
a204 40
  protected final String TEXT_146 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_147 = NL + "\t\t\t\t";
  protected final String TEXT_148 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_149 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_150 = NL + "\t\t}";
  protected final String TEXT_151 = NL + "\t}" + NL + "}";
  protected final String TEXT_152 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_153 = " container, ";
  protected final String TEXT_154 = " containerMetaclass, ";
  protected final String TEXT_155 = " diagram) {";
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = "\tif (";
  protected final String TEXT_158 = ".eINSTANCE.get";
  protected final String TEXT_159 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_160 = NL + "\t\tfor (";
  protected final String TEXT_161 = " destinations = ";
  protected final String TEXT_162 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_163 = " nextDestination = (";
  protected final String TEXT_164 = ") destinations.next();";
  protected final String TEXT_165 = NL + "\t\t";
  protected final String TEXT_166 = " nextDestination = (";
  protected final String TEXT_167 = ") ";
  protected final String TEXT_168 = ";";
  protected final String TEXT_169 = NL + "\t\tif (";
  protected final String TEXT_170 = ".VISUAL_ID == ";
  protected final String TEXT_171 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_172 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_173 = ".";
  protected final String TEXT_174 = ", ";
  protected final String TEXT_175 = ".VISUAL_ID));";
  protected final String TEXT_176 = NL + "\t\t";
  protected final String TEXT_177 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_178 = ".getType(";
  protected final String TEXT_179 = ".VISUAL_ID), ";
  protected final String TEXT_180 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_181 = "Children(nextNode, nextDestination);";
  protected final String TEXT_182 = NL;
  protected final String TEXT_183 = NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t}";
d206 42
a247 42
  protected final String TEXT_187 = "\tif (";
  protected final String TEXT_188 = ".eINSTANCE.get";
  protected final String TEXT_189 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_190 = NL + "\t\tfor (";
  protected final String TEXT_191 = " destinations = ";
  protected final String TEXT_192 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_193 = " nextDestination = (";
  protected final String TEXT_194 = ") destinations.next();";
  protected final String TEXT_195 = NL + "\t\t";
  protected final String TEXT_196 = " nextDestination = (";
  protected final String TEXT_197 = ") ";
  protected final String TEXT_198 = ";";
  protected final String TEXT_199 = NL + "\t\tif (";
  protected final String TEXT_200 = ".VISUAL_ID == ";
  protected final String TEXT_201 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_202 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_203 = ".";
  protected final String TEXT_204 = ", ";
  protected final String TEXT_205 = ".VISUAL_ID));";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL + "\t\t}";
  protected final String TEXT_208 = NL + "\t\t}";
  protected final String TEXT_209 = NL + "\t}";
  protected final String TEXT_210 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_211 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_212 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_213 = " edge = (";
  protected final String TEXT_214 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_215 = ".APPEND, ";
  protected final String TEXT_216 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_217 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_218 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_221 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_222 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_223 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_224 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_225 = " source, ";
  protected final String TEXT_226 = " destination, ";
  protected final String TEXT_227 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_228 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
d250 25
a274 25
  protected final String TEXT_231 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_232 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_233 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_234 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_235 = " source, ";
  protected final String TEXT_236 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_237 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_238 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_239 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_240 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_241 = "\t" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_242 = " implements ";
  protected final String TEXT_243 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_244 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_245 = " topLevel = new ";
  protected final String TEXT_246 = "(parent, ";
  protected final String TEXT_247 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_248 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_249 = "(";
  protected final String TEXT_250 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_251 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_252 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_253 = " panel = new ";
  protected final String TEXT_254 = "(parent, ";
  protected final String TEXT_255 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
d276 6
a281 6
  protected final String TEXT_257 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_258 = " layout = new ";
  protected final String TEXT_259 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_260 = " label = new ";
  protected final String TEXT_261 = "(panel, ";
  protected final String TEXT_262 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
d283 34
a316 27
  protected final String TEXT_264 = ".HORIZONTAL_ALIGN_BEGINNING));" + NL + "\t\t" + NL + "\t\t\t";
  protected final String TEXT_265 = " treeViewer = new ";
  protected final String TEXT_266 = "(panel, ";
  protected final String TEXT_267 = ".SINGLE | ";
  protected final String TEXT_268 = ".H_SCROLL | ";
  protected final String TEXT_269 = ".V_SCROLL | ";
  protected final String TEXT_270 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_271 = " layoutData = new ";
  protected final String TEXT_272 = "(";
  protected final String TEXT_273 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\ttreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\t\ttreeViewer.setContentProvider(new ";
  protected final String TEXT_274 = "(";
  protected final String TEXT_275 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setLabelProvider(new ";
  protected final String TEXT_276 = "(";
  protected final String TEXT_277 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setInput(myDiagramRoot.eResource());" + NL + "\t\t\ttreeViewer.setSelection(new ";
  protected final String TEXT_278 = "(myDiagramRoot));" + NL + "\t\t\ttreeViewer.addSelectionChangedListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_279 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_280 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_281 = " selection = (";
  protected final String TEXT_282 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_283 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_284 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_285 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_286 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (EObject) selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_287 = "(new ";
  protected final String TEXT_288 = "(myDiagramRoot), ";
  protected final String TEXT_289 = ".MODEL_ID, ";
  protected final String TEXT_290 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
d843 4
d848 1
a848 1
    stringBuffer.append(TEXT_147);
d850 5
a854 1
    stringBuffer.append(TEXT_148);
d856 1
a856 1
    stringBuffer.append(TEXT_149);
d860 1
a860 1
    stringBuffer.append(TEXT_150);
d864 1
a864 1
    stringBuffer.append(TEXT_151);
d869 1
a869 1
    stringBuffer.append(TEXT_152);
d871 1
a871 1
    stringBuffer.append(TEXT_153);
d873 1
a873 1
    stringBuffer.append(TEXT_154);
d875 1
a875 1
    stringBuffer.append(TEXT_155);
d880 1
a880 1
    stringBuffer.append(TEXT_156);
d894 1
a894 1
    stringBuffer.append(TEXT_157);
d896 1
a896 1
    stringBuffer.append(TEXT_158);
d898 1
a898 1
    stringBuffer.append(TEXT_159);
d900 1
a900 1
    stringBuffer.append(TEXT_160);
d902 1
a902 1
    stringBuffer.append(TEXT_161);
d904 1
a904 1
    stringBuffer.append(TEXT_162);
d906 1
a906 1
    stringBuffer.append(TEXT_163);
d908 1
a908 1
    stringBuffer.append(TEXT_164);
d910 1
a910 1
    stringBuffer.append(TEXT_165);
d912 1
a912 1
    stringBuffer.append(TEXT_166);
d914 1
a914 1
    stringBuffer.append(TEXT_167);
d916 1
a916 1
    stringBuffer.append(TEXT_168);
d919 1
a919 1
    stringBuffer.append(TEXT_169);
d921 1
a921 1
    stringBuffer.append(TEXT_170);
d923 1
a923 1
    stringBuffer.append(TEXT_171);
d925 1
a925 1
    stringBuffer.append(TEXT_172);
d927 1
a927 1
    stringBuffer.append(TEXT_173);
d929 1
a929 1
    stringBuffer.append(TEXT_174);
d931 1
a931 1
    stringBuffer.append(TEXT_175);
d933 1
a933 1
    stringBuffer.append(TEXT_176);
d935 1
a935 1
    stringBuffer.append(TEXT_177);
d937 1
a937 1
    stringBuffer.append(TEXT_178);
d939 1
a939 1
    stringBuffer.append(TEXT_179);
d941 1
a941 1
    stringBuffer.append(TEXT_180);
d943 1
a943 1
    stringBuffer.append(TEXT_181);
d945 1
a945 1
    stringBuffer.append(TEXT_182);
d947 1
a947 1
    stringBuffer.append(TEXT_183);
d950 1
a950 1
    stringBuffer.append(TEXT_184);
d952 1
a952 1
    stringBuffer.append(TEXT_185);
d959 1
a959 1
    stringBuffer.append(TEXT_186);
d973 1
a973 1
    stringBuffer.append(TEXT_187);
d975 1
a975 1
    stringBuffer.append(TEXT_188);
d977 1
a977 1
    stringBuffer.append(TEXT_189);
d979 1
a979 1
    stringBuffer.append(TEXT_190);
d981 1
a981 1
    stringBuffer.append(TEXT_191);
d983 1
a983 1
    stringBuffer.append(TEXT_192);
d985 1
a985 1
    stringBuffer.append(TEXT_193);
d987 1
a987 1
    stringBuffer.append(TEXT_194);
d989 1
a989 1
    stringBuffer.append(TEXT_195);
d991 1
a991 1
    stringBuffer.append(TEXT_196);
d993 1
a993 1
    stringBuffer.append(TEXT_197);
d995 1
a995 1
    stringBuffer.append(TEXT_198);
d998 1
a998 1
    stringBuffer.append(TEXT_199);
d1000 1
a1000 1
    stringBuffer.append(TEXT_200);
d1002 1
a1002 1
    stringBuffer.append(TEXT_201);
d1004 1
a1004 1
    stringBuffer.append(TEXT_202);
d1006 1
a1006 1
    stringBuffer.append(TEXT_203);
d1008 1
a1008 1
    stringBuffer.append(TEXT_204);
d1010 2
a1011 2
    stringBuffer.append(TEXT_205);
    stringBuffer.append(TEXT_206);
d1013 1
a1013 1
    stringBuffer.append(TEXT_207);
d1016 1
a1016 1
    stringBuffer.append(TEXT_208);
d1018 1
a1018 1
    stringBuffer.append(TEXT_209);
d1020 1
a1020 1
    stringBuffer.append(TEXT_210);
d1022 1
a1022 1
    stringBuffer.append(TEXT_211);
d1024 1
a1024 1
    stringBuffer.append(TEXT_212);
d1026 1
a1026 1
    stringBuffer.append(TEXT_213);
d1028 1
a1028 1
    stringBuffer.append(TEXT_214);
d1030 1
a1030 1
    stringBuffer.append(TEXT_215);
d1032 1
a1032 1
    stringBuffer.append(TEXT_216);
d1034 1
a1034 1
    stringBuffer.append(TEXT_217);
d1036 2
a1037 2
    stringBuffer.append(TEXT_218);
    stringBuffer.append(TEXT_219);
a1040 8
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_221);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_222);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_223);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1048 1
a1048 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1054 1
a1054 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1058 1
a1058 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1060 2
a1062 2
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1068 1
a1068 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1070 1
a1070 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1074 1
a1074 1
    }
d1076 1
a1076 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d1078 1
a1078 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
d1080 1
a1080 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1082 1
a1082 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1084 1
a1084 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1086 1
a1086 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1088 1
a1088 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1090 1
a1090 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1092 1
a1092 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1094 1
a1094 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1100 1
a1100 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1102 1
a1102 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1108 1
a1108 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1110 1
a1110 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1112 1
a1112 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1114 1
a1114 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1122 1
a1122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1124 1
a1124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1126 1
a1126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1128 1
a1128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1132 1
a1132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1136 12
d1149 3
a1151 1
    stringBuffer.append(TEXT_272);
d1153 1
a1153 1
    stringBuffer.append(TEXT_273);
d1155 1
a1155 1
    stringBuffer.append(TEXT_274);
d1157 1
a1157 1
    stringBuffer.append(TEXT_275);
d1159 1
a1159 1
    stringBuffer.append(TEXT_276);
d1161 1
a1161 1
    stringBuffer.append(TEXT_277);
d1163 1
a1163 1
    stringBuffer.append(TEXT_278);
d1165 1
a1165 1
    stringBuffer.append(TEXT_279);
d1167 1
a1167 1
    stringBuffer.append(TEXT_280);
d1169 1
a1169 1
    stringBuffer.append(TEXT_281);
d1171 1
a1171 1
    stringBuffer.append(TEXT_282);
d1173 1
a1173 1
    stringBuffer.append(TEXT_283);
d1175 1
a1175 1
    stringBuffer.append(TEXT_284);
d1177 1
a1177 1
    stringBuffer.append(TEXT_285);
d1179 1
a1179 1
    stringBuffer.append(TEXT_286);
d1181 1
a1181 1
    stringBuffer.append(TEXT_287);
d1183 1
a1183 1
    stringBuffer.append(TEXT_288);
d1185 1
a1185 1
    stringBuffer.append(TEXT_289);
d1187 1
a1187 1
    stringBuffer.append(TEXT_290);
@


1.35
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d597 1
a597 1
	if (typeModelFacet == null || typeModelFacet.isPhantomElement()) {
@


1.34
log
@remove deps from core.resources
@
text
@d319 7
a325 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.33
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d42 1
a42 1
  protected final String TEXT_23 = ".openDiagramEditor(myWorkbenchPage, diagramFile);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
@


1.32
log
@#161380 simplify feature model facets
@
text
@d34 1
a34 1
  protected final String TEXT_15 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "" + NL + "\t\tList affectedFiles = new LinkedList();" + NL + "\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tint diagramVID = ";
@


1.31
log
@moved code-only parts from templates to model impl classes
@
text
@d862 1
a862 1
if (false == nextLink.getModelFacet() instanceof FeatureModelFacet) {
d865 1
a865 1
FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
d941 1
a941 1
if (false == nextLink.getModelFacet() instanceof FeatureModelFacet) {
d944 1
a944 1
FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
@


1.30
log
@#114200 refactor 'open diagram editor' code to support RCP
@
text
@d47 55
a101 55
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_30 = " myLinkDescriptors = new ";
  protected final String TEXT_31 = "();" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_32 = " myEObject2NodeMap = new ";
  protected final String TEXT_33 = "();" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_34 = " diagram, ";
  protected final String TEXT_35 = " diagramModelObject) {" + NL + "\tcreate";
  protected final String TEXT_36 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_39 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_40 = " nextResourceObject = (";
  protected final String TEXT_41 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_42 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_43 = NL + "\tcase ";
  protected final String TEXT_44 = ".VISUAL_ID: {" + NL + "\t\t";
  protected final String TEXT_45 = " nextNode = ViewService.createNode(diagram, nextResourceObject, ";
  protected final String TEXT_46 = ".getType(";
  protected final String TEXT_47 = ".VISUAL_ID), ";
  protected final String TEXT_48 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_49 = "Children(nextNode, nextResourceObject);";
  protected final String TEXT_50 = NL;
  protected final String TEXT_51 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_52 = "\t}" + NL + "}";
  protected final String TEXT_53 = "\t\t" + NL + "\tcreateLinks(diagram);" + NL + "}";
  protected final String TEXT_54 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_55 = "Children(";
  protected final String TEXT_56 = " viewObject, ";
  protected final String TEXT_57 = " modelObject) {";
  protected final String TEXT_58 = NL;
  protected final String TEXT_59 = "\t";
  protected final String TEXT_60 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_61 = "\tfor (";
  protected final String TEXT_62 = " values = ";
  protected final String TEXT_63 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_64 = ") values.next();";
  protected final String TEXT_65 = NL + "\tnextValue = ";
  protected final String TEXT_66 = ";";
  protected final String TEXT_67 = NL + "\tnodeVID = ";
  protected final String TEXT_68 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_69 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_70 = NL + "\tcase ";
  protected final String TEXT_71 = ".VISUAL_ID: {";
  protected final String TEXT_72 = NL + "\tif (";
  protected final String TEXT_73 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_74 = NL + "\t\t";
  protected final String TEXT_75 = " nextNode = ViewService.createNode(viewObject, nextValue, ";
  protected final String TEXT_76 = ".getType(";
  protected final String TEXT_77 = ".VISUAL_ID), ";
  protected final String TEXT_78 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_79 = "Children(nextNode, nextValue);";
  protected final String TEXT_80 = NL;
  protected final String TEXT_81 = "\t\tbreak;";
  protected final String TEXT_82 = "\t}";
d103 16
a118 16
  protected final String TEXT_84 = NL + "\t}";
  protected final String TEXT_85 = NL + "\t";
  protected final String TEXT_86 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_87 = ".getType(";
  protected final String TEXT_88 = ".VISUAL_ID));" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_89 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_90 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_91 = NL + "}";
  protected final String TEXT_92 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_93 = " getCompartment(";
  protected final String TEXT_94 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_95 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_96 = " nextView = (";
  protected final String TEXT_97 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_98 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_99 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
d120 83
a202 83
  protected final String TEXT_101 = NL;
  protected final String TEXT_102 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_103 = " container, ";
  protected final String TEXT_104 = " diagram) {" + NL + "\t";
  protected final String TEXT_105 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_106 = " container, ";
  protected final String TEXT_107 = " containerMetaclass) {\t";
  protected final String TEXT_108 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_109 = "_";
  protected final String TEXT_110 = "(container, containerMetaclass);";
  protected final String TEXT_111 = NL + "}" + NL;
  protected final String TEXT_112 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_113 = "_";
  protected final String TEXT_114 = "(";
  protected final String TEXT_115 = " container, ";
  protected final String TEXT_116 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_117 = ".eINSTANCE.get";
  protected final String TEXT_118 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_119 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_120 = " values = ";
  protected final String TEXT_121 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_122 = " nextValue = ((";
  protected final String TEXT_123 = ") values.next());";
  protected final String TEXT_124 = NL + "\t\t";
  protected final String TEXT_125 = " nextValue = (";
  protected final String TEXT_126 = ") ";
  protected final String TEXT_127 = ";";
  protected final String TEXT_128 = NL + "\t\tint linkVID = ";
  protected final String TEXT_129 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_130 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_131 = ";";
  protected final String TEXT_132 = NL + "\t\t\t";
  protected final String TEXT_133 = " targets = (";
  protected final String TEXT_134 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_135 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_136 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_137 = " dst = (";
  protected final String TEXT_138 = ") structuralFeatureResult;";
  protected final String TEXT_139 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_140 = ";";
  protected final String TEXT_141 = NL + "\t\t\t\t";
  protected final String TEXT_142 = " sources = (";
  protected final String TEXT_143 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_144 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_145 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_146 = " src = (";
  protected final String TEXT_147 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_148 = NL + "\t\t\t\t";
  protected final String TEXT_149 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_150 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_151 = NL + "\t\t}";
  protected final String TEXT_152 = NL + "\t}" + NL + "}";
  protected final String TEXT_153 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_154 = " container, ";
  protected final String TEXT_155 = " containerMetaclass, ";
  protected final String TEXT_156 = " diagram) {";
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = "\tif (";
  protected final String TEXT_159 = ".eINSTANCE.get";
  protected final String TEXT_160 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_161 = NL + "\t\tfor (";
  protected final String TEXT_162 = " destinations = ";
  protected final String TEXT_163 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_164 = " nextDestination = (";
  protected final String TEXT_165 = ") destinations.next();";
  protected final String TEXT_166 = NL + "\t\t";
  protected final String TEXT_167 = " nextDestination = (";
  protected final String TEXT_168 = ") ";
  protected final String TEXT_169 = ";";
  protected final String TEXT_170 = NL + "\t\tif (";
  protected final String TEXT_171 = ".VISUAL_ID == ";
  protected final String TEXT_172 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_173 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_174 = ".";
  protected final String TEXT_175 = ", ";
  protected final String TEXT_176 = ".VISUAL_ID));";
  protected final String TEXT_177 = NL + "\t\t";
  protected final String TEXT_178 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_179 = ".getType(";
  protected final String TEXT_180 = ".VISUAL_ID), ";
  protected final String TEXT_181 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_182 = "Children(nextNode, nextDestination);";
  protected final String TEXT_183 = NL;
d204 23
a226 23
  protected final String TEXT_185 = NL + "\t\t}";
  protected final String TEXT_186 = NL + "\t}";
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = "\tif (";
  protected final String TEXT_189 = ".eINSTANCE.get";
  protected final String TEXT_190 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_191 = NL + "\t\tfor (";
  protected final String TEXT_192 = " destinations = ";
  protected final String TEXT_193 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_194 = " nextDestination = (";
  protected final String TEXT_195 = ") destinations.next();";
  protected final String TEXT_196 = NL + "\t\t";
  protected final String TEXT_197 = " nextDestination = (";
  protected final String TEXT_198 = ") ";
  protected final String TEXT_199 = ";";
  protected final String TEXT_200 = NL + "\t\tif (";
  protected final String TEXT_201 = ".VISUAL_ID == ";
  protected final String TEXT_202 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_203 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_204 = ".";
  protected final String TEXT_205 = ", ";
  protected final String TEXT_206 = ".VISUAL_ID));";
  protected final String TEXT_207 = NL;
d228 82
a309 83
  protected final String TEXT_209 = NL + "\t\t}";
  protected final String TEXT_210 = NL + "\t}";
  protected final String TEXT_211 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_212 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_213 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_214 = " edge = (";
  protected final String TEXT_215 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_216 = ".APPEND, ";
  protected final String TEXT_217 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_218 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_219 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_220 = NL;
  protected final String TEXT_221 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_222 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_223 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_224 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_225 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_226 = " source, ";
  protected final String TEXT_227 = " destination, ";
  protected final String TEXT_228 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_229 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_230 = " source, ";
  protected final String TEXT_231 = " destination, ";
  protected final String TEXT_232 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_233 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_234 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_235 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_236 = " source, ";
  protected final String TEXT_237 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_238 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_239 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_240 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_241 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_242 = "\t" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_243 = " implements ";
  protected final String TEXT_244 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_245 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_246 = " topLevel = new ";
  protected final String TEXT_247 = "(parent, ";
  protected final String TEXT_248 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_249 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_250 = "(";
  protected final String TEXT_251 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_252 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_253 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_254 = " panel = new ";
  protected final String TEXT_255 = "(parent, ";
  protected final String TEXT_256 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_257 = "(";
  protected final String TEXT_258 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_259 = " layout = new ";
  protected final String TEXT_260 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_261 = " label = new ";
  protected final String TEXT_262 = "(panel, ";
  protected final String TEXT_263 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_264 = "(";
  protected final String TEXT_265 = ".HORIZONTAL_ALIGN_BEGINNING));" + NL + "\t\t" + NL + "\t\t\t";
  protected final String TEXT_266 = " treeViewer = new ";
  protected final String TEXT_267 = "(panel, ";
  protected final String TEXT_268 = ".SINGLE | ";
  protected final String TEXT_269 = ".H_SCROLL | ";
  protected final String TEXT_270 = ".V_SCROLL | ";
  protected final String TEXT_271 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_272 = " layoutData = new ";
  protected final String TEXT_273 = "(";
  protected final String TEXT_274 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\ttreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\t\ttreeViewer.setContentProvider(new ";
  protected final String TEXT_275 = "(";
  protected final String TEXT_276 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setLabelProvider(new ";
  protected final String TEXT_277 = "(";
  protected final String TEXT_278 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setInput(myDiagramRoot.eResource());" + NL + "\t\t\ttreeViewer.setSelection(new ";
  protected final String TEXT_279 = "(myDiagramRoot));" + NL + "\t\t\ttreeViewer.addSelectionChangedListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_280 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_281 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_282 = " selection = (";
  protected final String TEXT_283 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_284 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_285 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_286 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_287 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (EObject) selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_288 = "(new ";
  protected final String TEXT_289 = "(myDiagramRoot), ";
  protected final String TEXT_290 = ".MODEL_ID, ";
  protected final String TEXT_291 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
d511 1
d513 1
a513 12
    
// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (nextModelFacet == null || !nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}

d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d521 1
a521 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d523 1
a523 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d525 1
a525 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a526 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
a527 1
    stringBuffer.append(TEXT_37);
d532 2
d535 1
a535 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d539 1
a539 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a540 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_42);
d546 2
d549 1
a549 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d551 1
a551 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d553 1
a553 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d555 1
a555 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d557 1
a557 1
    stringBuffer.append(pluginActivatorClass);
a558 1
    stringBuffer.append(phantomNode.getUniqueIdentifier());
a560 1
    stringBuffer.append(TEXT_51);
d564 1
a564 1
    stringBuffer.append(TEXT_52);
d569 1
a569 1
    stringBuffer.append(TEXT_53);
d576 2
d579 1
a579 1
    stringBuffer.append(nextContainer.getUniqueIdentifier());
d581 1
a581 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a582 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_57);
d585 1
a585 1
    stringBuffer.append(TEXT_58);
d605 2
a607 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_60);
d617 2
d620 1
a620 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d622 1
a622 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d624 1
a624 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d626 1
a626 1
    	} else {
d628 1
a628 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d630 1
a630 1
    	}
a631 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_68);
d634 1
a634 1
    stringBuffer.append(TEXT_69);
d640 2
d643 2
a645 2
    stringBuffer.append(TEXT_71);
    		} else {
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
d649 1
a649 1
    		}
d651 1
a651 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d653 1
a653 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d655 1
a655 1
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
d657 1
a657 1
    stringBuffer.append(pluginActivatorClass);
a658 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d660 1
d662 1
a662 1
    		if (generateSwitch) {
a663 2
    		}
    stringBuffer.append(TEXT_82);
d666 1
a666 1
    stringBuffer.append(TEXT_83);
d669 1
a669 1
    stringBuffer.append(TEXT_84);
d680 2
d683 1
a683 1
    stringBuffer.append(i == 0 ? importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node") : "");
d685 1
a685 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d687 1
a687 1
    stringBuffer.append(importManager.getImportedName(nextCompartment.getEditPartQualifiedClassName()));
a688 2
    stringBuffer.append(nextCompartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_89);
d694 2
a696 2
    	}
    stringBuffer.append(TEXT_91);
d702 2
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d707 2
a709 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d713 1
a713 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a716 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_99);
d720 2
a722 1
    boolean createPhantoms = true;
d724 1
d726 1
a726 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d728 1
a728 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d730 2
a732 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a733 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_107);
d740 2
d743 1
a743 1
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
a744 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_110);
d749 1
a749 1
    stringBuffer.append(TEXT_111);
d759 2
d762 1
a762 1
    stringBuffer.append(typeLinkModelFacet.getMetaClass().getInterfaceName());
d764 1
a764 1
    stringBuffer.append(nextLink.getVisualID());
d766 1
a766 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d768 1
a768 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d770 1
a770 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d772 1
a772 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d774 1
a774 1
    		if (childMetaFeature.isListType()) {
d776 1
a776 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d778 1
a778 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d782 2
a784 2
    stringBuffer.append(TEXT_123);
    		} else {
d788 1
a788 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d790 1
a790 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d792 1
a792 1
    		}
d794 1
a794 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d796 1
a796 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d798 1
a798 1
    stringBuffer.append(getFeatureValueGetter("nextValue", targetMetaFeature, true, importManager));
d800 1
a800 1
     if (targetMetaFeature.isListType()){ 
d804 1
a804 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d806 1
a806 1
     } 
d812 1
a812 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d814 1
a814 1
     if (sourceMetaFeature != null) {
d816 1
a816 1
    stringBuffer.append(getFeatureValueGetter("nextValue", sourceMetaFeature, true, importManager));
d818 1
a818 1
     		if (sourceMetaFeature.isListType()){ 
d822 1
a822 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d824 1
a824 1
     		}
d830 2
a832 2
    stringBuffer.append(TEXT_147);
     } else { // sourceMetaFeature == null 
d834 1
a834 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a835 2
     }
    stringBuffer.append(TEXT_150);
d839 1
a839 1
    stringBuffer.append(TEXT_151);
d843 1
a843 1
    stringBuffer.append(TEXT_152);
d848 2
d851 1
a851 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d853 1
a853 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
a854 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_156);
d859 1
a859 1
    stringBuffer.append(TEXT_157);
d873 2
d876 1
a876 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d878 1
a878 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d880 1
a880 1
    	if (genFeature.isListType()) {
d882 1
a882 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d884 1
a884 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d888 2
a890 2
    stringBuffer.append(TEXT_165);
    	} else {
d894 1
a894 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a895 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_169);
d898 2
d901 1
a901 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d903 1
a903 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d905 1
a905 1
    	}
d907 1
a907 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d909 1
a909 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d911 1
a911 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d913 1
a913 1
    	if (createPhantoms) {
d915 1
a915 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d917 1
a917 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d919 1
a919 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d921 1
a921 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d923 1
a923 1
    stringBuffer.append(phantomNode.getUniqueIdentifier());
d925 2
d928 1
a928 2
    stringBuffer.append(TEXT_183);
    	if (phantomsOnly) {
a930 1
	if (genFeature.isListType()) {
a931 2
    	}
    stringBuffer.append(TEXT_186);
d938 1
a938 1
    stringBuffer.append(TEXT_187);
d952 2
d955 1
a955 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d957 1
a957 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d959 1
a959 1
    	if (genFeature.isListType()) {
d961 1
a961 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d963 1
a963 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d967 2
a969 2
    stringBuffer.append(TEXT_195);
    	} else {
d973 1
a973 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a974 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_199);
d977 2
d980 1
a980 1
    stringBuffer.append(importManager.getImportedName(phantomNode.getEditPartQualifiedClassName()));
d982 1
a982 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d984 1
a984 1
    	}
d986 1
a986 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d988 1
a988 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
a989 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d991 1
d993 2
a994 1
    	if (phantomsOnly) {
a996 1
	if (genFeature.isListType()) {
d998 1
a998 1
    	}
d1000 1
a1000 1
    }
d1002 1
a1002 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d1004 1
a1004 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d1008 1
a1008 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1010 1
a1010 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d1012 1
a1012 1
    stringBuffer.append(pluginActivatorClass);
a1015 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
a1016 1
    stringBuffer.append(TEXT_220);
d1020 2
d1027 2
a1029 2
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1035 2
a1037 2
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1041 1
a1041 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1045 2
a1047 2
    stringBuffer.append(TEXT_233);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1049 1
a1049 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1059 1
a1059 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1061 1
a1061 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1063 1
a1063 1
    }
d1065 1
a1065 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d1067 1
a1067 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
d1073 1
a1073 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1075 1
a1075 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1077 1
a1077 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1083 1
a1083 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1089 1
a1089 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1091 1
a1091 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1095 1
a1095 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1099 1
a1099 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1103 1
a1103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1105 1
a1105 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1109 1
a1109 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1113 1
a1113 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1121 1
a1121 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1127 1
a1127 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1129 1
a1129 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryContentProvider"));
d1131 2
a1133 2
    stringBuffer.append(TEXT_276);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider"));
d1135 1
a1135 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d1137 1
a1137 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
d1139 1
a1139 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.SelectionChangedEvent"));
d1145 1
a1145 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d1149 1
a1149 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d1153 1
a1153 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d1155 1
a1155 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation"));
d1157 1
a1157 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1159 1
a1159 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a1160 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_291);
@


1.29
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d41 5
a45 5
  protected final String TEXT_22 = NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\tIDE.openEditor(myWorkbenchPage, diagramFile);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_23 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_24 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (PartInitException ex) {" + NL + "\t\t\t";
  protected final String TEXT_25 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t}\t\t\t" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t";
  protected final String TEXT_26 = NL;
d47 55
a101 55
  protected final String TEXT_28 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_29 = " myLinkDescriptors = new ";
  protected final String TEXT_30 = "();" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_31 = " myEObject2NodeMap = new ";
  protected final String TEXT_32 = "();" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_33 = " diagram, ";
  protected final String TEXT_34 = " diagramModelObject) {" + NL + "\tcreate";
  protected final String TEXT_35 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_38 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_39 = " nextResourceObject = (";
  protected final String TEXT_40 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_41 = ".getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_42 = NL + "\tcase ";
  protected final String TEXT_43 = ".VISUAL_ID: {" + NL + "\t\t";
  protected final String TEXT_44 = " nextNode = ViewService.createNode(diagram, nextResourceObject, ";
  protected final String TEXT_45 = ".getType(";
  protected final String TEXT_46 = ".VISUAL_ID), ";
  protected final String TEXT_47 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_48 = "Children(nextNode, nextResourceObject);";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_51 = "\t}" + NL + "}";
  protected final String TEXT_52 = "\t\t" + NL + "\tcreateLinks(diagram);" + NL + "}";
  protected final String TEXT_53 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_54 = "Children(";
  protected final String TEXT_55 = " viewObject, ";
  protected final String TEXT_56 = " modelObject) {";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = "\t";
  protected final String TEXT_59 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_60 = "\tfor (";
  protected final String TEXT_61 = " values = ";
  protected final String TEXT_62 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_63 = ") values.next();";
  protected final String TEXT_64 = NL + "\tnextValue = ";
  protected final String TEXT_65 = ";";
  protected final String TEXT_66 = NL + "\tnodeVID = ";
  protected final String TEXT_67 = ".getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_68 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_69 = NL + "\tcase ";
  protected final String TEXT_70 = ".VISUAL_ID: {";
  protected final String TEXT_71 = NL + "\tif (";
  protected final String TEXT_72 = ".VISUAL_ID == nodeVID) {";
  protected final String TEXT_73 = NL + "\t\t";
  protected final String TEXT_74 = " nextNode = ViewService.createNode(viewObject, nextValue, ";
  protected final String TEXT_75 = ".getType(";
  protected final String TEXT_76 = ".VISUAL_ID), ";
  protected final String TEXT_77 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_78 = "Children(nextNode, nextValue);";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = "\t\tbreak;";
  protected final String TEXT_81 = "\t}";
  protected final String TEXT_82 = NL + "\t}";
d103 16
a118 16
  protected final String TEXT_84 = NL + "\t";
  protected final String TEXT_85 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_86 = ".getType(";
  protected final String TEXT_87 = ".VISUAL_ID));" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_88 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_89 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_90 = NL + "}";
  protected final String TEXT_91 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_92 = " getCompartment(";
  protected final String TEXT_93 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_94 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_95 = " nextView = (";
  protected final String TEXT_96 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_97 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_98 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_99 = NL;
d120 83
a202 83
  protected final String TEXT_101 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_102 = " container, ";
  protected final String TEXT_103 = " diagram) {" + NL + "\t";
  protected final String TEXT_104 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_105 = " container, ";
  protected final String TEXT_106 = " containerMetaclass) {\t";
  protected final String TEXT_107 = NL + "\tstoreTypeModelFacetLinks_";
  protected final String TEXT_108 = "_";
  protected final String TEXT_109 = "(container, containerMetaclass);";
  protected final String TEXT_110 = NL + "}" + NL;
  protected final String TEXT_111 = "\t\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks_";
  protected final String TEXT_112 = "_";
  protected final String TEXT_113 = "(";
  protected final String TEXT_114 = " container, ";
  protected final String TEXT_115 = " containerMetaclass) {" + NL + "\tif (";
  protected final String TEXT_116 = ".eINSTANCE.get";
  protected final String TEXT_117 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_118 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_119 = " values = ";
  protected final String TEXT_120 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_121 = " nextValue = ((";
  protected final String TEXT_122 = ") values.next());";
  protected final String TEXT_123 = NL + "\t\t";
  protected final String TEXT_124 = " nextValue = (";
  protected final String TEXT_125 = ") ";
  protected final String TEXT_126 = ";";
  protected final String TEXT_127 = NL + "\t\tint linkVID = ";
  protected final String TEXT_128 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_129 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_130 = ";";
  protected final String TEXT_131 = NL + "\t\t\t";
  protected final String TEXT_132 = " targets = (";
  protected final String TEXT_133 = ") structuralFeatureResult;" + NL + "\t\t\tstructuralFeatureResult = targets.size() == 1 ? targets.get(0) : null;";
  protected final String TEXT_134 = "\t\t\t\t" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_135 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_136 = " dst = (";
  protected final String TEXT_137 = ") structuralFeatureResult;";
  protected final String TEXT_138 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_139 = ";";
  protected final String TEXT_140 = NL + "\t\t\t\t";
  protected final String TEXT_141 = " sources = (";
  protected final String TEXT_142 = ") structuralFeatureResult;" + NL + "\t\t\t\tstructuralFeatureResult = sources.size() == 1 ? sources.get(0) : null;";
  protected final String TEXT_143 = "\t\t\t\t" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_144 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_145 = " src = (";
  protected final String TEXT_146 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_147 = NL + "\t\t\t\t";
  protected final String TEXT_148 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_149 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_150 = NL + "\t\t}";
  protected final String TEXT_151 = NL + "\t}" + NL + "}";
  protected final String TEXT_152 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_153 = " container, ";
  protected final String TEXT_154 = " containerMetaclass, ";
  protected final String TEXT_155 = " diagram) {";
  protected final String TEXT_156 = NL;
  protected final String TEXT_157 = "\tif (";
  protected final String TEXT_158 = ".eINSTANCE.get";
  protected final String TEXT_159 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_160 = NL + "\t\tfor (";
  protected final String TEXT_161 = " destinations = ";
  protected final String TEXT_162 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_163 = " nextDestination = (";
  protected final String TEXT_164 = ") destinations.next();";
  protected final String TEXT_165 = NL + "\t\t";
  protected final String TEXT_166 = " nextDestination = (";
  protected final String TEXT_167 = ") ";
  protected final String TEXT_168 = ";";
  protected final String TEXT_169 = NL + "\t\tif (";
  protected final String TEXT_170 = ".VISUAL_ID == ";
  protected final String TEXT_171 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_172 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_173 = ".";
  protected final String TEXT_174 = ", ";
  protected final String TEXT_175 = ".VISUAL_ID));";
  protected final String TEXT_176 = NL + "\t\t";
  protected final String TEXT_177 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_178 = ".getType(";
  protected final String TEXT_179 = ".VISUAL_ID), ";
  protected final String TEXT_180 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_181 = "Children(nextNode, nextDestination);";
  protected final String TEXT_182 = NL;
  protected final String TEXT_183 = NL + "\t\t}";
d204 23
a226 23
  protected final String TEXT_185 = NL + "\t}";
  protected final String TEXT_186 = NL;
  protected final String TEXT_187 = "\tif (";
  protected final String TEXT_188 = ".eINSTANCE.get";
  protected final String TEXT_189 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_190 = NL + "\t\tfor (";
  protected final String TEXT_191 = " destinations = ";
  protected final String TEXT_192 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_193 = " nextDestination = (";
  protected final String TEXT_194 = ") destinations.next();";
  protected final String TEXT_195 = NL + "\t\t";
  protected final String TEXT_196 = " nextDestination = (";
  protected final String TEXT_197 = ") ";
  protected final String TEXT_198 = ";";
  protected final String TEXT_199 = NL + "\t\tif (";
  protected final String TEXT_200 = ".VISUAL_ID == ";
  protected final String TEXT_201 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_202 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_203 = ".";
  protected final String TEXT_204 = ", ";
  protected final String TEXT_205 = ".VISUAL_ID));";
  protected final String TEXT_206 = NL;
  protected final String TEXT_207 = NL + "\t\t}";
d228 83
a310 82
  protected final String TEXT_209 = NL + "\t}";
  protected final String TEXT_210 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_211 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_212 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_213 = " edge = (";
  protected final String TEXT_214 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_215 = ".APPEND, ";
  protected final String TEXT_216 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_217 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_218 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_219 = NL;
  protected final String TEXT_220 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_221 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_222 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_223 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_224 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_225 = " source, ";
  protected final String TEXT_226 = " destination, ";
  protected final String TEXT_227 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_228 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_229 = " source, ";
  protected final String TEXT_230 = " destination, ";
  protected final String TEXT_231 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_232 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_233 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_234 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_235 = " source, ";
  protected final String TEXT_236 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_237 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_238 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_239 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_240 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_241 = "\t" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_242 = " implements ";
  protected final String TEXT_243 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_244 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_245 = " topLevel = new ";
  protected final String TEXT_246 = "(parent, ";
  protected final String TEXT_247 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_248 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_249 = "(";
  protected final String TEXT_250 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_251 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_252 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_253 = " panel = new ";
  protected final String TEXT_254 = "(parent, ";
  protected final String TEXT_255 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_256 = "(";
  protected final String TEXT_257 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_258 = " layout = new ";
  protected final String TEXT_259 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_260 = " label = new ";
  protected final String TEXT_261 = "(panel, ";
  protected final String TEXT_262 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_263 = "(";
  protected final String TEXT_264 = ".HORIZONTAL_ALIGN_BEGINNING));" + NL + "\t\t" + NL + "\t\t\t";
  protected final String TEXT_265 = " treeViewer = new ";
  protected final String TEXT_266 = "(panel, ";
  protected final String TEXT_267 = ".SINGLE | ";
  protected final String TEXT_268 = ".H_SCROLL | ";
  protected final String TEXT_269 = ".V_SCROLL | ";
  protected final String TEXT_270 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_271 = " layoutData = new ";
  protected final String TEXT_272 = "(";
  protected final String TEXT_273 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\ttreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\t\ttreeViewer.setContentProvider(new ";
  protected final String TEXT_274 = "(";
  protected final String TEXT_275 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setLabelProvider(new ";
  protected final String TEXT_276 = "(";
  protected final String TEXT_277 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setInput(myDiagramRoot.eResource());" + NL + "\t\t\ttreeViewer.setSelection(new ";
  protected final String TEXT_278 = "(myDiagramRoot));" + NL + "\t\t\ttreeViewer.addSelectionChangedListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_279 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_280 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_281 = " selection = (";
  protected final String TEXT_282 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_283 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_284 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_285 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_286 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (EObject) selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_287 = "(new ";
  protected final String TEXT_288 = "(myDiagramRoot), ";
  protected final String TEXT_289 = ".MODEL_ID, ";
  protected final String TEXT_290 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
a453 1
importManager.addImport("org.eclipse.ui.ide.IDE");
d499 1
a499 1
    stringBuffer.append(pluginActivatorClass);
d505 2
d508 1
a508 1
    stringBuffer.append(TEXT_26);
d512 1
a512 1
    stringBuffer.append(TEXT_27);
d525 1
a525 1
    stringBuffer.append(TEXT_28);
d527 1
a527 1
    stringBuffer.append(TEXT_29);
d529 1
a529 1
    stringBuffer.append(TEXT_30);
d531 1
a531 1
    stringBuffer.append(TEXT_31);
d533 1
a533 1
    stringBuffer.append(TEXT_32);
d535 1
a535 1
    stringBuffer.append(TEXT_33);
d537 1
a537 1
    stringBuffer.append(TEXT_34);
a538 1
    stringBuffer.append(TEXT_35);
d540 1
d545 1
a545 1
    stringBuffer.append(TEXT_37);
a546 2
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d550 2
d553 1
a553 1
    stringBuffer.append(TEXT_41);
d559 1
a559 1
    stringBuffer.append(TEXT_42);
d561 1
a561 1
    stringBuffer.append(TEXT_43);
d563 1
a563 1
    stringBuffer.append(TEXT_44);
d565 1
a565 1
    stringBuffer.append(TEXT_45);
d567 1
a567 1
    stringBuffer.append(TEXT_46);
d569 1
a569 1
    stringBuffer.append(TEXT_47);
a570 1
    stringBuffer.append(TEXT_48);
d573 1
d577 1
a577 1
    stringBuffer.append(TEXT_51);
d582 1
a582 1
    stringBuffer.append(TEXT_52);
d589 1
a589 1
    stringBuffer.append(TEXT_53);
d591 1
a591 1
    stringBuffer.append(TEXT_54);
d593 1
a593 1
    stringBuffer.append(TEXT_55);
d595 1
a595 1
    stringBuffer.append(TEXT_56);
d598 1
a598 1
    stringBuffer.append(TEXT_57);
d618 1
a618 1
    stringBuffer.append(TEXT_58);
d620 1
a620 1
    stringBuffer.append(TEXT_59);
d630 1
a630 1
    stringBuffer.append(TEXT_60);
d632 1
a632 1
    stringBuffer.append(TEXT_61);
d634 1
a634 1
    stringBuffer.append(TEXT_62);
d636 1
a636 1
    stringBuffer.append(TEXT_63);
d638 1
a638 1
    stringBuffer.append(TEXT_64);
d640 1
a640 1
    stringBuffer.append(TEXT_65);
d642 1
a642 1
    stringBuffer.append(TEXT_66);
d644 1
a644 1
    stringBuffer.append(TEXT_67);
d647 1
a647 1
    stringBuffer.append(TEXT_68);
d653 1
a653 1
    stringBuffer.append(TEXT_69);
d655 1
a655 1
    stringBuffer.append(TEXT_70);
d657 1
a657 1
    stringBuffer.append(TEXT_71);
d659 1
a659 1
    stringBuffer.append(TEXT_72);
d661 1
a661 1
    stringBuffer.append(TEXT_73);
d663 1
a663 1
    stringBuffer.append(TEXT_74);
d665 1
a665 1
    stringBuffer.append(TEXT_75);
d667 1
a667 1
    stringBuffer.append(TEXT_76);
d669 1
a669 1
    stringBuffer.append(TEXT_77);
a670 1
    stringBuffer.append(TEXT_78);
d672 1
d674 1
a674 1
    stringBuffer.append(TEXT_80);
d676 1
a676 1
    stringBuffer.append(TEXT_81);
d679 1
a679 1
    stringBuffer.append(TEXT_82);
d682 1
a682 1
    stringBuffer.append(TEXT_83);
d693 1
a693 1
    stringBuffer.append(TEXT_84);
d695 1
a695 1
    stringBuffer.append(TEXT_85);
d697 1
a697 1
    stringBuffer.append(TEXT_86);
d699 1
a699 1
    stringBuffer.append(TEXT_87);
d701 1
a701 1
    stringBuffer.append(TEXT_88);
d707 1
a707 1
    stringBuffer.append(TEXT_89);
d709 1
a709 1
    stringBuffer.append(TEXT_90);
d715 1
a715 1
    stringBuffer.append(TEXT_91);
d717 1
a717 1
    stringBuffer.append(TEXT_92);
d719 1
a719 1
    stringBuffer.append(TEXT_93);
a720 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d724 1
a724 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d728 2
d733 1
a733 1
    stringBuffer.append(TEXT_99);
a734 1
    stringBuffer.append(TEXT_100);
d736 1
d738 1
a738 1
    stringBuffer.append(TEXT_102);
d740 1
a740 1
    stringBuffer.append(TEXT_103);
d742 1
a742 1
    stringBuffer.append(TEXT_104);
d744 1
a744 1
    stringBuffer.append(TEXT_105);
d746 1
a746 1
    stringBuffer.append(TEXT_106);
d753 1
a753 1
    stringBuffer.append(TEXT_107);
d755 1
a755 1
    stringBuffer.append(TEXT_108);
d757 1
a757 1
    stringBuffer.append(TEXT_109);
d762 1
a762 1
    stringBuffer.append(TEXT_110);
d772 1
a772 1
    stringBuffer.append(TEXT_111);
d774 1
a774 1
    stringBuffer.append(TEXT_112);
d776 1
a776 1
    stringBuffer.append(TEXT_113);
d778 1
a778 1
    stringBuffer.append(TEXT_114);
d780 1
a780 1
    stringBuffer.append(TEXT_115);
d782 1
a782 1
    stringBuffer.append(TEXT_116);
d784 1
a784 1
    stringBuffer.append(TEXT_117);
d786 1
a786 1
    stringBuffer.append(TEXT_118);
d788 1
a788 1
    stringBuffer.append(TEXT_119);
a789 2
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d793 2
a795 2
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d799 2
d802 1
a802 1
    stringBuffer.append(TEXT_126);
d804 1
a804 1
    stringBuffer.append(TEXT_127);
d806 1
a806 1
    stringBuffer.append(TEXT_128);
d808 1
a808 1
    stringBuffer.append(TEXT_129);
d810 1
a810 1
    stringBuffer.append(TEXT_130);
a811 2
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d815 2
a817 2
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d823 2
d826 1
a826 1
    stringBuffer.append(TEXT_138);
d828 1
a828 1
    stringBuffer.append(TEXT_139);
a829 2
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d833 2
a835 2
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d841 2
d844 1
a844 1
    stringBuffer.append(TEXT_147);
d846 1
a846 1
    stringBuffer.append(TEXT_148);
d848 1
a848 1
    stringBuffer.append(TEXT_149);
d852 1
a852 1
    stringBuffer.append(TEXT_150);
d856 1
a856 1
    stringBuffer.append(TEXT_151);
d861 1
a861 1
    stringBuffer.append(TEXT_152);
d863 1
a863 1
    stringBuffer.append(TEXT_153);
d865 1
a865 1
    stringBuffer.append(TEXT_154);
d867 1
a867 1
    stringBuffer.append(TEXT_155);
d872 1
a872 1
    stringBuffer.append(TEXT_156);
d886 1
a886 1
    stringBuffer.append(TEXT_157);
d888 1
a888 1
    stringBuffer.append(TEXT_158);
d890 1
a890 1
    stringBuffer.append(TEXT_159);
d892 1
a892 1
    stringBuffer.append(TEXT_160);
d894 1
a894 1
    stringBuffer.append(TEXT_161);
a895 2
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d899 2
a901 2
    stringBuffer.append(TEXT_165);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d905 2
d908 1
a908 1
    stringBuffer.append(TEXT_168);
d911 1
a911 1
    stringBuffer.append(TEXT_169);
d913 1
a913 1
    stringBuffer.append(TEXT_170);
d915 1
a915 1
    stringBuffer.append(TEXT_171);
d917 1
a917 1
    stringBuffer.append(TEXT_172);
d919 1
a919 1
    stringBuffer.append(TEXT_173);
d921 1
a921 1
    stringBuffer.append(TEXT_174);
d923 1
a923 1
    stringBuffer.append(TEXT_175);
d925 1
a925 1
    stringBuffer.append(TEXT_176);
d927 1
a927 1
    stringBuffer.append(TEXT_177);
d929 1
a929 1
    stringBuffer.append(TEXT_178);
d931 1
a931 1
    stringBuffer.append(TEXT_179);
d933 1
a933 1
    stringBuffer.append(TEXT_180);
d935 1
a935 1
    stringBuffer.append(TEXT_181);
d937 1
a937 1
    stringBuffer.append(TEXT_182);
d939 1
a939 1
    stringBuffer.append(TEXT_183);
d942 1
a942 1
    stringBuffer.append(TEXT_184);
d944 1
a944 1
    stringBuffer.append(TEXT_185);
d951 1
a951 1
    stringBuffer.append(TEXT_186);
d965 1
a965 1
    stringBuffer.append(TEXT_187);
d967 1
a967 1
    stringBuffer.append(TEXT_188);
d969 1
a969 1
    stringBuffer.append(TEXT_189);
d971 1
a971 1
    stringBuffer.append(TEXT_190);
d973 1
a973 1
    stringBuffer.append(TEXT_191);
a974 2
    stringBuffer.append(TEXT_192);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d978 2
a980 2
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d984 2
d987 1
a987 1
    stringBuffer.append(TEXT_198);
d990 1
a990 1
    stringBuffer.append(TEXT_199);
d992 1
a992 1
    stringBuffer.append(TEXT_200);
d994 1
a994 1
    stringBuffer.append(TEXT_201);
d996 1
a996 1
    stringBuffer.append(TEXT_202);
d998 1
a998 1
    stringBuffer.append(TEXT_203);
d1000 1
a1000 1
    stringBuffer.append(TEXT_204);
a1001 1
    stringBuffer.append(TEXT_205);
d1003 1
d1005 1
a1005 1
    stringBuffer.append(TEXT_207);
d1008 1
a1008 1
    stringBuffer.append(TEXT_208);
d1010 1
a1010 1
    stringBuffer.append(TEXT_209);
d1012 1
a1012 1
    stringBuffer.append(TEXT_210);
d1014 1
a1014 1
    stringBuffer.append(TEXT_211);
a1015 2
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d1019 2
d1022 1
a1022 1
    stringBuffer.append(TEXT_215);
a1023 2
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d1027 1
d1029 1
a1032 2
    stringBuffer.append(TEXT_220);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1038 2
a1040 2
    stringBuffer.append(TEXT_224);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1046 2
a1048 2
    stringBuffer.append(TEXT_228);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1052 1
a1052 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1056 2
d1059 1
a1059 1
    stringBuffer.append(TEXT_233);
a1060 2
    stringBuffer.append(TEXT_234);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1070 2
d1073 1
a1073 1
    stringBuffer.append(TEXT_240);
d1075 1
a1075 1
    stringBuffer.append(TEXT_241);
d1077 1
a1077 1
    stringBuffer.append(TEXT_242);
a1078 2
    stringBuffer.append(TEXT_243);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1084 2
d1087 1
a1087 1
    stringBuffer.append(TEXT_247);
a1088 2
    stringBuffer.append(TEXT_248);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1094 1
a1094 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1100 2
a1102 2
    stringBuffer.append(TEXT_255);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1106 1
a1106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1110 1
a1110 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1114 2
a1116 2
    stringBuffer.append(TEXT_262);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1120 1
a1120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1124 1
a1124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1132 1
a1132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1138 2
d1141 1
a1141 1
    stringBuffer.append(TEXT_274);
d1143 1
a1143 1
    stringBuffer.append(TEXT_275);
d1145 1
a1145 1
    stringBuffer.append(TEXT_276);
d1147 1
a1147 1
    stringBuffer.append(TEXT_277);
d1149 1
a1149 1
    stringBuffer.append(TEXT_278);
a1150 2
    stringBuffer.append(TEXT_279);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d1156 1
a1156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d1160 1
a1160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d1164 2
d1167 1
a1167 1
    stringBuffer.append(TEXT_287);
d1169 1
a1169 1
    stringBuffer.append(TEXT_288);
d1171 1
a1171 1
    stringBuffer.append(TEXT_289);
d1173 1
a1173 1
    stringBuffer.append(TEXT_290);
@


1.28
log
@forgotten translated templates
@
text
@d319 1
a319 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.27
log
@#154515 "Initialize diagram" action can not process links by class in case if source/target EReferences are isMany
@
text
@d301 9
a309 5
  protected final String TEXT_282 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmyDiagramRoot = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_283 = "(new ";
  protected final String TEXT_284 = "(myDiagramRoot), ";
  protected final String TEXT_285 = ".MODEL_ID, ";
  protected final String TEXT_286 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
d1156 8
d1165 1
a1165 1
    stringBuffer.append(TEXT_283);
d1167 1
a1167 1
    stringBuffer.append(TEXT_284);
d1169 1
a1169 1
    stringBuffer.append(TEXT_285);
d1171 1
a1171 1
    stringBuffer.append(TEXT_286);
@


1.26
log
@#116861 [Tests] Create unit-tests checking code generated for the models with "instance class name" specified

- templates corrected
@
text
@d149 116
a264 116
  protected final String TEXT_130 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_131 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_132 = " dst = (";
  protected final String TEXT_133 = ") structuralFeatureResult;";
  protected final String TEXT_134 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_135 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_136 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_137 = " src = (";
  protected final String TEXT_138 = ") structuralFeatureResult;" + NL + "\t\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t\t}";
  protected final String TEXT_139 = NL + "\t\t\t\t";
  protected final String TEXT_140 = " src = container;" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_141 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_142 = NL + "\t\t}";
  protected final String TEXT_143 = NL + "\t}" + NL + "}";
  protected final String TEXT_144 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_145 = " container, ";
  protected final String TEXT_146 = " containerMetaclass, ";
  protected final String TEXT_147 = " diagram) {";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = "\tif (";
  protected final String TEXT_150 = ".eINSTANCE.get";
  protected final String TEXT_151 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_152 = NL + "\t\tfor (";
  protected final String TEXT_153 = " destinations = ";
  protected final String TEXT_154 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_155 = " nextDestination = (";
  protected final String TEXT_156 = ") destinations.next();";
  protected final String TEXT_157 = NL + "\t\t";
  protected final String TEXT_158 = " nextDestination = (";
  protected final String TEXT_159 = ") ";
  protected final String TEXT_160 = ";";
  protected final String TEXT_161 = NL + "\t\tif (";
  protected final String TEXT_162 = ".VISUAL_ID == ";
  protected final String TEXT_163 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_164 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_165 = ".";
  protected final String TEXT_166 = ", ";
  protected final String TEXT_167 = ".VISUAL_ID));";
  protected final String TEXT_168 = NL + "\t\t";
  protected final String TEXT_169 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_170 = ".getType(";
  protected final String TEXT_171 = ".VISUAL_ID), ";
  protected final String TEXT_172 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_173 = "Children(nextNode, nextDestination);";
  protected final String TEXT_174 = NL;
  protected final String TEXT_175 = NL + "\t\t}";
  protected final String TEXT_176 = NL + "\t\t}";
  protected final String TEXT_177 = NL + "\t}";
  protected final String TEXT_178 = NL;
  protected final String TEXT_179 = "\tif (";
  protected final String TEXT_180 = ".eINSTANCE.get";
  protected final String TEXT_181 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_182 = NL + "\t\tfor (";
  protected final String TEXT_183 = " destinations = ";
  protected final String TEXT_184 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_185 = " nextDestination = (";
  protected final String TEXT_186 = ") destinations.next();";
  protected final String TEXT_187 = NL + "\t\t";
  protected final String TEXT_188 = " nextDestination = (";
  protected final String TEXT_189 = ") ";
  protected final String TEXT_190 = ";";
  protected final String TEXT_191 = NL + "\t\tif (";
  protected final String TEXT_192 = ".VISUAL_ID == ";
  protected final String TEXT_193 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_194 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_195 = ".";
  protected final String TEXT_196 = ", ";
  protected final String TEXT_197 = ".VISUAL_ID));";
  protected final String TEXT_198 = NL;
  protected final String TEXT_199 = NL + "\t\t}";
  protected final String TEXT_200 = NL + "\t\t}";
  protected final String TEXT_201 = NL + "\t}";
  protected final String TEXT_202 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_203 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_204 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_205 = " edge = (";
  protected final String TEXT_206 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_207 = ".APPEND, ";
  protected final String TEXT_208 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_209 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_210 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_211 = NL;
  protected final String TEXT_212 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_213 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_214 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_215 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_216 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_217 = " source, ";
  protected final String TEXT_218 = " destination, ";
  protected final String TEXT_219 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_220 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_221 = " source, ";
  protected final String TEXT_222 = " destination, ";
  protected final String TEXT_223 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_224 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_225 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_226 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_227 = " source, ";
  protected final String TEXT_228 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_229 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_230 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_231 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_232 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_233 = "\t" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_234 = " implements ";
  protected final String TEXT_235 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_236 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_237 = " topLevel = new ";
  protected final String TEXT_238 = "(parent, ";
  protected final String TEXT_239 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_240 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_241 = "(";
  protected final String TEXT_242 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_243 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_244 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_245 = " panel = new ";
d266 40
a305 32
  protected final String TEXT_247 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_248 = "(";
  protected final String TEXT_249 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_250 = " layout = new ";
  protected final String TEXT_251 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_252 = " label = new ";
  protected final String TEXT_253 = "(panel, ";
  protected final String TEXT_254 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_255 = "(";
  protected final String TEXT_256 = ".HORIZONTAL_ALIGN_BEGINNING));" + NL + "\t\t" + NL + "\t\t\t";
  protected final String TEXT_257 = " treeViewer = new ";
  protected final String TEXT_258 = "(panel, ";
  protected final String TEXT_259 = ".SINGLE | ";
  protected final String TEXT_260 = ".H_SCROLL | ";
  protected final String TEXT_261 = ".V_SCROLL | ";
  protected final String TEXT_262 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_263 = " layoutData = new ";
  protected final String TEXT_264 = "(";
  protected final String TEXT_265 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\ttreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\t\ttreeViewer.setContentProvider(new ";
  protected final String TEXT_266 = "(";
  protected final String TEXT_267 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setLabelProvider(new ";
  protected final String TEXT_268 = "(";
  protected final String TEXT_269 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setInput(myDiagramRoot.eResource());" + NL + "\t\t\ttreeViewer.setSelection(new ";
  protected final String TEXT_270 = "(myDiagramRoot));" + NL + "\t\t\ttreeViewer.addSelectionChangedListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_271 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_272 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_273 = " selection = (";
  protected final String TEXT_274 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmyDiagramRoot = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_275 = "(new ";
  protected final String TEXT_276 = "(myDiagramRoot), ";
  protected final String TEXT_277 = ".MODEL_ID, ";
  protected final String TEXT_278 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
d763 2
d803 1
a803 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d805 1
a805 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d807 1
a807 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d809 1
a809 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d811 1
a811 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d813 1
a813 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d819 1
a819 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d821 1
a821 1
    		} else {
d823 1
a823 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d825 1
a825 1
    		}
d827 16
d846 1
a846 1
    stringBuffer.append(TEXT_142);
d850 1
a850 1
    stringBuffer.append(TEXT_143);
d855 1
a855 1
    stringBuffer.append(TEXT_144);
d857 1
a857 1
    stringBuffer.append(TEXT_145);
d859 1
a859 1
    stringBuffer.append(TEXT_146);
d861 1
a861 1
    stringBuffer.append(TEXT_147);
d866 1
a866 1
    stringBuffer.append(TEXT_148);
d880 1
a880 1
    stringBuffer.append(TEXT_149);
d882 1
a882 1
    stringBuffer.append(TEXT_150);
d884 1
a884 1
    stringBuffer.append(TEXT_151);
d886 1
a886 1
    stringBuffer.append(TEXT_152);
d888 1
a888 1
    stringBuffer.append(TEXT_153);
d890 1
a890 1
    stringBuffer.append(TEXT_154);
d892 1
a892 1
    stringBuffer.append(TEXT_155);
d894 1
a894 1
    stringBuffer.append(TEXT_156);
d896 1
a896 1
    stringBuffer.append(TEXT_157);
d898 1
a898 1
    stringBuffer.append(TEXT_158);
d900 1
a900 1
    stringBuffer.append(TEXT_159);
d902 1
a902 1
    stringBuffer.append(TEXT_160);
d905 1
a905 1
    stringBuffer.append(TEXT_161);
d907 1
a907 1
    stringBuffer.append(TEXT_162);
d909 1
a909 1
    stringBuffer.append(TEXT_163);
d911 1
a911 1
    stringBuffer.append(TEXT_164);
d913 1
a913 1
    stringBuffer.append(TEXT_165);
d915 1
a915 1
    stringBuffer.append(TEXT_166);
d917 1
a917 1
    stringBuffer.append(TEXT_167);
d919 1
a919 1
    stringBuffer.append(TEXT_168);
d921 1
a921 1
    stringBuffer.append(TEXT_169);
d923 1
a923 1
    stringBuffer.append(TEXT_170);
d925 1
a925 1
    stringBuffer.append(TEXT_171);
d927 1
a927 1
    stringBuffer.append(TEXT_172);
d929 1
a929 1
    stringBuffer.append(TEXT_173);
d931 1
a931 1
    stringBuffer.append(TEXT_174);
d933 1
a933 1
    stringBuffer.append(TEXT_175);
d936 1
a936 1
    stringBuffer.append(TEXT_176);
d938 1
a938 1
    stringBuffer.append(TEXT_177);
d945 1
a945 1
    stringBuffer.append(TEXT_178);
d959 1
a959 1
    stringBuffer.append(TEXT_179);
d961 1
a961 1
    stringBuffer.append(TEXT_180);
d963 1
a963 1
    stringBuffer.append(TEXT_181);
d965 1
a965 1
    stringBuffer.append(TEXT_182);
d967 1
a967 1
    stringBuffer.append(TEXT_183);
d969 1
a969 1
    stringBuffer.append(TEXT_184);
d971 1
a971 1
    stringBuffer.append(TEXT_185);
d973 1
a973 1
    stringBuffer.append(TEXT_186);
d975 1
a975 1
    stringBuffer.append(TEXT_187);
d977 1
a977 1
    stringBuffer.append(TEXT_188);
d979 1
a979 1
    stringBuffer.append(TEXT_189);
d981 1
a981 1
    stringBuffer.append(TEXT_190);
d984 1
a984 1
    stringBuffer.append(TEXT_191);
d986 1
a986 1
    stringBuffer.append(TEXT_192);
d988 1
a988 1
    stringBuffer.append(TEXT_193);
d990 1
a990 1
    stringBuffer.append(TEXT_194);
d992 1
a992 1
    stringBuffer.append(TEXT_195);
d994 1
a994 1
    stringBuffer.append(TEXT_196);
d996 2
a997 2
    stringBuffer.append(TEXT_197);
    stringBuffer.append(TEXT_198);
d999 1
a999 1
    stringBuffer.append(TEXT_199);
d1002 1
a1002 1
    stringBuffer.append(TEXT_200);
d1004 1
a1004 1
    stringBuffer.append(TEXT_201);
d1006 1
a1006 1
    stringBuffer.append(TEXT_202);
d1008 1
a1008 1
    stringBuffer.append(TEXT_203);
d1010 1
a1010 1
    stringBuffer.append(TEXT_204);
d1012 1
a1012 1
    stringBuffer.append(TEXT_205);
d1014 1
a1014 1
    stringBuffer.append(TEXT_206);
d1016 1
a1016 1
    stringBuffer.append(TEXT_207);
d1018 1
a1018 1
    stringBuffer.append(TEXT_208);
d1020 1
a1020 1
    stringBuffer.append(TEXT_209);
d1022 2
a1023 2
    stringBuffer.append(TEXT_210);
    stringBuffer.append(TEXT_211);
a1026 16
    stringBuffer.append(TEXT_212);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_214);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_217);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_218);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1032 1
a1032 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1034 1
a1034 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1036 1
a1036 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1038 1
a1038 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1042 1
a1042 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1048 1
a1048 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1050 2
a1052 2
    stringBuffer.append(TEXT_232);
    }
d1054 1
a1054 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d1056 1
a1056 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
d1058 1
a1058 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1060 1
a1060 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1062 1
a1062 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1064 1
a1064 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1066 1
a1066 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1068 1
a1068 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1070 1
a1070 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1072 1
a1072 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1082 1
a1082 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1086 1
a1086 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1088 1
a1088 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1090 1
a1090 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1092 1
a1092 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1094 2
a1096 2
    stringBuffer.append(TEXT_254);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1100 1
a1100 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1102 1
a1102 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1104 1
a1104 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1106 1
a1106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1108 1
a1108 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1116 16
d1133 1
a1133 1
    stringBuffer.append(TEXT_265);
d1135 1
a1135 1
    stringBuffer.append(TEXT_266);
d1137 1
a1137 1
    stringBuffer.append(TEXT_267);
d1139 1
a1139 1
    stringBuffer.append(TEXT_268);
d1141 1
a1141 1
    stringBuffer.append(TEXT_269);
d1143 1
a1143 1
    stringBuffer.append(TEXT_270);
d1145 1
a1145 1
    stringBuffer.append(TEXT_271);
d1147 1
a1147 1
    stringBuffer.append(TEXT_272);
d1149 1
a1149 1
    stringBuffer.append(TEXT_273);
d1151 1
a1151 1
    stringBuffer.append(TEXT_274);
d1153 1
a1153 1
    stringBuffer.append(TEXT_275);
d1155 1
a1155 1
    stringBuffer.append(TEXT_276);
d1157 1
a1157 1
    stringBuffer.append(TEXT_277);
d1159 1
a1159 1
    stringBuffer.append(TEXT_278);
@


1.25
log
@Split storeTypeModelFacetLinks into set of fine-grained methods to ease overriding. mgolubev.
@
text
@a737 1
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();
@


1.24
log
@prevent compilation error
@
text
@d126 114
a239 114
  protected final String TEXT_107 = "\t\t" + NL + "\tif (";
  protected final String TEXT_108 = ".eINSTANCE.get";
  protected final String TEXT_109 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_110 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_111 = " values = ";
  protected final String TEXT_112 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_113 = " nextValue = ((";
  protected final String TEXT_114 = ") values.next());";
  protected final String TEXT_115 = NL + "\t\t";
  protected final String TEXT_116 = " nextValue = (";
  protected final String TEXT_117 = ") ";
  protected final String TEXT_118 = ";";
  protected final String TEXT_119 = NL + "\t\tint linkVID = ";
  protected final String TEXT_120 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_121 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_122 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_123 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " dst = (";
  protected final String TEXT_125 = ") structuralFeatureResult;";
  protected final String TEXT_126 = NL + "\t\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_127 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_128 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_129 = " src = (";
  protected final String TEXT_130 = ") structuralFeatureResult;";
  protected final String TEXT_131 = NL + "\t\t\t\t";
  protected final String TEXT_132 = " src = container;";
  protected final String TEXT_133 = NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));";
  protected final String TEXT_134 = NL + "\t\t\t\t}";
  protected final String TEXT_135 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_136 = NL + "\t\t}";
  protected final String TEXT_137 = NL + "\t}";
  protected final String TEXT_138 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_139 = " container, ";
  protected final String TEXT_140 = " containerMetaclass, ";
  protected final String TEXT_141 = " diagram) {";
  protected final String TEXT_142 = NL;
  protected final String TEXT_143 = "\tif (";
  protected final String TEXT_144 = ".eINSTANCE.get";
  protected final String TEXT_145 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_146 = NL + "\t\tfor (";
  protected final String TEXT_147 = " destinations = ";
  protected final String TEXT_148 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_149 = " nextDestination = (";
  protected final String TEXT_150 = ") destinations.next();";
  protected final String TEXT_151 = NL + "\t\t";
  protected final String TEXT_152 = " nextDestination = (";
  protected final String TEXT_153 = ") ";
  protected final String TEXT_154 = ";";
  protected final String TEXT_155 = NL + "\t\tif (";
  protected final String TEXT_156 = ".VISUAL_ID == ";
  protected final String TEXT_157 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_158 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_159 = ".";
  protected final String TEXT_160 = ", ";
  protected final String TEXT_161 = ".VISUAL_ID));";
  protected final String TEXT_162 = NL + "\t\t";
  protected final String TEXT_163 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_164 = ".getType(";
  protected final String TEXT_165 = ".VISUAL_ID), ";
  protected final String TEXT_166 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_167 = "Children(nextNode, nextDestination);";
  protected final String TEXT_168 = NL;
  protected final String TEXT_169 = NL + "\t\t}";
  protected final String TEXT_170 = NL + "\t\t}";
  protected final String TEXT_171 = NL + "\t}";
  protected final String TEXT_172 = NL;
  protected final String TEXT_173 = "\tif (";
  protected final String TEXT_174 = ".eINSTANCE.get";
  protected final String TEXT_175 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_176 = NL + "\t\tfor (";
  protected final String TEXT_177 = " destinations = ";
  protected final String TEXT_178 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_179 = " nextDestination = (";
  protected final String TEXT_180 = ") destinations.next();";
  protected final String TEXT_181 = NL + "\t\t";
  protected final String TEXT_182 = " nextDestination = (";
  protected final String TEXT_183 = ") ";
  protected final String TEXT_184 = ";";
  protected final String TEXT_185 = NL + "\t\tif (";
  protected final String TEXT_186 = ".VISUAL_ID == ";
  protected final String TEXT_187 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_188 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_189 = ".";
  protected final String TEXT_190 = ", ";
  protected final String TEXT_191 = ".VISUAL_ID));";
  protected final String TEXT_192 = NL;
  protected final String TEXT_193 = NL + "\t\t}";
  protected final String TEXT_194 = NL + "\t\t}";
  protected final String TEXT_195 = NL + "\t}";
  protected final String TEXT_196 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_197 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_198 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_199 = " edge = (";
  protected final String TEXT_200 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_201 = ".APPEND, ";
  protected final String TEXT_202 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_203 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_204 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_205 = NL;
  protected final String TEXT_206 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_207 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_208 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_209 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_210 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_211 = " source, ";
  protected final String TEXT_212 = " destination, ";
  protected final String TEXT_213 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_214 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_215 = " source, ";
  protected final String TEXT_216 = " destination, ";
  protected final String TEXT_217 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_218 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_219 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_220 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
d241 57
a297 51
  protected final String TEXT_222 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_223 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_224 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_225 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_226 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_227 = "\t" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate class RootElementSelectorPage extends ";
  protected final String TEXT_228 = " implements ";
  protected final String TEXT_229 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected RootElementSelectorPage() {" + NL + "\t\t\tsuper(\"Select diagram root element\");" + NL + "\t\t\tsetTitle(\"Diagram root element\");" + NL + "\t\t\tsetDescription(\"Select semantic model element to be depicted on diagram\");" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic void createControl(";
  protected final String TEXT_230 = " parent) {" + NL + "\t\t\tinitializeDialogUnits(parent);" + NL + "\t\t\t";
  protected final String TEXT_231 = " topLevel = new ";
  protected final String TEXT_232 = "(parent, ";
  protected final String TEXT_233 = ".NONE);" + NL + "\t\t\ttopLevel.setLayout(new ";
  protected final String TEXT_234 = "());" + NL + "\t\t\ttopLevel.setLayoutData(new ";
  protected final String TEXT_235 = "(";
  protected final String TEXT_236 = ".VERTICAL_ALIGN_FILL | ";
  protected final String TEXT_237 = ".HORIZONTAL_ALIGN_FILL));" + NL + "\t\t\ttopLevel.setFont(parent.getFont());" + NL + "\t\t\tsetControl(topLevel);" + NL + "\t\t\tcreateModelBrowser(topLevel);" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void createModelBrowser(";
  protected final String TEXT_238 = " parent) {" + NL + "\t\t\t";
  protected final String TEXT_239 = " panel = new ";
  protected final String TEXT_240 = "(parent, ";
  protected final String TEXT_241 = ".NONE);" + NL + "\t\t\tpanel.setLayoutData(new ";
  protected final String TEXT_242 = "(";
  protected final String TEXT_243 = ".FILL_BOTH));" + NL + "\t\t\t";
  protected final String TEXT_244 = " layout = new ";
  protected final String TEXT_245 = "();" + NL + "\t\t\tlayout.marginWidth = 0;" + NL + "\t\t\tpanel.setLayout(layout);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_246 = " label = new ";
  protected final String TEXT_247 = "(panel, ";
  protected final String TEXT_248 = ".NONE);" + NL + "\t\t\tlabel.setText(\"Select diagram root element:\");" + NL + "\t\t\tlabel.setLayoutData(new ";
  protected final String TEXT_249 = "(";
  protected final String TEXT_250 = ".HORIZONTAL_ALIGN_BEGINNING));" + NL + "\t\t" + NL + "\t\t\t";
  protected final String TEXT_251 = " treeViewer = new ";
  protected final String TEXT_252 = "(panel, ";
  protected final String TEXT_253 = ".SINGLE | ";
  protected final String TEXT_254 = ".H_SCROLL | ";
  protected final String TEXT_255 = ".V_SCROLL | ";
  protected final String TEXT_256 = ".BORDER);" + NL + "\t\t\t";
  protected final String TEXT_257 = " layoutData = new ";
  protected final String TEXT_258 = "(";
  protected final String TEXT_259 = ".FILL_BOTH);" + NL + "\t\t\tlayoutData.heightHint = 300;" + NL + "\t\t\tlayoutData.widthHint = 300;" + NL + "\t\t\ttreeViewer.getTree().setLayoutData(layoutData);" + NL + "\t\t\ttreeViewer.setContentProvider(new ";
  protected final String TEXT_260 = "(";
  protected final String TEXT_261 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setLabelProvider(new ";
  protected final String TEXT_262 = "(";
  protected final String TEXT_263 = ".getInstance().getItemProvidersAdapterFactory()));" + NL + "\t\t\ttreeViewer.setInput(myDiagramRoot.eResource());" + NL + "\t\t\ttreeViewer.setSelection(new ";
  protected final String TEXT_264 = "(myDiagramRoot));" + NL + "\t\t\ttreeViewer.addSelectionChangedListener(this);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void selectionChanged(";
  protected final String TEXT_265 = " event) {" + NL + "\t\t\tmyDiagramRoot = null;" + NL + "\t\t\tif (event.getSelection() instanceof ";
  protected final String TEXT_266 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_267 = " selection = (";
  protected final String TEXT_268 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1 && selection.getFirstElement() instanceof EObject) {" + NL + "\t\t\t\t\tmyDiagramRoot = (EObject) selection.getFirstElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_269 = "(new ";
  protected final String TEXT_270 = "(myDiagramRoot), ";
  protected final String TEXT_271 = ".MODEL_ID, ";
  protected final String TEXT_272 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
d741 1
a741 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d743 1
a743 1
    stringBuffer.append(childMetaFeature.getGenClass().getClassifierAccessorName());
d745 4
a748 1
    		if (childMetaFeature.isListType()) {
d750 7
a756 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d758 1
a758 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d760 1
a760 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d764 1
a764 1
    		} else {
d766 1
a766 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d768 1
a768 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d770 1
a770 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d772 1
a772 1
    		}
d774 1
a774 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d776 1
a776 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
d778 1
a778 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d780 1
a780 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d786 1
a786 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d788 1
a788 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d790 1
a790 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d792 1
a792 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d794 2
a796 2
    stringBuffer.append(TEXT_130);
    		} else {
d800 1
a800 1
    		}
d804 12
d817 1
a817 1
    stringBuffer.append(TEXT_135);
d821 1
a821 1
    stringBuffer.append(TEXT_136);
d825 1
a825 1
    stringBuffer.append(TEXT_137);
d830 1
a830 1
    stringBuffer.append(TEXT_138);
d832 1
a832 1
    stringBuffer.append(TEXT_139);
d834 1
a834 1
    stringBuffer.append(TEXT_140);
d836 1
a836 1
    stringBuffer.append(TEXT_141);
d841 1
a841 1
    stringBuffer.append(TEXT_142);
d855 1
a855 1
    stringBuffer.append(TEXT_143);
d857 1
a857 1
    stringBuffer.append(TEXT_144);
d859 1
a859 1
    stringBuffer.append(TEXT_145);
d861 1
a861 1
    stringBuffer.append(TEXT_146);
d863 1
a863 1
    stringBuffer.append(TEXT_147);
d865 1
a865 1
    stringBuffer.append(TEXT_148);
d867 1
a867 1
    stringBuffer.append(TEXT_149);
d869 1
a869 1
    stringBuffer.append(TEXT_150);
d871 1
a871 1
    stringBuffer.append(TEXT_151);
d873 1
a873 1
    stringBuffer.append(TEXT_152);
d875 1
a875 1
    stringBuffer.append(TEXT_153);
d877 1
a877 1
    stringBuffer.append(TEXT_154);
d880 1
a880 1
    stringBuffer.append(TEXT_155);
d882 1
a882 1
    stringBuffer.append(TEXT_156);
d884 1
a884 1
    stringBuffer.append(TEXT_157);
d886 1
a886 1
    stringBuffer.append(TEXT_158);
d888 1
a888 1
    stringBuffer.append(TEXT_159);
d890 1
a890 1
    stringBuffer.append(TEXT_160);
d892 1
a892 1
    stringBuffer.append(TEXT_161);
d894 1
a894 1
    stringBuffer.append(TEXT_162);
d896 1
a896 1
    stringBuffer.append(TEXT_163);
d898 1
a898 1
    stringBuffer.append(TEXT_164);
d900 1
a900 1
    stringBuffer.append(TEXT_165);
d902 1
a902 1
    stringBuffer.append(TEXT_166);
d904 1
a904 1
    stringBuffer.append(TEXT_167);
d906 1
a906 1
    stringBuffer.append(TEXT_168);
d908 1
a908 1
    stringBuffer.append(TEXT_169);
d911 1
a911 1
    stringBuffer.append(TEXT_170);
d913 1
a913 1
    stringBuffer.append(TEXT_171);
d920 1
a920 1
    stringBuffer.append(TEXT_172);
d934 1
a934 1
    stringBuffer.append(TEXT_173);
d936 1
a936 1
    stringBuffer.append(TEXT_174);
d938 1
a938 1
    stringBuffer.append(TEXT_175);
d940 1
a940 1
    stringBuffer.append(TEXT_176);
d942 1
a942 1
    stringBuffer.append(TEXT_177);
d944 1
a944 1
    stringBuffer.append(TEXT_178);
d946 1
a946 1
    stringBuffer.append(TEXT_179);
d948 1
a948 1
    stringBuffer.append(TEXT_180);
d950 1
a950 1
    stringBuffer.append(TEXT_181);
d952 1
a952 1
    stringBuffer.append(TEXT_182);
d954 1
a954 1
    stringBuffer.append(TEXT_183);
d956 1
a956 1
    stringBuffer.append(TEXT_184);
d959 1
a959 1
    stringBuffer.append(TEXT_185);
d961 1
a961 1
    stringBuffer.append(TEXT_186);
d963 1
a963 1
    stringBuffer.append(TEXT_187);
d965 1
a965 1
    stringBuffer.append(TEXT_188);
d967 1
a967 1
    stringBuffer.append(TEXT_189);
d969 1
a969 1
    stringBuffer.append(TEXT_190);
d971 2
a972 2
    stringBuffer.append(TEXT_191);
    stringBuffer.append(TEXT_192);
d974 1
a974 1
    stringBuffer.append(TEXT_193);
d977 1
a977 1
    stringBuffer.append(TEXT_194);
d979 1
a979 1
    stringBuffer.append(TEXT_195);
d981 1
a981 1
    stringBuffer.append(TEXT_196);
d983 1
a983 1
    stringBuffer.append(TEXT_197);
d985 1
a985 1
    stringBuffer.append(TEXT_198);
d987 1
a987 1
    stringBuffer.append(TEXT_199);
d989 1
a989 1
    stringBuffer.append(TEXT_200);
d991 1
a991 1
    stringBuffer.append(TEXT_201);
d993 1
a993 1
    stringBuffer.append(TEXT_202);
d995 1
a995 1
    stringBuffer.append(TEXT_203);
d997 2
a998 2
    stringBuffer.append(TEXT_204);
    stringBuffer.append(TEXT_205);
a1001 12
    stringBuffer.append(TEXT_206);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_208);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_210);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1005 1
a1005 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d1009 2
a1011 2
    stringBuffer.append(TEXT_216);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1013 1
a1013 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1015 1
a1015 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1017 1
a1017 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d1023 1
a1023 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1025 1
a1025 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1027 1
a1027 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d1029 1
a1029 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d1031 1
a1031 1
    }
d1033 1
a1033 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.wizard.WizardPage"));
d1035 1
a1035 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelectionChangedListener"));
d1037 1
a1037 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1039 1
a1039 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1041 1
a1041 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1043 1
a1043 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1045 1
a1045 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1047 1
a1047 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1049 1
a1049 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1051 1
a1051 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1055 1
a1055 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1057 1
a1057 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Composite"));
d1059 1
a1059 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1065 1
a1065 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1067 1
a1067 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridLayout"));
d1069 1
a1069 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1071 1
a1071 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Label"));
d1073 1
a1073 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1077 1
a1077 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.layout.GridData"));
d1079 1
a1079 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1081 1
a1081 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.TreeViewer"));
d1083 1
a1083 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d1087 12
d1100 1
a1100 1
    stringBuffer.append(TEXT_255);
d1102 1
a1102 1
    stringBuffer.append(TEXT_256);
d1104 1
a1104 1
    stringBuffer.append(TEXT_257);
d1106 1
a1106 1
    stringBuffer.append(TEXT_258);
d1108 1
a1108 1
    stringBuffer.append(TEXT_259);
d1110 1
a1110 1
    stringBuffer.append(TEXT_260);
d1112 1
a1112 1
    stringBuffer.append(TEXT_261);
d1114 1
a1114 1
    stringBuffer.append(TEXT_262);
d1116 1
a1116 1
    stringBuffer.append(TEXT_263);
d1118 1
a1118 1
    stringBuffer.append(TEXT_264);
d1120 1
a1120 1
    stringBuffer.append(TEXT_265);
d1122 1
a1122 1
    stringBuffer.append(TEXT_266);
d1124 1
a1124 1
    stringBuffer.append(TEXT_267);
d1126 1
a1126 1
    stringBuffer.append(TEXT_268);
d1128 1
a1128 1
    stringBuffer.append(TEXT_269);
d1130 1
a1130 1
    stringBuffer.append(TEXT_270);
d1132 1
a1132 1
    stringBuffer.append(TEXT_271);
d1134 1
a1134 1
    stringBuffer.append(TEXT_272);
@


1.24.2.1
log
@[155966] - No valid diagram root in "Initialize ... diagram file" wizard on XSD generated models
@
text
@d287 5
a291 9
  protected final String TEXT_268 = ") event.getSelection();" + NL + "\t\t\t\tif (selection.size() == 1) {" + NL + "\t\t\t\t\tObject selectedElement = selection.getFirstElement();" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_269 = ") {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_270 = ") selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof ";
  protected final String TEXT_271 = ".Entry) {" + NL + "\t\t\t\t\t\tselectedElement = ((";
  protected final String TEXT_272 = ".Entry) selectedElement).getValue();" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (selectedElement instanceof EObject) {" + NL + "\t\t\t\t\t\tmyDiagramRoot = (EObject) selectedElement;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tsetPageComplete(validatePage());" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean validatePage() {" + NL + "\t\t\tif (myDiagramRoot == null) {" + NL + "\t\t\t\tsetErrorMessage(\"No diagram root element selected\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tboolean result = ViewService.getInstance().provides(new ";
  protected final String TEXT_273 = "(new ";
  protected final String TEXT_274 = "(myDiagramRoot), ";
  protected final String TEXT_275 = ".MODEL_ID, ";
  protected final String TEXT_276 = ".DIAGRAM_PREFERENCES_HINT));" + NL + "\t\t\tsetErrorMessage(result ? null : \"Invalid diagram root element was selected\");" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "}";
d1100 1
a1100 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d1102 1
a1102 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.provider.IWrapperItemProvider"));
d1104 1
a1104 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
d1106 1
a1106 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.FeatureMap"));
a1107 8
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.services.view.CreateDiagramViewOperation"));
    stringBuffer.append(TEXT_273);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_274);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_275);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_276);
@


1.23
log
@- ElementChooserDialog title generated
- diagram file extension marked as non-nls
@
text
@d40 1
a40 1
  protected final String TEXT_21 = NL + "\t\t\t\tinitDiagramContents(diagram, diagramModelObject);";
@


1.22
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d31 1
a31 1
  protected final String TEXT_12 = "\";" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; parentContainer.getFile(new Path(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram based on \" + ";
@


1.21
log
@header comment should not be a javadoc comment
@
text
@d24 21
a44 21
  protected final String TEXT_5 = " extends Wizard {" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate WizardNewFileCreationPage myFileCreationPage;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPage myWorkbenchPage;" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection) {" + NL + "\t   \tmySelectedModelFile = selectedModelFile;" + NL + "\t   \tmyWorkbenchPage = workbenchPage;" + NL + "\t   \tmySelection = selection;" + NL + "\t}" + NL + "\t     \t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection) {" + NL + "" + NL + "\t\t\tpublic void createControl(Composite parent) {" + NL + "\t\t\t\tsuper.createControl(parent);" + NL + "\t\t\t\t" + NL + "\t\t\t\tIContainer parentContainer = mySelectedModelFile.getParent();" + NL + "\t\t\t\tString originalFileName = mySelectedModelFile.getProjectRelativePath().removeFileExtension().lastSegment();" + NL + "\t\t\t\tString fileExtension = \".";
  protected final String TEXT_7 = "\";" + NL + "\t\t\t\tString fileName = originalFileName + fileExtension;" + NL + "\t\t\t\tfor (int i = 1; parentContainer.getFile(new Path(fileName)).exists(); i++) {" + NL + "\t\t\t\t\tfileName = originalFileName + i + fileExtension;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tsetFileName(fileName);" + NL + "\t\t\t}" + NL + "\t\t" + NL + "\t\t};" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram and initialize it using specified \" + ";
  protected final String TEXT_8 = ".MODEL_ID + \" model content\");" + NL + "\t\taddPage(myFileCreationPage);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new NullProgressMonitor()); //$NON-NLS-1$" + NL + "\t\t} catch (";
  protected final String TEXT_9 = " e) {" + NL + "\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(\"Unable to set charset for diagram file\", e); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "" + NL + "\t\tList affectedFiles = new LinkedList();" + NL + "\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_11 = ".getDiagramVisualID(diagramModelObject);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_12 = ".VISUAL_ID) {" + NL + "\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, ";
  protected final String TEXT_13 = ".MODEL_ID, ";
  protected final String TEXT_14 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tdiagramResource.getContents().add(diagram);";
  protected final String TEXT_15 = NL + "\t\t\t\tdiagramResource.getContents().add(diagram.getElement());";
  protected final String TEXT_16 = NL + "\t\t\t\tinitDiagramContents(diagram, diagramModelObject);";
  protected final String TEXT_17 = NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\tIDE.openEditor(myWorkbenchPage, diagramFile);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_18 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_19 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (PartInitException ex) {" + NL + "\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t}\t\t\t" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_21 = NL + "\t\tResourceSet resourceSet = new ";
  protected final String TEXT_22 = "();";
  protected final String TEXT_23 = NL + "\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_24 = NL + "\t\ttry {" + NL + "\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (WrappedException ex) {" + NL + "\t\t\t";
  protected final String TEXT_25 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
d246 46
a291 1
  protected final String TEXT_227 = "\t" + NL + "" + NL + "}";
a420 1
importManager.addImport("org.eclipse.emf.common.util.WrappedException");
a428 1
importManager.addImport("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory");
a430 1
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
d446 1
a446 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d450 1
a450 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d452 1
a452 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d454 1
a454 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d456 1
a456 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d460 1
a460 1
    stringBuffer.append(pluginActivatorClass);
d462 1
a462 1
    if (editorGen.isSameFileForDiagramAndModel()) {
d464 1
a464 4
    
}
if (!genDiagram.isSynchronized()) {

d466 1
a466 1
    }
d468 1
a468 1
    stringBuffer.append(pluginActivatorClass);
d472 1
a472 1
    stringBuffer.append(pluginActivatorClass);
d474 4
a477 1
    if (editorGen.isSameFileForDiagramAndModel()) {
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d481 1
a481 1
    } else {
d483 1
a483 1
    }
d1018 90
@


1.20
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.19
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d359 1
a359 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.18
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d159 29
a187 29
  protected final String TEXT_140 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_141 = NL;
  protected final String TEXT_142 = "\tif (";
  protected final String TEXT_143 = ".eINSTANCE.get";
  protected final String TEXT_144 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_145 = NL + "\t\tfor (";
  protected final String TEXT_146 = " destinations = ";
  protected final String TEXT_147 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_148 = " nextDestination = (";
  protected final String TEXT_149 = ") destinations.next();";
  protected final String TEXT_150 = NL + "\t\t";
  protected final String TEXT_151 = " nextDestination = (";
  protected final String TEXT_152 = ") ";
  protected final String TEXT_153 = ";";
  protected final String TEXT_154 = NL + "\t\tif (";
  protected final String TEXT_155 = ".VISUAL_ID == ";
  protected final String TEXT_156 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_157 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_158 = ".";
  protected final String TEXT_159 = ", ";
  protected final String TEXT_160 = ".VISUAL_ID));";
  protected final String TEXT_161 = NL + "\t\t";
  protected final String TEXT_162 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_163 = ".getType(";
  protected final String TEXT_164 = ".VISUAL_ID), ";
  protected final String TEXT_165 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_166 = "Children(nextNode, nextDestination);";
  protected final String TEXT_167 = NL;
  protected final String TEXT_168 = NL + "\t\t}";
d189 23
a211 23
  protected final String TEXT_170 = NL + "\t}";
  protected final String TEXT_171 = NL;
  protected final String TEXT_172 = "\tif (";
  protected final String TEXT_173 = ".eINSTANCE.get";
  protected final String TEXT_174 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_175 = NL + "\t\tfor (";
  protected final String TEXT_176 = " destinations = ";
  protected final String TEXT_177 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_178 = " nextDestination = (";
  protected final String TEXT_179 = ") destinations.next();";
  protected final String TEXT_180 = NL + "\t\t";
  protected final String TEXT_181 = " nextDestination = (";
  protected final String TEXT_182 = ") ";
  protected final String TEXT_183 = ";";
  protected final String TEXT_184 = NL + "\t\tif (";
  protected final String TEXT_185 = ".VISUAL_ID == ";
  protected final String TEXT_186 = ".getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_187 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_188 = ".";
  protected final String TEXT_189 = ", ";
  protected final String TEXT_190 = ".VISUAL_ID));";
  protected final String TEXT_191 = NL;
  protected final String TEXT_192 = NL + "\t\t}";
d213 34
a246 33
  protected final String TEXT_194 = NL + "\t}";
  protected final String TEXT_195 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_196 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_197 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_198 = " edge = (";
  protected final String TEXT_199 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, String.valueOf(nextLinkDescriptor.getVisualID()), ";
  protected final String TEXT_200 = ".APPEND, ";
  protected final String TEXT_201 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_202 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_203 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_204 = NL;
  protected final String TEXT_205 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_206 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_207 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_208 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_209 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_210 = " source, ";
  protected final String TEXT_211 = " destination, ";
  protected final String TEXT_212 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_213 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_214 = " source, ";
  protected final String TEXT_215 = " destination, ";
  protected final String TEXT_216 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_217 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_218 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_219 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_220 = " source, ";
  protected final String TEXT_221 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_222 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_223 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_224 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_225 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_226 = "\t" + NL + "" + NL + "}";
d766 2
d772 1
a772 1
    stringBuffer.append(TEXT_141);
d786 1
a786 1
    stringBuffer.append(TEXT_142);
d788 1
a788 1
    stringBuffer.append(TEXT_143);
d790 1
a790 1
    stringBuffer.append(TEXT_144);
d792 1
a792 1
    stringBuffer.append(TEXT_145);
d794 1
a794 1
    stringBuffer.append(TEXT_146);
a795 2
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d799 2
a801 2
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d805 2
d808 1
a808 1
    stringBuffer.append(TEXT_153);
d811 1
a811 1
    stringBuffer.append(TEXT_154);
d813 1
a813 1
    stringBuffer.append(TEXT_155);
d815 1
a815 1
    stringBuffer.append(TEXT_156);
d817 1
a817 1
    stringBuffer.append(TEXT_157);
d819 1
a819 1
    stringBuffer.append(TEXT_158);
d821 1
a821 1
    stringBuffer.append(TEXT_159);
d823 1
a823 1
    stringBuffer.append(TEXT_160);
d825 1
a825 1
    stringBuffer.append(TEXT_161);
d827 1
a827 1
    stringBuffer.append(TEXT_162);
d829 1
a829 1
    stringBuffer.append(TEXT_163);
d831 1
a831 1
    stringBuffer.append(TEXT_164);
d833 1
a833 1
    stringBuffer.append(TEXT_165);
d835 1
a835 1
    stringBuffer.append(TEXT_166);
d837 1
a837 1
    stringBuffer.append(TEXT_167);
d839 1
a839 1
    stringBuffer.append(TEXT_168);
d842 1
a842 1
    stringBuffer.append(TEXT_169);
d844 1
a844 1
    stringBuffer.append(TEXT_170);
d851 1
a851 1
    stringBuffer.append(TEXT_171);
d865 1
a865 1
    stringBuffer.append(TEXT_172);
d867 1
a867 1
    stringBuffer.append(TEXT_173);
d869 1
a869 1
    stringBuffer.append(TEXT_174);
d871 1
a871 1
    stringBuffer.append(TEXT_175);
d873 1
a873 1
    stringBuffer.append(TEXT_176);
a874 2
    stringBuffer.append(TEXT_177);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d878 2
a880 2
    stringBuffer.append(TEXT_180);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d884 2
d887 1
a887 1
    stringBuffer.append(TEXT_183);
d890 1
a890 1
    stringBuffer.append(TEXT_184);
d892 1
a892 1
    stringBuffer.append(TEXT_185);
d894 1
a894 1
    stringBuffer.append(TEXT_186);
d896 1
a896 1
    stringBuffer.append(TEXT_187);
d898 1
a898 1
    stringBuffer.append(TEXT_188);
d900 1
a900 1
    stringBuffer.append(TEXT_189);
a901 1
    stringBuffer.append(TEXT_190);
d903 1
d905 1
a905 1
    stringBuffer.append(TEXT_192);
d908 1
a908 1
    stringBuffer.append(TEXT_193);
d910 1
a910 1
    stringBuffer.append(TEXT_194);
d912 1
a912 1
    stringBuffer.append(TEXT_195);
d914 1
a914 1
    stringBuffer.append(TEXT_196);
a915 2
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d919 2
d922 1
a922 1
    stringBuffer.append(TEXT_200);
a923 2
    stringBuffer.append(TEXT_201);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d927 1
d929 1
a932 2
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d938 2
a940 2
    stringBuffer.append(TEXT_209);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d946 2
a948 2
    stringBuffer.append(TEXT_213);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d952 1
a952 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d956 2
d959 1
a959 1
    stringBuffer.append(TEXT_218);
a960 2
    stringBuffer.append(TEXT_219);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d970 2
d973 1
a973 1
    stringBuffer.append(TEXT_225);
d975 1
a975 1
    stringBuffer.append(TEXT_226);
@


1.17
log
@Correcting visual ID generation for the links
@
text
@d456 1
a456 1
	if (!nextModelFacet.isPhantomElement()) {
d541 1
a541 1
	if (typeModelFacet.isPhantomElement()) {
@


1.16
log
@#131543 Obsolete code should be eliminated
@
text
@d218 1
a218 1
  protected final String TEXT_199 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, \"\", ";
@


1.15
log
@#138869 Unchecked cast in generated storeTypeModelFacetLinks
@
text
@a346 3
// TODO: move this attribute to the genmodel
final boolean isSynchronizedDiagram = true;

d423 1
a423 1
if (!isSynchronizedDiagram) {
d444 1
a444 1
    if (!isSynchronizedDiagram) {
@


1.14
log
@Suggesting correct diagram file name in wizard.
@
text
@d138 17
a154 17
  protected final String TEXT_119 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_120 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_121 = ") {" + NL + "\t\t\t";
  protected final String TEXT_122 = " dst = (";
  protected final String TEXT_123 = ") structuralFeatureResult;";
  protected final String TEXT_124 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_125 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_126 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_127 = " src = (";
  protected final String TEXT_128 = ") structuralFeatureResult;";
  protected final String TEXT_129 = NL + "\t\t\t";
  protected final String TEXT_130 = " src = container;";
  protected final String TEXT_131 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_132 = ".getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_133 = ".VISUAL_ID == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_134 = NL + "\t\t\t}";
  protected final String TEXT_135 = NL + "\t\t}";
d719 1
a719 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d721 1
a721 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d723 1
a723 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d727 1
a727 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d729 1
a729 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d731 1
a731 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d733 1
a733 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d737 1
a737 1
    		} else {
d741 1
a741 1
    		}
d743 1
a743 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d745 1
a745 1
    stringBuffer.append(importManager.getImportedName(nextLink.getEditPartQualifiedClassName()));
@


1.13
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d25 2
a26 2
  protected final String TEXT_6 = "(IFile selectedModelFile, IWorkbenchPage workbenchPage, IStructuredSelection selection) {" + NL + "\t   \tmySelectedModelFile = selectedModelFile;" + NL + "\t   \tmyWorkbenchPage = workbenchPage;" + NL + "\t   \tmySelection = selection;" + NL + "\t}" + NL + "\t     \t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection);" + NL + "\t\tmyFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_7 = "\").lastSegment());" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram and initialize it using specified \" + ";
d373 1
d379 1
d393 1
@


1.12
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d30 1
a30 1
  protected final String TEXT_11 = ".INSTANCE.getDiagramVisualID(diagramModelObject);" + NL + "\t\t\t\tif (diagramVID != ";
d60 1
a60 1
  protected final String TEXT_41 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject);" + NL + "\tswitch (nodeVID) {";
d86 1
a86 1
  protected final String TEXT_67 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
d151 1
a151 1
  protected final String TEXT_132 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
d175 1
a175 1
  protected final String TEXT_156 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
d205 1
a205 1
  protected final String TEXT_186 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
@


1.11
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d31 1
a31 1
  protected final String TEXT_12 = ") {" + NL + "\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, ";
d62 1
a62 1
  protected final String TEXT_43 = ": {" + NL + "\t\t";
d64 57
a120 57
  protected final String TEXT_45 = ".VISUAL_ID, ";
  protected final String TEXT_46 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_47 = "Children(nextNode, nextResourceObject);";
  protected final String TEXT_48 = NL;
  protected final String TEXT_49 = "\t\tbreak;" + NL + "\t}";
  protected final String TEXT_50 = "\t}" + NL + "}";
  protected final String TEXT_51 = "\t\t" + NL + "\tcreateLinks(diagram);" + NL + "}";
  protected final String TEXT_52 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_53 = "Children(";
  protected final String TEXT_54 = " viewObject, ";
  protected final String TEXT_55 = " modelObject) {";
  protected final String TEXT_56 = NL;
  protected final String TEXT_57 = "\t";
  protected final String TEXT_58 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_59 = "\tfor (";
  protected final String TEXT_60 = " values = ";
  protected final String TEXT_61 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_62 = ") values.next();";
  protected final String TEXT_63 = NL + "\tnextValue = ";
  protected final String TEXT_64 = ";";
  protected final String TEXT_65 = NL + "\tnodeVID = ";
  protected final String TEXT_66 = ".INSTANCE.getNodeVisualID(viewObject, nextValue);";
  protected final String TEXT_67 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_68 = NL + "\tcase ";
  protected final String TEXT_69 = ": {";
  protected final String TEXT_70 = NL + "\tif (";
  protected final String TEXT_71 = " == nodeVID) {";
  protected final String TEXT_72 = NL + "\t\t";
  protected final String TEXT_73 = " nextNode = ViewService.createNode(viewObject, nextValue, ";
  protected final String TEXT_74 = ".VISUAL_ID, ";
  protected final String TEXT_75 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_76 = "Children(nextNode, nextValue);";
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "\t\tbreak;";
  protected final String TEXT_79 = "\t}";
  protected final String TEXT_80 = NL + "\t}";
  protected final String TEXT_81 = NL + "\t}";
  protected final String TEXT_82 = NL + "\t";
  protected final String TEXT_83 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_84 = ".VISUAL_ID);" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_85 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_86 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_87 = NL + "}";
  protected final String TEXT_88 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_89 = " getCompartment(";
  protected final String TEXT_90 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_91 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_92 = " nextView = (";
  protected final String TEXT_93 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_94 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_95 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = NL;
  protected final String TEXT_98 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_99 = " container, ";
  protected final String TEXT_100 = " diagram) {" + NL + "\t";
  protected final String TEXT_101 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
d122 45
a166 45
  protected final String TEXT_103 = " containerMetaclass) {\t";
  protected final String TEXT_104 = "\t\t" + NL + "\tif (";
  protected final String TEXT_105 = ".eINSTANCE.get";
  protected final String TEXT_106 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_107 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_108 = " values = ";
  protected final String TEXT_109 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_110 = " nextValue = ((";
  protected final String TEXT_111 = ") values.next());";
  protected final String TEXT_112 = NL + "\t\t";
  protected final String TEXT_113 = " nextValue = (";
  protected final String TEXT_114 = ") ";
  protected final String TEXT_115 = ";";
  protected final String TEXT_116 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_117 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_118 = ") {" + NL + "\t\t\t";
  protected final String TEXT_119 = " dst = (";
  protected final String TEXT_120 = ") structuralFeatureResult;";
  protected final String TEXT_121 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_122 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_123 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " src = (";
  protected final String TEXT_125 = ") structuralFeatureResult;";
  protected final String TEXT_126 = NL + "\t\t\t";
  protected final String TEXT_127 = " src = container;";
  protected final String TEXT_128 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_129 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_130 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_131 = NL + "\t\t\t}";
  protected final String TEXT_132 = NL + "\t\t}";
  protected final String TEXT_133 = NL + "\t\t}";
  protected final String TEXT_134 = NL + "\t}";
  protected final String TEXT_135 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_136 = " container, ";
  protected final String TEXT_137 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_138 = NL;
  protected final String TEXT_139 = "\tif (";
  protected final String TEXT_140 = ".eINSTANCE.get";
  protected final String TEXT_141 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_142 = NL + "\t\tfor (";
  protected final String TEXT_143 = " destinations = ";
  protected final String TEXT_144 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_145 = " nextDestination = (";
  protected final String TEXT_146 = ") destinations.next();";
  protected final String TEXT_147 = NL + "\t\t";
d168 18
a185 18
  protected final String TEXT_149 = ") ";
  protected final String TEXT_150 = ";";
  protected final String TEXT_151 = NL + "\t\tif (";
  protected final String TEXT_152 = " == ";
  protected final String TEXT_153 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_154 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_155 = ".";
  protected final String TEXT_156 = ", ";
  protected final String TEXT_157 = "));";
  protected final String TEXT_158 = NL + "\t\t";
  protected final String TEXT_159 = " nextNode = ViewService.createNode(diagram, nextDestination, ";
  protected final String TEXT_160 = ".VISUAL_ID, ";
  protected final String TEXT_161 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_162 = "Children(nextNode, nextDestination);";
  protected final String TEXT_163 = NL;
  protected final String TEXT_164 = NL + "\t\t}";
  protected final String TEXT_165 = NL + "\t\t}";
  protected final String TEXT_166 = NL + "\t}";
d187 42
a228 42
  protected final String TEXT_168 = "\tif (";
  protected final String TEXT_169 = ".eINSTANCE.get";
  protected final String TEXT_170 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_171 = NL + "\t\tfor (";
  protected final String TEXT_172 = " destinations = ";
  protected final String TEXT_173 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_174 = " nextDestination = (";
  protected final String TEXT_175 = ") destinations.next();";
  protected final String TEXT_176 = NL + "\t\t";
  protected final String TEXT_177 = " nextDestination = (";
  protected final String TEXT_178 = ") ";
  protected final String TEXT_179 = ";";
  protected final String TEXT_180 = NL + "\t\tif (";
  protected final String TEXT_181 = " == ";
  protected final String TEXT_182 = ".INSTANCE.getNodeVisualID(diagram, nextDestination)) {";
  protected final String TEXT_183 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_184 = ".";
  protected final String TEXT_185 = ", ";
  protected final String TEXT_186 = "));";
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = NL + "\t\t}";
  protected final String TEXT_189 = NL + "\t\t}";
  protected final String TEXT_190 = NL + "\t}";
  protected final String TEXT_191 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_192 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_193 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_194 = " edge = (";
  protected final String TEXT_195 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, \"\", ";
  protected final String TEXT_196 = ".APPEND, ";
  protected final String TEXT_197 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_198 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_199 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_200 = NL;
  protected final String TEXT_201 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_202 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_203 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_204 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_205 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_206 = " source, ";
  protected final String TEXT_207 = " destination, ";
  protected final String TEXT_208 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_209 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
d231 15
a245 11
  protected final String TEXT_212 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_213 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_214 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_215 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_216 = " source, ";
  protected final String TEXT_217 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_218 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_219 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_220 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_221 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_222 = "\t" + NL + "" + NL + "}";
d413 1
a413 1
    stringBuffer.append(genDiagram.getVisualID());
d497 1
a497 1
    stringBuffer.append(phantomNode.getVisualID());
d501 2
d504 1
a504 1
    stringBuffer.append(TEXT_45);
d506 1
a506 1
    stringBuffer.append(TEXT_46);
a507 1
    stringBuffer.append(TEXT_47);
d510 1
d514 1
a514 1
    stringBuffer.append(TEXT_50);
d519 1
a519 1
    stringBuffer.append(TEXT_51);
d526 1
a526 1
    stringBuffer.append(TEXT_52);
d528 1
a528 1
    stringBuffer.append(TEXT_53);
d530 1
a530 1
    stringBuffer.append(TEXT_54);
d532 1
a532 1
    stringBuffer.append(TEXT_55);
d535 1
a535 1
    stringBuffer.append(TEXT_56);
d555 1
a555 1
    stringBuffer.append(TEXT_57);
d557 1
a557 1
    stringBuffer.append(TEXT_58);
d567 1
a567 1
    stringBuffer.append(TEXT_59);
d569 1
a569 1
    stringBuffer.append(TEXT_60);
d571 1
a571 1
    stringBuffer.append(TEXT_61);
d573 1
a573 1
    stringBuffer.append(TEXT_62);
d575 1
a575 1
    stringBuffer.append(TEXT_63);
d577 1
a577 1
    stringBuffer.append(TEXT_64);
d579 1
a579 1
    stringBuffer.append(TEXT_65);
d581 1
a581 1
    stringBuffer.append(TEXT_66);
d584 1
a584 1
    stringBuffer.append(TEXT_67);
a589 2
    stringBuffer.append(TEXT_68);
    stringBuffer.append(nextNode.getVisualID());
d591 2
a593 2
    stringBuffer.append(TEXT_70);
    stringBuffer.append(nextNode.getVisualID());
d595 2
d598 1
a598 1
    stringBuffer.append(TEXT_72);
a599 2
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName(nextNode.getEditPartQualifiedClassName()));
d601 1
a601 1
    stringBuffer.append(pluginActivatorClass);
d603 1
a603 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d605 1
d607 3
d611 1
a611 1
    stringBuffer.append(TEXT_78);
d613 1
a613 1
    stringBuffer.append(TEXT_79);
d616 1
a616 1
    stringBuffer.append(TEXT_80);
d619 1
a619 1
    stringBuffer.append(TEXT_81);
d630 1
a630 1
    stringBuffer.append(TEXT_82);
d632 3
a634 1
    stringBuffer.append(TEXT_83);
d636 1
a636 1
    stringBuffer.append(TEXT_84);
d638 1
a638 1
    stringBuffer.append(TEXT_85);
d644 1
a644 1
    stringBuffer.append(TEXT_86);
d646 1
a646 1
    stringBuffer.append(TEXT_87);
d652 1
a652 1
    stringBuffer.append(TEXT_88);
d654 1
a654 1
    stringBuffer.append(TEXT_89);
d656 1
a656 1
    stringBuffer.append(TEXT_90);
d658 1
a658 1
    stringBuffer.append(TEXT_91);
d660 1
a660 1
    stringBuffer.append(TEXT_92);
d662 1
a662 1
    stringBuffer.append(TEXT_93);
d664 1
a664 1
    stringBuffer.append(TEXT_94);
d666 1
a666 1
    stringBuffer.append(TEXT_95);
d670 1
a670 1
    stringBuffer.append(TEXT_96);
d672 2
a673 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(TEXT_98);
d675 1
a675 1
    stringBuffer.append(TEXT_99);
d677 1
a677 1
    stringBuffer.append(TEXT_100);
d679 1
a679 1
    stringBuffer.append(TEXT_101);
d681 1
a681 1
    stringBuffer.append(TEXT_102);
d683 1
a683 1
    stringBuffer.append(TEXT_103);
d691 1
a691 1
    stringBuffer.append(TEXT_104);
d693 1
a693 1
    stringBuffer.append(TEXT_105);
d695 1
a695 1
    stringBuffer.append(TEXT_106);
d697 1
a697 1
    stringBuffer.append(TEXT_107);
d699 1
a699 1
    stringBuffer.append(TEXT_108);
a700 6
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_111);
    		} else {
d706 1
a706 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d708 1
a708 1
    		}
d710 1
a710 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d712 1
a712 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d714 1
a714 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d716 2
a718 2
    stringBuffer.append(TEXT_120);
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d720 1
a720 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d724 1
a724 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d726 2
a728 2
    stringBuffer.append(TEXT_125);
    		} else {
d732 1
a732 1
    		}
d734 1
a734 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d736 1
a736 1
    stringBuffer.append(nextLink.getVisualID());
d738 6
d745 1
a745 1
    stringBuffer.append(TEXT_131);
d747 1
a747 1
    stringBuffer.append(TEXT_132);
d751 1
a751 1
    stringBuffer.append(TEXT_133);
d755 1
a755 1
    stringBuffer.append(TEXT_134);
d760 1
a760 1
    stringBuffer.append(TEXT_135);
d762 1
a762 1
    stringBuffer.append(TEXT_136);
d764 1
a764 1
    stringBuffer.append(TEXT_137);
d769 1
a769 1
    stringBuffer.append(TEXT_138);
d783 1
a783 1
    stringBuffer.append(TEXT_139);
d785 1
a785 1
    stringBuffer.append(TEXT_140);
d787 1
a787 1
    stringBuffer.append(TEXT_141);
d789 1
a789 1
    stringBuffer.append(TEXT_142);
d791 1
a791 1
    stringBuffer.append(TEXT_143);
a792 6
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_146);
    	} else {
d798 1
a798 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d800 1
a800 2
    	}
    	if (phantomsOnly) {
d802 1
a802 1
    stringBuffer.append(phantomNode.getVisualID());
d804 1
a804 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d807 1
d809 1
a809 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d811 1
a811 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d813 1
a813 1
    stringBuffer.append(nextLink.getVisualID());
d815 6
d822 1
a822 1
    stringBuffer.append(TEXT_158);
d824 3
a826 1
    stringBuffer.append(TEXT_159);
d828 1
a828 1
    stringBuffer.append(TEXT_160);
d830 1
a830 1
    stringBuffer.append(TEXT_161);
d832 1
a832 1
    stringBuffer.append(TEXT_162);
d834 1
a834 1
    stringBuffer.append(TEXT_163);
d836 1
a836 1
    stringBuffer.append(TEXT_164);
d839 1
a839 1
    stringBuffer.append(TEXT_165);
d841 1
a841 1
    stringBuffer.append(TEXT_166);
d848 1
a848 1
    stringBuffer.append(TEXT_167);
d862 1
a862 1
    stringBuffer.append(TEXT_168);
d864 1
a864 1
    stringBuffer.append(TEXT_169);
d866 1
a866 1
    stringBuffer.append(TEXT_170);
d868 1
a868 1
    stringBuffer.append(TEXT_171);
d870 1
a870 1
    stringBuffer.append(TEXT_172);
d872 1
a872 1
    stringBuffer.append(TEXT_173);
d874 1
a874 1
    stringBuffer.append(TEXT_174);
d876 1
a876 1
    stringBuffer.append(TEXT_175);
d878 1
a878 1
    stringBuffer.append(TEXT_176);
d880 1
a880 1
    stringBuffer.append(TEXT_177);
d882 1
a882 1
    stringBuffer.append(TEXT_178);
d884 1
a884 1
    stringBuffer.append(TEXT_179);
a886 8
    stringBuffer.append(TEXT_180);
    stringBuffer.append(phantomNode.getVisualID());
    stringBuffer.append(TEXT_181);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_182);
    	}
    stringBuffer.append(TEXT_183);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d888 1
a888 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d890 1
a890 1
    stringBuffer.append(nextLink.getVisualID());
d892 1
d894 1
a894 1
    	if (phantomsOnly) {
d896 1
a896 2
    	}
	if (genFeature.isListType()) {
d898 1
a898 1
    	}
a899 1
    }
d901 1
a901 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d903 2
a904 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d906 1
a906 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d908 1
a908 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d910 1
a910 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d912 1
a912 1
    stringBuffer.append(pluginActivatorClass);
d914 1
a914 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d916 1
a916 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d918 1
d920 1
a920 3
    
// an inner class 

d922 1
a922 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d924 1
a924 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a925 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d927 3
a929 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d937 1
a937 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d943 1
a943 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d945 1
a945 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d947 1
a947 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d949 2
a951 2
    stringBuffer.append(TEXT_215);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d953 1
a953 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d955 1
a955 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d957 1
a957 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d961 8
d970 1
a970 1
    stringBuffer.append(TEXT_221);
d972 1
a972 1
    stringBuffer.append(TEXT_222);
@


1.10
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d26 2
a27 2
  protected final String TEXT_7 = "\").lastSegment());" + NL + "\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\tmyFileCreationPage.setDescription(\"Create new diagram and initialize it using specified ";
  protected final String TEXT_8 = " model content\");" + NL + "\t\taddPage(myFileCreationPage);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\ttry {" + NL + "\t\t\tdiagramFile.setCharset(\"UTF-8\", new NullProgressMonitor()); //$NON-NLS-1$" + NL + "\t\t} catch (";
d31 2
a32 2
  protected final String TEXT_12 = ") {" + NL + "\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, \"";
  protected final String TEXT_13 = "\", ";
a348 1
final String modelID = editorGen.getModelID();
d401 1
a401 1
    stringBuffer.append(modelID);
d411 1
a411 1
    stringBuffer.append(modelID);
d817 1
a817 1
    stringBuffer.append(pluginActivatorClass);
@


1.9
log
@using M6 to generate code.
@
text
@d60 58
a117 58
  protected final String TEXT_41 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_42 = NL + "\t\tcase ";
  protected final String TEXT_43 = ": {" + NL + "\t\t\t";
  protected final String TEXT_44 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_45 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_46 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_47 = NL;
  protected final String TEXT_48 = "\t}" + NL + "}";
  protected final String TEXT_49 = "\t\t" + NL + "\tcreateLinks(diagram);" + NL + "}";
  protected final String TEXT_50 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_51 = "Children(";
  protected final String TEXT_52 = " viewObject, ";
  protected final String TEXT_53 = " modelObject) {";
  protected final String TEXT_54 = NL;
  protected final String TEXT_55 = "\t";
  protected final String TEXT_56 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_57 = "\tfor (";
  protected final String TEXT_58 = " values = ";
  protected final String TEXT_59 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_60 = ") values.next();";
  protected final String TEXT_61 = NL + "\tnextValue = ";
  protected final String TEXT_62 = ";";
  protected final String TEXT_63 = NL + "\tnodeVID = ";
  protected final String TEXT_64 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");";
  protected final String TEXT_65 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_66 = NL + "\tcase ";
  protected final String TEXT_67 = ": {";
  protected final String TEXT_68 = NL + "\tif (";
  protected final String TEXT_69 = " == nodeVID) {";
  protected final String TEXT_70 = NL + "\t\t";
  protected final String TEXT_71 = " nextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_72 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_73 = "Children(nextNode, nextValue);";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = "\t\tbreak;";
  protected final String TEXT_76 = "\t}";
  protected final String TEXT_77 = NL + "\t}";
  protected final String TEXT_78 = NL + "\t}";
  protected final String TEXT_79 = NL + "\t";
  protected final String TEXT_80 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_81 = ");" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_82 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_83 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_84 = NL + "}";
  protected final String TEXT_85 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_86 = " getCompartment(";
  protected final String TEXT_87 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_88 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_89 = " nextView = (";
  protected final String TEXT_90 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_91 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_92 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_93 = NL;
  protected final String TEXT_94 = NL;
  protected final String TEXT_95 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_96 = " container, ";
  protected final String TEXT_97 = " diagram) {" + NL + "\t";
  protected final String TEXT_98 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
d119 45
a163 45
  protected final String TEXT_100 = " containerMetaclass) {\t";
  protected final String TEXT_101 = "\t\t" + NL + "\tif (";
  protected final String TEXT_102 = ".eINSTANCE.get";
  protected final String TEXT_103 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_104 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_105 = " values = ";
  protected final String TEXT_106 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_107 = " nextValue = ((";
  protected final String TEXT_108 = ") values.next());";
  protected final String TEXT_109 = NL + "\t\t";
  protected final String TEXT_110 = " nextValue = (";
  protected final String TEXT_111 = ") ";
  protected final String TEXT_112 = ";";
  protected final String TEXT_113 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_114 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_115 = ") {" + NL + "\t\t\t";
  protected final String TEXT_116 = " dst = (";
  protected final String TEXT_117 = ") structuralFeatureResult;";
  protected final String TEXT_118 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_119 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_120 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_121 = " src = (";
  protected final String TEXT_122 = ") structuralFeatureResult;";
  protected final String TEXT_123 = NL + "\t\t\t";
  protected final String TEXT_124 = " src = container;";
  protected final String TEXT_125 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_126 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_127 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_128 = NL + "\t\t\t}";
  protected final String TEXT_129 = NL + "\t\t}";
  protected final String TEXT_130 = NL + "\t\t}";
  protected final String TEXT_131 = NL + "\t}";
  protected final String TEXT_132 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_133 = " container, ";
  protected final String TEXT_134 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_135 = NL;
  protected final String TEXT_136 = "\tif (";
  protected final String TEXT_137 = ".eINSTANCE.get";
  protected final String TEXT_138 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_139 = NL + "\t\tfor (";
  protected final String TEXT_140 = " destinations = ";
  protected final String TEXT_141 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_142 = " nextDestination = (";
  protected final String TEXT_143 = ") destinations.next();";
  protected final String TEXT_144 = NL + "\t\t";
d165 17
a181 17
  protected final String TEXT_146 = ") ";
  protected final String TEXT_147 = ";";
  protected final String TEXT_148 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_149 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_150 = " == nodeVID) {";
  protected final String TEXT_151 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_152 = ".";
  protected final String TEXT_153 = ", ";
  protected final String TEXT_154 = "));";
  protected final String TEXT_155 = NL + "\t\t";
  protected final String TEXT_156 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_157 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_158 = "Children(nextNode, nextDestination);";
  protected final String TEXT_159 = NL;
  protected final String TEXT_160 = NL + "\t\t}";
  protected final String TEXT_161 = NL + "\t\t}";
  protected final String TEXT_162 = NL + "\t}";
d183 42
a224 42
  protected final String TEXT_164 = "\tif (";
  protected final String TEXT_165 = ".eINSTANCE.get";
  protected final String TEXT_166 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_167 = NL + "\t\tfor (";
  protected final String TEXT_168 = " destinations = ";
  protected final String TEXT_169 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_170 = " nextDestination = (";
  protected final String TEXT_171 = ") destinations.next();";
  protected final String TEXT_172 = NL + "\t\t";
  protected final String TEXT_173 = " nextDestination = (";
  protected final String TEXT_174 = ") ";
  protected final String TEXT_175 = ";";
  protected final String TEXT_176 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_177 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_178 = " == nodeVID) {";
  protected final String TEXT_179 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_180 = ".";
  protected final String TEXT_181 = ", ";
  protected final String TEXT_182 = "));";
  protected final String TEXT_183 = NL;
  protected final String TEXT_184 = NL + "\t\t}";
  protected final String TEXT_185 = NL + "\t\t}";
  protected final String TEXT_186 = NL + "\t}";
  protected final String TEXT_187 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_188 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_189 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_190 = " edge = (";
  protected final String TEXT_191 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, \"\", ";
  protected final String TEXT_192 = ".APPEND, ";
  protected final String TEXT_193 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_194 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_195 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_196 = NL;
  protected final String TEXT_197 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_198 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_199 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_200 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_201 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_202 = " source, ";
  protected final String TEXT_203 = " destination, ";
  protected final String TEXT_204 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_205 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
d227 15
a241 11
  protected final String TEXT_208 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_209 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_210 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_211 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_212 = " source, ";
  protected final String TEXT_213 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_214 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_215 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_216 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_217 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_218 = "\t" + NL + "" + NL + "}";
a487 1
    }
d489 3
a491 2
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();
d498 2
d501 1
a501 1
    stringBuffer.append(TEXT_45);
a502 4
    stringBuffer.append(TEXT_46);
    
	}

d504 3
a506 1
    
d509 1
a509 1
    stringBuffer.append(TEXT_48);
d514 1
a514 1
    stringBuffer.append(TEXT_49);
d521 1
a521 1
    stringBuffer.append(TEXT_50);
d523 1
a523 1
    stringBuffer.append(TEXT_51);
d525 1
a525 1
    stringBuffer.append(TEXT_52);
d527 1
a527 1
    stringBuffer.append(TEXT_53);
d530 1
a530 1
    stringBuffer.append(TEXT_54);
d550 1
a550 1
    stringBuffer.append(TEXT_55);
d552 1
a552 1
    stringBuffer.append(TEXT_56);
d562 1
a562 1
    stringBuffer.append(TEXT_57);
d564 1
a564 1
    stringBuffer.append(TEXT_58);
d566 1
a566 1
    stringBuffer.append(TEXT_59);
d568 1
a568 1
    stringBuffer.append(TEXT_60);
d570 1
a570 1
    stringBuffer.append(TEXT_61);
d572 1
a572 1
    stringBuffer.append(TEXT_62);
d574 1
a574 1
    stringBuffer.append(TEXT_63);
d576 1
a576 1
    stringBuffer.append(TEXT_64);
d579 1
a579 1
    stringBuffer.append(TEXT_65);
a584 4
    stringBuffer.append(TEXT_66);
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_67);
    		} else {
d588 1
a588 1
    		}
d590 1
a590 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d592 1
a592 1
    stringBuffer.append(pluginActivatorClass);
d594 1
a594 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d596 1
d598 5
d604 1
a604 1
    stringBuffer.append(TEXT_75);
d606 1
a606 1
    stringBuffer.append(TEXT_76);
d609 1
a609 1
    stringBuffer.append(TEXT_77);
d612 1
a612 1
    stringBuffer.append(TEXT_78);
a621 2
			String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
			String compartmentViewId = semanticHintsClassName + '.' + nextNode.getUniqueIdentifier() + "Compartments." + nextCompartment.getSemanticHintFieldName();
d623 1
a623 1
    stringBuffer.append(TEXT_79);
d625 3
a627 3
    stringBuffer.append(TEXT_80);
    stringBuffer.append(compartmentViewId);
    stringBuffer.append(TEXT_81);
d629 1
a629 1
    stringBuffer.append(TEXT_82);
d635 1
a635 1
    stringBuffer.append(TEXT_83);
d637 1
a637 1
    stringBuffer.append(TEXT_84);
d643 1
a643 1
    stringBuffer.append(TEXT_85);
d645 1
a645 1
    stringBuffer.append(TEXT_86);
d647 1
a647 1
    stringBuffer.append(TEXT_87);
d649 1
a649 1
    stringBuffer.append(TEXT_88);
d651 1
a651 1
    stringBuffer.append(TEXT_89);
d653 1
a653 1
    stringBuffer.append(TEXT_90);
d655 1
a655 1
    stringBuffer.append(TEXT_91);
d657 1
a657 1
    stringBuffer.append(TEXT_92);
d661 1
a661 1
    stringBuffer.append(TEXT_93);
d663 2
a664 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(TEXT_95);
d666 1
a666 1
    stringBuffer.append(TEXT_96);
d668 1
a668 1
    stringBuffer.append(TEXT_97);
d670 1
a670 1
    stringBuffer.append(TEXT_98);
d672 1
a672 1
    stringBuffer.append(TEXT_99);
d674 1
a674 1
    stringBuffer.append(TEXT_100);
d682 1
a682 1
    stringBuffer.append(TEXT_101);
d684 1
a684 1
    stringBuffer.append(TEXT_102);
d686 1
a686 1
    stringBuffer.append(TEXT_103);
d688 1
a688 1
    stringBuffer.append(TEXT_104);
d690 1
a690 1
    stringBuffer.append(TEXT_105);
a691 6
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_108);
    		} else {
d697 1
a697 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d699 1
a699 1
    		}
d701 1
a701 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d707 2
a709 2
    stringBuffer.append(TEXT_117);
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d711 1
a711 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d715 1
a715 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d717 2
a719 2
    stringBuffer.append(TEXT_122);
    		} else {
d723 6
d730 1
a730 1
    stringBuffer.append(TEXT_125);
d732 1
a732 1
    stringBuffer.append(TEXT_126);
d734 1
a734 1
    stringBuffer.append(TEXT_127);
d736 1
a736 1
    stringBuffer.append(TEXT_128);
d738 1
a738 1
    stringBuffer.append(TEXT_129);
d742 1
a742 1
    stringBuffer.append(TEXT_130);
d746 1
a746 1
    stringBuffer.append(TEXT_131);
d751 1
a751 1
    stringBuffer.append(TEXT_132);
d753 1
a753 1
    stringBuffer.append(TEXT_133);
d755 1
a755 1
    stringBuffer.append(TEXT_134);
d760 1
a760 1
    stringBuffer.append(TEXT_135);
d774 1
a774 1
    stringBuffer.append(TEXT_136);
d776 1
a776 1
    stringBuffer.append(TEXT_137);
d778 1
a778 1
    stringBuffer.append(TEXT_138);
d780 1
a780 1
    stringBuffer.append(TEXT_139);
d782 1
a782 1
    stringBuffer.append(TEXT_140);
a783 6
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_143);
    	} else {
d789 1
a789 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d791 1
a791 2
    	}
    	if (phantomsOnly) {
d793 1
a793 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d795 1
a795 1
    stringBuffer.append(phantomNode.getVisualID());
d798 1
d800 6
d807 1
a807 1
    stringBuffer.append(TEXT_152);
d809 1
a809 1
    stringBuffer.append(TEXT_153);
d811 1
a811 1
    stringBuffer.append(TEXT_154);
d813 1
a813 1
    stringBuffer.append(TEXT_155);
d815 3
a817 1
    stringBuffer.append(TEXT_156);
d819 1
a819 1
    stringBuffer.append(TEXT_157);
d821 1
a821 1
    stringBuffer.append(TEXT_158);
d823 1
a823 1
    stringBuffer.append(TEXT_159);
d825 1
a825 1
    stringBuffer.append(TEXT_160);
d828 1
a828 1
    stringBuffer.append(TEXT_161);
d830 1
a830 1
    stringBuffer.append(TEXT_162);
d837 1
a837 1
    stringBuffer.append(TEXT_163);
d851 1
a851 1
    stringBuffer.append(TEXT_164);
d853 1
a853 1
    stringBuffer.append(TEXT_165);
d855 1
a855 1
    stringBuffer.append(TEXT_166);
d857 1
a857 1
    stringBuffer.append(TEXT_167);
d859 1
a859 1
    stringBuffer.append(TEXT_168);
d861 1
a861 1
    stringBuffer.append(TEXT_169);
d863 1
a863 1
    stringBuffer.append(TEXT_170);
d865 1
a865 1
    stringBuffer.append(TEXT_171);
d867 1
a867 1
    stringBuffer.append(TEXT_172);
d869 1
a869 1
    stringBuffer.append(TEXT_173);
d871 1
a871 1
    stringBuffer.append(TEXT_174);
d873 1
a873 1
    stringBuffer.append(TEXT_175);
d876 3
a878 1
    stringBuffer.append(TEXT_176);
d880 1
a880 3
    stringBuffer.append(TEXT_177);
    stringBuffer.append(phantomNode.getVisualID());
    stringBuffer.append(TEXT_178);
d882 1
a882 1
    stringBuffer.append(TEXT_179);
d884 1
a884 1
    stringBuffer.append(TEXT_180);
d886 1
a886 1
    stringBuffer.append(TEXT_181);
d888 2
a889 2
    stringBuffer.append(TEXT_182);
    stringBuffer.append(TEXT_183);
d891 1
a891 1
    stringBuffer.append(TEXT_184);
d894 1
a894 1
    stringBuffer.append(TEXT_185);
d896 1
a896 1
    stringBuffer.append(TEXT_186);
d898 1
a898 1
    stringBuffer.append(TEXT_187);
d900 1
a900 1
    stringBuffer.append(TEXT_188);
d902 1
a902 1
    stringBuffer.append(TEXT_189);
d904 1
a904 1
    stringBuffer.append(TEXT_190);
d906 1
a906 1
    stringBuffer.append(TEXT_191);
d908 1
a908 1
    stringBuffer.append(TEXT_192);
d910 1
a910 1
    stringBuffer.append(TEXT_193);
d912 1
a912 1
    stringBuffer.append(TEXT_194);
d914 2
a915 2
    stringBuffer.append(TEXT_195);
    stringBuffer.append(TEXT_196);
a918 8
    stringBuffer.append(TEXT_197);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_198);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_199);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_200);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d926 1
a926 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d932 1
a932 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d934 1
a934 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d936 1
a936 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d938 2
a940 2
    stringBuffer.append(TEXT_211);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d942 1
a942 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d944 1
a944 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d946 1
a946 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d950 8
d959 1
a959 1
    stringBuffer.append(TEXT_217);
d961 1
a961 1
    stringBuffer.append(TEXT_218);
@


1.8
log
@restore generators
@
text
@d337 1
a337 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@#134095 do not store compiled templates in cvs
@
text
@d337 1
a337 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.6
log
@Switching to eclipse M6.
@
text
@@


1.5
log
@#132465 Bidi3.2: [HCG]Encoding of the mindmap diagram is always ASCII
@
text
@d337 1
a337 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@#134737 Create connections (links) to the inner elements in CanonicalEditPolicy/InitDiagramFileAction
#134751 Generated code should return semantic children in a correct sequence from CanonicalEditPolicy.getSemanticChildrenList()
@
text
@d27 211
a237 209
  protected final String TEXT_8 = " model content\");" + NL + "\t\taddPage(myFileCreationPage);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\t\t" + NL + "\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "" + NL + "\t\tList affectedFiles = new LinkedList();" + NL + "\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\tint diagramVID = ";
  protected final String TEXT_9 = ".INSTANCE.getDiagramVisualID(diagramModelObject);" + NL + "\t\t\t\tif (diagramVID != ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, \"";
  protected final String TEXT_11 = "\", ";
  protected final String TEXT_12 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tdiagramResource.getContents().add(diagram);";
  protected final String TEXT_13 = NL + "\t\t\t\tdiagramResource.getContents().add(diagram.getElement());";
  protected final String TEXT_14 = NL + "\t\t\t\tinitDiagramContents(diagram, diagramModelObject);";
  protected final String TEXT_15 = NL + "\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\t\t" + NL + "\t\ttry {" + NL + "\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\tIDE.openEditor(myWorkbenchPage, diagramFile);" + NL + "\t\t} catch (ExecutionException e) {" + NL + "\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t} catch (PartInitException ex) {" + NL + "\t\t\t";
  protected final String TEXT_18 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t}\t\t\t" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "\t */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_19 = NL + "\t\tResourceSet resourceSet = new ";
  protected final String TEXT_20 = "();";
  protected final String TEXT_21 = NL + "\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_22 = NL + "\t\ttry {" + NL + "\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (WrappedException ex) {" + NL + "\t\t\t";
  protected final String TEXT_23 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_27 = " myLinkDescriptors = new ";
  protected final String TEXT_28 = "();" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_29 = " myEObject2NodeMap = new ";
  protected final String TEXT_30 = "();" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(";
  protected final String TEXT_31 = " diagram, ";
  protected final String TEXT_32 = " diagramModelObject) {" + NL + "\tcreate";
  protected final String TEXT_33 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = " resource = diagramModelObject.eResource();" + NL + "for (";
  protected final String TEXT_36 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t";
  protected final String TEXT_37 = " nextResourceObject = (";
  protected final String TEXT_38 = ") it.next();" + NL + "\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\tcontinue;" + NL + "\t}" + NL + "\tint nodeVID = ";
  protected final String TEXT_39 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\tswitch (nodeVID) {";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ": {" + NL + "\t\t\t";
  protected final String TEXT_42 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_43 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_44 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\tbreak;" + NL + "\t\t}";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = "\t}" + NL + "}";
  protected final String TEXT_47 = "\t\t" + NL + "\tcreateLinks(diagram);" + NL + "}";
  protected final String TEXT_48 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_49 = "Children(";
  protected final String TEXT_50 = " viewObject, ";
  protected final String TEXT_51 = " modelObject) {";
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = "\t";
  protected final String TEXT_54 = " nextValue;" + NL + "\tint nodeVID;";
  protected final String TEXT_55 = "\tfor (";
  protected final String TEXT_56 = " values = ";
  protected final String TEXT_57 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (";
  protected final String TEXT_58 = ") values.next();";
  protected final String TEXT_59 = NL + "\tnextValue = ";
  protected final String TEXT_60 = ";";
  protected final String TEXT_61 = NL + "\tnodeVID = ";
  protected final String TEXT_62 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");";
  protected final String TEXT_63 = NL + "\tswitch (nodeVID) {";
  protected final String TEXT_64 = NL + "\tcase ";
  protected final String TEXT_65 = ": {";
  protected final String TEXT_66 = NL + "\tif (";
  protected final String TEXT_67 = " == nodeVID) {";
  protected final String TEXT_68 = NL + "\t\t";
  protected final String TEXT_69 = " nextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_70 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_71 = "Children(nextNode, nextValue);";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = "\t\tbreak;";
  protected final String TEXT_74 = "\t}";
  protected final String TEXT_75 = NL + "\t}";
  protected final String TEXT_76 = NL + "\t}";
  protected final String TEXT_77 = NL + "\t";
  protected final String TEXT_78 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_79 = ");" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_80 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_81 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_82 = NL + "}";
  protected final String TEXT_83 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_84 = " getCompartment(";
  protected final String TEXT_85 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_86 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_87 = " nextView = (";
  protected final String TEXT_88 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_89 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_90 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_94 = " container, ";
  protected final String TEXT_95 = " diagram) {" + NL + "\t";
  protected final String TEXT_96 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_97 = " container, ";
  protected final String TEXT_98 = " containerMetaclass) {\t";
  protected final String TEXT_99 = "\t\t" + NL + "\tif (";
  protected final String TEXT_100 = ".eINSTANCE.get";
  protected final String TEXT_101 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_102 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_103 = " values = ";
  protected final String TEXT_104 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_105 = " nextValue = ((";
  protected final String TEXT_106 = ") values.next());";
  protected final String TEXT_107 = NL + "\t\t";
  protected final String TEXT_108 = " nextValue = (";
  protected final String TEXT_109 = ") ";
  protected final String TEXT_110 = ";";
  protected final String TEXT_111 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_112 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_113 = ") {" + NL + "\t\t\t";
  protected final String TEXT_114 = " dst = (";
  protected final String TEXT_115 = ") structuralFeatureResult;";
  protected final String TEXT_116 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_117 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_118 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_119 = " src = (";
  protected final String TEXT_120 = ") structuralFeatureResult;";
  protected final String TEXT_121 = NL + "\t\t\t";
  protected final String TEXT_122 = " src = container;";
  protected final String TEXT_123 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_124 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_125 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_126 = NL + "\t\t\t}";
  protected final String TEXT_127 = NL + "\t\t}";
  protected final String TEXT_128 = NL + "\t\t}";
  protected final String TEXT_129 = NL + "\t}";
  protected final String TEXT_130 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_131 = " container, ";
  protected final String TEXT_132 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_133 = NL;
  protected final String TEXT_134 = "\tif (";
  protected final String TEXT_135 = ".eINSTANCE.get";
  protected final String TEXT_136 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_137 = NL + "\t\tfor (";
  protected final String TEXT_138 = " destinations = ";
  protected final String TEXT_139 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_140 = " nextDestination = (";
  protected final String TEXT_141 = ") destinations.next();";
  protected final String TEXT_142 = NL + "\t\t";
  protected final String TEXT_143 = " nextDestination = (";
  protected final String TEXT_144 = ") ";
  protected final String TEXT_145 = ";";
  protected final String TEXT_146 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_147 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_148 = " == nodeVID) {";
  protected final String TEXT_149 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_150 = ".";
  protected final String TEXT_151 = ", ";
  protected final String TEXT_152 = "));";
  protected final String TEXT_153 = NL + "\t\t";
  protected final String TEXT_154 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_155 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_156 = "Children(nextNode, nextDestination);";
  protected final String TEXT_157 = NL;
  protected final String TEXT_158 = NL + "\t\t}";
  protected final String TEXT_159 = NL + "\t\t}";
  protected final String TEXT_160 = NL + "\t}";
  protected final String TEXT_161 = NL;
  protected final String TEXT_162 = "\tif (";
  protected final String TEXT_163 = ".eINSTANCE.get";
  protected final String TEXT_164 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_165 = NL + "\t\tfor (";
  protected final String TEXT_166 = " destinations = ";
  protected final String TEXT_167 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_168 = " nextDestination = (";
  protected final String TEXT_169 = ") destinations.next();";
  protected final String TEXT_170 = NL + "\t\t";
  protected final String TEXT_171 = " nextDestination = (";
  protected final String TEXT_172 = ") ";
  protected final String TEXT_173 = ";";
  protected final String TEXT_174 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_175 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_176 = " == nodeVID) {";
  protected final String TEXT_177 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_178 = ".";
  protected final String TEXT_179 = ", ";
  protected final String TEXT_180 = "));";
  protected final String TEXT_181 = NL;
  protected final String TEXT_182 = NL + "\t\t}";
  protected final String TEXT_183 = NL + "\t\t}";
  protected final String TEXT_184 = NL + "\t}";
  protected final String TEXT_185 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_186 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_187 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_188 = " edge = (";
  protected final String TEXT_189 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, \"\", ";
  protected final String TEXT_190 = ".APPEND, ";
  protected final String TEXT_191 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_192 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_193 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_194 = NL;
  protected final String TEXT_195 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_196 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_197 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_198 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_199 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_200 = " source, ";
  protected final String TEXT_201 = " destination, ";
  protected final String TEXT_202 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_203 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_204 = " source, ";
  protected final String TEXT_205 = " destination, ";
  protected final String TEXT_206 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_207 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_208 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_209 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_210 = " source, ";
  protected final String TEXT_211 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_212 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_213 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_214 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_215 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_216 = "\t" + NL + "" + NL + "}";
d400 4
d405 1
a405 1
    stringBuffer.append(TEXT_9);
d407 1
a407 1
    stringBuffer.append(TEXT_10);
d409 1
a409 1
    stringBuffer.append(TEXT_11);
d411 1
a411 1
    stringBuffer.append(TEXT_12);
d413 1
a413 1
    stringBuffer.append(TEXT_13);
d418 1
a418 1
    stringBuffer.append(TEXT_14);
d420 1
a420 1
    stringBuffer.append(TEXT_15);
d422 1
a422 1
    stringBuffer.append(TEXT_16);
d424 1
a424 1
    stringBuffer.append(TEXT_17);
d426 1
a426 1
    stringBuffer.append(TEXT_18);
d428 1
a428 1
    stringBuffer.append(TEXT_19);
d430 1
a430 1
    stringBuffer.append(TEXT_20);
d432 1
a432 1
    stringBuffer.append(TEXT_21);
d434 1
a434 1
    stringBuffer.append(TEXT_22);
d436 1
a436 1
    stringBuffer.append(TEXT_23);
d438 1
a438 1
    stringBuffer.append(TEXT_24);
d442 1
a442 1
    stringBuffer.append(TEXT_25);
d455 1
a455 1
    stringBuffer.append(TEXT_26);
d457 1
a457 1
    stringBuffer.append(TEXT_27);
d459 1
a459 1
    stringBuffer.append(TEXT_28);
d461 1
a461 1
    stringBuffer.append(TEXT_29);
d463 1
a463 1
    stringBuffer.append(TEXT_30);
d465 1
a465 1
    stringBuffer.append(TEXT_31);
d467 1
a467 1
    stringBuffer.append(TEXT_32);
d469 2
a470 2
    stringBuffer.append(TEXT_33);
    stringBuffer.append(TEXT_34);
d475 1
a475 1
    stringBuffer.append(TEXT_35);
d477 1
a477 1
    stringBuffer.append(TEXT_36);
d479 1
a479 1
    stringBuffer.append(TEXT_37);
d481 1
a481 1
    stringBuffer.append(TEXT_38);
d483 1
a483 1
    stringBuffer.append(TEXT_39);
d489 1
a489 1
    stringBuffer.append(TEXT_40);
d491 1
a491 1
    stringBuffer.append(TEXT_41);
d493 1
a493 1
    stringBuffer.append(TEXT_42);
d495 1
a495 1
    stringBuffer.append(TEXT_43);
d497 1
a497 1
    stringBuffer.append(TEXT_44);
d501 1
a501 1
    stringBuffer.append(TEXT_45);
d505 1
a505 1
    stringBuffer.append(TEXT_46);
d510 1
a510 1
    stringBuffer.append(TEXT_47);
d517 1
a517 1
    stringBuffer.append(TEXT_48);
d519 1
a519 1
    stringBuffer.append(TEXT_49);
d521 1
a521 1
    stringBuffer.append(TEXT_50);
d523 1
a523 1
    stringBuffer.append(TEXT_51);
d526 1
a526 1
    stringBuffer.append(TEXT_52);
d546 1
a546 1
    stringBuffer.append(TEXT_53);
d548 1
a548 1
    stringBuffer.append(TEXT_54);
d558 1
a558 1
    stringBuffer.append(TEXT_55);
d560 1
a560 1
    stringBuffer.append(TEXT_56);
d562 1
a562 1
    stringBuffer.append(TEXT_57);
d564 1
a564 1
    stringBuffer.append(TEXT_58);
d566 1
a566 1
    stringBuffer.append(TEXT_59);
d568 1
a568 1
    stringBuffer.append(TEXT_60);
d570 1
a570 1
    stringBuffer.append(TEXT_61);
d572 1
a572 1
    stringBuffer.append(TEXT_62);
d575 1
a575 1
    stringBuffer.append(TEXT_63);
a580 4
    stringBuffer.append(TEXT_64);
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_65);
    		} else {
d584 1
a584 1
    		}
d586 1
a586 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d588 1
a588 1
    stringBuffer.append(pluginActivatorClass);
d590 1
a590 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d592 1
d594 3
d598 1
a598 1
    stringBuffer.append(TEXT_73);
d600 1
a600 1
    stringBuffer.append(TEXT_74);
d603 1
a603 1
    stringBuffer.append(TEXT_75);
d606 1
a606 1
    stringBuffer.append(TEXT_76);
d619 1
a619 1
    stringBuffer.append(TEXT_77);
d621 1
a621 1
    stringBuffer.append(TEXT_78);
d623 1
a623 1
    stringBuffer.append(TEXT_79);
d625 1
a625 1
    stringBuffer.append(TEXT_80);
d631 1
a631 1
    stringBuffer.append(TEXT_81);
d633 1
a633 1
    stringBuffer.append(TEXT_82);
d639 1
a639 1
    stringBuffer.append(TEXT_83);
d641 1
a641 1
    stringBuffer.append(TEXT_84);
d643 1
a643 1
    stringBuffer.append(TEXT_85);
d645 1
a645 1
    stringBuffer.append(TEXT_86);
d647 1
a647 1
    stringBuffer.append(TEXT_87);
d649 1
a649 1
    stringBuffer.append(TEXT_88);
d651 1
a651 1
    stringBuffer.append(TEXT_89);
d653 1
a653 1
    stringBuffer.append(TEXT_90);
d657 1
a657 1
    stringBuffer.append(TEXT_91);
a658 3
    stringBuffer.append(TEXT_92);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d661 1
a661 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d663 1
a663 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d667 4
d678 1
a678 1
    stringBuffer.append(TEXT_99);
d680 1
a680 1
    stringBuffer.append(TEXT_100);
d682 1
a682 1
    stringBuffer.append(TEXT_101);
d684 1
a684 1
    stringBuffer.append(TEXT_102);
d686 1
a686 1
    stringBuffer.append(TEXT_103);
d688 1
a688 1
    stringBuffer.append(TEXT_104);
a689 4
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_106);
    		} else {
d693 2
a695 2
    stringBuffer.append(TEXT_109);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d697 1
a697 1
    		}
d699 1
a699 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d701 1
a701 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d707 1
a707 1
    		if (typeLinkModelFacet.getSourceMetaFeature() != null) {
d709 1
a709 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
d711 1
a711 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d713 1
a713 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d717 1
a717 1
    		} else {
d721 4
d726 1
a726 1
    stringBuffer.append(TEXT_123);
d728 1
a728 1
    stringBuffer.append(TEXT_124);
d730 1
a730 1
    stringBuffer.append(TEXT_125);
d732 1
a732 1
    stringBuffer.append(TEXT_126);
d734 1
a734 1
    stringBuffer.append(TEXT_127);
d738 1
a738 1
    stringBuffer.append(TEXT_128);
d742 1
a742 1
    stringBuffer.append(TEXT_129);
d747 1
a747 1
    stringBuffer.append(TEXT_130);
d749 1
a749 1
    stringBuffer.append(TEXT_131);
d751 1
a751 1
    stringBuffer.append(TEXT_132);
d756 1
a756 1
    stringBuffer.append(TEXT_133);
d770 1
a770 1
    stringBuffer.append(TEXT_134);
d772 1
a772 1
    stringBuffer.append(TEXT_135);
d774 1
a774 1
    stringBuffer.append(TEXT_136);
d776 1
a776 1
    stringBuffer.append(TEXT_137);
d778 1
a778 1
    stringBuffer.append(TEXT_138);
d780 1
a780 1
    stringBuffer.append(TEXT_139);
d782 1
a782 1
    stringBuffer.append(TEXT_140);
d784 1
a784 1
    stringBuffer.append(TEXT_141);
d786 1
a786 1
    stringBuffer.append(TEXT_142);
d788 1
a788 1
    stringBuffer.append(TEXT_143);
d790 1
a790 1
    stringBuffer.append(TEXT_144);
d792 1
a792 1
    stringBuffer.append(TEXT_145);
d795 1
a795 1
    stringBuffer.append(TEXT_146);
d797 1
a797 1
    stringBuffer.append(TEXT_147);
d799 1
a799 1
    stringBuffer.append(TEXT_148);
d801 1
a801 1
    stringBuffer.append(TEXT_149);
d803 1
a803 1
    stringBuffer.append(TEXT_150);
d805 1
a805 1
    stringBuffer.append(TEXT_151);
d807 1
a807 1
    stringBuffer.append(TEXT_152);
d809 1
a809 1
    stringBuffer.append(TEXT_153);
d811 1
a811 1
    stringBuffer.append(TEXT_154);
d813 1
a813 1
    stringBuffer.append(TEXT_155);
d815 1
a815 1
    stringBuffer.append(TEXT_156);
d817 1
a817 1
    stringBuffer.append(TEXT_157);
d819 1
a819 1
    stringBuffer.append(TEXT_158);
d822 1
a822 1
    stringBuffer.append(TEXT_159);
d824 1
a824 1
    stringBuffer.append(TEXT_160);
d831 1
a831 1
    stringBuffer.append(TEXT_161);
d845 1
a845 1
    stringBuffer.append(TEXT_162);
d847 1
a847 1
    stringBuffer.append(TEXT_163);
d849 1
a849 1
    stringBuffer.append(TEXT_164);
d851 1
a851 1
    stringBuffer.append(TEXT_165);
d853 1
a853 1
    stringBuffer.append(TEXT_166);
d855 1
a855 1
    stringBuffer.append(TEXT_167);
d857 1
a857 1
    stringBuffer.append(TEXT_168);
d859 1
a859 1
    stringBuffer.append(TEXT_169);
d861 1
a861 1
    stringBuffer.append(TEXT_170);
d863 1
a863 1
    stringBuffer.append(TEXT_171);
d865 1
a865 1
    stringBuffer.append(TEXT_172);
d867 1
a867 1
    stringBuffer.append(TEXT_173);
d870 1
a870 1
    stringBuffer.append(TEXT_174);
d872 1
a872 1
    stringBuffer.append(TEXT_175);
d874 1
a874 1
    stringBuffer.append(TEXT_176);
d876 1
a876 1
    stringBuffer.append(TEXT_177);
d878 1
a878 1
    stringBuffer.append(TEXT_178);
d880 1
a880 1
    stringBuffer.append(TEXT_179);
d882 2
a883 2
    stringBuffer.append(TEXT_180);
    stringBuffer.append(TEXT_181);
d885 1
a885 1
    stringBuffer.append(TEXT_182);
d888 1
a888 1
    stringBuffer.append(TEXT_183);
d890 1
a890 1
    stringBuffer.append(TEXT_184);
d892 1
a892 1
    stringBuffer.append(TEXT_185);
d894 1
a894 1
    stringBuffer.append(TEXT_186);
d896 1
a896 1
    stringBuffer.append(TEXT_187);
d898 1
a898 1
    stringBuffer.append(TEXT_188);
d900 1
a900 1
    stringBuffer.append(TEXT_189);
d902 1
a902 1
    stringBuffer.append(TEXT_190);
d904 1
a904 1
    stringBuffer.append(TEXT_191);
d906 1
a906 1
    stringBuffer.append(TEXT_192);
d908 2
a909 2
    stringBuffer.append(TEXT_193);
    stringBuffer.append(TEXT_194);
a912 4
    stringBuffer.append(TEXT_195);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_196);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d916 1
a916 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d920 1
a920 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d924 1
a924 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
d928 2
a930 2
    stringBuffer.append(TEXT_205);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d932 2
a934 2
    stringBuffer.append(TEXT_207);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d938 1
a938 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d940 1
a940 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d948 4
d953 1
a953 1
    stringBuffer.append(TEXT_215);
d955 1
a955 1
    stringBuffer.append(TEXT_216);
@


1.3
log
@#128024 Model references are not recognized as links
#131543 Obsolete code should be eliminated
@
text
@d81 155
a235 148
  protected final String TEXT_62 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\tif (";
  protected final String TEXT_63 = " == nodeVID) {" + NL + "\t\t";
  protected final String TEXT_64 = " nextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_65 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_66 = "Children(nextNode, nextValue);";
  protected final String TEXT_67 = NL;
  protected final String TEXT_68 = "\t}";
  protected final String TEXT_69 = NL + "\t}";
  protected final String TEXT_70 = NL + "\t";
  protected final String TEXT_71 = " nextCompartment = getCompartment(viewObject, ";
  protected final String TEXT_72 = ");" + NL + "\tif (nextCompartment != null) {" + NL + "\t\tcreate";
  protected final String TEXT_73 = "Children(nextCompartment, modelObject);" + NL + "\t}";
  protected final String TEXT_74 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_75 = NL + "}";
  protected final String TEXT_76 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_77 = " getCompartment(";
  protected final String TEXT_78 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_79 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_80 = " nextView = (";
  protected final String TEXT_81 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_82 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_83 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(";
  protected final String TEXT_87 = " container, ";
  protected final String TEXT_88 = " diagram) {" + NL + "\t";
  protected final String TEXT_89 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(";
  protected final String TEXT_90 = " container, ";
  protected final String TEXT_91 = " containerMetaclass) {\t";
  protected final String TEXT_92 = "\t\t" + NL + "\tif (";
  protected final String TEXT_93 = ".eINSTANCE.get";
  protected final String TEXT_94 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_95 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_96 = " values = ";
  protected final String TEXT_97 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_98 = " nextValue = ((";
  protected final String TEXT_99 = ") values.next());";
  protected final String TEXT_100 = NL + "\t\t";
  protected final String TEXT_101 = " nextValue = (";
  protected final String TEXT_102 = ") ";
  protected final String TEXT_103 = ";";
  protected final String TEXT_104 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_105 = ";" + NL + "\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_106 = ") {" + NL + "\t\t\t";
  protected final String TEXT_107 = " dst = (";
  protected final String TEXT_108 = ") structuralFeatureResult;";
  protected final String TEXT_109 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_110 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_111 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_112 = " src = (";
  protected final String TEXT_113 = ") structuralFeatureResult;";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " src = container;";
  protected final String TEXT_116 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_117 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_118 = " == linkVID) {" + NL + "\t\t\t\tmyLinkDescriptors.add(new LinkDescriptor(src, dst, nextValue, linkVID));" + NL + "\t\t\t}";
  protected final String TEXT_119 = NL + "\t\t\t}";
  protected final String TEXT_120 = NL + "\t\t}";
  protected final String TEXT_121 = NL + "\t\t}";
  protected final String TEXT_122 = NL + "\t}";
  protected final String TEXT_123 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(";
  protected final String TEXT_124 = " container, ";
  protected final String TEXT_125 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = "\tif (";
  protected final String TEXT_128 = ".eINSTANCE.get";
  protected final String TEXT_129 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_130 = NL + "\t\tfor (";
  protected final String TEXT_131 = " destinations = ";
  protected final String TEXT_132 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_133 = " nextDestination = (";
  protected final String TEXT_134 = ") destinations.next();";
  protected final String TEXT_135 = NL + "\t\t";
  protected final String TEXT_136 = " nextDestination = (";
  protected final String TEXT_137 = ") ";
  protected final String TEXT_138 = ";";
  protected final String TEXT_139 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_140 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_141 = " == nodeVID) {";
  protected final String TEXT_142 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_143 = ".";
  protected final String TEXT_144 = ", ";
  protected final String TEXT_145 = "));";
  protected final String TEXT_146 = NL + "\t\t";
  protected final String TEXT_147 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_148 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_149 = "Children(nextNode, nextDestination);";
  protected final String TEXT_150 = NL;
  protected final String TEXT_151 = NL + "\t\t}";
  protected final String TEXT_152 = NL + "\t\t}";
  protected final String TEXT_153 = NL + "\t}";
  protected final String TEXT_154 = NL;
  protected final String TEXT_155 = "\tif (";
  protected final String TEXT_156 = ".eINSTANCE.get";
  protected final String TEXT_157 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_158 = NL + "\t\tfor (";
  protected final String TEXT_159 = " destinations = ";
  protected final String TEXT_160 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_161 = " nextDestination = (";
  protected final String TEXT_162 = ") destinations.next();";
  protected final String TEXT_163 = NL + "\t\t";
  protected final String TEXT_164 = " nextDestination = (";
  protected final String TEXT_165 = ") ";
  protected final String TEXT_166 = ";";
  protected final String TEXT_167 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_168 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\tif (";
  protected final String TEXT_169 = " == nodeVID) {";
  protected final String TEXT_170 = NL + "\t\tmyLinkDescriptors.add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_171 = ".";
  protected final String TEXT_172 = ", ";
  protected final String TEXT_173 = "));";
  protected final String TEXT_174 = NL;
  protected final String TEXT_175 = NL + "\t\t}";
  protected final String TEXT_176 = NL + "\t\t}";
  protected final String TEXT_177 = NL + "\t}";
  protected final String TEXT_178 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks(";
  protected final String TEXT_179 = " diagram) {" + NL + "\tfor (";
  protected final String TEXT_180 = " it = myLinkDescriptors.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_181 = " edge = (";
  protected final String TEXT_182 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), diagram, \"\", ";
  protected final String TEXT_183 = ".APPEND, ";
  protected final String TEXT_184 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_185 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_186 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}" + NL + "}" + NL;
  protected final String TEXT_187 = NL;
  protected final String TEXT_188 = "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_189 = " mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_190 = " myDestination;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_191 = " myLinkElement;" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate int myVisualID;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_192 = " mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_193 = " source, ";
  protected final String TEXT_194 = " destination, ";
  protected final String TEXT_195 = " linkElement, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = linkElement;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_196 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(";
  protected final String TEXT_197 = " source, ";
  protected final String TEXT_198 = " destination, ";
  protected final String TEXT_199 = " elementType, int linkVID) {" + NL + "\t\tthis(source, destination, linkVID);" + NL + "\t\tmyLinkElement = null;" + NL + "\t\tfinal ";
  protected final String TEXT_200 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_201 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_202 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(";
  protected final String TEXT_203 = " source, ";
  protected final String TEXT_204 = " destination, int linkVID) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyVisualID = linkVID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_205 = " getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_206 = " getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_207 = " getLinkElement() {" + NL + "\t\treturn myLinkElement;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected int getVisualID() {" + NL + "\t\treturn myVisualID;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected ";
  protected final String TEXT_208 = " getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_209 = "\t" + NL + "" + NL + "}";
a519 1
		for (int nodeIndex = 0; nodeIndex < genNodes.size(); nodeIndex++) {
d522 13
a534 5
GenNode nextNode = (GenNode) genNodes.get(nodeIndex);
TypeModelFacet typeModelFacet = nextNode.getModelFacet();
if (typeModelFacet.isPhantomElement()) {
// Skipping top-level phantoms
	continue;
d536 3
a538 3
GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
	
if (nodeIndex == 0) {
d546 5
a550 1
if (childMetaFeature.isListType()) {
d559 1
a559 1
    } else {
d563 1
a563 1
    }
d567 2
a568 1
    stringBuffer.append(nextNode.getVisualID());
d570 5
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d576 1
a576 1
    stringBuffer.append(pluginActivatorClass);
d578 1
a578 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d580 1
d582 1
d584 1
a584 1
    if (childMetaFeature.isListType()) {
d586 7
a592 1
    }
d594 10
a603 1
	}
d613 1
a613 1
    stringBuffer.append(TEXT_70);
d615 1
a615 1
    stringBuffer.append(TEXT_71);
d617 1
a617 1
    stringBuffer.append(TEXT_72);
d619 1
a619 1
    stringBuffer.append(TEXT_73);
d625 1
a625 1
    stringBuffer.append(TEXT_74);
d627 1
a627 1
    stringBuffer.append(TEXT_75);
d633 1
a633 1
    stringBuffer.append(TEXT_76);
d635 1
a635 1
    stringBuffer.append(TEXT_77);
d637 1
a637 1
    stringBuffer.append(TEXT_78);
d639 1
a639 1
    stringBuffer.append(TEXT_79);
d641 1
a641 1
    stringBuffer.append(TEXT_80);
d643 1
a643 1
    stringBuffer.append(TEXT_81);
d645 1
a645 1
    stringBuffer.append(TEXT_82);
d647 1
a647 1
    stringBuffer.append(TEXT_83);
d651 1
a651 1
    stringBuffer.append(TEXT_84);
d653 2
a654 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(TEXT_86);
d656 1
a656 1
    stringBuffer.append(TEXT_87);
d658 1
a658 1
    stringBuffer.append(TEXT_88);
d660 1
a660 1
    stringBuffer.append(TEXT_89);
d662 1
a662 1
    stringBuffer.append(TEXT_90);
d664 1
a664 1
    stringBuffer.append(TEXT_91);
d672 1
a672 1
    stringBuffer.append(TEXT_92);
d674 1
a674 1
    stringBuffer.append(TEXT_93);
d676 1
a676 1
    stringBuffer.append(TEXT_94);
d678 1
a678 1
    stringBuffer.append(TEXT_95);
d680 1
a680 1
    stringBuffer.append(TEXT_96);
d682 1
a682 1
    stringBuffer.append(TEXT_97);
d684 1
a684 1
    stringBuffer.append(TEXT_98);
d686 1
a686 1
    stringBuffer.append(TEXT_99);
d688 1
a688 1
    stringBuffer.append(TEXT_100);
d690 1
a690 1
    stringBuffer.append(TEXT_101);
d692 1
a692 1
    stringBuffer.append(TEXT_102);
d694 1
a694 1
    stringBuffer.append(TEXT_103);
d696 1
a696 1
    stringBuffer.append(TEXT_104);
d698 1
a698 1
    stringBuffer.append(TEXT_105);
d700 1
a700 1
    stringBuffer.append(TEXT_106);
d702 1
a702 1
    stringBuffer.append(TEXT_107);
d704 1
a704 1
    stringBuffer.append(TEXT_108);
d706 1
a706 1
    stringBuffer.append(TEXT_109);
d708 1
a708 1
    stringBuffer.append(TEXT_110);
d710 1
a710 1
    stringBuffer.append(TEXT_111);
d712 1
a712 1
    stringBuffer.append(TEXT_112);
d714 1
a714 1
    stringBuffer.append(TEXT_113);
d716 1
a716 1
    stringBuffer.append(TEXT_114);
d718 1
a718 1
    stringBuffer.append(TEXT_115);
d720 1
a720 1
    stringBuffer.append(TEXT_116);
d722 1
a722 1
    stringBuffer.append(TEXT_117);
d724 1
a724 1
    stringBuffer.append(TEXT_118);
d726 1
a726 1
    stringBuffer.append(TEXT_119);
d728 1
a728 1
    stringBuffer.append(TEXT_120);
d732 1
a732 1
    stringBuffer.append(TEXT_121);
d736 1
a736 1
    stringBuffer.append(TEXT_122);
d741 1
a741 1
    stringBuffer.append(TEXT_123);
d743 1
a743 1
    stringBuffer.append(TEXT_124);
d745 1
a745 1
    stringBuffer.append(TEXT_125);
d750 1
a750 1
    stringBuffer.append(TEXT_126);
d764 1
a764 1
    stringBuffer.append(TEXT_127);
d766 1
a766 1
    stringBuffer.append(TEXT_128);
d768 1
a768 1
    stringBuffer.append(TEXT_129);
d770 1
a770 1
    stringBuffer.append(TEXT_130);
d772 1
a772 1
    stringBuffer.append(TEXT_131);
d774 1
a774 1
    stringBuffer.append(TEXT_132);
d776 1
a776 1
    stringBuffer.append(TEXT_133);
d778 1
a778 1
    stringBuffer.append(TEXT_134);
d780 1
a780 1
    stringBuffer.append(TEXT_135);
d782 1
a782 1
    stringBuffer.append(TEXT_136);
d784 1
a784 1
    stringBuffer.append(TEXT_137);
d786 1
a786 1
    stringBuffer.append(TEXT_138);
d789 1
a789 1
    stringBuffer.append(TEXT_139);
d791 1
a791 1
    stringBuffer.append(TEXT_140);
d793 1
a793 1
    stringBuffer.append(TEXT_141);
d795 1
a795 1
    stringBuffer.append(TEXT_142);
d797 1
a797 1
    stringBuffer.append(TEXT_143);
d799 1
a799 1
    stringBuffer.append(TEXT_144);
d801 1
a801 1
    stringBuffer.append(TEXT_145);
d803 1
a803 1
    stringBuffer.append(TEXT_146);
d805 1
a805 1
    stringBuffer.append(TEXT_147);
d807 1
a807 1
    stringBuffer.append(TEXT_148);
d809 1
a809 1
    stringBuffer.append(TEXT_149);
d811 1
a811 1
    stringBuffer.append(TEXT_150);
d813 1
a813 1
    stringBuffer.append(TEXT_151);
d816 1
a816 1
    stringBuffer.append(TEXT_152);
d818 1
a818 1
    stringBuffer.append(TEXT_153);
d825 1
a825 1
    stringBuffer.append(TEXT_154);
d839 1
a839 1
    stringBuffer.append(TEXT_155);
d841 1
a841 1
    stringBuffer.append(TEXT_156);
d843 1
a843 1
    stringBuffer.append(TEXT_157);
d845 1
a845 1
    stringBuffer.append(TEXT_158);
d847 1
a847 1
    stringBuffer.append(TEXT_159);
d849 1
a849 1
    stringBuffer.append(TEXT_160);
d851 1
a851 1
    stringBuffer.append(TEXT_161);
d853 1
a853 1
    stringBuffer.append(TEXT_162);
d855 1
a855 1
    stringBuffer.append(TEXT_163);
d857 1
a857 1
    stringBuffer.append(TEXT_164);
d859 1
a859 1
    stringBuffer.append(TEXT_165);
d861 1
a861 1
    stringBuffer.append(TEXT_166);
d864 1
a864 1
    stringBuffer.append(TEXT_167);
d866 1
a866 1
    stringBuffer.append(TEXT_168);
d868 1
a868 1
    stringBuffer.append(TEXT_169);
d870 1
a870 1
    stringBuffer.append(TEXT_170);
d872 1
a872 1
    stringBuffer.append(TEXT_171);
d874 1
a874 1
    stringBuffer.append(TEXT_172);
d876 2
a877 2
    stringBuffer.append(TEXT_173);
    stringBuffer.append(TEXT_174);
d879 1
a879 1
    stringBuffer.append(TEXT_175);
d882 1
a882 1
    stringBuffer.append(TEXT_176);
d884 1
a884 1
    stringBuffer.append(TEXT_177);
d886 1
a886 1
    stringBuffer.append(TEXT_178);
d888 1
a888 1
    stringBuffer.append(TEXT_179);
d890 1
a890 1
    stringBuffer.append(TEXT_180);
d892 1
a892 1
    stringBuffer.append(TEXT_181);
d894 1
a894 1
    stringBuffer.append(TEXT_182);
d896 1
a896 1
    stringBuffer.append(TEXT_183);
d898 1
a898 1
    stringBuffer.append(TEXT_184);
d900 1
a900 1
    stringBuffer.append(TEXT_185);
d902 2
a903 2
    stringBuffer.append(TEXT_186);
    stringBuffer.append(TEXT_187);
d907 1
a907 1
    stringBuffer.append(TEXT_188);
d909 1
a909 1
    stringBuffer.append(TEXT_189);
d911 1
a911 1
    stringBuffer.append(TEXT_190);
d913 1
a913 1
    stringBuffer.append(TEXT_191);
d915 1
a915 1
    stringBuffer.append(TEXT_192);
d917 1
a917 1
    stringBuffer.append(TEXT_193);
d919 1
a919 1
    stringBuffer.append(TEXT_194);
d921 1
a921 1
    stringBuffer.append(TEXT_195);
d923 1
a923 1
    stringBuffer.append(TEXT_196);
d925 1
a925 1
    stringBuffer.append(TEXT_197);
d927 1
a927 1
    stringBuffer.append(TEXT_198);
d929 1
a929 1
    stringBuffer.append(TEXT_199);
d931 1
a931 1
    stringBuffer.append(TEXT_200);
d933 1
a933 1
    stringBuffer.append(TEXT_201);
d935 1
a935 1
    stringBuffer.append(TEXT_202);
d937 1
a937 1
    stringBuffer.append(TEXT_203);
d939 1
a939 1
    stringBuffer.append(TEXT_204);
d941 1
a941 1
    stringBuffer.append(TEXT_205);
d943 1
a943 1
    stringBuffer.append(TEXT_206);
d945 1
a945 1
    stringBuffer.append(TEXT_207);
d947 1
a947 1
    stringBuffer.append(TEXT_208);
d949 1
a949 1
    stringBuffer.append(TEXT_209);
@


1.2
log
@#131543 Correcting InitDiagramFile logic
@
text
@d44 18
a61 18
  protected final String TEXT_25 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static final Integer LINK_KEY_";
  protected final String TEXT_26 = " = new Integer(";
  protected final String TEXT_27 = ");";
  protected final String TEXT_28 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_29 = " myLinkVID2EObjectMap = new ";
  protected final String TEXT_30 = "();" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_31 = " myEObject2NodeMap = new ";
  protected final String TEXT_32 = "();" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void initDiagramContents(Diagram diagram, EObject diagramModelObject) {";
  protected final String TEXT_33 = NL + "\tmyLinkVID2EObjectMap.put(LINK_KEY_";
  protected final String TEXT_34 = ", new LinkedList());";
  protected final String TEXT_35 = NL + "\tcreate";
  protected final String TEXT_36 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_37 = NL + "\tResource resource = diagramModelObject.eResource();" + NL + "\tfor (";
  protected final String TEXT_38 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_39 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t";
  protected final String TEXT_40 = " nextNode;" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_41 = NL + "\t\tcase ";
  protected final String TEXT_42 = ":" + NL + "\t\t\tnextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
d63 166
a228 102
  protected final String TEXT_44 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\tbreak;";
  protected final String TEXT_45 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_46 = "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t}";
  protected final String TEXT_47 = "\t" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void create";
  protected final String TEXT_48 = "Children(";
  protected final String TEXT_49 = " viewObject, EObject modelObject) {";
  protected final String TEXT_50 = NL + "\tEObject nextValue;" + NL + "\t";
  protected final String TEXT_51 = " nextNode;" + NL + "\tint nodeVID;";
  protected final String TEXT_52 = NL + "\t";
  protected final String TEXT_53 = " nextNode;";
  protected final String TEXT_54 = NL + "\tfor (";
  protected final String TEXT_55 = " values = ";
  protected final String TEXT_56 = ".iterator(); values.hasNext();) {" + NL + "\t\tnextValue = (EObject) values.next();";
  protected final String TEXT_57 = NL + "\tnextValue = ";
  protected final String TEXT_58 = ";";
  protected final String TEXT_59 = NL + "\tnodeVID = ";
  protected final String TEXT_60 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\tif (";
  protected final String TEXT_61 = " == nodeVID) {" + NL + "\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_62 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\tcreate";
  protected final String TEXT_63 = "Children(nextNode, nextValue);" + NL + "\t}";
  protected final String TEXT_64 = NL + "\t}";
  protected final String TEXT_65 = NL + "\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_66 = "\");" + NL + "\tif (nextNode != null) {" + NL + "\t\tcreate";
  protected final String TEXT_67 = "Children(nextNode, modelObject);" + NL + "\t}";
  protected final String TEXT_68 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());";
  protected final String TEXT_69 = NL + "}";
  protected final String TEXT_70 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_71 = " getCompartment(";
  protected final String TEXT_72 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_73 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_74 = " nextView = (";
  protected final String TEXT_75 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_76 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_77 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_78 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(EObject container, Diagram diagram) {" + NL + "\t";
  protected final String TEXT_79 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass, diagram);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(EObject container, ";
  protected final String TEXT_80 = " containerMetaclass, Diagram diagram) {\t";
  protected final String TEXT_81 = "\t\t" + NL + "\tif (";
  protected final String TEXT_82 = ".eINSTANCE.get";
  protected final String TEXT_83 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_84 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_85 = " values = ";
  protected final String TEXT_86 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_87 = NL + "\t\tEObject nextValue = (EObject) ";
  protected final String TEXT_88 = ";";
  protected final String TEXT_89 = NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_90 = ";" + NL + "\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_91 = NL + "\t\t\tstructuralFeatureResult = ";
  protected final String TEXT_92 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\t\tEObject src = (EObject) structuralFeatureResult;";
  protected final String TEXT_93 = NL + "\t\t\tEObject src = nextValue;";
  protected final String TEXT_94 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_95 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_96 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_97 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_98 = ")).add(new LinkDescriptor(src, dst, nextValue, diagram));" + NL + "\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t\t}";
  protected final String TEXT_100 = NL + "\t\t}";
  protected final String TEXT_101 = NL + "\t\t}";
  protected final String TEXT_102 = NL + "\t}";
  protected final String TEXT_103 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(EObject container, ";
  protected final String TEXT_104 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_105 = NL + "\tif (";
  protected final String TEXT_106 = ".eINSTANCE.get";
  protected final String TEXT_107 = "().isSuperTypeOf(containerMetaclass)) {";
  protected final String TEXT_108 = NL + "\t\tfor (";
  protected final String TEXT_109 = " destinations = ";
  protected final String TEXT_110 = ".iterator(); destinations.hasNext();) {" + NL + "\t\t\tEObject nextDestination = (EObject) destinations.next();";
  protected final String TEXT_111 = NL + "\t\tif (";
  protected final String TEXT_112 = " instanceof EObject) {" + NL + "\t\t\tEObject nextDestination = (EObject) ";
  protected final String TEXT_113 = ";";
  protected final String TEXT_114 = NL + "\t\t\t((";
  protected final String TEXT_115 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_116 = ")).add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_117 = ".";
  protected final String TEXT_118 = ", diagram));";
  protected final String TEXT_119 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_120 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_121 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_123 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_124 = "Children(nextNode, nextDestination);" + NL + "\t\t\t}";
  protected final String TEXT_125 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_126 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks() {";
  protected final String TEXT_127 = NL + "\t";
  protected final String TEXT_128 = " linkElements;";
  protected final String TEXT_129 = NL + "\tlinkElements = (";
  protected final String TEXT_130 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_131 = ");" + NL + "\tfor (";
  protected final String TEXT_132 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_133 = " edge = (";
  protected final String TEXT_134 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), nextLinkDescriptor.getDiagram(), \"\", ";
  protected final String TEXT_135 = ".APPEND, ";
  protected final String TEXT_136 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_137 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_138 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_139 = NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate EObject mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate EObject myDestination;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate IAdaptable mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate Diagram myDiagram;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(EObject source, EObject destination, EObject linkElement, Diagram diagram) {" + NL + "\t\tthis(source, destination, diagram);" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_140 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(EObject source, EObject destination, ";
  protected final String TEXT_141 = " elementType, Diagram diagram) {" + NL + "\t\tthis(source, destination, diagram);" + NL + "\t\tfinal ";
  protected final String TEXT_142 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_143 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_144 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(EObject source, EObject destination, Diagram diagram) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyDiagram = diagram;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected EObject getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected EObject getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected Diagram getDiagram() {" + NL + "\t\treturn myDiagram;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected IAdaptable getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_145 = "\t" + NL + "" + NL + "}";
d331 1
a331 1
final boolean isSynchronizedDiagram = false;
d429 2
a441 5
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_25);
    stringBuffer.append(nextLink.getVisualID());
d443 1
a443 1
    stringBuffer.append(nextLink.getVisualID());
d445 1
a445 3
    
}

d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d455 1
a455 4
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

a456 1
    stringBuffer.append(nextLink.getVisualID());
d459 1
a459 1
}
d461 1
d463 1
a463 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d465 1
a465 3
    
if (!genClass2Phantom.isEmpty()) {

d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d471 1
a471 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_40);
d476 2
d479 1
a479 1
    stringBuffer.append(phantomNode.getVisualID());
d490 5
a494 1
}
d497 1
a497 1
    stringBuffer.append(TEXT_46);
d504 1
a504 1
    stringBuffer.append(TEXT_47);
d506 1
a506 1
    stringBuffer.append(TEXT_48);
a507 4
    stringBuffer.append(TEXT_49);
    
	if (nextContainer.getContainedNodes().size() > 0) {

d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d511 4
d516 9
a524 1
	} else if (nextContainer instanceof GenNode && ((GenNode) nextContainer).getCompartments().size() > 0) {
a525 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d527 2
d530 3
a532 11
	}
	
	for (Iterator children = nextContainer.getContainedNodes().iterator(); children.hasNext();) {
		GenNode nextChild = (GenNode) children.next();
		TypeModelFacet typeModelFacet = nextChild.getModelFacet();
		if (typeModelFacet.isPhantomElement()) {
// Skipping top-leve phantoms
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (childMetaFeature.isListType()) {
d534 1
a534 1
    stringBuffer.append(TEXT_54);
d536 1
a536 1
    stringBuffer.append(TEXT_55);
a537 4
    stringBuffer.append(TEXT_56);
    
		} else {

d539 1
a539 1
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
d541 1
a541 3
    
		}

d543 1
a543 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d545 1
a545 1
    stringBuffer.append(nextChild.getVisualID());
d547 1
a547 1
    stringBuffer.append(pluginActivatorClass);
d549 1
a549 1
    stringBuffer.append(nextChild.getUniqueIdentifier());
d551 1
a551 3
    
		if (childMetaFeature.isListType()) {

d553 10
a562 2
    
		}
d564 1
a564 1
	
d567 1
a567 2
		for (Iterator compartments = nextNode.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment nextCompartment = (GenCompartment) compartments.next();
d569 3
d573 5
a577 3
    stringBuffer.append(TEXT_65);
    stringBuffer.append(nextCompartment.getTitle());
    stringBuffer.append(TEXT_66);
d579 1
a579 1
    stringBuffer.append(TEXT_67);
d585 1
a585 1
    stringBuffer.append(TEXT_68);
d587 1
a587 1
    stringBuffer.append(TEXT_69);
d593 1
a593 1
    stringBuffer.append(TEXT_70);
d595 1
a595 1
    stringBuffer.append(TEXT_71);
d597 1
a597 1
    stringBuffer.append(TEXT_72);
d599 1
a599 1
    stringBuffer.append(TEXT_73);
d601 1
a601 1
    stringBuffer.append(TEXT_74);
d603 1
a603 1
    stringBuffer.append(TEXT_75);
d605 1
a605 1
    stringBuffer.append(TEXT_76);
d607 1
a607 1
    stringBuffer.append(TEXT_77);
d611 8
a618 1
    stringBuffer.append(TEXT_78);
d620 3
a622 1
    stringBuffer.append(TEXT_79);
d624 1
a624 1
    stringBuffer.append(TEXT_80);
d632 1
a632 1
    stringBuffer.append(TEXT_81);
d634 1
a634 1
    stringBuffer.append(TEXT_82);
d636 1
a636 1
    stringBuffer.append(TEXT_83);
d638 1
a638 1
    stringBuffer.append(TEXT_84);
d640 1
a640 1
    stringBuffer.append(TEXT_85);
d642 5
a646 1
    stringBuffer.append(TEXT_86);
d648 5
a652 1
    stringBuffer.append(TEXT_87);
d654 1
a654 1
    stringBuffer.append(TEXT_88);
d656 1
a656 1
    stringBuffer.append(TEXT_89);
d658 7
a664 1
    stringBuffer.append(TEXT_90);
d666 1
a666 1
    stringBuffer.append(TEXT_91);
d668 7
a674 1
    stringBuffer.append(TEXT_92);
d676 3
a678 1
    stringBuffer.append(TEXT_93);
d680 1
a680 1
    stringBuffer.append(TEXT_94);
d682 1
a682 1
    stringBuffer.append(TEXT_95);
d684 1
a684 5
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_98);
d686 1
a686 1
    stringBuffer.append(TEXT_99);
d688 1
a688 1
    stringBuffer.append(TEXT_100);
d692 1
a692 1
    stringBuffer.append(TEXT_101);
d696 1
a696 1
    stringBuffer.append(TEXT_102);
d701 3
a703 1
    stringBuffer.append(TEXT_103);
d705 6
a710 1
    stringBuffer.append(TEXT_104);
d712 11
a722 6
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
		GenFeature genFeature = linkFMF.getMetaFeature();
		GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
d724 1
a724 1
    stringBuffer.append(TEXT_105);
d726 1
a726 1
    stringBuffer.append(TEXT_106);
d728 3
a730 3
    stringBuffer.append(TEXT_107);
    		if (genFeature.isListType()) {
    stringBuffer.append(TEXT_108);
d732 1
a732 1
    stringBuffer.append(TEXT_109);
d734 11
a744 3
    stringBuffer.append(TEXT_110);
    		} else {
    stringBuffer.append(TEXT_111);
d746 10
a755 9
    stringBuffer.append(TEXT_112);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_113);
    		}
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_116);
d757 1
a757 1
    stringBuffer.append(TEXT_117);
d759 5
a763 7
    stringBuffer.append(TEXT_118);
    		if (genFeature.isContains() && phantomNode != null) {
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(phantomNode.getVisualID());
    stringBuffer.append(TEXT_121);
d765 1
a765 1
    stringBuffer.append(TEXT_122);
d767 1
a767 1
    stringBuffer.append(TEXT_123);
d769 10
a778 3
    stringBuffer.append(TEXT_124);
    		}
    stringBuffer.append(TEXT_125);
a779 1
	}
d782 2
a783 3
    stringBuffer.append(TEXT_126);
    
if (genLinks.size() > 0) {
d785 1
a785 3
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_128);
d787 10
d799 36
a834 6
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_130);
d836 13
a848 1
    stringBuffer.append(TEXT_131);
d850 1
a850 1
    stringBuffer.append(TEXT_132);
d852 1
a852 1
    stringBuffer.append(TEXT_133);
d854 1
a854 1
    stringBuffer.append(TEXT_134);
d856 1
a856 1
    stringBuffer.append(TEXT_135);
d858 1
a858 1
    stringBuffer.append(TEXT_136);
d860 1
a860 1
    stringBuffer.append(TEXT_137);
d862 2
a863 1
    stringBuffer.append(TEXT_138);
d865 1
a865 1
}
d867 15
a881 1
    stringBuffer.append(TEXT_139);
d883 5
a887 1
    stringBuffer.append(TEXT_140);
d889 1
a889 1
    stringBuffer.append(TEXT_141);
d891 1
a891 1
    stringBuffer.append(TEXT_142);
d893 1
a893 1
    stringBuffer.append(TEXT_143);
d895 13
a907 1
    stringBuffer.append(TEXT_144);
d909 1
a909 1
    stringBuffer.append(TEXT_145);
@


1.1
log
@#131543 Code reconstructing the diagram contents separated from the init diagram file action.
@
text
@d56 9
a64 9
  protected final String TEXT_37 = NL + "\tResource resource = diagramModelObject.eResource();" + NL + "\tint nodeVID;" + NL + "\tfor (";
  protected final String TEXT_38 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\t\tcontinue;" + NL + "\t\t}";
  protected final String TEXT_39 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_40 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_41 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_42 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_43 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_44 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_45 = NL + "\t\t}";
d87 16
a102 16
  protected final String TEXT_68 = NL + "\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "}";
  protected final String TEXT_69 = NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private ";
  protected final String TEXT_70 = " getCompartment(";
  protected final String TEXT_71 = " node, String name) {" + NL + "\tfor (";
  protected final String TEXT_72 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t";
  protected final String TEXT_73 = " nextView = (";
  protected final String TEXT_74 = ") it.next();" + NL + "\t\tif (nextView instanceof ";
  protected final String TEXT_75 = " && name.equals(nextView.getType())) {" + NL + "\t\t\treturn (";
  protected final String TEXT_76 = ") nextView;" + NL + "\t\t}" + NL + "\t}" + NL + "\treturn null;" + NL + "}";
  protected final String TEXT_77 = NL + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeLinks(EObject container, Diagram diagram) {" + NL + "\t";
  protected final String TEXT_78 = " containerMetaclass = container.eClass();" + NL + "\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\tstoreTypeModelFacetLinks(container, containerMetaclass, diagram);" + NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void storeTypeModelFacetLinks(EObject container, ";
  protected final String TEXT_79 = " containerMetaclass, Diagram diagram) {\t";
  protected final String TEXT_80 = "\t\t" + NL + "\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_81 = ".eINSTANCE.get";
  protected final String TEXT_82 = "())) {" + NL + "\t\tObject featureValue = ";
  protected final String TEXT_83 = ";";
d104 61
a164 53
  protected final String TEXT_85 = " values = ((";
  protected final String TEXT_86 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_87 = NL + "\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_88 = NL + "\t\tint linkVID = ";
  protected final String TEXT_89 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\tif (";
  protected final String TEXT_90 = " == linkVID) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_91 = ";" + NL + "\t\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\t\tEObject dst = (EObject) structuralFeatureResult;" + NL + "\t\t\t\t((";
  protected final String TEXT_92 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_93 = ")).add(new LinkDescriptor(container, dst, nextValue, diagram));" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t\t}";
  protected final String TEXT_95 = NL + "\t}";
  protected final String TEXT_96 = NL + "}" + NL + "" + NL + "/**" + NL + " *@@generated" + NL + " */" + NL + "private void storeFeatureModelFacetLinks(EObject container, ";
  protected final String TEXT_97 = " containerMetaclass, Diagram diagram) {";
  protected final String TEXT_98 = NL + "\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_99 = ".eINSTANCE.get";
  protected final String TEXT_100 = "())) {" + NL + "\t\tObject structuralFeatureResult = ";
  protected final String TEXT_101 = ";";
  protected final String TEXT_102 = NL + "\t\tfor (";
  protected final String TEXT_103 = " destinations = ((";
  protected final String TEXT_104 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\tEObject nextDestination = (EObject) destinations.next();";
  protected final String TEXT_105 = NL + "\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\tEObject nextDestination = (EObject) structuralFeatureResult;";
  protected final String TEXT_106 = NL + "\t\t\t((";
  protected final String TEXT_107 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_108 = ")).add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_109 = ".";
  protected final String TEXT_110 = ", diagram));";
  protected final String TEXT_111 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_112 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_113 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_114 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_115 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_116 = "Children(nextNode, nextDestination);" + NL + "\t\t\t}";
  protected final String TEXT_117 = NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_118 = NL + "}" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private void createLinks() {";
  protected final String TEXT_119 = NL + "\t";
  protected final String TEXT_120 = " linkElements;";
  protected final String TEXT_121 = NL + "\tlinkElements = (";
  protected final String TEXT_122 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_123 = ");" + NL + "\tfor (";
  protected final String TEXT_124 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t";
  protected final String TEXT_125 = " edge = (";
  protected final String TEXT_126 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), nextLinkDescriptor.getDiagram(), \"\", ";
  protected final String TEXT_127 = ".APPEND, ";
  protected final String TEXT_128 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tif (edge != null) {" + NL + "\t\t\tedge.setSource((";
  protected final String TEXT_129 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\tedge.setTarget((";
  protected final String TEXT_130 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_131 = NL + "}" + NL + "\t" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private class LinkDescriptor {" + NL + "\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate EObject mySource;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate EObject myDestination;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate IAdaptable mySemanticAdapter;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate Diagram myDiagram;" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(EObject source, EObject destination, EObject linkElement, Diagram diagram) {" + NL + "\t\tthis(source, destination, diagram);" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_132 = "(linkElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected LinkDescriptor(EObject source, EObject destination, ";
  protected final String TEXT_133 = " elementType, Diagram diagram) {" + NL + "\t\tthis(source, destination, diagram);" + NL + "\t\tfinal ";
  protected final String TEXT_134 = " elementTypeCopy = elementType;" + NL + "\t\tmySemanticAdapter = new ";
  protected final String TEXT_135 = "() {" + NL + "\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_136 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprivate LinkDescriptor(EObject source, EObject destination, Diagram diagram) {" + NL + "\t\tmySource = source;" + NL + "\t\tmyDestination = destination;" + NL + "\t\tmyDiagram = diagram;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected EObject getSource() {" + NL + "\t\treturn mySource;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected EObject getDestination() {" + NL + "\t\treturn myDestination;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected Diagram getDiagram() {" + NL + "\t\treturn myDiagram;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "   \t * @@generated" + NL + "     */" + NL + "\tprotected IAdaptable getSemanticAdapter() {" + NL + "\t\treturn mySemanticAdapter;" + NL + "\t}" + NL + "}";
  protected final String TEXT_137 = "\t" + NL + "" + NL + "}";
a273 12
List genLinks = genDiagram.getLinks();

// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (!nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}
d363 13
d415 4
d423 1
a423 3
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_40);
a424 2
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d436 1
d520 1
d523 2
d530 1
a530 1
    stringBuffer.append(TEXT_69);
d532 1
a532 1
    stringBuffer.append(TEXT_70);
d534 1
a534 1
    stringBuffer.append(TEXT_71);
a535 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d539 1
a539 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d543 2
a547 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d551 2
d560 1
a560 1
    stringBuffer.append(TEXT_80);
a561 2
    stringBuffer.append(TEXT_81);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
d563 1
a563 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
d565 1
a565 3
    
		if (childMetaFeature.isListType()) {

d569 1
a569 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d571 1
a571 3
    
		} else {

d573 1
a573 3
    		
		}

d575 1
a575 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d577 1
a577 1
    stringBuffer.append(nextLink.getVisualID());
d579 1
a579 1
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
d581 10
d592 1
a592 1
    stringBuffer.append(TEXT_92);
d594 5
a598 1
    stringBuffer.append(TEXT_93);
d602 1
a602 1
    stringBuffer.append(TEXT_94);
d606 1
a606 1
    stringBuffer.append(TEXT_95);
d611 1
a611 1
    stringBuffer.append(TEXT_96);
d613 1
a613 1
    stringBuffer.append(TEXT_97);
d622 1
a622 1
    stringBuffer.append(TEXT_98);
d624 3
a626 5
    stringBuffer.append(TEXT_99);
    stringBuffer.append(genFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_100);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_101);
d628 1
a628 1
    stringBuffer.append(TEXT_102);
d630 3
a632 3
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_104);
d634 5
a638 1
    stringBuffer.append(TEXT_105);
d640 1
a640 1
    stringBuffer.append(TEXT_106);
d642 1
a642 1
    stringBuffer.append(TEXT_107);
d644 1
a644 1
    stringBuffer.append(TEXT_108);
d646 1
a646 1
    stringBuffer.append(TEXT_109);
d648 1
a648 1
    stringBuffer.append(TEXT_110);
d650 1
a650 1
    stringBuffer.append(TEXT_111);
d652 1
a652 1
    stringBuffer.append(TEXT_112);
d654 1
a654 1
    stringBuffer.append(TEXT_113);
d656 1
a656 1
    stringBuffer.append(TEXT_114);
d658 1
a658 1
    stringBuffer.append(TEXT_115);
d660 1
a660 1
    stringBuffer.append(TEXT_116);
d662 1
a662 1
    stringBuffer.append(TEXT_117);
d667 1
a667 1
    stringBuffer.append(TEXT_118);
d671 1
a671 1
    stringBuffer.append(TEXT_119);
d673 1
a673 1
    stringBuffer.append(TEXT_120);
d680 1
a680 1
    stringBuffer.append(TEXT_121);
d682 1
a682 1
    stringBuffer.append(TEXT_122);
d684 1
a684 1
    stringBuffer.append(TEXT_123);
d686 1
a686 1
    stringBuffer.append(TEXT_124);
d688 1
a688 1
    stringBuffer.append(TEXT_125);
d690 1
a690 1
    stringBuffer.append(TEXT_126);
d692 1
a692 1
    stringBuffer.append(TEXT_127);
d694 1
a694 1
    stringBuffer.append(TEXT_128);
d696 1
a696 1
    stringBuffer.append(TEXT_129);
d698 1
a698 1
    stringBuffer.append(TEXT_130);
d702 1
a702 1
    stringBuffer.append(TEXT_131);
d704 1
a704 1
    stringBuffer.append(TEXT_132);
d706 1
a706 1
    stringBuffer.append(TEXT_133);
d708 1
a708 1
    stringBuffer.append(TEXT_134);
d710 1
a710 1
    stringBuffer.append(TEXT_135);
d712 1
a712 1
    stringBuffer.append(TEXT_136);
d714 1
a714 1
    stringBuffer.append(TEXT_137);
@

