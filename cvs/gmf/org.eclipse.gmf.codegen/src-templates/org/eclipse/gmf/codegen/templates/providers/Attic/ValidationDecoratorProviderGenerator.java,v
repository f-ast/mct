head	1.9;
access;
symbols
	v20081022-1925:1.9
	v20081015-1925:1.9
	v20081008-1925:1.9
	v20081001-1925:1.9
	v20080924-1925:1.9
	v20080917-1925:1.9
	v20080911-1728:1.9
	v20080910-1520:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	v20080806-1520:1.9
	v20070504-1000:1.8
	v20070427-0600:1.8
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.7
	v20070301-1200:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.6
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.3
	v20060530-1930:1.2
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1;
locks; strict;
comment	@# @;


1.9
date	2007.05.11.12.26.15;	author dstadnik;	state dead;
branches;
next	1.8;
commitid	398e464460e54567;

1.8
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.7;
commitid	78b462dc68e4567;

1.7
date	2006.06.21.22.26.21;	author radvorak;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.19.16.47.36;	author radvorak;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.07.13.47.01;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.31.18.04.04;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.09.12.41.31;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.9
log
@rewrite in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ValidationDecoratorProviderGenerator
{
  protected static String nl;
  public static synchronized ValidationDecoratorProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ValidationDecoratorProviderGenerator result = new ValidationDecoratorProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + "/** " + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractProvider implements IDecoratorProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static final String KEY = \"validationStatus\"; //$NON-NLS-1$" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String MARKER_TYPE = ";
  protected final String TEXT_6 = ".ID + \".\" + \"";
  protected final String TEXT_7 = "\"; //$NON-NLS-1$ //$NON-NLS-2$" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static MarkerObserver fileObserver = null;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic void createDecorators(IDecoratorTarget decoratorTarget) {" + NL + "\t\tEditPart editPart = (EditPart)decoratorTarget.getAdapter(EditPart.class);" + NL + "\t\tif (editPart instanceof ";
  protected final String TEXT_8 = " ||" + NL + "\t\t\teditPart instanceof AbstractConnectionEditPart) {" + NL + "\t\t\tObject model = editPart.getModel();" + NL + "\t\t\tif((model instanceof View)) {" + NL + "\t\t\t\tView view = (View)model;" + NL + "\t\t\t\tif(!(view instanceof Edge) && !view.isSetElement()) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_9 = " ed = editPart.getViewer().getEditDomain();" + NL + "\t\t\tif(!(ed instanceof DiagramEditDomain)) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\tif(((DiagramEditDomain)ed).getEditorPart() instanceof ";
  protected final String TEXT_10 = ") {" + NL + "\t\t\t\tdecoratorTarget.installDecorator(KEY, new StatusDecorator(decoratorTarget));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t\t" + NL + "\tpublic boolean provides(";
  protected final String TEXT_11 = " operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\tView view = (View) decoratorTarget.getAdapter(View.class);" + NL + "\t\treturn view != null && ";
  protected final String TEXT_12 = ".MODEL_ID.equals(";
  protected final String TEXT_13 = ".getModelID(view));" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class StatusDecorator extends AbstractDecorator {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate String viewId;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic StatusDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfinal View view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ".getEditingDomain(view).runExclusive(new Runnable() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\tStatusDecorator.this.viewId = view != null ? ";
  protected final String TEXT_15 = ".getIdStr(view) : null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"ViewID access failure\", e); //$NON-NLS-1$\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "" + NL + "\t\t\tView view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tif (view == null || view.eResource() == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tIResource resource = getResource(view);" + NL + "\t\t\t// make sure we have a resource and that it exists in an open project" + NL + "\t\t\tif (resource == null || !resource.exists()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// query for all the validation markers of the current resource" + NL + "\t\t\tIMarker[] markers = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmarkers = resource.findMarkers(MARKER_TYPE, true, IResource.DEPTH_INFINITE);" + NL + "\t\t\t} catch (";
  protected final String TEXT_17 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_18 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tif (markers == null || markers.length == 0) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tString elementId = ";
  protected final String TEXT_19 = ".getIdStr(view);" + NL + "\t\t\tif (elementId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIMarker foundMarker = null;" + NL + "\t\t\tLabel toolTip = null;\t\t\t\t\t\t" + NL + "\t\t\tint severity = IMarker.SEVERITY_INFO;" + NL + "\t\t\tfor (int i = 0; i < markers.length; i++) {" + NL + "\t\t\t\tIMarker marker = markers[i];" + NL + "\t\t\t\tString attribute = marker.getAttribute(";
  protected final String TEXT_20 = ".ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\t\tif (attribute.equals(elementId)) {" + NL + "\t\t\t\t\tint nextSeverity = marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO);\t\t\t\t\t" + NL + "\t\t\t\t\tImage nextImage = getImage(nextSeverity);\t " + NL + "\t\t\t\t\tif(foundMarker == null) {\t\t\t\t" + NL + "\t\t\t\t\t\tfoundMarker = marker;" + NL + "\t\t\t\t\t\ttoolTip = new Label(marker.getAttribute(IMarker.MESSAGE, \"\"), nextImage);\t\t\t\t\t\t" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\tif(toolTip.getChildren().isEmpty()) {" + NL + "\t\t\t\t\t\t\tLabel comositeLabel = new Label();" + NL + "\t\t\t\t\t\t\tFlowLayout fl = new FlowLayout(false);" + NL + "\t\t\t\t\t\t\tfl.setMinorSpacing(0);" + NL + "\t\t\t\t\t\t\tcomositeLabel.setLayoutManager(fl);" + NL + "\t\t\t\t\t\t\tcomositeLabel.add(toolTip);" + NL + "\t\t\t\t\t\t\ttoolTip = comositeLabel;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\ttoolTip.add(new Label(marker.getAttribute(IMarker.MESSAGE, \"\"), nextImage)); //$NON-NLS-1$" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tseverity = (nextSeverity > severity) ? nextSeverity : severity;\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (foundMarker == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// add decoration" + NL + "\t\t\tif (editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\tImage img = getImage(severity);" + NL + "\t\t\t\tif (view instanceof Edge) {" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(img, 50, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tint margin = -1;" + NL + "\t\t\t\t\tif(editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\t\t\tmargin = ";
  protected final String TEXT_21 = ".getMapMode(" + NL + "\t\t\t\t\t\t\t((GraphicalEditPart)editPart).getFigure()).DPtoLP(margin);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(img, IDecoratorTarget.Direction.NORTH_EAST , margin, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetDecoration().setToolTip(toolTip);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate Image getImage(int severity) {" + NL + "\t\t\tString imageName = ";
  protected final String TEXT_22 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\tswitch (severity) {" + NL + "\t\t\tcase IMarker.SEVERITY_ERROR:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_23 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\tcase IMarker.SEVERITY_WARNING:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_24 = ".IMG_OBJS_WARN_TSK;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\tdefault:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_25 = ".IMG_OBJS_INFO_TSK;" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_26 = ".getWorkbench().getSharedImages().getImage(imageName);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static IResource getResource(View view) {" + NL + "\t\t\t";
  protected final String TEXT_27 = " model = view.eResource();" + NL + "\t\t\tif (model != null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_28 = ".getFile(model);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tView view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\tif (view == null)" + NL + "\t\t\t\treturn;" + NL + "\t\t\tDiagram diagramView = view.getDiagram();" + NL + "\t\t\tif (diagramView == null)" + NL + "\t\t\t\treturn;" + NL + "\t\t\tIFile file = ";
  protected final String TEXT_29 = ".getFile(diagramView.eResource());" + NL + "\t\t\tif (file != null) {" + NL + "\t\t\t\tif (fileObserver == null) {" + NL + "\t\t\t\t\tfileObserver = new MarkerObserver(diagramView);" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tfileObserver.registerDecorator(this);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tif (fileObserver != null) {" + NL + "\t\t\t\tfileObserver.unregisterDecorator(this);" + NL + "\t\t\t\tif (!fileObserver.isRegistered()) {" + NL + "\t\t\t\t\tfileObserver = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getViewId() {" + NL + "\t\t\treturn viewId;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic class MarkerObserver implements ";
  protected final String TEXT_30 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate HashMap mapOfIdsToDecorators = null;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered = false;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Diagram diagramView;" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate MarkerObserver(Diagram diagramView) {" + NL + "\t\t\tthis.diagramView = diagramView;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void registerDecorator(StatusDecorator decorator) {" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\tmapOfIdsToDecorators = new HashMap();" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Add to the list */" + NL + "\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\tif (list == null) {" + NL + "\t\t\t\tlist = new ArrayList(2);" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t\tmapOfIdsToDecorators.put(decoratorViewId, list);" + NL + "\t\t\t} else if (!list.contains(decorator)) {" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Register with the file change manager */" + NL + "\t\t\tif (!isRegistered()) {" + NL + "\t\t\t\t";
  protected final String TEXT_31 = ".getInstance().addFileObserver(this);" + NL + "\t\t\t\tisRegistered = true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void unregisterDecorator(StatusDecorator decorator) {" + NL + "\t\t\t/* Return if invalid decorator */" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Return if the decorator has invalid view id */" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators != null) {" + NL + "\t\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\t\tif (list != null) {" + NL + "\t\t\t\t\tlist.remove(decorator);" + NL + "\t\t\t\t\tif (list.isEmpty()) {" + NL + "\t\t\t\t\t\tmapOfIdsToDecorators.remove(decoratorViewId);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\tif (mapOfIdsToDecorators.isEmpty()) {" + NL + "\t\t\t\t\tmapOfIdsToDecorators = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\t/* Unregister with the file change manager */" + NL + "\t\t\t\tif (isRegistered()) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_32 = ".getInstance().removeFileObserver(this);" + NL + "\t\t\t\t\tisRegistered = false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileRenamed(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileMoved(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileDeleted(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileChanged(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerAdded(IMarker marker) {" + NL + "\t\t\tif(marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, null) != null) {" + NL + "\t\t\t\thandleMarkerChanged(marker);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerDeleted(IMarker marker, Map attributes) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element guid from the marker and retrieve" + NL + "\t\t\t// corresponding view" + NL + "\t\t\tString elementId = (String) attributes.get(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID);" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerChanged(IMarker marker) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null || !MARKER_TYPE.equals(getType(marker))) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element ID list from the marker and retrieve" + NL + "\t\t\t// corresponding view\t" + NL + "\t\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate void refreshDecorators(List decorators) {" + NL + "\t\t\tfinal List decoratorsToRefresh = decorators;\t\t" + NL + "\t\t\t";
  protected final String TEXT_33 = ".getWorkbench().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_34 = ".getEditingDomain(diagramView).runExclusive(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tfor(Iterator it = decoratorsToRefresh.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\t\tIDecorator decorator = (IDecorator) it.next();" + NL + "\t\t\t\t\t\t\t\t\tif (decorator != null) {" + NL + "\t\t\t\t\t\t\t\t\t\tdecorator.refresh();" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_35 = ".getInstance().logError(\"Decorator refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered() {" + NL + "\t\t\treturn isRegistered;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String getType(IMarker marker) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn marker.getType();" + NL + "\t\t\t} catch (";
  protected final String TEXT_36 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_37 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_38 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    
importManager.emitPackageStatement(stringBuffer);

importManager.markImportLocation(stringBuffer);
importManager.registerInnerClass("MarkerObserver");
importManager.registerInnerClass("StatusDecorator");
importManager.registerInnerClass("StatusFigure");

importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.Map");
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.core.resources.IMarker");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.draw2d.FlowLayout");
importManager.addImport("org.eclipse.draw2d.Label");
importManager.addImport("org.eclipse.gef.EditPart");
importManager.addImport("org.eclipse.gef.GraphicalEditPart");
importManager.addImport("org.eclipse.gef.editparts.AbstractConnectionEditPart");
importManager.addImport("org.eclipse.gmf.runtime.common.core.service.AbstractProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramEditDomain");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.AbstractDecorator");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.CreateDecoratorsOperation");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecorator");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.services.decorator.IDecoratorTarget");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.Edge");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.swt.graphics.Image");

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getValidationDecoratorProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getValidationDiagnosticMarkerType());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditDomain"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.core.service.IOperation"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IMarker"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IFileObserver"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_37);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_38);
    return stringBuffer.toString();
  }
}
@


1.8
log
@follow consisted spacing policy
@
text
@@


1.7
log
@#148124 Diagram Validation action should be run as WorkspaceModifyOperation
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d71 1
a71 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.6
log
@#147728 Validation decorators should aggregate multiple statuses
@
text
@d49 1
a49 1
  protected final String TEXT_32 = ".getInstance().removeFileObserver(this);" + NL + "\t\t\t\t\tisRegistered = false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileRenamed(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileMoved(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileDeleted(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileChanged(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerAdded(IMarker marker) { /* Empty Code */ }" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerDeleted(IMarker marker, Map attributes) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element guid from the marker and retrieve" + NL + "\t\t\t// corresponding view" + NL + "\t\t\tString elementId = (String) attributes.get(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID);" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerChanged(IMarker marker) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null || !MARKER_TYPE.equals(getType(marker))) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element ID list from the marker and retrieve" + NL + "\t\t\t// corresponding view\t" + NL + "\t\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate void refreshDecorators(List decorators) {" + NL + "\t\t\tfinal List decoratorsToRefresh = decorators;\t\t" + NL + "\t\t\t";
@


1.5
log
@#145521 ValidationDecoratorProvider.provides() should check modelID of view
@
text
@d36 4
a39 4
  protected final String TEXT_19 = ".getIdStr(view);" + NL + "\t\t\tif (elementId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIMarker foundMarker = null;" + NL + "\t\t\tfor (int i = 0; i < markers.length; i++) {" + NL + "\t\t\t\tIMarker marker = markers[i];" + NL + "\t\t\t\tString attribute = marker.getAttribute(";
  protected final String TEXT_20 = ".ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\t\tif (attribute.equals(elementId)) {" + NL + "\t\t\t\t\tfoundMarker = marker;" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (foundMarker == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// add decoration" + NL + "\t\t\tif (editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\tImage img = getImage(foundMarker);" + NL + "\t\t\t\tif (view instanceof Edge) {" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(img, 50, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tint margin = -1;" + NL + "\t\t\t\t\tif(editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\t\t\tmargin = ";
  protected final String TEXT_21 = ".getMapMode(" + NL + "\t\t\t\t\t\t\t((GraphicalEditPart)editPart).getFigure()).DPtoLP(margin);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(img, IDecoratorTarget.Direction.NORTH_EAST , margin, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetDecoration().setToolTip(new Label(foundMarker.getAttribute(IMarker.MESSAGE, \"\"), img));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate Image getImage(IMarker marker) {" + NL + "\t\t\tString imageName = ";
  protected final String TEXT_22 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\tswitch (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO)) {" + NL + "\t\t\tcase IMarker.SEVERITY_ERROR:" + NL + "\t\t\t\timageName = ";
d47 9
a55 10
  protected final String TEXT_30 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic ";
  protected final String TEXT_31 = " toolTipHelper;\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate HashMap mapOfIdsToDecorators = null;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered = false;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Diagram diagramView;" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate MarkerObserver(Diagram diagramView) {" + NL + "\t\t\tthis.diagramView = diagramView;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void registerDecorator(StatusDecorator decorator) {" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\tmapOfIdsToDecorators = new HashMap();" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Add to the list */" + NL + "\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\tif (list == null) {" + NL + "\t\t\t\tlist = new ArrayList(2);" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t\tmapOfIdsToDecorators.put(decoratorViewId, list);" + NL + "\t\t\t} else if (!list.contains(decorator)) {" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Register with the file change manager */" + NL + "\t\t\tif (!isRegistered()) {" + NL + "\t\t\t\t";
  protected final String TEXT_32 = ".getInstance().addFileObserver(this);" + NL + "\t\t\t\tisRegistered = true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void unregisterDecorator(StatusDecorator decorator) {" + NL + "\t\t\t/* Return if invalid decorator */" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Return if the decorator has invalid view id */" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators != null) {" + NL + "\t\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\t\tif (list != null) {" + NL + "\t\t\t\t\tlist.remove(decorator);" + NL + "\t\t\t\t\tif (list.isEmpty()) {" + NL + "\t\t\t\t\t\tmapOfIdsToDecorators.remove(decoratorViewId);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\tif (mapOfIdsToDecorators.isEmpty()) {" + NL + "\t\t\t\t\tmapOfIdsToDecorators = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\t/* Unregister with the file change manager */" + NL + "\t\t\t\tif (isRegistered()) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_33 = ".getInstance().removeFileObserver(this);" + NL + "\t\t\t\t\tisRegistered = false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileRenamed(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileMoved(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileDeleted(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileChanged(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerAdded(IMarker marker) { /* Empty Code */ }" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerDeleted(IMarker marker, Map attributes) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element guid from the marker and retrieve" + NL + "\t\t\t// corresponding view" + NL + "\t\t\tString elementId = (String) attributes.get(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID);" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerChanged(IMarker marker) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null || !MARKER_TYPE.equals(getType(marker))) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element ID list from the marker and retrieve" + NL + "\t\t\t// corresponding view\t" + NL + "\t\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate void refreshDecorators(List decorators) {" + NL + "\t\t\tfinal List decoratorsToRefresh = decorators;\t\t" + NL + "\t\t\t";
  protected final String TEXT_34 = ".getWorkbench().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_35 = ".getEditingDomain(diagramView).runExclusive(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tfor(Iterator it = decoratorsToRefresh.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\t\tIDecorator decorator = (IDecorator) it.next();" + NL + "\t\t\t\t\t\t\t\t\tif (decorator != null) {" + NL + "\t\t\t\t\t\t\t\t\t\tdecorator.refresh();" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_36 = ".getInstance().logError(\"Decorator refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered() {" + NL + "\t\t\treturn isRegistered;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String getType(IMarker marker) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn marker.getType();" + NL + "\t\t\t} catch (";
  protected final String TEXT_37 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_38 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_39 = NL;
d90 1
d160 1
a160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolTipHelper"));
d164 1
a164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager"));
d166 1
a166 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d168 1
a168 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d170 2
a172 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d174 1
a174 1
    stringBuffer.append(pluginActivatorClass);
a175 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_39);
@


1.4
log
@header comment should not be a javadoc comment
@
text
@d28 29
a56 27
  protected final String TEXT_11 = " operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\treturn decoratorTarget.getAdapter(View.class) != null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class StatusDecorator extends AbstractDecorator {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate String viewId;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic StatusDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfinal View view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\t\t";
  protected final String TEXT_12 = ".getEditingDomain(view).runExclusive(new Runnable() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\tStatusDecorator.this.viewId = view != null ? ";
  protected final String TEXT_13 = ".getIdStr(view) : null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ".getInstance().logError(\"ViewID access failure\", e); //$NON-NLS-1$\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "" + NL + "\t\t\tView view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tif (view == null || view.eResource() == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tIResource resource = getResource(view);" + NL + "\t\t\t// make sure we have a resource and that it exists in an open project" + NL + "\t\t\tif (resource == null || !resource.exists()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// query for all the validation markers of the current resource" + NL + "\t\t\tIMarker[] markers = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmarkers = resource.findMarkers(MARKER_TYPE, true, IResource.DEPTH_INFINITE);" + NL + "\t\t\t} catch (";
  protected final String TEXT_15 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tif (markers == null || markers.length == 0) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tString elementId = ";
  protected final String TEXT_17 = ".getIdStr(view);" + NL + "\t\t\tif (elementId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIMarker foundMarker = null;" + NL + "\t\t\tfor (int i = 0; i < markers.length; i++) {" + NL + "\t\t\t\tIMarker marker = markers[i];" + NL + "\t\t\t\tString attribute = marker.getAttribute(";
  protected final String TEXT_18 = ".ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\t\tif (attribute.equals(elementId)) {" + NL + "\t\t\t\t\tfoundMarker = marker;" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (foundMarker == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// add decoration" + NL + "\t\t\tif (editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\tImage img = getImage(foundMarker);" + NL + "\t\t\t\tif (view instanceof Edge) {" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(img, 50, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tint margin = -1;" + NL + "\t\t\t\t\tif(editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\t\t\tmargin = ";
  protected final String TEXT_19 = ".getMapMode(" + NL + "\t\t\t\t\t\t\t((GraphicalEditPart)editPart).getFigure()).DPtoLP(margin);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(img, IDecoratorTarget.Direction.NORTH_EAST , margin, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetDecoration().setToolTip(new Label(foundMarker.getAttribute(IMarker.MESSAGE, \"\"), img));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate Image getImage(IMarker marker) {" + NL + "\t\t\tString imageName = ";
  protected final String TEXT_20 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\tswitch (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO)) {" + NL + "\t\t\tcase IMarker.SEVERITY_ERROR:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_21 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\tcase IMarker.SEVERITY_WARNING:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_22 = ".IMG_OBJS_WARN_TSK;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\tdefault:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_23 = ".IMG_OBJS_INFO_TSK;" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_24 = ".getWorkbench().getSharedImages().getImage(imageName);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static IResource getResource(View view) {" + NL + "\t\t\t";
  protected final String TEXT_25 = " model = view.eResource();" + NL + "\t\t\tif (model != null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_26 = ".getFile(model);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tView view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\tif (view == null)" + NL + "\t\t\t\treturn;" + NL + "\t\t\tDiagram diagramView = view.getDiagram();" + NL + "\t\t\tif (diagramView == null)" + NL + "\t\t\t\treturn;" + NL + "\t\t\tIFile file = ";
  protected final String TEXT_27 = ".getFile(diagramView.eResource());" + NL + "\t\t\tif (file != null) {" + NL + "\t\t\t\tif (fileObserver == null) {" + NL + "\t\t\t\t\tfileObserver = new MarkerObserver(diagramView);" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tfileObserver.registerDecorator(this);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tif (fileObserver != null) {" + NL + "\t\t\t\tfileObserver.unregisterDecorator(this);" + NL + "\t\t\t\tif (!fileObserver.isRegistered()) {" + NL + "\t\t\t\t\tfileObserver = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getViewId() {" + NL + "\t\t\treturn viewId;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic class MarkerObserver implements ";
  protected final String TEXT_28 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic ";
  protected final String TEXT_29 = " toolTipHelper;\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate HashMap mapOfIdsToDecorators = null;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered = false;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Diagram diagramView;" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate MarkerObserver(Diagram diagramView) {" + NL + "\t\t\tthis.diagramView = diagramView;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void registerDecorator(StatusDecorator decorator) {" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\tmapOfIdsToDecorators = new HashMap();" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Add to the list */" + NL + "\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\tif (list == null) {" + NL + "\t\t\t\tlist = new ArrayList(2);" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t\tmapOfIdsToDecorators.put(decoratorViewId, list);" + NL + "\t\t\t} else if (!list.contains(decorator)) {" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Register with the file change manager */" + NL + "\t\t\tif (!isRegistered()) {" + NL + "\t\t\t\t";
  protected final String TEXT_30 = ".getInstance().addFileObserver(this);" + NL + "\t\t\t\tisRegistered = true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void unregisterDecorator(StatusDecorator decorator) {" + NL + "\t\t\t/* Return if invalid decorator */" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Return if the decorator has invalid view id */" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators != null) {" + NL + "\t\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\t\tif (list != null) {" + NL + "\t\t\t\t\tlist.remove(decorator);" + NL + "\t\t\t\t\tif (list.isEmpty()) {" + NL + "\t\t\t\t\t\tmapOfIdsToDecorators.remove(decoratorViewId);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\tif (mapOfIdsToDecorators.isEmpty()) {" + NL + "\t\t\t\t\tmapOfIdsToDecorators = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\t/* Unregister with the file change manager */" + NL + "\t\t\t\tif (isRegistered()) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_31 = ".getInstance().removeFileObserver(this);" + NL + "\t\t\t\t\tisRegistered = false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileRenamed(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileMoved(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileDeleted(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileChanged(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerAdded(IMarker marker) { /* Empty Code */ }" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerDeleted(IMarker marker, Map attributes) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element guid from the marker and retrieve" + NL + "\t\t\t// corresponding view" + NL + "\t\t\tString elementId = (String) attributes.get(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID);" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerChanged(IMarker marker) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null || !MARKER_TYPE.equals(getType(marker))) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element ID list from the marker and retrieve" + NL + "\t\t\t// corresponding view\t" + NL + "\t\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate void refreshDecorators(List decorators) {" + NL + "\t\t\tfinal List decoratorsToRefresh = decorators;\t\t" + NL + "\t\t\t";
  protected final String TEXT_32 = ".getWorkbench().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_33 = ".getEditingDomain(diagramView).runExclusive(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tfor(Iterator it = decoratorsToRefresh.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\t\tIDecorator decorator = (IDecorator) it.next();" + NL + "\t\t\t\t\t\t\t\t\tif (decorator != null) {" + NL + "\t\t\t\t\t\t\t\t\t\tdecorator.refresh();" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(\"Decorator refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered() {" + NL + "\t\t\treturn isRegistered;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String getType(IMarker marker) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn marker.getType();" + NL + "\t\t\t} catch (";
  protected final String TEXT_35 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_36 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_37 = NL;
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d124 1
a124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d126 1
a126 1
    stringBuffer.append(pluginActivatorClass);
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IMarker"));
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil"));
d138 1
a138 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
d140 1
a140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d148 1
a148 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d150 1
a150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d152 2
a154 2
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IFileObserver"));
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolTipHelper"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager"));
d160 2
a162 2
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d164 1
a164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d166 1
a166 1
    stringBuffer.append(pluginActivatorClass);
d168 1
a168 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d172 4
d177 1
a177 1
    stringBuffer.append(TEXT_37);
@


1.3
log
@#144727 Validation status decorations are not shown in the diagram
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.2
log
@Correcting copyright processing
@
text
@d28 27
a54 36
  protected final String TEXT_11 = " operation) {" + NL + "\t\tif (!(operation instanceof CreateDecoratorsOperation)) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "" + NL + "\t\tIDecoratorTarget decoratorTarget = ((CreateDecoratorsOperation) operation).getDecoratorTarget();" + NL + "\t\treturn decoratorTarget.getAdapter(View.class) != null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class StatusDecorator extends AbstractDecorator {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static final ";
  protected final String TEXT_12 = " mouseListener = createMouseListener();\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate String viewId;" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic StatusDecorator(IDecoratorTarget decoratorTarget) {" + NL + "\t\t\tsuper(decoratorTarget);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tfinal View view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\t\t";
  protected final String TEXT_13 = ".getEditingDomain(view).runExclusive(new Runnable() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\tStatusDecorator.this.viewId = view != null ? ";
  protected final String TEXT_14 = ".getIdStr(view) : null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"ViewID access failure\", e); //$NON-NLS-1$\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic void refresh() {" + NL + "\t\t\tremoveDecoration();" + NL + "" + NL + "\t\t\tView view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\tEditPart editPart = (EditPart) getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\tif (view == null || view.eResource() == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tIResource resource = getResource(view);" + NL + "\t\t\t// make sure we have a resource and that it exists in an open project" + NL + "\t\t\tif (resource == null || !resource.exists()) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// query for all the validation markers of the current resource" + NL + "\t\t\tIMarker[] markers = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmarkers = resource.findMarkers(MARKER_TYPE, true, IResource.DEPTH_INFINITE);" + NL + "\t\t\t} catch (";
  protected final String TEXT_16 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tif (markers == null || markers.length == 0) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tString elementId = ";
  protected final String TEXT_18 = ".getIdStr(view);" + NL + "\t\t\tif (elementId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIMarker foundMarker = null;" + NL + "\t\t\tfor (int i = 0; i < markers.length; i++) {" + NL + "\t\t\t\tIMarker marker = markers[i];" + NL + "\t\t\t\tString attribute = marker.getAttribute(";
  protected final String TEXT_19 = ".ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\t\tif (attribute.equals(elementId)) {" + NL + "\t\t\t\t\tfoundMarker = marker;" + NL + "\t\t\t\t\tbreak;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\tif (foundMarker == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t// add decoration" + NL + "\t\t\tif (editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\tImage img = getImage(foundMarker);" + NL + "\t\t\t\tStatusFigure figure = new StatusFigure(this, img, foundMarker.getAttribute(IMarker.MESSAGE, null));" + NL + "\t\t\t\tfigure.setSize(img.getBounds().width, img.getBounds().height);" + NL + "\t\t\t\tfigure.setToolTip(new Label());" + NL + "\t\t\t\t" + NL + "\t\t\t\tif (view instanceof Edge) {" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addConnectionDecoration(figure, 50, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tint margin = -1;" + NL + "\t\t\t\t\tif(editPart instanceof GraphicalEditPart) {" + NL + "\t\t\t\t\t\tmargin = ";
  protected final String TEXT_20 = ".getMapMode(" + NL + "\t\t\t\t\t\t\t((GraphicalEditPart)editPart).getFigure()).DPtoLP(margin);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tsetDecoration(getDecoratorTarget().addShapeDecoration(figure, IDecoratorTarget.Direction.NORTH_EAST , margin, true));\t\t\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tfigure.addMouseMotionListener(mouseListener);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_21 = " createMouseListener() {" + NL + "\t\t\treturn new ";
  protected final String TEXT_22 = ".Stub() {" + NL + "\t\t\t\tpublic void mouseHover(";
  protected final String TEXT_23 = " me) {" + NL + "\t\t\t\t\tStatusFigure source = (StatusFigure) me.getSource();" + NL + "\t\t\t\t\tGraphicalEditPart editPart = (GraphicalEditPart) source.decorator.getDecoratorTarget().getAdapter(EditPart.class);" + NL + "\t\t\t\t\t";
  protected final String TEXT_24 = " control = editPart.getViewer().getControl();" + NL + "\t\t\t\t\tIFigure tip = source.getLabel();" + NL + "" + NL + "\t\t\t\t\t";
  protected final String TEXT_25 = " bounds = source.getBounds().getExpanded(2, 2);" + NL + "\t\t\t\t\tsource.translateToAbsolute(bounds);" + NL + "\t\t\t\t\torg.eclipse.swt.graphics.Rectangle location = new org.eclipse.swt.graphics.Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);" + NL + "\t\t\t\t\tlocation = ";
  protected final String TEXT_26 = ".getCurrent().map(control, null, location);" + NL + "\t\t\t\t\treset();" + NL + "\t\t\t\t\tMarkerObserver.toolTipHelper = new ";
  protected final String TEXT_27 = "(control);" + NL + "\t\t\t\t\tMarkerObserver.toolTipHelper.displayToolTipNear(source, tip, location.x, location.y);" + NL + "\t\t\t\t}" + NL + "\t\t\t\t\t" + NL + "\t\t\t\tpublic void mouseExited(";
  protected final String TEXT_28 = " me) {" + NL + "\t\t\t\t\treset();" + NL + "\t\t\t\t}" + NL + "\t\t\t\t\t" + NL + "\t\t\t\tvoid reset() {" + NL + "\t\t\t\t\tif(MarkerObserver.toolTipHelper != null) {" + NL + "\t\t\t\t\t\tMarkerObserver.toolTipHelper.dispose();" + NL + "\t\t\t\t\t\tMarkerObserver.toolTipHelper = null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}\t\t\t" + NL + "\t\t\t};\t\t\t\t" + NL + "\t\t}\t\t" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate Image getImage(IMarker marker) {" + NL + "\t\t\tString imageName = ";
  protected final String TEXT_29 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\tswitch (marker.getAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO)) {" + NL + "\t\t\tcase IMarker.SEVERITY_ERROR:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_30 = ".IMG_OBJS_ERROR_TSK;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\tcase IMarker.SEVERITY_WARNING:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_31 = ".IMG_OBJS_WARN_TSK;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\tdefault:" + NL + "\t\t\t\timageName = ";
  protected final String TEXT_32 = ".IMG_OBJS_INFO_TSK;" + NL + "\t\t\t}" + NL + "\t\t\treturn ";
  protected final String TEXT_33 = ".getWorkbench().getSharedImages().getImage(imageName);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static IResource getResource(View view) {" + NL + "\t\t\t";
  protected final String TEXT_34 = " model = view.eResource();" + NL + "\t\t\tif (model != null) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_35 = ".getFile(model);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void activate() {" + NL + "\t\t\tView view = (View) getDecoratorTarget().getAdapter(View.class);" + NL + "\t\t\tif (view == null)" + NL + "\t\t\t\treturn;" + NL + "\t\t\tDiagram diagramView = view.getDiagram();" + NL + "\t\t\tif (diagramView == null)" + NL + "\t\t\t\treturn;" + NL + "\t\t\tIFile file = ";
  protected final String TEXT_36 = ".getFile(diagramView.eResource());" + NL + "\t\t\tif (file != null) {" + NL + "\t\t\t\tif (fileObserver == null) {" + NL + "\t\t\t\t\tfileObserver = new MarkerObserver(diagramView);" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tfileObserver.registerDecorator(this);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void deactivate() {" + NL + "\t\t\tif (fileObserver != null) {" + NL + "\t\t\t\tfileObserver.unregisterDecorator(this);" + NL + "\t\t\t\tif (!fileObserver.isRegistered()) {" + NL + "\t\t\t\t\tfileObserver = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tsuper.deactivate();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getViewId() {" + NL + "\t\t\treturn viewId;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic class MarkerObserver implements ";
  protected final String TEXT_37 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic ";
  protected final String TEXT_38 = " toolTipHelper;\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate HashMap mapOfIdsToDecorators = null;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered = false;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Diagram diagramView;" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate MarkerObserver(Diagram diagramView) {" + NL + "\t\t\tthis.diagramView = diagramView;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void registerDecorator(StatusDecorator decorator) {" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\tmapOfIdsToDecorators = new HashMap();" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Add to the list */" + NL + "\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\tif (list == null) {" + NL + "\t\t\t\tlist = new ArrayList(2);" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t\tmapOfIdsToDecorators.put(decoratorViewId, list);" + NL + "\t\t\t} else if (!list.contains(decorator)) {" + NL + "\t\t\t\tlist.add(decorator);" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Register with the file change manager */" + NL + "\t\t\tif (!isRegistered()) {" + NL + "\t\t\t\t";
  protected final String TEXT_39 = ".getInstance().addFileObserver(this);" + NL + "\t\t\t\tisRegistered = true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate void unregisterDecorator(StatusDecorator decorator) {" + NL + "\t\t\t/* Return if invalid decorator */" + NL + "\t\t\tif (decorator == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/* Return if the decorator has invalid view id */" + NL + "\t\t\tString decoratorViewId = decorator.getViewId();" + NL + "\t\t\tif (decoratorViewId == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators != null) {" + NL + "\t\t\t\tList list = (List) mapOfIdsToDecorators.get(decoratorViewId);" + NL + "\t\t\t\tif (list != null) {" + NL + "\t\t\t\t\tlist.remove(decorator);" + NL + "\t\t\t\t\tif (list.isEmpty()) {" + NL + "\t\t\t\t\t\tmapOfIdsToDecorators.remove(decoratorViewId);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\tif (mapOfIdsToDecorators.isEmpty()) {" + NL + "\t\t\t\t\tmapOfIdsToDecorators = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\t/* Unregister with the file change manager */" + NL + "\t\t\t\tif (isRegistered()) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_40 = ".getInstance().removeFileObserver(this);" + NL + "\t\t\t\t\tisRegistered = false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileRenamed(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileMoved(IFile oldFile, IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileDeleted(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleFileChanged(IFile file) { /* Empty Code */ }" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerAdded(IMarker marker) { /* Empty Code */ }" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerDeleted(IMarker marker, Map attributes) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element guid from the marker and retrieve" + NL + "\t\t\t// corresponding view" + NL + "\t\t\tString elementId = (String) attributes.get(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID);" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tpublic void handleMarkerChanged(IMarker marker) {" + NL + "\t\t\tif (mapOfIdsToDecorators == null || !MARKER_TYPE.equals(getType(marker))) {" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t\t// Extract the element ID list from the marker and retrieve" + NL + "\t\t\t// corresponding view\t" + NL + "\t\t\tString elementId = marker.getAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, \"\"); //$NON-NLS-1$" + NL + "\t\t\tList list = elementId != null ? (List) mapOfIdsToDecorators.get(elementId) : null;" + NL + "\t" + NL + "\t\t\tif (list != null && !list.isEmpty()) {" + NL + "\t\t\t\trefreshDecorators(list);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate void refreshDecorators(List decorators) {" + NL + "\t\t\tfinal List decoratorsToRefresh = decorators;\t\t" + NL + "\t\t\t";
  protected final String TEXT_41 = ".getWorkbench().getDisplay().asyncExec(new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_42 = ".getEditingDomain(diagramView).runExclusive(new Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tfor(Iterator it = decoratorsToRefresh.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\t\tIDecorator decorator = (IDecorator) it.next();" + NL + "\t\t\t\t\t\t\t\t\tif (decorator != null) {" + NL + "\t\t\t\t\t\t\t\t\t\tdecorator.refresh();" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_43 = ".getInstance().logError(\"Decorator refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate boolean isRegistered() {" + NL + "\t\t\treturn isRegistered;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String getType(IMarker marker) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\treturn marker.getType();" + NL + "\t\t\t} catch (";
  protected final String TEXT_44 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_45 = ".getInstance().logError(\"Validation marker refresh failure\", e); //$NON-NLS-1$" + NL + "\t\t\t\treturn \"\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class StatusFigure extends ImageFigure {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate final StatusDecorator decorator;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tprivate final String labelTxt;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tStatusFigure(StatusDecorator decorator, Image image, String labelTxt) {" + NL + "\t\t\tsuper(image);" + NL + "\t\t\tthis.decorator = decorator;" + NL + "\t\t\tthis.labelTxt = labelTxt;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t" + NL + "\t\tLabel getLabel() {" + NL + "\t\t\treturn (labelTxt != null) ? new Label(labelTxt, getImage()) : null;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_46 = NL;
a88 2
importManager.addImport("org.eclipse.draw2d.IFigure");
importManager.addImport("org.eclipse.draw2d.ImageFigure");
d120 1
a120 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MouseMotionListener"));
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
d124 1
a124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d126 2
a128 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d130 1
a130 1
    stringBuffer.append(pluginActivatorClass);
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IMarker"));
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil"));
d138 1
a138 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MouseMotionListener"));
d140 1
a140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MouseMotionListener"));
d142 1
a142 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MouseEvent"));
d144 1
a144 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Control"));
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Rectangle"));
d148 1
a148 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
d150 1
a150 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolTipHelper"));
d152 1
a152 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MouseEvent"));
d154 1
a154 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
d156 1
a156 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
d160 1
a160 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ISharedImages"));
d162 1
a162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d164 1
a164 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d166 1
a166 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d168 1
a168 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d170 1
a170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.IFileObserver"));
a171 18
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ToolTipHelper"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.resources.FileChangeManager"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.util.TransactionUtil"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_45);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_46);
@


1.1
log
@#136803 Support decorator provider for validated elements in generated diagram editors
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d79 1
a79 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@

