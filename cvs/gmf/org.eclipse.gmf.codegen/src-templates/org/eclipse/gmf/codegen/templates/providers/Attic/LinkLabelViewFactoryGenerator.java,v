head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	I20060113-1700:1.9
	M4_10:1.9
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.6
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.5
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.01.17.11.46.14;	author ashatalin;	state dead;
branches;
next	1.9;

1.9
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.12.10.41.34;	author dstadnik;	state dead;
branches;
next	1.7;

1.7
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.21.13.31.57;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Removing obsolete templates
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.codegen.util.*;

public class LinkLabelViewFactoryGenerator
{
  protected static String nl;
  public static synchronized LinkLabelViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LinkLabelViewFactoryGenerator result = new LinkLabelViewFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"modelID\", \"";
  protected final String TEXT_8 = "\"); //$NON-NLS-1$" + NL + "annotation.getDetails().put(\"visualID\", \"";
  protected final String TEXT_9 = "\"); //$NON-NLS-1$" + NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_10 = ".";
  protected final String TEXT_11 = "Labels.";
  protected final String TEXT_12 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    GenLinkLabel label = (GenLinkLabel) argument;
    GenDiagram genDiagram = label.getDiagram();
    stringBuffer.append(TEXT_1);
    stringBuffer.append(genDiagram.getNotationViewFactoriesPackageName());
    stringBuffer.append(TEXT_2);
    ImportUtil importManager = new ImportUtil(genDiagram.getNotationViewFactoriesPackageName());
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(label.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_5);
    GenCommonBase genElement = label;
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genElement.getVisualID());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(label.getLink().getUniqueIdentifier());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(label.getSemanticHintFieldName());
    stringBuffer.append(TEXT_12);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_13);
    return stringBuffer.toString();
  }
}
@


1.9
log
@#114178
Create shortcut functionality added
@
text
@@


1.8
log
@#122054 support external node labels (partial fix)
@
text
@d24 7
a30 6
  protected final String TEXT_7 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_8 = "\");" + NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_9 = ".";
  protected final String TEXT_10 = "Labels.";
  protected final String TEXT_11 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d36 1
a36 1
    GenDiagram diagram = label.getDiagram();
d38 1
a38 1
    stringBuffer.append(diagram.getNotationViewFactoriesPackageName());
d40 1
a40 1
    ImportUtil importManager = new ImportUtil(diagram.getNotationViewFactoriesPackageName());
d49 2
a51 2
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(diagram.getSemanticHintsQualifiedClassName()));
d53 2
d56 1
a56 1
    stringBuffer.append(TEXT_10);
d58 1
a58 1
    stringBuffer.append(TEXT_11);
d60 1
a60 1
    stringBuffer.append(TEXT_12);
@


1.7
log
@#121581
Fields for the compartments are named unique.
@
text
@@


1.6
log
@#116798 create distinct package for the view factories
@
text
@d54 1
a54 1
    stringBuffer.append(AccessUtil.getLabelTextId(label));
@


1.5
log
@#115972 generate single class with semantic hints
@
text
@d37 1
a37 1
    stringBuffer.append(diagram.getProvidersPackageName());
d39 1
a39 1
    ImportUtil importManager = new ImportUtil(diagram.getProvidersPackageName());
@


1.4
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d19 11
a29 8
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EAnnotation;" + NL + "import org.eclipse.emf.ecore.EcoreFactory;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = "EAnnotation annotation = EcoreFactory.eINSTANCE.createEAnnotation();" + NL + "annotation.setSource(\"VisualID\");" + NL + "view.getEAnnotations().add(annotation);" + NL + "annotation.getDetails().put(\"value\", \"";
  protected final String TEXT_6 = "\");" + NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_7 = ".Labels.";
  protected final String TEXT_8 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d39 1
a39 1
    stringBuffer.append(label.getNotationViewFactoryClassName());
d41 1
a41 1
    GenCommonBase genElement = label;
d43 1
d45 1
a45 1
    stringBuffer.append(genElement.getVisualID());
a46 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(label.getLink()));
d48 1
a48 1
    stringBuffer.append(AccessUtil.getLabelTextId(label));
d50 1
d52 6
@


1.3
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d19 8
a26 5
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.AbstractLabelViewFactory;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_4 = ".Labels.";
  protected final String TEXT_5 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;
d38 1
a38 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(label.getLink()));
a39 1
    stringBuffer.append(AccessUtil.getLabelTextId(label));
d41 1
d43 5
@


1.2
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d28 2
a29 2
    LinkLabel label = (LinkLabel) argument;
    GenDiagram genDiagram = label.getLink().getDiagram();
d31 1
a31 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d33 1
a33 1
    stringBuffer.append(AccessUtil.getLinkLabelViewFactoryClassName(label));
d37 1
a37 1
    stringBuffer.append(AccessUtil.getLinkLabelTextId(label));
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d20 4
a23 3
  protected final String TEXT_3 = " extends AbstractLabelViewFactory {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tgetViewService().createNode(semanticAdapter, view, \"";
  protected final String TEXT_4 = "\"," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}" + NL + "}";
  protected final String TEXT_5 = NL;
d35 1
a35 1
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
d37 1
d39 1
@

