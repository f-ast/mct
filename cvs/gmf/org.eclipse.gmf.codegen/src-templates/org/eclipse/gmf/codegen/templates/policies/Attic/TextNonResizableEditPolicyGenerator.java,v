head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20070202-0200:1.11
	v20061214-0000:1.13
	v20061120-1300:1.12
	M3_20:1.12
	v20061117-0800:1.12
	v20061027-1200:1.11
	v20061020-1000:1.11
	v20061013-1330:1.12
	v20060919-0800:1.11
	v20060907-1100:1.11
	M1_20:1.11
	v20060904-1500:1.11
	v20060824-1600:1.11
	v20060817-1500:1.11
	v20060728-0500:1.11
	v20060713-1700:1.11
	R1_0_maintenance:1.11.0.2
	R1_0:1.11
	v20060627-1200:1.11
	v20060626-1420:1.11
	v20060620-0400:1.11
	v20060616-1400:1.11
	v20060616-1200:1.11
	v20060609-1400:1.11
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.9
	v20060519-1300:1.9
	v20060519-0800:1.9
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2006.12.18.13.23.18;	author dstadnik;	state dead;
branches;
next	1.13;
commitid	113e4586960e4567;

1.13
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.12;
commitid	5f734567714f4567;

1.12
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.16.05.47;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.4;

1.4
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.16.16.06.46;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.14.19.19.46;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.14.15.31.58;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.14
log
@rewrite text feedback edit policies in xpand
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class TextNonResizableEditPolicyGenerator {
 
  protected static String nl;
  public static synchronized TextNonResizableEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    TextNonResizableEditPolicyGenerator result = new TextNonResizableEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "import org.eclipse.draw2d.ColorConstants;" + NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Label;" + NL + "import org.eclipse.draw2d.RectangleFigure;" + NL + "import org.eclipse.draw2d.geometry.Rectangle;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gef.handles.MoveHandle;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends NonResizableEditPolicyEx {";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure selectionFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure focusFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showPrimarySelection() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setSelected(true);" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(true);" + NL + "\t\t} else {" + NL + "\t\t\tshowSelection();" + NL + "\t\t\tshowFocus();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setSelected(true);" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(false);" + NL + "\t\t} else {" + NL + "\t\t\thideSelection();" + NL + "\t\t\taddFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());" + NL + "\t\t\trefreshSelectionFeedback();" + NL + "\t\t\thideFocus();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setSelected(false);" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(false);" + NL + "\t\t} else {" + NL + "\t\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\t\tremoveFeedback(selectionFeedbackFigure);" + NL + "\t\t\t\tselectionFeedbackFigure = null;" + NL + "\t\t\t}" + NL + "\t\t\thideFocus();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(true);" + NL + "\t\t} else {" + NL + "\t\t\thideFocus();" + NL + "\t\t\taddFeedback(focusFeedbackFigure = createFocusFeedbackFigure());" + NL + "\t\t\trefreshFocusFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(false);" + NL + "\t\t} else {" + NL + "\t\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\t\tremoveFeedback(focusFeedbackFigure);" + NL + "\t\t\t\tfocusFeedbackFigure = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getFeedbackLayer() {" + NL + "\t\treturn getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Rectangle getFeedbackBounds() {" + NL + "\t\tRectangle bounds;" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tbounds = ((Label) getHostFigure()).getTextBounds();" + NL + "\t\t\tbounds.intersect(getHostFigure().getBounds());" + NL + "\t\t} else {" + NL + "\t\t\tbounds = getHostFigure().getBounds().getCopy();" + NL + "\t\t}" + NL + "\t\tgetHostFigure().getParent().translateToAbsolute(bounds);" + NL + "\t\tgetFeedbackLayer().translateToRelative(bounds);" + NL + "\t\treturn bounds;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createSelectionFeedbackFigure() {" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tLabel feedbackFigure = new Label();" + NL + "\t\t\tfeedbackFigure.setOpaque(true);" + NL + "\t\t\tfeedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);" + NL + "\t\t\tfeedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t} else {" + NL + "\t\t\tRectangleFigure feedbackFigure = new RectangleFigure();" + NL + "\t\t\tfeedbackFigure.setFill(false);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFocusFeedbackFigure() {" + NL + "\t\treturn new Figure() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tgraphics.drawFocus(getBounds().getResized(-1, -1));" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void updateLabel(Label target) {" + NL + "\t\tLabel source = (Label) getHostFigure();" + NL + "\t\ttarget.setText(source.getText());" + NL + "\t\ttarget.setTextAlignment(source.getTextAlignment());" + NL + "\t\ttarget.setFont(source.getFont());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSelectionFeedback() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tif (selectionFeedbackFigure instanceof Label) {" + NL + "\t\t\t\tupdateLabel((Label) selectionFeedbackFigure);" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t\t} else {" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFocusFeedback() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tfocusFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void refreshFeedback() {" + NL + "\t\trefreshSelectionFeedback();" + NL + "\t\trefreshFocusFeedback();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getTextNonResizableEditPolicyClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_9);
    return stringBuffer.toString();
  }
}@


1.13
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@@


1.12
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d37 7
a43 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.11
log
@header comment should not be a javadoc comment
@
text
@d37 1
a37 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.10
log
@Correcting copyright processing
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.9
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d138 1
a138 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.8
log
@provide native feedback for WrapLabels
@
text
@d22 5
a26 5
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "import org.eclipse.draw2d.ColorConstants;" + NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Label;" + NL + "import org.eclipse.draw2d.RectangleFigure;" + NL + "import org.eclipse.draw2d.geometry.Rectangle;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gef.handles.MoveHandle;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends NonResizableEditPolicyEx {";
a27 2
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure selectionFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure focusFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showPrimarySelection() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setSelected(true);" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(true);" + NL + "\t\t} else {" + NL + "\t\t\tshowSelection();" + NL + "\t\t\tshowFocus();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setSelected(true);" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(false);" + NL + "\t\t} else {" + NL + "\t\t\thideSelection();" + NL + "\t\t\taddFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());" + NL + "\t\t\trefreshSelectionFeedback();" + NL + "\t\t\thideFocus();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setSelected(false);" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(false);" + NL + "\t\t} else {" + NL + "\t\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\t\tremoveFeedback(selectionFeedbackFigure);" + NL + "\t\t\t\tselectionFeedbackFigure = null;" + NL + "\t\t\t}" + NL + "\t\t\thideFocus();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(true);" + NL + "\t\t} else {" + NL + "\t\t\thideFocus();" + NL + "\t\t\taddFeedback(focusFeedbackFigure = createFocusFeedbackFigure());" + NL + "\t\t\trefreshFocusFeedback();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tif (getHostFigure() instanceof WrapLabel) {" + NL + "\t\t\t((WrapLabel) getHostFigure()).setFocus(false);" + NL + "\t\t} else {" + NL + "\t\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\t\tremoveFeedback(focusFeedbackFigure);" + NL + "\t\t\t\tfocusFeedbackFigure = null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getFeedbackLayer() {" + NL + "\t\treturn getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Rectangle getFeedbackBounds() {" + NL + "\t\tRectangle bounds;" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tbounds = ((Label) getHostFigure()).getTextBounds();" + NL + "\t\t\tbounds.intersect(getHostFigure().getBounds());" + NL + "\t\t} else {" + NL + "\t\t\tbounds = getHostFigure().getBounds().getCopy();" + NL + "\t\t}" + NL + "\t\tgetHostFigure().getParent().translateToAbsolute(bounds);" + NL + "\t\tgetFeedbackLayer().translateToRelative(bounds);" + NL + "\t\treturn bounds;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createSelectionFeedbackFigure() {" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tLabel feedbackFigure = new Label();" + NL + "\t\t\tfeedbackFigure.setOpaque(true);" + NL + "\t\t\tfeedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);" + NL + "\t\t\tfeedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t} else {" + NL + "\t\t\tRectangleFigure feedbackFigure = new RectangleFigure();" + NL + "\t\t\tfeedbackFigure.setFill(false);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFocusFeedbackFigure() {" + NL + "\t\treturn new Figure() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tgraphics.drawFocus(getBounds().getResized(-1, -1));" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void updateLabel(Label target) {" + NL + "\t\tLabel source = (Label) getHostFigure();" + NL + "\t\ttarget.setText(source.getText());" + NL + "\t\ttarget.setTextAlignment(source.getTextAlignment());" + NL + "\t\ttarget.setFont(source.getFont());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSelectionFeedback() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tif (selectionFeedbackFigure instanceof Label) {" + NL + "\t\t\t\tupdateLabel((Label) selectionFeedbackFigure);" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t\t} else {" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFocusFeedback() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tfocusFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void refreshFeedback() {" + NL + "\t\trefreshSelectionFeedback();" + NL + "\t\trefreshFocusFeedback();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;
d129 2
a130 1
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d141 1
d143 1
a143 1
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
d145 1
a145 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPoliciesPackageName());
a146 1
    importManager.markImportLocation(stringBuffer);
a147 1
    stringBuffer.append(genDiagram.getTextNonResizableEditPolicyClassName());
d149 1
a150 3
    stringBuffer.append(TEXT_10);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_11);
@


1.7
log
@using M6 to generate code.
@
text
@d24 1
a24 1
  protected final String TEXT_6 = NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "import org.eclipse.draw2d.ColorConstants;" + NL + "import org.eclipse.draw2d.Figure;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Label;" + NL + "import org.eclipse.draw2d.RectangleFigure;" + NL + "import org.eclipse.draw2d.geometry.Rectangle;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gef.handles.MoveHandle;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;";
d28 1
a28 1
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure selectionFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure focusFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showPrimarySelection() {" + NL + "\t\tshowSelection();" + NL + "\t\tshowFocus();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\thideSelection();" + NL + "\t\taddFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());" + NL + "\t\trefreshSelectionFeedback();" + NL + "\t\thideFocus();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tremoveFeedback(selectionFeedbackFigure);" + NL + "\t\t\tselectionFeedbackFigure = null;" + NL + "\t\t}" + NL + "\t\thideFocus();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\thideFocus();" + NL + "\t\taddFeedback(focusFeedbackFigure = createFocusFeedbackFigure());" + NL + "\t\trefreshFocusFeedback();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tremoveFeedback(focusFeedbackFigure);" + NL + "\t\t\tfocusFeedbackFigure = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getFeedbackLayer() {" + NL + "\t\treturn getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Rectangle getFeedbackBounds() {" + NL + "\t\tRectangle bounds;" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tbounds = ((Label) getHostFigure()).getTextBounds();" + NL + "\t\t\tbounds.intersect(getHostFigure().getBounds());" + NL + "\t\t} else {" + NL + "\t\t\tbounds = getHostFigure().getBounds().getCopy();" + NL + "\t\t}" + NL + "\t\tgetHostFigure().getParent().translateToAbsolute(bounds);" + NL + "\t\tgetFeedbackLayer().translateToRelative(bounds);" + NL + "\t\treturn bounds;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createSelectionFeedbackFigure() {" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tLabel feedbackFigure = new Label();" + NL + "\t\t\tfeedbackFigure.setOpaque(true);" + NL + "\t\t\tfeedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);" + NL + "\t\t\tfeedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t} else {" + NL + "\t\t\tRectangleFigure feedbackFigure = new RectangleFigure();" + NL + "\t\t\tfeedbackFigure.setFill(false);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFocusFeedbackFigure() {" + NL + "\t\treturn new Figure() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tgraphics.drawFocus(getBounds().getResized(-1, -1));" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void updateLabel(Label target) {" + NL + "\t\tLabel source = (Label) getHostFigure();" + NL + "\t\ttarget.setText(source.getText());" + NL + "\t\ttarget.setTextAlignment(source.getTextAlignment());" + NL + "\t\ttarget.setFont(source.getFont());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSelectionFeedback() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tif (selectionFeedbackFigure instanceof Label) {" + NL + "\t\t\t\tupdateLabel((Label) selectionFeedbackFigure);" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t\t} else {" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFocusFeedback() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tfocusFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void refreshFeedback() {" + NL + "\t\trefreshSelectionFeedback();" + NL + "\t\trefreshFocusFeedback();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
@


1.6
log
@restore generators
@
text
@d129 1
a129 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.5
log
@#134095 do not store compiled templates in cvs
@
text
@d129 1
a129 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@Switching to eclipse M6.
@
text
@@


1.3
log
@translate feedback bounds to consider zoom factor and coordinate systems
@
text
@d129 1
a129 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.2
log
@provide feedback consistent with the runtime
@
text
@d28 1
a28 1
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure selectionFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure focusFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showPrimarySelection() {" + NL + "\t\tshowSelection();" + NL + "\t\tshowFocus();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\thideSelection();" + NL + "\t\taddFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());" + NL + "\t\trefreshSelectionFeedback();" + NL + "\t\thideFocus();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tremoveFeedback(selectionFeedbackFigure);" + NL + "\t\t\tselectionFeedbackFigure = null;" + NL + "\t\t}" + NL + "\t\thideFocus();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\thideFocus();" + NL + "\t\taddFeedback(focusFeedbackFigure = createFocusFeedbackFigure());" + NL + "\t\trefreshFocusFeedback();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tremoveFeedback(focusFeedbackFigure);" + NL + "\t\t\tfocusFeedbackFigure = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure getFeedbackLayer() {" + NL + "\t\treturn getLayer(LayerConstants.SCALED_FEEDBACK_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Rectangle getFeedbackBounds() {" + NL + "\t\tRectangle bounds;" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tbounds = ((Label) getHostFigure()).getTextBounds();" + NL + "\t\t\tbounds.intersect(getHostFigure().getBounds());" + NL + "\t\t} else {" + NL + "\t\t\tbounds = getHostFigure().getBounds().getCopy();" + NL + "\t\t}" + NL + "\t\treturn bounds;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createSelectionFeedbackFigure() {" + NL + "\t\tif (getHostFigure() instanceof Label) {" + NL + "\t\t\tLabel feedbackFigure = new Label();" + NL + "\t\t\tfeedbackFigure.setOpaque(true);" + NL + "\t\t\tfeedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);" + NL + "\t\t\tfeedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t} else {" + NL + "\t\t\tRectangleFigure feedbackFigure = new RectangleFigure();" + NL + "\t\t\tfeedbackFigure.setFill(false);" + NL + "\t\t\treturn feedbackFigure;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFocusFeedbackFigure() {" + NL + "\t\treturn new Figure() {" + NL + "" + NL + "\t\t\tprotected void paintFigure(Graphics graphics) {" + NL + "\t\t\t\tgraphics.drawFocus(getBounds().getResized(-1, -1));" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void updateLabel(Label target) {" + NL + "\t\tLabel source = (Label) getHostFigure();" + NL + "\t\ttarget.setText(source.getText());" + NL + "\t\ttarget.setTextAlignment(source.getTextAlignment());" + NL + "\t\ttarget.setFont(source.getFont());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSelectionFeedback() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tif (selectionFeedbackFigure instanceof Label) {" + NL + "\t\t\t\tupdateLabel((Label) selectionFeedbackFigure);" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t\t} else {" + NL + "\t\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFocusFeedback() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tfocusFeedbackFigure.setBounds(getFeedbackBounds());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void refreshFeedback() {" + NL + "\t\trefreshSelectionFeedback();" + NL + "\t\trefreshFocusFeedback();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
@


1.1
log
@provide selection for the child nodes
@
text
@d24 1
a24 1
  protected final String TEXT_6 = NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.IFigure;" + NL + "import org.eclipse.draw2d.Label;" + NL + "import org.eclipse.draw2d.RectangleFigure;" + NL + "import org.eclipse.draw2d.geometry.Rectangle;" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.handles.MoveHandle;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;" + NL + "import org.eclipse.swt.graphics.Color;";
d28 1
a28 1
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure selectionFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure focusFeedbackFigure;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\thideSelection();" + NL + "\t\taddFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());" + NL + "\t\trefreshSelectionFeedbackBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tremoveFeedback(selectionFeedbackFigure);" + NL + "\t\t\tselectionFeedbackFigure = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\thideFocus();" + NL + "\t\taddFeedback(focusFeedbackFigure = createFocusFeedbackFigure());" + NL + "\t\trefreshFocusFeedbackBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tremoveFeedback(focusFeedbackFigure);" + NL + "\t\t\tfocusFeedbackFigure = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Rectangle getFeedbackBounds() {" + NL + "\t\tRectangle bounds;" + NL + "\t\tIFigure hostFigure = getHostFigure();" + NL + "\t\tif (hostFigure instanceof Label) {" + NL + "\t\t\tLabel label = (Label) hostFigure;" + NL + "\t\t\tbounds = label.getTextBounds();" + NL + "\t\t\tbounds.union(label.getIconBounds());" + NL + "\t\t\tbounds.intersect(label.getBounds());" + NL + "\t\t} else if (hostFigure instanceof WrapLabel) {" + NL + "\t\t\tWrapLabel label = (WrapLabel) hostFigure;" + NL + "\t\t\tbounds = label.getTextBounds();" + NL + "\t\t\tbounds.union(label.getIconBounds());" + NL + "\t\t\tbounds.intersect(label.getBounds());" + NL + "\t\t} else {" + NL + "\t\t\tbounds = getHostFigure().getBounds().getCopy();" + NL + "\t\t}" + NL + "\t\tgetHostFigure().getParent().translateToAbsolute(bounds);" + NL + "\t\tgetFeedbackLayer().translateToRelative(bounds);" + NL + "\t\treturn bounds;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshSelectionFeedbackBounds() {" + NL + "\t\tif (selectionFeedbackFigure != null) {" + NL + "\t\t\tselectionFeedbackFigure.setBounds(getFeedbackBounds().expand(2, 2));" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void refreshFocusFeedbackBounds() {" + NL + "\t\tif (focusFeedbackFigure != null) {" + NL + "\t\t\tfocusFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Color getFeedbackColor() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createSelectionFeedbackFigure() {" + NL + "\t\tRectangleFigure feedbackFigure = new RectangleFigure();" + NL + "\t\tfeedbackFigure.setFill(false);" + NL + "\t\tColor feedbackColor = getFeedbackColor();" + NL + "\t\tif (feedbackColor != null) {" + NL + "\t\t\tfeedbackFigure.setForegroundColor(feedbackColor);" + NL + "\t\t}" + NL + "\t\treturn feedbackFigure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFigure createFocusFeedbackFigure() {" + NL + "\t\tRectangleFigure feedbackFigure = new RectangleFigure();" + NL + "\t\tfeedbackFigure.setFill(false);" + NL + "\t\tColor feedbackColor = getFeedbackColor();" + NL + "\t\tif (feedbackColor != null) {" + NL + "\t\t\tfeedbackFigure.setForegroundColor(feedbackColor);" + NL + "\t\t}" + NL + "\t\tfeedbackFigure.setLineStyle(Graphics.LINE_DOT);" + NL + "\t\treturn feedbackFigure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void refreshFeedback() {" + NL + "\t\trefreshSelectionFeedbackBounds();" + NL + "\t\trefreshFocusFeedbackBounds();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
@

