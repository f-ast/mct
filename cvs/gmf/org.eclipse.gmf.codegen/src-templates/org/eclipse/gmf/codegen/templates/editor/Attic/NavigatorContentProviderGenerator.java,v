head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.09.22.13.21.22;	author ashatalin;	state dead;
branches;
next	1.3;

1.3
date	2006.09.13.16.11.04;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.12.18.18.19;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.11.18.21.36;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Read-only properties provided into the navigator.
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;
import org.eclipse.emf.codegen.util.*;

public class NavigatorContentProviderGenerator
{
  protected static String nl;
  public static synchronized NavigatorContentProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NavigatorContentProviderGenerator result = new NavigatorContentProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final Object[] EMPTY_ARRAY = new Object[0];" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public void dispose() {" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public void inputChanged(";
  protected final String TEXT_8 = " viewer, Object oldInput, Object newInput) {" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object[] getElements(Object inputElement) {" + NL + "\t\treturn getChildren(inputElement);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object[] getChildren(Object parentElement) {" + NL + "    \tif (parentElement instanceof ";
  protected final String TEXT_9 = ") {" + NL + "\t\t\t";
  protected final String TEXT_10 = " view = (";
  protected final String TEXT_11 = ") parentElement;" + NL + "\t\t\tif (!";
  protected final String TEXT_12 = ".MODEL_ID.equals(";
  protected final String TEXT_13 = ".getModelID(view))) {" + NL + "\t\t\t\treturn EMPTY_ARRAY;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint visualID = ";
  protected final String TEXT_14 = ".getVisualID(view);" + NL + "\t\t\tswitch (visualID) {";
  protected final String TEXT_15 = NL + "\t\t\tcase ";
  protected final String TEXT_16 = ".VISUAL_ID: {" + NL + "\t\t\t\t";
  protected final String TEXT_17 = " result = new ";
  protected final String TEXT_18 = "();";
  protected final String TEXT_19 = NL + "\t\t\t\t";
  protected final String TEXT_20 = " ";
  protected final String TEXT_21 = " = new ";
  protected final String TEXT_22 = "(\"";
  protected final String TEXT_23 = "\", \"";
  protected final String TEXT_24 = "\", ";
  protected final String TEXT_25 = ".MODEL_ID, view);";
  protected final String TEXT_26 = NL + "\t\t\t\t";
  protected final String TEXT_27 = ".addChildren(";
  protected final String TEXT_28 = NL + "\t\t\t\tresult.addAll(";
  protected final String TEXT_29 = "getChildByType(view.getChildren(), ";
  protected final String TEXT_30 = ".getType(";
  protected final String TEXT_31 = ".VISUAL_ID))";
  protected final String TEXT_32 = "getViewByType(view.eResource().getContents(), ";
  protected final String TEXT_33 = ".MODEL_ID)";
  protected final String TEXT_34 = "getViewByType(view.getDiagram().getChildren(), ";
  protected final String TEXT_35 = ".getType(";
  protected final String TEXT_36 = ".VISUAL_ID))";
  protected final String TEXT_37 = "getViewByType(view.getDiagram().getEdges(), ";
  protected final String TEXT_38 = ".getType(";
  protected final String TEXT_39 = ".VISUAL_ID))";
  protected final String TEXT_40 = ".EMPTY_LIST";
  protected final String TEXT_41 = "getConnectedViews(view, ";
  protected final String TEXT_42 = ".getType(";
  protected final String TEXT_43 = ".VISUAL_ID), ";
  protected final String TEXT_44 = ")";
  protected final String TEXT_45 = ".EMPTY_LIST";
  protected final String TEXT_46 = ".EMPTY_LIST";
  protected final String TEXT_47 = ");";
  protected final String TEXT_48 = NL + "\t\t\tif (!";
  protected final String TEXT_49 = ".isEmpty()) {";
  protected final String TEXT_50 = NL + "\t\t\tresult.add(";
  protected final String TEXT_51 = ");";
  protected final String TEXT_52 = NL + "\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_55 = ") {" + NL + "\t    \t";
  protected final String TEXT_56 = " file = (";
  protected final String TEXT_57 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_58 = " editingDomain = ";
  protected final String TEXT_59 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\t";
  protected final String TEXT_60 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t";
  protected final String TEXT_61 = " fileURI = ";
  protected final String TEXT_62 = ".createPlatformResourceURI(file.getFullPath().toString());" + NL + "\t\t\t";
  protected final String TEXT_63 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_64 = " result = new ";
  protected final String TEXT_65 = "();";
  protected final String TEXT_66 = NL + "\t\t\t";
  protected final String TEXT_67 = " ";
  protected final String TEXT_68 = " = new ";
  protected final String TEXT_69 = "(\"";
  protected final String TEXT_70 = "\", \"";
  protected final String TEXT_71 = "\", ";
  protected final String TEXT_72 = ".MODEL_ID, file);";
  protected final String TEXT_73 = NL + "\t\t\t";
  protected final String TEXT_74 = ".addChildren(";
  protected final String TEXT_75 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_76 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_77 = ".MODEL_ID)";
  protected final String TEXT_78 = ".EMPTY_LIST";
  protected final String TEXT_79 = "getChildByType(resource.getContents(), ";
  protected final String TEXT_80 = ".getType(";
  protected final String TEXT_81 = ".VISUAL_ID))";
  protected final String TEXT_82 = ".EMPTY_LIST";
  protected final String TEXT_83 = ");";
  protected final String TEXT_84 = NL + "\t\t\tif (!";
  protected final String TEXT_85 = ".isEmpty()) {";
  protected final String TEXT_86 = NL + "\t\t\tresult.add(";
  protected final String TEXT_87 = ");";
  protected final String TEXT_88 = NL + "\t\t\t}";
  protected final String TEXT_89 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t} else if (parentElement instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t";
  protected final String TEXT_91 = " group = (";
  protected final String TEXT_92 = ") parentElement;" + NL + "\t\t\tif (";
  protected final String TEXT_93 = ".MODEL_ID.equals(group.getModelID())) {" + NL + "\t\t\t\treturn group.getChildren();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_94 = ") {" + NL + "\t\t\t";
  protected final String TEXT_95 = " view = (";
  protected final String TEXT_96 = ") element;" + NL + "\t\t\tif (!";
  protected final String TEXT_97 = ".MODEL_ID.equals(";
  protected final String TEXT_98 = ".getModelID(view))) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tint visualID = ";
  protected final String TEXT_99 = ".getVisualID(view);" + NL + "\t\t\tswitch (visualID) {";
  protected final String TEXT_100 = NL + "\t\t\tcase ";
  protected final String TEXT_101 = ".VISUAL_ID: { ";
  protected final String TEXT_102 = NL + "\t\t\t\t";
  protected final String TEXT_103 = " group = new ";
  protected final String TEXT_104 = "(\"";
  protected final String TEXT_105 = "\", \"";
  protected final String TEXT_106 = "\", ";
  protected final String TEXT_107 = ".MODEL_ID, ";
  protected final String TEXT_108 = NL + "\t\t\t\treturn ";
  protected final String TEXT_109 = "view.eContainer()";
  protected final String TEXT_110 = ".getFile(view.eResource())";
  protected final String TEXT_111 = ");" + NL + "\t\t\t\tgroup.addChild(view);" + NL + "\t\t\t\treturn group;";
  protected final String TEXT_112 = ";";
  protected final String TEXT_113 = "\t\t\t" + NL + "\t\t\t}";
  protected final String TEXT_114 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_115 = " " + NL + "\t\telse if (element instanceof ";
  protected final String TEXT_116 = ") {" + NL + "\t\t\t";
  protected final String TEXT_117 = " group = (";
  protected final String TEXT_118 = ") element;" + NL + "\t\t\tif (";
  protected final String TEXT_119 = ".MODEL_ID.equals(group.getModelID())) {" + NL + "\t\t\t\treturn group.getParent();" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_120 = NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_121 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_122 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_123 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_124 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_125 = " getViewByType(";
  protected final String TEXT_126 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_127 = " result = new ";
  protected final String TEXT_128 = "();" + NL + "\t\tfor (";
  protected final String TEXT_129 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_130 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_131 = " nextView = (";
  protected final String TEXT_132 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_133 = " getChildByType(";
  protected final String TEXT_134 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_135 = " result = new ";
  protected final String TEXT_136 = "();" + NL + "\t\t";
  protected final String TEXT_137 = " children = new ";
  protected final String TEXT_138 = "(childViews);" + NL + "\t\tfor (int i = 0; i < children.size(); i++) {" + NL + "\t\t\tif (false == children.get(i) instanceof ";
  protected final String TEXT_139 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_140 = " nextChild = (";
  protected final String TEXT_141 = ") children.get(i);" + NL + "\t\t\tif (type.equals(nextChild.getType())) {" + NL + "\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t} else if (!stopGettingChildren(nextChild, type)) {" + NL + "\t\t\t\tchildren.addAll(nextChild.getChildren());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingChildren(";
  protected final String TEXT_142 = " child, String type) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_143 = " getConnectedViews(";
  protected final String TEXT_144 = " rootView, String type, boolean isOutTarget) {" + NL + "\t\t";
  protected final String TEXT_145 = " result = new ";
  protected final String TEXT_146 = "();" + NL + "\t\t";
  protected final String TEXT_147 = " connectedViews = new ";
  protected final String TEXT_148 = "();" + NL + "\t\tconnectedViews.add(rootView);" + NL + "\t\t";
  protected final String TEXT_149 = " visitedViews = new ";
  protected final String TEXT_150 = "();" + NL + "\t\tfor (int i = 0; i < connectedViews.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_151 = " nextView = (";
  protected final String TEXT_152 = ") connectedViews.get(i);" + NL + "\t\t\tif (visitedViews.contains(nextView)) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tvisitedViews.add(nextView);" + NL + "\t\t\tif (type.equals(nextView.getType()) && nextView != rootView) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tif (isOutTarget && !stopGettingOutTarget(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getSourceEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_153 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getTarget());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} " + NL + "\t\t\t\tif (!isOutTarget && !stopGettingInSource(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getTargetEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_154 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getSource());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingInSource(";
  protected final String TEXT_155 = " nextView, ";
  protected final String TEXT_156 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingOutTarget(";
  protected final String TEXT_157 = " nextView, ";
  protected final String TEXT_158 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOneHopConnection(";
  protected final String TEXT_159 = " targetView, ";
  protected final String TEXT_160 = " sourceView) {" + NL + "\t\tif (sourceView == targetView) {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\tif (sourceView instanceof ";
  protected final String TEXT_161 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_162 = ";" + NL + "\t\t} if (sourceView instanceof ";
  protected final String TEXT_163 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_164 = ";" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_165 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genNavigator.getContentProviderClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentProvider"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.Viewer"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesFrom(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_18);
    	Map createdGroups = new HashMap();
	for (Iterator it = childReferences.iterator(); it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.isInsideGroup()) {
			String groupNameKey = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
			if (!createdGroups.containsKey(groupNameKey)) {
				createdGroups.put(groupNameKey, nextReference);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(nextReference.getGroupName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(nextReference.getGroupIcon());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_25);
    			}
    stringBuffer.append(TEXT_26);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_27);
    
		} else {
    stringBuffer.append(TEXT_28);
    
		}
		
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
			
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_31);
    
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextReference.getChild() instanceof GenDiagram) {
			
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    
			} else if (nextReference.getChild() instanceof GenTopLevelNode) {
			
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_36);
    
			} else if (nextReference.getChild() instanceof GenLink) {
			
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_39);
    
			} else {
			/* Any other "Default" child refrences are not supported */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_40);
    
			}
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL || nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			boolean isOutTarget = nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL;
			if (nextCommonBase instanceof GenNode || nextCommonBase instanceof GenLink) {
			
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(isOutTarget);
    stringBuffer.append(TEXT_44);
    
			} else {
			/* Any other "OUT_TAGET_LITERAL || IN_SOURCE_LITERAL" child refrences are not supported */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_45);
    
			}
		} else {
			/* Put processing of other types of the references here. */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_46);
    
		}
    stringBuffer.append(TEXT_47);
    	}
	
	for (Iterator it = createdGroups.keySet().iterator(); it.hasNext();) {
		String nextGroupKey = (String) it.next();
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdGroups.get(nextGroupKey);
		if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_48);
    stringBuffer.append(nextGroupKey);
    stringBuffer.append(TEXT_49);
    		}
    stringBuffer.append(TEXT_50);
    stringBuffer.append(nextGroupKey);
    stringBuffer.append(TEXT_51);
    		if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_52);
    		}
	}
    stringBuffer.append(TEXT_53);
    }
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.domain.EditingDomain"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_65);
    Map createdDiagramGroups = new HashMap();
for (Iterator it = genNavigator.getChildReferencesFrom(null).iterator(); it.hasNext();) {
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
	if (nextReference.isInsideGroup()) {
		String groupNameKey = CodeGenUtil.validJavaIdentifier(nextReference.getGroupName());
		if (!createdDiagramGroups.containsKey(groupNameKey)) {
			createdDiagramGroups.put(groupNameKey, nextReference);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(nextReference.getGroupName());
    stringBuffer.append(TEXT_70);
    stringBuffer.append(nextReference.getGroupIcon());
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_72);
    		}
    stringBuffer.append(TEXT_73);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_74);
    
	} else {
    stringBuffer.append(TEXT_75);
    
	}
	
	if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
		if (nextReference.getChild() instanceof GenDiagram) {
			
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_77);
    
		} else {
			/* Any other "Default" child refrences are not supported for resource */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_78);
    
		}
	} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
		
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_81);
    
	} else {
		/* Any other ReferenceTypes are not supported for the resource */
		
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_82);
    
	}
    stringBuffer.append(TEXT_83);
    }

for (Iterator it = createdDiagramGroups.keySet().iterator(); it.hasNext();) {
	String groupNameKey = (String) it.next();
	GenNavigatorChildReference nextReference = (GenNavigatorChildReference) createdDiagramGroups.get(groupNameKey);
	if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_84);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_85);
    	}
    stringBuffer.append(TEXT_86);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_87);
    	if (nextReference.isHideIfEmpty()) {
    stringBuffer.append(TEXT_88);
    	}
}

    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_99);
    boolean shouldHandleParentGroups = false;
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) containers.next();
	Collection childReferences = genNavigator.getChildReferencesTo(nextCommonBase);
	if (childReferences.size() == 0) {
		continue;
	}
	
	GenNavigatorChildReference theReference = null;
	for (Iterator it = childReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.CHILDREN_LITERAL) {
			theReference = nextReference;
		}
	}
	
	for (Iterator it = childReferences.iterator(); theReference == null && it.hasNext();) {
		GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
		if (nextReference.getReferenceType() == GenNavigatorReferenceType.DEFAULT_LITERAL) {
			if (nextCommonBase instanceof GenDiagram && nextReference.getParent() == null) {
				theReference = nextReference;
			}
		}
	}
	
	if (theReference == null) {
		/* No supported child references for back navigation found */
		continue;
	}
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_101);
    	if (theReference.isInsideGroup()) {
		shouldHandleParentGroups = true;
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_104);
    stringBuffer.append(theReference.getGroupName());
    stringBuffer.append(TEXT_105);
    stringBuffer.append(theReference.getGroupIcon());
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_107);
    
	} else {
    stringBuffer.append(TEXT_108);
    
	}
	
	if (theReference.getParent() != null) {
		/* Child reference only */
		
    stringBuffer.append(TEXT_109);
    
	} else {
		/* Child reference with parent == null or default reference for diagram */
		
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
    stringBuffer.append(TEXT_110);
    
	}
	
	if (theReference.isInsideGroup()) {
		
    stringBuffer.append(TEXT_111);
    	} else {
		
    stringBuffer.append(TEXT_112);
    	}
    stringBuffer.append(TEXT_113);
    }
    stringBuffer.append(TEXT_114);
    if (shouldHandleParentGroups) {
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_119);
    }
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_141);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_142);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_143);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_147);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName("java.util.Set"));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
    stringBuffer.append(TEXT_150);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_151);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_152);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_153);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_154);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_155);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_156);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_157);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_158);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_159);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_160);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_161);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_162);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_163);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_164);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_165);
    return stringBuffer.toString();
  }
}
@


1.3
log
@getParent() method generated for NavigatorContentProvider.
@
text
@@


1.2
log
@- hideIfEmpty property added to the GenNavigatorChildReference
- recursive iteration through connections graph added
@
text
@d43 21
a63 21
  protected final String TEXT_24 = "\");";
  protected final String TEXT_25 = NL + "\t\t\t\t";
  protected final String TEXT_26 = ".addChildren(";
  protected final String TEXT_27 = NL + "\t\t\t\tresult.addAll(";
  protected final String TEXT_28 = "getChildByType(view.getChildren(), ";
  protected final String TEXT_29 = ".getType(";
  protected final String TEXT_30 = ".VISUAL_ID))";
  protected final String TEXT_31 = "getViewByType(view.eResource().getContents(), ";
  protected final String TEXT_32 = ".MODEL_ID)";
  protected final String TEXT_33 = "getViewByType(view.getDiagram().getChildren(), ";
  protected final String TEXT_34 = ".getType(";
  protected final String TEXT_35 = ".VISUAL_ID))";
  protected final String TEXT_36 = "getViewByType(view.getDiagram().getEdges(), ";
  protected final String TEXT_37 = ".getType(";
  protected final String TEXT_38 = ".VISUAL_ID))";
  protected final String TEXT_39 = ".EMPTY_LIST";
  protected final String TEXT_40 = "getConnectedViews(view, ";
  protected final String TEXT_41 = ".getType(";
  protected final String TEXT_42 = ".VISUAL_ID), ";
  protected final String TEXT_43 = ")";
  protected final String TEXT_44 = ".EMPTY_LIST";
d65 44
a108 44
  protected final String TEXT_46 = ");";
  protected final String TEXT_47 = NL + "\t\t\tif (!";
  protected final String TEXT_48 = ".isEmpty()) {";
  protected final String TEXT_49 = NL + "\t\t\tresult.add(";
  protected final String TEXT_50 = ");";
  protected final String TEXT_51 = NL + "\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_54 = ") {" + NL + "\t    \t";
  protected final String TEXT_55 = " file = (";
  protected final String TEXT_56 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_57 = " editingDomain = ";
  protected final String TEXT_58 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\t";
  protected final String TEXT_59 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t";
  protected final String TEXT_60 = " fileURI = ";
  protected final String TEXT_61 = ".createPlatformResourceURI(file.getFullPath().toString());" + NL + "\t\t\t";
  protected final String TEXT_62 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_63 = " result = new ";
  protected final String TEXT_64 = "();";
  protected final String TEXT_65 = NL + "\t\t\t";
  protected final String TEXT_66 = " ";
  protected final String TEXT_67 = " = new ";
  protected final String TEXT_68 = "(\"";
  protected final String TEXT_69 = "\", \"";
  protected final String TEXT_70 = "\");";
  protected final String TEXT_71 = NL + "\t\t\t";
  protected final String TEXT_72 = ".addChildren(";
  protected final String TEXT_73 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_74 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_75 = ".MODEL_ID)";
  protected final String TEXT_76 = ".EMPTY_LIST";
  protected final String TEXT_77 = "getChildByType(resource.getContents(), ";
  protected final String TEXT_78 = ".getType(";
  protected final String TEXT_79 = ".VISUAL_ID))";
  protected final String TEXT_80 = ".EMPTY_LIST";
  protected final String TEXT_81 = ");";
  protected final String TEXT_82 = NL + "\t\t\tif (!";
  protected final String TEXT_83 = ".isEmpty()) {";
  protected final String TEXT_84 = NL + "\t\t\tresult.add(";
  protected final String TEXT_85 = ");";
  protected final String TEXT_86 = NL + "\t\t\t}";
  protected final String TEXT_87 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t} else if (parentElement instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_89 = ") parentElement).getChildren();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "\t\tif (element instanceof ";
d110 75
a184 48
  protected final String TEXT_91 = " view = (";
  protected final String TEXT_92 = ") element;" + NL + "\t\t\treturn view.eContainer() != null ? view.eContainer() : ";
  protected final String TEXT_93 = ".getFile(view.eResource());" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_94 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_95 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_96 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_97 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_98 = " getViewByType(";
  protected final String TEXT_99 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_100 = " result = new ";
  protected final String TEXT_101 = "();" + NL + "\t\tfor (";
  protected final String TEXT_102 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_104 = " nextView = (";
  protected final String TEXT_105 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_106 = " getChildByType(";
  protected final String TEXT_107 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_108 = " result = new ";
  protected final String TEXT_109 = "();" + NL + "\t\t";
  protected final String TEXT_110 = " children = new ";
  protected final String TEXT_111 = "(childViews);" + NL + "\t\tfor (int i = 0; i < children.size(); i++) {" + NL + "\t\t\tif (false == children.get(i) instanceof ";
  protected final String TEXT_112 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_113 = " nextChild = (";
  protected final String TEXT_114 = ") children.get(i);" + NL + "\t\t\tif (type.equals(nextChild.getType())) {" + NL + "\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t} else if (!stopGettingChildren(nextChild, type)) {" + NL + "\t\t\t\tchildren.addAll(nextChild.getChildren());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingChildren(";
  protected final String TEXT_115 = " child, String type) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_116 = " getConnectedViews(";
  protected final String TEXT_117 = " rootView, String type, boolean isOutTarget) {" + NL + "\t\t";
  protected final String TEXT_118 = " result = new ";
  protected final String TEXT_119 = "();" + NL + "\t\t";
  protected final String TEXT_120 = " connectedViews = new ";
  protected final String TEXT_121 = "();" + NL + "\t\tconnectedViews.add(rootView);" + NL + "\t\t";
  protected final String TEXT_122 = " visitedViews = new ";
  protected final String TEXT_123 = "();" + NL + "\t\tfor (int i = 0; i < connectedViews.size(); i++) {" + NL + "\t\t\t";
  protected final String TEXT_124 = " nextView = (";
  protected final String TEXT_125 = ") connectedViews.get(i);" + NL + "\t\t\tif (visitedViews.contains(nextView)) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tvisitedViews.add(nextView);" + NL + "\t\t\tif (type.equals(nextView.getType()) && nextView != rootView) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tif (isOutTarget && !stopGettingOutTarget(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getSourceEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_126 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getTarget());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t} " + NL + "\t\t\t\tif (!isOutTarget && !stopGettingInSource(nextView, rootView, type)) {" + NL + "\t\t\t\t\tconnectedViews.addAll(nextView.getTargetEdges());" + NL + "\t\t\t\t\tif (nextView instanceof ";
  protected final String TEXT_127 = ") {" + NL + "\t\t\t\t\t\tconnectedViews.add(((Edge) nextView).getSource());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingInSource(";
  protected final String TEXT_128 = " nextView, ";
  protected final String TEXT_129 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingOutTarget(";
  protected final String TEXT_130 = " nextView, ";
  protected final String TEXT_131 = " rootView, String type) {" + NL + "\t\treturn !isOneHopConnection(nextView, rootView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isOneHopConnection(";
  protected final String TEXT_132 = " targetView, ";
  protected final String TEXT_133 = " sourceView) {" + NL + "\t\tif (sourceView == targetView) {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\tif (sourceView instanceof ";
  protected final String TEXT_134 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_135 = ";" + NL + "\t\t} if (sourceView instanceof ";
  protected final String TEXT_136 = ") {" + NL + "\t\t\treturn targetView instanceof ";
  protected final String TEXT_137 = ";" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_138 = NL;
d192 2
d227 1
a227 3
    Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
for (Iterator containers = commonBaseElements.iterator(); containers.hasNext();) {
d229 1
a229 1
	Collection childReferences = genNavigator.getChildReferencesFor(nextCommonBase);
d258 2
d261 1
a261 1
    stringBuffer.append(TEXT_25);
d263 1
a263 1
    stringBuffer.append(TEXT_26);
d266 1
a266 1
    stringBuffer.append(TEXT_27);
d272 1
a272 1
    stringBuffer.append(TEXT_28);
d274 1
a274 1
    stringBuffer.append(TEXT_29);
d276 1
a276 1
    stringBuffer.append(TEXT_30);
d281 1
a281 1
    stringBuffer.append(TEXT_31);
d283 1
a283 1
    stringBuffer.append(TEXT_32);
d287 1
a287 1
    stringBuffer.append(TEXT_33);
d289 1
a289 1
    stringBuffer.append(TEXT_34);
d291 1
a291 1
    stringBuffer.append(TEXT_35);
d295 1
a295 1
    stringBuffer.append(TEXT_36);
d297 1
a297 1
    stringBuffer.append(TEXT_37);
d299 1
a299 1
    stringBuffer.append(TEXT_38);
d305 1
a305 1
    stringBuffer.append(TEXT_39);
d312 1
a312 1
    stringBuffer.append(TEXT_40);
d314 1
a314 1
    stringBuffer.append(TEXT_41);
d316 1
a316 1
    stringBuffer.append(TEXT_42);
d318 1
a318 1
    stringBuffer.append(TEXT_43);
d324 1
a324 1
    stringBuffer.append(TEXT_44);
d331 1
a331 1
    stringBuffer.append(TEXT_45);
d334 1
a334 1
    stringBuffer.append(TEXT_46);
d341 1
a341 1
    stringBuffer.append(TEXT_47);
d343 1
a343 1
    stringBuffer.append(TEXT_48);
d345 1
a345 1
    stringBuffer.append(TEXT_49);
d347 1
a347 1
    stringBuffer.append(TEXT_50);
d349 1
a349 1
    stringBuffer.append(TEXT_51);
d352 1
a352 1
    stringBuffer.append(TEXT_52);
a353 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d359 2
d362 1
a362 1
    stringBuffer.append(TEXT_57);
d364 1
a364 1
    stringBuffer.append(TEXT_58);
a365 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d369 2
d372 1
a372 1
    stringBuffer.append(TEXT_62);
d374 1
a374 1
    stringBuffer.append(TEXT_63);
d376 1
a376 1
    stringBuffer.append(TEXT_64);
d378 1
a378 1
for (Iterator it = genNavigator.getChildReferencesFor(null).iterator(); it.hasNext();) {
d384 1
a384 1
    stringBuffer.append(TEXT_65);
d386 1
a386 1
    stringBuffer.append(TEXT_66);
d388 1
a388 1
    stringBuffer.append(TEXT_67);
d390 1
a390 1
    stringBuffer.append(TEXT_68);
d392 1
a392 1
    stringBuffer.append(TEXT_69);
d394 3
a396 1
    stringBuffer.append(TEXT_70);
d398 1
a398 1
    stringBuffer.append(TEXT_71);
d400 1
a400 1
    stringBuffer.append(TEXT_72);
d403 1
a403 1
    stringBuffer.append(TEXT_73);
d410 1
a410 1
    stringBuffer.append(TEXT_74);
d412 1
a412 1
    stringBuffer.append(TEXT_75);
d418 1
a418 1
    stringBuffer.append(TEXT_76);
d423 1
a423 1
    stringBuffer.append(TEXT_77);
d425 1
a425 1
    stringBuffer.append(TEXT_78);
d427 1
a427 1
    stringBuffer.append(TEXT_79);
d433 1
a433 1
    stringBuffer.append(TEXT_80);
d436 1
a436 1
    stringBuffer.append(TEXT_81);
d443 1
a443 1
    stringBuffer.append(TEXT_82);
d445 1
a445 1
    stringBuffer.append(TEXT_83);
d447 1
a447 1
    stringBuffer.append(TEXT_84);
d449 1
a449 1
    stringBuffer.append(TEXT_85);
d451 1
a451 1
    stringBuffer.append(TEXT_86);
d455 1
a455 1
    stringBuffer.append(TEXT_87);
d457 1
a457 1
    stringBuffer.append(TEXT_88);
a458 4
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d460 1
a460 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d462 1
a462 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d464 1
a464 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d472 1
a472 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d474 1
a474 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d476 29
a504 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d506 1
a506 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d508 2
a509 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d511 1
a511 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d513 1
a513 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d519 1
a519 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d521 2
a522 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d524 6
a529 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d531 5
a535 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d537 5
a541 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d543 2
a544 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d546 1
a546 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d548 1
a548 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d550 1
a550 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d552 1
a552 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d554 1
a554 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d564 1
a564 1
    stringBuffer.append(importManager.getImportedName("java.util.Set"));
d566 1
a566 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d568 1
a568 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d570 1
a570 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d572 1
a572 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d576 1
a576 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d578 1
a578 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d586 18
d605 37
a641 1
    stringBuffer.append(TEXT_133);
d643 1
a643 1
    stringBuffer.append(TEXT_134);
d645 1
a645 1
    stringBuffer.append(TEXT_135);
d647 1
a647 1
    stringBuffer.append(TEXT_136);
d649 1
a649 1
    stringBuffer.append(TEXT_137);
d651 1
a651 1
    stringBuffer.append(TEXT_138);
@


1.1
log
@Model navigator, initial version.
@
text
@d43 115
a157 98
  protected final String TEXT_24 = "\");" + NL + "\t\t\t\tresult.add(";
  protected final String TEXT_25 = ");";
  protected final String TEXT_26 = NL + "\t\t\t\t";
  protected final String TEXT_27 = ".addChildren(";
  protected final String TEXT_28 = NL + "\t\t\t\tresult.addAll(";
  protected final String TEXT_29 = "getChildByType(view.getChildren(), ";
  protected final String TEXT_30 = ".getType(";
  protected final String TEXT_31 = ".VISUAL_ID))";
  protected final String TEXT_32 = "getViewByType(view.eResource().getContents(), ";
  protected final String TEXT_33 = ".MODEL_ID)";
  protected final String TEXT_34 = "getViewByType(view.getDiagram().getChildren(), ";
  protected final String TEXT_35 = ".getType(";
  protected final String TEXT_36 = ".VISUAL_ID))";
  protected final String TEXT_37 = "getViewByType(view.getDiagram().getEdges(), ";
  protected final String TEXT_38 = ".getType(";
  protected final String TEXT_39 = ".VISUAL_ID))";
  protected final String TEXT_40 = ".EMPTY_LIST";
  protected final String TEXT_41 = "getViewByType(view.getSourceEdges(), ";
  protected final String TEXT_42 = ".getType(";
  protected final String TEXT_43 = ".VISUAL_ID))";
  protected final String TEXT_44 = "getViewByType(";
  protected final String TEXT_45 = ".singletonList(((";
  protected final String TEXT_46 = ") view).getTarget()), ";
  protected final String TEXT_47 = ".getType(";
  protected final String TEXT_48 = ".VISUAL_ID))";
  protected final String TEXT_49 = ".EMPTY_LIST";
  protected final String TEXT_50 = "getViewByType(view.getTargetEdges(), ";
  protected final String TEXT_51 = ".getType(";
  protected final String TEXT_52 = ".VISUAL_ID))";
  protected final String TEXT_53 = "getViewByType(";
  protected final String TEXT_54 = ".singletonList(((";
  protected final String TEXT_55 = ") view).getSource()), ";
  protected final String TEXT_56 = ".getType(";
  protected final String TEXT_57 = ".VISUAL_ID))";
  protected final String TEXT_58 = ".EMPTY_LIST";
  protected final String TEXT_59 = ".EMPTY_LIST";
  protected final String TEXT_60 = ");";
  protected final String TEXT_61 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t\t}";
  protected final String TEXT_62 = NL + "\t\t\t}" + NL + "    \t} else if (parentElement instanceof ";
  protected final String TEXT_63 = ") {" + NL + "\t    \t";
  protected final String TEXT_64 = " file = (";
  protected final String TEXT_65 = ") parentElement;" + NL + "\t\t\t";
  protected final String TEXT_66 = " editingDomain = ";
  protected final String TEXT_67 = ".INSTANCE.createEditingDomain();" + NL + "\t\t\t";
  protected final String TEXT_68 = " resourceSet = editingDomain.getResourceSet();" + NL + "\t\t\t";
  protected final String TEXT_69 = " fileURI = ";
  protected final String TEXT_70 = ".createPlatformResourceURI(file.getFullPath().toString());" + NL + "\t\t\t";
  protected final String TEXT_71 = " resource = resourceSet.getResource(fileURI, true);" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_72 = " result = new ";
  protected final String TEXT_73 = "();";
  protected final String TEXT_74 = NL + "\t\t\t";
  protected final String TEXT_75 = " ";
  protected final String TEXT_76 = " = new ";
  protected final String TEXT_77 = "(\"";
  protected final String TEXT_78 = "\", \"";
  protected final String TEXT_79 = "\");" + NL + "\t\t\tresult.add(";
  protected final String TEXT_80 = ");";
  protected final String TEXT_81 = NL + "\t\t\t";
  protected final String TEXT_82 = ".addChildren(";
  protected final String TEXT_83 = NL + "\t\t\tresult.addAll(";
  protected final String TEXT_84 = "getViewByType(resource.getContents(), ";
  protected final String TEXT_85 = ".MODEL_ID)";
  protected final String TEXT_86 = ".EMPTY_LIST";
  protected final String TEXT_87 = "getChildByType(resource.getContents(), ";
  protected final String TEXT_88 = ".getType(";
  protected final String TEXT_89 = ".VISUAL_ID))";
  protected final String TEXT_90 = ".EMPTY_LIST";
  protected final String TEXT_91 = ");";
  protected final String TEXT_92 = NL + "\t\t\treturn result.toArray();" + NL + "\t\t} else if (parentElement instanceof ";
  protected final String TEXT_93 = ") {" + NL + "\t\t\treturn ((";
  protected final String TEXT_94 = ") parentElement).getChildren();" + NL + "\t\t}" + NL + "\t\treturn EMPTY_ARRAY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public Object getParent(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t";
  protected final String TEXT_96 = " view = (";
  protected final String TEXT_97 = ") element;" + NL + "\t\t\treturn view.eContainer() != null ? view.eContainer() : ";
  protected final String TEXT_98 = ".getFile(view.eResource());" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public boolean hasChildren(Object element) {" + NL + "    \treturn element instanceof ";
  protected final String TEXT_99 = " || getChildren(element).length > 0;" + NL + "    }" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(";
  protected final String TEXT_100 = " aConfig) {" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void restoreState(";
  protected final String TEXT_101 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void saveState(";
  protected final String TEXT_102 = " aMemento) {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_103 = " getViewByType(";
  protected final String TEXT_104 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_105 = " result = new ";
  protected final String TEXT_106 = "();" + NL + "\t\tfor (";
  protected final String TEXT_107 = " it = childViews.iterator(); it.hasNext();) {" + NL + "\t\t\tObject next = it.next();" + NL + "\t\t\tif (false == next instanceof ";
  protected final String TEXT_108 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_109 = " nextView = (";
  protected final String TEXT_110 = ") next;" + NL + "\t\t\tif (type.equals(nextView.getType())) {" + NL + "\t\t\t\tresult.add(nextView);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_111 = " getChildByType(";
  protected final String TEXT_112 = " childViews, String type) {" + NL + "\t\t";
  protected final String TEXT_113 = " result = new ";
  protected final String TEXT_114 = "();" + NL + "\t\t";
  protected final String TEXT_115 = " children = new ";
  protected final String TEXT_116 = "(childViews);" + NL + "\t\tfor (int i = 0; i < children.size(); i++) {" + NL + "\t\t\tif (false == children.get(i) instanceof ";
  protected final String TEXT_117 = ") {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_118 = " nextChild = (";
  protected final String TEXT_119 = ") children.get(i);" + NL + "\t\t\tif (type.equals(nextChild.getType())) {" + NL + "\t\t\t\tresult.add(nextChild);" + NL + "\t\t\t} else if (!stopGettingChildren(nextChild, type)) {" + NL + "\t\t\t\tchildren.addAll(nextChild.getChildren());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn result;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean stopGettingChildren(";
  protected final String TEXT_120 = " child, String type) {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_121 = NL;
d213 1
a213 1
    	Set createdGroups = new HashSet();
d218 2
a219 2
			if (!createdGroups.contains(groupNameKey)) {
				createdGroups.add(groupNameKey);
d231 2
a233 2
    stringBuffer.append(TEXT_25);
    			}
a234 2
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_27);
d237 1
a237 1
    stringBuffer.append(TEXT_28);
d243 2
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a247 2
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_31);
d252 2
a254 2
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_33);
d258 2
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a262 2
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_36);
d266 2
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a270 2
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_39);
d276 1
a276 1
    stringBuffer.append(TEXT_40);
d279 3
a281 2
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.OUT_TAGET_LITERAL) {
			if (nextCommonBase instanceof GenNode) {
d283 2
d286 1
a286 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d288 1
a288 1
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
a290 12
			} else if (nextCommonBase instanceof GenLink) {
			
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    
d292 1
a292 1
			/* Any other "OUT_TAGET_LITERAL" child refrences are not supported */
d295 1
a295 29
    stringBuffer.append(TEXT_49);
    
			}
		} else if (nextReference.getReferenceType() == GenNavigatorReferenceType.IN_SOURCE_LITERAL) {
			if (nextCommonBase instanceof GenNode) {
			
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_52);
    
			} else if (nextCommonBase instanceof GenLink) {
			
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(nextReference.getChild().getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    
			} else {
			/* Any other "IN_SOURCE_LITERAL" child refrences are not supported */
			
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_58);
d302 1
a302 1
    stringBuffer.append(TEXT_59);
d305 1
a305 1
    stringBuffer.append(TEXT_60);
d307 17
a323 1
    stringBuffer.append(TEXT_61);
d325 1
a325 1
    stringBuffer.append(TEXT_62);
d327 1
a327 1
    stringBuffer.append(TEXT_63);
d329 1
a329 1
    stringBuffer.append(TEXT_64);
d331 1
a331 1
    stringBuffer.append(TEXT_65);
d333 1
a333 1
    stringBuffer.append(TEXT_66);
d335 1
a335 1
    stringBuffer.append(TEXT_67);
d337 1
a337 1
    stringBuffer.append(TEXT_68);
d339 1
a339 1
    stringBuffer.append(TEXT_69);
d341 1
a341 1
    stringBuffer.append(TEXT_70);
d343 1
a343 1
    stringBuffer.append(TEXT_71);
d345 1
a345 1
    stringBuffer.append(TEXT_72);
d347 2
a348 2
    stringBuffer.append(TEXT_73);
    Set createdDiagramGroups = new HashSet();
d353 3
a355 3
		if (!createdDiagramGroups.contains(groupNameKey)) {
			createdDiagramGroups.add(groupNameKey);
    stringBuffer.append(TEXT_74);
d357 1
a357 1
    stringBuffer.append(TEXT_75);
d359 1
a359 1
    stringBuffer.append(TEXT_76);
d361 1
a361 1
    stringBuffer.append(TEXT_77);
d363 1
a363 1
    stringBuffer.append(TEXT_78);
d365 1
a365 3
    stringBuffer.append(TEXT_79);
    stringBuffer.append(groupNameKey);
    stringBuffer.append(TEXT_80);
d367 1
a367 1
    stringBuffer.append(TEXT_81);
d369 1
a369 1
    stringBuffer.append(TEXT_82);
d372 1
a372 1
    stringBuffer.append(TEXT_83);
d379 1
a379 1
    stringBuffer.append(TEXT_84);
d381 1
a381 1
    stringBuffer.append(TEXT_85);
d387 1
a387 1
    stringBuffer.append(TEXT_86);
d392 1
a392 1
    stringBuffer.append(TEXT_87);
d394 1
a394 1
    stringBuffer.append(TEXT_88);
d396 1
a396 1
    stringBuffer.append(TEXT_89);
d402 1
a402 1
    stringBuffer.append(TEXT_90);
d405 27
d433 1
a433 1
    }
d435 1
a435 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
d437 1
a437 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getGroupWrapperQualifiedClassName()));
d439 1
a439 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d445 1
a445 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d447 1
a447 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d449 1
a449 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.ICommonContentExtensionSite"));
d451 1
a451 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IMemento"));
d455 1
a455 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d457 1
a457 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d459 2
a461 2
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d463 1
a463 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d485 24
d510 3
a512 1
    stringBuffer.append(TEXT_118);
d514 1
a514 1
    stringBuffer.append(TEXT_119);
d516 9
a524 1
    stringBuffer.append(TEXT_120);
d526 1
a526 1
    stringBuffer.append(TEXT_121);
@

