head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061027-1200:1.6
	v20061020-1000:1.6
	v20061013-1330:1.6
	v20060919-0800:1.6
	v20060907-1100:1.6
	M1_20:1.6
	v20060904-1500:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060728-0500:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060626-1420:1.6
	v20060620-0400:1.6
	v20060616-1400:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.06.13.12.27.25;	author dstadnik;	state dead;
branches;
next	1.9;
commitid	4af4466fe2ac4567;

1.9
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	17ef46643bcf4567;

1.8
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.7;
commitid	7de14650454a4567;

1.7
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	78b462dc68e4567;

1.6
date	2006.06.02.11.53.10;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.16.10.43.32;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.16.10.02.45;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.10
log
@[192026] Rewrite edit helper templates in xpand
@
text
@package org.eclipse.gmf.codegen.templates.helpers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class BaseEditHelperGenerator
{
  protected static String nl;
  public static synchronized BaseEditHelperGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    BaseEditHelperGenerator result = new BaseEditHelperGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractEditHelper {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_POLICY_COMMAND = \"edit policy command\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getInsteadCommand(IEditCommandRequest req) {" + NL + "\t\tICommand epCommand = (ICommand) req.getParameter(EDIT_POLICY_COMMAND);" + NL + "\t\treq.setParameter(EDIT_POLICY_COMMAND, null);" + NL + "\t\tICommand ehCommand = super.getInsteadCommand(req);" + NL + "\t\tif (epCommand == null) {" + NL + "\t\t\treturn ehCommand;" + NL + "\t\t}" + NL + "\t\tif (ehCommand == null) {" + NL + "\t\t\treturn epCommand;" + NL + "\t\t}" + NL + "\t\tCompositeCommand command = new CompositeCommand(null);" + NL + "\t\tcommand.add(epCommand);" + NL + "\t\tcommand.add(ehCommand);" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getBaseEditHelperClassName());
    stringBuffer.append(TEXT_5);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}
@


1.9
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.8
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.7
log
@follow consisted spacing policy
@
text
@d18 5
a22 6
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.common.core.command.CompositeCommand;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractEditHelper {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String EDIT_POLICY_COMMAND = \"edit policy command\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getInsteadCommand(IEditCommandRequest req) {" + NL + "\t\tICommand epCommand = (ICommand) req.getParameter(EDIT_POLICY_COMMAND);" + NL + "\t\treq.setParameter(EDIT_POLICY_COMMAND, null);" + NL + "\t\tICommand ehCommand = super.getInsteadCommand(req);" + NL + "\t\tif (epCommand == null) {" + NL + "\t\t\treturn ehCommand;" + NL + "\t\t}" + NL + "\t\tif (ehCommand == null) {" + NL + "\t\t\treturn epCommand;" + NL + "\t\t}" + NL + "\t\tCompositeCommand command = new CompositeCommand(null);" + NL + "\t\tcommand.add(epCommand);" + NL + "\t\tcommand.add(ehCommand);" + NL + "\t\treturn command;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
a30 1
    stringBuffer.append(TEXT_1);
d35 2
a37 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d40 2
d43 1
a43 1
    importManager.markImportLocation(stringBuffer);
a44 2
    stringBuffer.append(genDiagram.getBaseEditHelperClassName());
    stringBuffer.append(TEXT_6);
@


1.6
log
@#142086 semantic commands are executed before "before" advice commands
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d38 1
a38 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.5
log
@header comment should not be a javadoc comment
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.DestroyReferenceRequest;";
d23 1
a23 1
  protected final String TEXT_6 = " extends AbstractEditHelper {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ICommand getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
@


1.4
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.3
log
@add generated tags
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d38 1
a38 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.2
log
@#126202 enable semantic policy override from edit helpers
@
text
@d23 1
a23 1
  protected final String TEXT_6 = " extends AbstractEditHelper {" + NL + "" + NL + "\tprotected ICommand getCreateCommand(CreateElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\tprotected ICommand getDestroyElementCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\tprotected ICommand getDestroyElementWithDependentsCommand(DestroyElementRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\tprotected ICommand getDestroyReferenceCommand(DestroyReferenceRequest req) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
@


1.1
log
@#126200 register element types in xml
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper;";
d23 1
a23 1
  protected final String TEXT_6 = " extends AbstractEditHelper {" + NL + "}";
d43 1
a43 3
    
importManager.markImportLocation(stringBuffer);

@

