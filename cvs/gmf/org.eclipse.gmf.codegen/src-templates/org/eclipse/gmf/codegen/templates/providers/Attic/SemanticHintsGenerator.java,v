head	1.21;
access;
symbols
	v20081022-1925:1.21
	v20081015-1925:1.21
	v20081008-1925:1.21
	v20081001-1925:1.21
	v20080924-1925:1.21
	v20080917-1925:1.21
	v20080911-1728:1.21
	v20080910-1520:1.21
	v20080903-1520:1.21
	v20080827-1520:1.21
	v20080813-1520:1.21
	v20080806-1520:1.21
	R1_0_maintenance:1.21.0.2
	R1_0:1.21
	I20060407-1200:1.17
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.16
	I20060309-1300:1.15
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.13
	I20060216-1945:1.13
	I20060210-1715:1.13
	I20060209-1815:1.13
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.10
	I20051223-1100:1.10
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.9
	M3_10:1.9
	I20051118-1245:1.9
	I20051111-1800:1.8
	I20051106-0900:1.7
	v20051030:1.7;
locks; strict;
comment	@# @;
expand	@k@;


1.21
date	2006.04.12.01.16.49;	author ashatalin;	state dead;
branches;
next	1.20;

1.20
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.17;

1.17
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.21.13.31.57;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.21
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class SemanticHintsGenerator
{
  protected static String nl;
  public static synchronized SemanticHintsGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    SemanticHintsGenerator result = new SemanticHintsGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_8 = "() {}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ";
  protected final String TEXT_10 = " = \"";
  protected final String TEXT_11 = "SemanticHint\";";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_13 = "Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_14 = "Labels() {}";
  protected final String TEXT_15 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_16 = " = \"";
  protected final String TEXT_17 = "SemanticHint\";";
  protected final String TEXT_18 = NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_20 = "Compartments {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_21 = "Compartments() {}";
  protected final String TEXT_22 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_23 = " = \"";
  protected final String TEXT_24 = "SemanticHint\";";
  protected final String TEXT_25 = NL + "\t}";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_27 = "Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_28 = "Labels() {}";
  protected final String TEXT_29 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_30 = " = \"";
  protected final String TEXT_31 = "SemanticHint\";";
  protected final String TEXT_32 = NL + "\t}";
  protected final String TEXT_33 = NL + "}";
  protected final String TEXT_34 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getProvidersPackageName());
    stringBuffer.append(TEXT_5);
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getSemanticHintsClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getSemanticHintsClassName());
    stringBuffer.append(TEXT_8);
    
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	if (next instanceof GenLink) {
		GenLink nextLink = (GenLink) next;
		if (nextLink.getModelFacet() instanceof FeatureModelFacet || nextLink.getModelFacet() == null) {

    stringBuffer.append(TEXT_9);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_10);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_11);
    
		}
	}
	if (next instanceof GenNode) {
		GenNode genNode = (GenNode) next;
		List labels = genNode.getLabels();
		if (!labels.isEmpty()) {

    stringBuffer.append(TEXT_12);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_13);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_14);
    
			for (int i = 0; i < labels.size(); i++) {
				GenNodeLabel label = (GenNodeLabel) labels.get(i);

    stringBuffer.append(TEXT_15);
    stringBuffer.append(label.getSemanticHintFieldName());
    stringBuffer.append(TEXT_16);
    stringBuffer.append(label.getUniqueIdentifier());
    stringBuffer.append(TEXT_17);
    			}
    stringBuffer.append(TEXT_18);
    
		}
		List compartments = genNode.getCompartments();
		if (!compartments.isEmpty()) {

    stringBuffer.append(TEXT_19);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_20);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_21);
    
			for (int i = 0; i < compartments.size(); i++) {
				GenCompartment compartment = (GenCompartment) compartments.get(i);

    stringBuffer.append(TEXT_22);
    stringBuffer.append(compartment.getSemanticHintFieldName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(compartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_24);
    			}
    stringBuffer.append(TEXT_25);
    
		}
	} else if (next instanceof GenLink) {
		GenLink genLink = (GenLink) next;
		List labels = genLink.getLabels();
		if (!labels.isEmpty()) {

    stringBuffer.append(TEXT_26);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_27);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_28);
    
			for (int i = 0; i < labels.size(); i++) {
				GenLinkLabel label = (GenLinkLabel) labels.get(i);

    stringBuffer.append(TEXT_29);
    stringBuffer.append(label.getSemanticHintFieldName());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(label.getUniqueIdentifier());
    stringBuffer.append(TEXT_31);
    			}
    stringBuffer.append(TEXT_32);
    
		}
	}
}

    stringBuffer.append(TEXT_33);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_34);
    return stringBuffer.toString();
  }
}
@


1.20
log
@using M6 to generate code.
@
text
@@


1.19
log
@restore generators
@
text
@d56 1
a56 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.18
log
@#134095 do not store compiled templates in cvs
@
text
@d56 1
a56 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.17
log
@Switching to eclipse M6.
@
text
@@


1.16
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d56 1
a56 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d35 18
a52 25
  protected final String TEXT_17 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_18 = " = \"";
  protected final String TEXT_19 = "Text\";";
  protected final String TEXT_20 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_21 = " = \"";
  protected final String TEXT_22 = "Text\";";
  protected final String TEXT_23 = NL + "\t}";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_25 = "Compartments {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_26 = "Compartments() {}";
  protected final String TEXT_27 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_28 = " = \"";
  protected final String TEXT_29 = "\";";
  protected final String TEXT_30 = NL + "\t}";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_32 = "Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_33 = "Labels() {}";
  protected final String TEXT_34 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_35 = " = \"";
  protected final String TEXT_36 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_37 = " = \"";
  protected final String TEXT_38 = "Text\";";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "}";
  protected final String TEXT_41 = NL;
a104 1
				if (label instanceof GenExternalNodeLabel) {
d107 1
a107 1
    stringBuffer.append(((GenExternalNodeLabel) label).getSemanticHintLabelFieldName());
d111 1
a111 1
    stringBuffer.append(label.getSemanticHintFieldName());
a112 13
    stringBuffer.append(label.getUniqueIdentifier());
    stringBuffer.append(TEXT_19);
    				} else {
    stringBuffer.append(TEXT_20);
    stringBuffer.append(label.getSemanticHintFieldName());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(label.getUniqueIdentifier());
    stringBuffer.append(TEXT_22);
    
				}
			}

    stringBuffer.append(TEXT_23);
d118 1
a118 1
    stringBuffer.append(TEXT_24);
d120 1
a120 1
    stringBuffer.append(TEXT_25);
d122 1
a122 1
    stringBuffer.append(TEXT_26);
d127 1
a127 1
    stringBuffer.append(TEXT_27);
d129 1
a129 1
    stringBuffer.append(TEXT_28);
d131 3
a133 5
    stringBuffer.append(TEXT_29);
    
			}

    stringBuffer.append(TEXT_30);
d141 1
a141 1
    stringBuffer.append(TEXT_31);
d143 1
a143 1
    stringBuffer.append(TEXT_32);
d145 1
a145 1
    stringBuffer.append(TEXT_33);
d150 1
a150 5
    stringBuffer.append(TEXT_34);
    stringBuffer.append(label.getSemanticHintLabelFieldName());
    stringBuffer.append(TEXT_35);
    stringBuffer.append(label.getUniqueIdentifier());
    stringBuffer.append(TEXT_36);
d152 1
a152 1
    stringBuffer.append(TEXT_37);
d154 1
a154 1
    stringBuffer.append(TEXT_38);
d156 1
a156 1
    stringBuffer.append(TEXT_39);
d162 1
a162 1
    stringBuffer.append(TEXT_40);
d164 1
a164 1
    stringBuffer.append(TEXT_41);
@


1.14
log
@#114175 for links
@
text
@d19 17
a35 17
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_5 = "() {}";
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ";
  protected final String TEXT_7 = " = \"";
  protected final String TEXT_8 = "SemanticHint\";";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_10 = "Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_11 = "Labels() {}";
  protected final String TEXT_12 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_13 = " = \"";
  protected final String TEXT_14 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_15 = " = \"";
  protected final String TEXT_16 = "Text\";";
  protected final String TEXT_17 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
d38 22
a59 19
  protected final String TEXT_20 = NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_22 = "Compartments {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_23 = "Compartments() {}";
  protected final String TEXT_24 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_25 = " = \"";
  protected final String TEXT_26 = "\";";
  protected final String TEXT_27 = NL + "\t}";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_29 = "Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_30 = "Labels() {}";
  protected final String TEXT_31 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_32 = " = \"";
  protected final String TEXT_33 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_34 = " = \"";
  protected final String TEXT_35 = "Text\";";
  protected final String TEXT_36 = NL + "\t}";
  protected final String TEXT_37 = NL + "}";
  protected final String TEXT_38 = NL;
d66 9
d76 1
a76 1
    stringBuffer.append(TEXT_2);
d79 1
a79 1
    stringBuffer.append(TEXT_3);
d81 1
a81 1
    stringBuffer.append(TEXT_4);
d83 1
a83 1
    stringBuffer.append(TEXT_5);
d91 1
a91 1
    stringBuffer.append(TEXT_6);
d93 1
a93 1
    stringBuffer.append(TEXT_7);
d95 1
a95 1
    stringBuffer.append(TEXT_8);
d104 1
a104 1
    stringBuffer.append(TEXT_9);
d106 1
a106 1
    stringBuffer.append(TEXT_10);
d108 1
a108 1
    stringBuffer.append(TEXT_11);
d114 1
a114 1
    stringBuffer.append(TEXT_12);
d116 1
a116 1
    stringBuffer.append(TEXT_13);
d118 1
a118 1
    stringBuffer.append(TEXT_14);
d120 1
a120 1
    stringBuffer.append(TEXT_15);
d122 1
a122 1
    stringBuffer.append(TEXT_16);
d124 1
a124 1
    stringBuffer.append(TEXT_17);
d126 1
a126 1
    stringBuffer.append(TEXT_18);
d128 1
a128 1
    stringBuffer.append(TEXT_19);
d133 1
a133 1
    stringBuffer.append(TEXT_20);
d139 1
a139 1
    stringBuffer.append(TEXT_21);
d141 1
a141 1
    stringBuffer.append(TEXT_22);
d143 1
a143 1
    stringBuffer.append(TEXT_23);
d148 1
a148 1
    stringBuffer.append(TEXT_24);
d150 1
a150 1
    stringBuffer.append(TEXT_25);
d152 1
a152 1
    stringBuffer.append(TEXT_26);
d156 1
a156 1
    stringBuffer.append(TEXT_27);
d164 1
a164 1
    stringBuffer.append(TEXT_28);
d166 1
a166 1
    stringBuffer.append(TEXT_29);
d168 1
a168 1
    stringBuffer.append(TEXT_30);
d173 1
a173 1
    stringBuffer.append(TEXT_31);
d175 1
a175 1
    stringBuffer.append(TEXT_32);
d177 1
a177 1
    stringBuffer.append(TEXT_33);
d179 1
a179 1
    stringBuffer.append(TEXT_34);
d181 1
a181 1
    stringBuffer.append(TEXT_35);
d183 1
a183 1
    stringBuffer.append(TEXT_36);
d189 1
a189 1
    stringBuffer.append(TEXT_37);
d191 1
a191 1
    stringBuffer.append(TEXT_38);
@


1.13
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d26 1
a26 1
  protected final String TEXT_8 = "Link\";";
d75 1
a75 1
	if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof FeatureModelFacet) {
d77 1
d85 1
@


1.12
log
@ImportManager moved to oeg.common
@
text
@d61 1
a61 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.11
log
@#122054 support external node labels (partial fix)
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.*;
@


1.10
log
@#121581
Fields for the compartments are named unique.
@
text
@d32 25
a56 20
  protected final String TEXT_14 = "Text\";";
  protected final String TEXT_15 = NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_17 = "Compartments {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_18 = "Compartments() {}";
  protected final String TEXT_19 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_20 = " = \"";
  protected final String TEXT_21 = "\";";
  protected final String TEXT_22 = NL + "\t}";
  protected final String TEXT_23 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_24 = "Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_25 = "Labels() {}";
  protected final String TEXT_26 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_27 = " = \"";
  protected final String TEXT_28 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_29 = " = \"";
  protected final String TEXT_30 = "Text\";";
  protected final String TEXT_31 = NL + "\t}";
  protected final String TEXT_32 = NL + "}";
  protected final String TEXT_33 = NL;
d98 1
d101 1
a101 1
    stringBuffer.append(label.getSemanticHintFieldName());
d105 1
a105 1
    			}
d107 13
d125 1
a125 1
    stringBuffer.append(TEXT_16);
d127 1
a127 1
    stringBuffer.append(TEXT_17);
d129 1
a129 1
    stringBuffer.append(TEXT_18);
d134 1
a134 1
    stringBuffer.append(TEXT_19);
d136 1
a136 1
    stringBuffer.append(TEXT_20);
d138 1
a138 1
    stringBuffer.append(TEXT_21);
d142 1
a142 1
    stringBuffer.append(TEXT_22);
d150 1
a150 1
    stringBuffer.append(TEXT_23);
d152 1
a152 1
    stringBuffer.append(TEXT_24);
d154 1
a154 1
    stringBuffer.append(TEXT_25);
d159 1
a159 1
    stringBuffer.append(TEXT_26);
d161 1
a161 1
    stringBuffer.append(TEXT_27);
d163 1
a163 1
    stringBuffer.append(TEXT_28);
d165 1
a165 1
    stringBuffer.append(TEXT_29);
d167 1
a167 1
    stringBuffer.append(TEXT_30);
d169 1
a169 1
    stringBuffer.append(TEXT_31);
d175 1
a175 1
    stringBuffer.append(TEXT_32);
d177 1
a177 1
    stringBuffer.append(TEXT_33);
@


1.9
log
@#116031 avoid hardcoded class names in templates
@
text
@d71 1
a71 1
		FeatureModelFacet modelFacet = (FeatureModelFacet) ((GenLink) next).getModelFacet();
d74 1
a74 1
    stringBuffer.append(((GenLink) next).getUniqueIdentifier());
d76 1
a76 1
    stringBuffer.append(modelFacet.getMetaFeature().getName());
d95 1
a95 1
    stringBuffer.append(AccessUtil.getLabelTextId(label));
d97 1
a97 1
    stringBuffer.append(label.getMetaFeature().getName());
a113 2
				String id = AccessUtil.getCompartmentId(compartment);
				if (id != null && id.length() > 0) {
d116 1
a116 1
    stringBuffer.append(id);
d118 1
a118 1
    stringBuffer.append(compartment.getTitle());
a120 1
				}
d141 1
a141 1
    stringBuffer.append(AccessUtil.getLabelId(label));
d143 1
a143 1
    stringBuffer.append(label.getMetaFeature().getName());
d145 1
a145 1
    stringBuffer.append(AccessUtil.getLabelTextId(label));
d147 1
a147 1
    stringBuffer.append(label.getMetaFeature().getName());
@


1.8
log
@#115972 generate single class with semantic hints
@
text
@d63 1
a63 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d65 1
a65 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
@


1.7
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d20 32
a51 24
  protected final String TEXT_2 = ";" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_4 = "() {}";
  protected final String TEXT_5 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_TYPE = \"";
  protected final String TEXT_6 = "Link\";";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Labels() {}";
  protected final String TEXT_8 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_9 = " = \"";
  protected final String TEXT_10 = "Text\";";
  protected final String TEXT_11 = NL + "\t}";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Compartments {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Compartments() {}";
  protected final String TEXT_13 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_14 = " = \"";
  protected final String TEXT_15 = "\";";
  protected final String TEXT_16 = NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Labels() {}";
  protected final String TEXT_18 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_19 = " = \"";
  protected final String TEXT_20 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_21 = " = \"";
  protected final String TEXT_22 = "Text\";";
  protected final String TEXT_23 = NL + "\t}";
  protected final String TEXT_24 = NL + "}";
  protected final String TEXT_25 = NL;
d56 1
a56 2
    GenCommonBase genElement = (GenCommonBase) argument;
    GenDiagram genDiagram = genElement.getDiagram();
d60 2
a61 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genElement));
d63 1
a63 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genElement));
d65 2
d68 4
a71 2
if (genElement instanceof GenLink && ((GenLink) genElement).getModelFacet() instanceof FeatureModelFacet) {
	FeatureModelFacet modelFacet = (FeatureModelFacet) ((GenLink) genElement).getModelFacet();
a72 2
    stringBuffer.append(TEXT_5);
    stringBuffer.append(modelFacet.getMetaFeature().getName());
d74 1
a74 7
    
}
if (genElement instanceof GenNode) {
	GenNode genNode = (GenNode) genElement;
	List labels = genNode.getLabels();
	if (!labels.isEmpty()) {

d76 2
d79 5
a83 2
		for (int i = 0; i < labels.size(); i++) {
			GenNodeLabel label = (GenNodeLabel) labels.get(i);
a84 2
    stringBuffer.append(TEXT_8);
    stringBuffer.append(AccessUtil.getLabelTextId(label));
d86 1
a86 1
    stringBuffer.append(label.getMetaFeature().getName());
d88 1
a88 1
    		}
d91 2
a92 3
	}
	List compartments = genNode.getCompartments();
	if (!compartments.isEmpty()) {
d95 16
d112 4
a115 4
		for (int i = 0; i < compartments.size(); i++) {
			GenCompartment compartment = (GenCompartment) compartments.get(i);
			String id = AccessUtil.getCompartmentId(compartment);
			if (id != null && id.length() > 0) {
d117 1
a117 1
    stringBuffer.append(TEXT_13);
d119 1
a119 1
    stringBuffer.append(TEXT_14);
d121 1
a121 1
    stringBuffer.append(TEXT_15);
d123 1
a124 1
		}
d126 1
a126 1
    stringBuffer.append(TEXT_16);
d128 5
a132 5
	}
} else if (genElement instanceof GenLink) {
	GenLink genLink = (GenLink) genElement;
	List labels = genLink.getLabels();
	if (!labels.isEmpty()) {
d134 5
a138 1
    stringBuffer.append(TEXT_17);
d140 2
a141 2
		for (int i = 0; i < labels.size(); i++) {
			GenLinkLabel label = (GenLinkLabel) labels.get(i);
d143 1
a143 1
    stringBuffer.append(TEXT_18);
d145 1
a145 1
    stringBuffer.append(TEXT_19);
d147 1
a147 1
    stringBuffer.append(TEXT_20);
d149 1
a149 1
    stringBuffer.append(TEXT_21);
d151 3
a153 3
    stringBuffer.append(TEXT_22);
    		}
    stringBuffer.append(TEXT_23);
d155 1
d159 3
a161 2
    stringBuffer.append(TEXT_24);
    stringBuffer.append(TEXT_25);
@


1.6
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d85 1
a85 1
	List compartments = genNode.getChildContainers();
d91 1
a91 1
			GenChildContainer compartment = (GenChildContainer) compartments.get(i);
d98 1
a98 1
    stringBuffer.append(compartment.getGroupID());
@


1.5
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d48 1
a48 1
    GenBaseElement genElement = (GenBaseElement) argument;
@


1.4
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d57 4
a60 1
    if (genElement instanceof GenLinkReferenceOnly) {
d62 1
a62 1
    stringBuffer.append(((GenLinkReferenceOnly) genElement).getDomainLinkTargetFeature().getName());
@


1.3
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d25 1
a25 1
  protected final String TEXT_7 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Compartments {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Compartments() {}";
d28 1
a28 1
  protected final String TEXT_10 = "\";";
d30 1
a30 1
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Labels {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Labels() {}";
d33 11
a43 9
  protected final String TEXT_15 = "Label\";" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ";
  protected final String TEXT_16 = " = \"";
  protected final String TEXT_17 = "Text\";";
  protected final String TEXT_18 = NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ";
  protected final String TEXT_20 = " = \"";
  protected final String TEXT_21 = "Feature\";";
  protected final String TEXT_22 = NL + "}";
  protected final String TEXT_23 = NL;
d65 17
d85 1
a85 1
    stringBuffer.append(TEXT_7);
d92 1
a92 1
    stringBuffer.append(TEXT_8);
d94 1
a94 1
    stringBuffer.append(TEXT_9);
d96 1
a96 1
    stringBuffer.append(TEXT_10);
d101 1
a101 1
    stringBuffer.append(TEXT_11);
d104 1
a104 2
}
if (genElement instanceof GenLink) {
d109 1
a109 1
    stringBuffer.append(TEXT_12);
d112 1
a112 13
			LinkLabel label = (LinkLabel) labels.get(i);

    stringBuffer.append(TEXT_13);
    stringBuffer.append(AccessUtil.getLinkLabelId(label));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(label.getDomainMetaFeature().getName());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(AccessUtil.getLinkLabelTextId(label));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(label.getDomainMetaFeature().getName());
    stringBuffer.append(TEXT_17);
    
		}
d115 1
a115 5
    
	}
}
if (genElement.hasNameToEdit()) {

d117 1
a117 1
    stringBuffer.append(AccessUtil.getNameSemanticHint(genElement));
d119 1
a119 1
    stringBuffer.append(AccessUtil.getNameSemanticHint(genElement));
d121 1
a121 1
    }
d123 1
d125 6
@


1.2
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d3 1
d21 21
a41 8
  protected final String TEXT_3 = " {";
  protected final String TEXT_4 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String VIEW_TYPE = \"";
  protected final String TEXT_5 = "Link\";";
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ";
  protected final String TEXT_7 = " = \"";
  protected final String TEXT_8 = "Feature\";";
  protected final String TEXT_9 = NL + "}";
  protected final String TEXT_10 = NL;
d53 2
d56 1
a56 1
    stringBuffer.append(TEXT_4);
d58 51
a108 1
    stringBuffer.append(TEXT_5);
d110 1
d114 1
a114 1
    stringBuffer.append(TEXT_6);
d116 1
a116 1
    stringBuffer.append(TEXT_7);
d118 1
a118 1
    stringBuffer.append(TEXT_8);
d120 2
a121 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d21 7
a27 5
  protected final String TEXT_4 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ";
  protected final String TEXT_5 = " = \"";
  protected final String TEXT_6 = "Feature\";";
  protected final String TEXT_7 = NL + "}";
  protected final String TEXT_8 = NL;
d39 1
a39 1
    if (genElement.hasNameToEdit()) {
d41 1
a41 1
    stringBuffer.append(AccessUtil.getNameSemanticHint(genElement));
d43 5
a48 2
    stringBuffer.append(TEXT_6);
    }
d50 1
d52 3
@

