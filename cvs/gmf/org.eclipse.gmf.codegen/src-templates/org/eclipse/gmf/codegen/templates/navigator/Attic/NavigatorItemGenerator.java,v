head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20060316-0600:1.6
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	v20061120-1300:1.6
	M3_20:1.6
	v20061117-0800:1.6
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2007.03.20.14.49.13;	author ashatalin;	state dead;
branches;
next	1.6;
commitid	761245fff4684567;

1.6
date	2006.11.14.18.17.44;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	1c67455a08484567;

1.5
date	2006.11.08.14.06.28;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.02.14.12.22;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.03.16.47.41;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.22.13.21.23;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Generating diagram file navigator updating code.
@
text
@package org.eclipse.gmf.codegen.templates.navigator;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class NavigatorItemGenerator
{
  protected static String nl;
  public static synchronized NavigatorItemGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NavigatorItemGenerator result = new NavigatorItemGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tstatic {" + NL + "\t\tfinal Class[] supportedTypes = new Class[] { ";
  protected final String TEXT_8 = ".class, ";
  protected final String TEXT_9 = ".class };" + NL + "\t\t";
  protected final String TEXT_10 = ".getAdapterManager().registerAdapters(new ";
  protected final String TEXT_11 = "() {" + NL + "\t\t" + NL + "\t\t\tpublic Object getAdapter(Object adaptableObject, Class adapterType) {" + NL + "\t\t\t\tif (adaptableObject instanceof ";
  protected final String TEXT_12 = " && (adapterType == ";
  protected final String TEXT_13 = ".class || adapterType == ";
  protected final String TEXT_14 = ".class)) {" + NL + "\t\t\t\t\treturn ((";
  protected final String TEXT_15 = ") adaptableObject).getView();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic Class[] getAdapterList() {" + NL + "\t\t\t\treturn supportedTypes;" + NL + "\t\t\t}" + NL + "\t\t}, ";
  protected final String TEXT_16 = ".class);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate ";
  protected final String TEXT_17 = " myView;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate boolean myLeaf = false;\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
  protected final String TEXT_18 = "(";
  protected final String TEXT_19 = " view, Object parent, boolean isLeaf) {" + NL + "\t\tsuper(parent);" + NL + "\t\tmyView = view;" + NL + "\t\tmyLeaf = isLeaf;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
  protected final String TEXT_20 = " getView() {" + NL + "\t\treturn myView;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic boolean isLeaf() {" + NL + "\t\treturn myLeaf;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic boolean equals(Object obj) {" + NL + "\t\tif (obj instanceof ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\t";
  protected final String TEXT_22 = " eObject = getView().getElement();" + NL + "\t\t\t";
  protected final String TEXT_23 = " anotherEObject = ((";
  protected final String TEXT_24 = ") obj).getView().getElement();" + NL + "\t\t\tif (eObject == null) {" + NL + "\t\t\t\treturn anotherEObject == null;" + NL + "\t\t\t} else if (anotherEObject == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (eObject.eResource() != null) {" + NL + "\t\t\t\treturn eObject.eResource().getURIFragment(eObject).equals(anotherEObject.eResource().getURIFragment(anotherEObject));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn super.equals(obj);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_25 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genNavigator.getAbstractNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Platform"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdapterFactory"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_24);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_25);
    return stringBuffer.toString();
  }
}
@


1.6
log
@Potential null-pointer corrected.
@
text
@@


1.5
log
@LinkHelper adopted to work correctly with shortcuts.
@
text
@d41 1
a41 1
  protected final String TEXT_24 = ") obj).getView().getElement();" + NL + "\t\t\tif (eObject == null) {" + NL + "\t\t\t\treturn anotherEObject == null;" + NL + "\t\t\t} else if (anotherEObject == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject.eResource().getURIFragment(eObject).equals(anotherEObject.eResource().getURIFragment(anotherEObject));" + NL + "\t\t}" + NL + "\t\treturn super.equals(obj);" + NL + "\t}" + NL + "\t" + NL + "}";
@


1.4
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@d37 6
a42 8
  protected final String TEXT_20 = " getView() {" + NL + "\t\treturn myView;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic String getModelID() {" + NL + "\t\treturn ";
  protected final String TEXT_21 = ".getModelID(myView);" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic int getVisualID() {" + NL + "\t\treturn ";
  protected final String TEXT_22 = ".getVisualID(myView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic boolean isLeaf() {" + NL + "\t\treturn myLeaf;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic boolean equals(Object obj) {" + NL + "\t\tif (obj instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t";
  protected final String TEXT_24 = " eObject = getView().getElement();" + NL + "\t\t\t";
  protected final String TEXT_25 = " anotherEObject = ((";
  protected final String TEXT_26 = ") obj).getView().getElement();" + NL + "\t\t\tif (eObject == null) {" + NL + "\t\t\t\treturn anotherEObject == null;" + NL + "\t\t\t} else if (anotherEObject == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject.eResource().getURIFragment(eObject).equals(anotherEObject.eResource().getURIFragment(anotherEObject));" + NL + "\t\t}" + NL + "\t\treturn super.equals(obj);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_27 = NL;
d95 1
a95 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d97 1
a97 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d99 2
a101 2
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d103 1
a103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a104 4
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
    stringBuffer.append(TEXT_26);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_27);
@


1.3
log
@Linked elements are leafs by default.
@
text
@d24 21
a44 14
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate ";
  protected final String TEXT_8 = " myView;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate boolean myLeaf = false;\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
  protected final String TEXT_9 = "(";
  protected final String TEXT_10 = " view, Object parent, boolean isLeaf) {" + NL + "\t\tsuper(parent);" + NL + "\t\tmyView = view;" + NL + "\t\tmyLeaf = isLeaf;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
  protected final String TEXT_11 = " getView() {" + NL + "\t\treturn myView;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic String getModelID() {" + NL + "\t\treturn ";
  protected final String TEXT_12 = ".getModelID(myView);" + NL + "\t}" + NL + "\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic int getVisualID() {" + NL + "\t\treturn ";
  protected final String TEXT_13 = ".getVisualID(myView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic boolean isLeaf() {" + NL + "\t\treturn myLeaf;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic Object getAdapter(Class adapter) {" + NL + "\t\tif (";
  protected final String TEXT_14 = ".class.isAssignableFrom(adapter) || ";
  protected final String TEXT_15 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\treturn myView;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(adapter);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic boolean equals(Object obj) {" + NL + "\t\tif (obj instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\t";
  protected final String TEXT_17 = " eObject = getView().getElement();" + NL + "\t\t\t";
  protected final String TEXT_18 = " anotherEObject = ((";
  protected final String TEXT_19 = ") obj).getView().getElement();" + NL + "\t\t\tif (eObject == null) {" + NL + "\t\t\t\treturn anotherEObject == null;" + NL + "\t\t\t} else if (anotherEObject == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject.eResource().getURIFragment(eObject).equals(anotherEObject.eResource().getURIFragment(anotherEObject));" + NL + "\t\t}" + NL + "\t\treturn super.equals(obj);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_20 = NL;
d73 1
a73 1
    stringBuffer.append(genNavigator.getNavigatorItemClassName());
d75 1
a75 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d77 1
a77 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d79 1
a79 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d81 1
a81 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d83 1
a83 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d85 1
a85 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d89 14
d104 1
a104 1
    stringBuffer.append(TEXT_17);
d106 1
a106 1
    stringBuffer.append(TEXT_18);
d108 1
a108 1
    stringBuffer.append(TEXT_19);
d110 1
a110 1
    stringBuffer.append(TEXT_20);
@


1.2
log
@Parent element correctly provided to navigator.
@
text
@d25 1
a25 1
  protected final String TEXT_8 = " myView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
d27 1
a27 1
  protected final String TEXT_10 = " view, Object parent) {" + NL + "\t\tsuper(parent);" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
d30 1
a30 1
  protected final String TEXT_13 = ".getVisualID(myView);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic Object getAdapter(Class adapter) {" + NL + "\t\tif (";
@


1.1
log
@Read-only properties provided into the navigator.
@
text
@d27 1
a27 1
  protected final String TEXT_10 = " view) {" + NL + "\t\tmyView = view;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic ";
d32 6
a37 2
  protected final String TEXT_15 = ".class.isAssignableFrom(adapter)) {" + NL + "\t\t\treturn myView;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(adapter);" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_16 = NL;
d80 8
d89 1
a89 1
    stringBuffer.append(TEXT_16);
@

