head	1.39;
access;
symbols
	v20081022-1925:1.39
	v20081015-1925:1.39
	v20081008-1925:1.39
	v20081001-1925:1.39
	v20080924-1925:1.39
	v20080917-1925:1.39
	v20080911-1728:1.39
	v20080910-1520:1.39
	v20080903-1520:1.39
	v20080827-1520:1.39
	v20080813-1520:1.39
	v20080806-1520:1.39
	RC3_20:1.38
	v20070614-1400:1.38
	v20070608-1300:1.38
	v20070605-1400:1.38
	v20070601-1400:1.37
	v20070525-1500:1.37
	v20070520-1200:1.37
	v20070518-1300:1.36
	v20070504-1000:1.36
	v20070427-0600:1.36
	v20070420-1000:1.35
	v20070413-1300:1.35
	v20070405-1100:1.35
	v20070403-1500:1.35
	v20070330-1300:1.35
	v20060330-1300:1.35
	v20070322-1100:1.35
	v20060316-0600:1.35
	v20070307-0700:1.33
	v20070301-1200:1.33
	v20070228-2000:1.33
	v20070221-1500:1.33
	v20070208-1800:1.33
	v20070202-0200:1.21
	v20070103-0300:1.33
	M4_20:1.33
	v20061222-1800:1.33
	v20061218-1200:1.30
	v20061214-0000:1.30
	v20061120-1300:1.26
	M3_20:1.26
	v20061117-0800:1.26
	v20061027-1200:1.21
	v20061020-1000:1.21
	v20061013-1330:1.22
	v20060919-0800:1.21
	v20060907-1100:1.21
	M1_20:1.21
	v20060904-1500:1.21
	v20060824-1600:1.21
	v20060817-1500:1.21
	v20060728-0500:1.21
	v20060713-1700:1.21
	R1_0_maintenance:1.21.0.2
	R1_0:1.21
	v20060627-1200:1.21
	v20060626-1420:1.21
	v20060620-0400:1.21
	v20060616-1400:1.21
	v20060616-1200:1.21
	v20060609-1400:1.21
	v20060531-1730:1.19
	v20060530-1930:1.19
	v20060526-1200:1.18
	v20060519-1300:1.18
	v20060519-0800:1.18
	v20060512-1000:1.18
	I20060512-1000:1.18
	I20060505-1400:1.18
	I20060428-1300:1.18
	I20060424-0500:1.18
	I20060424-0300:1.18
	M6_10:1.17
	I20060407-1200:1.13
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.12
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.11
	I20060216-1945:1.11
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.39
date	2007.06.19.19.26.17;	author dstadnik;	state dead;
branches;
next	1.38;
commitid	611446782dd84567;

1.38
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.37;
commitid	17ef46643bcf4567;

1.37
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.36;
commitid	7de14650454a4567;

1.36
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.35;
commitid	78b462dc68e4567;

1.35
date	2007.03.15.11.57.13;	author dstadnik;	state Exp;
branches;
next	1.34;
commitid	21b545f934984567;

1.34
date	2007.03.08.01.01.42;	author atikhomirov;	state Exp;
branches;
next	1.33;
commitid	a0545ef60744567;

1.33
date	2006.12.19.14.26.10;	author atikhomirov;	state Exp;
branches;
next	1.32;
commitid	43e54587f67b4567;

1.32
date	2006.12.19.13.38.45;	author atikhomirov;	state Exp;
branches;
next	1.31;
commitid	121d4587eb654567;

1.31
date	2006.12.18.18.20.51;	author dstadnik;	state Exp;
branches;
next	1.30;
commitid	7d774586dbfa4567;

1.30
date	2006.11.22.20.11.53;	author atikhomirov;	state Exp;
branches;
next	1.29;
commitid	2ae74564af084567;

1.29
date	2006.11.22.15.30.35;	author dstadnik;	state Exp;
branches;
next	1.28;
commitid	2b2545646d1a4567;

1.28
date	2006.11.22.14.59.29;	author dstadnik;	state Exp;
branches;
next	1.27;
commitid	2e20456465d04567;

1.27
date	2006.11.21.11.43.34;	author dstadnik;	state Exp;
branches;
next	1.26;
commitid	109b4562e6644567;

1.26
date	2006.10.24.17.55.06;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.10.24.15.55.34;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.09.27.17.03.35;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.20.13.24.47;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.13.22.22.24;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.13;

1.13
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.18.36.27;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.15.00.13.01;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.39
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class CreationWizardPageGenerator
{
  protected static String nl;
  public static synchronized CreationWizardPageGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CreationWizardPageGenerator result = new CreationWizardPageGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.osgi.util.NLS;" + NL + "import org.eclipse.swt.widgets.Composite;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "\t";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = "\t";
  protected final String TEXT_10 = NL + "\t{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final String fileExtension;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(String pageName, IStructuredSelection selection, String fileExtension) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t\tthis.fileExtension = fileExtension;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Override to create files with this extension." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getExtension() {" + NL + "\t\treturn fileExtension;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getURI() {";
  protected final String TEXT_12 = NL + "\t\treturn URI.createPlatformResourceURI(getFilePath().toString(), false);";
  protected final String TEXT_13 = NL + "\t\treturn URI.createFileURI(getFilePath().toString());";
  protected final String TEXT_14 = NL + "\t}";
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPath getFilePath() {" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path == null) {" + NL + "\t\t\tpath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString fileName = getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tpath = path.append(fileName);" + NL + "\t\t}" + NL + "\t\treturn path;" + NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tsetFileName(";
  protected final String TEXT_17 = ".getUniqueFileName(" + NL + "\t\t\t\tgetContainerFullPath(), getFileName(), getExtension()));" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (!super.validatePage()) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !getFilePath().toString().endsWith(\".\" + extension)) {" + NL + "\t\t\tsetErrorMessage(NLS.bind(\"File name should have ''{0}'' extension.\", extension));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenApplication application = editorGen.getApplication();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_5);
    if (application == null) {
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
    stringBuffer.append(TEXT_7);
    } else {
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(application.getPackageName() + ".WizardNewFileCreationPage"));
    stringBuffer.append(TEXT_9);
    }
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_11);
    if (application == null) {
    stringBuffer.append(TEXT_12);
    } else {
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    if (application == null) {
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}
@


1.38
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.37
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.36
log
@follow consisted spacing policy
@
text
@d18 17
a34 18
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.osgi.util.NLS;" + NL + "import org.eclipse.swt.widgets.Composite;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = "\t";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = "\t";
  protected final String TEXT_11 = NL + "\t{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final String fileExtension;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(String pageName, IStructuredSelection selection, String fileExtension) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t\tthis.fileExtension = fileExtension;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Override to create files with this extension." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getExtension() {" + NL + "\t\treturn fileExtension;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getURI() {";
  protected final String TEXT_13 = NL + "\t\treturn URI.createPlatformResourceURI(getFilePath().toString(), false);";
  protected final String TEXT_14 = NL + "\t\treturn URI.createFileURI(getFilePath().toString());";
  protected final String TEXT_15 = NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPath getFilePath() {" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path == null) {" + NL + "\t\t\tpath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString fileName = getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tpath = path.append(fileName);" + NL + "\t\t}" + NL + "\t\treturn path;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tsetFileName(";
  protected final String TEXT_18 = ".getUniqueFileName(" + NL + "\t\t\t\tgetContainerFullPath(), getFileName(), getExtension()));" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (!super.validatePage()) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !getFilePath().toString().endsWith(\".\" + extension)) {" + NL + "\t\t\tsetErrorMessage(NLS.bind(\"File name should have ''{0}'' extension.\", extension));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "}";
a44 1
    stringBuffer.append(TEXT_1);
d49 2
a51 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d54 2
d57 1
a57 1
    importManager.markImportLocation(stringBuffer);
d59 1
a59 1
    stringBuffer.append(importManager.getCompilationUnitName());
d61 1
a61 1
    if (application == null) {
d63 1
a63 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.WizardNewFileCreationPage"));
d65 1
a65 1
    } else {
d67 1
a67 1
    stringBuffer.append(importManager.getImportedName(application.getPackageName() + ".WizardNewFileCreationPage"));
d69 1
a69 1
    }
d71 1
a71 1
    stringBuffer.append(importManager.getCompilationUnitName());
d73 1
a73 1
    if (application == null) {
d75 1
a75 1
    } else {
d77 2
a79 2
    stringBuffer.append(TEXT_15);
    if (application == null) {
d81 1
a81 1
    }
a82 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_18);
@


1.35
log
@[168661] Use URIs instead of IResources to make code reusable in RCP
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d52 1
a52 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.34
log
@avoid use of deprecated code
@
text
@d34 2
a35 5
  protected final String TEXT_17 = NL + NL + "\t";
  protected final String TEXT_18 = NL + "\t";
  protected final String TEXT_19 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUniqueFileName(IPath containerFullPath, String fileName) {" + NL + "\t\tif (containerFullPath == null) {" + NL + "\t\t\tcontainerFullPath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tif (fileName == null || fileName.trim().length() == 0) {" + NL + "\t\t\tfileName = \"default\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tIPath filePath = containerFullPath.append(fileName);" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !extension.equals(filePath.getFileExtension())) {" + NL + "\t\t\tfilePath = filePath.addFileExtension(extension);" + NL + "\t\t}" + NL + "" + NL + "\t\textension = filePath.getFileExtension();" + NL + "\t\tfileName = filePath.removeFileExtension().lastSegment();" + NL + "\t\tint i = 1;" + NL + "\t\twhile (";
  protected final String TEXT_20 = ".exists(filePath)) {" + NL + "\t\t\ti++;" + NL + "\t\t\tfilePath = containerFullPath.append(fileName + i);" + NL + "\t\t\tif (extension != null) {" + NL + "\t\t\t\tfilePath = filePath.addFileExtension(extension);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn filePath.lastSegment();" + NL + "\t}" + NL + "\t";
  protected final String TEXT_21 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tsetFileName(getUniqueFileName(getContainerFullPath(), getFileName()));" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (!super.validatePage()) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !getFilePath().toString().endsWith(\".\" + extension)) {" + NL + "\t\t\tsetErrorMessage(NLS.bind(\"File name should have ''{0}'' extension.\", extension));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "}";
d83 1
a84 4
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(TEXT_21);
@


1.33
log
@no reason to have subclasses just to pass plain string value
@
text
@d30 1
a30 1
  protected final String TEXT_13 = NL + "\t\treturn URI.createPlatformResourceURI(getFilePath().toString());";
@


1.32
log
@[167048] mgolubev - If diagram/domain file extension contains dot, it is impossible to create diagram
@
text
@d28 2
a29 2
  protected final String TEXT_11 = NL + "\t{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Override to create files with this extension." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getExtension() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getURI() {";
@


1.31
log
@rewrite application templates in xpand; simplify genmodel
@
text
@d34 5
a38 2
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUniqueFileName(IPath containerFullPath, String fileName) {" + NL + "\t\tif (containerFullPath == null) {" + NL + "\t\t\tcontainerFullPath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tif (fileName == null || fileName.trim().length() == 0) {" + NL + "\t\t\tfileName = \"default\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tIPath filePath = containerFullPath.append(fileName);" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !extension.equals(filePath.getFileExtension())) {" + NL + "\t\t\tfilePath = filePath.addFileExtension(extension);" + NL + "\t\t}" + NL + "" + NL + "\t\textension = filePath.getFileExtension();" + NL + "\t\tfileName = filePath.removeFileExtension().lastSegment();" + NL + "\t\tint i = 1;" + NL + "\t\twhile (";
  protected final String TEXT_18 = ".exists(filePath)) {" + NL + "\t\t\ti++;" + NL + "\t\t\tfilePath = containerFullPath.append(fileName + i);" + NL + "\t\t\tif (extension != null) {" + NL + "\t\t\t\tfilePath = filePath.addFileExtension(extension);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn filePath.lastSegment();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tsetFileName(getUniqueFileName(getContainerFullPath(), getFileName()));" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (!super.validatePage()) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !extension.equals(getFilePath().getFileExtension())) {" + NL + "\t\t\tsetErrorMessage(NLS.bind(\"File name should have ''{0}'' extension.\", extension));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "}";
d86 2
d89 2
a90 1
    stringBuffer.append(TEXT_18);
@


1.30
log
@actual state of the template reflected
@
text
@d67 1
a67 1
    stringBuffer.append(importManager.getImportedName(application.getApplicationPackageName() + ".WizardNewFileCreationPage"));
@


1.29
log
@generate wizard page that allows to select file
@
text
@a35 1
  protected final String TEXT_19 = NL;
a44 1
final boolean hasDomainFile = !editorGen.isSameFileForDiagramAndModel() && editorGen.getDomainGenModel() != null;
a85 1
    stringBuffer.append(TEXT_19);
@


1.28
log
@[165303] Use one more page in generated wizard to ask for model file when standalone domain model option is set
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.osgi.util.NLS;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.ui.dialogs.WizardNewFileCreationPage;";
d23 14
a36 9
  protected final String TEXT_6 = " extends WizardNewFileCreationPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Override to create files with this extension." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getExtension() {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getURI() {";
  protected final String TEXT_8 = NL + "\t\treturn URI.createPlatformResourceURI(getFilePath().toString());";
  protected final String TEXT_9 = NL + "\t\treturn URI.createFileURI(getFilePath().toString());";
  protected final String TEXT_10 = NL + "\t}";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPath getFilePath() {" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path == null) {" + NL + "\t\t\tpath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString fileName = getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tpath = path.append(fileName);" + NL + "\t\t}" + NL + "\t\treturn path;" + NL + "\t}";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUniqueFileName(IPath containerFullPath, String fileName) {" + NL + "\t\tif (containerFullPath == null) {" + NL + "\t\t\tcontainerFullPath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tif (fileName == null || fileName.trim().length() == 0) {" + NL + "\t\t\tfileName = \"default\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tIPath filePath = containerFullPath.append(fileName);" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !extension.equals(filePath.getFileExtension())) {" + NL + "\t\t\tfilePath = filePath.addFileExtension(extension);" + NL + "\t\t}" + NL + "" + NL + "\t\textension = filePath.getFileExtension();" + NL + "\t\tfileName = filePath.removeFileExtension().lastSegment();" + NL + "\t\tint i = 1;" + NL + "\t\twhile (";
  protected final String TEXT_13 = ".exists(filePath)) {" + NL + "\t\t\ti++;" + NL + "\t\t\tfilePath = containerFullPath.append(fileName + i);" + NL + "\t\t\tif (extension != null) {" + NL + "\t\t\t\tfilePath = filePath.addFileExtension(extension);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn filePath.lastSegment();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tsetFileName(getUniqueFileName(getContainerFullPath(), getFileName()));" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (!super.validatePage()) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tString extension = getExtension();" + NL + "\t\tif (extension != null && !extension.equals(getFilePath().getFileExtension())) {" + NL + "\t\t\tsetErrorMessage(NLS.bind(\"File name should have ''{0}'' extension.\", extension));" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "}";
  protected final String TEXT_14 = NL;
d63 1
a63 1
    stringBuffer.append(importManager.getCompilationUnitName());
d65 1
a65 1
    if (application == null) {
d69 2
d72 9
a80 1
    stringBuffer.append(TEXT_10);
d82 1
a82 1
    stringBuffer.append(TEXT_11);
d84 1
a84 1
    stringBuffer.append(TEXT_12);
d86 1
a86 1
    stringBuffer.append(TEXT_13);
d88 1
a88 1
    stringBuffer.append(TEXT_14);
@


1.27
log
@refactor: pass uris to diagram editor util
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.ui.dialogs.WizardNewFileCreationPage;";
d23 9
a31 30
  protected final String TEXT_6 = " extends WizardNewFileCreationPage {";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DOMAIN_EXT = \".";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DIAGRAM_EXT = \".";
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_11 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getDiagramURI() {" + NL + "\t\tIPath path = getFilePath();" + NL + "\t\tif (path.getFileExtension() == null) {" + NL + "\t\t\tpath = path.addFileExtension(\"";
  protected final String TEXT_12 = "\"); //$NON-NLS-1$" + NL + "\t\t}";
  protected final String TEXT_13 = NL + "\t\treturn URI.createPlatformResourceURI(path.toString());";
  protected final String TEXT_14 = NL + "\t\treturn URI.createFileURI(path.toString());";
  protected final String TEXT_15 = NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URI getModelURI() {" + NL + "\t\tIPath path = getFilePath();" + NL + "\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_17 = "\"); //$NON-NLS-1$";
  protected final String TEXT_18 = NL + "\t\treturn URI.createPlatformResourceURI(path.toString());";
  protected final String TEXT_19 = NL + "\t\treturn URI.createFileURI(path.toString());";
  protected final String TEXT_20 = NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPath getFilePath() {" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path == null) {" + NL + "\t\t\tpath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tString fileName = getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tpath = path.append(fileName);" + NL + "\t\t}" + NL + "\t\treturn path;" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getFileName() {" + NL + "\t\tString fileName = super.getFileName();" + NL + "\t\tif (fileName != null && !fileName.endsWith(DIAGRAM_EXT)) {" + NL + "\t\t\tfileName += DIAGRAM_EXT;" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUniqueFileName(IPath containerPath, String fileName) {" + NL + "\t\tString newFileName = fileName;" + NL + "\t\tIPath diagramFilePath = containerPath.append(newFileName + DIAGRAM_EXT);";
  protected final String TEXT_23 = NL + "\t\tIPath modelFilePath = containerPath.append(newFileName + DOMAIN_EXT);";
  protected final String TEXT_24 = NL + "\t\tint i = 1;" + NL + "\t\twhile (exists(diagramFilePath)";
  protected final String TEXT_25 = NL + "\t\t\t\t|| exists(modelFilePath)";
  protected final String TEXT_26 = NL + "\t\t\t\t) {" + NL + "\t\t\ti++;" + NL + "\t\t\tnewFileName = fileName + i;" + NL + "\t\t\tdiagramFilePath = containerPath.append(newFileName + DIAGRAM_EXT);";
  protected final String TEXT_27 = NL + "\t\t\tmodelFilePath = containerPath.append(newFileName + DOMAIN_EXT);";
  protected final String TEXT_28 = NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path != null) {" + NL + "\t\t\tString fileName = getUniqueFileName(path, getDefaultFileName());" + NL + "\t\t\tsetFileName(fileName);" + NL + "\t\t} else {" + NL + "\t\t\tsetFileName(getDefaultFileName());" + NL + "\t\t}" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tfileName = fileName.substring(0, fileName.length() - DIAGRAM_EXT.length()) + DOMAIN_EXT;" + NL + "\t\t\tIPath path = getContainerFullPath();" + NL + "\t\t\tif (path == null) {" + NL + "\t\t\t\tpath = new Path(\"\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tpath = path.append(fileName);" + NL + "\t\t\tif (exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model file already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean exists(IPath path) {";
  protected final String TEXT_31 = NL + "\t\treturn ";
  protected final String TEXT_32 = ".getWorkspace().getRoot().exists(path);";
  protected final String TEXT_33 = NL + "\t\treturn path.toFile().exists();";
  protected final String TEXT_34 = NL + "\t}" + NL + "}";
  protected final String TEXT_35 = NL;
d58 1
a58 1
    if (hasDomainFile) {
d60 1
a60 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d62 2
a64 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(editorGen.getDiagramFileExtension());
d66 1
a66 1
    stringBuffer.append(importManager.getCompilationUnitName());
d68 1
a68 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d70 1
a70 1
    if (application == null) {
d72 1
a72 1
    } else {
a73 43
    }
    stringBuffer.append(TEXT_15);
    if (hasDomainFile) {
    stringBuffer.append(TEXT_16);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_17);
    if (application == null) {
    stringBuffer.append(TEXT_18);
    } else {
    stringBuffer.append(TEXT_19);
    }
    stringBuffer.append(TEXT_20);
    }
    if (application == null) {
    stringBuffer.append(TEXT_21);
    }
    stringBuffer.append(TEXT_22);
    if (hasDomainFile) {
    stringBuffer.append(TEXT_23);
    }
    stringBuffer.append(TEXT_24);
    if (hasDomainFile) {
    stringBuffer.append(TEXT_25);
    }
    stringBuffer.append(TEXT_26);
    if (hasDomainFile) {
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    if (hasDomainFile) {
    stringBuffer.append(TEXT_29);
    }
    stringBuffer.append(TEXT_30);
    if (application == null) {
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_32);
    } else {
    stringBuffer.append(TEXT_33);
    }
    stringBuffer.append(TEXT_34);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_35);
@


1.26
log
@work correctly with pure design editor models
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.ui.dialogs.WizardNewFileCreationPage;" + NL;
d28 25
a52 14
  protected final String TEXT_11 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getFileName() {" + NL + "\t\tString fileName = super.getFileName();" + NL + "\t\tif (fileName != null && !fileName.endsWith(DIAGRAM_EXT)) {" + NL + "\t\t\tfileName += DIAGRAM_EXT;" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getUniqueFileName(IPath containerPath, String fileName) {" + NL + "\t\tString newFileName = fileName;" + NL + "\t\tIPath diagramFilePath = containerPath.append(newFileName + DIAGRAM_EXT);";
  protected final String TEXT_12 = NL + "\t\tIPath modelFilePath = containerPath.append(newFileName + DOMAIN_EXT);";
  protected final String TEXT_13 = NL + "\t\tint i = 1;" + NL + "\t\twhile (exists(diagramFilePath)";
  protected final String TEXT_14 = NL + "\t\t\t\t|| exists(modelFilePath)";
  protected final String TEXT_15 = NL + "\t\t\t\t) {" + NL + "\t\t\ti++;" + NL + "\t\t\tnewFileName = fileName + i;" + NL + "\t\t\tdiagramFilePath = containerPath.append(newFileName + DIAGRAM_EXT);";
  protected final String TEXT_16 = NL + "\t\t\tmodelFilePath = containerPath.append(newFileName + DOMAIN_EXT);";
  protected final String TEXT_17 = NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path != null) {" + NL + "\t\t\tString fileName = getUniqueFileName(path, getDefaultFileName());" + NL + "\t\t\tsetFileName(fileName);" + NL + "\t\t} else {" + NL + "\t\t\tsetFileName(getDefaultFileName());" + NL + "\t\t}" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tfileName = fileName.substring(0, fileName.length() - DIAGRAM_EXT.length()) + DOMAIN_EXT;" + NL + "\t\t\tIPath path = getContainerFullPath().append(fileName);" + NL + "\t\t\tif (exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model file already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean exists(IPath path) {";
  protected final String TEXT_20 = NL + "\t\treturn ";
  protected final String TEXT_21 = ".getWorkspace().getRoot().exists(path);";
  protected final String TEXT_22 = NL + "\t\treturn path.toFile().exists();";
  protected final String TEXT_23 = NL + "\t}" + NL + "}";
  protected final String TEXT_24 = NL;
d89 1
a89 1
    if (hasDomainFile) {
d91 1
a91 1
    }
d93 1
a93 1
    if (hasDomainFile) {
d99 11
d111 13
a123 1
    stringBuffer.append(TEXT_17);
d125 1
a125 1
    stringBuffer.append(TEXT_18);
d127 1
a127 1
    stringBuffer.append(TEXT_19);
d129 1
a129 1
    stringBuffer.append(TEXT_20);
d131 1
a131 1
    stringBuffer.append(TEXT_21);
d133 1
a133 1
    stringBuffer.append(TEXT_22);
d135 1
a135 1
    stringBuffer.append(TEXT_23);
d137 1
a137 1
    stringBuffer.append(TEXT_24);
@


1.25
log
@simplify file names handling
@
text
@d51 1
d68 1
a68 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d78 1
a78 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d82 1
a82 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d86 1
a86 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d90 1
a90 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
@


1.24
log
@remove unused parameters
@
text
@d23 19
a41 9
  protected final String TEXT_6 = " extends WizardNewFileCreationPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getFileName() {" + NL + "\t\tString fileName = super.getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tfileName = getDiagramFileCreator().appendExtensionToFileName(fileName);" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = " getDiagramFileCreator() {" + NL + "\t\treturn ";
  protected final String TEXT_9 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path != null) {" + NL + "\t\t\tString fileName = getDiagramFileCreator().getUniqueFileName(path, getDefaultFileName());" + NL + "\t\t\tsetFileName(fileName);" + NL + "\t\t}" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t// appending file extension to correctly process file names including \".\" symbol" + NL + "\t\t\tIPath path = getContainerFullPath().append(getDiagramFileCreator().appendExtensionToFileName(fileName));" + NL + "\t\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_11 = "\"); //$NON-NLS-1$" + NL + "\t\t\tif (";
  protected final String TEXT_12 = ".exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model file already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_13 = NL + "}";
  protected final String TEXT_14 = NL;
d50 1
d67 1
a67 1
    stringBuffer.append(importManager.getCompilationUnitName());
d69 1
a69 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName()));
d71 1
a71 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName()));
d73 1
a73 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d75 1
a75 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d77 1
a77 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramFileCreatorQualifiedClassName()));
d81 20
d102 1
a102 1
    stringBuffer.append(TEXT_14);
@


1.23
log
@#114200 remove resource deps from wizard
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.io.ByteArrayInputStream;" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.ui.dialogs.WizardNewFileCreationPage;" + NL;
d24 1
a24 1
  protected final String TEXT_7 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getFileName() {" + NL + "\t\tString fileName = super.getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tfileName = getDiagramFileCreator().appendExtensionToFileName(fileName);" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic InputStream getInitialContents() {" + NL + "\t\treturn new ByteArrayInputStream(new byte[0]);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
@


1.22
log
@#114200 remove gmf runtime ide dependencies
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.io.ByteArrayInputStream;" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Composite;" + NL + "import org.eclipse.ui.dialogs.WizardNewFileCreationPage;" + NL;
d24 8
a31 7
  protected final String TEXT_7 = "(String pageName, IStructuredSelection selection) {" + NL + "\t\tsuper(pageName, selection);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getFileName() {" + NL + "\t\tString fileName = super.getFileName();" + NL + "\t\tif (fileName != null) {" + NL + "\t\t\tfileName = getDiagramFileCreator().appendExtensionToFileName(fileName);" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic InputStream getInitialContents() {" + NL + "\t\treturn new ByteArrayInputStream(new byte[0]);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic DiagramFileCreator getDiagramFileCreator() {" + NL + "\t\treturn ";
  protected final String TEXT_8 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void createControl(Composite parent) {" + NL + "\t\tsuper.createControl(parent);" + NL + "\t\tIPath path = getContainerFullPath();" + NL + "\t\tif (path != null) {" + NL + "\t\t\tString fileName = getDiagramFileCreator().getUniqueFileName(path, getDefaultFileName());" + NL + "\t\t\tsetFileName(fileName);" + NL + "\t\t}" + NL + "\t\tsetPageComplete(validatePage());" + NL + "\t}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t// appending file extension to correctly process file names including \".\" symbol" + NL + "\t\t\tIPath path = getContainerFullPath().append(getDiagramFileCreator().appendExtensionToFileName(fileName));" + NL + "\t\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_10 = "\"); //$NON-NLS-1$" + NL + "\t\t\tif (";
  protected final String TEXT_11 = ".getWorkspace().getRoot().exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model file already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_12 = NL + "}";
  protected final String TEXT_13 = NL;
d54 1
a54 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d56 1
a56 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d58 1
a58 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d60 2
d63 1
a63 1
    stringBuffer.append(TEXT_9);
a64 2
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d66 2
d69 1
a69 1
    stringBuffer.append(TEXT_12);
d71 1
a71 1
    stringBuffer.append(TEXT_13);
@


1.21
log
@header comment should not be a javadoc comment
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorWizardPage;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL;
d23 8
a30 12
  protected final String TEXT_6 = " extends EditorWizardPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", workbench, selection); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_8 = " Diagram\");" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_9 = " diagram.\");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn ";
  protected final String TEXT_10 = ".createAndOpenDiagram(getDiagramFileCreator(), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor(), saveDiagram);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic DiagramFileCreator getDiagramFileCreator() {" + NL + "\t\treturn ";
  protected final String TEXT_11 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn ";
  protected final String TEXT_12 = ".MODEL_ID;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_13 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t// appending file extension to correctly process file names including \".\" symbol" + NL + "\t\t\tIPath path = getContainerFullPath().append(getDiagramFileCreator().appendExtensionToFileName(fileName));" + NL + "\t\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_14 = "\"); //$NON-NLS-1$" + NL + "\t\t\tif (";
  protected final String TEXT_15 = ".getWorkspace().getRoot().exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model File already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_16 = NL + "}";
  protected final String TEXT_17 = NL;
d57 1
a57 1
    stringBuffer.append(editorGen.getModelID());
d59 1
a59 1
    stringBuffer.append(editorGen.getModelID());
d61 1
a61 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
d63 1
a63 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d65 1
a65 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d67 1
a67 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
a68 8
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
@


1.20
log
@fix some nls markers
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.19
log
@Correcting copyright processing
@
text
@d25 2
a26 2
  protected final String TEXT_8 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_9 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn ";
@


1.18
log
@Using modelID in the UI instead of model name.
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d50 1
a50 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.17
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d61 1
a61 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d63 1
a63 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
@


1.16
log
@using M6 to generate code.
@
text
@d28 2
a29 2
  protected final String TEXT_11 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn \"";
  protected final String TEXT_12 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
d69 1
a69 1
    stringBuffer.append(editorGen.getModelID());
@


1.15
log
@restore generators
@
text
@d38 1
a38 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.14
log
@#134095 do not store compiled templates in cvs
@
text
@d38 1
a38 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.13
log
@Switching to eclipse M6.
@
text
@@


1.12
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d38 1
a38 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 17
a34 14
  protected final String TEXT_1 = NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorWizardPage;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL;
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends EditorWizardPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", workbench, selection); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_5 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_6 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn ";
  protected final String TEXT_7 = ".createAndOpenDiagram(getDiagramFileCreator(), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor(), saveDiagram);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic DiagramFileCreator getDiagramFileCreator() {" + NL + "\t\treturn ";
  protected final String TEXT_8 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn \"";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t// appending file extension to correctly process file names including \".\" symbol" + NL + "\t\t\tIPath path = getContainerFullPath().append(getDiagramFileCreator().appendExtensionToFileName(fileName));" + NL + "\t\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_11 = "\"); //$NON-NLS-1$" + NL + "\t\t\tif (";
  protected final String TEXT_12 = ".getWorkspace().getRoot().exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model File already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_13 = NL + "}";
  protected final String TEXT_14 = NL;
a43 1
importManager.emitPackageStatement(stringBuffer);
d45 10
d56 1
a56 1
    stringBuffer.append(TEXT_2);
d58 1
a58 1
    stringBuffer.append(TEXT_3);
d60 1
a60 1
    stringBuffer.append(TEXT_4);
d62 1
a62 1
    stringBuffer.append(TEXT_5);
d64 1
a64 1
    stringBuffer.append(TEXT_6);
d66 1
a66 1
    stringBuffer.append(TEXT_7);
d68 1
a68 1
    stringBuffer.append(TEXT_8);
d70 1
a70 1
    stringBuffer.append(TEXT_9);
d72 1
a72 1
    stringBuffer.append(TEXT_10);
d74 1
a74 1
    stringBuffer.append(TEXT_11);
d76 1
a76 1
    stringBuffer.append(TEXT_12);
d78 1
a78 1
    stringBuffer.append(TEXT_13);
d80 1
a80 1
    stringBuffer.append(TEXT_14);
@


1.10
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d18 14
a31 15
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorWizardPage;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchWindow;";
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends EditorWizardPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", workbench, selection); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_6 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_7 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn ";
  protected final String TEXT_8 = ".createAndOpenDiagram(getDiagramFileCreator(), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor(), saveDiagram);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic DiagramFileCreator getDiagramFileCreator() {" + NL + "\t\treturn ";
  protected final String TEXT_9 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn \"";
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean validatePage() {" + NL + "\t\tif (super.validatePage()) {" + NL + "\t\t\tString fileName = getFileName();" + NL + "\t\t\tif (fileName == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t// appending file extension to correctly process file names including \".\" symbol" + NL + "\t\t\tIPath path = getContainerFullPath().append(getDiagramFileCreator().appendExtensionToFileName(fileName));" + NL + "\t\t\tpath = path.removeFileExtension().addFileExtension(\"";
  protected final String TEXT_12 = "\"); //$NON-NLS-1$" + NL + "\t\t\tif (";
  protected final String TEXT_13 = ".getWorkspace().getRoot().exists(path)) {" + NL + "\t\t\t\tsetErrorMessage(\"Model File already exists: \" + path.lastSegment());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_14 = NL + "}";
  protected final String TEXT_15 = NL;
d37 5
a41 2
GenDiagram genDiagram = (GenDiagram) argument;
GenEditorGenerator editorGen = genDiagram.getEditorGen();
d43 1
a43 1
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
d45 1
a45 4
    
ImportUtil importManager = new ImportUtil(genDiagram.getEditorGen().getEditor().getPackageName());
importManager.markImportLocation(stringBuffer);

d49 1
a49 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d53 1
a53 1
    stringBuffer.append(editorGen.getDomainGenModel().getModelName());
d55 1
a55 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilClassName());
d57 1
a57 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d59 1
a59 1
    stringBuffer.append(editorGen.getModelID());
d61 1
a61 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d63 1
a63 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d65 1
a65 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d67 1
a67 1
    }
a68 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_15);
@


1.9
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d41 1
a41 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d44 1
a44 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.8
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d37 3
a39 2
    GenDiagram genDiagram = (GenDiagram) argument;
    GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
d52 1
a52 1
    stringBuffer.append(genModel.getModelName());
d54 1
a54 1
    stringBuffer.append(genModel.getModelName());
d60 1
a60 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d62 1
a62 1
    if (!genDiagram.isSameFileForDiagramAndModel()) {
d64 1
a64 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase());
@


1.7
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d60 1
a60 1
    stringBuffer.append(genModel.getModelName());
@


1.6
log
@ImportManager moved to oeg.common
@
text
@d39 1
a39 1
    GenModel genModel = genDiagram.getEMFGenModel();
@


1.5
log
@#121427
Fixing problems with re-creation recently removed diagram.
@
text
@d5 1
a5 1
import org.eclipse.gmf.codegen.util.ImportUtil;
@


1.4
log
@#116031 avoid hardcoded class names in templates
@
text
@d5 1
d20 14
a33 9
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorWizardPage;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends EditorWizardPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", workbench, selection); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_5 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_6 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn ";
  protected final String TEXT_7 = ".createAndOpenDiagram(getDiagramFileCreator(), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor(), saveDiagram);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic DiagramFileCreator getDiagramFileCreator() {" + NL + "\t\treturn ";
  protected final String TEXT_8 = ".getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn \"";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d43 4
a46 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d50 1
a50 1
    stringBuffer.append(genModel.getModelName());
d54 2
d57 1
a57 1
    stringBuffer.append(TEXT_7);
d59 1
a59 1
    stringBuffer.append(TEXT_8);
a60 1
    stringBuffer.append(TEXT_9);
d62 10
@


1.3
log
@catch up with recent API changes in the runtime
@
text
@d19 9
a27 5
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorWizardPage;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class CreationWizardPage extends EditorWizardPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic CreationWizardPage(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", workbench, selection); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
  protected final String TEXT_3 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDescription(\"Create a new ";
  protected final String TEXT_4 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn DiagramEditorUtil.createAndOpenDiagram(getDiagramFileCreator(), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor(), saveDiagram);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic DiagramFileCreator getDiagramFileCreator() {" + NL + "\t\treturn DiagramFileCreatorBis.getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn \"";
  protected final String TEXT_5 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;
d37 1
a37 1
    stringBuffer.append(genModel.getModelName());
d39 1
a39 1
    stringBuffer.append(genModel.getModelName());
d43 1
d45 7
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d19 1
a19 1
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorWizardPage;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.EditorFileCreator;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class CreationWizardPage extends EditorWizardPage {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic CreationWizardPage(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper(\"CreationWizardPage\", workbench, selection); //$NON-NLS-1$" + NL + "\t\tsetTitle(\"Create ";
d21 1
a21 1
  protected final String TEXT_4 = " diagram.\"); //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createAndOpenDiagram(IPath containerPath, String fileName, InputStream initialContents, String kind, IWorkbenchWindow dWindow, IProgressMonitor progressMonitor, boolean saveDiagram) {" + NL + "\t\treturn DiagramEditorUtil.createAndOpenDiagram(getDiagramFileCreator(), containerPath, fileName, initialContents, kind, dWindow, progressMonitor, isOpenNewlyCreatedDiagramEditor(), saveDiagram);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDefaultFileName() {" + NL + "\t\treturn \"default\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditorFileCreator getDiagramFileCreator() {" + NL + "\t\treturn DiagramFileCreator.getInstance();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getDiagramKind() {" + NL + "\t\treturn \"";
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d29 1
a29 1
    GenModel genModel = genDiagram.getEmfGenModel();
@

