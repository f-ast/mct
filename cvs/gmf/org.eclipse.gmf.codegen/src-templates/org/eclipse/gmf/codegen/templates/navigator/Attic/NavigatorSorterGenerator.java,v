head	1.9;
access;
symbols
	v20081022-1925:1.9
	v20081015-1925:1.9
	v20081008-1925:1.9
	v20081001-1925:1.9
	v20080924-1925:1.9
	v20080917-1925:1.9
	v20080911-1728:1.9
	v20080910-1520:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	v20080806-1520:1.9
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.06.11.14.58.50;	author ashatalin;	state dead;
branches;
next	1.8;
commitid	317d466d63264567;

1.8
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	17ef46643bcf4567;

1.7
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.6;
commitid	7de14650454a4567;

1.6
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	78b462dc68e4567;

1.5
date	2006.11.08.14.06.28;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.17.19.19.54;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.13.16.44.38;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.13.16.30.03;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[191851] - Convert /navigator/NavigatorSorter.javajet template to xpand
@
text
@package org.eclipse.gmf.codegen.templates.navigator;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;

public class NavigatorSorterGenerator
{
  protected static String nl;
  public static synchronized NavigatorSorterGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NavigatorSorterGenerator result = new NavigatorSorterGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static final int GROUP_CATEGORY = ";
  protected final String TEXT_7 = ";";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static final int SHORTCUTS_CATEGORY = ";
  protected final String TEXT_9 = ";";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic int category(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_11 = ") {" + NL + "\t\t\t";
  protected final String TEXT_12 = " item = (";
  protected final String TEXT_13 = ") element;";
  protected final String TEXT_14 = NL + "\t\t\tif (item.getView().getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\t\t\treturn SHORTCUTS_CATEGORY;" + NL + "\t\t\t}";
  protected final String TEXT_15 = NL + "\t\t\treturn ";
  protected final String TEXT_16 = ".getVisualID(item.getView());" + NL + "\t\t}" + NL + "\t\treturn GROUP_CATEGORY;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_17 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenNavigator genNavigator = (GenNavigator) ((Object[]) argument)[0];
GenDiagram genDiagram = genNavigator.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

Collection commonBaseElements = new ArrayList(genDiagram.getAllContainers());
commonBaseElements.addAll(genDiagram.getLinks());
int groupVisualID = 0;
for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (groupVisualID < nextCommonBase.getVisualID()) {
		groupVisualID = nextCommonBase.getVisualID();
	}
}
int shortcutsVisualID = groupVisualID++;
groupVisualID++;

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genNavigator.getSorterClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ViewerSorter"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(groupVisualID);
    stringBuffer.append(TEXT_7);
    if (genDiagram.generateCreateShortcutAction()) {
    stringBuffer.append(TEXT_8);
    stringBuffer.append(shortcutsVisualID);
    stringBuffer.append(TEXT_9);
    }
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    if (genDiagram.generateCreateShortcutAction()) {
    stringBuffer.append(TEXT_14);
    }
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_17);
    return stringBuffer.toString();
  }
}
@


1.8
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.7
log
@Anna Karyakina's migration fix
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.6
log
@follow consisted spacing policy
@
text
@d19 17
a35 18
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static final int GROUP_CATEGORY = ";
  protected final String TEXT_8 = ";";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static final int SHORTCUTS_CATEGORY = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic int category(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_12 = ") {" + NL + "\t\t\t";
  protected final String TEXT_13 = " item = (";
  protected final String TEXT_14 = ") element;";
  protected final String TEXT_15 = NL + "\t\t\tif (item.getView().getEAnnotation(\"Shortcut\") != null) { //$NON-NLS-1$" + NL + "\t\t\t\treturn SHORTCUTS_CATEGORY;" + NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\treturn ";
  protected final String TEXT_17 = ".getVisualID(item.getView());" + NL + "\t\t}" + NL + "\t\treturn GROUP_CATEGORY;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_18 = NL;
a56 1
    stringBuffer.append(TEXT_1);
d61 2
a63 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d66 2
d69 1
a69 1
    importManager.markImportLocation(stringBuffer);
d71 1
a71 1
    stringBuffer.append(genNavigator.getSorterClassName());
d73 1
a73 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ViewerSorter"));
d75 1
a75 1
    stringBuffer.append(groupVisualID);
d77 1
a77 1
    if (genDiagram.generateCreateShortcutAction()) {
d79 1
a79 1
    stringBuffer.append(shortcutsVisualID);
d81 1
a81 1
    }
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d89 1
a89 1
    if (genDiagram.generateCreateShortcutAction()) {
d91 1
a91 1
    }
d93 1
a93 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a94 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_18);
@


1.5
log
@LinkHelper adopted to work correctly with shortcuts.
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d64 1
a64 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.4
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@d34 3
a36 2
  protected final String TEXT_16 = NL + "\t\t\treturn item.getVisualID();" + NL + "\t\t}" + NL + "\t\treturn GROUP_CATEGORY;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_17 = NL;
d93 2
d96 1
a96 1
    stringBuffer.append(TEXT_17);
@


1.3
log
@Open action for diagram nodes in Navigator added.
@
text
@d26 10
a35 6
  protected final String TEXT_8 = ";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic int category(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_9 = ") {" + NL + "\t\t\t";
  protected final String TEXT_10 = " item = (";
  protected final String TEXT_11 = ") element;" + NL + "\t\t\tif (";
  protected final String TEXT_12 = ".MODEL_ID.equals(item.getModelID())) {" + NL + "\t\t\t\treturn item.getVisualID();" + NL + "\t\t\t}\t" + NL + "\t\t}" + NL + "\t\treturn GROUP_CATEGORY;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_13 = NL;
d54 1
d76 1
a76 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d78 1
a78 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d80 2
a82 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d84 8
d93 1
a93 1
    stringBuffer.append(TEXT_13);
@


1.2
log
@GROUP_CATEGORY constant extracted.
@
text
@a51 9
/*Map visualID2CommonBase = new TreeMap();
for (Iterator it = commonBaseElements.iterator(); it.hasNext();) {
	GenCommonBase nextCommonBase = (GenCommonBase) it.next();
	if (genNavigator.getChildReferencesTo(nextCommonBase).size() > 0) {
		
	}
}*/


@


1.1
log
@Navigator Sorter added.
@
text
@d25 6
a30 6
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic int category(Object element) {" + NL + "\t\tif (element instanceof ";
  protected final String TEXT_8 = ") {" + NL + "\t\t\t";
  protected final String TEXT_9 = " item = (";
  protected final String TEXT_10 = ") element;" + NL + "\t\t\tif (";
  protected final String TEXT_11 = ".MODEL_ID.equals(item.getModelID())) {" + NL + "\t\t\t\treturn item.getVisualID();" + NL + "\t\t\t}\t" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_12 = ";" + NL + "\t}" + NL + "\t" + NL + "}";
d78 1
a78 1
    stringBuffer.append(importManager.getImportedName(genNavigator.getNavigatorItemQualifiedClassName()));
d84 2
a86 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(groupVisualID);
@

