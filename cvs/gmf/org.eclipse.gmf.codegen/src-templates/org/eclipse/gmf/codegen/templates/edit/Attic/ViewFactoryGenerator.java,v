head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2005.10.11.12.50.57;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2005.10.11.12.25.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.30.19.16.09;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@package org.eclipse.gmf.codegen.templates.edit;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.codegen.util.*;

public class ViewFactoryGenerator
{
  protected static String nl;
  public static synchronized ViewFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ViewFactoryGenerator result = new ViewFactoryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.draw2d.ColorConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.FigureUtilities;" + NL + "import org.eclipse.gmf.runtime.notation.NotationPackage;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = NL + "\tConnectorViewFactory";
  protected final String TEXT_7 = NL + "\tAbstractLabelViewFactory";
  protected final String TEXT_8 = NL + "\tAbstractShapeViewFactory";
  protected final String TEXT_9 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter," + NL + "\t\tString semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);";
  protected final String TEXT_10 = NL + "\t\tViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getLineStyle_LineColor()," + NL + "\t\t\tFigureUtilities.colorToInteger(ColorConstants.";
  protected final String TEXT_11 = "));";
  protected final String TEXT_12 = NL + "\t\tViewUtil.setStructuralFeatureValue(view, NotationPackage.eINSTANCE.getFillStyle_FillColor()," + NL + "\t\t\tFigureUtilities.colorToInteger(ColorConstants.";
  protected final String TEXT_13 = "));";
  protected final String TEXT_14 = NL + "\t\tgetViewService().createNode(semanticAdapter, view," + NL + "\t\t\t";
  protected final String TEXT_15 = ".";
  protected final String TEXT_16 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_17 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, \"";
  protected final String TEXT_18 = "\"," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_19 = NL + "\t\tgetViewService().createNode(semanticAdapter, view, \"";
  protected final String TEXT_20 = "\"," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());";
  protected final String TEXT_21 = NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    GenBaseElement genElement = (GenBaseElement) argument;
    GenDiagram genDiagram = genElement.getDiagram();
    stringBuffer.append(TEXT_1);
    stringBuffer.append(genDiagram.getEditProvidersPackageName());
    stringBuffer.append(TEXT_2);
    ImportUtil importManager = new ImportUtil(genDiagram.getEditProvidersPackageName());
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genElement.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_5);
    if (genElement instanceof GenLink) {
    stringBuffer.append(TEXT_6);
    } else if (genElement instanceof GenChildNode) {
    stringBuffer.append(TEXT_7);
    } else {
    stringBuffer.append(TEXT_8);
    }
    stringBuffer.append(TEXT_9);
    
ColorAttributes colorAttrs = (ColorAttributes) genElement.getViewmap().find(ColorAttributes.class);
if (colorAttrs != null && colorAttrs.getForegroundColor() != null && colorAttrs.getForegroundColor().trim().length() > 0) {
    stringBuffer.append(TEXT_10);
    stringBuffer.append(colorAttrs.getForegroundColor());
    stringBuffer.append(TEXT_11);
    
}
if (genElement instanceof GenNode) {
	GenNode genNode = (GenNode) genElement;
	if (colorAttrs != null && colorAttrs.getBackgroundColor() != null && colorAttrs.getBackgroundColor().trim().length() > 0) {
    stringBuffer.append(TEXT_12);
    stringBuffer.append(colorAttrs.getBackgroundColor());
    stringBuffer.append(TEXT_13);
    
	}
	if (!(genNode instanceof GenChildNode)) {
		if (genElement.hasNameToEdit()) {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genElement));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(AccessUtil.getNameSemanticHint(genElement));
    stringBuffer.append(TEXT_16);
    
		}
		List genChildContainers = genNode.getChildContainers();
		for (int j = 0; j < genChildContainers.size(); j++) {
			GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);

    stringBuffer.append(TEXT_17);
    stringBuffer.append(genChildContainer.getGroupID());
    stringBuffer.append(TEXT_18);
    
		}
	}
}
if (genElement instanceof GenLink) {
	GenLink genLink = (GenLink) genElement;
	List labels = genLink.getLabels();
	for (int j = 0; j < labels.size(); j++) {
		LinkLabel label = (LinkLabel) labels.get(j);

    stringBuffer.append(TEXT_19);
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
    stringBuffer.append(TEXT_20);
    
	}
}

    stringBuffer.append(TEXT_21);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_22);
    return stringBuffer.toString();
  }
}
@


1.4
log
@#112191 colors as Viewmap's Attributes
@
text
@@


1.3
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@d65 2
a66 2
String fgColour = genElement.getForegroundColor();
if (fgColour != null && fgColour.trim().length() > 0) {
d68 1
a68 1
    stringBuffer.append(fgColour);
d74 1
a74 2
	String bgColour = genNode.getBackgroundColor();
	if (bgColour != null && bgColour.trim().length() > 0) {
d76 1
a76 1
    stringBuffer.append(bgColour);
@


1.2
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d37 4
a40 2
  protected final String TEXT_19 = NL + "\t}" + NL + "}";
  protected final String TEXT_20 = NL;
d101 5
d108 7
d116 1
a116 1
    stringBuffer.append(TEXT_20);
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d3 1
d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 15
a38 8
  protected final String TEXT_6 = "ConnectorViewFactory";
  protected final String TEXT_7 = "AbstractShapeViewFactory";
  protected final String TEXT_8 = " {";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateView(View containerView, View view, IAdaptable semanticAdapter, String semanticHint, int index, boolean persisted) {" + NL + "\t\tsuper.decorateView(containerView, view, semanticAdapter, semanticHint, index, persisted);" + NL + "\t\tgetViewService().createNode(semanticAdapter, view, ";
  protected final String TEXT_10 = ".";
  protected final String TEXT_11 = "," + NL + "\t\t\tViewUtil.APPEND, persisted, getPreferencesHint());" + NL + "\t}";
  protected final String TEXT_12 = NL + "}";
  protected final String TEXT_13 = NL;
d56 2
d59 1
a59 1
    stringBuffer.append(TEXT_7);
a60 2
    stringBuffer.append(TEXT_8);
    if (genElement.hasNameToEdit()) {
d62 3
a64 1
    stringBuffer.append(AccessUtil.getSemanticHintsClassName(genElement));
d66 1
a66 1
    stringBuffer.append(AccessUtil.getNameSemanticHint(genElement));
d68 6
a73 1
    }
d75 26
d102 1
a102 1
    stringBuffer.append(TEXT_13);
@

