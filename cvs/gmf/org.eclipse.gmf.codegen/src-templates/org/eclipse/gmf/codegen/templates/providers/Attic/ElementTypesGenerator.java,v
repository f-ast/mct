head	1.63;
access;
symbols
	v20081022-1925:1.63
	v20081015-1925:1.63
	v20081008-1925:1.63
	v20081001-1925:1.63
	v20080924-1925:1.63
	v20080917-1925:1.63
	v20080911-1728:1.63
	v20080910-1520:1.63
	v20080903-1520:1.63
	v20080827-1520:1.63
	v20080813-1520:1.63
	v20080806-1520:1.63
	v20070202-0200:1.56
	v20061218-1200:1.62
	v20061214-0000:1.62
	v20061120-1300:1.62
	M3_20:1.62
	v20061117-0800:1.62
	v20061027-1200:1.56
	v20061020-1000:1.56
	v20061013-1330:1.59
	v20060919-0800:1.56
	v20060907-1100:1.56
	M1_20:1.56
	v20060904-1500:1.56
	v20060824-1600:1.56
	v20060817-1500:1.56
	v20060728-0500:1.56
	v20060713-1700:1.56
	R1_0_maintenance:1.56.0.2
	R1_0:1.56
	v20060627-1200:1.56
	v20060626-1420:1.56
	v20060620-0400:1.56
	v20060616-1400:1.56
	v20060616-1200:1.56
	v20060609-1400:1.54
	v20060531-1730:1.51
	v20060530-1930:1.50
	v20060526-1200:1.46
	v20060519-1300:1.43
	v20060519-0800:1.43
	v20060512-1000:1.42
	I20060512-1000:1.42
	I20060505-1400:1.42
	I20060428-1300:1.42
	I20060424-0500:1.41
	I20060424-0300:1.41
	M6_10:1.39
	I20060407-1200:1.33
	I20060331-1000:1.30
	I20060324-0300:1.30
	I20060317-1300:1.30
	I20060317-1200:1.30
	I20060316-1300:1.30
	I20060309-1300:1.30
	M5_10:1.29
	S20060303-1600:1.29
	I20060227-1730:1.28
	I20060216-1945:1.27
	I20060210-1715:1.25
	I20060209-1815:1.25
	I20060203-0830:1.22
	I20060202-1415:1.22
	I20060129-1145:1.21
	I20060127-0900:1.21
	I20060120-1530:1.18
	I20060113-1700:1.18
	M4_10:1.18
	I20060107-1100:1.18
	I20060105-1630:1.18
	I20051230-1230:1.18
	I20051223-1100:1.18
	I20051217-0925:1.18
	I20051208-2000:1.18
	I20051201-1800:1.18
	I20051124-2000:1.18
	M3_10:1.18
	I20051118-1245:1.18
	I20051111-1800:1.16
	I20051106-0900:1.12
	v20051030:1.12;
locks; strict;
comment	@# @;
expand	@k@;


1.63
date	2006.12.20.02.16.53;	author dstadnik;	state dead;
branches;
next	1.62;
commitid	1ea745889d114567;

1.62
date	2006.11.09.13.03.02;	author radvorak;	state Exp;
branches;
next	1.61;

1.61
date	2006.10.18.14.21.47;	author dstadnik;	state Exp;
branches;
next	1.60;

1.60
date	2006.10.16.11.20.20;	author radvorak;	state Exp;
branches;
next	1.59;

1.59
date	2006.10.05.12.26.13;	author radvorak;	state Exp;
branches;
next	1.58;

1.58
date	2006.09.28.16.23.07;	author radvorak;	state Exp;
branches;
next	1.57;

1.57
date	2006.09.26.17.55.56;	author radvorak;	state Exp;
branches;
next	1.56;

1.56
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches;
next	1.55;

1.55
date	2006.06.13.12.53.34;	author radvorak;	state Exp;
branches;
next	1.54;

1.54
date	2006.06.05.21.08.38;	author radvorak;	state Exp;
branches;
next	1.53;

1.53
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.52;

1.52
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.51;

1.51
date	2006.05.31.14.15.57;	author dstadnik;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.30.15.28.05;	author radvorak;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.29.20.07.49;	author radvorak;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.29.13.55.19;	author dstadnik;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.25.10.40.09;	author atikhomirov;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.25.09.35.12;	author dstadnik;	state Exp;
branches;
next	1.44;

1.44
date	2006.05.24.16.22.37;	author radvorak;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.21.14.07.10;	author radvorak;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.13.13.43.20;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.33;

1.33
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.04.11.00.59;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.03.12.52.48;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.17.12.02.07;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.15.18.48.05;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.14.11.26.51;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.31.19.02.07;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.26.17.36.59;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.26.12.24.06;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.15.12.02.30;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.10.18.32.55;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.07.15.41.03;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.25.18.28.41;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.24.16.47.40;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.20.16.33.30;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.20.16.04.35;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.06.16.03.15;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.63
log
@rewrite element types in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ElementTypesGenerator
{
  protected static String nl;
  public static synchronized ElementTypesGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ElementTypesGenerator result = new ElementTypesGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "import java.util.HashSet;" + NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Map;" + NL + "import java.util.Set;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_8 = "() {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static Map elements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
  protected final String TEXT_9 = NL + "\t\t\tEClass eClass = (EClass) element;" + NL + "\t\t\tif (!eClass.isAbstract()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_10 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (elements == null) {" + NL + "\t\t\telements = new IdentityHashMap();";
  protected final String TEXT_11 = NL + "\t\t\telements.put(";
  protected final String TEXT_12 = ", ";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t\t\telements.put(";
  protected final String TEXT_16 = ", ";
  protected final String TEXT_17 = ".eINSTANCE.get";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t\t\telements.put(";
  protected final String TEXT_20 = ", ";
  protected final String TEXT_21 = ".eINSTANCE.get";
  protected final String TEXT_22 = "());";
  protected final String TEXT_23 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}" + NL;
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_25 = " = getElementType(\"";
  protected final String TEXT_26 = "\"); //$NON-NLS-1$";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static Set KNOWN_ELEMENT_TYPES;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean isKnownElementType(IElementType elementType) {" + NL + "\t\tif (KNOWN_ELEMENT_TYPES == null) {" + NL + "\t\t\tKNOWN_ELEMENT_TYPES = new HashSet();";
  protected final String TEXT_28 = NL + "\t\t\tKNOWN_ELEMENT_TYPES.add(";
  protected final String TEXT_29 = ");";
  protected final String TEXT_30 = NL + "\t\t}" + NL + "\t\treturn KNOWN_ELEMENT_TYPES.contains(elementType);" + NL + "\t}";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_32 = "\t\t";
  protected final String TEXT_33 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final IObjectInitializer ";
  protected final String TEXT_34 = " = new ObjectInitializer(";
  protected final String TEXT_35 = ") {";
  protected final String TEXT_36 = NL + "\t\tObjectInitializer ";
  protected final String TEXT_37 = "() {" + NL + "\t\t\treturn new ObjectInitializer(";
  protected final String TEXT_38 = ") {";
  protected final String TEXT_39 = NL + "\t\t \tprotected void init() {\t\t\t\t";
  protected final String TEXT_40 = "\t\t\t" + NL + "\t\t\t\tadd(createNewElementFeatureInitializer(";
  protected final String TEXT_41 = ", new ObjectInitializer[] {";
  protected final String TEXT_42 = NL + "\t\t\t\t\t";
  protected final String TEXT_43 = "(), ";
  protected final String TEXT_44 = NL + "\t\t\t\t}));";
  protected final String TEXT_45 = "\t\t\t" + NL + "\t\t\t\tadd(createExpressionFeatureInitializer(";
  protected final String TEXT_46 = ", ";
  protected final String TEXT_47 = "null";
  protected final String TEXT_48 = ".";
  protected final String TEXT_49 = "(";
  protected final String TEXT_50 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_51 = ", ";
  protected final String TEXT_52 = ")";
  protected final String TEXT_53 = ".";
  protected final String TEXT_54 = "(";
  protected final String TEXT_55 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_56 = ")";
  protected final String TEXT_57 = "new ";
  protected final String TEXT_58 = "(";
  protected final String TEXT_59 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_60 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_61 = " self = (";
  protected final String TEXT_62 = ")context;";
  protected final String TEXT_63 = "\t" + NL + "\t\t";
  protected final String TEXT_64 = " ";
  protected final String TEXT_65 = " = (";
  protected final String TEXT_66 = ")env.get(\"";
  protected final String TEXT_67 = "\"); //$NON-NLS-1$";
  protected final String TEXT_68 = NL + "\t\treturn ";
  protected final String TEXT_69 = ".";
  protected final String TEXT_70 = "(self";
  protected final String TEXT_71 = ", ";
  protected final String TEXT_72 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_73 = NL + "));";
  protected final String TEXT_74 = "\t\t\t}";
  protected final String TEXT_75 = NL + "\t\t\t\t}; // ";
  protected final String TEXT_76 = " ObjectInitializer" + NL + "\t\t\t}";
  protected final String TEXT_77 = NL + "\t\t}; // ";
  protected final String TEXT_78 = " ObjectInitializer";
  protected final String TEXT_79 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static interface IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_80 = " instance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static abstract class ObjectInitializer implements IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tfinal EClass element;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_81 = " featureInitializers = new ";
  protected final String TEXT_82 = "();" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tObjectInitializer(EClass element) {" + NL + "\t\t\t\tthis.element = element;" + NL + "\t\t\t\tinit();" + NL + "\t\t\t}" + NL + "\t\t\t/**" + NL + "\t\t \t * @@generated" + NL + "\t\t \t */" + NL + "\t\t \tprotected abstract void init();\t\t\t\t\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprotected final IFeatureInitializer add(IFeatureInitializer initializer) {" + NL + "\t\t\t\tfeatureInitializers.add(initializer);" + NL + "\t\t\t\treturn initializer;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_83 = " instance) {" + NL + "\t\t\t\tfor (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tIFeatureInitializer nextExpr = (IFeatureInitializer)it.next();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_84 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface IFeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new IFeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_85 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, ";
  protected final String TEXT_86 = " valueExpression) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ";
  protected final String TEXT_87 = " expression = valueExpression;" + NL + "\t\t\treturn new IFeatureInitializer() {\t\t\t\t" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\texpression.assignTo(feature, contextInstance);" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t}\t\t";
  protected final String TEXT_88 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_89 = " {";
  protected final String TEXT_90 = NL;
  protected final String TEXT_91 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_92 = " ";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = " self";
  protected final String TEXT_95 = ", ";
  protected final String TEXT_96 = " ";
  protected final String TEXT_97 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_98 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_99 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_100 = NL + "\t\t} //";
  protected final String TEXT_101 = NL + "\t} // end of Initializers";
  protected final String TEXT_102 = NL + "}";
  protected final String TEXT_103 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
importManager.registerInnerClass("Initializers");
importManager.registerInnerClass("IObjectInitializer");
importManager.registerInnerClass("ObjectInitializer");
importManager.registerInnerClass("IFeatureInitializer");
final String javaExprContainer = "Java";
importManager.registerInnerClass(javaExprContainer);

    stringBuffer.append(TEXT_5);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getElementTypesClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getElementTypesClassName());
    stringBuffer.append(TEXT_8);
    String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_10);
    
GenClass diagramElement = genDiagram.getDomainDiagramElement();
if (diagramElement != null) {
	String semanticPackageInterfaceName = importManager.getImportedName(diagramElement.getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_11);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(diagramElement.getClassifierAccessorName());
    stringBuffer.append(TEXT_14);
    
}
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	String id = null;
	ModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = ((GenLink) next).getModelFacet();
	}
	if (modelFacet instanceof TypeModelFacet) {
		GenClass metaClass = ((TypeModelFacet) modelFacet).getMetaClass();
		String semanticPackageInterfaceName = importManager.getImportedName(metaClass.getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_15);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(metaClass.getClassifierAccessorName());
    stringBuffer.append(TEXT_18);
    
	} else if (modelFacet instanceof FeatureLinkModelFacet) {
		GenFeature metaFeature = ((FeatureLinkModelFacet) modelFacet).getMetaFeature();
		String semanticPackageInterfaceName = importManager.getImportedName(metaFeature.getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_19);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_22);
    
	}
}

    stringBuffer.append(TEXT_23);
    
int elementInitializerCount = 0;
List elements = new LinkedList();
if (genDiagram.getElementType() != null) {
	elements.add(genDiagram);
}
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	GenCommonBase genElement;
	TypeModelFacet typeModelFacet = null;
	if (next instanceof GenNode) {
		genElement = (GenCommonBase) next;
		typeModelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink) {
		genElement = (GenCommonBase) next;
		ModelFacet modelFacet = ((GenLink) next).getModelFacet();
		if (modelFacet instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
		}
	} else {
		continue;
	}
	if (typeModelFacet != null && typeModelFacet.getModelElementInitializer() != null) {
		elementInitializerCount++;
	}
	if (genElement.getElementType() != null) {
		elements.add(genElement);
	}
}
for (Iterator it = elements.iterator(); it.hasNext(); ) {
	GenCommonBase genElement = (GenCommonBase) it.next();

    stringBuffer.append(TEXT_24);
    stringBuffer.append(genElement.getUniqueIdentifier());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(genElement.getElementType().getUniqueIdentifier());
    stringBuffer.append(TEXT_26);
    }
    stringBuffer.append(TEXT_27);
    
for (Iterator it = elements.iterator(); it.hasNext(); ) {
	GenCommonBase genElement = (GenCommonBase) it.next();

    stringBuffer.append(TEXT_28);
    stringBuffer.append(genElement.getUniqueIdentifier());
    stringBuffer.append(TEXT_29);
    }
    stringBuffer.append(TEXT_30);
    
if(elementInitializerCount > 0 && genDiagram.getEditorGen().getExpressionProviders() != null) {
	final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
	final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet<GenFeatureValueSpec>();
	final String __javaOperationContainer = javaExprContainer; // place java expression methods here
	final Map __exprEnvVariables = Collections.EMPTY_MAP;

    stringBuffer.append(TEXT_31);
    
for (Map.Entry<TypeModelFacet, GenCommonBase> next : genDiagram.getTypeModelFacet2GenBaseMap().entrySet()) {
	TypeModelFacet modelFacet = next.getKey();
	if (modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {
		GenFeatureSeqInitializer rootFtSeqInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();				
		javaInitializers.addAll(rootFtSeqInitializer.getJavaExpressionFeatureInitializers(expressionProviders));
		String id = next.getValue().getUniqueIdentifier();
		for(GenFeatureSeqInitializer nextFtSeqInitializer : rootFtSeqInitializer.getAllFeatureSeqInitializers()) {
			boolean isTopLevelObjInit = nextFtSeqInitializer == rootFtSeqInitializer;

    stringBuffer.append(TEXT_32);
    			if(isTopLevelObjInit){
    stringBuffer.append(TEXT_33);
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(nextFtSeqInitializer.getElementClassAccessor(importManager));
    stringBuffer.append(TEXT_35);
    			} else {
    stringBuffer.append(TEXT_36);
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(nextFtSeqInitializer.getElementClassAccessor(importManager));
    stringBuffer.append(TEXT_38);
    			} 
    stringBuffer.append(TEXT_39);
    			for(GenFeatureInitializer nextFtInitializer : (List<GenFeatureInitializer>)nextFtSeqInitializer.getInitializers()) {
				String metaFeatureAccessor = nextFtSeqInitializer.getFeatureAccessor(nextFtInitializer, importManager);
				if(nextFtInitializer instanceof GenReferenceNewElementSpec) {
					GenReferenceNewElementSpec newElementSpec = (GenReferenceNewElementSpec)nextFtInitializer;

    stringBuffer.append(TEXT_40);
    stringBuffer.append(metaFeatureAccessor);
    stringBuffer.append(TEXT_41);
    					for(GenFeatureSeqInitializer newElemInit : (List<GenFeatureSeqInitializer>)newElementSpec.getNewElementInitializers()) { 
    stringBuffer.append(TEXT_42);
    stringBuffer.append(newElemInit.getInitializerFieldName(id));
    stringBuffer.append(TEXT_43);
    					} // end of newElementInitializers 
    stringBuffer.append(TEXT_44);
    				} // end of GenReferenceNewElementSpec
				else if(nextFtInitializer instanceof GenFeatureValueSpec) {
					String __outEnvVarName = ""; // no env to setup;
					GenClassifier __genExprContext = nextFtSeqInitializer.getElementClass();
					GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)nextFtInitializer;

    stringBuffer.append(TEXT_45);
    stringBuffer.append(metaFeatureAccessor);
    stringBuffer.append(TEXT_46);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_47);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_48);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_49);
    stringBuffer.append(__bodyLiteral);
    stringBuffer.append(TEXT_50);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_52);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(__bodyLiteral);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_56);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_57);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_62);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_67);
    		} 
    stringBuffer.append(TEXT_68);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_69);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_70);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_71);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_72);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_73);
    
				} // end of GenFeatureValueSpec
			} // end of GenFeatureInitializer iteration

    stringBuffer.append(TEXT_74);
    			if(!isTopLevelObjInit) { 
    stringBuffer.append(TEXT_75);
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_76);
    			} // GenFeatureInitializer iteration
		} // All GenFeatureSeqInitializer iteration

    stringBuffer.append(TEXT_77);
    stringBuffer.append(rootFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_78);
    
	} // (modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer)
}

    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_87);
    
	if(!javaInitializers.isEmpty()) {

    stringBuffer.append(TEXT_88);
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_89);
    
		for(GenFeatureValueSpec __genValueExpression : javaInitializers) {
			GenClassifier __genExprContext = __genValueExpression.getFeatureSeqInitializer().getElementClass();
			GenExpressionProviderBase provider = expressionProviders.getProvider(__genValueExpression);
			if(!(provider instanceof GenJavaExpressionProvider)) continue;
			String __genExprResultType = provider.getQualifiedInstanceClassName(__genValueExpression.getFeature());

    stringBuffer.append(TEXT_90);
    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_94);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_97);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_99);
    
} /* end of GenJavaExpressionProvider */

    
		}

    stringBuffer.append(TEXT_100);
    stringBuffer.append(javaExprContainer);
    	} /* end of javaInitializers */ 
    stringBuffer.append(TEXT_101);
    }
    stringBuffer.append(TEXT_102);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_103);
    return stringBuffer.toString();
  }
}
@


1.62
log
@Fixing compilation problem after re-generation->merge (http://dev.eclipse.org/newslists/news.eclipse.modeling.gmf/msg01735.html)
@
text
@@


1.61
log
@#161380 simplify feature model facets
@
text
@d101 4
a104 4
  protected final String TEXT_82 = "();" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tObjectInitializer(EClass element) {" + NL + "\t\t\t\tthis.element = element;" + NL + "\t\t\t\tinit();" + NL + "\t\t\t}" + NL + "\t\t\t/**" + NL + "\t\t \t * @@generated" + NL + "\t\t \t */" + NL + "\t\t \tprotected abstract void init();\t\t\t\t\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprotected final FeatureInitializer add(FeatureInitializer initializer) {" + NL + "\t\t\t\tfeatureInitializers.add(initializer);" + NL + "\t\t\t\treturn initializer;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_83 = " instance) {" + NL + "\t\t\t\tfor (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = (FeatureInitializer)it.next();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_84 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface FeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic FeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new FeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_85 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic FeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, ";
d106 1
a106 1
  protected final String TEXT_87 = " expression = valueExpression;" + NL + "\t\t\treturn new FeatureInitializer() {\t\t\t\t" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\texpression.assignTo(feature, contextInstance);" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t}\t\t";
d146 1
a146 1
importManager.registerInnerClass("FeatureInitializer");
@


1.60
log
@[161027] mgolubev - Increase extensibility of OCL-related generated code in the ExpressionFactory and ElementTypes.Initializers
@
text
@d198 2
a199 2
	} else if (modelFacet instanceof FeatureModelFacet) {
		GenFeature metaFeature = ((FeatureModelFacet) modelFacet).getMetaFeature();
@


1.59
log
@#159256 Adapt ElementTypes.javajet with FeatureSeqInitializer complex structure support
@
text
@d52 1
a52 1
  protected final String TEXT_33 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
d98 25
a122 24
  protected final String TEXT_79 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static abstract class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tfinal EClass element;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_80 = " featureInitializers = new ";
  protected final String TEXT_81 = "();" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tObjectInitializer(EClass element) {" + NL + "\t\t\t\tthis.element = element;" + NL + "\t\t\t\tinit();" + NL + "\t\t\t}" + NL + "\t\t\t/**" + NL + "\t\t \t * @@generated" + NL + "\t\t \t */" + NL + "\t\t \tprotected abstract void init();\t\t\t\t\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprotected final FeatureInitializer add(FeatureInitializer initializer) {" + NL + "\t\t\t\tfeatureInitializers.add(initializer);" + NL + "\t\t\t\treturn initializer;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_82 = " instance) {" + NL + "\t\t\t\tfor (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = (FeatureInitializer)it.next();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_83 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface FeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic FeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new FeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_84 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic FeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, ";
  protected final String TEXT_85 = " valueExpression) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ";
  protected final String TEXT_86 = " expression = valueExpression;" + NL + "\t\t\treturn new FeatureInitializer() {\t\t\t\t" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\texpression.assignTo(feature, contextInstance);" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t}\t\t";
  protected final String TEXT_87 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_88 = " {";
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_91 = " ";
  protected final String TEXT_92 = "(";
  protected final String TEXT_93 = " self";
  protected final String TEXT_94 = ", ";
  protected final String TEXT_95 = " ";
  protected final String TEXT_96 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_97 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_98 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_99 = NL + "\t\t} //";
  protected final String TEXT_100 = NL + "\t} // end of Initializers";
  protected final String TEXT_101 = NL + "}";
  protected final String TEXT_102 = NL;
d144 1
d435 2
d438 1
a438 1
    stringBuffer.append(TEXT_80);
d440 1
a440 1
    stringBuffer.append(TEXT_81);
d442 1
a442 1
    stringBuffer.append(TEXT_82);
d444 1
a444 1
    stringBuffer.append(TEXT_83);
a445 2
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d449 2
d454 1
a454 1
    stringBuffer.append(TEXT_87);
d456 1
a456 1
    stringBuffer.append(TEXT_88);
d464 1
a464 1
    stringBuffer.append(TEXT_89);
d485 1
a485 1
    stringBuffer.append(TEXT_90);
d487 1
a487 1
    stringBuffer.append(TEXT_91);
d489 1
a489 1
    stringBuffer.append(TEXT_92);
d491 1
a491 1
    stringBuffer.append(TEXT_93);
d499 1
a499 1
    stringBuffer.append(TEXT_94);
d501 1
a501 1
    stringBuffer.append(TEXT_95);
d505 1
a505 1
    stringBuffer.append(TEXT_96);
d507 1
a507 1
    stringBuffer.append(TEXT_97);
d509 1
a509 1
    stringBuffer.append(TEXT_98);
d516 1
a516 1
    stringBuffer.append(TEXT_99);
d519 1
a519 1
    stringBuffer.append(TEXT_100);
d521 1
a521 1
    stringBuffer.append(TEXT_101);
d523 1
a523 1
    stringBuffer.append(TEXT_102);
@


1.58
log
@Execute feature initializers after the container EClass of the New Element is assigned to the containing feature
@
text
@d51 2
a52 2
  protected final String TEXT_32 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */";
  protected final String TEXT_33 = NL + "\t\tpublic static final ObjectInitializer ";
d263 1
a263 1
	final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet();
@


1.57
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
- updating ElementTypes template
@
text
@d102 2
a103 2
  protected final String TEXT_83 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface FeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic FeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new FeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_84 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic FeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, ";
@


1.56
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d51 71
a121 56
  protected final String TEXT_32 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_33 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_34 = NL + "\t\t\tnew FeatureInitializer(" + NL + "\t\t\t\t";
  protected final String TEXT_35 = "null";
  protected final String TEXT_36 = ".";
  protected final String TEXT_37 = "(";
  protected final String TEXT_38 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_39 = ", ";
  protected final String TEXT_40 = ")";
  protected final String TEXT_41 = ".";
  protected final String TEXT_42 = "(";
  protected final String TEXT_43 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_44 = ")";
  protected final String TEXT_45 = "new ";
  protected final String TEXT_46 = "(";
  protected final String TEXT_47 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_48 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_49 = " self = (";
  protected final String TEXT_50 = ")context;";
  protected final String TEXT_51 = "\t" + NL + "\t\t";
  protected final String TEXT_52 = " ";
  protected final String TEXT_53 = " = (";
  protected final String TEXT_54 = ")env.get(\"";
  protected final String TEXT_55 = "\"); //$NON-NLS-1$";
  protected final String TEXT_56 = NL + "\t\treturn ";
  protected final String TEXT_57 = ".";
  protected final String TEXT_58 = "(self";
  protected final String TEXT_59 = ", ";
  protected final String TEXT_60 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_61 = NL + "," + NL + "\t\t\t\t";
  protected final String TEXT_62 = ")";
  protected final String TEXT_63 = NL + "\t\t});";
  protected final String TEXT_64 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_65 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_67 = " sFeature;" + NL + "" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " expression;\t\t" + NL + "" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_69 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_70 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expression = expression;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_71 = " contextInstance) {" + NL + "\t\t\t\texpression.assignTo(sFeature, contextInstance);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_72 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_73 = " {";
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_76 = " ";
  protected final String TEXT_77 = "(";
  protected final String TEXT_78 = " self";
  protected final String TEXT_79 = ", ";
  protected final String TEXT_80 = " ";
  protected final String TEXT_81 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_82 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_83 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_84 = NL + "\t\t} //";
  protected final String TEXT_85 = NL + "\t} // end of Initializers";
  protected final String TEXT_86 = NL + "}";
  protected final String TEXT_87 = NL;
d260 7
a266 1
    if(elementInitializerCount > 0) {
d269 8
a276 19
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final Map javaInitializers = new HashMap();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __outEnvVarName = ""; // no env to setup;
final String __javaOperationContainer = javaExprContainer; // place java expression methods here
for (Iterator it = genDiagram.eAllContents(); it.hasNext(); ) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet != null && modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {				
		GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();		
		if(expressionProviders == null) continue;		
d279 1
a279 1
    stringBuffer.append(id);
d281 31
a311 5
    
		GenClassifier __genExprContext = ftInitializer.getTypeModelFacet().getMetaClass();
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) {		 
			GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)featInitIt.next();
			String metaFeatureAccess = importManager.getImportedName(__genValueExpression.getFeatureQualifiedPackageInterfaceName())+".eINSTANCE.get"+__genValueExpression.getFeature().getFeatureAccessorName()+"()"; 
d313 3
a315 1
    stringBuffer.append(TEXT_34);
d331 1
a331 1
    stringBuffer.append(TEXT_35);
d341 1
a341 1
    stringBuffer.append(TEXT_36);
d343 1
a343 1
    stringBuffer.append(TEXT_37);
d345 1
a345 1
    stringBuffer.append(TEXT_38);
d347 1
a347 1
    stringBuffer.append(TEXT_39);
d349 1
a349 1
    stringBuffer.append(TEXT_40);
d354 1
a354 1
    stringBuffer.append(TEXT_41);
d356 1
a356 1
    stringBuffer.append(TEXT_42);
d358 1
a358 1
    stringBuffer.append(TEXT_43);
d360 1
a360 1
    stringBuffer.append(TEXT_44);
d368 1
a368 1
    stringBuffer.append(TEXT_45);
d370 1
a370 1
    stringBuffer.append(TEXT_46);
d372 1
a372 1
    stringBuffer.append(TEXT_47);
d374 1
a374 1
    stringBuffer.append(TEXT_48);
d376 1
a376 1
    stringBuffer.append(TEXT_49);
d378 1
a378 1
    stringBuffer.append(TEXT_50);
d385 1
a385 1
    stringBuffer.append(TEXT_51);
d387 1
a387 1
    stringBuffer.append(TEXT_52);
d389 1
a389 1
    stringBuffer.append(TEXT_53);
d391 1
a391 1
    stringBuffer.append(TEXT_54);
d393 1
a393 1
    stringBuffer.append(TEXT_55);
d395 1
a395 1
    stringBuffer.append(TEXT_56);
d399 1
a399 1
    stringBuffer.append(TEXT_57);
d403 1
a403 1
    stringBuffer.append(TEXT_58);
d406 1
a406 1
    stringBuffer.append(TEXT_59);
d409 1
a409 1
    stringBuffer.append(TEXT_60);
d412 1
a412 4
    stringBuffer.append(TEXT_61);
    stringBuffer.append(metaFeatureAccess);
    stringBuffer.append(TEXT_62);
    stringBuffer.append(featInitIt.hasNext() ? "," : "");
d414 10
a423 4
			if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider && !expressionProviders.isCopy(__genValueExpression)) {
				javaInitializers.put(__genValueExpression, __genExprContext);
			}
		} // end of GenFeatureValueSpec iteration
d425 3
a427 1
    stringBuffer.append(TEXT_63);
d429 2
a430 2
	} // end of GenFeatureSeqInitializer 
} // end of getGenEntities iteration
d432 5
a436 1
    stringBuffer.append(TEXT_64);
d438 1
a438 1
    stringBuffer.append(TEXT_65);
d440 3
a442 3
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_67);
d444 1
a444 1
    stringBuffer.append(TEXT_68);
d446 1
a446 5
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_71);
d450 1
a450 1
    stringBuffer.append(TEXT_72);
d452 1
a452 1
    stringBuffer.append(TEXT_73);
d454 2
a455 3
		for(Iterator javaExprIt = javaInitializers.keySet().iterator(); javaExprIt.hasNext();) {
			GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)javaExprIt.next();
			GenClassifier __genExprContext = (GenClassifier)javaInitializers.get(__genValueExpression);
a457 1
			//GenJavaExpressionProvider javaProvider = (GenJavaExpressionProvider)provider;
d460 1
a460 1
    stringBuffer.append(TEXT_74);
d481 1
a481 1
    stringBuffer.append(TEXT_75);
d483 1
a483 1
    stringBuffer.append(TEXT_76);
d485 1
a485 1
    stringBuffer.append(TEXT_77);
d487 1
a487 1
    stringBuffer.append(TEXT_78);
d495 1
a495 1
    stringBuffer.append(TEXT_79);
d497 1
a497 1
    stringBuffer.append(TEXT_80);
d501 1
a501 1
    stringBuffer.append(TEXT_81);
d503 1
a503 1
    stringBuffer.append(TEXT_82);
d505 1
a505 1
    stringBuffer.append(TEXT_83);
d512 1
a512 1
    stringBuffer.append(TEXT_84);
d515 1
a515 1
    stringBuffer.append(TEXT_85);
d517 1
a517 1
    stringBuffer.append(TEXT_86);
d519 1
a519 1
    stringBuffer.append(TEXT_87);
@


1.55
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@d56 2
a57 2
  protected final String TEXT_37 = "(\"";
  protected final String TEXT_38 = "\", //$NON-NLS-1$" + NL + "\t";
d61 2
a62 2
  protected final String TEXT_42 = "(\"";
  protected final String TEXT_43 = "\", //$NON-NLS-1$" + NL + "\t";
d296 1
d306 1
a306 1
    stringBuffer.append(__genValueExpression.getBody());
d319 1
a319 1
    stringBuffer.append(__genValueExpression.getBody());
@


1.54
log
@#145337 Move element initializer's assignment of expressions to features into expression templates
@
text
@d100 7
a106 6
  protected final String TEXT_81 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_82 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_83 = NL + "\t\t} //";
  protected final String TEXT_84 = NL + "\t} // end of Initializers";
  protected final String TEXT_85 = NL + "}";
  protected final String TEXT_86 = NL;
d428 1
d460 2
d463 1
a463 1
    stringBuffer.append(TEXT_82);
d465 1
a465 1
}
d470 1
a470 1
    stringBuffer.append(TEXT_83);
d473 1
a473 1
    stringBuffer.append(TEXT_84);
d475 1
a475 1
    stringBuffer.append(TEXT_85);
d477 1
a477 1
    stringBuffer.append(TEXT_86);
@


1.53
log
@header comment should not be a javadoc comment
@
text
@d90 16
a105 25
  protected final String TEXT_71 = " contextInstance) {" + NL + "\t\t\t\tObject value = expression.evaluate(contextInstance);" + NL + "\t\t\t\tif (sFeature.getEType() instanceof ";
  protected final String TEXT_72 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_73 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_74 = ")value).getInstance();" + NL + "\t\t\t\t} else if(sFeature.isMany() && value instanceof ";
  protected final String TEXT_75 = ") {" + NL + "\t\t\t\t\t";
  protected final String TEXT_76 = " destCollection = (";
  protected final String TEXT_77 = ") contextInstance.eGet(sFeature);" + NL + "\t\t\t\t\tdestCollection.clear();" + NL + "\t\t\t\t\t";
  protected final String TEXT_78 = " valueCollection = (";
  protected final String TEXT_79 = ") value;" + NL + "\t\t\t\t\tfor (";
  protected final String TEXT_80 = " it = valueCollection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\tdestCollection.add(it.next());" + NL + "\t\t\t\t\t}  " + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_81 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_82 = " {";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_85 = " ";
  protected final String TEXT_86 = "(";
  protected final String TEXT_87 = " self";
  protected final String TEXT_88 = ", ";
  protected final String TEXT_89 = " ";
  protected final String TEXT_90 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_91 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_92 = NL + "\t\t} //";
  protected final String TEXT_93 = NL + "\t} // end of Initializers";
  protected final String TEXT_94 = NL + "}";
  protected final String TEXT_95 = NL;
a401 18
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnum"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_80);
d405 1
a405 1
    stringBuffer.append(TEXT_81);
d407 1
a407 1
    stringBuffer.append(TEXT_82);
d417 1
a417 1
    stringBuffer.append(TEXT_83);
d437 1
a437 1
    stringBuffer.append(TEXT_84);
d439 1
a439 1
    stringBuffer.append(TEXT_85);
d441 1
a441 1
    stringBuffer.append(TEXT_86);
d443 1
a443 1
    stringBuffer.append(TEXT_87);
d451 1
a451 1
    stringBuffer.append(TEXT_88);
d453 1
a453 1
    stringBuffer.append(TEXT_89);
d457 1
a457 1
    stringBuffer.append(TEXT_90);
d459 1
a459 1
    stringBuffer.append(TEXT_91);
d466 1
a466 1
    stringBuffer.append(TEXT_92);
d469 1
a469 1
    stringBuffer.append(TEXT_93);
d471 1
a471 1
    stringBuffer.append(TEXT_94);
d473 1
a473 1
    stringBuffer.append(TEXT_95);
@


1.52
log
@fix some nls markers
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.51
log
@remove warns; fix edit helper context resolution
@
text
@d45 1
a45 1
  protected final String TEXT_26 = "\");";
@


1.50
log
@#144305 VisualIDRegistry.javajet should check for java expression duplicates in case of reused NodeMapping
1) provide a cleaner detection of expression copies for use in templates
@
text
@d441 1
a441 1
			GenJavaExpressionProvider javaProvider = (GenJavaExpressionProvider)provider;
@


1.49
log
@#136701 [GMFGen] GenDiagramElementTarget should allow to target more then one element
@
text
@d386 1
a386 1
			if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {
a441 1
			if(!javaProvider.getExpressions().contains(__genValueExpression)) continue;
@


1.48
log
@Correcting copyright processing
@
text
@d440 3
a442 1
			if(provider == null) continue;
@


1.47
log
@avoid generating unused imports in pure pure design projects
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d129 1
a129 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.46
log
@typo? there's no Collections use, but Collection
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + NL + "import java.util.Collection;" + NL + "import java.util.HashSet;" + NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.Map;" + NL + "import java.util.Set;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
d85 3
a87 3
  protected final String TEXT_66 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_67 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " expression;\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
d89 2
a90 2
  protected final String TEXT_70 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expression = expression;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_71 = " contextInstance) {" + NL + "\t\t\t\tObject value = expression.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
d93 22
a114 16
  protected final String TEXT_74 = ")value).getInstance();" + NL + "\t\t\t\t} else if(sFeature.isMany() && value instanceof Collection) {" + NL + "\t\t\t\t\tCollection destCollection = (Collection)contextInstance.eGet(sFeature);" + NL + "\t\t\t\t\tdestCollection.clear();" + NL + "\t\t\t\t\tCollection valueCollection = (Collection)value;" + NL + "\t\t\t\t\tfor(Iterator it = valueCollection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\tdestCollection.add(it.next());" + NL + "\t\t\t\t\t}  " + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t\t" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_75 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_76 = " {";
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_79 = " ";
  protected final String TEXT_80 = "(";
  protected final String TEXT_81 = " self";
  protected final String TEXT_82 = ", ";
  protected final String TEXT_83 = " ";
  protected final String TEXT_84 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_85 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_86 = NL + "\t\t} //";
  protected final String TEXT_87 = NL + "\t} // end of Initializers";
  protected final String TEXT_88 = NL + "}";
  protected final String TEXT_89 = NL;
d417 12
d432 1
a432 1
    stringBuffer.append(TEXT_75);
d434 1
a434 1
    stringBuffer.append(TEXT_76);
d443 1
a443 1
    stringBuffer.append(TEXT_77);
d463 1
a463 1
    stringBuffer.append(TEXT_78);
d465 1
a465 1
    stringBuffer.append(TEXT_79);
d467 1
a467 1
    stringBuffer.append(TEXT_80);
d469 1
a469 1
    stringBuffer.append(TEXT_81);
d477 1
a477 1
    stringBuffer.append(TEXT_82);
d479 1
a479 1
    stringBuffer.append(TEXT_83);
d483 1
a483 1
    stringBuffer.append(TEXT_84);
d485 1
a485 1
    stringBuffer.append(TEXT_85);
d492 1
a492 1
    stringBuffer.append(TEXT_86);
d495 1
a495 1
    stringBuffer.append(TEXT_87);
d497 1
a497 1
    stringBuffer.append(TEXT_88);
d499 1
a499 1
    stringBuffer.append(TEXT_89);
@


1.45
log
@#114175 enable links creation
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + NL + "import java.util.Collections;" + NL + "import java.util.HashSet;" + NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.Map;" + NL + "import java.util.Set;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
@


1.44
log
@#143278 FeatureSequenceInitializer should ensure fault isolation of individual feature value setting
@
text
@d24 19
a42 19
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = "() {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static Map elements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
  protected final String TEXT_8 = NL + "\t\t\tEClass eClass = (EClass) element;" + NL + "\t\t\tif (!eClass.isAbstract()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_9 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (elements == null) {" + NL + "\t\t\telements = new IdentityHashMap();";
  protected final String TEXT_10 = NL + "\t\t\telements.put(";
  protected final String TEXT_11 = ", ";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "());";
  protected final String TEXT_14 = NL + "\t\t\telements.put(";
  protected final String TEXT_15 = ", ";
  protected final String TEXT_16 = ".eINSTANCE.get";
  protected final String TEXT_17 = "());";
  protected final String TEXT_18 = NL + "\t\t\telements.put(";
  protected final String TEXT_19 = ", ";
  protected final String TEXT_20 = ".eINSTANCE.get";
  protected final String TEXT_21 = "());";
  protected final String TEXT_22 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}";
  protected final String TEXT_23 = NL;
d46 63
a108 64
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_29 = " = getElementType(\"";
  protected final String TEXT_30 = "\");";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_32 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_33 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_34 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_35 = NL + "\t\t\tnew FeatureInitializer(" + NL + "\t\t\t\t";
  protected final String TEXT_36 = "null";
  protected final String TEXT_37 = ".";
  protected final String TEXT_38 = "(\"";
  protected final String TEXT_39 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_40 = ", ";
  protected final String TEXT_41 = ")";
  protected final String TEXT_42 = ".";
  protected final String TEXT_43 = "(\"";
  protected final String TEXT_44 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_45 = ")";
  protected final String TEXT_46 = "new ";
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_49 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_50 = " self = (";
  protected final String TEXT_51 = ")context;";
  protected final String TEXT_52 = "\t" + NL + "\t\t";
  protected final String TEXT_53 = " ";
  protected final String TEXT_54 = " = (";
  protected final String TEXT_55 = ")env.get(\"";
  protected final String TEXT_56 = "\"); //$NON-NLS-1$";
  protected final String TEXT_57 = NL + "\t\treturn ";
  protected final String TEXT_58 = ".";
  protected final String TEXT_59 = "(self";
  protected final String TEXT_60 = ", ";
  protected final String TEXT_61 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_62 = NL + "," + NL + "\t\t\t\t";
  protected final String TEXT_63 = ")";
  protected final String TEXT_64 = NL + "\t\t});";
  protected final String TEXT_65 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_66 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_69 = " expression;\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_70 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_71 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expression = expression;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_72 = " contextInstance) {" + NL + "\t\t\t\tObject value = expression.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_73 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_74 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_75 = ")value).getInstance();" + NL + "\t\t\t\t} else if(sFeature.isMany() && value instanceof Collection) {" + NL + "\t\t\t\t\tCollection destCollection = (Collection)contextInstance.eGet(sFeature);" + NL + "\t\t\t\t\tdestCollection.clear();" + NL + "\t\t\t\t\tCollection valueCollection = (Collection)value;" + NL + "\t\t\t\t\tfor(Iterator it = valueCollection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\tdestCollection.add(it.next());" + NL + "\t\t\t\t\t}  " + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t\t" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_76 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_77 = " {";
  protected final String TEXT_78 = NL;
  protected final String TEXT_79 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_80 = " ";
  protected final String TEXT_81 = "(";
  protected final String TEXT_82 = " self";
  protected final String TEXT_83 = ", ";
  protected final String TEXT_84 = " ";
  protected final String TEXT_85 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_86 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_87 = NL + "\t\t} //";
  protected final String TEXT_88 = NL + "\t} // end of Initializers";
  protected final String TEXT_89 = NL + "}";
  protected final String TEXT_90 = NL;
a134 14
importManager.addImport("java.util.IdentityHashMap");
importManager.addImport("java.util.Collection");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.Map");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.ENamedElement");
importManager.addImport("org.eclipse.emf.ecore.EStructuralFeature");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IElementType");
importManager.addImport("org.eclipse.jface.resource.ImageDescriptor");
importManager.addImport("org.eclipse.jface.resource.ImageRegistry");
importManager.addImport("org.eclipse.swt.graphics.Image");
importManager.markImportLocation(stringBuffer);
d136 1
a136 1
    stringBuffer.append(genDiagram.getElementTypesClassName());
d140 2
d143 1
a143 1
    stringBuffer.append(TEXT_8);
d145 1
a145 1
    stringBuffer.append(TEXT_9);
d151 1
a151 1
    stringBuffer.append(TEXT_10);
d153 1
a153 1
    stringBuffer.append(TEXT_11);
d155 1
a155 1
    stringBuffer.append(TEXT_12);
d157 1
a157 1
    stringBuffer.append(TEXT_13);
d175 1
a175 1
    stringBuffer.append(TEXT_14);
d177 1
a177 1
    stringBuffer.append(TEXT_15);
d179 1
a179 1
    stringBuffer.append(TEXT_16);
d181 1
a181 1
    stringBuffer.append(TEXT_17);
d187 1
a187 1
    stringBuffer.append(TEXT_18);
d189 1
a189 1
    stringBuffer.append(TEXT_19);
d191 1
a191 1
    stringBuffer.append(TEXT_20);
d193 1
a193 1
    stringBuffer.append(TEXT_21);
d198 1
a198 1
    stringBuffer.append(TEXT_22);
d201 4
a204 10
GenCommonBase genElement = genDiagram;
    stringBuffer.append(TEXT_23);
    if (genElement.getElementType() != null) {
    stringBuffer.append(TEXT_24);
    stringBuffer.append(genElement.getUniqueIdentifier());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(genElement.getElementType().getUniqueIdentifier());
    stringBuffer.append(TEXT_26);
    }
    
d207 1
d224 6
d231 6
d238 4
a241 1
    if (genElement.getElementType() != null) {
d245 1
a245 1
    stringBuffer.append(genElement.getElementType().getUniqueIdentifier());
d247 1
a247 2
    }
    }
a248 2
    if(elementInitializerCount > 0) {
    stringBuffer.append(TEXT_32);
d270 2
a272 2
    stringBuffer.append(id);
    stringBuffer.append(TEXT_34);
d279 1
a279 1
    stringBuffer.append(TEXT_35);
d295 1
a295 1
    stringBuffer.append(TEXT_36);
d304 2
d307 1
a307 1
    stringBuffer.append(__expressionAccessor);
d309 1
a309 1
    stringBuffer.append(__genValueExpression.getBody());
d311 1
a311 1
    stringBuffer.append(__ctxEClassifierAccess);
a312 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_41);
d317 2
d320 1
a320 1
    stringBuffer.append(__expressionAccessor);
d322 1
a322 1
    stringBuffer.append(__genValueExpression.getBody());
a323 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_45);
d331 2
d334 1
a334 1
    stringBuffer.append(__importedAbstractClass);
d336 1
a336 1
    stringBuffer.append(__ctxEClassifierAccess);
d338 1
a338 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a341 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_51);
d348 2
d351 2
d354 1
a354 1
    stringBuffer.append(TEXT_53);
a355 2
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d357 1
a357 1
    stringBuffer.append(nextVariableName);
a358 2
    		} 
    stringBuffer.append(TEXT_57);
d362 1
a362 1
    stringBuffer.append(TEXT_58);
d366 1
a366 1
    stringBuffer.append(TEXT_59);
d369 1
a369 1
    stringBuffer.append(TEXT_60);
d372 1
a372 1
    stringBuffer.append(TEXT_61);
d375 2
a377 2
    stringBuffer.append(metaFeatureAccess);
    stringBuffer.append(TEXT_63);
d385 1
a385 1
    stringBuffer.append(TEXT_64);
d390 2
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d395 1
a395 1
    stringBuffer.append(pluginClassName);
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnum"));
a410 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
    stringBuffer.append(TEXT_75);
d414 2
a416 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_77);
d425 1
a425 1
    stringBuffer.append(TEXT_78);
d445 2
d448 1
a448 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d450 1
a450 1
    stringBuffer.append(__exprJavaOperName);
a451 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_82);
d459 2
a461 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_84);
d465 2
a467 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_86);
d474 1
a474 1
    stringBuffer.append(TEXT_87);
d477 2
d480 1
a480 1
    }
a481 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_90);
@


1.43
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d85 25
a109 26
  protected final String TEXT_66 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_67 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " expression;\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_69 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_70 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expression = expression;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_71 = " contextInstance) {" + NL + "\t\t\t\tObject value = expression.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_72 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_73 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_74 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_75 = "((";
  protected final String TEXT_76 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_77 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_78 = " {";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_81 = " ";
  protected final String TEXT_82 = "(";
  protected final String TEXT_83 = " self";
  protected final String TEXT_84 = ", ";
  protected final String TEXT_85 = " ";
  protected final String TEXT_86 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_87 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_88 = NL + "\t\t} //";
  protected final String TEXT_89 = NL + "\t} // end of Initializers";
  protected final String TEXT_90 = NL + "}";
  protected final String TEXT_91 = NL;
d137 2
d399 2
a401 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d405 2
d408 1
a408 1
    stringBuffer.append(TEXT_70);
d410 1
a410 1
    stringBuffer.append(TEXT_71);
a411 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
a416 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_76);
d420 2
a422 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_78);
d427 3
a429 1
			GenClassifier __genExprResultType = __genValueExpression.getFeature().getTypeGenClassifier();
d431 1
a431 1
    stringBuffer.append(TEXT_79);
d451 2
d454 1
a454 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d456 1
a456 1
    stringBuffer.append(__exprJavaOperName);
a457 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_83);
d465 2
a467 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_85);
d471 2
a473 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_87);
d480 1
a480 1
    stringBuffer.append(TEXT_88);
d483 2
d486 1
a486 1
    }
a487 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_91);
@


1.42
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d23 88
a110 89
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_8 = "() {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static Map elements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
  protected final String TEXT_9 = NL + "\t\t\tEClass eClass = (EClass) element;" + NL + "\t\t\tif (!eClass.isAbstract()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_10 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (elements == null) {" + NL + "\t\t\telements = new IdentityHashMap();";
  protected final String TEXT_11 = NL + "\t\t\telements.put(";
  protected final String TEXT_12 = ", ";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "());";
  protected final String TEXT_15 = NL + "\t\t\telements.put(";
  protected final String TEXT_16 = ", ";
  protected final String TEXT_17 = ".eINSTANCE.get";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t\t\telements.put(";
  protected final String TEXT_20 = ", ";
  protected final String TEXT_21 = ".eINSTANCE.get";
  protected final String TEXT_22 = "());";
  protected final String TEXT_23 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_26 = " = getElementType(\"";
  protected final String TEXT_27 = "\");";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_30 = " = getElementType(\"";
  protected final String TEXT_31 = "\");";
  protected final String TEXT_32 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_34 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_35 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_36 = NL + "\t\t\tnew FeatureInitializer(" + NL + "\t\t\t\t";
  protected final String TEXT_37 = "null";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = "(\"";
  protected final String TEXT_40 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_41 = ", ";
  protected final String TEXT_42 = ")";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = "(\"";
  protected final String TEXT_45 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_46 = ")";
  protected final String TEXT_47 = "new ";
  protected final String TEXT_48 = "(";
  protected final String TEXT_49 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_50 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_51 = " self = (";
  protected final String TEXT_52 = ")context;";
  protected final String TEXT_53 = "\t" + NL + "\t\t";
  protected final String TEXT_54 = " ";
  protected final String TEXT_55 = " = (";
  protected final String TEXT_56 = ")env.get(\"";
  protected final String TEXT_57 = "\"); //$NON-NLS-1$";
  protected final String TEXT_58 = NL + "\t\treturn ";
  protected final String TEXT_59 = ".";
  protected final String TEXT_60 = "(self";
  protected final String TEXT_61 = ", ";
  protected final String TEXT_62 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_63 = NL + "," + NL + "\t\t\t\t";
  protected final String TEXT_64 = ")";
  protected final String TEXT_65 = NL + "\t\t});";
  protected final String TEXT_66 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_67 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_69 = " expression;\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_70 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_71 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expression = expression;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_72 = " contextInstance) {" + NL + "\t\t\t\tObject value = expression.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_73 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_74 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_75 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_76 = "((";
  protected final String TEXT_77 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_78 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_79 = " {";
  protected final String TEXT_80 = NL;
  protected final String TEXT_81 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_82 = " ";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = " self";
  protected final String TEXT_85 = ", ";
  protected final String TEXT_86 = " ";
  protected final String TEXT_87 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_88 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_89 = NL + "\t\t} //";
  protected final String TEXT_90 = NL + "\t} // end of Initializers";
  protected final String TEXT_91 = NL + "}";
  protected final String TEXT_92 = NL;
d115 4
a118 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d128 1
d130 1
a130 3
    stringBuffer.append(genDiagram.getProvidersPackageName());
    stringBuffer.append(TEXT_5);
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d149 2
d154 1
a154 1
    stringBuffer.append(genDiagram.getElementTypesClassName());
d156 1
a156 1
    String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
a157 2
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_10);
d163 2
d166 1
a166 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d168 1
a168 1
    stringBuffer.append(semanticPackageInterfaceName);
a169 2
    stringBuffer.append(diagramElement.getClassifierAccessorName());
    stringBuffer.append(TEXT_14);
d187 2
d190 1
a190 1
    stringBuffer.append(id);
d192 1
a192 1
    stringBuffer.append(semanticPackageInterfaceName);
a193 2
    stringBuffer.append(metaClass.getClassifierAccessorName());
    stringBuffer.append(TEXT_18);
d199 2
d202 1
a202 1
    stringBuffer.append(id);
d204 1
a204 1
    stringBuffer.append(semanticPackageInterfaceName);
a205 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_22);
d210 1
a210 1
    stringBuffer.append(TEXT_23);
d214 2
d217 1
a217 1
    if (genElement.getElementType() != null) {
d219 1
a219 1
    stringBuffer.append(genElement.getUniqueIdentifier());
a220 2
    stringBuffer.append(genElement.getElementType().getUniqueIdentifier());
    stringBuffer.append(TEXT_27);
d242 2
d245 1
a245 1
    if (genElement.getElementType() != null) {
d247 1
a247 1
    stringBuffer.append(genElement.getUniqueIdentifier());
a248 2
    stringBuffer.append(genElement.getElementType().getUniqueIdentifier());
    stringBuffer.append(TEXT_31);
d251 2
a253 2
    if(elementInitializerCount > 0) {
    stringBuffer.append(TEXT_33);
d275 2
a277 2
    stringBuffer.append(id);
    stringBuffer.append(TEXT_35);
d284 1
a284 1
    stringBuffer.append(TEXT_36);
d300 1
a300 1
    stringBuffer.append(TEXT_37);
d309 2
d312 1
a312 1
    stringBuffer.append(__expressionAccessor);
d314 1
a314 1
    stringBuffer.append(__genValueExpression.getBody());
d316 1
a316 1
    stringBuffer.append(__ctxEClassifierAccess);
a317 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_42);
d322 2
d325 1
a325 1
    stringBuffer.append(__expressionAccessor);
d327 1
a327 1
    stringBuffer.append(__genValueExpression.getBody());
a328 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_46);
d336 2
d339 1
a339 1
    stringBuffer.append(__importedAbstractClass);
d341 1
a341 1
    stringBuffer.append(__ctxEClassifierAccess);
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a346 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_52);
d353 2
d356 2
d359 1
a359 1
    stringBuffer.append(TEXT_54);
a360 2
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d362 1
a362 1
    stringBuffer.append(nextVariableName);
a363 2
    		} 
    stringBuffer.append(TEXT_58);
d367 1
a367 1
    stringBuffer.append(TEXT_59);
d371 1
a371 1
    stringBuffer.append(TEXT_60);
d374 1
a374 1
    stringBuffer.append(TEXT_61);
d377 1
a377 1
    stringBuffer.append(TEXT_62);
d380 2
a382 2
    stringBuffer.append(metaFeatureAccess);
    stringBuffer.append(TEXT_64);
d390 1
a390 1
    stringBuffer.append(TEXT_65);
d395 2
d398 1
a398 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d400 1
a400 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d404 1
a404 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d408 1
a408 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d410 1
a410 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnum"));
d414 1
a414 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d416 1
a416 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
a417 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_77);
d421 2
a423 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_79);
d430 1
a430 1
    stringBuffer.append(TEXT_80);
d450 2
d453 1
a453 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d455 1
a455 1
    stringBuffer.append(__exprJavaOperName);
a456 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_84);
d464 2
a466 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_86);
d470 2
a472 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_88);
d479 1
a479 1
    stringBuffer.append(TEXT_89);
d482 2
d485 1
a485 1
    }
a486 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_92);
@


1.41
log
@Removing unused ElementInitializer field contextClass
@
text
@d331 1
a331 1
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
d350 1
a350 1
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
d439 1
a439 1
	String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
a444 2
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) 
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
d446 1
a446 1
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d460 1
a460 1
		String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
@


1.40
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@d87 25
a111 26
  protected final String TEXT_68 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_69 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_70 = " expression;\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_71 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_72 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expression = expression;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_73 = " contextInstance) {" + NL + "\t\t\t\tObject value = expression.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_74 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_75 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_76 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_77 = "((";
  protected final String TEXT_78 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer";
  protected final String TEXT_79 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_80 = " {";
  protected final String TEXT_81 = NL;
  protected final String TEXT_82 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_83 = " ";
  protected final String TEXT_84 = "(";
  protected final String TEXT_85 = " self";
  protected final String TEXT_86 = ", ";
  protected final String TEXT_87 = " ";
  protected final String TEXT_88 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_89 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_90 = NL + "\t\t} //";
  protected final String TEXT_91 = NL + "\t} // end of Initializers";
  protected final String TEXT_92 = NL + "}";
  protected final String TEXT_93 = NL;
d397 1
a397 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d399 1
a399 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d409 1
a409 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnum"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
a416 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_78);
d420 2
a422 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_80);
d429 1
a429 1
    stringBuffer.append(TEXT_81);
d451 2
d454 1
a454 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d456 1
a456 1
    stringBuffer.append(__exprJavaOperName);
a457 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_85);
d465 2
a467 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_87);
d471 2
a473 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_89);
d480 1
a480 1
    stringBuffer.append(TEXT_90);
d483 2
d486 1
a486 1
    }
a487 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_93);
@


1.39
log
@remove stale code
@
text
@d55 58
a112 26
  protected final String TEXT_36 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_37 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_40 = ".eINSTANCE.get";
  protected final String TEXT_41 = "())";
  protected final String TEXT_42 = NL;
  protected final String TEXT_43 = NL + "\t\t});";
  protected final String TEXT_44 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_45 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_46 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_47 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_48 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_49 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_50 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_51 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_52 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_53 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_54 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_55 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_56 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_57 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_58 = "((";
  protected final String TEXT_59 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_60 = NL + "}";
  protected final String TEXT_61 = NL;
d131 6
d255 5
d272 2
a273 1
		GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();
d279 5
a283 2
		for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
			GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();
d285 15
a299 1
    stringBuffer.append(featureValSpec.getBody());
d301 8
a308 1
    stringBuffer.append(importManager.getImportedName(ftInitializer.getElementQualifiedPackageInterfaceName()));
d310 1
a310 1
    stringBuffer.append(ftInitializer.getElementClassAccessorName());
d312 1
a312 1
    stringBuffer.append(importManager.getImportedName(featureValSpec.getFeatureQualifiedPackageInterfaceName()));
d314 1
a314 2
    stringBuffer.append(featureValSpec.getFeature().getFeatureAccessorName()
						);
d316 1
a316 1
    stringBuffer.append(featInitIt.hasNext() ? "," : "");
d319 1
a319 1
		} // end of GenFeatureValueSpec iteration
d321 1
d323 1
a323 4
    
	} // end of GenFeatureSeqInitializer 
} // end of getGenEntities iteration

d325 1
a325 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d329 7
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("java.lang.String"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("java.lang.String"));
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d347 6
a352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory"));
d356 54
d411 1
a411 1
    stringBuffer.append(TEXT_55);
d413 1
a413 1
    stringBuffer.append(TEXT_56);
d415 1
a415 1
    stringBuffer.append(TEXT_57);
d417 1
a417 1
    stringBuffer.append(TEXT_58);
d419 68
a486 1
    stringBuffer.append(TEXT_59);
d488 1
a488 1
    stringBuffer.append(TEXT_60);
d490 1
a490 1
    stringBuffer.append(TEXT_61);
@


1.38
log
@#126200 register element types in xml
@
text
@d43 38
a80 67
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_25 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_26 = "\", null, \"";
  protected final String TEXT_27 = "\",";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = ".eINSTANCE.get";
  protected final String TEXT_30 = "(),";
  protected final String TEXT_31 = NL + "\t\tnull,";
  protected final String TEXT_32 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_34 = " = getElementType(\"";
  protected final String TEXT_35 = "\");";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_37 = " = new HintedMetamodelType(\"";
  protected final String TEXT_38 = "\", \"";
  protected final String TEXT_39 = "\",";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "(),";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = ".VISUAL_ID);";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_47 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_48 = ");";
  protected final String TEXT_49 = NL + "\t}";
  protected final String TEXT_50 = NL + "\t" + NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class HintedMetamodelType extends MetamodelType implements IHintedType {" + NL + "" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String mySemanticHint;" + NL + "" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic HintedMetamodelType(String id, String displayName, EClass eClass, String semanticHint) {" + NL + "\t\t\tsuper(id, null, displayName, eClass, new NullEditHelper());" + NL + "\t\t\tmySemanticHint = semanticHint;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic HintedMetamodelType(String id, String displayName, String semanticHint) {" + NL + "\t\t\tthis(id, displayName, null, semanticHint);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + " \t\tpublic String getSemanticHint() {" + NL + " \t\t\treturn mySemanticHint;" + NL + " \t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_51 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_53 = NL;
  protected final String TEXT_54 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_55 = " = getElementType(\"";
  protected final String TEXT_56 = "\");";
  protected final String TEXT_57 = NL;
  protected final String TEXT_58 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_59 = " = getElementType(\"";
  protected final String TEXT_60 = "\");";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_63 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_64 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_65 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_66 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "())";
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = NL + "\t\t});";
  protected final String TEXT_73 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_74 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_75 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_76 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_77 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_78 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_79 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_80 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_81 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_82 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_83 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_84 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_85 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_86 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_87 = "((";
  protected final String TEXT_88 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_89 = NL + "}";
  protected final String TEXT_90 = NL;
a104 1
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.ICommand");
a106 5
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IMetamodelType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.IHintedType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.MetamodelType");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest");
importManager.addImport("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest");
d116 1
a116 3
    
String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());

d175 1
a175 2
if(false) { // register element types in code

d177 1
a177 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d179 1
a179 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d181 1
a181 1
    stringBuffer.append(genDiagram.getClassNamePrefix());
a182 109
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_30);
    } else {
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
    
List types = new ArrayList(); // element types that should be registered in code
List registeredTypes = new ArrayList(); // element types registered via plugin.xml
// TODO : create diagram specialization type otherwise and register it
if (genDiagram.getDomainDiagramElement() != null) {
	types.add(genDiagram.getUniqueIdentifier());
}
elementInitializerCount = 0;
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	String id;
	TypeModelFacet typeModelFacet = null;
	String semanticEntityInterfaceName = null;
	String semanticPackageInterfaceName = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		types.add(id);
		typeModelFacet = ((GenNode) next).getModelFacet();
		semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
		semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
	} else if (next instanceof GenLink) {
		id = ((GenLink) next).getUniqueIdentifier();
		ModelFacet modelFacet = ((GenLink) next).getModelFacet();
		if (modelFacet == null) {
			registeredTypes.add(id);
		} else {
			types.add(id);
			if (modelFacet instanceof TypeLinkModelFacet) {
				typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
				semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
				semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
			}
		}
	} else {
		continue;
	}
	GenCommonBase nextCommonBase = (GenCommonBase) next;
	
	if (typeModelFacet != null && typeModelFacet.getModelElementInitializer() != null) {
		elementInitializerCount++;
	}
	if (registeredTypes.contains(id)) {

    stringBuffer.append(TEXT_33);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_35);
    	} else {
    stringBuffer.append(TEXT_36);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(nextCommonBase.getClassNamePrefix());
    stringBuffer.append(TEXT_39);
    		if (semanticEntityInterfaceName != null) {
    stringBuffer.append(TEXT_40);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(semanticEntityInterfaceName);
    stringBuffer.append(TEXT_42);
    		}
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(nextCommonBase.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_44);
    
	}
}
if (!registeredTypes.isEmpty()) {

    stringBuffer.append(TEXT_45);
    
}
if (!types.isEmpty()) {

    stringBuffer.append(TEXT_46);
    	for (int i = 0; i < types.size(); i++) {
    stringBuffer.append(TEXT_47);
    stringBuffer.append(types.get(i));
    stringBuffer.append(TEXT_48);
    	}
    stringBuffer.append(TEXT_49);
    }
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_52);
    } else { // register element types in xml

GenCommonBase genElement = genDiagram;
    stringBuffer.append(TEXT_53);
    if (genElement.getElementType() != null) {
    stringBuffer.append(TEXT_54);
    stringBuffer.append(genElement.getUniqueIdentifier());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(genElement.getElementType().getUniqueIdentifier());
    stringBuffer.append(TEXT_56);
d204 1
a204 1
    stringBuffer.append(TEXT_57);
d206 1
a206 1
    stringBuffer.append(TEXT_58);
d208 1
a208 1
    stringBuffer.append(TEXT_59);
d210 1
a210 1
    stringBuffer.append(TEXT_60);
d213 1
a213 2
    stringBuffer.append(TEXT_61);
    }
d215 1
a215 1
    stringBuffer.append(TEXT_62);
d231 1
a231 1
    stringBuffer.append(TEXT_63);
d233 1
a233 1
    stringBuffer.append(TEXT_64);
d237 1
a237 1
    stringBuffer.append(TEXT_65);
d239 1
a239 1
    stringBuffer.append(TEXT_66);
d241 1
a241 1
    stringBuffer.append(TEXT_67);
d243 1
a243 1
    stringBuffer.append(TEXT_68);
d245 1
a245 1
    stringBuffer.append(TEXT_69);
d248 1
a248 1
    stringBuffer.append(TEXT_70);
d250 1
a250 1
    stringBuffer.append(TEXT_71);
d254 1
a254 1
    stringBuffer.append(TEXT_72);
d259 1
a259 1
    stringBuffer.append(TEXT_73);
d261 1
a261 1
    stringBuffer.append(TEXT_74);
d263 1
a263 1
    stringBuffer.append(TEXT_75);
d265 1
a265 1
    stringBuffer.append(TEXT_76);
d267 1
a267 1
    stringBuffer.append(TEXT_77);
d269 1
a269 1
    stringBuffer.append(TEXT_78);
d271 1
a271 1
    stringBuffer.append(TEXT_79);
d273 1
a273 1
    stringBuffer.append(TEXT_80);
d275 1
a275 1
    stringBuffer.append(TEXT_81);
d277 1
a277 1
    stringBuffer.append(TEXT_82);
d279 1
a279 1
    stringBuffer.append(TEXT_83);
d281 1
a281 1
    stringBuffer.append(TEXT_84);
d283 1
a283 1
    stringBuffer.append(TEXT_85);
d285 1
a285 1
    stringBuffer.append(TEXT_86);
d287 1
a287 1
    stringBuffer.append(TEXT_87);
d289 1
a289 1
    stringBuffer.append(TEXT_88);
d291 1
a291 1
    stringBuffer.append(TEXT_89);
d293 1
a293 1
    stringBuffer.append(TEXT_90);
@


1.37
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d69 1
a69 1
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
d72 14
a85 14
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_54 = " = getElementType(\"";
  protected final String TEXT_55 = "\");";
  protected final String TEXT_56 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_57 = " = getElementType(\"";
  protected final String TEXT_58 = "\");";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_61 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_62 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_63 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_64 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_65 = ".eINSTANCE.get";
  protected final String TEXT_66 = "()," + NL + "\t\t\t\t\t\t";
d87 23
a109 21
  protected final String TEXT_68 = "())";
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = NL + "\t\t});";
  protected final String TEXT_71 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_72 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_73 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_74 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_75 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_76 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_77 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_78 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_79 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_80 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_81 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_82 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_83 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_84 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_85 = "((";
  protected final String TEXT_86 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_87 = NL + "\t" + NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class HintedMetamodelType extends MetamodelType implements IHintedType {" + NL + "" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String mySemanticHint;" + NL + "" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic HintedMetamodelType(String id, String displayName, EClass eClass, String semanticHint) {" + NL + "\t\t\tsuper(id, null, displayName, eClass, new NullEditHelper());" + NL + "\t\t\tmySemanticHint = semanticHint;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic HintedMetamodelType(String id, String displayName, String semanticHint) {" + NL + "\t\t\tthis(id, displayName, null, semanticHint);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + " \t\tpublic String getSemanticHint() {" + NL + " \t\t\treturn mySemanticHint;" + NL + " \t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_88 = NL;
d212 1
a212 1
if(true) { // register element types in code
d320 3
a322 1
    } else { // register element types in xml 
d324 1
a324 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d326 1
a326 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d328 3
a333 1
	String id;
d336 1
a336 1
		id = ((GenNode) next).getUniqueIdentifier();
d339 1
a339 1
		id = ((GenLink) next).getUniqueIdentifier();
a350 2
    stringBuffer.append(TEXT_56);
    stringBuffer.append(id);
d352 1
a352 1
    stringBuffer.append(id);
d354 5
d360 1
a360 1
    stringBuffer.append(TEXT_59);
d363 1
a363 1
    stringBuffer.append(TEXT_60);
d379 1
a379 1
    stringBuffer.append(TEXT_61);
d381 1
a381 1
    stringBuffer.append(TEXT_62);
d385 1
a385 1
    stringBuffer.append(TEXT_63);
d387 1
a387 1
    stringBuffer.append(TEXT_64);
d389 1
a389 1
    stringBuffer.append(TEXT_65);
d391 1
a391 1
    stringBuffer.append(TEXT_66);
d393 1
a393 1
    stringBuffer.append(TEXT_67);
d396 1
a396 1
    stringBuffer.append(TEXT_68);
d398 1
a398 1
    stringBuffer.append(TEXT_69);
d402 1
a402 1
    stringBuffer.append(TEXT_70);
d407 1
a407 1
    stringBuffer.append(TEXT_71);
d409 1
a409 1
    stringBuffer.append(TEXT_72);
d411 1
a411 1
    stringBuffer.append(TEXT_73);
d413 1
a413 1
    stringBuffer.append(TEXT_74);
d415 1
a415 1
    stringBuffer.append(TEXT_75);
d417 1
a417 1
    stringBuffer.append(TEXT_76);
d419 1
a419 1
    stringBuffer.append(TEXT_77);
d421 1
a421 1
    stringBuffer.append(TEXT_78);
d423 1
a423 1
    stringBuffer.append(TEXT_79);
d425 1
a425 1
    stringBuffer.append(TEXT_80);
d427 1
a427 1
    stringBuffer.append(TEXT_81);
d429 1
a429 1
    stringBuffer.append(TEXT_82);
d431 1
a431 1
    stringBuffer.append(TEXT_83);
d433 1
a433 1
    stringBuffer.append(TEXT_84);
d435 1
a435 1
    stringBuffer.append(TEXT_85);
d437 1
a437 1
    stringBuffer.append(TEXT_86);
d439 1
a439 1
    stringBuffer.append(TEXT_87);
d441 1
a441 1
    stringBuffer.append(TEXT_88);
@


1.36
log
@using M6 to generate code.
@
text
@d25 83
a107 84
  protected final String TEXT_6 = NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_9 = "() {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static Map elements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
  protected final String TEXT_10 = NL + "\t\t\tEClass eClass = (EClass) element;" + NL + "\t\t\tif (!eClass.isAbstract()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_11 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (elements == null) {" + NL + "\t\t\telements = new IdentityHashMap();";
  protected final String TEXT_12 = NL + "\t\t\telements.put(";
  protected final String TEXT_13 = ", ";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\t\telements.put(";
  protected final String TEXT_17 = ", ";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t\t\telements.put(";
  protected final String TEXT_21 = ", ";
  protected final String TEXT_22 = ".eINSTANCE.get";
  protected final String TEXT_23 = "());";
  protected final String TEXT_24 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_26 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_27 = "\", null, \"";
  protected final String TEXT_28 = "\",";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = ".eINSTANCE.get";
  protected final String TEXT_31 = "(),";
  protected final String TEXT_32 = NL + "\t\tnull,";
  protected final String TEXT_33 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_34 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_35 = " = getElementType(\"";
  protected final String TEXT_36 = "\");";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_38 = " = new MetamodelType(\"";
  protected final String TEXT_39 = "\", null, \"";
  protected final String TEXT_40 = "\",";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "(),";
  protected final String TEXT_44 = NL + "\t\tnull,";
  protected final String TEXT_45 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_48 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_49 = ");";
  protected final String TEXT_50 = NL + "\t}";
  protected final String TEXT_51 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_52 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_53 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_54 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_55 = " = getElementType(\"";
  protected final String TEXT_56 = "\");";
  protected final String TEXT_57 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_58 = " = getElementType(\"";
  protected final String TEXT_59 = "\");";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_62 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_63 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_64 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_65 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_66 = ".eINSTANCE.get";
  protected final String TEXT_67 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "())";
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = NL + "\t\t});";
  protected final String TEXT_72 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_73 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_74 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_75 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_76 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_77 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_78 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_79 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_80 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_81 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_82 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_83 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_84 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_85 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_86 = "((";
  protected final String TEXT_87 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_88 = NL + "}";
  protected final String TEXT_89 = NL;
d126 18
d145 1
a145 1
    importManager.markImportLocation(stringBuffer);
a148 2
    stringBuffer.append(genDiagram.getElementTypesClassName());
    stringBuffer.append(TEXT_9);
d152 2
a154 2
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_11);
d160 2
d163 1
a163 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d165 1
a165 1
    stringBuffer.append(semanticPackageInterfaceName);
a166 2
    stringBuffer.append(diagramElement.getClassifierAccessorName());
    stringBuffer.append(TEXT_15);
d184 2
d187 1
a187 1
    stringBuffer.append(id);
d189 1
a189 1
    stringBuffer.append(semanticPackageInterfaceName);
a190 2
    stringBuffer.append(metaClass.getClassifierAccessorName());
    stringBuffer.append(TEXT_19);
d196 2
d199 1
a199 1
    stringBuffer.append(id);
d201 1
a201 1
    stringBuffer.append(semanticPackageInterfaceName);
a202 2
    stringBuffer.append(metaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_23);
d207 1
a207 1
    stringBuffer.append(TEXT_24);
d212 2
d217 1
a217 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d219 1
a219 1
    stringBuffer.append(genDiagram.getClassNamePrefix());
d221 1
a221 1
    if (genDiagram.getDomainDiagramElement() != null) {
d223 1
a223 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedPackageInterfaceName()));
d225 1
a225 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d227 1
a227 1
    } else {
a228 2
    }
    stringBuffer.append(TEXT_33);
d265 2
d272 2
d277 2
a279 2
    stringBuffer.append(TEXT_36);
    	} else {
d283 1
a283 1
    stringBuffer.append(id);
d285 1
a285 1
    stringBuffer.append(((GenCommonBase) next).getClassNamePrefix());
d287 1
a287 1
    		if (semanticEntityInterfaceName != null) {
d289 1
a289 1
    stringBuffer.append(semanticPackageInterfaceName);
d291 1
a291 1
    stringBuffer.append(semanticEntityInterfaceName);
d293 1
a293 1
    		} else { 
a294 2
    		}
    stringBuffer.append(TEXT_45);
d300 1
a300 1
    stringBuffer.append(TEXT_46);
d305 2
d308 1
a308 1
    	for (int i = 0; i < types.size(); i++) {
d310 1
a310 1
    stringBuffer.append(types.get(i));
d312 1
a312 1
    	}
d314 1
a314 1
    }
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper"));
d318 1
a318 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d320 1
a320 1
    } else { // register element types in xml 
a323 2
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_56);
d345 2
d350 1
a350 1
    stringBuffer.append(id);
d353 1
a354 3
    }
    if(elementInitializerCount > 0) {
    stringBuffer.append(TEXT_61);
d370 2
a372 2
    stringBuffer.append(id);
    stringBuffer.append(TEXT_63);
d376 2
d379 1
a379 1
    stringBuffer.append(featureValSpec.getBody());
d381 1
a381 1
    stringBuffer.append(importManager.getImportedName(ftInitializer.getElementQualifiedPackageInterfaceName()));
d383 1
a383 1
    stringBuffer.append(ftInitializer.getElementClassAccessorName());
a384 2
    stringBuffer.append(importManager.getImportedName(featureValSpec.getFeatureQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_68);
d387 2
a389 2
    stringBuffer.append(featInitIt.hasNext() ? "," : "");
    stringBuffer.append(TEXT_70);
d393 1
a393 1
    stringBuffer.append(TEXT_71);
d398 2
d401 1
a401 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d405 1
a405 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d407 2
a409 2
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d411 1
a411 1
    stringBuffer.append(importManager.getImportedName("java.lang.String"));
d413 1
a413 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnum"));
d425 1
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d431 1
a431 1
    }
a432 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_89);
@


1.35
log
@restore generators
@
text
@d112 1
a112 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.34
log
@#134095 do not store compiled templates in cvs
@
text
@d43 66
a108 58
  protected final String TEXT_24 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_25 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_26 = "\", null, \"";
  protected final String TEXT_27 = "\",";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = ".eINSTANCE.get";
  protected final String TEXT_30 = "(),";
  protected final String TEXT_31 = NL + "\t\tnull,";
  protected final String TEXT_32 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_34 = " = getElementType(\"";
  protected final String TEXT_35 = "\");";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_37 = " = new MetamodelType(\"";
  protected final String TEXT_38 = "\", null, \"";
  protected final String TEXT_39 = "\",";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "(),";
  protected final String TEXT_43 = NL + "\t\tnull,";
  protected final String TEXT_44 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_47 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_48 = ");";
  protected final String TEXT_49 = NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_51 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_54 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_55 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_56 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_57 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "())";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = NL + "\t\t});";
  protected final String TEXT_64 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_65 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_66 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_67 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_69 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_70 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_71 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_72 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_73 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_74 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_75 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_76 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_77 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_78 = "((";
  protected final String TEXT_79 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_80 = NL + "}";
  protected final String TEXT_81 = NL;
d112 1
a112 1
    final StringBuffer stringBuffer = new StringBuffer();
d193 4
a196 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d200 2
d203 1
a203 1
    stringBuffer.append(TEXT_27);
d205 1
a205 1
    stringBuffer.append(TEXT_28);
d207 1
a207 1
    stringBuffer.append(TEXT_29);
d209 1
a209 1
    stringBuffer.append(TEXT_30);
d211 1
a211 1
    stringBuffer.append(TEXT_31);
d213 1
a213 1
    stringBuffer.append(TEXT_32);
d221 1
a221 1
int elementInitializerCount = 0;
a254 2
    stringBuffer.append(TEXT_33);
    stringBuffer.append(id);
d258 2
a260 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(id);
d264 2
d267 1
a267 1
    stringBuffer.append(TEXT_39);
d269 1
a269 1
    stringBuffer.append(TEXT_40);
d271 1
a271 1
    stringBuffer.append(TEXT_41);
d273 1
a273 1
    stringBuffer.append(TEXT_42);
d275 1
a275 1
    stringBuffer.append(TEXT_43);
d277 1
a277 1
    stringBuffer.append(TEXT_44);
d283 1
a283 1
    stringBuffer.append(TEXT_45);
d288 1
a288 1
    stringBuffer.append(TEXT_46);
d290 1
a290 1
    stringBuffer.append(TEXT_47);
d292 1
a292 1
    stringBuffer.append(TEXT_48);
d294 1
a294 1
    stringBuffer.append(TEXT_49);
d296 1
a296 1
    stringBuffer.append(TEXT_50);
d298 1
a298 1
    stringBuffer.append(TEXT_51);
d300 36
a335 1
    stringBuffer.append(TEXT_52);
d337 1
a337 1
    stringBuffer.append(TEXT_53);
d353 1
a353 1
    stringBuffer.append(TEXT_54);
d355 1
a355 1
    stringBuffer.append(TEXT_55);
d359 1
a359 1
    stringBuffer.append(TEXT_56);
d361 1
a361 1
    stringBuffer.append(TEXT_57);
d363 1
a363 1
    stringBuffer.append(TEXT_58);
d365 1
a365 1
    stringBuffer.append(TEXT_59);
d367 1
a367 1
    stringBuffer.append(TEXT_60);
d370 1
a370 1
    stringBuffer.append(TEXT_61);
d372 1
a372 1
    stringBuffer.append(TEXT_62);
d376 1
a376 1
    stringBuffer.append(TEXT_63);
d381 1
a381 1
    stringBuffer.append(TEXT_64);
d383 1
a383 1
    stringBuffer.append(TEXT_65);
d385 1
a385 1
    stringBuffer.append(TEXT_66);
d387 1
a387 1
    stringBuffer.append(TEXT_67);
d389 1
a389 1
    stringBuffer.append(TEXT_68);
d391 1
a391 1
    stringBuffer.append(TEXT_69);
d393 1
a393 1
    stringBuffer.append(TEXT_70);
d395 1
a395 1
    stringBuffer.append(TEXT_71);
d397 1
a397 1
    stringBuffer.append(TEXT_72);
d399 1
a399 1
    stringBuffer.append(TEXT_73);
d401 1
a401 1
    stringBuffer.append(TEXT_74);
d403 1
a403 1
    stringBuffer.append(TEXT_75);
d405 1
a405 1
    stringBuffer.append(TEXT_76);
d407 1
a407 1
    stringBuffer.append(TEXT_77);
d409 1
a409 1
    stringBuffer.append(TEXT_78);
d411 1
a411 1
    stringBuffer.append(TEXT_79);
d413 1
a413 1
    stringBuffer.append(TEXT_80);
d415 1
a415 1
    stringBuffer.append(TEXT_81);
@


1.33
log
@Switching to eclipse M6.
@
text
@@


1.32
log
@Rollback of the latest changes to make running unit-tests + all the rest of the generated diagrams containing several diagram elements with the same EClass.

Original changes was made for fixing #126200.
@
text
@d104 1
a104 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.31
log
@#126200 register element types in xml
@
text
@d25 1
a25 1
  protected final String TEXT_6 = NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
d43 58
a100 36
  protected final String TEXT_24 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_25 = " = getElementType(\"";
  protected final String TEXT_26 = "\");";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_28 = " = getElementType(\"";
  protected final String TEXT_29 = "\");";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_32 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_33 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_34 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_35 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "())";
  protected final String TEXT_40 = NL;
  protected final String TEXT_41 = NL + "\t\t});";
  protected final String TEXT_42 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_43 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_44 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_45 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_46 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_47 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_48 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_49 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_50 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_51 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_52 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_53 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_54 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_55 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_56 = "((";
  protected final String TEXT_57 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_58 = NL + "}";
  protected final String TEXT_59 = NL;
d189 12
d202 6
d213 2
d217 1
d219 2
d224 9
a232 2
		if (modelFacet instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
d240 1
d242 7
a248 1
    stringBuffer.append(TEXT_27);
d250 1
a250 1
    stringBuffer.append(TEXT_28);
d252 30
a281 1
    stringBuffer.append(TEXT_29);
d283 5
a287 1
    stringBuffer.append(TEXT_30);
d289 1
a289 1
    stringBuffer.append(TEXT_31);
d305 1
a305 1
    stringBuffer.append(TEXT_32);
d307 1
a307 1
    stringBuffer.append(TEXT_33);
d311 1
a311 1
    stringBuffer.append(TEXT_34);
d313 1
a313 1
    stringBuffer.append(TEXT_35);
d315 1
a315 1
    stringBuffer.append(TEXT_36);
d317 1
a317 1
    stringBuffer.append(TEXT_37);
d319 1
a319 1
    stringBuffer.append(TEXT_38);
d322 1
a322 1
    stringBuffer.append(TEXT_39);
d324 1
a324 1
    stringBuffer.append(TEXT_40);
d328 1
a328 1
    stringBuffer.append(TEXT_41);
d333 1
a333 1
    stringBuffer.append(TEXT_42);
d335 1
a335 1
    stringBuffer.append(TEXT_43);
d337 1
a337 1
    stringBuffer.append(TEXT_44);
d339 1
a339 1
    stringBuffer.append(TEXT_45);
d341 1
a341 1
    stringBuffer.append(TEXT_46);
d343 1
a343 1
    stringBuffer.append(TEXT_47);
d345 1
a345 1
    stringBuffer.append(TEXT_48);
d347 1
a347 1
    stringBuffer.append(TEXT_49);
d349 1
a349 1
    stringBuffer.append(TEXT_50);
d351 1
a351 1
    stringBuffer.append(TEXT_51);
d353 1
a353 1
    stringBuffer.append(TEXT_52);
d355 1
a355 1
    stringBuffer.append(TEXT_53);
d357 1
a357 1
    stringBuffer.append(TEXT_54);
d359 1
a359 1
    stringBuffer.append(TEXT_55);
d361 1
a361 1
    stringBuffer.append(TEXT_56);
d363 1
a363 1
    stringBuffer.append(TEXT_57);
d365 1
a365 1
    stringBuffer.append(TEXT_58);
d367 1
a367 1
    stringBuffer.append(TEXT_59);
@


1.30
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d25 1
a25 1
  protected final String TEXT_6 = NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
d43 36
a78 58
  protected final String TEXT_24 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_25 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_26 = "\", null, \"";
  protected final String TEXT_27 = "\",";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = ".eINSTANCE.get";
  protected final String TEXT_30 = "(),";
  protected final String TEXT_31 = NL + "\t\tnull,";
  protected final String TEXT_32 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_34 = " = getElementType(\"";
  protected final String TEXT_35 = "\");";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_37 = " = new MetamodelType(\"";
  protected final String TEXT_38 = "\", null, \"";
  protected final String TEXT_39 = "\",";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "(),";
  protected final String TEXT_43 = NL + "\t\tnull,";
  protected final String TEXT_44 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_47 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_48 = ");";
  protected final String TEXT_49 = NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_51 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_54 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_55 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_56 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_57 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = ".eINSTANCE.get";
  protected final String TEXT_61 = "())";
  protected final String TEXT_62 = NL;
  protected final String TEXT_63 = NL + "\t\t});";
  protected final String TEXT_64 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_65 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_66 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_67 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_69 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_70 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_71 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_72 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_73 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_74 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_75 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_76 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_77 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_78 = "((";
  protected final String TEXT_79 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_80 = NL + "}";
  protected final String TEXT_81 = NL;
a166 12
    stringBuffer.append(genDiagram.getClassNamePrefix());
    stringBuffer.append(TEXT_27);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_30);
    } else {
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
a167 6
List types = new ArrayList(); // element types that should be registered in code
List registeredTypes = new ArrayList(); // element types registered via plugin.xml
// TODO : create diagram specialization type otherwise and register it
if (genDiagram.getDomainDiagramElement() != null) {
	types.add(genDiagram.getUniqueIdentifier());
}
a172 2
	String semanticEntityInterfaceName = null;
	String semanticPackageInterfaceName = null;
a174 1
		types.add(id);
a175 2
		semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
		semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
d179 2
a180 9
		if (modelFacet == null) {
			registeredTypes.add(id);
		} else {
			types.add(id);
			if (modelFacet instanceof TypeLinkModelFacet) {
				typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
				semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
				semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
			}
a187 1
	if (registeredTypes.contains(id)) {
d189 1
a189 1
    stringBuffer.append(TEXT_33);
d191 1
a191 1
    stringBuffer.append(TEXT_34);
d193 1
a193 36
    stringBuffer.append(TEXT_35);
    	} else {
    stringBuffer.append(TEXT_36);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(((GenCommonBase) next).getClassNamePrefix());
    stringBuffer.append(TEXT_39);
    		if (semanticEntityInterfaceName != null) {
    stringBuffer.append(TEXT_40);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(semanticEntityInterfaceName);
    stringBuffer.append(TEXT_42);
    		} else { 
    stringBuffer.append(TEXT_43);
    		}
    stringBuffer.append(TEXT_44);
    
	}
}
if (!registeredTypes.isEmpty()) {

    stringBuffer.append(TEXT_45);
    
}
if (!types.isEmpty()) {

    stringBuffer.append(TEXT_46);
    	for (int i = 0; i < types.size(); i++) {
    stringBuffer.append(TEXT_47);
    stringBuffer.append(types.get(i));
    stringBuffer.append(TEXT_48);
    	}
    stringBuffer.append(TEXT_49);
d195 1
a195 5
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_52);
d197 1
a197 1
    stringBuffer.append(TEXT_53);
d213 1
a213 1
    stringBuffer.append(TEXT_54);
d215 1
a215 1
    stringBuffer.append(TEXT_55);
d219 1
a219 1
    stringBuffer.append(TEXT_56);
d221 1
a221 1
    stringBuffer.append(TEXT_57);
d223 1
a223 1
    stringBuffer.append(TEXT_58);
d225 1
a225 1
    stringBuffer.append(TEXT_59);
d227 1
a227 1
    stringBuffer.append(TEXT_60);
d230 1
a230 1
    stringBuffer.append(TEXT_61);
d232 1
a232 1
    stringBuffer.append(TEXT_62);
d236 1
a236 1
    stringBuffer.append(TEXT_63);
d241 1
a241 1
    stringBuffer.append(TEXT_64);
d243 1
a243 1
    stringBuffer.append(TEXT_65);
d245 1
a245 1
    stringBuffer.append(TEXT_66);
d247 1
a247 1
    stringBuffer.append(TEXT_67);
d249 1
a249 1
    stringBuffer.append(TEXT_68);
d251 1
a251 1
    stringBuffer.append(TEXT_69);
d253 1
a253 1
    stringBuffer.append(TEXT_70);
d255 1
a255 1
    stringBuffer.append(TEXT_71);
d257 1
a257 1
    stringBuffer.append(TEXT_72);
d259 1
a259 1
    stringBuffer.append(TEXT_73);
d261 1
a261 1
    stringBuffer.append(TEXT_74);
d263 1
a263 1
    stringBuffer.append(TEXT_75);
d265 1
a265 1
    stringBuffer.append(TEXT_76);
d267 1
a267 1
    stringBuffer.append(TEXT_77);
d269 1
a269 1
    stringBuffer.append(TEXT_78);
d271 1
a271 1
    stringBuffer.append(TEXT_79);
d273 1
a273 1
    stringBuffer.append(TEXT_80);
d275 1
a275 1
    stringBuffer.append(TEXT_81);
@


1.29
log
@#114175 for links
@
text
@d20 81
a100 78
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import java.util.IdentityHashMap;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = "() {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static Map elements;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
  protected final String TEXT_7 = NL + "\t\t\tEClass eClass = (EClass) element;" + NL + "\t\t\tif (!eClass.isAbstract()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_8 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (elements == null) {" + NL + "\t\t\telements = new IdentityHashMap();";
  protected final String TEXT_9 = NL + "\t\t\telements.put(";
  protected final String TEXT_10 = ", ";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "());";
  protected final String TEXT_13 = NL + "\t\t\telements.put(";
  protected final String TEXT_14 = ", ";
  protected final String TEXT_15 = ".eINSTANCE.get";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\t\telements.put(";
  protected final String TEXT_18 = ", ";
  protected final String TEXT_19 = ".eINSTANCE.get";
  protected final String TEXT_20 = "());";
  protected final String TEXT_21 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_22 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_23 = "\", null, \"";
  protected final String TEXT_24 = "\",";
  protected final String TEXT_25 = NL + "\t\t";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "(),";
  protected final String TEXT_28 = NL + "\t\tnull,";
  protected final String TEXT_29 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IElementType ";
  protected final String TEXT_31 = " = getElementType(\"";
  protected final String TEXT_32 = "\");";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_34 = " = new MetamodelType(\"";
  protected final String TEXT_35 = "\", null, \"";
  protected final String TEXT_36 = "\",";
  protected final String TEXT_37 = NL + "\t\t";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "(),";
  protected final String TEXT_40 = NL + "\t\tnull,";
  protected final String TEXT_41 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static IElementType getElementType(String id) {" + NL + "\t\treturn ElementTypeRegistry.getInstance().getType(id);" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_44 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_45 = ");";
  protected final String TEXT_46 = NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_48 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_49 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_50 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_51 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_52 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_53 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_54 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "())";
  protected final String TEXT_59 = NL;
  protected final String TEXT_60 = NL + "\t\t});";
  protected final String TEXT_61 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_62 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_63 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_64 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_65 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_66 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_67 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_68 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_69 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_70 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_71 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_72 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_73 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_74 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_75 = "((";
  protected final String TEXT_76 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_77 = NL + "}";
  protected final String TEXT_78 = NL;
d107 9
d117 1
a117 1
    stringBuffer.append(TEXT_2);
d119 1
a119 1
    stringBuffer.append(TEXT_3);
d121 1
a121 1
    stringBuffer.append(TEXT_4);
d123 1
a123 1
    stringBuffer.append(TEXT_5);
d125 1
a125 1
    stringBuffer.append(TEXT_6);
d129 1
a129 1
    stringBuffer.append(TEXT_7);
d131 1
a131 1
    stringBuffer.append(TEXT_8);
d137 1
a137 1
    stringBuffer.append(TEXT_9);
d139 1
a139 1
    stringBuffer.append(TEXT_10);
d141 1
a141 1
    stringBuffer.append(TEXT_11);
d143 1
a143 1
    stringBuffer.append(TEXT_12);
d161 1
a161 1
    stringBuffer.append(TEXT_13);
d163 1
a163 1
    stringBuffer.append(TEXT_14);
d165 1
a165 1
    stringBuffer.append(TEXT_15);
d167 1
a167 1
    stringBuffer.append(TEXT_16);
d173 1
a173 1
    stringBuffer.append(TEXT_17);
d175 1
a175 1
    stringBuffer.append(TEXT_18);
d177 1
a177 1
    stringBuffer.append(TEXT_19);
d179 1
a179 1
    stringBuffer.append(TEXT_20);
d184 1
a184 1
    stringBuffer.append(TEXT_21);
d186 1
a186 1
    stringBuffer.append(TEXT_22);
d188 1
a188 1
    stringBuffer.append(TEXT_23);
d190 1
a190 1
    stringBuffer.append(TEXT_24);
d192 1
a192 1
    stringBuffer.append(TEXT_25);
d194 1
a194 1
    stringBuffer.append(TEXT_26);
d196 1
a196 1
    stringBuffer.append(TEXT_27);
d198 1
a198 1
    stringBuffer.append(TEXT_28);
d200 1
a200 1
    stringBuffer.append(TEXT_29);
d242 1
a242 1
    stringBuffer.append(TEXT_30);
d244 1
a244 1
    stringBuffer.append(TEXT_31);
d246 1
a246 1
    stringBuffer.append(TEXT_32);
d248 1
a248 1
    stringBuffer.append(TEXT_33);
d250 1
a250 1
    stringBuffer.append(TEXT_34);
d252 1
a252 1
    stringBuffer.append(TEXT_35);
d254 1
a254 1
    stringBuffer.append(TEXT_36);
d256 1
a256 1
    stringBuffer.append(TEXT_37);
d258 1
a258 1
    stringBuffer.append(TEXT_38);
d260 1
a260 1
    stringBuffer.append(TEXT_39);
d262 1
a262 1
    stringBuffer.append(TEXT_40);
d264 1
a264 1
    stringBuffer.append(TEXT_41);
d270 1
a270 1
    stringBuffer.append(TEXT_42);
d275 1
a275 1
    stringBuffer.append(TEXT_43);
d277 1
a277 1
    stringBuffer.append(TEXT_44);
d279 1
a279 1
    stringBuffer.append(TEXT_45);
d281 1
a281 1
    stringBuffer.append(TEXT_46);
d283 1
a283 1
    stringBuffer.append(TEXT_47);
d285 1
a285 1
    stringBuffer.append(TEXT_48);
d287 1
a287 1
    stringBuffer.append(TEXT_49);
d289 1
a289 1
    stringBuffer.append(TEXT_50);
d305 1
a305 1
    stringBuffer.append(TEXT_51);
d307 1
a307 1
    stringBuffer.append(TEXT_52);
d311 1
a311 1
    stringBuffer.append(TEXT_53);
d313 1
a313 1
    stringBuffer.append(TEXT_54);
d315 1
a315 1
    stringBuffer.append(TEXT_55);
d317 1
a317 1
    stringBuffer.append(TEXT_56);
d319 1
a319 1
    stringBuffer.append(TEXT_57);
d322 1
a322 1
    stringBuffer.append(TEXT_58);
d324 1
a324 1
    stringBuffer.append(TEXT_59);
d328 1
a328 1
    stringBuffer.append(TEXT_60);
d333 1
a333 1
    stringBuffer.append(TEXT_61);
d335 1
a335 1
    stringBuffer.append(TEXT_62);
d337 1
a337 1
    stringBuffer.append(TEXT_63);
d339 1
a339 1
    stringBuffer.append(TEXT_64);
d341 1
a341 1
    stringBuffer.append(TEXT_65);
d343 1
a343 1
    stringBuffer.append(TEXT_66);
d345 1
a345 1
    stringBuffer.append(TEXT_67);
d347 1
a347 1
    stringBuffer.append(TEXT_68);
d349 1
a349 1
    stringBuffer.append(TEXT_69);
d351 1
a351 1
    stringBuffer.append(TEXT_70);
d353 1
a353 1
    stringBuffer.append(TEXT_71);
d355 1
a355 1
    stringBuffer.append(TEXT_72);
d357 1
a357 1
    stringBuffer.append(TEXT_73);
d359 1
a359 1
    stringBuffer.append(TEXT_74);
d361 1
a361 1
    stringBuffer.append(TEXT_75);
d363 1
a363 1
    stringBuffer.append(TEXT_76);
d365 1
a365 1
    stringBuffer.append(TEXT_77);
d367 1
a367 1
    stringBuffer.append(TEXT_78);
@


1.28
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d49 49
a97 44
  protected final String TEXT_30 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_31 = " = new MetamodelType(\"";
  protected final String TEXT_32 = "\", null, \"";
  protected final String TEXT_33 = "\",";
  protected final String TEXT_34 = NL + "\t\t";
  protected final String TEXT_35 = ".eINSTANCE.get";
  protected final String TEXT_36 = "(),";
  protected final String TEXT_37 = NL + "\t\tnull,";
  protected final String TEXT_38 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_40 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_41 = ");";
  protected final String TEXT_42 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_43 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_44 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_46 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_47 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_48 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_49 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_52 = ".eINSTANCE.get";
  protected final String TEXT_53 = "())";
  protected final String TEXT_54 = NL;
  protected final String TEXT_55 = NL + "\t\t});";
  protected final String TEXT_56 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_57 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_58 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_59 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_60 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_61 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_62 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_63 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_64 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_65 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_66 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_67 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_68 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_69 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_70 = "((";
  protected final String TEXT_71 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_72 = NL + "}";
  protected final String TEXT_73 = NL;
d190 2
a191 1
List types = new ArrayList();
d205 1
d211 10
a220 4
		if (((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
			semanticEntityInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
			semanticPackageInterfaceName = importManager.getImportedName(typeModelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());
a224 1
	types.add(id);
d228 1
d235 1
a235 1
    stringBuffer.append(((GenCommonBase) next).getClassNamePrefix());
d237 1
a237 1
    	if (semanticEntityInterfaceName != null) {
d239 1
a239 1
    stringBuffer.append(semanticPackageInterfaceName);
d241 1
a241 1
    stringBuffer.append(semanticEntityInterfaceName);
d243 1
a243 1
    	} else { 
d245 1
a245 1
    	}
d247 1
a247 1
    }
d249 1
a249 1
    for (int i = 0; i < types.size(); i++) {
d251 15
d267 3
a269 1
    stringBuffer.append(TEXT_41);
d271 1
a271 1
    stringBuffer.append(TEXT_42);
d273 1
a273 1
    stringBuffer.append(TEXT_43);
d275 1
a275 1
    stringBuffer.append(TEXT_44);
d277 1
a277 1
    stringBuffer.append(TEXT_45);
d293 1
a293 1
    stringBuffer.append(TEXT_46);
d295 1
a295 1
    stringBuffer.append(TEXT_47);
d299 1
a299 1
    stringBuffer.append(TEXT_48);
d301 1
a301 1
    stringBuffer.append(TEXT_49);
d303 1
a303 1
    stringBuffer.append(TEXT_50);
d305 1
a305 1
    stringBuffer.append(TEXT_51);
d307 1
a307 1
    stringBuffer.append(TEXT_52);
d310 1
a310 1
    stringBuffer.append(TEXT_53);
d312 1
a312 1
    stringBuffer.append(TEXT_54);
d316 1
a316 1
    stringBuffer.append(TEXT_55);
d321 1
a321 1
    stringBuffer.append(TEXT_56);
d323 1
a323 1
    stringBuffer.append(TEXT_57);
d325 1
a325 1
    stringBuffer.append(TEXT_58);
d327 1
a327 1
    stringBuffer.append(TEXT_59);
d329 1
a329 1
    stringBuffer.append(TEXT_60);
d331 1
a331 1
    stringBuffer.append(TEXT_61);
d333 1
a333 1
    stringBuffer.append(TEXT_62);
d335 1
a335 1
    stringBuffer.append(TEXT_63);
d337 1
a337 1
    stringBuffer.append(TEXT_64);
d339 1
a339 1
    stringBuffer.append(TEXT_65);
d341 1
a341 1
    stringBuffer.append(TEXT_66);
d343 1
a343 1
    stringBuffer.append(TEXT_67);
d345 1
a345 1
    stringBuffer.append(TEXT_68);
d347 1
a347 1
    stringBuffer.append(TEXT_69);
d349 1
a349 1
    stringBuffer.append(TEXT_70);
d351 1
a351 1
    stringBuffer.append(TEXT_71);
d353 1
a353 1
    stringBuffer.append(TEXT_72);
d355 1
a355 1
    stringBuffer.append(TEXT_73);
@


1.27
log
@#116412 Use map in ElementTypes class to get ENamedElement for the element type
@
text
@d27 66
a92 62
  protected final String TEXT_8 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (elements == null) {" + NL + "\t\t\telements = new IdentityHashMap();" + NL + "\t\t\telements.put(";
  protected final String TEXT_9 = ", ";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "());";
  protected final String TEXT_12 = NL + "\t\t\telements.put(";
  protected final String TEXT_13 = ", ";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\t\telements.put(";
  protected final String TEXT_17 = ", ";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t\t}" + NL + "\t\treturn (ENamedElement) elements.get(type);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_21 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_22 = "\", null, \"";
  protected final String TEXT_23 = "\"," + NL + "\t\t";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "()," + NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_27 = " = new MetamodelType(\"";
  protected final String TEXT_28 = "\", null, \"";
  protected final String TEXT_29 = "\",";
  protected final String TEXT_30 = NL + "\t\t";
  protected final String TEXT_31 = ".eINSTANCE.get";
  protected final String TEXT_32 = "(),";
  protected final String TEXT_33 = NL + "\t\tnull,";
  protected final String TEXT_34 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_36 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_37 = ");";
  protected final String TEXT_38 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_39 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_40 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_42 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_43 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_44 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_45 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_46 = ".eINSTANCE.get";
  protected final String TEXT_47 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_48 = ".eINSTANCE.get";
  protected final String TEXT_49 = "())";
  protected final String TEXT_50 = NL;
  protected final String TEXT_51 = NL + "\t\t});";
  protected final String TEXT_52 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_53 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_54 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_55 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_56 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_57 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_58 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_59 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_60 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_61 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_62 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_63 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_64 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_65 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_66 = "((";
  protected final String TEXT_67 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_68 = NL + "}";
  protected final String TEXT_69 = NL;
d115 6
a121 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d123 1
a123 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d125 2
d128 1
d144 1
a144 1
    stringBuffer.append(TEXT_12);
d146 1
a146 1
    stringBuffer.append(TEXT_13);
d148 1
a148 1
    stringBuffer.append(TEXT_14);
d150 1
a150 1
    stringBuffer.append(TEXT_15);
d156 1
a156 1
    stringBuffer.append(TEXT_16);
d158 1
a158 1
    stringBuffer.append(TEXT_17);
d160 1
a160 1
    stringBuffer.append(TEXT_18);
d162 1
a162 1
    stringBuffer.append(TEXT_19);
a166 2
    stringBuffer.append(TEXT_20);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d170 2
d173 3
a175 1
    stringBuffer.append(TEXT_23);
d177 1
a177 1
    stringBuffer.append(TEXT_24);
d179 5
a183 1
    stringBuffer.append(TEXT_25);
d186 4
a189 1
types.add(genDiagram.getUniqueIdentifier());
d217 1
a217 1
    stringBuffer.append(TEXT_26);
d219 1
a219 1
    stringBuffer.append(TEXT_27);
d221 1
a221 1
    stringBuffer.append(TEXT_28);
d223 1
a223 1
    stringBuffer.append(TEXT_29);
d225 1
a225 1
    stringBuffer.append(TEXT_30);
d227 1
a227 1
    stringBuffer.append(TEXT_31);
d229 1
a229 1
    stringBuffer.append(TEXT_32);
d231 1
a231 1
    stringBuffer.append(TEXT_33);
d233 1
a233 1
    stringBuffer.append(TEXT_34);
d235 1
a235 1
    stringBuffer.append(TEXT_35);
d237 1
a237 1
    stringBuffer.append(TEXT_36);
d239 1
a239 1
    stringBuffer.append(TEXT_37);
d241 1
a241 1
    stringBuffer.append(TEXT_38);
d243 1
a243 1
    stringBuffer.append(TEXT_39);
d245 1
a245 1
    stringBuffer.append(TEXT_40);
d247 1
a247 1
    stringBuffer.append(TEXT_41);
d263 1
a263 1
    stringBuffer.append(TEXT_42);
d265 1
a265 1
    stringBuffer.append(TEXT_43);
d269 1
a269 1
    stringBuffer.append(TEXT_44);
d271 1
a271 1
    stringBuffer.append(TEXT_45);
d273 1
a273 1
    stringBuffer.append(TEXT_46);
d275 1
a275 1
    stringBuffer.append(TEXT_47);
d277 1
a277 1
    stringBuffer.append(TEXT_48);
d280 1
a280 1
    stringBuffer.append(TEXT_49);
d282 1
a282 1
    stringBuffer.append(TEXT_50);
d286 1
a286 1
    stringBuffer.append(TEXT_51);
d291 1
a291 1
    stringBuffer.append(TEXT_52);
d293 1
a293 1
    stringBuffer.append(TEXT_53);
d295 1
a295 1
    stringBuffer.append(TEXT_54);
d297 1
a297 1
    stringBuffer.append(TEXT_55);
d299 1
a299 1
    stringBuffer.append(TEXT_56);
d301 1
a301 1
    stringBuffer.append(TEXT_57);
d303 1
a303 1
    stringBuffer.append(TEXT_58);
d305 1
a305 1
    stringBuffer.append(TEXT_59);
d307 1
a307 1
    stringBuffer.append(TEXT_60);
d309 1
a309 1
    stringBuffer.append(TEXT_61);
d311 1
a311 1
    stringBuffer.append(TEXT_62);
d313 1
a313 1
    stringBuffer.append(TEXT_63);
d315 1
a315 1
    stringBuffer.append(TEXT_64);
d317 1
a317 1
    stringBuffer.append(TEXT_65);
d319 1
a319 1
    stringBuffer.append(TEXT_66);
d321 1
a321 1
    stringBuffer.append(TEXT_67);
d323 1
a323 1
    stringBuffer.append(TEXT_68);
d325 1
a325 1
    stringBuffer.append(TEXT_69);
@


1.26
log
@Correcting java.lang.IllegalArgumentException on passing abstract class as a parameter.
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
d25 1
a25 1
  protected final String TEXT_6 = "() {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
d27 2
a28 2
  protected final String TEXT_8 = ".getInstance().getItemImageDescriptor(eClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (";
  protected final String TEXT_9 = " == type) {" + NL + "\t\t\treturn ";
d30 3
a32 3
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t\t} else if (";
  protected final String TEXT_13 = " == type) {" + NL + "\t\t\treturn ";
d34 3
a36 3
  protected final String TEXT_15 = "();";
  protected final String TEXT_16 = NL + "\t\t} else if (";
  protected final String TEXT_17 = " == type) {" + NL + "\t\t\treturn ";
d38 2
a39 2
  protected final String TEXT_19 = "();";
  protected final String TEXT_20 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
@


1.25
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d26 2
a27 2
  protected final String TEXT_7 = NL + "\t\t\tEClass eClass = (EClass) element;" + NL + "\t\t\treturn ";
  protected final String TEXT_8 = ".getInstance().getItemImageDescriptor(" + NL + "\t\t\t\teClass.getEPackage().getEFactoryInstance().create(eClass));" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (";
@


1.24
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d93 1
a93 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.23
log
@ImportManager moved to oeg.common
@
text
@d26 41
a66 41
  protected final String TEXT_7 = NL + "\t\t\treturn ";
  protected final String TEXT_8 = ".getInstance().getItemImageDescriptor(" + NL + "\t\t\t\t";
  protected final String TEXT_9 = ".eINSTANCE.create((EClass) element));" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (";
  protected final String TEXT_11 = " == type) {" + NL + "\t\t\treturn ";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL + "\t\t} else if (";
  protected final String TEXT_15 = " == type) {" + NL + "\t\t\treturn ";
  protected final String TEXT_16 = ".eINSTANCE.get";
  protected final String TEXT_17 = "();";
  protected final String TEXT_18 = NL + "\t\t} else if (";
  protected final String TEXT_19 = " == type) {" + NL + "\t\t\treturn ";
  protected final String TEXT_20 = ".eINSTANCE.get";
  protected final String TEXT_21 = "();";
  protected final String TEXT_22 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_23 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_24 = "\", null, \"";
  protected final String TEXT_25 = "\"," + NL + "\t\t";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "()," + NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_29 = " = new MetamodelType(\"";
  protected final String TEXT_30 = "\", null, \"";
  protected final String TEXT_31 = "\",";
  protected final String TEXT_32 = NL + "\t\t";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "(),";
  protected final String TEXT_35 = NL + "\t\tnull,";
  protected final String TEXT_36 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_38 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_39 = ");";
  protected final String TEXT_40 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_41 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\t";
  protected final String TEXT_42 = ".getInstance().logError(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_44 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_45 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_46 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_47 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
d68 21
a88 23
  protected final String TEXT_49 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "())";
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = NL + "\t\t});";
  protected final String TEXT_54 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_55 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_56 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_57 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_58 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_59 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_60 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_61 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_62 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_63 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_64 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_65 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_66 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_67 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_68 = "((";
  protected final String TEXT_69 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_70 = NL + "}";
  protected final String TEXT_71 = NL;
d106 1
a106 2
String pluginClassName = importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName());
String semanticFactoryClassName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedFactoryInterfaceName());
d111 1
a111 1
    stringBuffer.append(semanticFactoryClassName);
d113 1
a113 4
    
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());

d115 1
a115 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
a116 4
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_13);
d131 1
d133 1
a133 1
    stringBuffer.append(TEXT_14);
d135 1
a135 1
    stringBuffer.append(TEXT_15);
d137 1
a137 1
    stringBuffer.append(TEXT_16);
d139 1
a139 1
    stringBuffer.append(TEXT_17);
d143 1
d145 1
a145 1
    stringBuffer.append(TEXT_18);
d147 1
a147 1
    stringBuffer.append(TEXT_19);
d149 1
a149 1
    stringBuffer.append(TEXT_20);
d151 1
a151 1
    stringBuffer.append(TEXT_21);
d156 4
d161 1
a161 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d163 1
a163 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d165 1
a165 1
    stringBuffer.append(genDiagram.getClassNamePrefix());
a166 4
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_27);
d176 1
d181 1
d187 1
d197 4
d202 1
a202 1
    stringBuffer.append(id);
d204 1
a204 1
    stringBuffer.append(id);
d206 1
a206 1
    stringBuffer.append(((GenCommonBase) next).getClassNamePrefix());
d208 1
a208 1
    	if (semanticEntityInterfaceName != null) {
d210 1
a210 1
    stringBuffer.append(semanticPackageInterfaceName);
d212 1
a212 1
    stringBuffer.append(semanticEntityInterfaceName);
d214 1
a214 1
    	} else { 
d216 1
a216 1
    	}
d218 2
a220 2
    stringBuffer.append(TEXT_37);
    for (int i = 0; i < types.size(); i++) {
d222 1
a222 1
    stringBuffer.append(types.get(i));
d224 1
a224 1
    }
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper"));
a227 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_42);
    if(elementInitializerCount > 0) {
    stringBuffer.append(TEXT_43);
d243 1
a243 1
    stringBuffer.append(TEXT_44);
d245 1
a245 1
    stringBuffer.append(TEXT_45);
d249 1
a249 1
    stringBuffer.append(TEXT_46);
d251 1
a251 1
    stringBuffer.append(TEXT_47);
d253 1
a253 1
    stringBuffer.append(TEXT_48);
d255 1
a255 1
    stringBuffer.append(TEXT_49);
d257 1
a257 1
    stringBuffer.append(TEXT_50);
d260 1
a260 1
    stringBuffer.append(TEXT_51);
d262 1
a262 1
    stringBuffer.append(TEXT_52);
d266 1
a266 1
    stringBuffer.append(TEXT_53);
d271 4
d276 1
a276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d280 1
a280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d286 1
a286 1
    stringBuffer.append(importManager.getImportedName("java.lang.String"));
d288 1
a288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d290 1
a290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d294 1
a294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory"));
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnum"));
d298 1
a298 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicEList"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a305 4
    }
    stringBuffer.append(TEXT_70);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_71);
@


1.22
log
@#125893
Logging methods
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.21
log
@[rdvorak] #115521  Correct initialization code when Enumeration literal is used as an init value
@
text
@d60 31
a90 30
  protected final String TEXT_41 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\tSystem.err.println(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_42 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_43 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_44 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_45 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_46 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_47 = ".eINSTANCE.get";
  protected final String TEXT_48 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_49 = ".eINSTANCE.get";
  protected final String TEXT_50 = "())";
  protected final String TEXT_51 = NL;
  protected final String TEXT_52 = NL + "\t\t});";
  protected final String TEXT_53 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_54 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_55 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_56 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_57 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_58 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_59 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_60 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_61 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_62 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_63 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tif(sFeature.getEType() instanceof ";
  protected final String TEXT_64 = " && " + NL + "\t\t\t\t\tvalue instanceof ";
  protected final String TEXT_65 = ") {" + NL + "\t\t\t\t\tvalue = ((";
  protected final String TEXT_66 = ")value).getInstance();" + NL + "\t\t\t\t} else if(value != null && sFeature.isMany()) {" + NL + "\t\t\t\t\tvalue = new ";
  protected final String TEXT_67 = "((";
  protected final String TEXT_68 = ")value);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_69 = NL + "}";
  protected final String TEXT_70 = NL;
d229 2
d232 1
a232 1
    stringBuffer.append(TEXT_42);
d248 1
a248 1
    stringBuffer.append(TEXT_43);
d250 1
a250 1
    stringBuffer.append(TEXT_44);
d254 1
a254 1
    stringBuffer.append(TEXT_45);
d256 1
a256 1
    stringBuffer.append(TEXT_46);
d258 1
a258 1
    stringBuffer.append(TEXT_47);
d260 1
a260 1
    stringBuffer.append(TEXT_48);
d262 1
a262 1
    stringBuffer.append(TEXT_49);
d265 1
a265 1
    stringBuffer.append(TEXT_50);
d267 1
a267 1
    stringBuffer.append(TEXT_51);
d271 1
a271 1
    stringBuffer.append(TEXT_52);
d276 1
a276 1
    stringBuffer.append(TEXT_53);
d278 1
a278 1
    stringBuffer.append(TEXT_54);
d280 1
a280 1
    stringBuffer.append(TEXT_55);
d282 1
a282 1
    stringBuffer.append(TEXT_56);
d284 1
a284 1
    stringBuffer.append(TEXT_57);
d286 1
a286 1
    stringBuffer.append(TEXT_58);
d288 1
a288 1
    stringBuffer.append(TEXT_59);
d290 1
a290 1
    stringBuffer.append(TEXT_60);
d292 1
a292 1
    stringBuffer.append(TEXT_61);
d294 1
a294 1
    stringBuffer.append(TEXT_62);
d296 1
a296 1
    stringBuffer.append(TEXT_63);
a297 2
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EEnumLiteral"));
d301 2
d304 1
a304 1
    stringBuffer.append(TEXT_67);
d306 1
a306 1
    stringBuffer.append(TEXT_68);
d308 1
a308 1
    stringBuffer.append(TEXT_69);
d310 1
a310 1
    stringBuffer.append(TEXT_70);
@


1.20
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d82 8
a89 3
  protected final String TEXT_63 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_64 = NL + "}";
  protected final String TEXT_65 = NL;
d294 10
d305 1
a305 1
    stringBuffer.append(TEXT_64);
d307 1
a307 1
    stringBuffer.append(TEXT_65);
@


1.19
log
@REadable names should present in popup bar
@
text
@d102 1
a102 1
String pluginClassName = importManager.getImportedName(genDiagram.getPluginQualifiedClassName());
@


1.18
log
@#116031 avoid hardcoded class names in templates
@
text
@d163 1
a163 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d201 1
a201 1
    stringBuffer.append(id);
@


1.17
log
@remove unused import
@
text
@d23 43
a65 43
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ElementTypes {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry imageRegistry;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageRegistry getImageRegistry() {" + NL + "\t\tif (imageRegistry == null) {" + NL + "\t\t\timageRegistry = new ImageRegistry();" + NL + "\t\t}" + NL + "\t\treturn imageRegistry;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static String getImageRegistryKey(ENamedElement element) {" + NL + "\t\treturn element.getName();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ImageDescriptor getProvidedImageDescriptor(ENamedElement element) {" + NL + "\t\tif (element instanceof EStructuralFeature) {" + NL + "\t\t\telement = ((EStructuralFeature) element).getEContainingClass();" + NL + "\t\t}" + NL + "\t\tif (element instanceof EClass) {";
  protected final String TEXT_5 = NL + "\t\t\treturn ";
  protected final String TEXT_6 = ".getInstance().getItemImageDescriptor(" + NL + "\t\t\t\t";
  protected final String TEXT_7 = ".eINSTANCE.create((EClass) element));" + NL + "\t\t}" + NL + "\t\t// TODO : support structural features" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImageDescriptor imageDescriptor = getImageRegistry().getDescriptor(key);" + NL + "\t\tif (imageDescriptor == null) {" + NL + "\t\t\timageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t}" + NL + "\t\treturn imageDescriptor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(ENamedElement element) {" + NL + "\t\tString key = getImageRegistryKey(element);" + NL + "\t\tImage image = getImageRegistry().get(key);" + NL + "\t\tif (image == null) {" + NL + "\t\t\tImageDescriptor imageDescriptor = getProvidedImageDescriptor(element);" + NL + "\t\t\tif (imageDescriptor == null) {" + NL + "\t\t\t\timageDescriptor = ImageDescriptor.getMissingImageDescriptor();" + NL + "\t\t\t}" + NL + "\t\t\tgetImageRegistry().put(key, imageDescriptor);" + NL + "\t\t\timage = getImageRegistry().get(key);" + NL + "\t\t}" + NL + "\t\treturn image;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ImageDescriptor getImageDescriptor(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImageDescriptor(element);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static Image getImage(IAdaptable hint) {" + NL + "\t\tENamedElement element = getElement(hint);" + NL + "\t\tif (element == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn getImage(element);" + NL + "\t}";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (";
  protected final String TEXT_9 = " == type) {" + NL + "\t\t\treturn ";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "();";
  protected final String TEXT_12 = NL + "\t\t} else if (";
  protected final String TEXT_13 = " == type) {" + NL + "\t\t\treturn ";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "();";
  protected final String TEXT_16 = NL + "\t\t} else if (";
  protected final String TEXT_17 = " == type) {" + NL + "\t\t\treturn ";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "();";
  protected final String TEXT_20 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_21 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_22 = "\", null, \"";
  protected final String TEXT_23 = "\"," + NL + "\t\t";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "()," + NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_27 = " = new MetamodelType(\"";
  protected final String TEXT_28 = "\", null, \"";
  protected final String TEXT_29 = "\",";
  protected final String TEXT_30 = NL + "\t\t";
  protected final String TEXT_31 = ".eINSTANCE.get";
  protected final String TEXT_32 = "(),";
  protected final String TEXT_33 = NL + "\t\tnull,";
  protected final String TEXT_34 = NL + "\t\tnew NullEditHelper());";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_36 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_37 = ");";
  protected final String TEXT_38 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_39 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\tSystem.err.println(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_40 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_41 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_42 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_43 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_44 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_45 = ".eINSTANCE.get";
  protected final String TEXT_46 = "()," + NL + "\t\t\t\t\t\t";
d67 18
a84 16
  protected final String TEXT_48 = "())";
  protected final String TEXT_49 = NL;
  protected final String TEXT_50 = NL + "\t\t});";
  protected final String TEXT_51 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_52 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_53 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_54 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_55 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_56 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_57 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_58 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_59 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_60 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_61 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_62 = NL + "}";
  protected final String TEXT_63 = NL;
d97 4
d105 1
a105 1
    stringBuffer.append(TEXT_5);
d107 1
a107 1
    stringBuffer.append(TEXT_6);
d109 1
a109 1
    stringBuffer.append(TEXT_7);
d114 1
a114 1
    stringBuffer.append(TEXT_8);
d116 1
a116 1
    stringBuffer.append(TEXT_9);
d118 1
a118 1
    stringBuffer.append(TEXT_10);
d120 1
a120 1
    stringBuffer.append(TEXT_11);
d136 1
a136 1
    stringBuffer.append(TEXT_12);
d138 1
a138 1
    stringBuffer.append(TEXT_13);
d140 1
a140 1
    stringBuffer.append(TEXT_14);
d142 1
a142 1
    stringBuffer.append(TEXT_15);
d147 1
a147 1
    stringBuffer.append(TEXT_16);
d149 1
a149 1
    stringBuffer.append(TEXT_17);
d151 1
a151 1
    stringBuffer.append(TEXT_18);
d153 1
a153 1
    stringBuffer.append(TEXT_19);
d158 1
a158 1
    stringBuffer.append(TEXT_20);
d160 1
a160 1
    stringBuffer.append(TEXT_21);
d162 1
a162 1
    stringBuffer.append(TEXT_22);
d164 1
a164 1
    stringBuffer.append(TEXT_23);
d166 1
a166 1
    stringBuffer.append(TEXT_24);
d168 1
a168 1
    stringBuffer.append(TEXT_25);
d196 1
a196 1
    stringBuffer.append(TEXT_26);
d198 1
a198 1
    stringBuffer.append(TEXT_27);
d200 1
a200 1
    stringBuffer.append(TEXT_28);
d202 1
a202 1
    stringBuffer.append(TEXT_29);
d204 1
a204 1
    stringBuffer.append(TEXT_30);
d206 1
a206 1
    stringBuffer.append(TEXT_31);
d208 1
a208 1
    stringBuffer.append(TEXT_32);
d210 1
a210 1
    stringBuffer.append(TEXT_33);
d212 1
a212 1
    stringBuffer.append(TEXT_34);
d214 1
a214 1
    stringBuffer.append(TEXT_35);
d216 1
a216 1
    stringBuffer.append(TEXT_36);
d218 1
a218 1
    stringBuffer.append(TEXT_37);
d220 1
a220 1
    stringBuffer.append(TEXT_38);
d222 1
a222 1
    stringBuffer.append(TEXT_39);
d224 1
a224 1
    stringBuffer.append(TEXT_40);
d240 1
a240 1
    stringBuffer.append(TEXT_41);
d242 1
a242 1
    stringBuffer.append(TEXT_42);
d246 1
a246 1
    stringBuffer.append(TEXT_43);
d248 1
a248 1
    stringBuffer.append(TEXT_44);
d250 1
a250 1
    stringBuffer.append(TEXT_45);
d252 1
a252 1
    stringBuffer.append(TEXT_46);
d254 1
a254 1
    stringBuffer.append(TEXT_47);
d257 1
a257 1
    stringBuffer.append(TEXT_48);
d259 1
a259 1
    stringBuffer.append(TEXT_49);
d263 1
a263 1
    stringBuffer.append(TEXT_50);
d268 1
a268 1
    stringBuffer.append(TEXT_51);
d270 1
a270 1
    stringBuffer.append(TEXT_52);
d272 1
a272 1
    stringBuffer.append(TEXT_53);
d274 1
a274 1
    stringBuffer.append(TEXT_54);
d276 1
a276 1
    stringBuffer.append(TEXT_55);
d278 1
a278 1
    stringBuffer.append(TEXT_56);
d280 1
a280 1
    stringBuffer.append(TEXT_57);
d282 1
a282 1
    stringBuffer.append(TEXT_58);
d284 1
a284 1
    stringBuffer.append(TEXT_59);
d286 1
a286 1
    stringBuffer.append(TEXT_60);
d288 1
a288 1
    stringBuffer.append(TEXT_61);
d290 1
a290 1
    stringBuffer.append(TEXT_62);
d292 1
a292 1
    stringBuffer.append(TEXT_63);
@


1.16
log
@#115622 use genDiagram.eAllContents() to iterate over diagram contents instead of using custom iterator
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
@


1.15
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d39 44
a82 40
  protected final String TEXT_20 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_22 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_23 = "\", null, \"";
  protected final String TEXT_24 = "\"," + NL + "\t\t";
  protected final String TEXT_25 = ".eINSTANCE.get";
  protected final String TEXT_26 = "(), new NullEditHelper());";
  protected final String TEXT_27 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_28 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_29 = "\", null, \"";
  protected final String TEXT_30 = "\"," + NL + "\t\tnull, new NullEditHelper());";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_32 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_33 = ");";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends ";
  protected final String TEXT_35 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\tSystem.err.println(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_37 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic static final ObjectInitializer ";
  protected final String TEXT_38 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_39 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_40 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_43 = ".eINSTANCE.get";
  protected final String TEXT_44 = "())";
  protected final String TEXT_45 = NL;
  protected final String TEXT_46 = NL + "\t\t});";
  protected final String TEXT_47 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_48 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_49 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_50 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_51 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_52 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_53 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_54 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_55 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_56 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_57 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_58 = NL + "}";
  protected final String TEXT_59 = NL;
a104 10
List types = new ArrayList();
List refLinks = new ArrayList();
Iterator entities = AccessUtil.getGenEntities(genDiagram);
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
	if (entity instanceof GenLink && ((GenLink) entity).getModelFacet() instanceof FeatureModelFacet) {
		refLinks.add(entity);
		types.add(entity.getUniqueIdentifier());
	}
}
d153 10
d164 2
a165 1
entities = AccessUtil.getGenEntities(genDiagram);
d167 3
a169 2
while (entities.hasNext()) {
	GenCommonBase entity = (GenCommonBase) entities.next();
d171 11
a181 10
	String semanticNodeInterfaceName;
	if (entity instanceof GenDiagram) {
		semanticNodeInterfaceName = genDiagram.getDomainDiagramElement().getClassifierAccessorName();
	} else if (entity instanceof GenNode) {
		GenNode genNode = (GenNode) entity;
		typeModelFacet = genNode.getModelFacet();
		semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	} else if (entity instanceof GenLink && ((GenLink) entity).getModelFacet() instanceof TypeLinkModelFacet) {
		typeModelFacet = (TypeLinkModelFacet) ((GenLink) entity).getModelFacet();
		semanticNodeInterfaceName = typeModelFacet.getMetaClass().getClassifierAccessorName();
d185 1
a185 1
	types.add(entity.getUniqueIdentifier());
a189 10
    stringBuffer.append(TEXT_21);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(semanticNodeInterfaceName);
d191 1
a191 5
    
}
for (int i = 0; i < refLinks.size(); i++) {
	GenLink entity = (GenLink) refLinks.get(i);

d193 1
a193 1
    stringBuffer.append(entity.getUniqueIdentifier());
d195 1
a195 1
    stringBuffer.append(entity.getUniqueIdentifier());
d197 1
a197 1
    stringBuffer.append(entity.getUniqueIdentifier());
d199 8
d208 1
a208 1
    stringBuffer.append(TEXT_31);
d210 1
a210 1
    stringBuffer.append(TEXT_32);
d212 1
a212 1
    stringBuffer.append(TEXT_33);
d214 1
a214 1
    stringBuffer.append(TEXT_34);
d216 1
a216 1
    stringBuffer.append(TEXT_35);
d218 1
a218 1
    stringBuffer.append(TEXT_36);
d220 3
a222 2
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	GenCommonBase nextElement = (GenCommonBase)it.next();
d224 8
a231 8
	if(nextElement instanceof GenNode) {
		modelFacet = ((GenNode)nextElement).getModelFacet();
	} else if(nextElement instanceof GenLink && 
		((GenLink)nextElement).getModelFacet() instanceof TypeLinkModelFacet) {
		modelFacet = (TypeLinkModelFacet)((GenLink)nextElement).getModelFacet();
	} 
	
	if(modelFacet != null && modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {				
d234 3
a236 3
    stringBuffer.append(TEXT_37);
    stringBuffer.append(nextElement.getUniqueIdentifier());
    stringBuffer.append(TEXT_38);
d240 1
a240 1
    stringBuffer.append(TEXT_39);
d242 1
a242 1
    stringBuffer.append(TEXT_40);
d244 1
a244 1
    stringBuffer.append(TEXT_41);
d246 1
a246 1
    stringBuffer.append(TEXT_42);
d248 1
a248 1
    stringBuffer.append(TEXT_43);
d251 1
a251 1
    stringBuffer.append(TEXT_44);
d253 1
a253 1
    stringBuffer.append(TEXT_45);
d257 1
a257 1
    stringBuffer.append(TEXT_46);
d262 1
a262 1
    stringBuffer.append(TEXT_47);
d264 1
a264 1
    stringBuffer.append(TEXT_48);
d266 1
a266 1
    stringBuffer.append(TEXT_49);
d268 1
a268 1
    stringBuffer.append(TEXT_50);
d270 1
a270 1
    stringBuffer.append(TEXT_51);
d272 1
a272 1
    stringBuffer.append(TEXT_52);
d274 1
a274 1
    stringBuffer.append(TEXT_53);
d276 1
a276 1
    stringBuffer.append(TEXT_54);
d278 1
a278 1
    stringBuffer.append(TEXT_55);
d280 1
a280 1
    stringBuffer.append(TEXT_56);
d282 1
a282 1
    stringBuffer.append(TEXT_57);
d284 1
a284 1
    stringBuffer.append(TEXT_58);
d286 1
a286 1
    stringBuffer.append(TEXT_59);
@


1.14
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EReference;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.NullElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.SpecializationType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelperAdvice;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
d53 26
a78 25
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NullEditHelper extends AbstractEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ICommand getEditCommand(IEditCommandRequest req) {" + NL + "\t\t\tif (!(req instanceof ConfigureRequest)) {" + NL + "\t\t\t\tSystem.err.println(\"unserved request \" + req);" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_36 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tprivate static final ObjectInitializer ";
  protected final String TEXT_37 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_38 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_39 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_40 = ".eINSTANCE.get";
  protected final String TEXT_41 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "())";
  protected final String TEXT_44 = NL;
  protected final String TEXT_45 = NL + "\t\t});";
  protected final String TEXT_46 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tvoid init(";
  protected final String TEXT_47 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_48 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_49 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_50 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_51 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_52 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_53 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_54 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_55 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_56 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_57 = NL + "}";
  protected final String TEXT_58 = NL;
d214 2
d217 1
a217 1
    stringBuffer.append(TEXT_35);
d232 1
a232 1
    stringBuffer.append(TEXT_36);
d234 1
a234 1
    stringBuffer.append(TEXT_37);
d238 1
a238 1
    stringBuffer.append(TEXT_38);
d240 1
a240 1
    stringBuffer.append(TEXT_39);
d242 1
a242 1
    stringBuffer.append(TEXT_40);
d244 1
a244 1
    stringBuffer.append(TEXT_41);
d246 1
a246 1
    stringBuffer.append(TEXT_42);
d249 1
a249 1
    stringBuffer.append(TEXT_43);
d251 1
a251 1
    stringBuffer.append(TEXT_44);
d255 1
a255 1
    stringBuffer.append(TEXT_45);
d260 1
a260 1
    stringBuffer.append(TEXT_46);
d262 1
a262 1
    stringBuffer.append(TEXT_47);
d264 1
a264 1
    stringBuffer.append(TEXT_48);
d266 1
a266 1
    stringBuffer.append(TEXT_49);
d268 1
a268 1
    stringBuffer.append(TEXT_50);
d270 1
a270 1
    stringBuffer.append(TEXT_51);
d272 1
a272 1
    stringBuffer.append(TEXT_52);
d274 1
a274 1
    stringBuffer.append(TEXT_53);
d276 1
a276 1
    stringBuffer.append(TEXT_54);
d278 1
a278 1
    stringBuffer.append(TEXT_55);
d280 1
a280 1
    stringBuffer.append(TEXT_56);
d282 1
a282 1
    stringBuffer.append(TEXT_57);
d284 1
a284 1
    stringBuffer.append(TEXT_58);
@


1.13
log
@[ashatalin] #115311 use accessor name helper methods instead of constructing them
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.ENamedElement;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EReference;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.NullElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.SpecializationType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelperAdvice;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.resource.ImageDescriptor;" + NL + "import org.eclipse.jface.resource.ImageRegistry;" + NL + "import org.eclipse.swt.graphics.Image;";
d27 32
a58 32
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * Returns 'type' of the ecore object associated with the hint." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ENamedElement getElement(IAdaptable hint) {" + NL + "\t\tObject type = hint.getAdapter(IElementType.class);" + NL + "\t\tif (type instanceof IMetamodelType) {" + NL + "\t\t\tEClass eClass = ((IMetamodelType) type).getEClass();" + NL + "\t\t\tif (eClass != null && eClass.getEPackage() == ";
  protected final String TEXT_9 = ".eINSTANCE) {" + NL + "\t\t\t\treturn eClass;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;";
  protected final String TEXT_10 = NL + "\t\t} else if (type instanceof ISpecializationType) {";
  protected final String TEXT_11 = NL + "\t\t\tif (";
  protected final String TEXT_12 = " == type) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_13 = ".getEContainerDescriptor().getContainmentFeatures()[0];" + NL + "\t\t\t}";
  protected final String TEXT_14 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_16 = "_EditHelper extends BaseEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getConfigureCommand(ConfigureRequest req) {" + NL + "\t\t\treturn new ConfigureElementCommand(req) {" + NL + "" + NL + "\t\t\t\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "\t\t\t\t\t// To customize newly created domain objects remove @@renerated tag of " + NL + "\t\t\t\t\t// getConfigureCommand(ConfigureRequest req) method and write your custom" + NL + "\t\t\t\t\t// code here. Use getElementToEdit() to get created element.";
  protected final String TEXT_17 = NL + "\t\t\t\t\tInitializers.";
  protected final String TEXT_18 = ".init(getElementToEdit());";
  protected final String TEXT_19 = NL + "\t\t\t\t\t((";
  protected final String TEXT_20 = ") getElementToEdit()).";
  protected final String TEXT_21 = "((";
  protected final String TEXT_22 = ") getRequest().getParameter(CreateRelationshipRequest.TARGET));";
  protected final String TEXT_23 = "\t\t\t\t" + NL + "\t\t\t\t\treturn newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}";
  protected final String TEXT_24 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {";
  protected final String TEXT_25 = NL + "\t\t\tif (";
  protected final String TEXT_26 = ".equals(reqest.getElementType())) {" + NL + "\t\t\t\treqest.setContainmentFeature(";
  protected final String TEXT_27 = ".getEContainerDescriptor().getContainmentFeatures()[0]);" + NL + "\t\t\t\treturn new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));" + NL + "\t\t\t}";
  protected final String TEXT_28 = NL + "\t\t\treturn super.getCreateRelationshipCommand(reqest);" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_30 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_31 = "\", null, \"";
  protected final String TEXT_32 = "\"," + NL + "\t\t";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "()," + NL + "\t\tnew ";
  protected final String TEXT_35 = "_EditHelper());";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_37 = "_ContainerDescriptor implements IContainerDescriptor {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final EReference[] containmentFeatures = new EReference[] {" + NL + "\t\t\t";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "()" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EReference[] getContainmentFeatures() {" + NL + "\t\t\treturn containmentFeatures;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IElementMatcher getMatcher() {" + NL + "\t\t\treturn new IElementMatcher() {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tpublic boolean matches(EObject eObject) {" + NL + "\t\t\t\t\treturn ";
d60 18
a77 35
  protected final String TEXT_41 = "().isInstance(eObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_42 = "_EditHelperAdvice extends BaseEditHelperAdvice {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ISpecializationType ";
  protected final String TEXT_43 = " = new SpecializationType(" + NL + "\t\t\"";
  protected final String TEXT_44 = "\", null, \"";
  protected final String TEXT_45 = "\"," + NL + "\t\tnew IElementType[] { NullElementType.getInstance() }, null," + NL + "\t\tnew ";
  protected final String TEXT_46 = "_ContainerDescriptor()," + NL + "\t\tnew ";
  protected final String TEXT_47 = "_EditHelperAdvice());";
  protected final String TEXT_48 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_49 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_50 = ");";
  protected final String TEXT_51 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = reqest.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(reqest);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tresult.setEditContext(((View) container).getElement());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelper extends MSLEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = req.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(req);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tresult.setEditContext(container);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t";
  protected final String TEXT_52 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Initializers {";
  protected final String TEXT_53 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tprivate static final ObjectInitializer ";
  protected final String TEXT_54 = " = new ObjectInitializer(new FeatureInitializer[] {";
  protected final String TEXT_55 = NL + "\t\t\tnew FeatureInitializer(\"";
  protected final String TEXT_56 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_57 = ".eINSTANCE.get";
  protected final String TEXT_58 = "()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_59 = ".eINSTANCE.get";
  protected final String TEXT_60 = "())";
  protected final String TEXT_61 = NL;
  protected final String TEXT_62 = NL + "\t\t});";
  protected final String TEXT_63 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class ObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tvoid init(";
  protected final String TEXT_64 = " instance) {" + NL + "\t\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tstatic class FeatureInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_65 = " contextClass;\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_66 = " sFeature;" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprivate ";
  protected final String TEXT_67 = " expressionBody;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_68 = " query;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tFeatureInitializer(";
  protected final String TEXT_69 = " expression, " + NL + "\t\t\t\t";
  protected final String TEXT_70 = " context, " + NL + "\t\t\t\t";
  protected final String TEXT_71 = " sFeature) {" + NL + "\t\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\t\tthis.expressionBody = expression;" + NL + "\t\t\t\tthis.contextClass\t= context;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(";
  protected final String TEXT_72 = " contextInstance) {" + NL + "\t\t\t\tif(this.query == null) {" + NL + "\t\t\t\t\tthis.query = ";
  protected final String TEXT_73 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t\t}" + NL + "\t\t} // end of FeatureInitializer" + NL + "\t\t\t\t" + NL + "\t} // end of Initializers";
  protected final String TEXT_74 = NL + "}";
  protected final String TEXT_75 = NL;
d114 2
a116 2
    stringBuffer.append(TEXT_9);
    if (!refLinks.isEmpty()) {
d118 2
d121 13
a133 2
	for (int i = 0; i < refLinks.size(); i++) {
		GenLink refLink = (GenLink) refLinks.get(i);
a134 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(refLink.getUniqueIdentifier());
d136 1
a136 1
    stringBuffer.append(refLink.getUniqueIdentifier());
d138 15
d157 1
a157 1
    stringBuffer.append(TEXT_14);
a177 5

    stringBuffer.append(TEXT_15);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_16);
    
d179 1
a179 6
		++elementInitializerCount;

    stringBuffer.append(TEXT_17);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_18);
    
a180 4
	if (entity instanceof GenLink) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) ((GenLink) entity).getModelFacet();
		GenFeature linkFeature = modelFacet.getTargetMetaFeature();
        String featureAccessorName = linkFeature.isListType() ? linkFeature.getGetAccessor() + "().add" : "set" + linkFeature.getAccessorName();
a181 4
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(featureAccessorName);
d183 1
a183 1
    stringBuffer.append(importManager.getImportedName(linkFeature.getTypeGenClass().getQualifiedInterfaceName()));
d185 1
a185 1
    	}
d187 1
a187 4
    
	if (entity instanceof GenNode) {
		GenNode node = (GenNode) entity;

d189 1
a189 6
    
		for (int i = 0; i < refLinks.size(); i++) {
			GenLink refLink = (GenLink) refLinks.get(i);
			GenFeature targetFeature = ((FeatureModelFacet) refLink.getModelFacet()).getMetaFeature();
			if (node.getDomainMetaClass().equals(targetFeature.getGenClass())) {

d191 1
a191 1
    stringBuffer.append(refLink.getUniqueIdentifier());
a192 21
    stringBuffer.append(refLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_27);
    
			}
		}

    stringBuffer.append(TEXT_28);
    	}
    stringBuffer.append(TEXT_29);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_32);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_35);
a196 1
	GenFeature targetFeature = ((FeatureModelFacet) entity.getModelFacet()).getMetaFeature();
d198 1
a198 1
    stringBuffer.append(TEXT_36);
d200 1
a200 9
    stringBuffer.append(TEXT_37);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(targetFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_39);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(targetFeature.getGenClass().getClassifierAccessorName());
    stringBuffer.append(TEXT_41);
d202 1
a202 1
    stringBuffer.append(TEXT_42);
d204 1
a204 9
    stringBuffer.append(TEXT_43);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_44);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_45);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_46);
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_47);
d206 1
a206 1
    stringBuffer.append(TEXT_48);
d208 1
a208 1
    stringBuffer.append(TEXT_49);
d210 1
a210 1
    stringBuffer.append(TEXT_50);
d212 3
a214 3
    stringBuffer.append(TEXT_51);
     if(elementInitializerCount > 0) {
    stringBuffer.append(TEXT_52);
d229 1
a229 1
    stringBuffer.append(TEXT_53);
d231 1
a231 1
    stringBuffer.append(TEXT_54);
d235 1
a235 1
    stringBuffer.append(TEXT_55);
d237 1
a237 1
    stringBuffer.append(TEXT_56);
d239 1
a239 1
    stringBuffer.append(TEXT_57);
d241 1
a241 1
    stringBuffer.append(TEXT_58);
d243 1
a243 1
    stringBuffer.append(TEXT_59);
d246 1
a246 1
    stringBuffer.append(TEXT_60);
d248 1
a248 1
    stringBuffer.append(TEXT_61);
d252 1
a252 1
    stringBuffer.append(TEXT_62);
d257 1
a257 1
    stringBuffer.append(TEXT_63);
d259 1
a259 1
    stringBuffer.append(TEXT_64);
d261 1
a261 1
    stringBuffer.append(TEXT_65);
d263 1
a263 1
    stringBuffer.append(TEXT_66);
d265 1
a265 1
    stringBuffer.append(TEXT_67);
d267 1
a267 1
    stringBuffer.append(TEXT_68);
d269 1
a269 1
    stringBuffer.append(TEXT_69);
d271 1
a271 1
    stringBuffer.append(TEXT_70);
d273 1
a273 1
    stringBuffer.append(TEXT_71);
d275 1
a275 1
    stringBuffer.append(TEXT_72);
d277 3
a279 3
    stringBuffer.append(TEXT_73);
    	} 
    stringBuffer.append(TEXT_74);
d281 1
a281 1
    stringBuffer.append(TEXT_75);
@


1.12
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d157 1
a157 1
		semanticNodeInterfaceName = genDiagram.getDomainDiagramElement().getName();
d161 1
a161 1
		semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
d164 1
a164 1
		semanticNodeInterfaceName = typeModelFacet.getMetaClass().getName();
a235 2
	String semanticFeatureCapName = targetFeature.getCapName();
	String semanticNodeInterfaceName = targetFeature.getGenClass().getName();
d242 1
a242 1
    stringBuffer.append(semanticNodeInterfaceName + '_' + semanticFeatureCapName);
d246 1
a246 1
    stringBuffer.append(semanticNodeInterfaceName);
@


1.11
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@d71 1
a71 1
  protected final String TEXT_52 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class Initializers {" + NL + "\t";
d73 1
a73 1
  protected final String TEXT_54 = " = new ObjectInitializer(new FeatureInitializer[] {" + NL + "\t\t\t";
d80 2
a81 2
  protected final String TEXT_61 = NL + "\t\t\t";
  protected final String TEXT_62 = NL + "\t\t});" + NL + "\t";
d154 1
d160 1
d163 2
a164 2
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) ((GenLink) entity).getModelFacet();
		semanticNodeInterfaceName = modelFacet.getMetaClass().getName();
d174 2
a175 4
	if (entity instanceof GenBaseElement) {
		GenElementInitializer initializer = ((GenBaseElement) entity).getModelElementInitializer();
		if (initializer != null) {
			++elementInitializerCount;
d178 1
a178 1
    stringBuffer.append(initializer.getElement().getUniqueIdentifier());
a180 1
		}
d273 13
a285 9
	for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
		GenCommonBase nextElement = (GenCommonBase)it.next();
		GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
		if(genElement == null || genElement.getModelElementInitializer() == null) continue;	
			
		GenElementInitializer initializer = genElement.getModelElementInitializer();
		if(initializer instanceof GenFeatureSeqInitializer) {
			GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)initializer;
		
d287 1
a287 1
    stringBuffer.append(initializer.getElement().getUniqueIdentifier());
d289 3
a291 2
     for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
					GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();
d306 3
a308 2
    	}
			} 
d310 4
a313 2
    	} // end of FeatureSeqInitializer
	
@


1.10
log
@[ashatalin] #113258 sync diagram and domain models using canonicalEditPolicy
@
text
@d36 59
a94 37
  protected final String TEXT_17 = NL + "\t\t\t\t\t";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = "(getElementToEdit());";
  protected final String TEXT_20 = NL + "\t\t\t\t\t((";
  protected final String TEXT_21 = ") getElementToEdit()).";
  protected final String TEXT_22 = "((";
  protected final String TEXT_23 = ") getRequest().getParameter(CreateRelationshipRequest.TARGET));";
  protected final String TEXT_24 = "\t\t\t\t" + NL + "\t\t\t\t\treturn newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}";
  protected final String TEXT_25 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {";
  protected final String TEXT_26 = NL + "\t\t\tif (";
  protected final String TEXT_27 = ".equals(reqest.getElementType())) {" + NL + "\t\t\t\treqest.setContainmentFeature(";
  protected final String TEXT_28 = ".getEContainerDescriptor().getContainmentFeatures()[0]);" + NL + "\t\t\t\treturn new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));" + NL + "\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\treturn super.getCreateRelationshipCommand(reqest);" + NL + "\t\t}";
  protected final String TEXT_30 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_31 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_32 = "\", null, \"";
  protected final String TEXT_33 = "\"," + NL + "\t\t";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "()," + NL + "\t\tnew ";
  protected final String TEXT_36 = "_EditHelper());";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_38 = "_ContainerDescriptor implements IContainerDescriptor {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final EReference[] containmentFeatures = new EReference[] {" + NL + "\t\t\t";
  protected final String TEXT_39 = ".eINSTANCE.get";
  protected final String TEXT_40 = "()" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EReference[] getContainmentFeatures() {" + NL + "\t\t\treturn containmentFeatures;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IElementMatcher getMatcher() {" + NL + "\t\t\treturn new IElementMatcher() {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tpublic boolean matches(EObject eObject) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "().isInstance(eObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_43 = "_EditHelperAdvice extends BaseEditHelperAdvice {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ISpecializationType ";
  protected final String TEXT_44 = " = new SpecializationType(" + NL + "\t\t\"";
  protected final String TEXT_45 = "\", null, \"";
  protected final String TEXT_46 = "\"," + NL + "\t\tnew IElementType[] { NullElementType.getInstance() }, null," + NL + "\t\tnew ";
  protected final String TEXT_47 = "_ContainerDescriptor()," + NL + "\t\tnew ";
  protected final String TEXT_48 = "_EditHelperAdvice());";
  protected final String TEXT_49 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_50 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_51 = ");";
  protected final String TEXT_52 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = reqest.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(reqest);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tresult.setEditContext(((View) container).getElement());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelper extends MSLEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = req.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(req);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tresult.setEditContext(container);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_53 = NL;
d151 1
d175 1
d178 1
a178 1
    stringBuffer.append(importManager.getImportedName(initializer.getInitializersQualifiedClassName()));
a179 2
    stringBuffer.append(initializer.getInitializerMethodName());
    stringBuffer.append(TEXT_19);
d188 2
d191 1
a191 1
    stringBuffer.append(importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName()));
d193 1
a193 1
    stringBuffer.append(featureAccessorName);
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName(linkFeature.getTypeGenClass().getQualifiedInterfaceName()));
a196 2
    	}
    stringBuffer.append(TEXT_24);
d201 1
a201 1
    stringBuffer.append(TEXT_25);
d208 2
a212 2
    stringBuffer.append(refLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_28);
d217 2
d220 1
a220 1
    	}
d226 1
a226 1
    stringBuffer.append(entity.getUniqueIdentifier());
d228 1
a228 1
    stringBuffer.append(semanticPackageInterfaceName);
d230 1
a230 1
    stringBuffer.append(semanticNodeInterfaceName);
a231 2
    stringBuffer.append(entity.getUniqueIdentifier());
    stringBuffer.append(TEXT_36);
d240 2
d243 1
a243 1
    stringBuffer.append(entity.getUniqueIdentifier());
d245 2
a247 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(semanticNodeInterfaceName + '_' + semanticFeatureCapName);
d249 1
a249 1
    stringBuffer.append(semanticPackageInterfaceName);
d251 1
a251 1
    stringBuffer.append(semanticNodeInterfaceName);
d263 1
a263 1
    stringBuffer.append(entity.getUniqueIdentifier());
d265 1
a265 1
    }
d267 1
a267 1
    for (int i = 0; i < types.size(); i++) {
d269 1
a269 1
    stringBuffer.append(types.get(i));
d271 1
a271 1
    }
d273 57
d331 1
a331 1
    stringBuffer.append(TEXT_53);
@


1.9
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d40 1
a40 1
  protected final String TEXT_21 = ") getElementToEdit()).set";
d164 1
d169 1
a169 1
    stringBuffer.append(linkFeature.getAccessorName());
@


1.8
log
@[ashatalin] #112995 Domain Link Target Feature set on link creation
@
text
@d35 2
a36 2
  protected final String TEXT_16 = "_EditHelper extends BaseEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getConfigureCommand(ConfigureRequest req) {" + NL + "\t\t\treturn new ConfigureElementCommand(req) {" + NL + "\t\t\t\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "\t\t\t\t\t// To customize newly created domain objects remove @@renerated tag of " + NL + "\t\t\t\t\t// getConfigureCommand(ConfigureRequest req) method and write your custom" + NL + "\t\t\t\t\t// code here. Use getElementToEdit() to get created element." + NL + "\t\t\t\t\t";
  protected final String TEXT_17 = NL + "\t\t\t\t\t\t\t";
d38 1
a38 1
  protected final String TEXT_19 = "(getElementToEdit());" + NL + "\t\t\t\t\t\t";
d100 1
a100 1
	if (entity instanceof GenLinkReferenceOnly) {
d115 1
a115 1
		GenLinkReferenceOnly refLink = (GenLinkReferenceOnly) refLinks.get(i);
d137 3
a139 3
	} else if (entity instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) entity;
		semanticNodeInterfaceName = genLinkWithClass.getDomainMetaClass().getName();
d148 5
a152 3
    if(entity instanceof GenBaseElement) {
						GenElementInitializer initializer = ((GenBaseElement)entity).getModelElementInitializer();
						if(initializer != null) {
a157 2
    }
					}
d159 5
a163 3
	if (entity instanceof GenLinkWithClass) {
		GenLinkWithClass linkWithClass = (GenLinkWithClass) entity;
		GenFeature linkFeature = linkWithClass.getDomainLinkTargetFeature();
d166 1
a166 1
    stringBuffer.append(importManager.getImportedName(linkWithClass.getDomainMetaClass().getQualifiedInterfaceName()));
d172 1
a172 3
    
	}

d181 2
a182 2
			GenLinkReferenceOnly refLink = (GenLinkReferenceOnly) refLinks.get(i);
			GenFeature targetFeature = refLink.getDomainLinkTargetFeature();
d212 2
a213 2
	GenLinkReferenceOnly entity = (GenLinkReferenceOnly) refLinks.get(i);
	GenFeature targetFeature = entity.getDomainLinkTargetFeature();
d240 1
a240 3
    
}

@


1.7
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d35 1
a35 1
  protected final String TEXT_16 = "_EditHelper extends BaseEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getConfigureCommand(ConfigureRequest req) {" + NL + "\t\t\treturn new ConfigureElementCommand(req) {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "\t\t\t\t\t// Write new object initialization code here." + NL + "\t\t\t\t\t// Use getElementToEdit() to get created element." + NL + "\t\t\t\t\t";
d39 34
a72 30
  protected final String TEXT_20 = NL + "\t\t\t\t\treturn newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}";
  protected final String TEXT_21 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {";
  protected final String TEXT_22 = NL + "\t\t\tif (";
  protected final String TEXT_23 = ".equals(reqest.getElementType())) {" + NL + "\t\t\t\treqest.setContainmentFeature(";
  protected final String TEXT_24 = ".getEContainerDescriptor().getContainmentFeatures()[0]);" + NL + "\t\t\t\treturn new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\treturn super.getCreateRelationshipCommand(reqest);" + NL + "\t\t}";
  protected final String TEXT_26 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_27 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_28 = "\", null, \"";
  protected final String TEXT_29 = "\"," + NL + "\t\t";
  protected final String TEXT_30 = ".eINSTANCE.get";
  protected final String TEXT_31 = "()," + NL + "\t\tnew ";
  protected final String TEXT_32 = "_EditHelper());";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_34 = "_ContainerDescriptor implements IContainerDescriptor {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final EReference[] containmentFeatures = new EReference[] {" + NL + "\t\t\t";
  protected final String TEXT_35 = ".eINSTANCE.get";
  protected final String TEXT_36 = "()" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EReference[] getContainmentFeatures() {" + NL + "\t\t\treturn containmentFeatures;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IElementMatcher getMatcher() {" + NL + "\t\t\treturn new IElementMatcher() {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tpublic boolean matches(EObject eObject) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_37 = ".eINSTANCE.get";
  protected final String TEXT_38 = "().isInstance(eObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_39 = "_EditHelperAdvice extends BaseEditHelperAdvice {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ISpecializationType ";
  protected final String TEXT_40 = " = new SpecializationType(" + NL + "\t\t\"";
  protected final String TEXT_41 = "\", null, \"";
  protected final String TEXT_42 = "\"," + NL + "\t\tnew IElementType[] { NullElementType.getInstance() }, null," + NL + "\t\tnew ";
  protected final String TEXT_43 = "_ContainerDescriptor()," + NL + "\t\tnew ";
  protected final String TEXT_44 = "_EditHelperAdvice());";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_46 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_47 = ");";
  protected final String TEXT_48 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = reqest.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(reqest);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tresult.setEditContext(((View) container).getElement());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelper extends MSLEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = req.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(req);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tresult.setEditContext(container);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_49 = NL;
d158 5
d164 10
d178 1
a178 1
    stringBuffer.append(TEXT_21);
d185 1
a185 1
    stringBuffer.append(TEXT_22);
d187 1
a187 1
    stringBuffer.append(TEXT_23);
d189 1
a189 1
    stringBuffer.append(TEXT_24);
d194 1
a194 1
    stringBuffer.append(TEXT_25);
d196 1
a196 1
    stringBuffer.append(TEXT_26);
d198 1
a198 1
    stringBuffer.append(TEXT_27);
d200 1
a200 1
    stringBuffer.append(TEXT_28);
d202 1
a202 1
    stringBuffer.append(TEXT_29);
d204 1
a204 1
    stringBuffer.append(TEXT_30);
d206 1
a206 1
    stringBuffer.append(TEXT_31);
d208 1
a208 1
    stringBuffer.append(TEXT_32);
d217 1
a217 1
    stringBuffer.append(TEXT_33);
d219 1
a219 1
    stringBuffer.append(TEXT_34);
d221 1
a221 1
    stringBuffer.append(TEXT_35);
d223 1
a223 1
    stringBuffer.append(TEXT_36);
d225 1
a225 1
    stringBuffer.append(TEXT_37);
d227 1
a227 1
    stringBuffer.append(TEXT_38);
d229 1
a229 1
    stringBuffer.append(TEXT_39);
d231 1
a231 1
    stringBuffer.append(TEXT_40);
d233 1
a233 1
    stringBuffer.append(TEXT_41);
d235 1
a235 1
    stringBuffer.append(TEXT_42);
d237 1
a237 1
    stringBuffer.append(TEXT_43);
d239 1
a239 1
    stringBuffer.append(TEXT_44);
d243 1
a243 1
    stringBuffer.append(TEXT_45);
d245 1
a245 1
    stringBuffer.append(TEXT_46);
d247 1
a247 1
    stringBuffer.append(TEXT_47);
d249 1
a249 1
    stringBuffer.append(TEXT_48);
d251 1
a251 1
    stringBuffer.append(TEXT_49);
@


1.6
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d35 34
a68 30
  protected final String TEXT_16 = "_EditHelper extends BaseEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getConfigureCommand(ConfigureRequest req) {" + NL + "\t\t\treturn new ConfigureElementCommand(req) {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "\t\t\t\t\t// Write new object initialization code here." + NL + "\t\t\t\t\t// Use getElementToEdit() to get created element." + NL + "\t\t\t\t\treturn newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}";
  protected final String TEXT_17 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {";
  protected final String TEXT_18 = NL + "\t\t\tif (";
  protected final String TEXT_19 = ".equals(reqest.getElementType())) {" + NL + "\t\t\t\treqest.setContainmentFeature(";
  protected final String TEXT_20 = ".getEContainerDescriptor().getContainmentFeatures()[0]);" + NL + "\t\t\t\treturn new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));" + NL + "\t\t\t}";
  protected final String TEXT_21 = NL + "\t\t\treturn super.getCreateRelationshipCommand(reqest);" + NL + "\t\t}";
  protected final String TEXT_22 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_23 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_24 = "\", null, \"";
  protected final String TEXT_25 = "\"," + NL + "\t\t";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "()," + NL + "\t\tnew ";
  protected final String TEXT_28 = "_EditHelper());";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_30 = "_ContainerDescriptor implements IContainerDescriptor {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final EReference[] containmentFeatures = new EReference[] {" + NL + "\t\t\t";
  protected final String TEXT_31 = ".eINSTANCE.get";
  protected final String TEXT_32 = "()" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EReference[] getContainmentFeatures() {" + NL + "\t\t\treturn containmentFeatures;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IElementMatcher getMatcher() {" + NL + "\t\t\treturn new IElementMatcher() {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tpublic boolean matches(EObject eObject) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "().isInstance(eObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_35 = "_EditHelperAdvice extends BaseEditHelperAdvice {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ISpecializationType ";
  protected final String TEXT_36 = " = new SpecializationType(" + NL + "\t\t\"";
  protected final String TEXT_37 = "\", null, \"";
  protected final String TEXT_38 = "\"," + NL + "\t\tnew IElementType[] { NullElementType.getInstance() }, null," + NL + "\t\tnew ";
  protected final String TEXT_39 = "_ContainerDescriptor()," + NL + "\t\tnew ";
  protected final String TEXT_40 = "_EditHelperAdvice());";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_42 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_43 = ");";
  protected final String TEXT_44 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = reqest.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(reqest);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tresult.setEditContext(((View) container).getElement());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelper extends MSLEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = req.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(req);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tresult.setEditContext(container);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_45 = NL;
d144 11
d159 1
a159 1
    stringBuffer.append(TEXT_17);
d166 1
a166 1
    stringBuffer.append(TEXT_18);
d168 1
a168 1
    stringBuffer.append(TEXT_19);
d170 1
a170 1
    stringBuffer.append(TEXT_20);
d175 1
a175 1
    stringBuffer.append(TEXT_21);
d177 1
a177 1
    stringBuffer.append(TEXT_22);
d179 1
a179 1
    stringBuffer.append(TEXT_23);
d181 1
a181 1
    stringBuffer.append(TEXT_24);
d183 1
a183 1
    stringBuffer.append(TEXT_25);
d185 1
a185 1
    stringBuffer.append(TEXT_26);
d187 1
a187 1
    stringBuffer.append(TEXT_27);
d189 1
a189 1
    stringBuffer.append(TEXT_28);
d198 1
a198 1
    stringBuffer.append(TEXT_29);
d200 1
a200 1
    stringBuffer.append(TEXT_30);
d202 1
a202 1
    stringBuffer.append(TEXT_31);
d204 1
a204 1
    stringBuffer.append(TEXT_32);
d206 1
a206 1
    stringBuffer.append(TEXT_33);
d208 1
a208 1
    stringBuffer.append(TEXT_34);
d210 1
a210 1
    stringBuffer.append(TEXT_35);
d212 1
a212 1
    stringBuffer.append(TEXT_36);
d214 1
a214 1
    stringBuffer.append(TEXT_37);
d216 1
a216 1
    stringBuffer.append(TEXT_38);
d218 1
a218 1
    stringBuffer.append(TEXT_39);
d220 1
a220 1
    stringBuffer.append(TEXT_40);
d224 1
a224 1
    stringBuffer.append(TEXT_41);
d226 1
a226 1
    stringBuffer.append(TEXT_42);
d228 1
a228 1
    stringBuffer.append(TEXT_43);
d230 1
a230 1
    stringBuffer.append(TEXT_44);
d232 1
a232 1
    stringBuffer.append(TEXT_45);
@


1.5
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d22 43
a64 31
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EReference;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IContainerDescriptor;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementMatcher;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ISpecializationType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.NullElementType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.SpecializationType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.SetValueCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.edithelper.AbstractEditHelperAdvice;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateRelationshipRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.SetRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ElementTypes {" + NL;
  protected final String TEXT_5 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_6 = "_EditHelper extends BaseEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getConfigureCommand(ConfigureRequest req) {" + NL + "\t\t\treturn new ConfigureElementCommand(req) {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "\t\t\t\t\t// Write new object initialization code here." + NL + "\t\t\t\t\t// Use getElementToEdit() to get created element." + NL + "\t\t\t\t\treturn newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}";
  protected final String TEXT_7 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getCreateRelationshipCommand(CreateRelationshipRequest reqest) {";
  protected final String TEXT_8 = NL + "\t\t\tif (";
  protected final String TEXT_9 = ".equals(reqest.getElementType())) {" + NL + "\t\t\t\treqest.setContainmentFeature(";
  protected final String TEXT_10 = ".getEContainerDescriptor().getContainmentFeatures()[0]);" + NL + "\t\t\t\treturn new SetValueCommand(new SetRequest(reqest.getSource(), reqest.getContainmentFeature(), reqest.getTarget()));" + NL + "\t\t\t}";
  protected final String TEXT_11 = NL + "\t\t\treturn super.getCreateRelationshipCommand(reqest);" + NL + "\t\t}";
  protected final String TEXT_12 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_13 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_14 = "\", null, null," + NL + "\t\t";
  protected final String TEXT_15 = ".eINSTANCE.get";
  protected final String TEXT_16 = "()," + NL + "\t\tnew ";
  protected final String TEXT_17 = "_EditHelper());";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_19 = "_ContainerDescriptor implements IContainerDescriptor {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final EReference[] containmentFeatures = new EReference[] {" + NL + "\t\t\t";
  protected final String TEXT_20 = ".eINSTANCE.get";
  protected final String TEXT_21 = "()" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EReference[] getContainmentFeatures() {" + NL + "\t\t\treturn containmentFeatures;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IElementMatcher getMatcher() {" + NL + "\t\t\treturn new IElementMatcher() {" + NL + "" + NL + "\t\t\t\t/**" + NL + "\t\t\t\t * @@generated" + NL + "\t\t\t\t */" + NL + "\t\t\t\tpublic boolean matches(EObject eObject) {" + NL + "\t\t\t\t\treturn ";
  protected final String TEXT_22 = ".eINSTANCE.get";
  protected final String TEXT_23 = "().isInstance(eObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_24 = "_EditHelperAdvice extends BaseEditHelperAdvice {}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ISpecializationType ";
  protected final String TEXT_25 = " = new SpecializationType(" + NL + "\t\t\"";
  protected final String TEXT_26 = "\", null, null," + NL + "\t\tnew IElementType[] { NullElementType.getInstance() }, null," + NL + "\t\tnew ";
  protected final String TEXT_27 = "_ContainerDescriptor()," + NL + "\t\tnew ";
  protected final String TEXT_28 = "_EditHelperAdvice());";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_30 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_31 = ");";
  protected final String TEXT_32 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelperAdvice extends AbstractEditHelperAdvice {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getBeforeEditContextCommand(GetEditContextRequest reqest) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = reqest.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(reqest);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tresult.setEditContext(((View) container).getElement());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelper extends MSLEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = req.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(req);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tresult.setEditContext(container);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_33 = NL;
d78 9
d99 21
d137 1
a137 1
    stringBuffer.append(TEXT_5);
d139 1
a139 1
    stringBuffer.append(TEXT_6);
d144 1
a144 1
    stringBuffer.append(TEXT_7);
d151 1
a151 1
    stringBuffer.append(TEXT_8);
d153 1
a153 1
    stringBuffer.append(TEXT_9);
d155 1
a155 1
    stringBuffer.append(TEXT_10);
d160 1
a160 1
    stringBuffer.append(TEXT_11);
d162 3
a164 1
    stringBuffer.append(TEXT_12);
d166 1
a166 1
    stringBuffer.append(TEXT_13);
d168 1
a168 1
    stringBuffer.append(TEXT_14);
d170 1
a170 1
    stringBuffer.append(TEXT_15);
d172 1
a172 1
    stringBuffer.append(TEXT_16);
d174 1
a174 1
    stringBuffer.append(TEXT_17);
d183 1
a183 1
    stringBuffer.append(TEXT_18);
d185 1
a185 1
    stringBuffer.append(TEXT_19);
d187 1
a187 1
    stringBuffer.append(TEXT_20);
d189 1
a189 1
    stringBuffer.append(TEXT_21);
d191 1
a191 1
    stringBuffer.append(TEXT_22);
d193 3
a195 1
    stringBuffer.append(TEXT_23);
d197 1
a197 1
    stringBuffer.append(TEXT_24);
d199 1
a199 1
    stringBuffer.append(TEXT_25);
d201 1
a201 1
    stringBuffer.append(TEXT_26);
d203 1
a203 1
    stringBuffer.append(TEXT_27);
d205 1
a205 1
    stringBuffer.append(TEXT_28);
d209 1
a209 1
    stringBuffer.append(TEXT_29);
d211 1
a211 1
    stringBuffer.append(TEXT_30);
d213 1
a213 1
    stringBuffer.append(TEXT_31);
d215 1
a215 1
    stringBuffer.append(TEXT_32);
d217 1
a217 1
    stringBuffer.append(TEXT_33);
@


1.4
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.common.core.command.CommandResult;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.ConfigureElementCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.ConfigureRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d25 28
a52 11
  protected final String TEXT_6 = "_EditHelper extends BaseEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getConfigureCommand(ConfigureRequest req) {" + NL + "\t\t\treturn new ConfigureElementCommand(req) {" + NL + "\t\t\t\tprotected CommandResult doExecute(IProgressMonitor progressMonitor) {" + NL + "//\tWrite new object initialization code here. Use getElementToEdit() to get created element." + NL + "\t\t\t\t\treturn newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
  protected final String TEXT_7 = " = new MetamodelType(" + NL + "\t\t\"";
  protected final String TEXT_8 = "\",\tnull, null," + NL + "\t\t";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "()," + NL + "\t\tnew ";
  protected final String TEXT_11 = "_EditHelper());";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static void register() {";
  protected final String TEXT_13 = NL + "\t\tElementTypeRegistry.getInstance().register(";
  protected final String TEXT_14 = ");";
  protected final String TEXT_15 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class BaseEditHelper extends MSLEditHelper {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ICommand getEditContextCommand(GetEditContextRequest req) {" + NL + "\t\t\tGetEditContextCommand result = null;" + NL + "\t\t\tIEditCommandRequest editRequest = req.getEditCommandRequest();" + NL + "\t\t\tif (editRequest instanceof CreateElementRequest) {" + NL + "\t\t\t\tresult = new GetEditContextCommand(req);" + NL + "\t\t\t\tEObject container = ((CreateElementRequest) editRequest).getContainer();" + NL + "\t\t\t\tif (container instanceof View) {" + NL + "\t\t\t\t\tcontainer = ((View) container).getElement();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tresult.setEditContext(container);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_16 = NL;
d67 9
d78 1
a78 1
Iterator entities = AccessUtil.getGenEntities(genDiagram);
d98 4
a101 1
    stringBuffer.append(entity.getUniqueIdentifier());
d103 6
a108 1
    stringBuffer.append(semanticNodeInterfaceName);
d110 1
a110 1
    stringBuffer.append(semanticPackageInterfaceName);
d112 1
a112 1
    stringBuffer.append(semanticNodeInterfaceName);
d114 4
a117 1
    stringBuffer.append(entity.getUniqueIdentifier());
d119 1
a119 1
    }
d121 43
d165 1
a165 1
    stringBuffer.append(TEXT_13);
d167 1
a167 1
    stringBuffer.append(TEXT_14);
d169 1
a169 1
    stringBuffer.append(TEXT_15);
d171 1
a171 1
    stringBuffer.append(TEXT_16);
@


1.3
log
@[ashatalin]
#111773 Multiple views for single domain metaelement based on it's state
#111782 Support same metaelement both as top-level and inner diagram element
@
text
@d67 1
a67 2
	String semanticNodeInterfaceNameUnique = semanticNodeInterfaceName + "_" + entity.getVisualID();
	types.add(semanticNodeInterfaceNameUnique);
d70 1
a70 1
    stringBuffer.append(semanticNodeInterfaceNameUnique);
d72 1
a72 1
    stringBuffer.append(semanticNodeInterfaceNameUnique);
d80 1
a80 1
    stringBuffer.append(semanticNodeInterfaceNameUnique);
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.common.core.command.ICommand;" + NL + "import org.eclipse.gmf.runtime.emf.commands.core.edithelpers.MSLEditHelper;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IMetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.MetamodelType;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.commands.GetEditContextCommand;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.GetEditContextRequest;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d25 1
a25 1
  protected final String TEXT_6 = "EditHelper extends BaseEditHelper {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final IMetamodelType ";
d30 1
a30 1
  protected final String TEXT_11 = "EditHelper());";
d67 2
a68 1
	types.add(semanticNodeInterfaceName);
d71 1
a71 1
    stringBuffer.append(semanticNodeInterfaceName);
d73 1
a73 1
    stringBuffer.append(semanticNodeInterfaceName);
d81 1
a81 1
    stringBuffer.append(semanticNodeInterfaceName);
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d50 1
a50 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@

