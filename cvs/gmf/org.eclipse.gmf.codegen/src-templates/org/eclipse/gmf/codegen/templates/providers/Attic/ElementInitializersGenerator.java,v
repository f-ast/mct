head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070103-0300:1.4
	M4_20:1.4
	v20061222-1800:1.4
	R1_0_maintenance:1.3.0.2
	R1_0:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2007.09.10.21.17.30;	author dstadnik;	state dead;
branches;
next	1.9;
commitid	153446e5b4694567;

1.9
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	17ef46643bcf4567;

1.8
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.7;
commitid	7de14650454a4567;

1.7
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	78b462dc68e4567;

1.6
date	2007.03.08.01.02.29;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	bd645ef60a44567;

1.5
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	271945b8e1904567;

1.4
date	2006.12.20.02.16.53;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	1ea745889d114567;

1.3
date	2005.10.25.18.28.41;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2005.10.25.11.31.55;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.20.16.04.35;	author atikhomirov;	state Exp;
branches;
next	;

1.9.2.1
date	2007.09.10.20.58.22;	author dstadnik;	state dead;
branches;
next	;
commitid	f4446e5afed4567;


desc
@@


1.10
log
@rewrite element initializer in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ElementInitializersGenerator
{
  protected static String nl;
  public static synchronized ElementInitializersGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ElementInitializersGenerator result = new ElementInitializersGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ElementInitializers {";
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_7 = "\t\t";
  protected final String TEXT_8 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final IObjectInitializer ";
  protected final String TEXT_9 = " = new ObjectInitializer(";
  protected final String TEXT_10 = ") {";
  protected final String TEXT_11 = NL + "\t\tObjectInitializer ";
  protected final String TEXT_12 = "() {" + NL + "\t\t\treturn new ObjectInitializer(";
  protected final String TEXT_13 = ") {";
  protected final String TEXT_14 = NL + "\t\t \tprotected void init() {\t\t\t\t";
  protected final String TEXT_15 = "\t\t\t" + NL + "\t\t\t\tadd(createNewElementFeatureInitializer(";
  protected final String TEXT_16 = ", new ObjectInitializer[] {";
  protected final String TEXT_17 = NL + "\t\t\t\t\t";
  protected final String TEXT_18 = "(), ";
  protected final String TEXT_19 = NL + "\t\t\t\t}));";
  protected final String TEXT_20 = "\t\t\t" + NL + "\t\t\t\tadd(createExpressionFeatureInitializer(";
  protected final String TEXT_21 = ", ";
  protected final String TEXT_22 = "null";
  protected final String TEXT_23 = ".";
  protected final String TEXT_24 = "(";
  protected final String TEXT_25 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_26 = ", ";
  protected final String TEXT_27 = ")";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = "(";
  protected final String TEXT_30 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_31 = ")";
  protected final String TEXT_32 = "new ";
  protected final String TEXT_33 = "(";
  protected final String TEXT_34 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_35 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_36 = " self = (";
  protected final String TEXT_37 = ")context;";
  protected final String TEXT_38 = "\t" + NL + "\t\t";
  protected final String TEXT_39 = " ";
  protected final String TEXT_40 = " = (";
  protected final String TEXT_41 = ")env.get(\"";
  protected final String TEXT_42 = "\"); //$NON-NLS-1$";
  protected final String TEXT_43 = NL + "\t\treturn ";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = "(self";
  protected final String TEXT_46 = ", ";
  protected final String TEXT_47 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_48 = NL + "));";
  protected final String TEXT_49 = "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t\t\t}; // ";
  protected final String TEXT_51 = " ObjectInitializer" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t}; // ";
  protected final String TEXT_53 = " ObjectInitializer";
  protected final String TEXT_54 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static interface IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_55 = " instance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static abstract class ObjectInitializer implements IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tfinal ";
  protected final String TEXT_56 = " element;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_57 = " featureInitializers = new ";
  protected final String TEXT_58 = "();" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tObjectInitializer(";
  protected final String TEXT_59 = " element) {" + NL + "\t\t\t\tthis.element = element;" + NL + "\t\t\t\tinit();" + NL + "\t\t\t}" + NL + "\t\t\t/**" + NL + "\t\t \t * @@generated" + NL + "\t\t \t */" + NL + "\t\t \tprotected abstract void init();\t\t\t\t\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprotected final IFeatureInitializer add(IFeatureInitializer initializer) {" + NL + "\t\t\t\tfeatureInitializers.add(initializer);" + NL + "\t\t\t\treturn initializer;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_60 = " instance) {" + NL + "\t\t\t\tfor (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tIFeatureInitializer nextExpr = (IFeatureInitializer)it.next();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_61 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface IFeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createNewElementFeatureInitializer(";
  protected final String TEXT_62 = " initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_63 = " feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new IFeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_64 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createExpressionFeatureInitializer(";
  protected final String TEXT_65 = " initFeature, ";
  protected final String TEXT_66 = " valueExpression) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_67 = " feature = initFeature;" + NL + "\t\t\tfinal ";
  protected final String TEXT_68 = " expression = valueExpression;" + NL + "\t\t\treturn new IFeatureInitializer() {\t\t\t\t" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\texpression.assignTo(feature, contextInstance);" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t}\t\t";
  protected final String TEXT_69 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_70 = " {";
  protected final String TEXT_71 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_72 = " ";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = " self";
  protected final String TEXT_75 = ", ";
  protected final String TEXT_76 = " ";
  protected final String TEXT_77 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_78 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_79 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_80 = NL + "\t\t} //";
  protected final String TEXT_81 = NL + "\t} // end of Initializers";
  protected final String TEXT_82 = NL + "}";
  protected final String TEXT_83 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    
importManager.registerInnerClass("Initializers");
importManager.registerInnerClass("IObjectInitializer");
importManager.registerInnerClass("ObjectInitializer");
importManager.registerInnerClass("IFeatureInitializer");
final String javaExprContainer = "Java";
importManager.registerInnerClass(javaExprContainer);

    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
    stringBuffer.append(TEXT_5);
    
int elementInitializerCount = 0;
List elements = new LinkedList();
if (genDiagram.getElementType() != null) {
	elements.add(genDiagram);
}
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	GenCommonBase genElement;
	TypeModelFacet typeModelFacet = null;
	if (next instanceof GenNode) {
		genElement = (GenCommonBase) next;
		typeModelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink) {
		genElement = (GenCommonBase) next;
		ModelFacet modelFacet = ((GenLink) next).getModelFacet();
		if (modelFacet instanceof TypeLinkModelFacet) {
			typeModelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
		}
	} else {
		continue;
	}
	if (typeModelFacet != null && typeModelFacet.getModelElementInitializer() != null) {
		elementInitializerCount++;
	}
	if (genElement.getElementType() != null) {
		elements.add(genElement);
	}
}
if(elementInitializerCount > 0 && genDiagram.getEditorGen().getExpressionProviders() != null) {
	final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
	final LinkedHashSet<GenFeatureValueSpec> javaInitializers = new LinkedHashSet<GenFeatureValueSpec>();
	final String __javaOperationContainer = javaExprContainer; // place java expression methods here
	final Map __exprEnvVariables = Collections.EMPTY_MAP;

    stringBuffer.append(TEXT_6);
    
for (Map.Entry<TypeModelFacet, GenCommonBase> next : genDiagram.getTypeModelFacet2GenBaseMap().entrySet()) {
	TypeModelFacet modelFacet = next.getKey();
	if (modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer) {
		GenFeatureSeqInitializer rootFtSeqInitializer = (GenFeatureSeqInitializer)modelFacet.getModelElementInitializer();				
		javaInitializers.addAll(rootFtSeqInitializer.getJavaExpressionFeatureInitializers(expressionProviders));
		String id = next.getValue().getUniqueIdentifier();
		for(GenFeatureSeqInitializer nextFtSeqInitializer : rootFtSeqInitializer.getAllFeatureSeqInitializers()) {
			boolean isTopLevelObjInit = nextFtSeqInitializer == rootFtSeqInitializer;

    stringBuffer.append(TEXT_7);
    			if(isTopLevelObjInit){
    stringBuffer.append(TEXT_8);
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(nextFtSeqInitializer.getElementClassAccessor(importManager));
    stringBuffer.append(TEXT_10);
    			} else {
    stringBuffer.append(TEXT_11);
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(nextFtSeqInitializer.getElementClassAccessor(importManager));
    stringBuffer.append(TEXT_13);
    			} 
    stringBuffer.append(TEXT_14);
    			for(GenFeatureInitializer nextFtInitializer : (List<GenFeatureInitializer>)nextFtSeqInitializer.getInitializers()) {
				String metaFeatureAccessor = nextFtSeqInitializer.getFeatureAccessor(nextFtInitializer, importManager);
				if(nextFtInitializer instanceof GenReferenceNewElementSpec) {
					GenReferenceNewElementSpec newElementSpec = (GenReferenceNewElementSpec)nextFtInitializer;

    stringBuffer.append(TEXT_15);
    stringBuffer.append(metaFeatureAccessor);
    stringBuffer.append(TEXT_16);
    					for(GenFeatureSeqInitializer newElemInit : (List<GenFeatureSeqInitializer>)newElementSpec.getNewElementInitializers()) { 
    stringBuffer.append(TEXT_17);
    stringBuffer.append(newElemInit.getInitializerFieldName(id));
    stringBuffer.append(TEXT_18);
    					} // end of newElementInitializers 
    stringBuffer.append(TEXT_19);
    				} // end of GenReferenceNewElementSpec
				else if(nextFtInitializer instanceof GenFeatureValueSpec) {
					String __outEnvVarName = ""; // no env to setup;
					GenClassifier __genExprContext = nextFtSeqInitializer.getElementClass();
					GenFeatureValueSpec __genValueExpression = (GenFeatureValueSpec)nextFtInitializer;

    stringBuffer.append(TEXT_20);
    stringBuffer.append(metaFeatureAccessor);
    stringBuffer.append(TEXT_21);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_22);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_27);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_31);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_32);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_33);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_37);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_42);
    		} 
    stringBuffer.append(TEXT_43);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_44);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_45);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_46);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_47);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_48);
    
				} // end of GenFeatureValueSpec
			} // end of GenFeatureInitializer iteration

    stringBuffer.append(TEXT_49);
    			if(!isTopLevelObjInit) { 
    stringBuffer.append(TEXT_50);
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_51);
    			} // GenFeatureInitializer iteration
		} // All GenFeatureSeqInitializer iteration

    stringBuffer.append(TEXT_52);
    stringBuffer.append(rootFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_53);
    
	} // (modelFacet.getModelElementInitializer() instanceof GenFeatureSeqInitializer)
}

    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_68);
    
	if(!javaInitializers.isEmpty()) {

    stringBuffer.append(TEXT_69);
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_70);
    
		for(GenFeatureValueSpec __genValueExpression : javaInitializers) {
			GenClassifier __genExprContext = __genValueExpression.getFeatureSeqInitializer().getElementClass();
			GenExpressionProviderBase provider = expressionProviders.getProvider(__genValueExpression);
			if(!(provider instanceof GenJavaExpressionProvider)) continue;
			String __genExprResultType = provider.getQualifiedTypeInstanceClassName(__genValueExpression.getFeature());

    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_74);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_77);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_78);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_79);
    
} /* end of GenJavaExpressionProvider */

    
		}

    stringBuffer.append(TEXT_80);
    stringBuffer.append(javaExprContainer);
    	} /* end of javaInitializers */ 
    stringBuffer.append(TEXT_81);
    }
    stringBuffer.append(TEXT_82);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_83);
    return stringBuffer.toString();
  }
}
@


1.9
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.9.2.1
log
@rewrite element initializers in xpand
@
text
@@


1.8
log
@Anna Karyakina's migration fix
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.7
log
@follow consisted spacing policy
@
text
@d20 3
a22 3
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
d24 79
a102 81
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ElementInitializers {";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class Initializers {";
  protected final String TEXT_8 = "\t\t";
  protected final String TEXT_9 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final IObjectInitializer ";
  protected final String TEXT_10 = " = new ObjectInitializer(";
  protected final String TEXT_11 = ") {";
  protected final String TEXT_12 = NL + "\t\tObjectInitializer ";
  protected final String TEXT_13 = "() {" + NL + "\t\t\treturn new ObjectInitializer(";
  protected final String TEXT_14 = ") {";
  protected final String TEXT_15 = NL + "\t\t \tprotected void init() {\t\t\t\t";
  protected final String TEXT_16 = "\t\t\t" + NL + "\t\t\t\tadd(createNewElementFeatureInitializer(";
  protected final String TEXT_17 = ", new ObjectInitializer[] {";
  protected final String TEXT_18 = NL + "\t\t\t\t\t";
  protected final String TEXT_19 = "(), ";
  protected final String TEXT_20 = NL + "\t\t\t\t}));";
  protected final String TEXT_21 = "\t\t\t" + NL + "\t\t\t\tadd(createExpressionFeatureInitializer(";
  protected final String TEXT_22 = ", ";
  protected final String TEXT_23 = "null";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = "(";
  protected final String TEXT_26 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_27 = ", ";
  protected final String TEXT_28 = ")";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = "(";
  protected final String TEXT_31 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_32 = ")";
  protected final String TEXT_33 = "new ";
  protected final String TEXT_34 = "(";
  protected final String TEXT_35 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_36 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_37 = " self = (";
  protected final String TEXT_38 = ")context;";
  protected final String TEXT_39 = "\t" + NL + "\t\t";
  protected final String TEXT_40 = " ";
  protected final String TEXT_41 = " = (";
  protected final String TEXT_42 = ")env.get(\"";
  protected final String TEXT_43 = "\"); //$NON-NLS-1$";
  protected final String TEXT_44 = NL + "\t\treturn ";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = "(self";
  protected final String TEXT_47 = ", ";
  protected final String TEXT_48 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_49 = NL + "));";
  protected final String TEXT_50 = "\t\t\t}";
  protected final String TEXT_51 = NL + "\t\t\t\t}; // ";
  protected final String TEXT_52 = " ObjectInitializer" + NL + "\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t}; // ";
  protected final String TEXT_54 = " ObjectInitializer";
  protected final String TEXT_55 = NL + "\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate Initializers() {" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static interface IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_56 = " instance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static abstract class ObjectInitializer implements IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tfinal ";
  protected final String TEXT_57 = " element;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_58 = " featureInitializers = new ";
  protected final String TEXT_59 = "();" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tObjectInitializer(";
  protected final String TEXT_60 = " element) {" + NL + "\t\t\t\tthis.element = element;" + NL + "\t\t\t\tinit();" + NL + "\t\t\t}" + NL + "\t\t\t/**" + NL + "\t\t \t * @@generated" + NL + "\t\t \t */" + NL + "\t\t \tprotected abstract void init();\t\t\t\t\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprotected final IFeatureInitializer add(IFeatureInitializer initializer) {" + NL + "\t\t\t\tfeatureInitializers.add(initializer);" + NL + "\t\t\t\treturn initializer;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_61 = " instance) {" + NL + "\t\t\t\tfor (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tIFeatureInitializer nextExpr = (IFeatureInitializer)it.next();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_62 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface IFeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createNewElementFeatureInitializer(";
  protected final String TEXT_63 = " initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_64 = " feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new IFeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_65 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createExpressionFeatureInitializer(";
  protected final String TEXT_66 = " initFeature, ";
  protected final String TEXT_67 = " valueExpression) {" + NL + "\t\t\tfinal ";
  protected final String TEXT_68 = " feature = initFeature;" + NL + "\t\t\tfinal ";
  protected final String TEXT_69 = " expression = valueExpression;" + NL + "\t\t\treturn new IFeatureInitializer() {\t\t\t\t" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\texpression.assignTo(feature, contextInstance);" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t}\t\t";
  protected final String TEXT_70 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_71 = " {";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_74 = " ";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = " self";
  protected final String TEXT_77 = ", ";
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_80 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_81 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_82 = NL + "\t\t} //";
  protected final String TEXT_83 = NL + "\t} // end of Initializers";
  protected final String TEXT_84 = NL + "}";
  protected final String TEXT_85 = NL;
a110 1
    stringBuffer.append(TEXT_1);
d115 2
a117 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d120 1
a120 1
    stringBuffer.append(TEXT_4);
d129 1
a129 1
    stringBuffer.append(TEXT_5);
d132 1
a132 1
    stringBuffer.append(TEXT_6);
d168 1
a168 1
    stringBuffer.append(TEXT_7);
d179 2
d182 1
a182 1
    			if(isTopLevelObjInit){
d184 1
a184 1
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
d186 1
a186 1
    stringBuffer.append(nextFtSeqInitializer.getElementClassAccessor(importManager));
d188 1
a188 1
    			} else {
d190 1
a190 1
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
d192 1
a192 1
    stringBuffer.append(nextFtSeqInitializer.getElementClassAccessor(importManager));
a193 2
    			} 
    stringBuffer.append(TEXT_15);
d199 2
d202 1
a202 1
    stringBuffer.append(metaFeatureAccessor);
d204 1
a204 1
    					for(GenFeatureSeqInitializer newElemInit : (List<GenFeatureSeqInitializer>)newElementSpec.getNewElementInitializers()) { 
d206 1
a206 1
    stringBuffer.append(newElemInit.getInitializerFieldName(id));
a207 2
    					} // end of newElementInitializers 
    stringBuffer.append(TEXT_20);
d214 2
a216 2
    stringBuffer.append(metaFeatureAccessor);
    stringBuffer.append(TEXT_22);
d232 1
a232 1
    stringBuffer.append(TEXT_23);
d241 2
d244 1
a244 1
    stringBuffer.append(__expressionAccessor);
d246 1
a246 1
    stringBuffer.append(__genValueExpression.getBodyString());
d248 1
a248 1
    stringBuffer.append(__ctxEClassifierAccess);
a249 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_28);
d254 2
d257 1
a257 1
    stringBuffer.append(__expressionAccessor);
d259 1
a259 1
    stringBuffer.append(__genValueExpression.getBodyString());
a260 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_32);
d268 2
d271 1
a271 1
    stringBuffer.append(__importedAbstractClass);
d273 1
a273 1
    stringBuffer.append(__ctxEClassifierAccess);
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a278 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_38);
d285 2
d288 2
d291 1
a291 1
    stringBuffer.append(TEXT_40);
a292 2
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d294 1
a294 1
    stringBuffer.append(nextVariableName);
a295 2
    		} 
    stringBuffer.append(TEXT_44);
d299 1
a299 1
    stringBuffer.append(TEXT_45);
d303 1
a303 1
    stringBuffer.append(TEXT_46);
d306 1
a306 1
    stringBuffer.append(TEXT_47);
d309 1
a309 1
    stringBuffer.append(TEXT_48);
d312 1
a312 1
    stringBuffer.append(TEXT_49);
d317 2
d320 1
a320 1
    			if(!isTopLevelObjInit) { 
a321 2
    stringBuffer.append(nextFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_52);
d325 2
a327 2
    stringBuffer.append(rootFtSeqInitializer.getInitializerFieldName(id));
    stringBuffer.append(TEXT_54);
d332 2
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d347 1
a347 1
    stringBuffer.append(pluginClassName);
d351 2
a353 2
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d355 2
d358 1
a358 1
    stringBuffer.append(TEXT_66);
a359 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
a360 2
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_69);
d364 2
a366 2
    stringBuffer.append(javaExprContainer);
    stringBuffer.append(TEXT_71);
a373 1
    stringBuffer.append(TEXT_72);
d394 1
a394 1
    stringBuffer.append(TEXT_73);
d396 1
a396 1
    stringBuffer.append(TEXT_74);
d398 1
a398 1
    stringBuffer.append(TEXT_75);
d400 1
a400 1
    stringBuffer.append(TEXT_76);
d408 1
a408 1
    stringBuffer.append(TEXT_77);
d410 1
a410 1
    stringBuffer.append(TEXT_78);
d414 1
a414 1
    stringBuffer.append(TEXT_79);
d416 1
a416 1
    stringBuffer.append(TEXT_80);
d418 1
a418 1
    stringBuffer.append(TEXT_81);
d425 1
a425 1
    stringBuffer.append(TEXT_82);
d428 1
a428 1
    stringBuffer.append(TEXT_83);
d430 1
a430 1
    stringBuffer.append(TEXT_84);
d432 1
a432 1
    stringBuffer.append(TEXT_85);
@


1.6
log
@avoid unused imports in generated code
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d119 1
a119 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.5
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d24 1
a24 1
  protected final String TEXT_5 = NL + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;";
d75 30
a104 24
  protected final String TEXT_56 = " instance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tpublic static abstract class ObjectInitializer implements IObjectInitializer {" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tfinal EClass element;\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_57 = " featureInitializers = new ";
  protected final String TEXT_58 = "();" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tObjectInitializer(EClass element) {" + NL + "\t\t\t\tthis.element = element;" + NL + "\t\t\t\tinit();" + NL + "\t\t\t}" + NL + "\t\t\t/**" + NL + "\t\t \t * @@generated" + NL + "\t\t \t */" + NL + "\t\t \tprotected abstract void init();\t\t\t\t\t\t\t" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tprotected final IFeatureInitializer add(IFeatureInitializer initializer) {" + NL + "\t\t\t\tfeatureInitializers.add(initializer);" + NL + "\t\t\t\treturn initializer;" + NL + "\t\t\t}" + NL + "\t\t\t/** " + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tpublic void init(";
  protected final String TEXT_59 = " instance) {" + NL + "\t\t\t\tfor (java.util.Iterator it = featureInitializers.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tIFeatureInitializer nextExpr = (IFeatureInitializer)it.next();" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t\t\t} catch(RuntimeException e) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_60 = ".getInstance().logError(\"Feature initialization failed\", e); //$NON-NLS-1$\t\t\t\t\t\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t} // end of ObjectInitializer" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tinterface IFeatureInitializer {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */" + NL + "\t\t\tvoid init(EObject contextInstance);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createNewElementFeatureInitializer(EStructuralFeature initFeature, ObjectInitializer[] newObjectInitializers) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ObjectInitializer[] initializers = newObjectInitializers;" + NL + "\t\t\treturn new IFeatureInitializer() {" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\tfor (int i = 0; i < initializers.length; i++) {" + NL + "\t\t\t\t\t\tEObject newInstance = initializers[i].element.getEPackage().getEFactoryInstance().create(initializers[i].element);" + NL + "\t\t\t\t\t\tif(feature.isMany()) {" + NL + "\t\t\t\t\t\t\t((";
  protected final String TEXT_61 = ")contextInstance.eGet(feature)).add(newInstance);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tcontextInstance.eSet(feature, newInstance);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tinitializers[i].init(newInstance);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic IFeatureInitializer createExpressionFeatureInitializer(EStructuralFeature initFeature, ";
  protected final String TEXT_62 = " valueExpression) {" + NL + "\t\t\tfinal EStructuralFeature feature = initFeature;" + NL + "\t\t\tfinal ";
  protected final String TEXT_63 = " expression = valueExpression;" + NL + "\t\t\treturn new IFeatureInitializer() {\t\t\t\t" + NL + "\t\t\t\tpublic void init(EObject contextInstance) {" + NL + "\t\t\t\t\texpression.assignTo(feature, contextInstance);" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t}\t\t";
  protected final String TEXT_64 = NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class ";
  protected final String TEXT_65 = " {";
  protected final String TEXT_66 = NL;
  protected final String TEXT_67 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_68 = " ";
  protected final String TEXT_69 = "(";
  protected final String TEXT_70 = " self";
  protected final String TEXT_71 = ", ";
  protected final String TEXT_72 = " ";
  protected final String TEXT_73 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_74 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_75 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_76 = NL + "\t\t} //";
  protected final String TEXT_77 = NL + "\t} // end of Initializers";
  protected final String TEXT_78 = NL + "}";
  protected final String TEXT_79 = NL;
d338 2
d341 1
a341 1
    stringBuffer.append(TEXT_57);
d343 3
a345 1
    stringBuffer.append(TEXT_58);
d347 1
a347 1
    stringBuffer.append(TEXT_59);
d349 5
a353 1
    stringBuffer.append(TEXT_60);
d355 3
a357 1
    stringBuffer.append(TEXT_61);
d359 3
a361 1
    stringBuffer.append(TEXT_62);
d363 1
a363 1
    stringBuffer.append(TEXT_63);
d367 1
a367 1
    stringBuffer.append(TEXT_64);
d369 1
a369 1
    stringBuffer.append(TEXT_65);
d377 1
a377 1
    stringBuffer.append(TEXT_66);
d398 1
a398 1
    stringBuffer.append(TEXT_67);
d400 1
a400 1
    stringBuffer.append(TEXT_68);
d402 1
a402 1
    stringBuffer.append(TEXT_69);
d404 1
a404 1
    stringBuffer.append(TEXT_70);
d412 1
a412 1
    stringBuffer.append(TEXT_71);
d414 1
a414 1
    stringBuffer.append(TEXT_72);
d418 1
a418 1
    stringBuffer.append(TEXT_73);
d420 1
a420 1
    stringBuffer.append(TEXT_74);
d422 1
a422 1
    stringBuffer.append(TEXT_75);
d429 1
a429 1
    stringBuffer.append(TEXT_76);
d432 1
a432 1
    stringBuffer.append(TEXT_77);
d434 1
a434 1
    stringBuffer.append(TEXT_78);
d436 1
a436 1
    stringBuffer.append(TEXT_79);
@


1.4
log
@rewrite element types in xpand
@
text
@a231 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d241 1
a241 1
    stringBuffer.append(__bodyLiteral);
d254 1
a254 1
    stringBuffer.append(__bodyLiteral);
d357 1
a357 1
			String __genExprResultType = provider.getQualifiedInstanceClassName(__genValueExpression.getFeature());
@


1.3
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@d4 1
a4 1
import org.eclipse.emf.ecore.*;
d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
d20 79
a98 35
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " {";
  protected final String TEXT_6 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tprivate static final ObjectInitializer ";
  protected final String TEXT_7 = " = new ObjectInitializer(new FeatureInitializer[] {" + NL + "\t\t";
  protected final String TEXT_8 = NL + "\t\tnew FeatureInitializer(\"";
  protected final String TEXT_9 = "\", //$NON-NLS-1$" + NL + "\t\t\t\t\t";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "()," + NL + "\t\t\t\t\t";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "())";
  protected final String TEXT_14 = NL + "\t\t";
  protected final String TEXT_15 = NL + "\t});";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static final void ";
  protected final String TEXT_18 = "(";
  protected final String TEXT_19 = " element) {" + NL + "\t\t";
  protected final String TEXT_20 = ".init(element);" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate ";
  protected final String TEXT_22 = "() {" + NL + "\t}" + NL + "\t";
  protected final String TEXT_23 = NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class ObjectInitializer {" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tvoid init(";
  protected final String TEXT_24 = " instance) {" + NL + "\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class FeatureInitializer {" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_25 = " contextClass;\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_26 = " sFeature;" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_27 = " expressionBody;\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_28 = " query;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tFeatureInitializer(";
  protected final String TEXT_29 = " expression, " + NL + "\t\t\t";
  protected final String TEXT_30 = " context, " + NL + "\t\t\t";
  protected final String TEXT_31 = " sFeature) {" + NL + "\t\t\tthis.sFeature = sFeature;" + NL + "\t\t\tthis.expressionBody = expression;" + NL + "\t\t\tthis.contextClass\t= context;" + NL + "\t\t}" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tvoid init(";
  protected final String TEXT_32 = " contextInstance) {" + NL + "\t\t\tif(this.query == null) {" + NL + "\t\t\t\tthis.query = ";
  protected final String TEXT_33 = ".eINSTANCE.createQuery(expressionBody, contextClass);\t\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_34 = NL + "}";
  protected final String TEXT_35 = NL;
d102 5
a106 2
    StringBuffer stringBuffer = new StringBuffer();
    GenDiagram genDiagram = (GenDiagram) argument;
d108 4
a111 1
    stringBuffer.append(genDiagram.getElementInitializersPackageName());
d113 1
a113 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d115 2
a116 1
    importManager.markImportLocation(stringBuffer);
d118 8
a125 1
    stringBuffer.append(genDiagram.getElementInitializersClassName());
d127 3
d131 34
a164 11
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	EObject nextElement = (EObject)it.next();
	GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
	if(genElement == null || genElement.getModelElementInitializer() == null) continue;	
		
	GenElementInitializer initializer = genElement.getModelElementInitializer();
	if(initializer instanceof GenFeatureSeqInitializer) {
		GenFeatureSeqInitializer ftInitializer = (GenFeatureSeqInitializer)initializer;
	
    stringBuffer.append(TEXT_6);
    stringBuffer.append(initializer.getElement().getUniqueIdentifier());
d166 10
a175 2
     for(Iterator featInitIt = ftInitializer.getInitializers().iterator(); featInitIt.hasNext();) { 
				GenFeatureValueSpec featureValSpec = (GenFeatureValueSpec)featInitIt.next();
d177 1
a177 1
    stringBuffer.append(featureValSpec.getBody());
d179 1
a179 1
    stringBuffer.append(importManager.getImportedName(ftInitializer.getElementQualifiedPackageInterfaceName()));
d181 1
a181 1
    stringBuffer.append(ftInitializer.getElementClassAccessorName());
d183 1
a183 1
    stringBuffer.append(importManager.getImportedName(featureValSpec.getFeatureQualifiedPackageInterfaceName()));
d185 1
a185 2
    stringBuffer.append(featureValSpec.getFeature().getFeatureAccessorName()
					);
d187 1
a187 1
    stringBuffer.append(featInitIt.hasNext() ? "," : "");
d189 1
a189 2
    	}
		} 
d191 4
a194 1
    	} // end of FeatureSeqInitializer
d197 1
a197 9
    	int initializerCount = 0;
	for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
		EObject nextElement = (EObject)it.next();
		GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
		if(genElement == null || genElement.getModelElementInitializer() == null) continue;	
		
		GenElementInitializer initializer = genElement.getModelElementInitializer();
		initializerCount++;	
	
d199 1
a199 1
    stringBuffer.append(initializer.getInitializerMethodName());
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d203 1
a203 1
    stringBuffer.append(initializer.getElement().getUniqueIdentifier());
d205 6
a210 1
    	}
d212 1
a212 1
    stringBuffer.append(genDiagram.getElementInitializersClassName());
d214 15
a228 1
    if(initializerCount > 0){
d230 9
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("java.lang.String"));
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.Query"));
d248 4
a251 1
    stringBuffer.append(importManager.getImportedName("java.lang.String"));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d259 7
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ocl.query.QueryFactory"));
d267 39
d307 111
a417 1
    stringBuffer.append(TEXT_34);
d419 1
a419 1
    stringBuffer.append(TEXT_35);
@


1.2
log
@[rdvorak] #113522 correct context for initializers
@
text
@@


1.1
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d26 3
a28 3
  protected final String TEXT_7 = " = new ObjectInitializer(new FeatureInitializer[] {" + NL + "\t\tnew FeatureInitializer(\t" + NL + "\t\t";
  protected final String TEXT_8 = "\"";
  protected final String TEXT_9 = "\", ";
d30 25
a54 17
  protected final String TEXT_11 = "()), //$NON-NLS-1$" + NL + "\t\t\t";
  protected final String TEXT_12 = NL + "\t});";
  protected final String TEXT_13 = NL;
  protected final String TEXT_14 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static final void ";
  protected final String TEXT_15 = "(";
  protected final String TEXT_16 = " element) {" + NL + "\t\t";
  protected final String TEXT_17 = ".init(element);" + NL + "\t}";
  protected final String TEXT_18 = NL + NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate ";
  protected final String TEXT_19 = "() {" + NL + "\t}" + NL + "\t";
  protected final String TEXT_20 = NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class ObjectInitializer {" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate FeatureInitializer[] initExpressions;\t" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tObjectInitializer(FeatureInitializer[] initExpressions) {" + NL + "\t\t\tthis.initExpressions = initExpressions;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tvoid init(";
  protected final String TEXT_21 = " instance) {" + NL + "\t\t\tfor (int i = 0; i < initExpressions.length; i++) {" + NL + "\t\t\t\tFeatureInitializer nextExpr = initExpressions[i];" + NL + "\t\t\t\tnextExpr.init(instance);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/** " + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class FeatureInitializer {" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EStructuralFeature sFeature;" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_22 = " query;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tFeatureInitializer(String expression, ";
  protected final String TEXT_23 = " sFeature) {" + NL + "\t\t\tthis.query = ";
  protected final String TEXT_24 = ".eINSTANCE.createQuery(expression, sFeature.getEContainingClass());" + NL + "\t\t\tthis.sFeature = sFeature;" + NL + "\t\t}" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tvoid init(";
  protected final String TEXT_25 = " contextInstance) {" + NL + "\t\t\tObject value = query.evaluate(contextInstance);" + NL + "\t\t\tcontextInstance.eSet(sFeature, value);\t\t" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_26 = NL + "}";
  protected final String TEXT_27 = NL;
d77 1
d82 1
a82 1
     for(Iterator featInitIt = ((GenFeatureSeqInitializer)initializer).getInitializers().iterator(); featInitIt.hasNext();) { 
a83 4
				String packageClsQName = featureValSpec.getFeature().getGenClass().getGenPackage().getQualifiedPackageInterfaceName();
				String fAccessorName = featureValSpec.getFeature().getFeatureAccessorName();
				
				
d87 1
a87 1
    stringBuffer.append(importManager.getImportedName(packageClsQName));
d89 1
a89 1
    stringBuffer.append(fAccessorName);
d91 1
a91 2
    }
		}
d93 9
a101 1
    } // end of FeatureSeqInitializer
d103 1
a103 1
    stringBuffer.append(TEXT_13);
d113 1
a113 1
    stringBuffer.append(TEXT_14);
d115 1
a115 1
    stringBuffer.append(TEXT_15);
d117 1
a117 1
    stringBuffer.append(TEXT_16);
d119 1
a119 1
    stringBuffer.append(TEXT_17);
d121 1
a121 1
    stringBuffer.append(TEXT_18);
d123 1
a123 1
    stringBuffer.append(TEXT_19);
d125 1
a125 1
    stringBuffer.append(TEXT_20);
d127 7
a133 1
    stringBuffer.append(TEXT_21);
d135 5
a139 1
    stringBuffer.append(TEXT_22);
d141 3
a143 1
    stringBuffer.append(TEXT_23);
d145 1
a145 3
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_25);
d147 1
a147 1
    stringBuffer.append(TEXT_26);
d149 1
a149 1
    stringBuffer.append(TEXT_27);
@

