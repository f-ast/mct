head	1.40;
access;
symbols
	v20081022-1925:1.40
	v20081015-1925:1.40
	v20081008-1925:1.40
	v20081001-1925:1.40
	v20080924-1925:1.40
	v20080917-1925:1.40
	v20080911-1728:1.40
	v20080910-1520:1.40
	v20080903-1520:1.40
	v20080827-1520:1.40
	v20080813-1520:1.40
	v20080806-1520:1.40
	v20070903-0000:1.39
	v20070809-0000:1.39
	R2_0_maintenance:1.39.0.2
	R2_0:1.39
	R4_20:1.39
	v20070621-0000:1.39
	RC3_20:1.39
	v20070614-1400:1.39
	v20070608-1300:1.39
	v20070605-1400:1.39
	v20070601-1400:1.38
	v20070525-1500:1.38
	v20070520-1200:1.38
	v20070518-1300:1.37
	v20070504-1000:1.35
	v20070427-0600:1.35
	v20070420-1000:1.34
	v20070413-1300:1.34
	v20070405-1100:1.34
	v20070403-1500:1.34
	v20070330-1300:1.34
	v20060330-1300:1.34
	v20070322-1100:1.34
	v20060316-0600:1.34
	v20070307-0700:1.34
	v20070301-1200:1.34
	v20070228-2000:1.34
	v20070221-1500:1.34
	v20070208-1800:1.34
	v20070202-0200:1.29
	v20070103-0300:1.30
	M4_20:1.30
	v20061222-1800:1.30
	v20061218-1200:1.30
	v20061214-0000:1.30
	v20061120-1300:1.29
	M3_20:1.29
	v20061117-0800:1.29
	v20061027-1200:1.29
	v20061020-1000:1.29
	v20061013-1330:1.29
	v20060919-0800:1.29
	v20060907-1100:1.29
	M1_20:1.29
	v20060904-1500:1.29
	v20060824-1600:1.29
	v20060817-1500:1.29
	v20060728-0500:1.29
	v20060713-1700:1.29
	R1_0_maintenance:1.29.0.2
	R1_0:1.29
	v20060627-1200:1.29
	v20060626-1420:1.29
	v20060620-0400:1.28
	v20060616-1400:1.28
	v20060616-1200:1.28
	v20060609-1400:1.23
	v20060531-1730:1.22
	v20060530-1930:1.22
	v20060526-1200:1.20
	v20060519-1300:1.20
	v20060519-0800:1.20
	v20060512-1000:1.19
	I20060512-1000:1.19
	I20060505-1400:1.18
	I20060428-1300:1.18
	I20060424-0500:1.16
	I20060424-0300:1.16
	M6_10:1.15
	I20060407-1200:1.10
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.7
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.2
	I20060127-0900:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.40
date	2007.09.13.18.19.02;	author dstadnik;	state dead;
branches;
next	1.39;
commitid	51ec46e97f104567;

1.39
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches
	1.39.2.1;
next	1.38;
commitid	17ef46643bcf4567;

1.38
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.37;
commitid	7de14650454a4567;

1.37
date	2007.05.10.13.12.14;	author dstadnik;	state Exp;
branches;
next	1.36;
commitid	52b46431a2d4567;

1.36
date	2007.05.08.14.49.25;	author dstadnik;	state Exp;
branches;
next	1.35;
commitid	475646408df44567;

1.35
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.34;
commitid	78b462dc68e4567;

1.34
date	2007.02.08.18.06.48;	author atikhomirov;	state Exp;
branches;
next	1.33;
commitid	56b45cb66aa4567;

1.33
date	2007.02.07.00.37.48;	author atikhomirov;	state Exp;
branches;
next	1.32;
commitid	c5d45c91f504567;

1.32
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.31;
commitid	271945b8e1904567;

1.31
date	2007.01.11.15.30.00;	author dstadnik;	state Exp;
branches;
next	1.30;
commitid	3f6d45a657f64567;

1.30
date	2006.12.11.09.58.31;	author radvorak;	state Exp;
branches;
next	1.29;
commitid	5d2a457d2bc44567;

1.29
date	2006.06.21.22.26.21;	author radvorak;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.16.10.16.21;	author radvorak;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.15.15.39.44;	author radvorak;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches;
next	1.25;

1.25
date	2006.06.13.12.53.34;	author radvorak;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.09.19.39.00;	author radvorak;	state Exp;
branches;
next	1.23;

1.23
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.29.20.07.49;	author radvorak;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.05.11.18.37.54;	author radvorak;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.25.19.16.05;	author radvorak;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.20.19.36.27;	author radvorak;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.14.15.01.28;	author radvorak;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.10;

1.10
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.01.13.14.08;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.24.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.31.19.02.07;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	;

1.39.2.1
date	2007.09.13.18.16.19;	author dstadnik;	state dead;
branches;
next	;
commitid	485346e97e6f4567;


desc
@@


1.40
log
@rewrite validation prov in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.internal.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class ValidationProviderGenerator
{
  protected static String nl;
  public static synchronized ValidationProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ValidationProviderGenerator result = new ValidationProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractContributionItemProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean constraintsActive = false;\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean shouldConstraintsBePrivate() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (";
  protected final String TEXT_6 = ".ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_7 = ".ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runWithConstraints(View view, Runnable op) {" + NL + "\t\t\tfinal Runnable fop = op;" + NL + "\t\t\tRunnable task = new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\t\t\tfop.run();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tTransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(view);" + NL + "\t\t\tif (txDomain != null) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\ttxDomain.runExclusive(task);" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttask.run();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_9 = ".MODEL_ID.equals(";
  protected final String TEXT_10 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_12 = " implements ";
  protected final String TEXT_13 = " {";
  protected final String TEXT_14 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_15 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_16 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final ";
  protected final String TEXT_18 = " semanticCtxIdMap = new ";
  protected final String TEXT_19 = "();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_20 = NL + "\t\tsemanticCtxIdMap.put(String.valueOf(";
  protected final String TEXT_21 = "), ";
  protected final String TEXT_22 = ".class); //$NON-NLS-1$";
  protected final String TEXT_23 = NL + "\t}";
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_26 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_27 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_28 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_29 = NL + "\t}";
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_31 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_32 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_33 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_34 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_36 = " extends ";
  protected final String TEXT_37 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_38 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_39 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_40 = "null";
  protected final String TEXT_41 = ".";
  protected final String TEXT_42 = "(";
  protected final String TEXT_43 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_44 = ", ";
  protected final String TEXT_45 = ")";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_49 = ")";
  protected final String TEXT_50 = "new ";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_53 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_54 = " self = (";
  protected final String TEXT_55 = ")context;";
  protected final String TEXT_56 = "\t" + NL + "\t\t";
  protected final String TEXT_57 = " ";
  protected final String TEXT_58 = " = (";
  protected final String TEXT_59 = ")env.get(\"";
  protected final String TEXT_60 = "\"); //$NON-NLS-1$";
  protected final String TEXT_61 = NL + "\t\treturn ";
  protected final String TEXT_62 = ".";
  protected final String TEXT_63 = "(self";
  protected final String TEXT_64 = ", ";
  protected final String TEXT_65 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_66 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_67 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_68 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_69 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_70 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_71 = NL + "\t\t\t\treturn ";
  protected final String TEXT_72 = ".OK_STATUS;";
  protected final String TEXT_73 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_74 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_75 = ".calculateMetric(";
  protected final String TEXT_76 = ", evalCtx);";
  protected final String TEXT_77 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_78 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_79 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_80 = " {";
  protected final String TEXT_81 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_82 = " ";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = " self";
  protected final String TEXT_85 = ", ";
  protected final String TEXT_86 = " ";
  protected final String TEXT_87 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_88 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_89 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_90 = NL + "} //";
  protected final String TEXT_91 = NL + "} //";
  protected final String TEXT_92 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
final GenAuditRoot audits = genDiagram.getEditorGen().getAudits();
final boolean hasNotationModelAudit;
{
 boolean hasDiagramElementRule = false;
 if (audits != null) {
  for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
   GenAuditRule r = (GenAuditRule) it.next();
   if (r.getTarget() instanceof GenDiagramElementTarget || r.getTarget() instanceof GenNotationElementTarget) {
    hasDiagramElementRule = true;
    break;
   }
  }
 }
 hasNotationModelAudit = audits != null && hasDiagramElementRule;
}
final boolean rcp = genDiagram.getEditorGen().getApplication() != null;

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    
final java.util.HashSet<String> innerClasses = new java.util.HashSet<String>();
final String __javaOperationContainer = "JavaAudits";
if(audits != null) {
	innerClasses.add(__javaOperationContainer);
	//innerClasses.addAll(audits.getAllRequiredConstraintAdaptersLocalClassNames());
	for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
		GenAuditRule nextAudit = (GenAuditRule) it.next();
		if (nextAudit.isRequiresConstraintAdapter()) {
			String nextClassName = nextAudit.getConstraintAdapterLocalClassName();
			if (nextClassName != null) {
				innerClasses.add(nextClassName);
			}
		}
	}
	//innerClasses.addAll(audits.getAllContextSelectorsLocalClassNames());
	for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
		String nextClassName = ((GenAuditRule) it.next()).getContextSelectorLocalClassName();
		if(nextClassName != null) {
			innerClasses.add(nextClassName);
		}			
	}	
}
innerClasses.add("CtxSwitchStrategy");
innerClasses.add("ValidateAction");
for(java.util.Iterator it = innerClasses.iterator(); it.hasNext();) importManager.registerInnerClass((String)it.next()); 

importManager.markImportLocation(stringBuffer);

if (!rcp) {
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.emf.workspace.util.WorkspaceSynchronizer");
}
importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.Arrays");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.HashSet");
importManager.addImport("java.util.Set");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.common.util.Diagnostic");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.util.Diagnostician");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.emf.transaction.util.TransactionUtil");
importManager.addImport("org.eclipse.emf.validation.model.EvaluationMode");
importManager.addImport("org.eclipse.emf.validation.service.IBatchValidator");
importManager.addImport("org.eclipse.emf.validation.service.ModelValidationService");
importManager.addImport("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor");
importManager.addImport("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.OffscreenEditPartFactory");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil");
importManager.addImport("org.eclipse.emf.validation.model.IConstraintStatus");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.jface.action.Action");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.ui.IEditorPart");
importManager.addImport("org.eclipse.ui.PlatformUI");

    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getValidationProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    
boolean usesNotationContextSwitch = false;
java.util.List allAudits = (audits != null) ? audits.getRules() : java.util.Collections.EMPTY_LIST;
// mere pairs
java.util.HashMap<String, GenAuditRule> contextId2Audit = new java.util.HashMap<String, GenAuditRule>();
java.util.Map<GenCommonBase, String> view2SelectorMap = new java.util.IdentityHashMap<GenCommonBase, String>();
for(java.util.Iterator it = allAudits.iterator(); it.hasNext();) {
	GenAuditRule audit = (GenAuditRule)it.next();
	String contextID = (audit.getTarget() != null) ? audit.getTarget().getClientContextID() : null;
	if(contextID == null || contextId2Audit.containsKey(contextID)) continue;
	contextId2Audit.put(contextID, audit);
}
for (GenAuditRule audit : contextId2Audit.values()) {
	String selectorClassName = audit.getContextSelectorLocalClassName();

    stringBuffer.append(TEXT_11);
    stringBuffer.append(selectorClassName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.model.IClientSelector"));
    stringBuffer.append(TEXT_13);
    
	if(audit.getTarget() instanceof GenDiagramElementTarget) {
		usesNotationContextSwitch = true;
		GenDiagramElementTarget	diagramElement = (GenDiagramElementTarget)audit.getTarget();
		for(java.util.Iterator diagramElementIt = diagramElement.getElement().iterator(); diagramElementIt.hasNext();) {
			GenCommonBase nextElement = (GenCommonBase) diagramElementIt.next();
			view2SelectorMap.put(nextElement, selectorClassName);
		}

    stringBuffer.append(TEXT_14);
    stringBuffer.append(selectorClassName);
    stringBuffer.append(TEXT_15);
    	} else {
    stringBuffer.append(TEXT_16);
    
	} 
} // end of audits iteration
		
if(usesNotationContextSwitch) {

    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_19);
    
	for(java.util.Iterator it = view2SelectorMap.keySet().iterator(); it.hasNext();) {
		GenCommonBase nextView = (GenCommonBase)it.next();

    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(nextView.getEditPartQualifiedClassName()) + ".VISUAL_ID");
    stringBuffer.append(TEXT_21);
    stringBuffer.append(view2SelectorMap.get(nextView));
    stringBuffer.append(TEXT_22);
    	} // end of view ID iteration 
    stringBuffer.append(TEXT_23);
    
} // end of context map generation //usesNotationContextSwitch 

    stringBuffer.append(TEXT_24);
    if(hasNotationModelAudit) {
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
    stringBuffer.append(TEXT_26);
    	if(usesNotationContextSwitch) {
    stringBuffer.append(TEXT_27);
    } else {
    stringBuffer.append(TEXT_28);
    	} // end of usesNotationContextSwitch 
    stringBuffer.append(TEXT_29);
    } // end of hasNotationModelAudit			

if(usesNotationContextSwitch) {
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
    stringBuffer.append(TEXT_34);
    } // end of usesNotationContextSwitch

final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final java.util.Map __exprEnvVariables = java.util.Collections.EMPTY_MAP;
final String __outEnvVarName = ""; // no env to setup //$NON-NLS-1$ 
for(java.util.Iterator it = allAudits.iterator(); it.hasNext();) {
	GenAuditRule nextAudit = (GenAuditRule)it.next();
	if(nextAudit.isRequiresConstraintAdapter() && nextAudit.getRule() != null && nextAudit.getTarget() != null && nextAudit.getTarget().getContext() != null) {
		GenClassifier __genExprContext = nextAudit.getTarget().getContext();		 
		ValueExpression __genValueExpression = nextAudit.getRule();
		String importedExpressionBase = (expressionProviders != null) ? importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()) : "null"; //$NON-NLS-1$

    stringBuffer.append(TEXT_35);
    stringBuffer.append(nextAudit.getConstraintAdapterLocalClassName());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.AbstractModelConstraint"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importedExpressionBase);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(nextAudit.getConstraintAdapterLocalClassName());
    stringBuffer.append(TEXT_39);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_40);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_43);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_44);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_45);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_49);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_50);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_51);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_55);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_60);
    		} 
    stringBuffer.append(TEXT_61);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_62);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_63);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_64);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_65);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.IValidationContext"));
    stringBuffer.append(TEXT_67);
    		if(nextAudit.getTarget() instanceof GenDomainAttributeTarget) {
			GenDomainAttributeTarget attrTarget = (GenDomainAttributeTarget) nextAudit.getTarget();
			if(attrTarget.getAttribute() != null) {
				String fGetter = (attrTarget.getAttribute() != null) ? importManager.getImportedName(attrTarget.getAttribute().getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + attrTarget.getAttribute().getFeatureAccessorName() : ""; //$NON-NLS-1$ //$NON-NLS-2$

    stringBuffer.append(TEXT_68);
    stringBuffer.append(fGetter);
    stringBuffer.append(TEXT_69);
    				if(attrTarget.isNullAsError()) { 
    stringBuffer.append(TEXT_70);
    				} else {
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
    stringBuffer.append(TEXT_72);
    				} 
    stringBuffer.append(TEXT_73);
    			}
		} else if(nextAudit.getTarget() instanceof GenAuditedMetricTarget) {
			GenAuditedMetricTarget metricTarget = (GenAuditedMetricTarget)nextAudit.getTarget();
			String metricKey = (metricTarget.getMetric() != null) ? metricTarget.getMetric().getKey() : "";
			String metricProviderClassName = importManager.getImportedName(genDiagram.getMetricProviderQualifiedClassName());
    stringBuffer.append(TEXT_74);
    stringBuffer.append(metricProviderClassName);
    stringBuffer.append(TEXT_75);
    stringBuffer.append(Conversions.toStringLiteral(metricKey));
    stringBuffer.append(TEXT_76);
    
		}

    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
    stringBuffer.append(TEXT_78);
    
	}
} /*end of Adapters iteration*/

final java.util.List<GenAuditRule> javaExpressions = new java.util.ArrayList<GenAuditRule>();
if (audits != null && audits.getEditorGen().getExpressionProviders() != null) {
  GenExpressionProviderContainer exprProviders = audits.getEditorGen().getExpressionProviders();
  for (java.util.Iterator it = audits.getRules().iterator(); it.hasNext();) {
    GenAuditRule nextAudit = (GenAuditRule) it.next();
    if(nextAudit.getRule() != null && exprProviders.getProvider(nextAudit.getRule()) instanceof GenJavaExpressionProvider) {
      javaExpressions.add(nextAudit);
    }
  }
}

if(!javaExpressions.isEmpty()) {

    stringBuffer.append(TEXT_79);
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_80);
    
	for (GenAuditRule nextJavaRule : javaExpressions) {
		GenClassifier __genExprContext = nextJavaRule.getTarget().getContext();		
		ValueExpression __genValueExpression = nextJavaRule.getRule();
		String __genExprResultType = "java.lang.Boolean"; //$NON-NLS-1$

    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_84);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_87);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_89);
    
} /* end of GenJavaExpressionProvider */

    
	}

    stringBuffer.append(TEXT_90);
    stringBuffer.append(__javaOperationContainer);
    
} /* end of Java expression methods */

    stringBuffer.append(TEXT_91);
    stringBuffer.append(genDiagram.getValidationProviderClassName());
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_92);
    return stringBuffer.toString();
  }
}
@


1.39
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.39.2.1
log
@rewrite validation prov in xpand
@
text
@@


1.38
log
@Anna Karyakina's migration fix
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.37
log
@extract validate action from provider
@
text
@d20 92
a111 94
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractContributionItemProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean constraintsActive = false;\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean shouldConstraintsBePrivate() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (";
  protected final String TEXT_7 = ".ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_8 = ".ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runWithConstraints(View view, Runnable op) {" + NL + "\t\t\tfinal Runnable fop = op;" + NL + "\t\t\tRunnable task = new Runnable() {" + NL + "" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\t\t\tfop.run();" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tTransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(view);" + NL + "\t\t\tif (txDomain != null) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\ttxDomain.runExclusive(task);" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttask.run();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_10 = ".MODEL_ID.equals(";
  protected final String TEXT_11 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_13 = " implements ";
  protected final String TEXT_14 = " {";
  protected final String TEXT_15 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_16 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_17 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final ";
  protected final String TEXT_19 = " semanticCtxIdMap = new ";
  protected final String TEXT_20 = "();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_21 = NL + "\t\tsemanticCtxIdMap.put(String.valueOf(";
  protected final String TEXT_22 = "), ";
  protected final String TEXT_23 = ".class); //$NON-NLS-1$";
  protected final String TEXT_24 = NL + "\t}";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_27 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_28 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_29 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_30 = NL + "\t}";
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_32 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_33 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_34 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_35 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_37 = " extends ";
  protected final String TEXT_38 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_39 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_40 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_41 = "null";
  protected final String TEXT_42 = ".";
  protected final String TEXT_43 = "(";
  protected final String TEXT_44 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_45 = ", ";
  protected final String TEXT_46 = ")";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = "(";
  protected final String TEXT_49 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_50 = ")";
  protected final String TEXT_51 = "new ";
  protected final String TEXT_52 = "(";
  protected final String TEXT_53 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_54 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_55 = " self = (";
  protected final String TEXT_56 = ")context;";
  protected final String TEXT_57 = "\t" + NL + "\t\t";
  protected final String TEXT_58 = " ";
  protected final String TEXT_59 = " = (";
  protected final String TEXT_60 = ")env.get(\"";
  protected final String TEXT_61 = "\"); //$NON-NLS-1$";
  protected final String TEXT_62 = NL + "\t\treturn ";
  protected final String TEXT_63 = ".";
  protected final String TEXT_64 = "(self";
  protected final String TEXT_65 = ", ";
  protected final String TEXT_66 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_67 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_68 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_69 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_70 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_71 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_72 = NL + "\t\t\t\treturn ";
  protected final String TEXT_73 = ".OK_STATUS;";
  protected final String TEXT_74 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_75 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_76 = ".calculateMetric(";
  protected final String TEXT_77 = ", evalCtx);";
  protected final String TEXT_78 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_79 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_80 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_81 = " {";
  protected final String TEXT_82 = NL;
  protected final String TEXT_83 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_84 = " ";
  protected final String TEXT_85 = "(";
  protected final String TEXT_86 = " self";
  protected final String TEXT_87 = ", ";
  protected final String TEXT_88 = " ";
  protected final String TEXT_89 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_90 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_91 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_92 = NL + "} //";
  protected final String TEXT_93 = NL + "} //";
  protected final String TEXT_94 = NL;
a136 1
    stringBuffer.append(TEXT_1);
d141 2
a143 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d146 1
a146 1
    stringBuffer.append(TEXT_4);
d210 2
d213 1
a213 1
    stringBuffer.append(genDiagram.getValidationProviderClassName());
d217 1
a217 1
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
d219 1
a219 1
    stringBuffer.append(pluginActivatorClass);
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a222 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_11);
d238 2
d241 1
a241 1
    stringBuffer.append(selectorClassName);
a242 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.model.IClientSelector"));
    stringBuffer.append(TEXT_14);
d252 2
d255 1
a255 1
    stringBuffer.append(selectorClassName);
a256 2
    	} else {
    stringBuffer.append(TEXT_17);
d263 2
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a267 2
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_20);
d272 2
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName(nextView.getEditPartQualifiedClassName()) + ".VISUAL_ID");
d277 1
a277 1
    stringBuffer.append(view2SelectorMap.get(nextView));
a278 2
    	} // end of view ID iteration 
    stringBuffer.append(TEXT_24);
d282 2
d285 1
a285 1
    if(hasNotationModelAudit) {
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
d289 1
a289 1
    	if(usesNotationContextSwitch) {
d291 1
a291 1
    } else {
a292 2
    	} // end of usesNotationContextSwitch 
    stringBuffer.append(TEXT_30);
d296 2
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a304 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
    stringBuffer.append(TEXT_35);
d317 2
d320 1
a320 1
    stringBuffer.append(nextAudit.getConstraintAdapterLocalClassName());
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.AbstractModelConstraint"));
d324 1
a324 1
    stringBuffer.append(importedExpressionBase);
a325 2
    stringBuffer.append(nextAudit.getConstraintAdapterLocalClassName());
    stringBuffer.append(TEXT_40);
d341 1
a341 1
    stringBuffer.append(TEXT_41);
d350 2
d353 1
a353 1
    stringBuffer.append(__expressionAccessor);
d355 1
a355 1
    stringBuffer.append(__genValueExpression.getBodyString());
d357 1
a357 1
    stringBuffer.append(__ctxEClassifierAccess);
a358 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_46);
d363 2
d366 1
a366 1
    stringBuffer.append(__expressionAccessor);
d368 1
a368 1
    stringBuffer.append(__genValueExpression.getBodyString());
a369 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_50);
d377 2
d380 1
a380 1
    stringBuffer.append(__importedAbstractClass);
d382 1
a382 1
    stringBuffer.append(__ctxEClassifierAccess);
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a387 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_56);
d394 2
d397 2
d400 1
a400 1
    stringBuffer.append(TEXT_58);
a401 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d403 1
a403 1
    stringBuffer.append(nextVariableName);
a404 2
    		} 
    stringBuffer.append(TEXT_62);
d408 1
a408 1
    stringBuffer.append(TEXT_63);
d412 1
a412 1
    stringBuffer.append(TEXT_64);
d415 1
a415 1
    stringBuffer.append(TEXT_65);
d418 1
a418 1
    stringBuffer.append(TEXT_66);
d421 2
a423 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.IValidationContext"));
    stringBuffer.append(TEXT_68);
d429 2
d432 1
a432 1
    stringBuffer.append(fGetter);
d434 1
a434 1
    				if(attrTarget.isNullAsError()) { 
d436 1
a436 1
    				} else {
d438 1
a438 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
a439 2
    				} 
    stringBuffer.append(TEXT_74);
d445 2
d448 1
a448 1
    stringBuffer.append(metricProviderClassName);
a449 2
    stringBuffer.append(Conversions.toStringLiteral(metricKey));
    stringBuffer.append(TEXT_77);
d453 2
a455 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
    stringBuffer.append(TEXT_79);
d473 2
a475 2
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_81);
a481 1
    stringBuffer.append(TEXT_82);
d502 1
a502 1
    stringBuffer.append(TEXT_83);
d504 1
a504 1
    stringBuffer.append(TEXT_84);
d506 1
a506 1
    stringBuffer.append(TEXT_85);
d508 1
a508 1
    stringBuffer.append(TEXT_86);
d516 1
a516 1
    stringBuffer.append(TEXT_87);
d518 1
a518 1
    stringBuffer.append(TEXT_88);
d522 1
a522 1
    stringBuffer.append(TEXT_89);
d524 1
a524 1
    stringBuffer.append(TEXT_90);
d526 1
a526 1
    stringBuffer.append(TEXT_91);
d533 1
a533 1
    stringBuffer.append(TEXT_92);
d538 1
a538 1
    stringBuffer.append(TEXT_93);
d541 1
a541 1
    stringBuffer.append(TEXT_94);
@


1.36
log
@[178958] move code that iterates over diagnostics to location reusable in rcp
@
text
@d25 89
a113 133
  protected final String TEXT_6 = " extends AbstractContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean constraintsActive = false;\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean shouldConstraintsBePrivate() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\t";
  protected final String TEXT_7 = "new ";
  protected final String TEXT_8 = "(";
  protected final String TEXT_9 = NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_10 = "() {" + NL + "\t\t\t\t\t\t\tpublic void run(";
  protected final String TEXT_11 = " monitor) throws InterruptedException, ";
  protected final String TEXT_12 = " {" + NL + "\t\t\t\t\t\t\t\trunValidation(part.getDiagramEditPart(), part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t";
  protected final String TEXT_13 = ")";
  protected final String TEXT_14 = NL + "\t\t\t\t\t.run(new ";
  protected final String TEXT_15 = "());\t\t\t" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(View view) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tif(";
  protected final String TEXT_17 = ".openDiagram(view.eResource())) {" + NL + "\t\t\t\t\tIEditorPart editorPart = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();" + NL + "\t\t\t\t\tif(editorPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\t\t\trunValidation(((IDiagramWorkbenchPart)editorPart).getDiagramEditPart(), view);" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\trunNonUIValidation(view);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch(Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_18 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runNonUIValidation(View view) {" + NL + "\t\t\tDiagramEditPart diagramEditPart = OffscreenEditPartFactory.getInstance().createDiagramEditPart(view.getDiagram());" + NL + "\t\t\trunValidation(diagramEditPart, view);" + NL + "\t\t}\t\t" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(DiagramEditPart diagramEditPart, View view) {" + NL + "\t\t\tfinal View target = view;" + NL + "\t\t\tfinal DiagramEditPart diagramPart = diagramEditPart;" + NL + "\t\t\tRunnable task = new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\t\t\tvalidate(diagramPart, target);" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tTransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(target);" + NL + "\t\t\tif(txDomain != null) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\ttxDomain.runExclusive(task);" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_19 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttask.run();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Diagnostic runEMFValidator(View target) {" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\treturn new Diagnostician() {" + NL + "\t\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}.validate(target.getElement());" + NL + "\t\t\t}" + NL + "\t\t\treturn Diagnostic.OK_INSTANCE;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void validate(DiagramEditPart diagramEditPart, View target) {";
  protected final String TEXT_20 = NL + "\t\t\tIFile diagramFile = (target.eResource() != null) ? WorkspaceSynchronizer.getFile(target.eResource()) : null;" + NL + "\t\t\tif (diagramFile != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_21 = ".deleteMarkers(diagramFile);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\tDiagnostic diagnostic = runEMFValidator(target);";
  protected final String TEXT_23 = NL + "\t\t\tif (diagnostic.getSeverity() != Diagnostic.OK) {" + NL + "\t\t\t\t";
  protected final String TEXT_24 = ".openError(" + NL + "\t\t\t\t\t";
  protected final String TEXT_25 = ".getCurrent().getActiveShell(), \"Validation\", \"Validation failed.\"," + NL + "\t\t\t\t\t";
  protected final String TEXT_26 = ".toIStatus(diagnostic));" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\tcreateMarkers(diagramFile, diagnostic, diagramEditPart);";
  protected final String TEXT_28 = NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tvalidator.setIncludeLiveConstraints(true);" + NL + "\t\t\tif (target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\tIStatus status = validator.validate(target.getElement());";
  protected final String TEXT_29 = NL + "\t\t\t\tif (status.getSeverity() != IStatus.OK) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_30 = ".openError(" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_31 = ".getCurrent().getActiveShell(), \"Validation\", \"Validation failed.\", status);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}";
  protected final String TEXT_32 = NL + "\t\t\t\tcreateMarkers(diagramFile, status, diagramEditPart);";
  protected final String TEXT_33 = NL + "\t\t\t}";
  protected final String TEXT_34 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tIStatus status = validator.validate(target);";
  protected final String TEXT_35 = NL + "\t\t\tif (status.getSeverity() != IStatus.OK) {" + NL + "\t\t\t\t";
  protected final String TEXT_36 = ".openError(" + NL + "\t\t\t\t\t";
  protected final String TEXT_37 = ".getCurrent().getActiveShell(), \"Validation\", \"Validation failed.\", status);" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}";
  protected final String TEXT_38 = NL + "\t\t\tcreateMarkers(diagramFile, status, diagramEditPart);";
  protected final String TEXT_39 = NL + "\t\t\t";
  protected final String TEXT_40 = " mb =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_41 = "(" + NL + "\t\t\t\t\t";
  protected final String TEXT_42 = ".getCurrent().getActiveShell()," + NL + "\t\t\t\t\t";
  protected final String TEXT_43 = ".OK);" + NL + "\t\t\tmb.setText(\"Validation\");" + NL + "\t\t\tmb.setMessage(\"Model is valid.\");" + NL + "\t\t\tmb.open();";
  protected final String TEXT_44 = NL + "\t\t}";
  protected final String TEXT_45 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void createMarkers(IFile diagramFile, IStatus validationStatus, DiagramEditPart diagramEditPart) {" + NL + "\t\tif (validationStatus.isOK()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal IStatus rootStatus = validationStatus;" + NL + "\t\tList allStatuses = new ArrayList();" + NL + "\t\t";
  protected final String TEXT_46 = ".LazyElement2ViewMap element2ViewMap =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_47 = ".LazyElement2ViewMap(" + NL + "\t\t\t\t\t\tdiagramEditPart.getDiagramView(), collectTargetElements(rootStatus, new HashSet(), allStatuses));" + NL + "\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\tIConstraintStatus nextStatus = (IConstraintStatus) it.next();" + NL + "\t\t\tView view = ";
  protected final String TEXT_48 = ".findView(" + NL + "\t\t\t\t\tdiagramEditPart, nextStatus.getTarget(), element2ViewMap);\t\t\t" + NL + "\t\t\taddMarker(diagramFile, view.eResource().getURIFragment(view), " + NL + "\t\t\t\t\tEMFCoreUtil.getQualifiedName(nextStatus.getTarget(), true), " + NL + "\t\t\t\t\tnextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void createMarkers(IFile diagramFile, Diagnostic emfValidationStatus, DiagramEditPart diagramEditPart) {" + NL + "\t\tif (emfValidationStatus.getSeverity() == Diagnostic.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal Diagnostic rootStatus = emfValidationStatus;" + NL + "\t\tList allDiagnostics = new ArrayList();" + NL + "\t\t";
  protected final String TEXT_49 = ".LazyElement2ViewMap element2ViewMap =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_50 = ".LazyElement2ViewMap(" + NL + "\t\t\t\t\t\tdiagramEditPart.getDiagramView(), collectTargetElements(rootStatus, new HashSet(), allDiagnostics));" + NL + "\t\tfor (Iterator it = emfValidationStatus.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\tif (data != null && !data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\tEObject element = (EObject) data.get(0);" + NL + "\t\t\t\tView view = ";
  protected final String TEXT_51 = ".findView(" + NL + "\t\t\t\t\t\tdiagramEditPart, element, element2ViewMap);" + NL + "\t\t\t\taddMarker(diagramFile, view.eResource().getURIFragment(view)," + NL + "\t\t\t\t\t\tEMFCoreUtil.getQualifiedName(element, true), nextDiagnostic.getMessage()," + NL + "\t\t\t\t\t\tdiagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void addMarker(IFile file, String elementId, String location, String message, int statusSeverity) {" + NL + "\t\tif (file == null) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_52 = ".addMarker(" + NL + "\t\t\t\tfile, elementId, location, message, statusSeverity);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\tif (diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\treturn IStatus.OK;" + NL + "\t\t} else if (diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t} else if (diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\treturn IStatus.WARNING;" + NL + "\t\t} else if (diagnosticSeverity == Diagnostic.ERROR" + NL + "\t\t\t\t|| diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\treturn IStatus.ERROR;" + NL + "\t\t}" + NL + "\t\treturn IStatus.INFO;" + NL + "\t}\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static Set collectTargetElements(IStatus status, Set targetElementCollector, List allConstraintStatuses) {" + NL + "\t\tif (status instanceof IConstraintStatus) {" + NL + "\t\t\ttargetElementCollector.add(((IConstraintStatus)status).getTarget());" + NL + "\t\t\tallConstraintStatuses.add(status);" + NL + "\t\t}" + NL + "\t\tif (status.isMultiStatus()) {" + NL + "\t\t\tIStatus[] children = status.getChildren();" + NL + "\t\t\tfor (int i = 0; i < children.length; i++) {" + NL + "\t\t\t\tcollectTargetElements(children[i], targetElementCollector, allConstraintStatuses);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn targetElementCollector;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static Set collectTargetElements(Diagnostic diagnostic, Set targetElementCollector, List allDiagnostics) {" + NL + "\t\tList data = diagnostic.getData();" + NL + "\t\tEObject target = null;" + NL + "\t\tif (data != null && !data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\ttarget = (EObject) data.get(0);" + NL + "\t\t\ttargetElementCollector.add(target);\t" + NL + "\t\t\tallDiagnostics.add(diagnostic);" + NL + "\t\t}" + NL + "\t\tif (diagnostic.getChildren() != null && !diagnostic.getChildren().isEmpty()) {" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tcollectTargetElements((Diagnostic) it.next(), targetElementCollector, allDiagnostics);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn targetElementCollector;" + NL + "\t}";
  protected final String TEXT_53 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_54 = ".MODEL_ID.equals(";
  protected final String TEXT_55 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_56 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_57 = " implements ";
  protected final String TEXT_58 = " {";
  protected final String TEXT_59 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_60 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_61 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final ";
  protected final String TEXT_63 = " semanticCtxIdMap = new ";
  protected final String TEXT_64 = "();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_65 = NL + "\t\tsemanticCtxIdMap.put(String.valueOf(";
  protected final String TEXT_66 = "), ";
  protected final String TEXT_67 = ".class); //$NON-NLS-1$";
  protected final String TEXT_68 = NL + "\t}";
  protected final String TEXT_69 = NL;
  protected final String TEXT_70 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_71 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_72 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_73 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_74 = NL + "\t}";
  protected final String TEXT_75 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_76 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_77 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_78 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_79 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_80 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_81 = " extends ";
  protected final String TEXT_82 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_83 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_84 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_85 = "null";
  protected final String TEXT_86 = ".";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_89 = ", ";
  protected final String TEXT_90 = ")";
  protected final String TEXT_91 = ".";
  protected final String TEXT_92 = "(";
  protected final String TEXT_93 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_94 = ")";
  protected final String TEXT_95 = "new ";
  protected final String TEXT_96 = "(";
  protected final String TEXT_97 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_98 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_99 = " self = (";
  protected final String TEXT_100 = ")context;";
  protected final String TEXT_101 = "\t" + NL + "\t\t";
  protected final String TEXT_102 = " ";
  protected final String TEXT_103 = " = (";
  protected final String TEXT_104 = ")env.get(\"";
  protected final String TEXT_105 = "\"); //$NON-NLS-1$";
  protected final String TEXT_106 = NL + "\t\treturn ";
  protected final String TEXT_107 = ".";
  protected final String TEXT_108 = "(self";
  protected final String TEXT_109 = ", ";
  protected final String TEXT_110 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_111 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_112 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_113 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_114 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_115 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_116 = NL + "\t\t\t\treturn ";
  protected final String TEXT_117 = ".OK_STATUS;";
  protected final String TEXT_118 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_119 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_120 = ".calculateMetric(";
  protected final String TEXT_121 = ", evalCtx);";
  protected final String TEXT_122 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_123 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_124 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_125 = " {";
  protected final String TEXT_126 = NL;
  protected final String TEXT_127 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_128 = " ";
  protected final String TEXT_129 = "(";
  protected final String TEXT_130 = " self";
  protected final String TEXT_131 = ", ";
  protected final String TEXT_132 = " ";
  protected final String TEXT_133 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_134 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_135 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_136 = NL + "} //";
  protected final String TEXT_137 = NL + "} //";
  protected final String TEXT_138 = NL;
d216 1
a216 1
    if (!rcp) {
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation"));
d220 1
a220 1
    }
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
a225 90
    stringBuffer.append(importManager.getImportedName("java.lang.reflect.InvocationTargetException"));
    stringBuffer.append(TEXT_12);
    if (!rcp) {
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_19);
    if (!rcp) {
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
    stringBuffer.append(TEXT_21);
    }
    stringBuffer.append(TEXT_22);
    if (rcp) {
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.BasicDiagnostic"));
    stringBuffer.append(TEXT_26);
    } else {
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    if (rcp) {
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
    stringBuffer.append(TEXT_31);
    } else {
    stringBuffer.append(TEXT_32);
    }
    stringBuffer.append(TEXT_33);
    if (hasNotationModelAudit) {
    stringBuffer.append(TEXT_34);
    	if (rcp) {
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
    stringBuffer.append(TEXT_37);
    	} else {
    stringBuffer.append(TEXT_38);
    	}
    }
    if (rcp) {
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.MessageBox"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.MessageBox"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    if (!rcp) {
    stringBuffer.append(TEXT_45);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_46);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_47);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_49);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_50);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
    stringBuffer.append(TEXT_52);
    }
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_55);
d241 1
a241 1
    stringBuffer.append(TEXT_56);
d243 1
a243 1
    stringBuffer.append(TEXT_57);
d245 1
a245 1
    stringBuffer.append(TEXT_58);
d255 1
a255 1
    stringBuffer.append(TEXT_59);
d257 1
a257 1
    stringBuffer.append(TEXT_60);
d259 1
a259 1
    stringBuffer.append(TEXT_61);
d266 1
a266 1
    stringBuffer.append(TEXT_62);
d268 1
a268 1
    stringBuffer.append(TEXT_63);
d270 1
a270 1
    stringBuffer.append(TEXT_64);
d275 1
a275 1
    stringBuffer.append(TEXT_65);
d277 1
a277 1
    stringBuffer.append(TEXT_66);
d279 1
a279 1
    stringBuffer.append(TEXT_67);
d281 1
a281 1
    stringBuffer.append(TEXT_68);
d285 1
a285 1
    stringBuffer.append(TEXT_69);
d287 1
a287 1
    stringBuffer.append(TEXT_70);
d289 1
a289 1
    stringBuffer.append(TEXT_71);
d291 1
a291 1
    stringBuffer.append(TEXT_72);
d293 1
a293 1
    stringBuffer.append(TEXT_73);
d295 1
a295 1
    stringBuffer.append(TEXT_74);
d299 1
a299 1
    stringBuffer.append(TEXT_75);
d301 1
a301 1
    stringBuffer.append(TEXT_76);
d303 1
a303 1
    stringBuffer.append(TEXT_77);
d305 1
a305 1
    stringBuffer.append(TEXT_78);
d307 1
a307 1
    stringBuffer.append(TEXT_79);
d320 1
a320 1
    stringBuffer.append(TEXT_80);
d322 1
a322 1
    stringBuffer.append(TEXT_81);
d324 1
a324 1
    stringBuffer.append(TEXT_82);
d326 1
a326 1
    stringBuffer.append(TEXT_83);
d328 1
a328 1
    stringBuffer.append(TEXT_84);
d344 1
a344 1
    stringBuffer.append(TEXT_85);
d353 1
a353 1
    stringBuffer.append(TEXT_86);
d355 1
a355 1
    stringBuffer.append(TEXT_87);
d357 1
a357 1
    stringBuffer.append(TEXT_88);
d359 1
a359 1
    stringBuffer.append(TEXT_89);
d361 1
a361 1
    stringBuffer.append(TEXT_90);
d366 1
a366 1
    stringBuffer.append(TEXT_91);
d368 1
a368 1
    stringBuffer.append(TEXT_92);
d370 1
a370 1
    stringBuffer.append(TEXT_93);
d372 1
a372 1
    stringBuffer.append(TEXT_94);
d380 1
a380 1
    stringBuffer.append(TEXT_95);
d382 1
a382 1
    stringBuffer.append(TEXT_96);
d384 1
a384 1
    stringBuffer.append(TEXT_97);
d386 1
a386 1
    stringBuffer.append(TEXT_98);
d388 1
a388 1
    stringBuffer.append(TEXT_99);
d390 1
a390 1
    stringBuffer.append(TEXT_100);
d397 1
a397 1
    stringBuffer.append(TEXT_101);
d399 1
a399 1
    stringBuffer.append(TEXT_102);
d401 1
a401 1
    stringBuffer.append(TEXT_103);
d403 1
a403 1
    stringBuffer.append(TEXT_104);
d405 1
a405 1
    stringBuffer.append(TEXT_105);
d407 1
a407 1
    stringBuffer.append(TEXT_106);
d411 1
a411 1
    stringBuffer.append(TEXT_107);
d415 1
a415 1
    stringBuffer.append(TEXT_108);
d418 1
a418 1
    stringBuffer.append(TEXT_109);
d421 1
a421 1
    stringBuffer.append(TEXT_110);
d424 1
a424 1
    stringBuffer.append(TEXT_111);
d426 1
a426 1
    stringBuffer.append(TEXT_112);
d432 1
a432 1
    stringBuffer.append(TEXT_113);
d434 1
a434 1
    stringBuffer.append(TEXT_114);
d436 1
a436 1
    stringBuffer.append(TEXT_115);
d438 1
a438 1
    stringBuffer.append(TEXT_116);
d440 1
a440 1
    stringBuffer.append(TEXT_117);
d442 1
a442 1
    stringBuffer.append(TEXT_118);
d448 1
a448 1
    stringBuffer.append(TEXT_119);
d450 1
a450 1
    stringBuffer.append(TEXT_120);
d452 1
a452 1
    stringBuffer.append(TEXT_121);
d456 1
a456 1
    stringBuffer.append(TEXT_122);
d458 1
a458 1
    stringBuffer.append(TEXT_123);
d476 1
a476 1
    stringBuffer.append(TEXT_124);
d478 1
a478 1
    stringBuffer.append(TEXT_125);
d485 1
a485 1
    stringBuffer.append(TEXT_126);
d506 1
a506 1
    stringBuffer.append(TEXT_127);
d508 1
a508 1
    stringBuffer.append(TEXT_128);
d510 1
a510 1
    stringBuffer.append(TEXT_129);
d512 1
a512 1
    stringBuffer.append(TEXT_130);
d520 1
a520 1
    stringBuffer.append(TEXT_131);
d522 1
a522 1
    stringBuffer.append(TEXT_132);
d526 1
a526 1
    stringBuffer.append(TEXT_133);
d528 1
a528 1
    stringBuffer.append(TEXT_134);
d530 1
a530 1
    stringBuffer.append(TEXT_135);
d537 1
a537 1
    stringBuffer.append(TEXT_136);
d542 1
a542 1
    stringBuffer.append(TEXT_137);
d545 1
a545 1
    stringBuffer.append(TEXT_138);
@


1.35
log
@follow consisted spacing policy
@
text
@d46 41
a86 41
  protected final String TEXT_27 = NL + "\t\t\tif (diagramFile != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_28 = ".createMarkers(diagramFile, diagnostic, diagramEditPart);" + NL + "\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tvalidator.setIncludeLiveConstraints(true);" + NL + "\t\t\tif (target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\tIStatus status = validator.validate(target.getElement());";
  protected final String TEXT_30 = NL + "\t\t\t\tif (status.getSeverity() != IStatus.OK) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_31 = ".openError(" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_32 = ".getCurrent().getActiveShell(), \"Validation\", \"Validation failed.\", status);" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\t\tif (diagramFile != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_34 = ".createMarkers(diagramFile, status, diagramEditPart);" + NL + "\t\t\t\t}\t\t\t\t";
  protected final String TEXT_35 = NL + "\t\t\t}" + NL;
  protected final String TEXT_36 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tIStatus status = validator.validate(target);";
  protected final String TEXT_37 = NL + "\t\t\tif (status.getSeverity() != IStatus.OK) {" + NL + "\t\t\t\t";
  protected final String TEXT_38 = ".openError(" + NL + "\t\t\t\t\t";
  protected final String TEXT_39 = ".getCurrent().getActiveShell(), \"Validation\", \"Validation failed.\", status);" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}";
  protected final String TEXT_40 = NL + "\t\t\tif (diagramFile != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_41 = ".createMarkers(diagramFile, status, diagramEditPart);" + NL + "\t\t\t}";
  protected final String TEXT_42 = NL + "\t\t\t";
  protected final String TEXT_43 = " mb =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_44 = "(" + NL + "\t\t\t\t\t";
  protected final String TEXT_45 = ".getCurrent().getActiveShell()," + NL + "\t\t\t\t\t";
  protected final String TEXT_46 = ".OK);" + NL + "\t\t\tmb.setText(\"Validation\");" + NL + "\t\t\tmb.setMessage(\"Model is valid.\");" + NL + "\t\t\tmb.open();";
  protected final String TEXT_47 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_48 = ".MODEL_ID.equals(";
  protected final String TEXT_49 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_50 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_51 = " implements ";
  protected final String TEXT_52 = " {";
  protected final String TEXT_53 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_54 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_55 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_56 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final ";
  protected final String TEXT_57 = " semanticCtxIdMap = new ";
  protected final String TEXT_58 = "();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_59 = NL + "\t\tsemanticCtxIdMap.put(String.valueOf(";
  protected final String TEXT_60 = "), ";
  protected final String TEXT_61 = ".class); //$NON-NLS-1$";
  protected final String TEXT_62 = NL + "\t}";
  protected final String TEXT_63 = NL;
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_65 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_66 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_67 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
d88 7
a94 7
  protected final String TEXT_69 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_70 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_71 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_72 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_73 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_74 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_75 = " extends ";
d96 62
a157 56
  protected final String TEXT_77 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_78 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_79 = "null";
  protected final String TEXT_80 = ".";
  protected final String TEXT_81 = "(";
  protected final String TEXT_82 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_83 = ", ";
  protected final String TEXT_84 = ")";
  protected final String TEXT_85 = ".";
  protected final String TEXT_86 = "(";
  protected final String TEXT_87 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_88 = ")";
  protected final String TEXT_89 = "new ";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_92 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_93 = " self = (";
  protected final String TEXT_94 = ")context;";
  protected final String TEXT_95 = "\t" + NL + "\t\t";
  protected final String TEXT_96 = " ";
  protected final String TEXT_97 = " = (";
  protected final String TEXT_98 = ")env.get(\"";
  protected final String TEXT_99 = "\"); //$NON-NLS-1$";
  protected final String TEXT_100 = NL + "\t\treturn ";
  protected final String TEXT_101 = ".";
  protected final String TEXT_102 = "(self";
  protected final String TEXT_103 = ", ";
  protected final String TEXT_104 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_105 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_106 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_107 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_108 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_109 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_110 = NL + "\t\t\t\treturn ";
  protected final String TEXT_111 = ".OK_STATUS;";
  protected final String TEXT_112 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_113 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_114 = ".calculateMetric(";
  protected final String TEXT_115 = ", evalCtx);";
  protected final String TEXT_116 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_117 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_118 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_119 = " {";
  protected final String TEXT_120 = NL;
  protected final String TEXT_121 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_122 = " ";
  protected final String TEXT_123 = "(";
  protected final String TEXT_124 = " self";
  protected final String TEXT_125 = ", ";
  protected final String TEXT_126 = " ";
  protected final String TEXT_127 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_128 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_129 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_130 = NL + "} //";
  protected final String TEXT_131 = NL + "} //";
  protected final String TEXT_132 = NL;
d227 7
d249 1
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
d304 1
a304 1
    }
d306 1
a306 1
    if (rcp) {
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
d312 1
a312 1
    } else {
d314 1
a314 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
d316 1
a316 1
    }
d318 1
a318 1
    if(hasNotationModelAudit) {
d320 1
a320 1
    if (rcp) {
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
d324 3
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
d328 1
a328 1
    } else {
d330 1
a330 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
d332 1
a332 3
    }
    }
    if (rcp) {
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.MessageBox"));
d336 1
a336 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.MessageBox"));
d338 1
a338 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
d342 12
d355 1
a355 1
    stringBuffer.append(TEXT_47);
d357 1
a357 1
    stringBuffer.append(TEXT_48);
d359 1
a359 1
    stringBuffer.append(TEXT_49);
d375 1
a375 1
    stringBuffer.append(TEXT_50);
d377 1
a377 1
    stringBuffer.append(TEXT_51);
d379 1
a379 1
    stringBuffer.append(TEXT_52);
d389 1
a389 1
    stringBuffer.append(TEXT_53);
d391 1
a391 1
    stringBuffer.append(TEXT_54);
d393 1
a393 1
    stringBuffer.append(TEXT_55);
d400 1
a400 1
    stringBuffer.append(TEXT_56);
d402 1
a402 1
    stringBuffer.append(TEXT_57);
d404 1
a404 1
    stringBuffer.append(TEXT_58);
d409 1
a409 1
    stringBuffer.append(TEXT_59);
d411 1
a411 1
    stringBuffer.append(TEXT_60);
d413 1
a413 1
    stringBuffer.append(TEXT_61);
d415 1
a415 1
    stringBuffer.append(TEXT_62);
d419 1
a419 1
    stringBuffer.append(TEXT_63);
d421 1
a421 1
    stringBuffer.append(TEXT_64);
d423 1
a423 1
    stringBuffer.append(TEXT_65);
d425 1
a425 1
    stringBuffer.append(TEXT_66);
d427 1
a427 1
    stringBuffer.append(TEXT_67);
d429 1
a429 1
    stringBuffer.append(TEXT_68);
d433 1
a433 1
    stringBuffer.append(TEXT_69);
d435 1
a435 1
    stringBuffer.append(TEXT_70);
d437 1
a437 1
    stringBuffer.append(TEXT_71);
d439 1
a439 1
    stringBuffer.append(TEXT_72);
d441 1
a441 1
    stringBuffer.append(TEXT_73);
d454 1
a454 1
    stringBuffer.append(TEXT_74);
d456 1
a456 1
    stringBuffer.append(TEXT_75);
d458 1
a458 1
    stringBuffer.append(TEXT_76);
d460 1
a460 1
    stringBuffer.append(TEXT_77);
d462 1
a462 1
    stringBuffer.append(TEXT_78);
d478 1
a478 1
    stringBuffer.append(TEXT_79);
d487 1
a487 1
    stringBuffer.append(TEXT_80);
d489 1
a489 1
    stringBuffer.append(TEXT_81);
d491 1
a491 1
    stringBuffer.append(TEXT_82);
d493 1
a493 1
    stringBuffer.append(TEXT_83);
d495 1
a495 1
    stringBuffer.append(TEXT_84);
d500 1
a500 1
    stringBuffer.append(TEXT_85);
d502 1
a502 1
    stringBuffer.append(TEXT_86);
d504 1
a504 1
    stringBuffer.append(TEXT_87);
d506 1
a506 1
    stringBuffer.append(TEXT_88);
d514 1
a514 1
    stringBuffer.append(TEXT_89);
d516 1
a516 1
    stringBuffer.append(TEXT_90);
d518 1
a518 1
    stringBuffer.append(TEXT_91);
d520 1
a520 1
    stringBuffer.append(TEXT_92);
d522 1
a522 1
    stringBuffer.append(TEXT_93);
d524 1
a524 1
    stringBuffer.append(TEXT_94);
d531 1
a531 1
    stringBuffer.append(TEXT_95);
d533 1
a533 1
    stringBuffer.append(TEXT_96);
d535 1
a535 1
    stringBuffer.append(TEXT_97);
d537 1
a537 1
    stringBuffer.append(TEXT_98);
d539 1
a539 1
    stringBuffer.append(TEXT_99);
d541 1
a541 1
    stringBuffer.append(TEXT_100);
d545 1
a545 1
    stringBuffer.append(TEXT_101);
d549 1
a549 1
    stringBuffer.append(TEXT_102);
d552 1
a552 1
    stringBuffer.append(TEXT_103);
d555 1
a555 1
    stringBuffer.append(TEXT_104);
d558 1
a558 1
    stringBuffer.append(TEXT_105);
d560 1
a560 1
    stringBuffer.append(TEXT_106);
d566 1
a566 1
    stringBuffer.append(TEXT_107);
d568 1
a568 1
    stringBuffer.append(TEXT_108);
d570 1
a570 1
    stringBuffer.append(TEXT_109);
d572 1
a572 1
    stringBuffer.append(TEXT_110);
d574 1
a574 1
    stringBuffer.append(TEXT_111);
d576 1
a576 1
    stringBuffer.append(TEXT_112);
d582 1
a582 1
    stringBuffer.append(TEXT_113);
d584 1
a584 1
    stringBuffer.append(TEXT_114);
d586 1
a586 1
    stringBuffer.append(TEXT_115);
d590 1
a590 1
    stringBuffer.append(TEXT_116);
d592 1
a592 1
    stringBuffer.append(TEXT_117);
d610 1
a610 1
    stringBuffer.append(TEXT_118);
d612 1
a612 1
    stringBuffer.append(TEXT_119);
d619 1
a619 1
    stringBuffer.append(TEXT_120);
d640 1
a640 1
    stringBuffer.append(TEXT_121);
d642 1
a642 1
    stringBuffer.append(TEXT_122);
d644 1
a644 1
    stringBuffer.append(TEXT_123);
d646 1
a646 1
    stringBuffer.append(TEXT_124);
d654 1
a654 1
    stringBuffer.append(TEXT_125);
d656 1
a656 1
    stringBuffer.append(TEXT_126);
d660 1
a660 1
    stringBuffer.append(TEXT_127);
d662 1
a662 1
    stringBuffer.append(TEXT_128);
d664 1
a664 1
    stringBuffer.append(TEXT_129);
d671 1
a671 1
    stringBuffer.append(TEXT_130);
d676 1
a676 1
    stringBuffer.append(TEXT_131);
d679 1
a679 1
    stringBuffer.append(TEXT_132);
@


1.34
log
@refactor GenAuditContainer: flatten hierarchy as it fits most for templates we write
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d183 1
a183 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.33
log
@complete migration of plugin.xml template to xpand version - constraint providers rewritten
@
text
@d160 15
a174 2
final GenAuditContainer audits = genDiagram.getEditorGen().getAudits();
final boolean hasNotationModelAudit = audits != null && audits.hasDiagramElementRule();
d189 1
a189 1
final java.util.List innerClasses = new java.util.ArrayList();
d193 17
a209 2
	innerClasses.addAll(audits.getAllRequiredConstraintAdaptersLocalClassNames());
	innerClasses.addAll(audits.getAllContextSelectorsLocalClassNames());
d336 4
a339 3
java.util.Map ctx2Rules = (audits != null) ? audits.getAllRulesToTargetContextMap() : new java.util.HashMap();
java.util.List allAudits = (audits != null) ? audits.getAllAuditRules() : java.util.Collections.EMPTY_LIST;
java.util.Map view2SelectorMap = new java.util.IdentityHashMap();
d343 4
a346 1
	if(contextID == null || null == ctx2Rules.remove(contextID)) continue;
d571 11
a581 1
final java.util.List javaExpressions = (audits != null) ? audits.getAllJavaLangAudits() : java.util.Collections.EMPTY_LIST;
d588 1
a588 2
	for (java.util.Iterator it = javaExpressions.iterator(); it.hasNext();) {
		GenAuditRule nextJavaRule = (GenAuditRule) it.next();
@


1.32
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d391 1
a391 1
	if(nextAudit.requiresConstraintAdapter() && nextAudit.getRule() != null && nextAudit.getTarget() != null && nextAudit.getTarget().getContext() != null) {
@


1.31
log
@[169964] Missing dependency on generating RCP app with validation
@
text
@a422 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d432 1
a432 1
    stringBuffer.append(__bodyLiteral);
d445 1
a445 1
    stringBuffer.append(__bodyLiteral);
@


1.30
log
@[166814] Refactor diagram editor Audits&Metrics support
@
text
@d25 127
a151 102
  protected final String TEXT_6 = " extends AbstractContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean constraintsActive = false;\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean shouldConstraintsBePrivate() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_7 = "(" + NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_8 = "() {" + NL + "\t\t\t\t\t\t\tpublic void run(";
  protected final String TEXT_9 = " monitor) throws InterruptedException, ";
  protected final String TEXT_10 = " {" + NL + "\t\t\t\t\t\t\t\trunValidation(part.getDiagramEditPart(), part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t).run(new ";
  protected final String TEXT_11 = "());\t\t\t" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_12 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/** " + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(View view) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tif(";
  protected final String TEXT_13 = ".openDiagram(view.eResource())) {" + NL + "\t\t\t\t\tIEditorPart editorPart = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();" + NL + "\t\t\t\t\tif(editorPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\t\t\trunValidation(((IDiagramWorkbenchPart)editorPart).getDiagramEditPart(), view);" + NL + "\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\trunNonUIValidation(view);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch(Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runNonUIValidation(View view) {" + NL + "\t\t\tDiagramEditPart diagramEditPart = OffscreenEditPartFactory.getInstance().createDiagramEditPart(view.getDiagram());" + NL + "\t\t\trunValidation(diagramEditPart, view);" + NL + "\t\t}\t\t" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(DiagramEditPart diagramEditPart, View view) {" + NL + "\t\t\tfinal View target = view;" + NL + "\t\t\tfinal DiagramEditPart diagramPart = diagramEditPart;" + NL + "\t\t\tRunnable task = new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\t\t\tvalidate(diagramPart, target);" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tTransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(target);" + NL + "\t\t\tif(txDomain != null) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\ttxDomain.runExclusive(task);" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttask.run();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Diagnostic runEMFValidator(View target) {" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\treturn new Diagnostician() {" + NL + "\t\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}.validate(target.getElement());" + NL + "\t\t\t}" + NL + "\t\t\treturn Diagnostic.OK_INSTANCE;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void validate(DiagramEditPart diagramEditPart, View target) {" + NL + "\t\t\tIFile diagramFile = (target.eResource() != null) ? WorkspaceSynchronizer.getFile(target.eResource()) : null;" + NL + "\t\t\tif(diagramFile != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_16 = ".deleteMarkers(diagramFile);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tDiagnostic diagnostic = runEMFValidator(target);" + NL + "\t\t\tif(diagramFile != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_17 = ".createMarkers(diagramFile, diagnostic, diagramEditPart);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tvalidator.setIncludeLiveConstraints(true);" + NL + "\t\t\tIStatus status = ";
  protected final String TEXT_18 = ".OK_STATUS;" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\tstatus = validator.validate(target.getElement());" + NL + "\t\t\t\tif(diagramFile != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_19 = ".createMarkers(diagramFile, status, diagramEditPart);" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t}" + NL;
  protected final String TEXT_20 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tstatus = validator.validate(target);" + NL + "\t\t\tif(diagramFile != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_21 = ".createMarkers(diagramFile, status, diagramEditPart);" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_23 = ".MODEL_ID.equals(";
  protected final String TEXT_24 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_26 = " implements ";
  protected final String TEXT_27 = " {";
  protected final String TEXT_28 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_29 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_30 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_31 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final ";
  protected final String TEXT_32 = " semanticCtxIdMap = new ";
  protected final String TEXT_33 = "();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_34 = NL + "\t\tsemanticCtxIdMap.put(String.valueOf(";
  protected final String TEXT_35 = "), ";
  protected final String TEXT_36 = ".class); //$NON-NLS-1$";
  protected final String TEXT_37 = NL + "\t}";
  protected final String TEXT_38 = NL;
  protected final String TEXT_39 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_40 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_41 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_42 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_43 = NL + "\t}";
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_45 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_46 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_47 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_48 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_49 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_50 = " extends ";
  protected final String TEXT_51 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_52 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_53 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_54 = "null";
  protected final String TEXT_55 = ".";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_58 = ", ";
  protected final String TEXT_59 = ")";
  protected final String TEXT_60 = ".";
  protected final String TEXT_61 = "(";
  protected final String TEXT_62 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_63 = ")";
  protected final String TEXT_64 = "new ";
  protected final String TEXT_65 = "(";
  protected final String TEXT_66 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_67 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_68 = " self = (";
  protected final String TEXT_69 = ")context;";
  protected final String TEXT_70 = "\t" + NL + "\t\t";
  protected final String TEXT_71 = " ";
  protected final String TEXT_72 = " = (";
  protected final String TEXT_73 = ")env.get(\"";
  protected final String TEXT_74 = "\"); //$NON-NLS-1$";
  protected final String TEXT_75 = NL + "\t\treturn ";
  protected final String TEXT_76 = ".";
  protected final String TEXT_77 = "(self";
  protected final String TEXT_78 = ", ";
  protected final String TEXT_79 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_80 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_81 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_82 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_83 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_84 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_85 = NL + "\t\t\t\treturn ";
  protected final String TEXT_86 = ".OK_STATUS;";
  protected final String TEXT_87 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_88 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_89 = ".calculateMetric(";
  protected final String TEXT_90 = ", evalCtx);";
  protected final String TEXT_91 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_92 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_93 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_94 = " {";
  protected final String TEXT_95 = NL;
  protected final String TEXT_96 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_97 = " ";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = " self";
  protected final String TEXT_100 = ", ";
  protected final String TEXT_101 = " ";
  protected final String TEXT_102 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_103 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_104 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_105 = NL + "} //";
  protected final String TEXT_106 = NL + "} //";
  protected final String TEXT_107 = NL;
d162 1
d189 1
d191 2
a198 1

a201 1
importManager.addImport("org.eclipse.emf.workspace.util.WorkspaceSynchronizer");
d218 2
a220 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress"));
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("java.lang.reflect.InvocationTargetException"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d228 1
a228 1
    stringBuffer.append(pluginActivatorClass);
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d232 1
a232 1
    stringBuffer.append(pluginActivatorClass);
d234 2
a236 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getMarkerNavigationProviderQualifiedClassName()));
d244 1
a244 1
    if(hasNotationModelAudit) {
d248 1
a248 1
    } // end of diagram element validation 
d250 52
d303 1
a303 1
    stringBuffer.append(TEXT_23);
d305 1
a305 1
    stringBuffer.append(TEXT_24);
d317 1
a317 1
    stringBuffer.append(TEXT_25);
d319 1
a319 1
    stringBuffer.append(TEXT_26);
d321 1
a321 1
    stringBuffer.append(TEXT_27);
d331 1
a331 1
    stringBuffer.append(TEXT_28);
d333 1
a333 1
    stringBuffer.append(TEXT_29);
d335 1
a335 1
    stringBuffer.append(TEXT_30);
d342 1
a342 1
    stringBuffer.append(TEXT_31);
d344 1
a344 1
    stringBuffer.append(TEXT_32);
d346 1
a346 1
    stringBuffer.append(TEXT_33);
d351 1
a351 1
    stringBuffer.append(TEXT_34);
d353 1
a353 1
    stringBuffer.append(TEXT_35);
d355 1
a355 1
    stringBuffer.append(TEXT_36);
d357 1
a357 1
    stringBuffer.append(TEXT_37);
d361 1
a361 1
    stringBuffer.append(TEXT_38);
d363 1
a363 1
    stringBuffer.append(TEXT_39);
d365 1
a365 1
    stringBuffer.append(TEXT_40);
d367 1
a367 1
    stringBuffer.append(TEXT_41);
d369 1
a369 1
    stringBuffer.append(TEXT_42);
d371 1
a371 1
    stringBuffer.append(TEXT_43);
d375 1
a375 1
    stringBuffer.append(TEXT_44);
d377 1
a377 1
    stringBuffer.append(TEXT_45);
d379 1
a379 1
    stringBuffer.append(TEXT_46);
d381 1
a381 1
    stringBuffer.append(TEXT_47);
d383 1
a383 1
    stringBuffer.append(TEXT_48);
d396 1
a396 1
    stringBuffer.append(TEXT_49);
d398 1
a398 1
    stringBuffer.append(TEXT_50);
d400 1
a400 1
    stringBuffer.append(TEXT_51);
d402 1
a402 1
    stringBuffer.append(TEXT_52);
d404 1
a404 1
    stringBuffer.append(TEXT_53);
d420 1
a420 1
    stringBuffer.append(TEXT_54);
d430 1
a430 1
    stringBuffer.append(TEXT_55);
d432 1
a432 1
    stringBuffer.append(TEXT_56);
d434 1
a434 1
    stringBuffer.append(TEXT_57);
d436 1
a436 1
    stringBuffer.append(TEXT_58);
d438 1
a438 1
    stringBuffer.append(TEXT_59);
d443 1
a443 1
    stringBuffer.append(TEXT_60);
d445 1
a445 1
    stringBuffer.append(TEXT_61);
d447 1
a447 1
    stringBuffer.append(TEXT_62);
d449 1
a449 1
    stringBuffer.append(TEXT_63);
d457 1
a457 1
    stringBuffer.append(TEXT_64);
d459 1
a459 1
    stringBuffer.append(TEXT_65);
d461 1
a461 1
    stringBuffer.append(TEXT_66);
d463 1
a463 1
    stringBuffer.append(TEXT_67);
d465 1
a465 1
    stringBuffer.append(TEXT_68);
d467 1
a467 1
    stringBuffer.append(TEXT_69);
d474 1
a474 1
    stringBuffer.append(TEXT_70);
d476 1
a476 1
    stringBuffer.append(TEXT_71);
d478 1
a478 1
    stringBuffer.append(TEXT_72);
d480 1
a480 1
    stringBuffer.append(TEXT_73);
d482 1
a482 1
    stringBuffer.append(TEXT_74);
d484 1
a484 1
    stringBuffer.append(TEXT_75);
d488 1
a488 1
    stringBuffer.append(TEXT_76);
d492 1
a492 1
    stringBuffer.append(TEXT_77);
d495 1
a495 1
    stringBuffer.append(TEXT_78);
d498 1
a498 1
    stringBuffer.append(TEXT_79);
d501 1
a501 1
    stringBuffer.append(TEXT_80);
d503 1
a503 1
    stringBuffer.append(TEXT_81);
d509 1
a509 1
    stringBuffer.append(TEXT_82);
d511 1
a511 1
    stringBuffer.append(TEXT_83);
d513 1
a513 1
    stringBuffer.append(TEXT_84);
d515 1
a515 1
    stringBuffer.append(TEXT_85);
d517 1
a517 1
    stringBuffer.append(TEXT_86);
d519 1
a519 1
    stringBuffer.append(TEXT_87);
d525 1
a525 1
    stringBuffer.append(TEXT_88);
d527 1
a527 1
    stringBuffer.append(TEXT_89);
d529 1
a529 1
    stringBuffer.append(TEXT_90);
d533 1
a533 1
    stringBuffer.append(TEXT_91);
d535 1
a535 1
    stringBuffer.append(TEXT_92);
d543 1
a543 1
    stringBuffer.append(TEXT_93);
d545 1
a545 1
    stringBuffer.append(TEXT_94);
d553 1
a553 1
    stringBuffer.append(TEXT_95);
d574 1
a574 1
    stringBuffer.append(TEXT_96);
d576 1
a576 1
    stringBuffer.append(TEXT_97);
d578 1
a578 1
    stringBuffer.append(TEXT_98);
d580 1
a580 1
    stringBuffer.append(TEXT_99);
d588 1
a588 1
    stringBuffer.append(TEXT_100);
d590 1
a590 1
    stringBuffer.append(TEXT_101);
d594 1
a594 1
    stringBuffer.append(TEXT_102);
d596 1
a596 1
    stringBuffer.append(TEXT_103);
d598 1
a598 1
    stringBuffer.append(TEXT_104);
d605 1
a605 1
    stringBuffer.append(TEXT_105);
d610 1
a610 1
    stringBuffer.append(TEXT_106);
d613 1
a613 1
    stringBuffer.append(TEXT_107);
@


1.29
log
@#148124 Diagram Validation action should be run as WorkspaceModifyOperation
@
text
@d25 53
a77 53
  protected final String TEXT_6 = " extends AbstractContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean constraintsActive = false;\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean shouldConstraintsBePrivate() {" + NL + "\t\treturn false;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String MARKER_TYPE = ";
  protected final String TEXT_7 = ".ID + \".";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tnew ";
  protected final String TEXT_9 = "(" + NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_10 = "() {" + NL + "\t\t\t\t\t\t\tpublic void run(";
  protected final String TEXT_11 = " monitor) throws InterruptedException, ";
  protected final String TEXT_12 = " {" + NL + "\t\t\t\t\t\t\t\trunValidation(part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t).run(new ";
  protected final String TEXT_13 = "());\t\t\t" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_14 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(View view) {" + NL + "\t\t\tfinal View target = view;" + NL + "\t\t\tRunnable task = new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\t\t\tvalidate(target);" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tTransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(target);" + NL + "\t\t\tif(txDomain != null) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\ttxDomain.runExclusive(task);" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttask.run();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Diagnostic runEMFValidator(View target) {" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\treturn new Diagnostician() {" + NL + "\t\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}.validate(target.getElement());" + NL + "\t\t\t}" + NL + "\t\t\treturn Diagnostic.OK_INSTANCE;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void validate(View target) {" + NL + "\t\t\tIFile diagramFile = (target.eResource() != null) ? WorkspaceSynchronizer.getFile(target.eResource()) : null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tif(diagramFile != null) diagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = runEMFValidator(target);" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tvalidator.setIncludeLiveConstraints(true);" + NL + "\t\t\tIStatus status = ";
  protected final String TEXT_17 = ".OK_STATUS;" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\tstatus = validator.validate(target.getElement());" + NL + "\t\t\t}" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_18 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tstatus = validator.validate(target);" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_19 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(target, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\tif(diagramFile != null) addMarker(diagramFile, view != null ? view : target, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\tif(diagramFile != null) addMarker(diagramFile, view != null ? view : target, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Map buildElement2ViewMap(View view, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(view, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(view, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tif (!map.containsKey(view.getElement()) && targets.remove(view.getElement())) {" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_21 = ".MODEL_ID.equals(";
  protected final String TEXT_22 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_23 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_24 = " implements ";
  protected final String TEXT_25 = " {";
  protected final String TEXT_26 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_27 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_28 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_29 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_30 = NL + "\t\tsemanticCtxIdMap.put(String.valueOf(";
  protected final String TEXT_31 = "), ";
  protected final String TEXT_32 = ".class); //$NON-NLS-1$";
  protected final String TEXT_33 = NL + "\t}";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_36 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_37 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_38 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_41 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_42 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_43 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_44 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_45 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_46 = " extends ";
  protected final String TEXT_47 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_48 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_49 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_50 = "null";
  protected final String TEXT_51 = ".";
  protected final String TEXT_52 = "(";
  protected final String TEXT_53 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_54 = ", ";
  protected final String TEXT_55 = ")";
  protected final String TEXT_56 = ".";
  protected final String TEXT_57 = "(";
  protected final String TEXT_58 = ", //$NON-NLS-1$" + NL + "\t";
d79 1
a79 1
  protected final String TEXT_60 = "new ";
d81 35
a115 35
  protected final String TEXT_62 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_63 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_64 = " self = (";
  protected final String TEXT_65 = ")context;";
  protected final String TEXT_66 = "\t" + NL + "\t\t";
  protected final String TEXT_67 = " ";
  protected final String TEXT_68 = " = (";
  protected final String TEXT_69 = ")env.get(\"";
  protected final String TEXT_70 = "\"); //$NON-NLS-1$";
  protected final String TEXT_71 = NL + "\t\treturn ";
  protected final String TEXT_72 = ".";
  protected final String TEXT_73 = "(self";
  protected final String TEXT_74 = ", ";
  protected final String TEXT_75 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_76 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_77 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_78 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_79 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_80 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_81 = NL + "\t\t\t\treturn ";
  protected final String TEXT_82 = ".OK_STATUS;";
  protected final String TEXT_83 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_84 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_85 = ".calculateMetric(";
  protected final String TEXT_86 = ", evalCtx);";
  protected final String TEXT_87 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_88 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_89 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_90 = " {";
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_93 = " ";
  protected final String TEXT_94 = "(";
  protected final String TEXT_95 = " self";
  protected final String TEXT_96 = ", ";
d117 10
a126 6
  protected final String TEXT_98 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_99 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_100 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_101 = NL + "} //";
  protected final String TEXT_102 = NL + "} //";
  protected final String TEXT_103 = NL;
d162 1
a162 8
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.HashSet");
importManager.addImport("java.util.Iterator");
importManager.addImport("java.util.List");
importManager.addImport("java.util.ArrayList");
importManager.addImport("java.util.Arrays");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.Set");
a163 3
importManager.addImport("org.eclipse.core.resources.IMarker");
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.runtime.CoreException");
a171 1
importManager.addImport("org.eclipse.emf.validation.model.IConstraintStatus");
d177 1
d179 1
a179 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil");
a180 1
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
d185 2
d191 1
a191 1
    stringBuffer.append(pluginActivatorClass);
d193 1
a193 1
    stringBuffer.append(genDiagram.getValidationDiagnosticMarkerType());
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyDelegatingOperation"));
d197 1
a197 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.operation.IRunnableWithProgress"));
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName("java.lang.reflect.InvocationTargetException"));
d203 1
a203 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d209 1
a209 1
    stringBuffer.append(pluginActivatorClass);
d211 2
a213 2
    stringBuffer.append(TEXT_17);
    if(hasNotationModelAudit) {
d215 1
a215 1
    } // end of diagram element validation 
d217 1
a217 1
    stringBuffer.append(pluginActivatorClass);
d219 4
d224 1
a224 1
    stringBuffer.append(TEXT_21);
d226 1
a226 1
    stringBuffer.append(TEXT_22);
d238 1
a238 1
    stringBuffer.append(TEXT_23);
d240 1
a240 1
    stringBuffer.append(TEXT_24);
d242 1
a242 1
    stringBuffer.append(TEXT_25);
d252 1
a252 1
    stringBuffer.append(TEXT_26);
d254 1
a254 1
    stringBuffer.append(TEXT_27);
d256 1
a256 1
    stringBuffer.append(TEXT_28);
d263 5
a267 1
    stringBuffer.append(TEXT_29);
d272 1
a272 1
    stringBuffer.append(TEXT_30);
d274 1
a274 1
    stringBuffer.append(TEXT_31);
d276 1
a276 1
    stringBuffer.append(TEXT_32);
d278 1
a278 1
    stringBuffer.append(TEXT_33);
d282 1
a282 1
    stringBuffer.append(TEXT_34);
d284 1
a284 1
    stringBuffer.append(TEXT_35);
d286 1
a286 1
    stringBuffer.append(TEXT_36);
d288 1
a288 1
    stringBuffer.append(TEXT_37);
d290 1
a290 1
    stringBuffer.append(TEXT_38);
d292 1
a292 1
    stringBuffer.append(TEXT_39);
d296 1
a296 1
    stringBuffer.append(TEXT_40);
d298 1
a298 1
    stringBuffer.append(TEXT_41);
d300 1
a300 1
    stringBuffer.append(TEXT_42);
d302 1
a302 1
    stringBuffer.append(TEXT_43);
d304 1
a304 1
    stringBuffer.append(TEXT_44);
d317 1
a317 1
    stringBuffer.append(TEXT_45);
d319 1
a319 1
    stringBuffer.append(TEXT_46);
d321 1
a321 1
    stringBuffer.append(TEXT_47);
d323 1
a323 1
    stringBuffer.append(TEXT_48);
d325 1
a325 1
    stringBuffer.append(TEXT_49);
d341 1
a341 1
    stringBuffer.append(TEXT_50);
d351 1
a351 1
    stringBuffer.append(TEXT_51);
d353 1
a353 1
    stringBuffer.append(TEXT_52);
d355 1
a355 1
    stringBuffer.append(TEXT_53);
d357 1
a357 1
    stringBuffer.append(TEXT_54);
d359 1
a359 1
    stringBuffer.append(TEXT_55);
d364 1
a364 1
    stringBuffer.append(TEXT_56);
d366 1
a366 1
    stringBuffer.append(TEXT_57);
d368 1
a368 1
    stringBuffer.append(TEXT_58);
d370 1
a370 1
    stringBuffer.append(TEXT_59);
d378 1
a378 1
    stringBuffer.append(TEXT_60);
d380 1
a380 1
    stringBuffer.append(TEXT_61);
d382 1
a382 1
    stringBuffer.append(TEXT_62);
d384 1
a384 1
    stringBuffer.append(TEXT_63);
d386 1
a386 1
    stringBuffer.append(TEXT_64);
d388 1
a388 1
    stringBuffer.append(TEXT_65);
d395 1
a395 1
    stringBuffer.append(TEXT_66);
d397 1
a397 1
    stringBuffer.append(TEXT_67);
d399 1
a399 1
    stringBuffer.append(TEXT_68);
d401 1
a401 1
    stringBuffer.append(TEXT_69);
d403 1
a403 1
    stringBuffer.append(TEXT_70);
d405 1
a405 1
    stringBuffer.append(TEXT_71);
d409 1
a409 1
    stringBuffer.append(TEXT_72);
d413 1
a413 1
    stringBuffer.append(TEXT_73);
d416 1
a416 1
    stringBuffer.append(TEXT_74);
d419 1
a419 1
    stringBuffer.append(TEXT_75);
d422 1
a422 1
    stringBuffer.append(TEXT_76);
d424 1
a424 1
    stringBuffer.append(TEXT_77);
d430 1
a430 1
    stringBuffer.append(TEXT_78);
d432 1
a432 1
    stringBuffer.append(TEXT_79);
d434 1
a434 1
    stringBuffer.append(TEXT_80);
d436 1
a436 1
    stringBuffer.append(TEXT_81);
d438 1
a438 1
    stringBuffer.append(TEXT_82);
d440 1
a440 1
    stringBuffer.append(TEXT_83);
d446 1
a446 1
    stringBuffer.append(TEXT_84);
d448 1
a448 1
    stringBuffer.append(TEXT_85);
d450 1
a450 1
    stringBuffer.append(TEXT_86);
d454 1
a454 1
    stringBuffer.append(TEXT_87);
d456 1
a456 1
    stringBuffer.append(TEXT_88);
d464 1
a464 1
    stringBuffer.append(TEXT_89);
d466 1
a466 1
    stringBuffer.append(TEXT_90);
d474 1
a474 1
    stringBuffer.append(TEXT_91);
d495 1
a495 1
    stringBuffer.append(TEXT_92);
d497 1
a497 1
    stringBuffer.append(TEXT_93);
d499 1
a499 1
    stringBuffer.append(TEXT_94);
d501 1
a501 1
    stringBuffer.append(TEXT_95);
d509 1
a509 1
    stringBuffer.append(TEXT_96);
d511 1
a511 1
    stringBuffer.append(TEXT_97);
d515 1
a515 1
    stringBuffer.append(TEXT_98);
d517 1
a517 1
    stringBuffer.append(TEXT_99);
d519 1
a519 1
    stringBuffer.append(TEXT_100);
d526 1
a526 1
    stringBuffer.append(TEXT_101);
d531 1
a531 1
    stringBuffer.append(TEXT_102);
d534 1
a534 1
    stringBuffer.append(TEXT_103);
@


1.28
log
@#147422 ValidationProvider.jet  template should handle diagram without domain models
@
text
@d27 25
a51 25
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\tpart.getDiagramEditPart().getEditingDomain();" + NL + "\t\t\t\trunValidation(part.getDiagram());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(View view) {" + NL + "\t\t\tfinal View target = view;" + NL + "\t\t\tRunnable task = new Runnable() {" + NL + "\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\t\t\tvalidate(target);" + NL + "\t\t\t\t\t} finally {" + NL + "\t\t\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\tTransactionalEditingDomain txDomain = TransactionUtil.getEditingDomain(target);" + NL + "\t\t\tif(txDomain != null) {" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\ttxDomain.runExclusive(task);" + NL + "\t\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\ttask.run();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Diagnostic runEMFValidator(View target) {" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\treturn new Diagnostician() {" + NL + "\t\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}.validate(target.getElement());" + NL + "\t\t\t}" + NL + "\t\t\treturn Diagnostic.OK_INSTANCE;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void validate(View target) {" + NL + "\t\t\tIFile diagramFile = (target.eResource() != null) ? WorkspaceSynchronizer.getFile(target.eResource()) : null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tif(diagramFile != null) diagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = runEMFValidator(target);" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tvalidator.setIncludeLiveConstraints(true);" + NL + "\t\t\tIStatus status = ";
  protected final String TEXT_11 = ".OK_STATUS;" + NL + "\t\t\tif(target.isSetElement() && target.getElement() != null) {" + NL + "\t\t\t\tstatus = validator.validate(target.getElement());" + NL + "\t\t\t}" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_12 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tstatus = validator.validate(target);" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_13 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(target, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\tif(diagramFile != null) addMarker(diagramFile, view != null ? view : target, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\tif(diagramFile != null) addMarker(diagramFile, view != null ? view : target, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Map buildElement2ViewMap(View view, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(view, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(view, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tif (!map.containsKey(view.getElement()) && targets.remove(view.getElement())) {" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_15 = ".MODEL_ID.equals(";
  protected final String TEXT_16 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_17 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_18 = " implements ";
  protected final String TEXT_19 = " {";
  protected final String TEXT_20 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_21 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_22 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_23 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_24 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_25 = "\", ";
  protected final String TEXT_26 = ".class); //$NON-NLS-1$";
  protected final String TEXT_27 = NL + "\t}";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_30 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_31 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_32 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
d53 7
a59 7
  protected final String TEXT_34 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_35 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_36 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_37 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_38 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_39 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_40 = " extends ";
d61 62
a122 56
  protected final String TEXT_42 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_43 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_44 = "null";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = "(";
  protected final String TEXT_47 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_48 = ", ";
  protected final String TEXT_49 = ")";
  protected final String TEXT_50 = ".";
  protected final String TEXT_51 = "(";
  protected final String TEXT_52 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_53 = ")";
  protected final String TEXT_54 = "new ";
  protected final String TEXT_55 = "(";
  protected final String TEXT_56 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_57 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_58 = " self = (";
  protected final String TEXT_59 = ")context;";
  protected final String TEXT_60 = "\t" + NL + "\t\t";
  protected final String TEXT_61 = " ";
  protected final String TEXT_62 = " = (";
  protected final String TEXT_63 = ")env.get(\"";
  protected final String TEXT_64 = "\"); //$NON-NLS-1$";
  protected final String TEXT_65 = NL + "\t\treturn ";
  protected final String TEXT_66 = ".";
  protected final String TEXT_67 = "(self";
  protected final String TEXT_68 = ", ";
  protected final String TEXT_69 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_70 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_71 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_72 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_73 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_74 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_75 = NL + "\t\t\t\treturn ";
  protected final String TEXT_76 = ".OK_STATUS;";
  protected final String TEXT_77 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_78 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_79 = ".calculateMetric(";
  protected final String TEXT_80 = ", evalCtx);";
  protected final String TEXT_81 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_82 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_83 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_84 = " {";
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_87 = " ";
  protected final String TEXT_88 = "(";
  protected final String TEXT_89 = " self";
  protected final String TEXT_90 = ", ";
  protected final String TEXT_91 = " ";
  protected final String TEXT_92 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_93 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_94 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_95 = NL + "} //";
  protected final String TEXT_96 = NL + "} //";
  protected final String TEXT_97 = NL;
d200 1
a200 1
    stringBuffer.append(pluginActivatorClass);
d202 1
a202 1
    stringBuffer.append(pluginActivatorClass);
d204 1
a204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
d206 1
a206 1
    if(hasNotationModelAudit) {
d208 1
a208 1
    } // end of diagram element validation 
d212 12
d225 1
a225 1
    stringBuffer.append(TEXT_15);
d227 1
a227 1
    stringBuffer.append(TEXT_16);
d232 1
a232 1
java.util.Map viewID2SelectorMap = new java.util.HashMap();
d239 1
a239 1
    stringBuffer.append(TEXT_17);
d241 1
a241 1
    stringBuffer.append(TEXT_18);
d243 1
a243 1
    stringBuffer.append(TEXT_19);
d250 1
a250 2
			String viewID = Integer.toString(nextElement.getVisualID());
			viewID2SelectorMap.put(viewID, selectorClassName);
d253 1
a253 1
    stringBuffer.append(TEXT_20);
d255 1
a255 1
    stringBuffer.append(TEXT_21);
d257 1
a257 1
    stringBuffer.append(TEXT_22);
d264 1
a264 1
    stringBuffer.append(TEXT_23);
d266 2
a267 2
	for(java.util.Iterator it = viewID2SelectorMap.keySet().iterator(); it.hasNext();) {
		String viewID = (String)it.next();
d269 5
a273 5
    stringBuffer.append(TEXT_24);
    stringBuffer.append(viewID);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(viewID2SelectorMap.get(viewID));
    stringBuffer.append(TEXT_26);
d275 1
a275 1
    stringBuffer.append(TEXT_27);
d279 1
a279 1
    stringBuffer.append(TEXT_28);
d281 1
a281 1
    stringBuffer.append(TEXT_29);
d283 1
a283 1
    stringBuffer.append(TEXT_30);
d285 1
a285 1
    stringBuffer.append(TEXT_31);
d287 1
a287 1
    stringBuffer.append(TEXT_32);
d289 1
a289 1
    stringBuffer.append(TEXT_33);
d293 1
a293 1
    stringBuffer.append(TEXT_34);
d295 1
a295 1
    stringBuffer.append(TEXT_35);
d297 1
a297 1
    stringBuffer.append(TEXT_36);
d299 1
a299 1
    stringBuffer.append(TEXT_37);
d301 1
a301 1
    stringBuffer.append(TEXT_38);
d314 1
a314 1
    stringBuffer.append(TEXT_39);
d316 1
a316 1
    stringBuffer.append(TEXT_40);
d318 1
a318 1
    stringBuffer.append(TEXT_41);
d320 1
a320 1
    stringBuffer.append(TEXT_42);
d322 1
a322 1
    stringBuffer.append(TEXT_43);
d338 1
a338 1
    stringBuffer.append(TEXT_44);
d348 1
a348 1
    stringBuffer.append(TEXT_45);
d350 1
a350 1
    stringBuffer.append(TEXT_46);
d352 1
a352 1
    stringBuffer.append(TEXT_47);
d354 1
a354 1
    stringBuffer.append(TEXT_48);
d356 1
a356 1
    stringBuffer.append(TEXT_49);
d361 1
a361 1
    stringBuffer.append(TEXT_50);
d363 1
a363 1
    stringBuffer.append(TEXT_51);
d365 1
a365 1
    stringBuffer.append(TEXT_52);
d367 1
a367 1
    stringBuffer.append(TEXT_53);
d375 1
a375 1
    stringBuffer.append(TEXT_54);
d377 1
a377 1
    stringBuffer.append(TEXT_55);
d379 1
a379 1
    stringBuffer.append(TEXT_56);
d381 1
a381 1
    stringBuffer.append(TEXT_57);
d383 1
a383 1
    stringBuffer.append(TEXT_58);
d385 1
a385 1
    stringBuffer.append(TEXT_59);
d392 1
a392 1
    stringBuffer.append(TEXT_60);
d394 1
a394 1
    stringBuffer.append(TEXT_61);
d396 1
a396 1
    stringBuffer.append(TEXT_62);
d398 1
a398 1
    stringBuffer.append(TEXT_63);
d400 1
a400 1
    stringBuffer.append(TEXT_64);
d402 1
a402 1
    stringBuffer.append(TEXT_65);
d406 1
a406 1
    stringBuffer.append(TEXT_66);
d410 1
a410 1
    stringBuffer.append(TEXT_67);
d413 1
a413 1
    stringBuffer.append(TEXT_68);
d416 1
a416 1
    stringBuffer.append(TEXT_69);
d419 1
a419 1
    stringBuffer.append(TEXT_70);
d421 1
a421 1
    stringBuffer.append(TEXT_71);
d427 1
a427 1
    stringBuffer.append(TEXT_72);
d429 1
a429 1
    stringBuffer.append(TEXT_73);
d431 1
a431 1
    stringBuffer.append(TEXT_74);
d433 1
a433 1
    stringBuffer.append(TEXT_75);
d435 1
a435 1
    stringBuffer.append(TEXT_76);
d437 1
a437 1
    stringBuffer.append(TEXT_77);
d443 1
a443 1
    stringBuffer.append(TEXT_78);
d445 1
a445 1
    stringBuffer.append(TEXT_79);
d447 1
a447 1
    stringBuffer.append(TEXT_80);
d451 1
a451 1
    stringBuffer.append(TEXT_81);
d453 1
a453 1
    stringBuffer.append(TEXT_82);
d461 1
a461 1
    stringBuffer.append(TEXT_83);
d463 1
a463 1
    stringBuffer.append(TEXT_84);
d471 1
a471 1
    stringBuffer.append(TEXT_85);
d492 1
a492 1
    stringBuffer.append(TEXT_86);
d494 1
a494 1
    stringBuffer.append(TEXT_87);
d496 1
a496 1
    stringBuffer.append(TEXT_88);
d498 1
a498 1
    stringBuffer.append(TEXT_89);
d506 1
a506 1
    stringBuffer.append(TEXT_90);
d508 1
a508 1
    stringBuffer.append(TEXT_91);
d512 1
a512 1
    stringBuffer.append(TEXT_92);
d514 1
a514 1
    stringBuffer.append(TEXT_93);
d516 1
a516 1
    stringBuffer.append(TEXT_94);
d523 1
a523 1
    stringBuffer.append(TEXT_95);
d528 1
a528 1
    stringBuffer.append(TEXT_96);
d531 1
a531 1
    stringBuffer.append(TEXT_97);
@


1.27
log
@#147280 ValidationProvider template should not restrict only to single domain model package
@
text
@d27 87
a113 87
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tpart.getDiagramEditPart().getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\tnew Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\trunValidation(part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void runValidation(Diagram diagram) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tconstraintsActive = true;" + NL + "\t\t\t\tvalidate(diagram);" + NL + "\t\t\t} finally {" + NL + "\t\t\t\tconstraintsActive = false;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = WorkspaceSynchronizer.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tvalidator.setIncludeLiveConstraints(true);" + NL + "\t\t\tIStatus status = validator.validate(diagram.getElement());" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_11 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tstatus = validator.validate(diagram);" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_12 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tif (!map.containsKey(view.getElement()) && targets.remove(view.getElement())) {" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tif(shouldConstraintsBePrivate() && !constraintsActive) {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tif (object instanceof View) {" + NL + "\t\t\treturn constraintsActive && ";
  protected final String TEXT_14 = ".MODEL_ID.equals(";
  protected final String TEXT_15 = ".getModelID((View)object));" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}\t";
  protected final String TEXT_16 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_17 = " implements ";
  protected final String TEXT_18 = " {";
  protected final String TEXT_19 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_20 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_21 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_23 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_24 = "\", ";
  protected final String TEXT_25 = ".class); //$NON-NLS-1$";
  protected final String TEXT_26 = NL + "\t}";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_29 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_30 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_31 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_32 = NL + "\t}";
  protected final String TEXT_33 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_34 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_35 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_36 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_37 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_38 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_39 = " extends ";
  protected final String TEXT_40 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_41 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_42 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_43 = "null";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = "(";
  protected final String TEXT_46 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_47 = ", ";
  protected final String TEXT_48 = ")";
  protected final String TEXT_49 = ".";
  protected final String TEXT_50 = "(";
  protected final String TEXT_51 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_52 = ")";
  protected final String TEXT_53 = "new ";
  protected final String TEXT_54 = "(";
  protected final String TEXT_55 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_56 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_57 = " self = (";
  protected final String TEXT_58 = ")context;";
  protected final String TEXT_59 = "\t" + NL + "\t\t";
  protected final String TEXT_60 = " ";
  protected final String TEXT_61 = " = (";
  protected final String TEXT_62 = ")env.get(\"";
  protected final String TEXT_63 = "\"); //$NON-NLS-1$";
  protected final String TEXT_64 = NL + "\t\treturn ";
  protected final String TEXT_65 = ".";
  protected final String TEXT_66 = "(self";
  protected final String TEXT_67 = ", ";
  protected final String TEXT_68 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_69 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_70 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_71 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_72 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_73 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_74 = NL + "\t\t\t\treturn ";
  protected final String TEXT_75 = ".OK_STATUS;";
  protected final String TEXT_76 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_77 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_78 = ".calculateMetric(";
  protected final String TEXT_79 = ", evalCtx);";
  protected final String TEXT_80 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_81 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_82 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_83 = " {";
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_86 = " ";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = " self";
  protected final String TEXT_89 = ", ";
  protected final String TEXT_90 = " ";
  protected final String TEXT_91 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_92 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_93 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_94 = NL + "} //";
d115 2
a116 1
  protected final String TEXT_96 = NL;
d168 3
d198 2
d201 1
a201 1
    stringBuffer.append(TEXT_11);
d203 1
a203 1
    stringBuffer.append(TEXT_12);
d205 1
a205 1
    stringBuffer.append(TEXT_13);
d207 1
a207 1
    stringBuffer.append(TEXT_14);
d209 1
a209 1
    stringBuffer.append(TEXT_15);
d221 1
a221 1
    stringBuffer.append(TEXT_16);
d223 1
a223 1
    stringBuffer.append(TEXT_17);
d225 1
a225 1
    stringBuffer.append(TEXT_18);
d236 1
a236 1
    stringBuffer.append(TEXT_19);
d238 1
a238 1
    stringBuffer.append(TEXT_20);
d240 1
a240 1
    stringBuffer.append(TEXT_21);
d247 1
a247 1
    stringBuffer.append(TEXT_22);
d252 1
a252 1
    stringBuffer.append(TEXT_23);
d254 1
a254 1
    stringBuffer.append(TEXT_24);
d256 1
a256 1
    stringBuffer.append(TEXT_25);
d258 1
a258 1
    stringBuffer.append(TEXT_26);
d262 1
a262 1
    stringBuffer.append(TEXT_27);
d264 1
a264 1
    stringBuffer.append(TEXT_28);
d266 1
a266 1
    stringBuffer.append(TEXT_29);
d268 1
a268 1
    stringBuffer.append(TEXT_30);
d270 1
a270 1
    stringBuffer.append(TEXT_31);
d272 1
a272 1
    stringBuffer.append(TEXT_32);
a275 2
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
d279 2
d282 1
a282 1
    stringBuffer.append(TEXT_36);
d284 1
a284 1
    stringBuffer.append(TEXT_37);
d297 1
a297 1
    stringBuffer.append(TEXT_38);
d299 1
a299 1
    stringBuffer.append(TEXT_39);
d301 1
a301 1
    stringBuffer.append(TEXT_40);
d303 1
a303 1
    stringBuffer.append(TEXT_41);
d305 1
a305 1
    stringBuffer.append(TEXT_42);
d321 1
a321 1
    stringBuffer.append(TEXT_43);
d331 1
a331 1
    stringBuffer.append(TEXT_44);
d333 1
a333 1
    stringBuffer.append(TEXT_45);
d335 1
a335 1
    stringBuffer.append(TEXT_46);
d337 1
a337 1
    stringBuffer.append(TEXT_47);
d339 1
a339 1
    stringBuffer.append(TEXT_48);
d344 1
a344 1
    stringBuffer.append(TEXT_49);
d346 1
a346 1
    stringBuffer.append(TEXT_50);
d348 1
a348 1
    stringBuffer.append(TEXT_51);
d350 1
a350 1
    stringBuffer.append(TEXT_52);
d358 1
a358 1
    stringBuffer.append(TEXT_53);
d360 1
a360 1
    stringBuffer.append(TEXT_54);
d362 1
a362 1
    stringBuffer.append(TEXT_55);
a363 2
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d367 2
d375 1
a375 1
    stringBuffer.append(TEXT_59);
d377 1
a377 1
    stringBuffer.append(TEXT_60);
d379 1
a379 1
    stringBuffer.append(TEXT_61);
d381 1
a381 1
    stringBuffer.append(TEXT_62);
d383 1
a383 1
    stringBuffer.append(TEXT_63);
d385 1
a385 1
    stringBuffer.append(TEXT_64);
d389 1
a389 1
    stringBuffer.append(TEXT_65);
d393 1
a393 1
    stringBuffer.append(TEXT_66);
d396 1
a396 1
    stringBuffer.append(TEXT_67);
d399 1
a399 1
    stringBuffer.append(TEXT_68);
d402 1
a402 1
    stringBuffer.append(TEXT_69);
d404 1
a404 1
    stringBuffer.append(TEXT_70);
d410 1
a410 1
    stringBuffer.append(TEXT_71);
d412 1
a412 1
    stringBuffer.append(TEXT_72);
d414 1
a414 1
    stringBuffer.append(TEXT_73);
d416 1
a416 1
    stringBuffer.append(TEXT_74);
d418 1
a418 1
    stringBuffer.append(TEXT_75);
d420 1
a420 1
    stringBuffer.append(TEXT_76);
d426 1
a426 1
    stringBuffer.append(TEXT_77);
d428 1
a428 1
    stringBuffer.append(TEXT_78);
d430 1
a430 1
    stringBuffer.append(TEXT_79);
d434 1
a434 1
    stringBuffer.append(TEXT_80);
d436 1
a436 1
    stringBuffer.append(TEXT_81);
d444 1
a444 1
    stringBuffer.append(TEXT_82);
d446 1
a446 1
    stringBuffer.append(TEXT_83);
d454 1
a454 1
    stringBuffer.append(TEXT_84);
d475 1
a475 1
    stringBuffer.append(TEXT_85);
d477 1
a477 1
    stringBuffer.append(TEXT_86);
d479 1
a479 1
    stringBuffer.append(TEXT_87);
d481 1
a481 1
    stringBuffer.append(TEXT_88);
d489 1
a489 1
    stringBuffer.append(TEXT_89);
d491 1
a491 1
    stringBuffer.append(TEXT_90);
d495 1
a495 1
    stringBuffer.append(TEXT_91);
d497 1
a497 1
    stringBuffer.append(TEXT_92);
d499 1
a499 1
    stringBuffer.append(TEXT_93);
d506 1
a506 1
    stringBuffer.append(TEXT_94);
d511 1
a511 1
    stringBuffer.append(TEXT_95);
d514 1
a514 1
    stringBuffer.append(TEXT_96);
@


1.26
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d25 1
a25 1
  protected final String TEXT_6 = " extends AbstractContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String MARKER_TYPE = ";
d27 3
a29 3
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tpart.getDiagramEditPart().getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\tnew Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tvalidate(part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = WorkspaceSynchronizer.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tIStatus status = validator.validate(diagram.getElement());" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
d32 84
a115 86
  protected final String TEXT_13 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tEObject domainElement = null;" + NL + "\t\tif(object instanceof View) {" + NL + "\t\t\tView view = (View)object;" + NL + "\t\t\tdomainElement = view.getElement() != null ? view.getElement() : view.getDiagram().getElement();" + NL + "\t\t} else if(object instanceof EObject) {" + NL + "\t\t\tdomainElement = (EObject)object;" + NL + "\t\t} else {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tEPackage domainPackage = domainElement.eClass().getEPackage();\t\t\t\t" + NL + "\t\treturn ";
  protected final String TEXT_14 = "domainPackage == ";
  protected final String TEXT_15 = ".eINSTANCE";
  protected final String TEXT_16 = "\t\t\t\t\t\t\t\t\t ";
  protected final String TEXT_17 = "\t\t\t" + NL + "\t}\t";
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_19 = " implements ";
  protected final String TEXT_20 = " {";
  protected final String TEXT_21 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_22 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_23 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_25 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_26 = "\", ";
  protected final String TEXT_27 = ".class); //$NON-NLS-1$";
  protected final String TEXT_28 = NL + "\t}";
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_31 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_32 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_33 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_34 = NL + "\t}";
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_36 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_37 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_38 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_39 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_41 = " extends ";
  protected final String TEXT_42 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_43 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_44 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_45 = "null";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_49 = ", ";
  protected final String TEXT_50 = ")";
  protected final String TEXT_51 = ".";
  protected final String TEXT_52 = "(";
  protected final String TEXT_53 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_54 = ")";
  protected final String TEXT_55 = "new ";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_58 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_59 = " self = (";
  protected final String TEXT_60 = ")context;";
  protected final String TEXT_61 = "\t" + NL + "\t\t";
  protected final String TEXT_62 = " ";
  protected final String TEXT_63 = " = (";
  protected final String TEXT_64 = ")env.get(\"";
  protected final String TEXT_65 = "\"); //$NON-NLS-1$";
  protected final String TEXT_66 = NL + "\t\treturn ";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = "(self";
  protected final String TEXT_69 = ", ";
  protected final String TEXT_70 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_71 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_72 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_73 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_74 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_75 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_76 = NL + "\t\t\t\treturn ";
  protected final String TEXT_77 = ".OK_STATUS;";
  protected final String TEXT_78 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_79 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_80 = ".calculateMetric(";
  protected final String TEXT_81 = ", evalCtx);";
  protected final String TEXT_82 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_83 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_84 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_85 = " {";
  protected final String TEXT_86 = NL;
  protected final String TEXT_87 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_88 = " ";
  protected final String TEXT_89 = "(";
  protected final String TEXT_90 = " self";
  protected final String TEXT_91 = ", ";
  protected final String TEXT_92 = " ";
  protected final String TEXT_93 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_94 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_95 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_96 = NL + "} //";
  protected final String TEXT_97 = NL + "} //";
  protected final String TEXT_98 = NL;
a165 1
importManager.addImport("org.eclipse.emf.ecore.EPackage");
d200 1
a200 4
    
for(java.util.Iterator packageIt = genDiagram.getEditorGen().getDomainGenModel().getGenPackages().iterator(); packageIt.hasNext();) {
	GenPackage nextGenPackage = (GenPackage)packageIt.next();			
			
d202 1
a202 1
    stringBuffer.append(nextGenPackage.getQualifiedPackageInterfaceName());
a203 6
    stringBuffer.append(packageIt.hasNext() ? " || " : ";");
    stringBuffer.append(TEXT_16);
    
} // domainPackage iteration 

    stringBuffer.append(TEXT_17);
d215 1
a215 1
    stringBuffer.append(TEXT_18);
d217 1
a217 1
    stringBuffer.append(TEXT_19);
d219 1
a219 1
    stringBuffer.append(TEXT_20);
d230 1
a230 1
    stringBuffer.append(TEXT_21);
d232 1
a232 1
    stringBuffer.append(TEXT_22);
d234 1
a234 1
    stringBuffer.append(TEXT_23);
d241 1
a241 1
    stringBuffer.append(TEXT_24);
d246 1
a246 1
    stringBuffer.append(TEXT_25);
d248 1
a248 1
    stringBuffer.append(TEXT_26);
d250 1
a250 1
    stringBuffer.append(TEXT_27);
d252 1
a252 1
    stringBuffer.append(TEXT_28);
d256 1
a256 1
    stringBuffer.append(TEXT_29);
d258 1
a258 1
    stringBuffer.append(TEXT_30);
d260 1
a260 1
    stringBuffer.append(TEXT_31);
d262 1
a262 1
    stringBuffer.append(TEXT_32);
d264 1
a264 1
    stringBuffer.append(TEXT_33);
d266 1
a266 1
    stringBuffer.append(TEXT_34);
d270 1
a270 1
    stringBuffer.append(TEXT_35);
d272 1
a272 1
    stringBuffer.append(TEXT_36);
d274 1
a274 1
    stringBuffer.append(TEXT_37);
d276 1
a276 1
    stringBuffer.append(TEXT_38);
d278 1
a278 1
    stringBuffer.append(TEXT_39);
d291 1
a291 1
    stringBuffer.append(TEXT_40);
d293 1
a293 1
    stringBuffer.append(TEXT_41);
d295 1
a295 1
    stringBuffer.append(TEXT_42);
d297 1
a297 1
    stringBuffer.append(TEXT_43);
d299 1
a299 1
    stringBuffer.append(TEXT_44);
d315 1
a315 1
    stringBuffer.append(TEXT_45);
d325 1
a325 1
    stringBuffer.append(TEXT_46);
d327 1
a327 1
    stringBuffer.append(TEXT_47);
d329 1
a329 1
    stringBuffer.append(TEXT_48);
d331 1
a331 1
    stringBuffer.append(TEXT_49);
d333 1
a333 1
    stringBuffer.append(TEXT_50);
d338 1
a338 1
    stringBuffer.append(TEXT_51);
d340 1
a340 1
    stringBuffer.append(TEXT_52);
d342 1
a342 1
    stringBuffer.append(TEXT_53);
d344 1
a344 1
    stringBuffer.append(TEXT_54);
d352 1
a352 1
    stringBuffer.append(TEXT_55);
d354 1
a354 1
    stringBuffer.append(TEXT_56);
d356 1
a356 1
    stringBuffer.append(TEXT_57);
d358 1
a358 1
    stringBuffer.append(TEXT_58);
d360 1
a360 1
    stringBuffer.append(TEXT_59);
d362 1
a362 1
    stringBuffer.append(TEXT_60);
d369 4
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
a379 4
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_65);
    		} 
    stringBuffer.append(TEXT_66);
d383 1
a383 1
    stringBuffer.append(TEXT_67);
d387 1
a387 1
    stringBuffer.append(TEXT_68);
d390 1
a390 1
    stringBuffer.append(TEXT_69);
d393 1
a393 1
    stringBuffer.append(TEXT_70);
d396 1
a396 1
    stringBuffer.append(TEXT_71);
d398 1
a398 1
    stringBuffer.append(TEXT_72);
d404 1
a404 1
    stringBuffer.append(TEXT_73);
d406 1
a406 1
    stringBuffer.append(TEXT_74);
d408 1
a408 1
    stringBuffer.append(TEXT_75);
d410 1
a410 1
    stringBuffer.append(TEXT_76);
d412 1
a412 1
    stringBuffer.append(TEXT_77);
d414 1
a414 1
    stringBuffer.append(TEXT_78);
d420 1
a420 1
    stringBuffer.append(TEXT_79);
d422 1
a422 1
    stringBuffer.append(TEXT_80);
d424 1
a424 1
    stringBuffer.append(TEXT_81);
d428 1
a428 1
    stringBuffer.append(TEXT_82);
d430 1
a430 1
    stringBuffer.append(TEXT_83);
d438 1
a438 1
    stringBuffer.append(TEXT_84);
d440 1
a440 1
    stringBuffer.append(TEXT_85);
d448 1
a448 1
    stringBuffer.append(TEXT_86);
d469 1
a469 1
    stringBuffer.append(TEXT_87);
d471 1
a471 1
    stringBuffer.append(TEXT_88);
d473 1
a473 1
    stringBuffer.append(TEXT_89);
d475 1
a475 1
    stringBuffer.append(TEXT_90);
d483 1
a483 1
    stringBuffer.append(TEXT_91);
d485 1
a485 1
    stringBuffer.append(TEXT_92);
d489 1
a489 1
    stringBuffer.append(TEXT_93);
d491 1
a491 1
    stringBuffer.append(TEXT_94);
d493 1
a493 1
    stringBuffer.append(TEXT_95);
d500 1
a500 1
    stringBuffer.append(TEXT_96);
d505 1
a505 1
    stringBuffer.append(TEXT_97);
d508 1
a508 1
    stringBuffer.append(TEXT_98);
@


1.25
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@d5 1
d66 2
a67 2
  protected final String TEXT_47 = "(\"";
  protected final String TEXT_48 = "\", //$NON-NLS-1$" + NL + "\t";
d71 2
a72 2
  protected final String TEXT_52 = "(\"";
  protected final String TEXT_53 = "\", //$NON-NLS-1$" + NL + "\t";
d99 2
a100 2
  protected final String TEXT_80 = ".calculateMetric(\"";
  protected final String TEXT_81 = "\", evalCtx);";
d330 1
d340 1
a340 1
    stringBuffer.append(__genValueExpression.getBody());
d353 1
a353 1
    stringBuffer.append(__genValueExpression.getBody());
d435 1
a435 1
    stringBuffer.append(metricKey);
@


1.24
log
@#144485 Do not generate "o.e.e.v.constraintBindings" extension in plugin.xml if !genDiagram.isValidationEnabled
@
text
@d111 3
a113 3
  protected final String TEXT_93 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_94 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_95 = NL + "} //";
d115 2
a116 1
  protected final String TEXT_97 = NL;
d468 1
d500 2
d503 1
a503 1
    stringBuffer.append(TEXT_94);
d505 1
a505 1
}
d510 1
a510 1
    stringBuffer.append(TEXT_95);
d515 1
a515 1
    stringBuffer.append(TEXT_96);
d518 1
a518 1
    stringBuffer.append(TEXT_97);
@


1.23
log
@header comment should not be a javadoc comment
@
text
@d27 1
a27 1
  protected final String TEXT_9 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = WorkspaceSynchronizer.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
d30 2
a31 2
  protected final String TEXT_12 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tif (!map.containsKey(view.getElement()) && targets.remove(view.getElement())) {" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tEObject domainElement = null;" + NL + "\t\tif(object instanceof View) {" + NL + "\t\t\tView view = (View)object;" + NL + "\t\t\tdomainElement = view.getElement() != null ? view.getElement() : view.getDiagram().getElement();" + NL + "\t\t} else if(object instanceof EObject) {" + NL + "\t\t\tdomainElement = (EObject)object;" + NL + "\t\t} else {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tEPackage domainPackage = domainElement.eClass().getEPackage();\t\t\t\t" + NL + "\t\treturn ";
@


1.22
log
@#136701 [GMFGen] GenDiagramElementTarget should allow to target more then one element
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.21
log
@Correcting copyright processing
@
text
@d234 5
a238 2
		String viewID = Integer.toString(diagramElement.getElement().getVisualID());
		viewID2SelectorMap.put(viewID, selectorClassName);
@


1.20
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d133 1
a133 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.19
log
@#141340  Audit rule targeted to a metric definition is not registered as valid constraint
@
text
@d22 92
a113 92
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends AbstractContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String MARKER_TYPE = ";
  protected final String TEXT_8 = ".ID + \".";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tpart.getDiagramEditPart().getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\tnew Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tvalidate(part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = WorkspaceSynchronizer.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tIStatus status = validator.validate(diagram.getElement());" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_12 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tstatus = validator.validate(diagram);" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_13 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tif (!map.containsKey(view.getElement()) && targets.remove(view.getElement())) {" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_14 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tEObject domainElement = null;" + NL + "\t\tif(object instanceof View) {" + NL + "\t\t\tView view = (View)object;" + NL + "\t\t\tdomainElement = view.getElement() != null ? view.getElement() : view.getDiagram().getElement();" + NL + "\t\t} else if(object instanceof EObject) {" + NL + "\t\t\tdomainElement = (EObject)object;" + NL + "\t\t} else {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tEPackage domainPackage = domainElement.eClass().getEPackage();\t\t\t\t" + NL + "\t\treturn ";
  protected final String TEXT_15 = "domainPackage == ";
  protected final String TEXT_16 = ".eINSTANCE";
  protected final String TEXT_17 = "\t\t\t\t\t\t\t\t\t ";
  protected final String TEXT_18 = "\t\t\t" + NL + "\t}\t";
  protected final String TEXT_19 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_20 = " implements ";
  protected final String TEXT_21 = " {";
  protected final String TEXT_22 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = ((View) object).getType();" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_23 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_24 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_26 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_27 = "\", ";
  protected final String TEXT_28 = ".class); //$NON-NLS-1$";
  protected final String TEXT_29 = NL + "\t}";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_32 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_33 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_34 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_35 = NL + "\t}";
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_37 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_38 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_39 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_40 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}// CtxSwitchStrategy";
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ";
  protected final String TEXT_42 = " extends ";
  protected final String TEXT_43 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_44 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_45 = "() {" + NL + "\t\t\texpression = ";
  protected final String TEXT_46 = "null";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = "(\"";
  protected final String TEXT_49 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_50 = ", ";
  protected final String TEXT_51 = ")";
  protected final String TEXT_52 = ".";
  protected final String TEXT_53 = "(\"";
  protected final String TEXT_54 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_55 = ")";
  protected final String TEXT_56 = "new ";
  protected final String TEXT_57 = "(";
  protected final String TEXT_58 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_59 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_60 = " self = (";
  protected final String TEXT_61 = ")context;";
  protected final String TEXT_62 = "\t" + NL + "\t\t";
  protected final String TEXT_63 = " ";
  protected final String TEXT_64 = " = (";
  protected final String TEXT_65 = ")env.get(\"";
  protected final String TEXT_66 = "\"); //$NON-NLS-1$";
  protected final String TEXT_67 = NL + "\t\treturn ";
  protected final String TEXT_68 = ".";
  protected final String TEXT_69 = "(self";
  protected final String TEXT_70 = ", ";
  protected final String TEXT_71 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_72 = NL + ";\t\t" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_73 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_74 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_75 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_76 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_77 = NL + "\t\t\t\treturn ";
  protected final String TEXT_78 = ".OK_STATUS;";
  protected final String TEXT_79 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_80 = "\t\t\t" + NL + "\t\t\tevalCtx = ";
  protected final String TEXT_81 = ".calculateMetric(\"";
  protected final String TEXT_82 = "\", evalCtx);";
  protected final String TEXT_83 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_84 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_85 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_86 = " {";
  protected final String TEXT_87 = NL;
  protected final String TEXT_88 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_89 = " ";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = " self";
  protected final String TEXT_92 = ", ";
  protected final String TEXT_93 = " ";
  protected final String TEXT_94 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_95 = "' operation\"); //$NON-NLS-1$" + NL + "}";
d115 1
a115 2
  protected final String TEXT_97 = NL + "} //";
  protected final String TEXT_98 = NL;
d136 1
a137 2
    stringBuffer.append(genDiagram.getProvidersPackageName());
    stringBuffer.append(TEXT_5);
d184 2
d187 1
a187 1
    stringBuffer.append(genDiagram.getValidationProviderClassName());
d189 2
a191 2
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genDiagram.getValidationDiagnosticMarkerType());
d195 1
a195 1
    stringBuffer.append(pluginActivatorClass);
d197 1
a197 1
    if(hasNotationModelAudit) {
d199 1
a199 1
    } // end of diagram element validation 
a200 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_14);
d205 2
d208 1
a208 1
    stringBuffer.append(nextGenPackage.getQualifiedPackageInterfaceName());
a209 2
    stringBuffer.append(packageIt.hasNext() ? " || " : ";");
    stringBuffer.append(TEXT_17);
d213 1
a213 1
    stringBuffer.append(TEXT_18);
d225 2
d228 1
a228 1
    stringBuffer.append(selectorClassName);
a229 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.model.IClientSelector"));
    stringBuffer.append(TEXT_21);
d237 2
d240 1
a240 1
    stringBuffer.append(selectorClassName);
a241 2
    	} else {
    stringBuffer.append(TEXT_24);
d248 1
a248 1
    stringBuffer.append(TEXT_25);
d253 2
d256 1
a256 1
    stringBuffer.append(viewID);
d258 1
a258 1
    stringBuffer.append(viewID2SelectorMap.get(viewID));
a259 2
    	} // end of view ID iteration 
    stringBuffer.append(TEXT_29);
d263 2
d266 1
a266 1
    if(hasNotationModelAudit) {
d268 1
a268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
d270 1
a270 1
    	if(usesNotationContextSwitch) {
d272 1
a272 1
    } else {
a273 2
    	} // end of usesNotationContextSwitch 
    stringBuffer.append(TEXT_35);
d277 2
d282 1
a282 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a285 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
    stringBuffer.append(TEXT_40);
d298 2
d301 1
a301 1
    stringBuffer.append(nextAudit.getConstraintAdapterLocalClassName());
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.AbstractModelConstraint"));
d305 1
a305 1
    stringBuffer.append(importedExpressionBase);
a306 2
    stringBuffer.append(nextAudit.getConstraintAdapterLocalClassName());
    stringBuffer.append(TEXT_45);
d322 1
a322 1
    stringBuffer.append(TEXT_46);
d331 2
d334 1
a334 1
    stringBuffer.append(__expressionAccessor);
d336 1
a336 1
    stringBuffer.append(__genValueExpression.getBody());
d338 1
a338 1
    stringBuffer.append(__ctxEClassifierAccess);
a339 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_51);
d344 2
d347 1
a347 1
    stringBuffer.append(__expressionAccessor);
d349 1
a349 1
    stringBuffer.append(__genValueExpression.getBody());
a350 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_55);
d358 2
d361 1
a361 1
    stringBuffer.append(__importedAbstractClass);
d363 1
a363 1
    stringBuffer.append(__ctxEClassifierAccess);
d365 1
a365 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a368 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_61);
d375 2
d378 2
d381 1
a381 1
    stringBuffer.append(TEXT_63);
a382 2
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d384 1
a384 1
    stringBuffer.append(nextVariableName);
a385 2
    		} 
    stringBuffer.append(TEXT_67);
d389 1
a389 1
    stringBuffer.append(TEXT_68);
d393 1
a393 1
    stringBuffer.append(TEXT_69);
d396 1
a396 1
    stringBuffer.append(TEXT_70);
d399 1
a399 1
    stringBuffer.append(TEXT_71);
d402 2
a404 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.IValidationContext"));
    stringBuffer.append(TEXT_73);
d410 2
d413 1
a413 1
    stringBuffer.append(fGetter);
d415 1
a415 1
    				if(attrTarget.isNullAsError()) { 
d417 1
a417 1
    				} else {
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
a420 2
    				} 
    stringBuffer.append(TEXT_79);
d426 2
d429 1
a429 1
    stringBuffer.append(metricProviderClassName);
a430 2
    stringBuffer.append(metricKey);
    stringBuffer.append(TEXT_82);
d434 2
a436 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.Status"));
    stringBuffer.append(TEXT_84);
d444 2
a446 2
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_86);
d454 1
a454 1
    stringBuffer.append(TEXT_87);
d474 2
d477 1
a477 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d479 1
a479 1
    stringBuffer.append(__exprJavaOperName);
a480 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_91);
d488 2
a490 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_93);
d494 2
a496 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_95);
d503 1
a503 1
    stringBuffer.append(TEXT_96);
d508 1
a508 1
    stringBuffer.append(TEXT_97);
d511 1
a511 1
    stringBuffer.append(TEXT_98);
@


1.18
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d62 45
a106 45
  protected final String TEXT_44 = " expression = ";
  protected final String TEXT_45 = "null";
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = "(\"";
  protected final String TEXT_48 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_49 = ", ";
  protected final String TEXT_50 = ")";
  protected final String TEXT_51 = ".";
  protected final String TEXT_52 = "(\"";
  protected final String TEXT_53 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_54 = ")";
  protected final String TEXT_55 = "new ";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_58 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_59 = " self = (";
  protected final String TEXT_60 = ")context;";
  protected final String TEXT_61 = "\t" + NL + "\t\t";
  protected final String TEXT_62 = " ";
  protected final String TEXT_63 = " = (";
  protected final String TEXT_64 = ")env.get(\"";
  protected final String TEXT_65 = "\"); //$NON-NLS-1$";
  protected final String TEXT_66 = NL + "\t\treturn ";
  protected final String TEXT_67 = ".";
  protected final String TEXT_68 = "(self";
  protected final String TEXT_69 = ", ";
  protected final String TEXT_70 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_71 = NL + ";" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic IStatus validate(";
  protected final String TEXT_72 = " ctx) {" + NL + "\t\t\tObject evalCtx = ctx.getTarget();";
  protected final String TEXT_73 = NL + "\t\t\tif(evalCtx instanceof EObject) evalCtx = ((EObject)evalCtx).eGet(";
  protected final String TEXT_74 = "());" + NL + "\t\t\tif(evalCtx == null) {";
  protected final String TEXT_75 = NL + "\t\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) });";
  protected final String TEXT_76 = NL + "\t\t\t\treturn ";
  protected final String TEXT_77 = ".OK_STATUS;";
  protected final String TEXT_78 = NL + "\t\t\t}\t\t\t";
  protected final String TEXT_79 = "\t\t" + NL + "\t\t\tObject result = expression.evaluate(evalCtx);" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_80 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_81 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_82 = " {";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_85 = " ";
  protected final String TEXT_86 = "(";
  protected final String TEXT_87 = " self";
  protected final String TEXT_88 = ", ";
d108 9
a116 5
  protected final String TEXT_90 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_91 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_92 = NL + "} //";
  protected final String TEXT_93 = NL + "} //";
  protected final String TEXT_94 = NL;
d307 2
d324 1
a324 1
    stringBuffer.append(TEXT_45);
d333 1
a333 1
    stringBuffer.append(TEXT_46);
d335 1
a335 1
    stringBuffer.append(TEXT_47);
d337 1
a337 1
    stringBuffer.append(TEXT_48);
d339 1
a339 1
    stringBuffer.append(TEXT_49);
d341 1
a341 1
    stringBuffer.append(TEXT_50);
d346 1
a346 1
    stringBuffer.append(TEXT_51);
d348 1
a348 1
    stringBuffer.append(TEXT_52);
d350 1
a350 1
    stringBuffer.append(TEXT_53);
d352 1
a352 1
    stringBuffer.append(TEXT_54);
d360 1
a360 1
    stringBuffer.append(TEXT_55);
d362 1
a362 1
    stringBuffer.append(TEXT_56);
d364 1
a364 1
    stringBuffer.append(TEXT_57);
a365 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d369 2
d377 1
a377 1
    stringBuffer.append(TEXT_61);
d379 1
a379 1
    stringBuffer.append(TEXT_62);
d381 1
a381 1
    stringBuffer.append(TEXT_63);
d383 1
a383 1
    stringBuffer.append(TEXT_64);
d385 1
a385 1
    stringBuffer.append(TEXT_65);
d387 1
a387 1
    stringBuffer.append(TEXT_66);
d391 1
a391 1
    stringBuffer.append(TEXT_67);
d395 1
a395 1
    stringBuffer.append(TEXT_68);
d398 1
a398 1
    stringBuffer.append(TEXT_69);
d401 1
a401 1
    stringBuffer.append(TEXT_70);
d404 1
a404 1
    stringBuffer.append(TEXT_71);
d406 1
a406 1
    stringBuffer.append(TEXT_72);
d412 1
a412 1
    stringBuffer.append(TEXT_73);
d414 1
a414 1
    stringBuffer.append(TEXT_74);
d416 1
a416 1
    stringBuffer.append(TEXT_75);
d418 1
a418 1
    stringBuffer.append(TEXT_76);
d420 1
a420 1
    stringBuffer.append(TEXT_77);
d422 1
a422 1
    stringBuffer.append(TEXT_78);
d424 11
a434 1
		} 
d436 1
a436 1
    stringBuffer.append(TEXT_79);
d438 1
a438 1
    stringBuffer.append(TEXT_80);
d446 1
a446 1
    stringBuffer.append(TEXT_81);
d448 1
a448 1
    stringBuffer.append(TEXT_82);
d456 1
a456 1
    stringBuffer.append(TEXT_83);
d476 1
a476 1
    stringBuffer.append(TEXT_84);
d478 1
a478 1
    stringBuffer.append(TEXT_85);
d480 1
a480 1
    stringBuffer.append(TEXT_86);
d482 1
a482 1
    stringBuffer.append(TEXT_87);
d490 1
a490 1
    stringBuffer.append(TEXT_88);
d492 1
a492 1
    stringBuffer.append(TEXT_89);
d496 1
a496 1
    stringBuffer.append(TEXT_90);
d498 1
a498 1
    stringBuffer.append(TEXT_91);
d505 1
a505 1
    stringBuffer.append(TEXT_92);
d510 1
a510 1
    stringBuffer.append(TEXT_93);
d513 1
a513 1
    stringBuffer.append(TEXT_94);
@


1.17
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d350 1
a350 1
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
d369 1
a369 1
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
d450 1
a450 1
	String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
a455 2
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) 
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
d457 1
a457 1
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d471 1
a471 1
		String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
@


1.16
log
@#136672 use common expression accessor with audits
@
text
@d90 23
a112 16
  protected final String TEXT_72 = " ctx) {" + NL + "\t\t\tObject result = expression.evaluate(ctx.getTarget());" + NL + "\t\t\tif(result instanceof Boolean && ((Boolean)result).booleanValue()) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_73 = ".OK_STATUS;" + NL + "\t\t\t}" + NL + "\t\t\treturn ctx.createFailureStatus(new Object[] { EMFCoreUtil.getQualifiedName(ctx.getTarget(), true) }); " + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_74 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "static class ";
  protected final String TEXT_75 = " {";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = "(";
  protected final String TEXT_80 = " self";
  protected final String TEXT_81 = ", ";
  protected final String TEXT_82 = " ";
  protected final String TEXT_83 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_84 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_85 = NL + "} //";
  protected final String TEXT_86 = NL + "} //";
  protected final String TEXT_87 = NL;
d401 12
d414 9
a422 1
    stringBuffer.append(TEXT_73);
d430 1
a430 1
    stringBuffer.append(TEXT_74);
d432 1
a432 1
    stringBuffer.append(TEXT_75);
d440 1
a440 1
    stringBuffer.append(TEXT_76);
d462 1
a462 1
    stringBuffer.append(TEXT_77);
d464 1
a464 1
    stringBuffer.append(TEXT_78);
d466 1
a466 1
    stringBuffer.append(TEXT_79);
d468 1
a468 1
    stringBuffer.append(TEXT_80);
d476 1
a476 1
    stringBuffer.append(TEXT_81);
d478 1
a478 1
    stringBuffer.append(TEXT_82);
d482 1
a482 1
    stringBuffer.append(TEXT_83);
d484 1
a484 1
    stringBuffer.append(TEXT_84);
d491 1
a491 1
    stringBuffer.append(TEXT_85);
d496 1
a496 1
    stringBuffer.append(TEXT_86);
d499 1
a499 1
    stringBuffer.append(TEXT_87);
@


1.15
log
@#136834 Generated diagram validation problem markers do not navigate to diagram visual elements
@
text
@d58 48
a105 3
  protected final String TEXT_40 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = ((View) nextTarget).getType();" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}";
  protected final String TEXT_41 = NL + "}";
  protected final String TEXT_42 = NL;
d130 11
d278 11
d290 181
d472 1
a472 1
    stringBuffer.append(TEXT_42);
@


1.14
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d31 1
a31 1
  protected final String TEXT_13 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tString type = view.getType();" + NL + "\t\t\tif ((type == null || \"\".equals(type)) && targets.remove(view.getElement())) { //$NON-NLS-1$" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
@


1.13
log
@using M6 to generate code.
@
text
@d40 1
a40 1
  protected final String TEXT_22 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = getViewSemanticId((View) object);" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
d43 18
a60 22
  protected final String TEXT_25 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic String getViewSemanticId(View view) {" + NL + "\t\tString id = Integer.toString(getVisualID(view));" + NL + "\t\treturn id != null && id.length() > 0 ? id : null; " + NL + "\t}";
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_28 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_29 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}\t\t\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_30 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_31 = "\", ";
  protected final String TEXT_32 = ".class); //$NON-NLS-1$";
  protected final String TEXT_33 = NL + "\t}";
  protected final String TEXT_34 = NL;
  protected final String TEXT_35 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_36 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_37 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_38 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_39 = NL + "\t}";
  protected final String TEXT_40 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_41 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_42 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_43 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_44 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = getViewSemanticId((View) nextTarget);" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}";
  protected final String TEXT_45 = NL + "}";
  protected final String TEXT_46 = NL;
a183 6
    stringBuffer.append(TEXT_26);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_29);
d188 1
a188 1
    stringBuffer.append(TEXT_30);
d190 1
a190 1
    stringBuffer.append(TEXT_31);
d192 1
a192 1
    stringBuffer.append(TEXT_32);
d194 1
a194 1
    stringBuffer.append(TEXT_33);
d198 1
a198 1
    stringBuffer.append(TEXT_34);
d200 1
a200 1
    stringBuffer.append(TEXT_35);
d202 1
a202 1
    stringBuffer.append(TEXT_36);
d204 1
a204 1
    stringBuffer.append(TEXT_37);
d206 1
a206 1
    stringBuffer.append(TEXT_38);
d208 1
a208 1
    stringBuffer.append(TEXT_39);
d212 1
a212 1
    stringBuffer.append(TEXT_40);
d214 1
a214 1
    stringBuffer.append(TEXT_41);
d216 1
a216 1
    stringBuffer.append(TEXT_42);
d218 1
a218 1
    stringBuffer.append(TEXT_43);
d220 1
a220 1
    stringBuffer.append(TEXT_44);
d222 1
a222 1
    stringBuffer.append(TEXT_45);
d224 1
a224 1
    stringBuffer.append(TEXT_46);
@


1.12
log
@restore generators
@
text
@d68 1
a68 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@#134095 do not store compiled templates in cvs
@
text
@d68 1
a68 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.10
log
@Switching to eclipse M6.
@
text
@@


1.9
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d68 1
a68 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.8
log
@[rdvorak] #129766 Remove deprecated API usage
@
text
@d19 46
a64 43
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends AbstractContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String MARKER_TYPE = ";
  protected final String TEXT_5 = ".ID + \".";
  protected final String TEXT_6 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tpart.getDiagramEditPart().getEditingDomain().runExclusive(" + NL + "\t\t\t\t\t\tnew Runnable() {" + NL + "\t\t\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t\t\tvalidate(part.getDiagram());" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(\"Validation action failed\", e); //$NON-NLS-1$" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = WorkspaceSynchronizer.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EMFCoreUtil.getQualifiedName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tIStatus status = validator.validate(diagram.getElement());" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_9 = NL + "\t\t\tvalidator.setTraversalStrategy(getNotationTraversalStrategy(validator));" + NL + "\t\t\tstatus = validator.validate(diagram);" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
  protected final String TEXT_10 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tString type = view.getType();" + NL + "\t\t\tif ((type == null || \"\".equals(type)) && targets.remove(view.getElement())) { //$NON-NLS-1$" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EMFCoreUtil.getQualifiedName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, ViewUtil.getIdStr(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic boolean isInDefaultEditorContext(Object object) {" + NL + "\t\tEObject domainElement = null;" + NL + "\t\tif(object instanceof View) {" + NL + "\t\t\tView view = (View)object;" + NL + "\t\t\tdomainElement = view.getElement() != null ? view.getElement() : view.getDiagram().getElement();" + NL + "\t\t} else if(object instanceof EObject) {" + NL + "\t\t\tdomainElement = (EObject)object;" + NL + "\t\t} else {" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\tEPackage domainPackage = domainElement.eClass().getEPackage();\t\t\t\t" + NL + "\t\treturn ";
  protected final String TEXT_12 = "domainPackage == ";
  protected final String TEXT_13 = ".eINSTANCE";
  protected final String TEXT_14 = "\t\t\t\t\t\t\t\t\t ";
  protected final String TEXT_15 = "\t\t\t" + NL + "\t}\t";
  protected final String TEXT_16 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tpublic static class ";
  protected final String TEXT_17 = " implements ";
  protected final String TEXT_18 = " {";
  protected final String TEXT_19 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = getViewSemanticId((View) object);" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_20 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_21 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_22 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic String getViewSemanticId(View view) {" + NL + "\t\tString id = Integer.toString(getVisualID(view));" + NL + "\t\treturn id != null && id.length() > 0 ? id : null; " + NL + "\t}";
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_25 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_26 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}\t\t\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_27 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_28 = "\", ";
  protected final String TEXT_29 = ".class); //$NON-NLS-1$";
  protected final String TEXT_30 = NL + "\t}";
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_33 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_34 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_35 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_36 = NL + "\t}";
  protected final String TEXT_37 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_38 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_39 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_40 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_41 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = getViewSemanticId((View) nextTarget);" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}";
  protected final String TEXT_42 = NL + "}";
  protected final String TEXT_43 = NL;
d77 9
d87 1
a87 1
    stringBuffer.append(TEXT_2);
d123 1
a123 1
    stringBuffer.append(TEXT_3);
d125 1
a125 1
    stringBuffer.append(TEXT_4);
d127 1
a127 1
    stringBuffer.append(TEXT_5);
d129 1
a129 1
    stringBuffer.append(TEXT_6);
d131 1
a131 1
    stringBuffer.append(TEXT_7);
d133 1
a133 1
    stringBuffer.append(TEXT_8);
d135 1
a135 1
    stringBuffer.append(TEXT_9);
d137 1
a137 1
    stringBuffer.append(TEXT_10);
d139 1
a139 1
    stringBuffer.append(TEXT_11);
d144 1
a144 1
    stringBuffer.append(TEXT_12);
d146 1
a146 1
    stringBuffer.append(TEXT_13);
d148 1
a148 1
    stringBuffer.append(TEXT_14);
d152 1
a152 1
    stringBuffer.append(TEXT_15);
d164 1
a164 1
    stringBuffer.append(TEXT_16);
d166 1
a166 1
    stringBuffer.append(TEXT_17);
d168 1
a168 1
    stringBuffer.append(TEXT_18);
d176 1
a176 1
    stringBuffer.append(TEXT_19);
d178 1
a178 1
    stringBuffer.append(TEXT_20);
d180 1
a180 1
    stringBuffer.append(TEXT_21);
d187 3
a189 3
    stringBuffer.append(TEXT_22);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(TEXT_24);
d191 1
a191 1
    stringBuffer.append(TEXT_25);
d193 1
a193 1
    stringBuffer.append(TEXT_26);
d198 1
a198 1
    stringBuffer.append(TEXT_27);
d200 1
a200 1
    stringBuffer.append(TEXT_28);
d202 1
a202 1
    stringBuffer.append(TEXT_29);
d204 1
a204 1
    stringBuffer.append(TEXT_30);
d208 1
a208 1
    stringBuffer.append(TEXT_31);
d210 1
a210 1
    stringBuffer.append(TEXT_32);
d212 1
a212 1
    stringBuffer.append(TEXT_33);
d214 1
a214 1
    stringBuffer.append(TEXT_34);
d216 1
a216 1
    stringBuffer.append(TEXT_35);
d218 1
a218 1
    stringBuffer.append(TEXT_36);
d222 1
a222 1
    stringBuffer.append(TEXT_37);
d224 1
a224 1
    stringBuffer.append(TEXT_38);
d226 1
a226 1
    stringBuffer.append(TEXT_39);
d228 1
a228 1
    stringBuffer.append(TEXT_40);
d230 1
a230 1
    stringBuffer.append(TEXT_41);
d232 1
a232 1
    stringBuffer.append(TEXT_42);
d234 1
a234 1
    stringBuffer.append(TEXT_43);
@


1.7
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@d20 1
a20 1
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.util.HashMap;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "import java.util.ArrayList;" + NL + "import java.util.Arrays;" + NL + "import java.util.Map;" + NL + "import java.util.Set;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IMarker;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.emf.common.util.Diagnostic;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EPackage;" + NL + "import org.eclipse.emf.ecore.util.Diagnostician;" + NL + "import org.eclipse.emf.validation.model.EvaluationMode;" + NL + "import org.eclipse.emf.validation.model.IConstraintStatus;" + NL + "import org.eclipse.emf.validation.service.IBatchValidator;" + NL + "import org.eclipse.emf.validation.service.ModelValidationService;" + NL + "import org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.providers.internal.DiagramContributionItemProvider;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.Action;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL;
d22 1
a22 1
  protected final String TEXT_4 = " extends DiagramContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String MARKER_TYPE = ";
d24 3
a26 3
  protected final String TEXT_6 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tOperationUtil.runAsRead(new MRunnable() {" + NL + "\t\t\t\t\t\tpublic Object run() {" + NL + "\t\t\t\t\t\t\tvalidate(part.getDiagram());" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = ResourceUtil.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EObjectUtil.getQName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "\t\t\t" + NL + "\t\t\tIBatchValidator validator = (IBatchValidator)ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH);" + NL + "\t\t\tIStatus status = validator.validate(diagram.getElement());" + NL + "\t\t\tList allStatuses = new ArrayList();\t\t\t" + NL + "\t\t\tallStatuses.addAll(Arrays.asList(status.isMultiStatus() ? status.getChildren() : new IStatus[] { status }));";
d28 1
a28 1
  protected final String TEXT_10 = NL + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {\t\t\t" + NL + "\t\t\t\tObject nextStatus = it.next();" + NL + "\t\t\t\tif(nextStatus instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)nextStatus).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (Iterator it = allStatuses.iterator(); it.hasNext();) {" + NL + "\t\t\t\tObject nextStatusObj = it.next();" + NL + "\t\t\t\tif(nextStatusObj instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus)nextStatusObj;" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), nextStatus.getSeverity());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tif(targetElement instanceof View) {" + NL + "\t\t\t\treturn (View)targetElement;" + NL + "\t\t\t}\t\t" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tString type = view.getType();" + NL + "\t\t\tif ((type == null || \"\".equals(type)) && targets.remove(view.getElement())) { //$NON-NLS-1$" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EObjectUtil.getQName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, EObjectUtil.getID(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
d35 27
a61 26
  protected final String TEXT_17 = " implements org.eclipse.emf.validation.model.IClientSelector {";
  protected final String TEXT_18 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {\t\t" + NL + "\t\t\tif(isInDefaultEditorContext(object) && object instanceof View) {" + NL + "\t\t\t\tString id = getViewSemanticId((View) object);" + NL + "\t\t\t\treturn id != null && semanticCtxIdMap.get(id) == ";
  protected final String TEXT_19 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_20 = NL + "\t\t/**" + NL + "\t\t* @@generated" + NL + "\t\t*/" + NL + "\t\tpublic boolean selects(Object object) {" + NL + "\t\t\treturn isInDefaultEditorContext(object);\t" + NL + "\t\t}\t" + NL + "\t}\t\t";
  protected final String TEXT_21 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic String getViewSemanticId(View view) {" + NL + "\t\tString id = Integer.toString(getVisualID(view));" + NL + "\t\treturn id != null && id.length() > 0 ? id : null; " + NL + "\t}";
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_24 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_25 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}\t\t\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic final Map semanticCtxIdMap = new HashMap();" + NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic {";
  protected final String TEXT_26 = NL + "\t\tsemanticCtxIdMap.put(\"";
  protected final String TEXT_27 = "\", ";
  protected final String TEXT_28 = ".class); //$NON-NLS-1$";
  protected final String TEXT_29 = NL + "\t}";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t* @@generated" + NL + "\t*/" + NL + "\tstatic ";
  protected final String TEXT_32 = " getNotationTraversalStrategy(IBatchValidator validator) {";
  protected final String TEXT_33 = "\t" + NL + "\t\treturn new CtxSwitchStrategy(validator);";
  protected final String TEXT_34 = "\t\t\t" + NL + "\t\treturn validator.getDefaultTraversalStrategy();";
  protected final String TEXT_35 = NL + "\t}";
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class CtxSwitchStrategy implements ";
  protected final String TEXT_37 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_38 = " defaultStrategy;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate String currentSemanticCtxId;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate boolean ctxChanged = true;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject currentTarget;\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate EObject preFetchedNextTarget;\t\t" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tCtxSwitchStrategy(IBatchValidator validator) {" + NL + "\t\t\tthis.defaultStrategy = validator.getDefaultTraversalStrategy();" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void elementValidated(EObject element, IStatus status) {" + NL + "\t\t\tdefaultStrategy.elementValidated(element, status);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean hasNext() {" + NL + "\t\t\treturn defaultStrategy.hasNext();" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean isClientContextChanged() {" + NL + "\t\t\tif(preFetchedNextTarget == null) {" + NL + "\t\t\t\tpreFetchedNextTarget = next();" + NL + "\t\t\t\tprepareNextClientContext(preFetchedNextTarget);\t\t\t\t" + NL + "\t\t\t}\t\t\t  \t\t\t" + NL + "\t\t\treturn ctxChanged;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic EObject next() {" + NL + "\t\t\tEObject nextTarget = preFetchedNextTarget;" + NL + "\t\t\tif(nextTarget == null) {" + NL + "\t\t\t\tnextTarget = defaultStrategy.next();" + NL + "\t\t\t}" + NL + "\t\t\tthis.preFetchedNextTarget = null;" + NL + "\t\t\treturn this.currentTarget = nextTarget;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void startTraversal(";
  protected final String TEXT_39 = " traversalRoots," + NL + "\t\t\t\t";
  protected final String TEXT_40 = " monitor) {" + NL + "\t\t\tdefaultStrategy.startTraversal(traversalRoots, monitor);" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void prepareNextClientContext(EObject nextTarget) { " + NL + "\t\t\tif (nextTarget != null && currentTarget != null) {" + NL + "\t\t\t\tif (nextTarget instanceof View) {" + NL + "\t\t\t\t\tString id = getViewSemanticId((View) nextTarget);" + NL + "\t\t\t\t\tString nextSemanticId = id != null" + NL + "\t\t\t\t\t\t\t&& semanticCtxIdMap.containsKey(id) ? id : null;" + NL + "\t\t\t\t\tif ((currentSemanticCtxId != null && !currentSemanticCtxId" + NL + "\t\t\t\t\t\t\t.equals(nextSemanticId))" + NL + "\t\t\t\t\t\t\t|| (nextSemanticId != null && !nextSemanticId" + NL + "\t\t\t\t\t\t\t\t\t.equals(currentSemanticCtxId))) {" + NL + "\t\t\t\t\t\tthis.ctxChanged = true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tcurrentSemanticCtxId = nextSemanticId;" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\t// context of domain model" + NL + "\t\t\t\t\tthis.ctxChanged = currentSemanticCtxId != null;" + NL + "\t\t\t\t\tcurrentSemanticCtxId = null;" + NL + "\t\t\t\t}" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.ctxChanged = false;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}";
  protected final String TEXT_41 = NL + "}";
  protected final String TEXT_42 = NL;
d76 35
a110 1
    importManager.markImportLocation(stringBuffer);
d155 2
d164 1
a164 1
    stringBuffer.append(TEXT_18);
d166 1
a166 1
    stringBuffer.append(TEXT_19);
d168 1
a168 1
    stringBuffer.append(TEXT_20);
a174 1
    stringBuffer.append(TEXT_21);
d177 1
d179 1
a179 1
    stringBuffer.append(TEXT_24);
d181 1
a181 1
    stringBuffer.append(TEXT_25);
d186 1
a186 1
    stringBuffer.append(TEXT_26);
d188 1
a188 1
    stringBuffer.append(TEXT_27);
d190 1
a190 1
    stringBuffer.append(TEXT_28);
d192 1
a192 1
    stringBuffer.append(TEXT_29);
d196 1
a196 1
    stringBuffer.append(TEXT_30);
d198 1
a198 1
    stringBuffer.append(TEXT_31);
d200 1
a200 1
    stringBuffer.append(TEXT_32);
d202 1
a202 1
    stringBuffer.append(TEXT_33);
d204 1
a204 1
    stringBuffer.append(TEXT_34);
d206 1
a206 1
    stringBuffer.append(TEXT_35);
a209 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.validation.service.ITraversalStrategy"));
d213 2
d216 1
a216 1
    stringBuffer.append(TEXT_39);
d218 1
a218 1
    stringBuffer.append(TEXT_40);
d220 1
a220 1
    stringBuffer.append(TEXT_41);
d222 1
a222 1
    stringBuffer.append(TEXT_42);
@


1.6
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d5 1
d20 1
a20 1
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.util.HashMap;" + NL + "import java.util.HashSet;" + NL + "import java.util.Iterator;" + NL + "import java.util.List;" + NL + "import java.util.Map;" + NL + "import java.util.Set;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IMarker;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.emf.common.util.Diagnostic;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.util.Diagnostician;" + NL + "import org.eclipse.emf.validation.model.EvaluationMode;" + NL + "import org.eclipse.emf.validation.model.IConstraintStatus;" + NL + "import org.eclipse.emf.validation.service.ModelValidationService;" + NL + "import org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.providers.internal.DiagramContributionItemProvider;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.EObjectUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.Action;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL;
d26 35
a60 3
  protected final String TEXT_8 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EObjectUtil.getQName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "" + NL + "\t\t\tIStatus status = ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH).validate(diagram.getElement());" + NL + "\t\t\tIStatus[] statuses = status.isMultiStatus() ? status.getChildren() : new IStatus[] { status };" + NL + "\t\t\t" + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\tfor (int i = 0; i < statuses.length; i++) {" + NL + "\t\t\t\tif(statuses[i] instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)statuses[i]).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (int i = 0; i < statuses.length; i++) {" + NL + "\t\t\t\tif(statuses[i] instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus) statuses[i];" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), Diagnostic.ERROR);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tString type = view.getType();" + NL + "\t\t\tif ((type == null || \"\".equals(type)) && targets.remove(view.getElement())) { //$NON-NLS-1$" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EObjectUtil.getQName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, EObjectUtil.getID(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "}";
  protected final String TEXT_10 = NL;
d66 5
a70 3
GenDiagram genDiagram = (GenDiagram)((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d87 4
d92 92
a183 1
    stringBuffer.append(TEXT_9);
d185 1
a185 1
    stringBuffer.append(TEXT_10);
@


1.5
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d33 1
a33 1
GenDiagram genDiagram = (GenDiagram)argument;
@


1.4
log
@ImportManager moved to oeg.common
@
text
@d21 7
a27 6
  protected final String TEXT_4 = " extends DiagramContributionItemProvider {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IAction createAction(String actionId, IWorkbenchPartDescriptor partDescriptor) {" + NL + "\t\tif (ValidateAction.VALIDATE_ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new ValidateAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class ValidateAction extends Action {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String MARKER_TYPE = \"";
  protected final String TEXT_5 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tOperationUtil.runAsRead(new MRunnable() {" + NL + "\t\t\t\t\t\tpublic Object run() {" + NL + "\t\t\t\t\t\t\tvalidate(part.getDiagram());" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_6 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = ResourceUtil.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_7 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EObjectUtil.getQName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "" + NL + "\t\t\tIStatus status = ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH).validate(diagram.getElement());" + NL + "\t\t\tIStatus[] statuses = status.isMultiStatus() ? status.getChildren() : new IStatus[] { status };" + NL + "\t\t\t" + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\tfor (int i = 0; i < statuses.length; i++) {" + NL + "\t\t\t\tif(statuses[i] instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)statuses[i]).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (int i = 0; i < statuses.length; i++) {" + NL + "\t\t\t\tif(statuses[i] instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus) statuses[i];" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), Diagnostic.ERROR);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tString type = view.getType();" + NL + "\t\t\tif ((type == null || \"\".equals(type)) && targets.remove(view.getElement())) { //$NON-NLS-1$" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EObjectUtil.getQName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, EObjectUtil.getID(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(null, e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "}";
  protected final String TEXT_9 = NL;
d35 1
d44 1
a44 1
    stringBuffer.append(genDiagram.getPlugin().getID() + "." + genDiagram.getValidationDiagnosticMarkerType());
d46 1
a46 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d48 1
a48 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d50 1
a50 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d52 2
d55 1
a55 1
    stringBuffer.append(TEXT_9);
@


1.3
log
@#125893
Logging methods
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.2
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d22 5
a26 2
  protected final String TEXT_5 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tpublic static final String VALIDATE_ACTION_KEY = \"validateAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate IWorkbenchPartDescriptor workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ValidateAction(IWorkbenchPartDescriptor workbenchPartDescriptor) {" + NL + "\t\t\tsetId(VALIDATE_ACTION_KEY);" + NL + "\t\t\tsetText(\"Validate\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\tIWorkbenchPart workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\tif(workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart)workbenchPart;" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tOperationUtil.runAsRead(new MRunnable() {" + NL + "\t\t\t\t\t\tpublic Object run() {" + NL + "\t\t\t\t\t\t\tvalidate(part.getDiagram());" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t});" + NL + "\t\t\t\t}catch (Exception e) {" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void validate(Diagram diagram) {" + NL + "\t\t\tIFile diagramFile = ResourceUtil.getFile(diagram.eResource());" + NL + "\t\t\ttry {" + NL + "\t\t\t\tdiagramFile.deleteMarkers(MARKER_TYPE, true, IResource.DEPTH_ZERO);" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\te.printStackTrace();" + NL + "\t\t\t}" + NL + "\t\t\tDiagnostic diagnostic = new Diagnostician() {" + NL + "\t\t\t\tpublic String getObjectLabel(EObject eObject) {" + NL + "\t\t\t\t\treturn EObjectUtil.getQName(eObject, true);" + NL + "\t\t\t\t}" + NL + "\t\t\t}.validate(diagram.getElement());" + NL + "" + NL + "\t\t\tIStatus status = ModelValidationService.getInstance().newValidator(EvaluationMode.BATCH).validate(diagram.getElement());" + NL + "\t\t\tIStatus[] statuses = status.isMultiStatus() ? status.getChildren() : new IStatus[] { status };" + NL + "\t\t\t" + NL + "\t\t\tHashSet targets = new HashSet();" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\ttargets.add(getDiagnosticTarget((Diagnostic)it.next()));" + NL + "\t\t\t}\t\t\tfor (int i = 0; i < statuses.length; i++) {" + NL + "\t\t\t\tif(statuses[i] instanceof IConstraintStatus) {" + NL + "\t\t\t\t\ttargets.add(((IConstraintStatus)statuses[i]).getTarget());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMap viewMap = buildElement2ViewMap(diagram, targets);" + NL + "\t\t\tfor (Iterator it = diagnostic.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tDiagnostic nextDiagnostic = (Diagnostic) it.next();" + NL + "\t\t\t\tList data = nextDiagnostic.getData();" + NL + "\t\t\t\tif (!data.isEmpty() && data.get(0) instanceof EObject) {" + NL + "\t\t\t\t\tEObject element = (EObject)data.get(0);" + NL + "\t\t\t\t\tView view = findTargetView(element, viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, element, nextDiagnostic.getMessage(), diagnosticToStatusSeverity(nextDiagnostic.getSeverity()));" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tfor (int i = 0; i < statuses.length; i++) {" + NL + "\t\t\t\tif(statuses[i] instanceof IConstraintStatus) {" + NL + "\t\t\t\t\tIConstraintStatus nextStatus = (IConstraintStatus) statuses[i];" + NL + "\t\t\t\t\tView view = findTargetView(nextStatus.getTarget(), viewMap);" + NL + "\t\t\t\t\taddMarker(diagramFile, view != null ? view : diagram, nextStatus.getTarget(), nextStatus.getMessage(), Diagnostic.ERROR);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate View findTargetView(EObject targetElement, Map viewMap) {" + NL + "\t\t\tfor(EObject container = targetElement; container != null; container = container.eContainer()) {" + NL + "\t\t\t\tif(viewMap.containsKey(container)) return (View)viewMap.get(container); " + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate Map buildElement2ViewMap(Diagram diagram, Set targets) {" + NL + "\t\t\tHashMap map = new HashMap();" + NL + "\t\t\tgetElement2ViewMap(diagram, map, targets);" + NL + "\t\t\tif(!targets.isEmpty()) {" + NL + "\t\t\t\tSet path = new HashSet();" + NL + "\t\t\t\tfor (Iterator it = targets.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextNotMapped = (EObject) it.next();" + NL + "\t\t\t\t\tfor (EObject container = nextNotMapped.eContainer(); container != null; container = container.eContainer()) {" + NL + "\t\t\t\t\t\tif(!map.containsKey(container)) { " + NL + "\t\t\t\t\t\t\tpath.add(container);" + NL + "\t\t\t\t\t\t} else break;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\tgetElement2ViewMap(diagram, map, path);" + NL + "\t\t\t}" + NL + "\t\t\treturn map;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void getElement2ViewMap(View view, Map map, Set targets) {" + NL + "\t\t\tString type = view.getType();" + NL + "\t\t\tif ((type == null || \"\".equals(type)) && targets.remove(view.getElement())) { //$NON-NLS-1$" + NL + "\t\t\t\tmap.put(view.getElement(), view);" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator it = view.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\tif (view instanceof Diagram) {" + NL + "\t\t\t\tfor (Iterator it = ((Diagram)view).getEdges().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tgetElement2ViewMap((View) it.next(), map, targets);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate void addMarker(IFile file, View view, EObject element, String message, int statusSeverity) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tIMarker marker = file.createMarker(MARKER_TYPE);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.MESSAGE, message);" + NL + "\t\t\t\tmarker.setAttribute(IMarker.LOCATION, EObjectUtil.getQName(element, true));" + NL + "\t\t\t\tmarker.setAttribute(org.eclipse.gmf.runtime.common.ui.resources.IMarker.ELEMENT_ID, EObjectUtil.getID(view));" + NL + "\t\t\t\tint markerSeverity = IMarker.SEVERITY_INFO;" + NL + "\t\t\t\tif(statusSeverity == IStatus.WARNING) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_WARNING;    \t\t\t\t\t\t" + NL + "\t\t\t\t} else if(statusSeverity == IStatus.ERROR || statusSeverity == IStatus.CANCEL) {" + NL + "\t\t\t\t\tmarkerSeverity = IMarker.SEVERITY_ERROR;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tmarker.setAttribute(IMarker.SEVERITY, markerSeverity);\t\t\t\t" + NL + "\t\t\t} catch (CoreException e) {" + NL + "\t\t\t\te.printStackTrace();" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate EObject getDiagnosticTarget(Diagnostic diagnostic) {" + NL + "\t\t\tif(!diagnostic.getData().isEmpty()) {" + NL + "\t\t\t\tObject target = diagnostic.getData().get(0);" + NL + "\t\t\t\treturn target instanceof EObject ? (EObject)target : null;" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate int diagnosticToStatusSeverity(int diagnosticSeverity) {" + NL + "\t\t\tif(diagnosticSeverity == Diagnostic.OK) {" + NL + "\t\t\t\treturn IStatus.OK;    \t\t\t\t\t\t" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.INFO) {" + NL + "\t\t\t\treturn IStatus.INFO;" + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.WARNING) {" + NL + "\t\t\t\treturn IStatus.WARNING; " + NL + "\t\t\t} else if(diagnosticSeverity == Diagnostic.ERROR || diagnosticSeverity == Diagnostic.CANCEL) {" + NL + "\t\t\t\treturn IStatus.ERROR; " + NL + "\t\t\t}" + NL + "\t\t\treturn IStatus.INFO;" + NL + "\t\t}" + NL + "\t}\t" + NL + "}";
  protected final String TEXT_6 = NL;
d44 6
d51 1
a51 1
    stringBuffer.append(TEXT_6);
@


1.1
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@d39 1
a39 1
    stringBuffer.append(genDiagram.getPluginID() + "." + genDiagram.getValidationDiagnosticMarkerType());
@

