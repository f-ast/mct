head	1.16;
access;
symbols
	v20081022-1925:1.16
	v20081015-1925:1.16
	v20081008-1925:1.16
	v20081001-1925:1.16
	v20080924-1925:1.16
	v20080917-1925:1.16
	v20080911-1728:1.16
	v20080910-1520:1.16
	v20080903-1520:1.16
	v20080827-1520:1.16
	v20080813-1520:1.16
	v20080806-1520:1.16
	R1_0_maintenance:1.16.0.2
	R1_0:1.16
	I20060309-1300:1.15
	M5_10:1.12
	S20060303-1600:1.12
	I20060227-1730:1.12
	I20060216-1945:1.12
	I20060210-1715:1.10
	I20060209-1815:1.10
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.16
date	2006.03.13.11.02.30;	author dstadnik;	state dead;
branches;
next	1.15;

1.15
date	2006.03.09.13.25.10;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.07.14.09.19;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.15.13.27.40;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.14.13.06.38;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.09.16.16.00;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.17.15.49;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.06.14.31.00;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.06.11.00.20;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.05.22.57.53;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.31.11.00.48;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.10.16.50.57;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.11.22.11.50.03;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.16
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class LinkLabelTextEditPartGenerator
{
  protected static String nl;
  public static synchronized LinkLabelTextEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LinkLabelTextEditPartGenerator result = new LinkLabelTextEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends TextCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_12 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_13 = " figure = super.createFigure();" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_14 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_15 = ") figure).getText();" + NL + "\t\t} else if (figure instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_17 = ") figure).getText();" + NL + "\t\t}" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = super.getLabelText();" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL;
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_20 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();" + NL + "\t\t\t";
  protected final String TEXT_21 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_22 = " hintAdapter = new ";
  protected final String TEXT_23 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_24 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_25 = ".";
  protected final String TEXT_26 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_27 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_28 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    
GenLinkLabel genLabel = (GenLinkLabel) ((Object[]) argument)[0];
GenCommonBase genHost = genLabel.getLink();
GenDiagram genDiagram = genLabel.getDiagram();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_5);
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_6);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genLabel.getTextEditPartClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genLabel.getTextEditPartClassName());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.IFigure"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Label"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel"));
    stringBuffer.append(TEXT_17);
    if (genLabel.isReadOnly()) {
    stringBuffer.append(TEXT_18);
    }
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(genHost.getUniqueIdentifier());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
    stringBuffer.append(TEXT_27);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_28);
    return stringBuffer.toString();
  }
}
@


1.15
log
@remove warnings
@
text
@@


1.14
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d37 9
a45 10
  protected final String TEXT_20 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();";
  protected final String TEXT_21 = NL + "\t\t\t";
  protected final String TEXT_22 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_23 = " hintAdapter = new ";
  protected final String TEXT_24 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_25 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_26 = ".";
  protected final String TEXT_27 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_28 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_29 = NL;
d52 1
d95 1
a95 10
    
GenCommonBase genHost;
if (genLabel instanceof GenNodeLabel) {
	genHost = ((GenNodeLabel) genLabel).getNode();
} else if (genLabel instanceof GenLinkLabel) {
	genHost = ((GenLinkLabel) genLabel).getLink();
} else {
	throw new IllegalArgumentException("Unknown label type: " + genLabel);
}

d97 1
a97 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d101 1
a101 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.ui.services.parser.ParserHintAdapter"));
d103 1
a103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d105 1
a105 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d107 1
a107 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d109 1
a109 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
a110 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_29);
@


1.13
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d18 29
a46 26
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends TextCompartmentEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}";
  protected final String TEXT_7 = NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String defaultText;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " createFigure() {" + NL + "\t\t";
  protected final String TEXT_10 = " figure = super.createFigure();" + NL + "\t\tif (figure instanceof ";
  protected final String TEXT_11 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_12 = ") figure).getText();" + NL + "\t\t} else if (figure instanceof ";
  protected final String TEXT_13 = ") {" + NL + "\t\t\tdefaultText = ((";
  protected final String TEXT_14 = ") figure).getText();" + NL + "\t\t}" + NL + "\t\treturn figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = super.getLabelText();" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\treturn defaultText;" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}" + NL;
  protected final String TEXT_15 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_16 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_17 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();";
  protected final String TEXT_18 = NL + "\t\t\t";
  protected final String TEXT_19 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_20 = " hintAdapter = new ";
  protected final String TEXT_21 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_22 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_23 = ".";
  protected final String TEXT_24 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_25 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_26 = NL;
d56 4
a59 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d61 1
a61 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d63 1
a63 1
    importManager.markImportLocation(stringBuffer);
d65 1
a65 1
    stringBuffer.append(genLabel.getTextEditPartClassName());
d67 1
a67 1
    stringBuffer.append(genLabel.getTextEditPartClassName());
d69 1
d71 1
d73 4
d78 1
a78 1
    stringBuffer.append(TEXT_9);
d80 1
a80 1
    stringBuffer.append(TEXT_10);
d82 1
a82 1
    stringBuffer.append(TEXT_11);
d84 1
a84 1
    stringBuffer.append(TEXT_12);
d86 1
a86 1
    stringBuffer.append(TEXT_13);
d88 1
a88 1
    stringBuffer.append(TEXT_14);
d90 1
a90 1
    stringBuffer.append(TEXT_15);
d92 1
a92 1
    stringBuffer.append(TEXT_16);
d94 1
a94 1
    stringBuffer.append(TEXT_17);
d105 1
a105 1
    stringBuffer.append(TEXT_18);
d107 1
a107 1
    stringBuffer.append(TEXT_19);
d109 1
a109 1
    stringBuffer.append(TEXT_20);
d111 1
a111 1
    stringBuffer.append(TEXT_21);
d113 1
a113 1
    stringBuffer.append(TEXT_22);
d115 1
a115 1
    stringBuffer.append(TEXT_23);
d117 1
a117 1
    stringBuffer.append(TEXT_24);
d119 1
a119 1
    stringBuffer.append(TEXT_25);
d121 1
a121 1
    stringBuffer.append(TEXT_26);
@


1.12
log
@get editing domain from eobject
@
text
@d25 19
a43 16
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\treturn \"";
  protected final String TEXT_10 = "\";" + NL + "\t}";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getLabelText() {" + NL + "\t\tString text = super.getLabelText();" + NL + "\t\tif (text == null || text.length() == 0) {" + NL + "\t\t\treturn \"";
  protected final String TEXT_12 = "\";" + NL + "\t\t}" + NL + "\t\treturn text;" + NL + "\t}";
  protected final String TEXT_13 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_14 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tString parserHint = ((View)getModel()).getType();";
  protected final String TEXT_15 = NL + "\t\t\t";
  protected final String TEXT_16 = " element = resolveSemanticElement();" + NL + "\t\t\tif (element != null) {" + NL + "\t\t\t\t";
  protected final String TEXT_17 = " hintAdapter = new ";
  protected final String TEXT_18 = "(element, parserHint) {" + NL + "\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_19 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn ";
  protected final String TEXT_20 = ".";
  protected final String TEXT_21 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_22 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_23 = NL;
a63 1
    if (genLabel.isReadOnly() || genLabel.getModelFacet() instanceof TextLabelModelFacet) {
d65 1
a65 5
    
}
if (genLabel.getModelFacet() instanceof TextLabelModelFacet) {
	TextLabelModelFacet modelFacet = (TextLabelModelFacet) genLabel.getModelFacet();

d67 1
a67 1
    stringBuffer.append(modelFacet.getText());
d69 1
a69 5
    
} else if (genLabel.getModelFacet() instanceof FeatureLabelModelFacet) {
	String defaultText = ((FeatureLabelModelFacet) genLabel.getModelFacet()).getDefaultText();
	if (defaultText != null) {

d71 1
a71 1
    stringBuffer.append(defaultText);
d73 1
a73 4
    
	}
}

d75 6
d82 1
a82 1
    stringBuffer.append(TEXT_14);
d93 1
a93 1
    stringBuffer.append(TEXT_15);
d95 1
a95 1
    stringBuffer.append(TEXT_16);
d97 1
a97 1
    stringBuffer.append(TEXT_17);
d99 1
a99 1
    stringBuffer.append(TEXT_18);
d101 1
a101 1
    stringBuffer.append(TEXT_19);
d103 1
a103 1
    stringBuffer.append(TEXT_20);
d105 1
a105 1
    stringBuffer.append(TEXT_21);
d107 1
a107 1
    stringBuffer.append(TEXT_22);
d109 1
a109 1
    stringBuffer.append(TEXT_23);
@


1.11
log
@use new transactional emf api
@
text
@d38 3
a40 4
  protected final String TEXT_21 = ";" + NL + "\t\t\t\t\t\t} else if (";
  protected final String TEXT_22 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\treturn getEditingDomain();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_23 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_24 = NL;
d109 1
a109 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.transaction.TransactionalEditingDomain"));
d111 1
a111 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.ParserService"));
a112 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_24);
@


1.10
log
@Updating with new transaction API.
@
text
@d38 4
a41 3
  protected final String TEXT_21 = ";" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t};" + NL + "\t\t\t\tparser = ";
  protected final String TEXT_22 = ".getInstance().getParser(hintAdapter);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_23 = NL;
d110 2
d113 1
a113 1
    stringBuffer.append(TEXT_22);
d115 1
a115 1
    stringBuffer.append(TEXT_23);
@


1.9
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d30 11
a40 2
  protected final String TEXT_13 = NL + "}";
  protected final String TEXT_14 = NL;
d84 27
d112 1
a112 1
    stringBuffer.append(TEXT_14);
@


1.8
log
@#111949 Provide a possibility to invoke inplace for inner elements with empty name
@
text
@d37 1
a37 1
GenLinkLabel genLabel = (GenLinkLabel) argument;
@


1.7
log
@#126533 It should be possible to specify a label with fixed text in gmfgen model
@
text
@d28 4
a31 2
  protected final String TEXT_11 = NL + "}";
  protected final String TEXT_12 = NL;
d62 5
a66 1
    }
d68 7
d76 1
a76 1
    stringBuffer.append(TEXT_12);
@


1.6
log
@ImportManager moved to oeg.common
@
text
@d26 4
a29 2
  protected final String TEXT_9 = NL + "}";
  protected final String TEXT_10 = NL;
d50 1
a50 1
    if (genLabel.isReadOnly()) {
d52 8
d61 1
a61 1
    stringBuffer.append(TEXT_9);
d63 1
a63 1
    stringBuffer.append(TEXT_10);
@


1.5
log
@#125828 Generated code is bypassing parser service...
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.4
log
@#125729 Support labels based on multiple structural features
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d25 3
a27 28
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = " getParser() {" + NL + "\t\tif (parser == null) {";
  protected final String TEXT_10 = NL + "\t\t\tparser = new ";
  protected final String TEXT_11 = "(";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().getEStructuralFeature(\"";
  protected final String TEXT_14 = "\"));";
  protected final String TEXT_15 = NL + "\t\t\t";
  protected final String TEXT_16 = " features = new ";
  protected final String TEXT_17 = "(";
  protected final String TEXT_18 = ");";
  protected final String TEXT_19 = NL + "\t\t\tfeatures.add(";
  protected final String TEXT_20 = ".eINSTANCE.get";
  protected final String TEXT_21 = "().getEStructuralFeature(\"";
  protected final String TEXT_22 = "\"));";
  protected final String TEXT_23 = NL + "\t\t\tparser = new ";
  protected final String TEXT_24 = "(features);";
  protected final String TEXT_25 = "\t\t\t";
  protected final String TEXT_26 = NL + "\t\t\t((";
  protected final String TEXT_27 = ") parser).setViewPattern(\"";
  protected final String TEXT_28 = "\");";
  protected final String TEXT_29 = NL + "\t\t\t((";
  protected final String TEXT_30 = ") parser).setEditPattern(\"";
  protected final String TEXT_31 = "\");";
  protected final String TEXT_32 = NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_33 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_34 = NL + "}";
  protected final String TEXT_35 = NL;
a46 10
    
String accessorName;
if (genLabel.getLink().getModelFacet() instanceof TypeLinkModelFacet) {
	TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLabel.getLink().getModelFacet();
	accessorName = modelFacet.getMetaClass().getClassifierAccessorName();
} else {
	FeatureModelFacet modelFacet = (FeatureModelFacet) genLabel.getLink().getModelFacet();
	accessorName = modelFacet.getMetaFeature().getGenClass().getClassifierAccessorName();
}

d48 1
a48 6
    
{
	GenPackage genPackage = genDiagram.getDomainMetaModel();
	String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
	LabelModelFacet modelFacet = genLabel.getModelFacet();

d50 1
a50 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.parser.IParser"));
d52 1
a52 6
    
	String parserClassName;
	if (modelFacet instanceof FeatureModelFacet) {
		parserClassName = importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName());
		String featureName = ((FeatureModelFacet) modelFacet).getMetaFeature().getName();

a53 67
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(accessorName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(featureName);
    stringBuffer.append(TEXT_14);
    
	} else if (modelFacet instanceof CompositeFeatureModelFacet) {
		parserClassName = importManager.getImportedName(genDiagram.getStructuralFeaturesParserQualifiedClassName());
		java.util.List features = ((CompositeFeatureModelFacet) modelFacet).getMetaFeatures();

    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(features.size());
    stringBuffer.append(TEXT_18);
    
		for (java.util.Iterator it = features.iterator(); it.hasNext(); ) {
			String featureName = ((GenFeature) it.next()).getName();

    stringBuffer.append(TEXT_19);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(accessorName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(featureName);
    stringBuffer.append(TEXT_22);
    		}
    stringBuffer.append(TEXT_23);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_24);
    
	} else {
		throw new IllegalArgumentException();
	}

    stringBuffer.append(TEXT_25);
    	if (modelFacet.getViewPattern() != null && modelFacet.getViewPattern().length() != 0) {
    stringBuffer.append(TEXT_26);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_27);
    stringBuffer.append(modelFacet.getViewPattern());
    stringBuffer.append(TEXT_28);
    
	}
	if (modelFacet.getEditPattern() != null && modelFacet.getEditPattern().length() != 0) {

    stringBuffer.append(TEXT_29);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(modelFacet.getEditPattern());
    stringBuffer.append(TEXT_31);
    	}
    stringBuffer.append(TEXT_32);
    	if (genLabel.isReadOnly()) {
    stringBuffer.append(TEXT_33);
    
	}
}

    stringBuffer.append(TEXT_34);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_35);
@


1.3
log
@#125729 Support labels based on multiple structural features
@
text
@d27 27
a53 15
  protected final String TEXT_9 = " getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = new ";
  protected final String TEXT_10 = "(";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "().getEStructuralFeature(\"";
  protected final String TEXT_13 = "\"));";
  protected final String TEXT_14 = NL + "\t\t\t((";
  protected final String TEXT_15 = ") parser).setViewPattern(\"";
  protected final String TEXT_16 = "\");";
  protected final String TEXT_17 = NL + "\t\t\t((";
  protected final String TEXT_18 = ") parser).setEditPattern(\"";
  protected final String TEXT_19 = "\");";
  protected final String TEXT_20 = NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_22 = NL + "}";
  protected final String TEXT_23 = NL;
d88 1
a88 3
	FeatureModelFacet modelFacet = (FeatureModelFacet) genLabel.getModelFacet();
	String featureName = modelFacet.getMetaFeature().getName();
	String parserClassName = importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName());
d93 7
d101 24
a124 1
    stringBuffer.append(TEXT_10);
d126 1
a126 1
    stringBuffer.append(TEXT_11);
d128 1
a128 1
    stringBuffer.append(TEXT_12);
d130 11
a140 1
    stringBuffer.append(TEXT_13);
d142 1
a142 1
    stringBuffer.append(TEXT_14);
d144 1
a144 1
    stringBuffer.append(TEXT_15);
d146 1
a146 1
    stringBuffer.append(TEXT_16);
d151 1
a151 1
    stringBuffer.append(TEXT_17);
d153 1
a153 1
    stringBuffer.append(TEXT_18);
d155 1
a155 1
    stringBuffer.append(TEXT_19);
d157 1
a157 1
    stringBuffer.append(TEXT_20);
d159 1
a159 1
    stringBuffer.append(TEXT_21);
d164 1
a164 1
    stringBuffer.append(TEXT_22);
d166 1
a166 1
    stringBuffer.append(TEXT_23);
@


1.2
log
@#123274 support read only labels
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.TextCompartmentEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d25 17
a41 8
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser() {" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = new ";
  protected final String TEXT_8 = "(" + NL + "\t\t\t\t\t";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "().getEStructuralFeature(\"";
  protected final String TEXT_11 = "\"));" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean isEditable() {" + NL + "\t\treturn false;" + NL + "\t}";
  protected final String TEXT_13 = NL + "}";
  protected final String TEXT_14 = NL;
d62 1
a62 3
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
String semanticLinkInterfaceName;
d65 1
a65 1
	semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
d68 1
a68 1
	semanticLinkInterfaceName = modelFacet.getMetaFeature().getGenClass().getClassifierAccessorName();
d72 8
a79 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName()));
d81 1
a81 1
    stringBuffer.append(semanticPackageInterfaceName);
d83 1
a83 1
    stringBuffer.append(semanticLinkInterfaceName);
d85 1
a85 1
    stringBuffer.append(genLabel.getMetaFeature().getName());
d87 1
a87 1
    if (genLabel.isReadOnly()) {
d89 1
a89 1
    }
d91 24
d116 1
a116 1
    stringBuffer.append(TEXT_14);
@


1.1
log
@#112187 generate separate class for the link label text view
@
text
@d29 4
a32 2
  protected final String TEXT_11 = "\"));" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d73 4
d78 1
a78 1
    stringBuffer.append(TEXT_12);
@

