head	1.29;
access;
symbols
	v20081022-1925:1.29
	v20081015-1925:1.29
	v20081008-1925:1.29
	v20081001-1925:1.29
	v20080924-1925:1.29
	v20080917-1925:1.29
	v20080911-1728:1.29
	v20080910-1520:1.29
	v20080903-1520:1.29
	v20080827-1520:1.29
	v20080813-1520:1.29
	v20080806-1520:1.29
	v20070903-0000:1.28
	v20070809-0000:1.28
	R2_0_maintenance:1.28.0.2
	R2_0:1.28
	R4_20:1.28
	v20070621-0000:1.28
	RC3_20:1.28
	v20070614-1400:1.28
	v20070608-1300:1.28
	v20070605-1400:1.28
	v20070601-1400:1.27
	v20070525-1500:1.27
	v20070520-1200:1.27
	v20070518-1300:1.26
	v20070504-1000:1.26
	v20070427-0600:1.26
	v20070420-1000:1.25
	v20070413-1300:1.25
	v20070405-1100:1.24
	v20070403-1500:1.24
	v20070330-1300:1.24
	v20060330-1300:1.24
	v20070322-1100:1.24
	v20060316-0600:1.24
	v20070307-0700:1.24
	v20070301-1200:1.24
	v20070228-2000:1.24
	v20070221-1500:1.24
	v20070208-1800:1.24
	v20070202-0200:1.20
	v20070103-0300:1.23
	M4_20:1.23
	v20061222-1800:1.23
	v20061218-1200:1.23
	v20061214-0000:1.23
	v20061120-1300:1.20
	M3_20:1.20
	v20061117-0800:1.20
	v20061027-1200:1.20
	v20061020-1000:1.20
	v20061013-1330:1.20
	v20060919-0800:1.20
	v20060907-1100:1.20
	M1_20:1.20
	v20060904-1500:1.20
	v20060824-1600:1.20
	v20060817-1500:1.20
	v20060728-0500:1.20
	v20060713-1700:1.20
	R1_0_maintenance:1.20.0.2
	R1_0:1.20
	v20060627-1200:1.20
	v20060626-1420:1.20
	v20060620-0400:1.19
	v20060616-1400:1.19
	v20060616-1200:1.19
	v20060609-1400:1.16
	v20060531-1730:1.15
	v20060530-1930:1.15
	v20060526-1200:1.13
	v20060519-1300:1.13
	v20060519-0800:1.13
	v20060512-1000:1.13
	I20060512-1000:1.13
	I20060505-1400:1.12
	I20060428-1300:1.12
	I20060424-0500:1.11
	I20060424-0300:1.11
	M6_10:1.8
	I20060407-1200:1.3
	I20060331-1000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.29
date	2007.09.12.12.22.30;	author dstadnik;	state dead;
branches;
next	1.28;
commitid	164a46e7da054567;

1.28
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches
	1.28.2.1;
next	1.27;
commitid	17ef46643bcf4567;

1.27
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.26;
commitid	7de14650454a4567;

1.26
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.25;
commitid	78b462dc68e4567;

1.25
date	2007.04.05.17.26.01;	author ashatalin;	state Exp;
branches;
next	1.24;
commitid	608e461531274567;

1.24
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.23;
commitid	271945b8e1904567;

1.23
date	2006.12.11.09.58.32;	author radvorak;	state Exp;
branches;
next	1.22;
commitid	5d2a457d2bc44567;

1.22
date	2006.12.01.19.10.28;	author radvorak;	state Exp;
branches;
next	1.21;
commitid	144145707e224567;

1.21
date	2006.11.29.21.08.12;	author ashatalin;	state Exp;
branches;
next	1.20;
commitid	29eb456df6ba4567;

1.20
date	2006.06.22.22.30.13;	author radvorak;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.16.12.50.28;	author radvorak;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.13.12.53.34;	author radvorak;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.29.20.07.49;	author radvorak;	state Exp;
branches;
next	1.14;

1.14
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.05.11.18.37.54;	author radvorak;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.21.14.08.22;	author radvorak;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.20.10.37.28;	author radvorak;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.14.12.46.37;	author radvorak;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.3;

1.3
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.03.12.53.09;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.29.12.12.26;	author ashatalin;	state Exp;
branches;
next	;

1.28.2.1
date	2007.09.12.12.20.49;	author dstadnik;	state dead;
branches;
next	;
commitid	42c246e7d99f4567;


desc
@@


1.29
log
@rewrite metric provider in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class MetricProviderGenerator
{
  protected static String nl;
  public static synchronized MetricProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    MetricProviderGenerator result = new MetricProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends ";
  protected final String TEXT_5 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_6 = " context2MetricsMap;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_7 = " metricsRegistry;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static ";
  protected final String TEXT_8 = " key2MetricMap;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " createAction(String actionId," + NL + "\t\t\t";
  protected final String TEXT_10 = " partDescriptor) {" + NL + "\t\tif (MetricsAction.ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new MetricsAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricsAction extends ";
  protected final String TEXT_11 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ACTION_KEY = \"metricsAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_12 = " workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic MetricsAction(";
  protected final String TEXT_13 = " workbenchPartDescriptor) {" + NL + "\t\t\tsetId(ACTION_KEY);" + NL + "\t\t\tsetText(\"Metrics\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\t";
  protected final String TEXT_14 = " workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\t";
  protected final String TEXT_15 = " metricsView = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmetricsView = ";
  protected final String TEXT_16 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ResultView.VIEW_ID);\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(metricsView == null) {" + NL + "\t\t\t\t\tmetricsView = ";
  protected final String TEXT_17 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ResultView.VIEW_ID);\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (metricsView != null && workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart) workbenchPart;" + NL + "\t\t\t\t\t\t((ResultView)metricsView).setInput(part);" + NL + "\t\t\t\t\t}\t\t\t\t\t" + NL + "\t\t\t\t\tworkbenchPart.getSite().getPage().activate(metricsView);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_18 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_19 = ".getInstance().logError(\"Diagram metric view failure\", e); //$NON-NLS-1$" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tstatic ";
  protected final String TEXT_20 = " calculateMetrics(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\tfinal org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart = diagramPart.getDiagramEditPart();" + NL + "\t\ttry {" + NL + "\t\t\treturn (";
  protected final String TEXT_21 = ")diagramPart.getDiagramEditPart().getEditingDomain().runExclusive(\t\t\t\t" + NL + "\t\t\t\tnew org.eclipse.emf.transaction.RunnableWithResult.Impl() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\tDiagram diagram = diagramEditPart.getDiagramView();\t\t\t\t\t" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_22 = " metrics = " + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram, new ";
  protected final String TEXT_23 = "(50));" + NL + "\t\t\t\t\t\tif(diagram.getElement() != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram.getElement(), metrics);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t// detach from EObject and bind to viewID" + NL + "\t\t\t\t\t\tjava.util.HashSet elements = new java.util.HashSet();" + NL + "\t\t\t\t\t\tfor (java.util.Iterator it = metrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\t\t\t\telements.add(elementMetrics.target);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_24 = ".LazyElement2ViewMap element2ViewMap = new ";
  protected final String TEXT_25 = ".LazyElement2ViewMap(diagram, elements);" + NL + "\t\t\t\t\t\tfor (java.util.Iterator it = metrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\t\t\t\tView targetView = ";
  protected final String TEXT_26 = ".findView(diagramEditPart, elementMetrics.target, element2ViewMap);" + NL + "\t\t\t\t\t\t\telementMetrics.target = null; // detach EObject" + NL + "\t\t\t\t\t\t\telementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tsetResult(metrics);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t} catch(InterruptedException e) {" + NL + "\t\t\treturn ";
  protected final String TEXT_27 = ".EMPTY_LIST;\t\t" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic ";
  protected final String TEXT_28 = " calculateMetrics(EObject target, ";
  protected final String TEXT_29 = " metricsList) {" + NL + "\t\tfinal EObject root = target;" + NL + "\t\t";
  protected final String TEXT_30 = " it = new ";
  protected final String TEXT_31 = "() {\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_32 = " contentsIt = root.eAllContents();" + NL + "\t\t\tboolean isInRoot = true;\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tpublic boolean hasNext() {" + NL + "\t\t\t\treturn isInRoot || contentsIt.hasNext();" + NL + "\t\t\t}" + NL + "\t\t\tpublic Object next() {" + NL + "\t\t\t\tif(isInRoot) {" + NL + "\t\t\t\t\tisInRoot = false;" + NL + "\t\t\t\t\treturn root;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn contentsIt.next();" + NL + "\t\t\t}" + NL + "\t\t\tpublic void remove() {" + NL + "\t\t\t\tthrow new UnsupportedOperationException();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t" + NL + "\t\t";
  protected final String TEXT_33 = " metricsPerContext = new ";
  protected final String TEXT_34 = "();" + NL + "\t\twhile(it.hasNext()) {" + NL + "\t\t\tObject nextElement = it.next();" + NL + "\t\t\tif(nextElement instanceof EObject) {" + NL + "\t\t\t\tEObject nextEObj = (EObject)nextElement;" + NL + "\t\t\t\tEClass nextTarget = nextEObj.eClass();" + NL + "\t\t\t\t";
  protected final String TEXT_35 = " superTypeIt = nextTarget.getEAllSuperTypes().iterator();" + NL + "\t\t\t\twhile(nextTarget != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_36 = " metricList = getMetricsForTarget(nextTarget);" + NL + "\t\t\t\t\tif(metricList != null) {" + NL + "\t\t\t\t\t\tfor (";
  protected final String TEXT_37 = " metricIt = metricList.iterator(); metricIt.hasNext();) {" + NL + "\t\t\t\t\t\t\tMetricDef nextMetric = (MetricDef) metricIt.next();" + NL + "\t\t\t\t\t\t\tif(nextMetric.appliesTo(nextEObj)) {" + NL + "\t\t\t\t\t\t\t\tMetric metric = new Metric(nextMetric, nextEObj);" + NL + "\t\t\t\t\t\t\t\tmetricsPerContext.add(metric);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tnextTarget = superTypeIt.hasNext() ? (EClass)superTypeIt.next() : null; " + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\tif(!metricsPerContext.isEmpty()) {" + NL + "\t\t\t\t\tmetricsList.add(new ElementMetrics(nextEObj, " + NL + "\t\t\t\t\t\t\t(Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));" + NL + "\t\t\t\t\tmetricsPerContext.clear();\t\t\t\t" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn metricsList;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class ResultView extends ";
  protected final String TEXT_38 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String VIEW_ID = \"";
  protected final String TEXT_39 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate TableViewer viewer;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_40 = " diagramResource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\tdiagramResource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tsetTitleToolTip(diagramResource.getURI().path());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_41 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_42 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_43 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_44 = " gc = new ";
  protected final String TEXT_45 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_46 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_47 = " headerSelListener = new ";
  protected final String TEXT_48 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_49 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_50 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_51 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_52 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_53 = " editorPart = getSite().getPage()" + NL + "\t\t\t\t\t.openEditor(new ";
  protected final String TEXT_54 = "(";
  protected final String TEXT_55 = ".getFile(diagramResource))," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_56 = ".ID);" + NL + "\t\t\t\tif(editorPart == null) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_57 = " diagramPart = (";
  protected final String TEXT_58 = ")" + NL + "\t\t\t\t\teditorPart.getAdapter(";
  protected final String TEXT_59 = ".class);" + NL + "\t\t\t\t" + NL + "\t\t\t\tElementMetrics selection = (ElementMetrics)((";
  protected final String TEXT_60 = ")event.getSelection()).getFirstElement();" + NL + "\t\t\t\tString viewID = selection.diagramElementID;" + NL + "\t\t\t\tif(viewID != null) {" + NL + "\t\t\t\t\tView targetView = (View)diagramPart.getDiagram().eResource().getEObject(viewID);" + NL + "\t\t\t\t\tif(targetView != null) {" + NL + "\t\t\t\t\t\torg.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart)diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(targetView);" + NL + "\t\t\t\t\t\tif(targetEditPart != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_61 = ".selectElementsInDiagram(diagramPart, Collections.singletonList(targetEditPart));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_62 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".getInstance().logError(\"Can't open diagram editor\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_64 = " calcMetricMaxValueStrLenMap(";
  protected final String TEXT_65 = " allMetrics) {" + NL + "\t\t\t";
  protected final String TEXT_66 = " metric2MaxStrLen = new ";
  protected final String TEXT_67 = "();\t\t\t \t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tString nextKey = ((MetricDef)getMetrics().get(i)).key; " + NL + "\t\t\t\tint trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);" + NL + "\t\t\t\tmetric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_68 = " it = allMetrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\tfor (int i = 0; i < elementMetrics.metrics.length; i++) {" + NL + "\t\t\t\t\tMetric metric = elementMetrics.metrics[i];" + NL + "\t\t\t\t\tString valueStr = (String)metric2MaxStrLen.get(metric.def.key);" + NL + "\t\t\t\t\tif(valueStr == null || metric.displayValue.length() > valueStr.length()) {" + NL + "\t\t\t\t\t\tmetric2MaxStrLen.put(metric.def.key, metric.displayValue);\t" + NL + "\t\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn metric2MaxStrLen;\t\t" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setFocus() {" + NL + "\t\t}\t\t" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tprivate boolean isElementColumn(int columnIndex) {" + NL + "\t\t\t\treturn columnIndex >= getMetrics().size();" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_69 = " getColumnImage(Object element, int columnIndex) {\t\t\t\t" + NL + "\t\t\t\treturn isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;" + NL + "\t\t\t}\t\t" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic String getColumnText(Object element, int columnIndex) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics)element;" + NL + "\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(columnIndex == getMetrics().size()) {" + NL + "\t\t\t\t\treturn elementMetrics.targetElementQName;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = elementMetrics.getMetricByKey(key);" + NL + "\t\t\t\treturn (metric != null) ? metric.displayValue : \"-\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_70 = " getBackground(Object element, int columnIndex) {" + NL + "\t\t\t\treturn null; " + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_71 = " getForeground(Object element, int columnIndex) {" + NL + "\t\t\t\tif(isElementColumn(columnIndex)) return null;" + NL + "\t\t\t\tElementMetrics columnElement = (ElementMetrics)element;" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = columnElement.getMetricByKey(key);\t\t\t" + NL + "\t\t\t\tif(metric != null && metric.value != null) {" + NL + "\t\t\t\t\tif (metric.def.highLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.highLimit.longValue() < metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_72 = ".red;" + NL + "\t\t\t\t\t} else if (metric.def.lowLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.lowLimit.longValue() > metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_73 = ".blue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementMetrics {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Metric[] metrics;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String targetElementQName;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_74 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString diagramElementID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tEObject target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;\t" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\tthis.target = target;" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_75 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_76 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_77 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_78 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_79 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_80 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int[] semanticIDs;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_81 = " expression, int[] semanticIDs, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticIDs = semanticIDs;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticIDs != null) {" + NL + "\t\t\t\tint eObjectID = ";
  protected final String TEXT_82 = ".getVisualID((View)eObject); " + NL + "\t\t\t\tfor(int i = 0; i < semanticIDs.length; i++) {" + NL + "\t\t\t\t\tif(semanticIDs[i] == eObjectID) {" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn false;\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_83 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_84 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_85 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static Number calculateMetric(String metricKey, Object contextInstance) {" + NL + "\t\tif (key2MetricMap == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\tMetricDef metric = (MetricDef)key2MetricMap.get(metricKey);" + NL + "\t\tNumber value = (metric != null) ? metric.calcMetric(contextInstance) : null;" + NL + "\t\treturn (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_86 = "\t\t" + NL + "\t\t";
  protected final String TEXT_87 = NL;
  protected final String TEXT_88 = " ";
  protected final String TEXT_89 = " = new ";
  protected final String TEXT_90 = "(3);";
  protected final String TEXT_91 = ".put(\"";
  protected final String TEXT_92 = "\", ";
  protected final String TEXT_93 = "); //$NON-NLS-1$";
  protected final String TEXT_94 = NL + "\t\tregister(new MetricDef(";
  protected final String TEXT_95 = "," + NL + "\t\t\t";
  protected final String TEXT_96 = "null";
  protected final String TEXT_97 = ".";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_100 = ", ";
  protected final String TEXT_101 = ")";
  protected final String TEXT_102 = ".";
  protected final String TEXT_103 = "(";
  protected final String TEXT_104 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_105 = ")";
  protected final String TEXT_106 = "new ";
  protected final String TEXT_107 = "(";
  protected final String TEXT_108 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_109 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_110 = " self = (";
  protected final String TEXT_111 = ")context;";
  protected final String TEXT_112 = "\t" + NL + "\t\t";
  protected final String TEXT_113 = " ";
  protected final String TEXT_114 = " = (";
  protected final String TEXT_115 = ")env.get(\"";
  protected final String TEXT_116 = "\"); //$NON-NLS-1$";
  protected final String TEXT_117 = NL + "\t\treturn ";
  protected final String TEXT_118 = ".";
  protected final String TEXT_119 = "(self";
  protected final String TEXT_120 = ", ";
  protected final String TEXT_121 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_122 = NL + ",";
  protected final String TEXT_123 = NL + "\t\t\t";
  protected final String TEXT_124 = "," + NL + "\t\t\t";
  protected final String TEXT_125 = "new Double(";
  protected final String TEXT_126 = ")";
  protected final String TEXT_127 = "null";
  protected final String TEXT_128 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_129 = "new Double(";
  protected final String TEXT_130 = ")";
  protected final String TEXT_131 = "null";
  protected final String TEXT_132 = "," + NL + "\t\t\t";
  protected final String TEXT_133 = "," + NL + "\t\t\t";
  protected final String TEXT_134 = "));";
  protected final String TEXT_135 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_136 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_137 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_138 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_139 = " metrics = (";
  protected final String TEXT_140 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_141 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_142 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_143 = "\t\t";
  protected final String TEXT_144 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_145 = " ";
  protected final String TEXT_146 = "(";
  protected final String TEXT_147 = " self";
  protected final String TEXT_148 = ", ";
  protected final String TEXT_149 = " ";
  protected final String TEXT_150 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_151 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_152 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_153 = NL + "\t} //JavaRules";
  protected final String TEXT_154 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_155 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    
importManager.emitPackageStatement(stringBuffer);

importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.jface.viewers.ArrayContentProvider");
importManager.addImport("org.eclipse.jface.viewers.ColumnPixelData");
importManager.addImport("org.eclipse.jface.viewers.ColumnWeightData");
importManager.addImport("org.eclipse.jface.viewers.IOpenListener");
importManager.addImport("org.eclipse.jface.viewers.ITableColorProvider");
importManager.addImport("org.eclipse.jface.viewers.ITableLabelProvider");
importManager.addImport("org.eclipse.jface.viewers.LabelProvider");
importManager.addImport("org.eclipse.jface.viewers.OpenEvent");
importManager.addImport("org.eclipse.jface.viewers.TableLayout");
importManager.addImport("org.eclipse.jface.viewers.TableViewer");
importManager.addImport("org.eclipse.jface.viewers.Viewer");
importManager.addImport("org.eclipse.jface.viewers.ViewerSorter");
importManager.addImport("org.eclipse.swt.SWT");
importManager.addImport("org.eclipse.swt.widgets.Composite");
importManager.addImport("org.eclipse.swt.widgets.Table");
importManager.addImport("org.eclipse.swt.widgets.TableColumn");

importManager.registerInnerClass("Metric");
importManager.registerInnerClass("MetricDef");
importManager.registerInnerClass("MetricsAction");
importManager.registerInnerClass("ElementMetrics");
importManager.registerInnerClass("ResultView");

importManager.markImportLocation(stringBuffer);
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());

    stringBuffer.append(TEXT_3);
    stringBuffer.append(genDiagram.getMetricProviderClassName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider"));
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.action.IAction"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.action.Action"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPart"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IViewPart"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.ViewPart"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(genDiagram.getMetricViewID());
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.JFaceResources"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_85);
    
List javaRules = new ArrayList();
for(Iterator it = genDiagram.getEditorGen().getMetrics().getMetrics().iterator(); it.hasNext(); ) {
	GenMetricRule nextMetric = (GenMetricRule)it.next();
	GenClassifier __genExprContext = nextMetric.getTarget() != null ? nextMetric.getTarget().getContext() : null;
	if(__genExprContext == null || nextMetric.getRule() == null) continue;	
	ValueExpression __genValueExpression = nextMetric.getRule();
	String __javaOperationContainer = "JavaRules"; 	
	Map __exprEnvVariables = Collections.EMPTY_MAP;
	String __outEnvVarName = ""; // no env variable to initialize 
	if(expressionProviders != null && expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) { 
		javaRules.add(nextMetric);
	}

    stringBuffer.append(TEXT_86);
    
{ /*begin the scope*/
/*
java.util.Map __exprEnvVariables;
String __outEnvVarName;
ValueExpression __genValueExpression;
*/
if(!__exprEnvVariables.isEmpty() && genDiagram.getEditorGen().getExpressionProviders() != null && 
	genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) 
	instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {	

    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_90);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String nextVariableName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
		String varTypeEClassifierAccess = nextVariableType.getGenPackage().getQualifiedPackageInterfaceName() + ".eINSTANCE.get" + nextVariableType.getClassifierAccessorName()+"()";			


    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_93);
    	
	} 
}

    
} /*end the scope*/

    stringBuffer.append(TEXT_94);
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getKey()));
    stringBuffer.append(TEXT_95);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_96);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_98);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_99);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_101);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_103);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_104);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_105);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_106);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_107);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_111);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_116);
    		} 
    stringBuffer.append(TEXT_117);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_118);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_119);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_120);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_121);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_122);
    	
	String IDs = "null";
	if(nextMetric.getTarget() instanceof GenDiagramElementTarget) {
		GenDiagramElementTarget diagramElementTarget = (GenDiagramElementTarget) nextMetric.getTarget();
		StringBuffer buf = new StringBuffer("new int[] {");
		for(Iterator elementIt = diagramElementTarget.getElement().iterator(); elementIt.hasNext();) {
			GenCommonBase nextElement = (GenCommonBase)elementIt.next();
			buf.append(importManager.getImportedName(nextElement.getEditPartQualifiedClassName()) + ".VISUAL_ID");
			if(elementIt.hasNext()) buf.append(',').append(' ');
		}
		buf.append(" }");
		IDs = buf.toString();
	} 
    stringBuffer.append(TEXT_123);
    stringBuffer.append(IDs);
    stringBuffer.append(TEXT_124);
    if(nextMetric.getLowLimit()!=null){
    stringBuffer.append(TEXT_125);
    stringBuffer.append(nextMetric.getLowLimit());
    stringBuffer.append(TEXT_126);
    }else{
    stringBuffer.append(TEXT_127);
    }
    stringBuffer.append(TEXT_128);
    if(nextMetric.getHighLimit()!=null){
    stringBuffer.append(TEXT_129);
    stringBuffer.append(nextMetric.getHighLimit());
    stringBuffer.append(TEXT_130);
    }else{
    stringBuffer.append(TEXT_131);
    }
    stringBuffer.append(TEXT_132);
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getName()));
    stringBuffer.append(TEXT_133);
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getDescription()));
    stringBuffer.append(TEXT_134);
    
} /* metrics iteration */

    stringBuffer.append(TEXT_135);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_136);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_139);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_140);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_141);
    
if(!javaRules.isEmpty()) {	

    stringBuffer.append(TEXT_142);
    
	for(Iterator it = javaRules.iterator(); it.hasNext();) {
		GenMetricRule nextMetric = (GenMetricRule)it.next();
		GenClassifier __genExprContext = nextMetric.getTarget().getContext();		
		ValueExpression __genValueExpression = nextMetric.getRule();
		String __genExprResultType = "java.lang.Double";		
		Map __exprEnvVariables = Collections.EMPTY_MAP;		

    stringBuffer.append(TEXT_143);
    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_145);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_146);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_147);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_148);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_149);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_150);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_151);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_152);
    
} /* end of GenJavaExpressionProvider */

    
	}

    stringBuffer.append(TEXT_153);
    
} /* end of JavaRules */

    stringBuffer.append(TEXT_154);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_155);
    return stringBuffer.toString();
  }
}
@


1.28
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.28.2.1
log
@rewrite metric provider in xpand
@
text
@@


1.27
log
@Anna Karyakina's migration fix
@
text
@d19 1
a19 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.26
log
@follow consisted spacing policy
@
text
@d20 132
a151 132
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_7 = " context2MetricsMap;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_8 = " metricsRegistry;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static ";
  protected final String TEXT_9 = " key2MetricMap;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int MAX_VISIBLE_KEY_CHAR_COUNT = 8;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_10 = " createAction(String actionId," + NL + "\t\t\t";
  protected final String TEXT_11 = " partDescriptor) {" + NL + "\t\tif (MetricsAction.ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new MetricsAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricsAction extends ";
  protected final String TEXT_12 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ACTION_KEY = \"metricsAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_13 = " workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic MetricsAction(";
  protected final String TEXT_14 = " workbenchPartDescriptor) {" + NL + "\t\t\tsetId(ACTION_KEY);" + NL + "\t\t\tsetText(\"Metrics\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\t";
  protected final String TEXT_15 = " workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\t";
  protected final String TEXT_16 = " metricsView = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmetricsView = ";
  protected final String TEXT_17 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ResultView.VIEW_ID);\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(metricsView == null) {" + NL + "\t\t\t\t\tmetricsView = ";
  protected final String TEXT_18 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ResultView.VIEW_ID);\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (metricsView != null && workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart) workbenchPart;" + NL + "\t\t\t\t\t\t((ResultView)metricsView).setInput(part);" + NL + "\t\t\t\t\t}\t\t\t\t\t" + NL + "\t\t\t\t\tworkbenchPart.getSite().getPage().activate(metricsView);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_19 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Diagram metric view failure\", e); //$NON-NLS-1$" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tstatic ";
  protected final String TEXT_21 = " calculateMetrics(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\tfinal org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramEditPart diagramEditPart = diagramPart.getDiagramEditPart();" + NL + "\t\ttry {" + NL + "\t\t\treturn (";
  protected final String TEXT_22 = ")diagramPart.getDiagramEditPart().getEditingDomain().runExclusive(\t\t\t\t" + NL + "\t\t\t\tnew org.eclipse.emf.transaction.RunnableWithResult.Impl() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\tDiagram diagram = diagramEditPart.getDiagramView();\t\t\t\t\t" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_23 = " metrics = " + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram, new ";
  protected final String TEXT_24 = "(50));" + NL + "\t\t\t\t\t\tif(diagram.getElement() != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram.getElement(), metrics);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t// detach from EObject and bind to viewID" + NL + "\t\t\t\t\t\tjava.util.HashSet elements = new java.util.HashSet();" + NL + "\t\t\t\t\t\tfor (java.util.Iterator it = metrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\t\t\t\telements.add(elementMetrics.target);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_25 = ".LazyElement2ViewMap element2ViewMap = new ";
  protected final String TEXT_26 = ".LazyElement2ViewMap(diagram, elements);" + NL + "\t\t\t\t\t\tfor (java.util.Iterator it = metrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\t\t\t\tView targetView = ";
  protected final String TEXT_27 = ".findView(diagramEditPart, elementMetrics.target, element2ViewMap);" + NL + "\t\t\t\t\t\t\telementMetrics.target = null; // detach EObject" + NL + "\t\t\t\t\t\t\telementMetrics.diagramElementID = targetView.eResource().getURIFragment(targetView);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t" + NL + "\t\t\t\t\t\tsetResult(metrics);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t} catch(InterruptedException e) {" + NL + "\t\t\treturn ";
  protected final String TEXT_28 = ".EMPTY_LIST;\t\t" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic ";
  protected final String TEXT_29 = " calculateMetrics(EObject target, ";
  protected final String TEXT_30 = " metricsList) {" + NL + "\t\tfinal EObject root = target;" + NL + "\t\t";
  protected final String TEXT_31 = " it = new ";
  protected final String TEXT_32 = "() {\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_33 = " contentsIt = root.eAllContents();" + NL + "\t\t\tboolean isInRoot = true;\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tpublic boolean hasNext() {" + NL + "\t\t\t\treturn isInRoot || contentsIt.hasNext();" + NL + "\t\t\t}" + NL + "\t\t\tpublic Object next() {" + NL + "\t\t\t\tif(isInRoot) {" + NL + "\t\t\t\t\tisInRoot = false;" + NL + "\t\t\t\t\treturn root;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn contentsIt.next();" + NL + "\t\t\t}" + NL + "\t\t\tpublic void remove() {" + NL + "\t\t\t\tthrow new UnsupportedOperationException();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t" + NL + "\t\t";
  protected final String TEXT_34 = " metricsPerContext = new ";
  protected final String TEXT_35 = "();" + NL + "\t\twhile(it.hasNext()) {" + NL + "\t\t\tObject nextElement = it.next();" + NL + "\t\t\tif(nextElement instanceof EObject) {" + NL + "\t\t\t\tEObject nextEObj = (EObject)nextElement;" + NL + "\t\t\t\tEClass nextTarget = nextEObj.eClass();" + NL + "\t\t\t\t";
  protected final String TEXT_36 = " superTypeIt = nextTarget.getEAllSuperTypes().iterator();" + NL + "\t\t\t\twhile(nextTarget != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_37 = " metricList = getMetricsForTarget(nextTarget);" + NL + "\t\t\t\t\tif(metricList != null) {" + NL + "\t\t\t\t\t\tfor (";
  protected final String TEXT_38 = " metricIt = metricList.iterator(); metricIt.hasNext();) {" + NL + "\t\t\t\t\t\t\tMetricDef nextMetric = (MetricDef) metricIt.next();" + NL + "\t\t\t\t\t\t\tif(nextMetric.appliesTo(nextEObj)) {" + NL + "\t\t\t\t\t\t\t\tMetric metric = new Metric(nextMetric, nextEObj);" + NL + "\t\t\t\t\t\t\t\tmetricsPerContext.add(metric);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tnextTarget = superTypeIt.hasNext() ? (EClass)superTypeIt.next() : null; " + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\tif(!metricsPerContext.isEmpty()) {" + NL + "\t\t\t\t\tmetricsList.add(new ElementMetrics(nextEObj, " + NL + "\t\t\t\t\t\t\t(Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));" + NL + "\t\t\t\t\tmetricsPerContext.clear();\t\t\t\t" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn metricsList;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class ResultView extends ";
  protected final String TEXT_39 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String VIEW_ID = \"";
  protected final String TEXT_40 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate TableViewer viewer;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_41 = " diagramResource;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\tdiagramResource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tsetTitleToolTip(diagramResource.getURI().path());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_42 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_43 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_44 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_45 = " gc = new ";
  protected final String TEXT_46 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_47 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_48 = " headerSelListener = new ";
  protected final String TEXT_49 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_50 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_51 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_52 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_53 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_54 = " editorPart = getSite().getPage()" + NL + "\t\t\t\t\t.openEditor(new ";
  protected final String TEXT_55 = "(";
  protected final String TEXT_56 = ".getFile(diagramResource))," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_57 = ".ID);" + NL + "\t\t\t\tif(editorPart == null) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_58 = " diagramPart = (";
  protected final String TEXT_59 = ")" + NL + "\t\t\t\t\teditorPart.getAdapter(";
  protected final String TEXT_60 = ".class);" + NL + "\t\t\t\t" + NL + "\t\t\t\tElementMetrics selection = (ElementMetrics)((";
  protected final String TEXT_61 = ")event.getSelection()).getFirstElement();" + NL + "\t\t\t\tString viewID = selection.diagramElementID;" + NL + "\t\t\t\tif(viewID != null) {" + NL + "\t\t\t\t\tView targetView = (View)diagramPart.getDiagram().eResource().getEObject(viewID);" + NL + "\t\t\t\t\tif(targetView != null) {" + NL + "\t\t\t\t\t\torg.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart)diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(targetView);" + NL + "\t\t\t\t\t\tif(targetEditPart != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_62 = ".selectElementsInDiagram(diagramPart, Collections.singletonList(targetEditPart));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_63 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".getInstance().logError(\"Can't open diagram editor\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_65 = " calcMetricMaxValueStrLenMap(";
  protected final String TEXT_66 = " allMetrics) {" + NL + "\t\t\t";
  protected final String TEXT_67 = " metric2MaxStrLen = new ";
  protected final String TEXT_68 = "();\t\t\t \t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tString nextKey = ((MetricDef)getMetrics().get(i)).key; " + NL + "\t\t\t\tint trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);" + NL + "\t\t\t\tmetric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_69 = " it = allMetrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\tfor (int i = 0; i < elementMetrics.metrics.length; i++) {" + NL + "\t\t\t\t\tMetric metric = elementMetrics.metrics[i];" + NL + "\t\t\t\t\tString valueStr = (String)metric2MaxStrLen.get(metric.def.key);" + NL + "\t\t\t\t\tif(valueStr == null || metric.displayValue.length() > valueStr.length()) {" + NL + "\t\t\t\t\t\tmetric2MaxStrLen.put(metric.def.key, metric.displayValue);\t" + NL + "\t\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn metric2MaxStrLen;\t\t" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setFocus() {" + NL + "\t\t}\t\t" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tprivate boolean isElementColumn(int columnIndex) {" + NL + "\t\t\t\treturn columnIndex >= getMetrics().size();" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_70 = " getColumnImage(Object element, int columnIndex) {\t\t\t\t" + NL + "\t\t\t\treturn isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;" + NL + "\t\t\t}\t\t" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic String getColumnText(Object element, int columnIndex) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics)element;" + NL + "\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(columnIndex == getMetrics().size()) {" + NL + "\t\t\t\t\treturn elementMetrics.targetElementQName;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = elementMetrics.getMetricByKey(key);" + NL + "\t\t\t\treturn (metric != null) ? metric.displayValue : \"-\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_71 = " getBackground(Object element, int columnIndex) {" + NL + "\t\t\t\treturn null; " + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_72 = " getForeground(Object element, int columnIndex) {" + NL + "\t\t\t\tif(isElementColumn(columnIndex)) return null;" + NL + "\t\t\t\tElementMetrics columnElement = (ElementMetrics)element;" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = columnElement.getMetricByKey(key);\t\t\t" + NL + "\t\t\t\tif(metric != null && metric.value != null) {" + NL + "\t\t\t\t\tif (metric.def.highLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.highLimit.longValue() < metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_73 = ".red;" + NL + "\t\t\t\t\t} else if (metric.def.lowLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.lowLimit.longValue() > metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_74 = ".blue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementMetrics {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Metric[] metrics;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String targetElementQName;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_75 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString diagramElementID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tEObject target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;\t" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\tthis.target = target;" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_76 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_77 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_78 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_79 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_80 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_81 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int[] semanticIDs;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_82 = " expression, int[] semanticIDs, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticIDs = semanticIDs;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticIDs != null) {" + NL + "\t\t\t\tint eObjectID = ";
  protected final String TEXT_83 = ".getVisualID((View)eObject); " + NL + "\t\t\t\tfor(int i = 0; i < semanticIDs.length; i++) {" + NL + "\t\t\t\t\tif(semanticIDs[i] == eObjectID) {" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn false;\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_84 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_85 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_86 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static Number calculateMetric(String metricKey, Object contextInstance) {" + NL + "\t\tif (key2MetricMap == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\tMetricDef metric = (MetricDef)key2MetricMap.get(metricKey);" + NL + "\t\tNumber value = (metric != null) ? metric.calcMetric(contextInstance) : null;" + NL + "\t\treturn (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_87 = "\t\t" + NL + "\t\t";
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = " ";
  protected final String TEXT_90 = " = new ";
  protected final String TEXT_91 = "(3);";
  protected final String TEXT_92 = ".put(\"";
  protected final String TEXT_93 = "\", ";
  protected final String TEXT_94 = "); //$NON-NLS-1$";
  protected final String TEXT_95 = NL + "\t\tregister(new MetricDef(";
  protected final String TEXT_96 = "," + NL + "\t\t\t";
  protected final String TEXT_97 = "null";
  protected final String TEXT_98 = ".";
  protected final String TEXT_99 = "(";
  protected final String TEXT_100 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_101 = ", ";
  protected final String TEXT_102 = ")";
  protected final String TEXT_103 = ".";
  protected final String TEXT_104 = "(";
  protected final String TEXT_105 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_106 = ")";
  protected final String TEXT_107 = "new ";
  protected final String TEXT_108 = "(";
  protected final String TEXT_109 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_110 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_111 = " self = (";
  protected final String TEXT_112 = ")context;";
  protected final String TEXT_113 = "\t" + NL + "\t\t";
  protected final String TEXT_114 = " ";
  protected final String TEXT_115 = " = (";
  protected final String TEXT_116 = ")env.get(\"";
  protected final String TEXT_117 = "\"); //$NON-NLS-1$";
  protected final String TEXT_118 = NL + "\t\treturn ";
  protected final String TEXT_119 = ".";
  protected final String TEXT_120 = "(self";
  protected final String TEXT_121 = ", ";
  protected final String TEXT_122 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_123 = NL + ",";
  protected final String TEXT_124 = NL + "\t\t\t";
  protected final String TEXT_125 = "," + NL + "\t\t\t";
  protected final String TEXT_126 = "new Double(";
  protected final String TEXT_127 = ")";
  protected final String TEXT_128 = "null";
  protected final String TEXT_129 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_130 = "new Double(";
  protected final String TEXT_131 = ")";
  protected final String TEXT_132 = "null";
d153 22
a174 24
  protected final String TEXT_134 = "," + NL + "\t\t\t";
  protected final String TEXT_135 = "));";
  protected final String TEXT_136 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_137 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_138 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_139 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_140 = " metrics = (";
  protected final String TEXT_141 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_142 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_143 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_144 = "\t\t";
  protected final String TEXT_145 = NL;
  protected final String TEXT_146 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_147 = " ";
  protected final String TEXT_148 = "(";
  protected final String TEXT_149 = " self";
  protected final String TEXT_150 = ", ";
  protected final String TEXT_151 = " ";
  protected final String TEXT_152 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_153 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_154 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_155 = NL + "\t} //JavaRules";
  protected final String TEXT_156 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_157 = NL;
a183 1
    stringBuffer.append(TEXT_1);
d188 2
a190 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d226 2
d229 1
a229 1
    stringBuffer.append(genDiagram.getMetricProviderClassName());
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.action.contributionitem.AbstractContributionItemProvider"));
d233 2
a235 2
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.action.IAction"));
d241 2
a243 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.action.Action"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IWorkbenchPart"));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IViewPart"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
d259 1
a259 1
    stringBuffer.append(pluginActivatorClass);
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d273 1
a273 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d291 2
a293 2
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.ViewPart"));
d299 1
a299 1
    stringBuffer.append(genDiagram.getMetricViewID());
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.JFaceResources"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d343 1
a343 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
d347 1
a347 1
    stringBuffer.append(pluginActivatorClass);
d349 2
a351 2
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d367 1
a367 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
d369 1
a369 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d373 2
a375 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a390 2
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_86);
d405 1
a405 1
    stringBuffer.append(TEXT_87);
d417 2
d420 1
a420 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d422 1
a422 1
    stringBuffer.append(__outEnvVarName);
a423 2
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_91);
d432 2
d435 1
a435 1
    stringBuffer.append(nextVariableName);
a436 2
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_94);
d444 2
a446 2
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getKey()));
    stringBuffer.append(TEXT_96);
d462 1
a462 1
    stringBuffer.append(TEXT_97);
d471 2
d474 1
a474 1
    stringBuffer.append(__expressionAccessor);
d476 1
a476 1
    stringBuffer.append(__genValueExpression.getBodyString());
d478 1
a478 1
    stringBuffer.append(__ctxEClassifierAccess);
a479 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_102);
d484 2
d487 1
a487 1
    stringBuffer.append(__expressionAccessor);
d489 1
a489 1
    stringBuffer.append(__genValueExpression.getBodyString());
a490 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_106);
d498 2
d501 1
a501 1
    stringBuffer.append(__importedAbstractClass);
d503 1
a503 1
    stringBuffer.append(__ctxEClassifierAccess);
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a508 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_112);
d515 2
d518 2
d521 1
a521 1
    stringBuffer.append(TEXT_114);
a522 2
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d524 1
a524 1
    stringBuffer.append(nextVariableName);
a525 2
    		} 
    stringBuffer.append(TEXT_118);
d529 1
a529 1
    stringBuffer.append(TEXT_119);
d533 1
a533 1
    stringBuffer.append(TEXT_120);
d536 1
a536 1
    stringBuffer.append(TEXT_121);
d539 1
a539 1
    stringBuffer.append(TEXT_122);
d542 1
a542 1
    stringBuffer.append(TEXT_123);
d556 2
d559 1
a559 1
    stringBuffer.append(IDs);
d561 1
a561 1
    if(nextMetric.getLowLimit()!=null){
d563 1
a563 1
    stringBuffer.append(nextMetric.getLowLimit());
d565 1
a565 1
    }else{
d567 1
a567 1
    }
d569 1
a569 1
    if(nextMetric.getHighLimit()!=null){
d571 1
a571 1
    stringBuffer.append(nextMetric.getHighLimit());
d573 1
a573 1
    }else{
d575 1
a575 1
    }
d577 1
a577 1
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getName()));
a578 2
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getDescription()));
    stringBuffer.append(TEXT_135);
d582 2
d585 2
a587 2
    stringBuffer.append(TEXT_137);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d593 1
a593 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a594 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_142);
d598 1
a598 1
    stringBuffer.append(TEXT_143);
d607 1
a607 2
    stringBuffer.append(TEXT_144);
    stringBuffer.append(TEXT_145);
d628 1
a628 1
    stringBuffer.append(TEXT_146);
d630 1
a630 1
    stringBuffer.append(TEXT_147);
d632 1
a632 1
    stringBuffer.append(TEXT_148);
d634 1
a634 1
    stringBuffer.append(TEXT_149);
d642 1
a642 1
    stringBuffer.append(TEXT_150);
d644 1
a644 1
    stringBuffer.append(TEXT_151);
d648 1
a648 1
    stringBuffer.append(TEXT_152);
d650 1
a650 1
    stringBuffer.append(TEXT_153);
d652 1
a652 1
    stringBuffer.append(TEXT_154);
d659 1
a659 1
    stringBuffer.append(TEXT_155);
d663 1
a663 1
    stringBuffer.append(TEXT_156);
d665 1
a665 1
    stringBuffer.append(TEXT_157);
@


1.25
log
@Using runtime API to get File instance.
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d192 1
a192 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.24
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d60 93
a152 93
  protected final String TEXT_41 = " diagramURI;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\t";
  protected final String TEXT_42 = " resource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tthis.diagramURI = resource.getURI();" + NL + "\t\t\tsetTitleToolTip(diagramURI.path());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_43 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_44 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_45 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_46 = " gc = new ";
  protected final String TEXT_47 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_48 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_49 = " headerSelListener = new ";
  protected final String TEXT_50 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_51 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_52 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_53 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_54 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_55 = " editorPart = getSite().getPage()" + NL + "\t\t\t\t\t.openEditor(new ";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = ".getFile(diagramURI))," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_58 = ".ID);" + NL + "\t\t\t\tif(editorPart == null) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_59 = " diagramPart = (";
  protected final String TEXT_60 = ")" + NL + "\t\t\t\t\teditorPart.getAdapter(";
  protected final String TEXT_61 = ".class);" + NL + "\t\t\t\t" + NL + "\t\t\t\tElementMetrics selection = (ElementMetrics)((";
  protected final String TEXT_62 = ")event.getSelection()).getFirstElement();" + NL + "\t\t\t\tString viewID = selection.diagramElementID;" + NL + "\t\t\t\tif(viewID != null) {" + NL + "\t\t\t\t\tView targetView = (View)diagramPart.getDiagram().eResource().getEObject(viewID);" + NL + "\t\t\t\t\tif(targetView != null) {" + NL + "\t\t\t\t\t\torg.eclipse.gef.EditPart targetEditPart = (org.eclipse.gef.EditPart)diagramPart.getDiagramGraphicalViewer().getEditPartRegistry().get(targetView);" + NL + "\t\t\t\t\t\tif(targetEditPart != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_63 = ".selectElementsInDiagram(diagramPart, Collections.singletonList(targetEditPart));" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_64 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_65 = ".getInstance().logError(\"Can't open diagram editor\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_66 = " calcMetricMaxValueStrLenMap(";
  protected final String TEXT_67 = " allMetrics) {" + NL + "\t\t\t";
  protected final String TEXT_68 = " metric2MaxStrLen = new ";
  protected final String TEXT_69 = "();\t\t\t \t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tString nextKey = ((MetricDef)getMetrics().get(i)).key; " + NL + "\t\t\t\tint trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);" + NL + "\t\t\t\tmetric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_70 = " it = allMetrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\tfor (int i = 0; i < elementMetrics.metrics.length; i++) {" + NL + "\t\t\t\t\tMetric metric = elementMetrics.metrics[i];" + NL + "\t\t\t\t\tString valueStr = (String)metric2MaxStrLen.get(metric.def.key);" + NL + "\t\t\t\t\tif(valueStr == null || metric.displayValue.length() > valueStr.length()) {" + NL + "\t\t\t\t\t\tmetric2MaxStrLen.put(metric.def.key, metric.displayValue);\t" + NL + "\t\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn metric2MaxStrLen;\t\t" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setFocus() {" + NL + "\t\t}\t\t" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tprivate boolean isElementColumn(int columnIndex) {" + NL + "\t\t\t\treturn columnIndex >= getMetrics().size();" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_71 = " getColumnImage(Object element, int columnIndex) {\t\t\t\t" + NL + "\t\t\t\treturn isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;" + NL + "\t\t\t}\t\t" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic String getColumnText(Object element, int columnIndex) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics)element;" + NL + "\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(columnIndex == getMetrics().size()) {" + NL + "\t\t\t\t\treturn elementMetrics.targetElementQName;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = elementMetrics.getMetricByKey(key);" + NL + "\t\t\t\treturn (metric != null) ? metric.displayValue : \"-\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_72 = " getBackground(Object element, int columnIndex) {" + NL + "\t\t\t\treturn null; " + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_73 = " getForeground(Object element, int columnIndex) {" + NL + "\t\t\t\tif(isElementColumn(columnIndex)) return null;" + NL + "\t\t\t\tElementMetrics columnElement = (ElementMetrics)element;" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = columnElement.getMetricByKey(key);\t\t\t" + NL + "\t\t\t\tif(metric != null && metric.value != null) {" + NL + "\t\t\t\t\tif (metric.def.highLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.highLimit.longValue() < metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_74 = ".red;" + NL + "\t\t\t\t\t} else if (metric.def.lowLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.lowLimit.longValue() > metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_75 = ".blue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementMetrics {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Metric[] metrics;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String targetElementQName;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_76 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString diagramElementID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tEObject target;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;\t" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\tthis.target = target;" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_77 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_78 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_79 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_80 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_81 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_82 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int[] semanticIDs;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_83 = " expression, int[] semanticIDs, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticIDs = semanticIDs;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticIDs != null) {" + NL + "\t\t\t\tint eObjectID = ";
  protected final String TEXT_84 = ".getVisualID((View)eObject); " + NL + "\t\t\t\tfor(int i = 0; i < semanticIDs.length; i++) {" + NL + "\t\t\t\t\tif(semanticIDs[i] == eObjectID) {" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn false;\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_85 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_86 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_87 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static Number calculateMetric(String metricKey, Object contextInstance) {" + NL + "\t\tif (key2MetricMap == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\tMetricDef metric = (MetricDef)key2MetricMap.get(metricKey);" + NL + "\t\tNumber value = (metric != null) ? metric.calcMetric(contextInstance) : null;" + NL + "\t\treturn (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_88 = "\t\t" + NL + "\t\t";
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = " ";
  protected final String TEXT_91 = " = new ";
  protected final String TEXT_92 = "(3);";
  protected final String TEXT_93 = ".put(\"";
  protected final String TEXT_94 = "\", ";
  protected final String TEXT_95 = "); //$NON-NLS-1$";
  protected final String TEXT_96 = NL + "\t\tregister(new MetricDef(";
  protected final String TEXT_97 = "," + NL + "\t\t\t";
  protected final String TEXT_98 = "null";
  protected final String TEXT_99 = ".";
  protected final String TEXT_100 = "(";
  protected final String TEXT_101 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_102 = ", ";
  protected final String TEXT_103 = ")";
  protected final String TEXT_104 = ".";
  protected final String TEXT_105 = "(";
  protected final String TEXT_106 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_107 = ")";
  protected final String TEXT_108 = "new ";
  protected final String TEXT_109 = "(";
  protected final String TEXT_110 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_111 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_112 = " self = (";
  protected final String TEXT_113 = ")context;";
  protected final String TEXT_114 = "\t" + NL + "\t\t";
  protected final String TEXT_115 = " ";
  protected final String TEXT_116 = " = (";
  protected final String TEXT_117 = ")env.get(\"";
  protected final String TEXT_118 = "\"); //$NON-NLS-1$";
  protected final String TEXT_119 = NL + "\t\treturn ";
  protected final String TEXT_120 = ".";
  protected final String TEXT_121 = "(self";
  protected final String TEXT_122 = ", ";
  protected final String TEXT_123 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_124 = NL + ",";
  protected final String TEXT_125 = NL + "\t\t\t";
  protected final String TEXT_126 = "," + NL + "\t\t\t";
  protected final String TEXT_127 = "new Double(";
  protected final String TEXT_128 = ")";
  protected final String TEXT_129 = "null";
  protected final String TEXT_130 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_131 = "new Double(";
  protected final String TEXT_132 = ")";
  protected final String TEXT_133 = "null";
d154 23
a176 24
  protected final String TEXT_135 = "," + NL + "\t\t\t";
  protected final String TEXT_136 = "));";
  protected final String TEXT_137 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_138 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_139 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_140 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_141 = " metrics = (";
  protected final String TEXT_142 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_143 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_144 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_145 = "\t\t";
  protected final String TEXT_146 = NL;
  protected final String TEXT_147 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_148 = " ";
  protected final String TEXT_149 = "(";
  protected final String TEXT_150 = " self";
  protected final String TEXT_151 = ", ";
  protected final String TEXT_152 = " ";
  protected final String TEXT_153 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_154 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_155 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_156 = NL + "\t} //JavaRules";
  protected final String TEXT_157 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_158 = NL;
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d314 1
a314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.JFaceResources"));
d320 1
a320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d330 1
a330 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d336 1
a336 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d342 1
a342 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
d344 1
a344 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d346 1
a346 1
    stringBuffer.append(genDiagram.getDiagramEditorUtilQualifiedClassName());
d348 1
a348 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
d350 1
a350 1
    stringBuffer.append(pluginActivatorClass);
d352 2
a354 2
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d356 1
a356 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d360 1
a360 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d362 1
a362 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d370 1
a370 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
d372 1
a372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d376 2
a378 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d380 1
a380 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d382 1
a382 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d386 1
a386 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d388 1
a388 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a393 2
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_87);
d408 1
a408 1
    stringBuffer.append(TEXT_88);
d420 2
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d425 1
a425 1
    stringBuffer.append(__outEnvVarName);
a426 2
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
    stringBuffer.append(TEXT_92);
d435 2
d438 1
a438 1
    stringBuffer.append(nextVariableName);
a439 2
    stringBuffer.append(varTypeEClassifierAccess);
    stringBuffer.append(TEXT_95);
d447 2
a449 2
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getKey()));
    stringBuffer.append(TEXT_97);
d465 1
a465 1
    stringBuffer.append(TEXT_98);
d474 2
d477 1
a477 1
    stringBuffer.append(__expressionAccessor);
d479 1
a479 1
    stringBuffer.append(__genValueExpression.getBodyString());
d481 1
a481 1
    stringBuffer.append(__ctxEClassifierAccess);
a482 2
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_103);
d487 2
d490 1
a490 1
    stringBuffer.append(__expressionAccessor);
d492 1
a492 1
    stringBuffer.append(__genValueExpression.getBodyString());
a493 2
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_107);
d501 2
d504 1
a504 1
    stringBuffer.append(__importedAbstractClass);
d506 1
a506 1
    stringBuffer.append(__ctxEClassifierAccess);
d508 1
a508 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
a511 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_113);
d518 2
d521 2
d524 1
a524 1
    stringBuffer.append(TEXT_115);
a525 2
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
d527 1
a527 1
    stringBuffer.append(nextVariableName);
a528 2
    		} 
    stringBuffer.append(TEXT_119);
d532 1
a532 1
    stringBuffer.append(TEXT_120);
d536 1
a536 1
    stringBuffer.append(TEXT_121);
d539 1
a539 1
    stringBuffer.append(TEXT_122);
d542 1
a542 1
    stringBuffer.append(TEXT_123);
d545 1
a545 1
    stringBuffer.append(TEXT_124);
d559 2
d562 1
a562 1
    stringBuffer.append(IDs);
d564 1
a564 1
    if(nextMetric.getLowLimit()!=null){
d566 1
a566 1
    stringBuffer.append(nextMetric.getLowLimit());
d568 1
a568 1
    }else{
d570 1
a570 1
    }
d572 1
a572 1
    if(nextMetric.getHighLimit()!=null){
d574 1
a574 1
    stringBuffer.append(nextMetric.getHighLimit());
d576 1
a576 1
    }else{
d578 1
a578 1
    }
d580 1
a580 1
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getName()));
a581 2
    stringBuffer.append(org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(nextMetric.getDescription()));
    stringBuffer.append(TEXT_136);
d585 2
d588 2
a590 2
    stringBuffer.append(TEXT_138);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d592 1
a592 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a597 2
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_143);
d601 1
a601 1
    stringBuffer.append(TEXT_144);
d610 1
a611 1
    stringBuffer.append(TEXT_146);
d632 2
d635 1
a635 1
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
d637 1
a637 1
    stringBuffer.append(__exprJavaOperName);
a638 2
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_150);
d646 2
a648 2
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_152);
d652 2
d655 1
a655 1
    stringBuffer.append(__importedAbstractExpr);
a656 2
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_155);
d663 1
a663 1
    stringBuffer.append(TEXT_156);
d667 2
a669 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_158);
@


1.23
log
@[166814] Refactor diagram editor Audits&Metrics support
@
text
@a470 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d480 1
a480 1
    stringBuffer.append(__bodyLiteral);
d493 1
a493 1
    stringBuffer.append(__bodyLiteral);
@


1.22
log
@[161018] Metrics View should support navigation to destination diagram element.
@
text
@d40 2
a41 2
  protected final String TEXT_21 = " calculateMetrics(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\tfinal Diagram diagram = diagramPart.getDiagram();" + NL + "\t\ttry {" + NL + "\t\t\treturn (";
  protected final String TEXT_22 = ")diagramPart.getDiagramEditPart().getEditingDomain().runExclusive(\t\t\t\t" + NL + "\t\t\t\tnew org.eclipse.emf.transaction.RunnableWithResult.Impl() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t";
d43 40
a82 40
  protected final String TEXT_24 = "(50));" + NL + "\t\t\t\t\t\tif(diagram.getElement() != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram.getElement(), metrics);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tsetResult(metrics);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t} catch(InterruptedException e) {" + NL + "\t\t\treturn ";
  protected final String TEXT_25 = ".EMPTY_LIST;\t\t" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic ";
  protected final String TEXT_26 = " calculateMetrics(EObject target, ";
  protected final String TEXT_27 = " metricsList) {" + NL + "\t\tfinal EObject root = target;" + NL + "\t\t";
  protected final String TEXT_28 = " it = new ";
  protected final String TEXT_29 = "() {\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_30 = " contentsIt = root.eAllContents();" + NL + "\t\t\tboolean isInRoot = true;\t\t\t" + NL + "\t\t\t" + NL + "\t\t\tpublic boolean hasNext() {" + NL + "\t\t\t\treturn isInRoot || contentsIt.hasNext();" + NL + "\t\t\t}" + NL + "\t\t\tpublic Object next() {" + NL + "\t\t\t\tif(isInRoot) {" + NL + "\t\t\t\t\tisInRoot = false;" + NL + "\t\t\t\t\treturn root;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn contentsIt.next();" + NL + "\t\t\t}" + NL + "\t\t\tpublic void remove() {" + NL + "\t\t\t\tthrow new UnsupportedOperationException();" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t" + NL + "\t\t";
  protected final String TEXT_31 = " metricsPerContext = new ";
  protected final String TEXT_32 = "();" + NL + "\t\twhile(it.hasNext()) {" + NL + "\t\t\tObject nextElement = it.next();" + NL + "\t\t\tif(nextElement instanceof EObject) {" + NL + "\t\t\t\tEObject nextEObj = (EObject)nextElement;" + NL + "\t\t\t\tEClass nextTarget = nextEObj.eClass();" + NL + "\t\t\t\t";
  protected final String TEXT_33 = " superTypeIt = nextTarget.getEAllSuperTypes().iterator();" + NL + "\t\t\t\twhile(nextTarget != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_34 = " metricList = getMetricsForTarget(nextTarget);" + NL + "\t\t\t\t\tif(metricList != null) {" + NL + "\t\t\t\t\t\tfor (";
  protected final String TEXT_35 = " metricIt = metricList.iterator(); metricIt.hasNext();) {" + NL + "\t\t\t\t\t\t\tMetricDef nextMetric = (MetricDef) metricIt.next();" + NL + "\t\t\t\t\t\t\tif(nextMetric.appliesTo(nextEObj)) {" + NL + "\t\t\t\t\t\t\t\tMetric metric = new Metric(nextMetric, nextEObj);" + NL + "\t\t\t\t\t\t\t\tmetricsPerContext.add(metric);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tnextTarget = superTypeIt.hasNext() ? (EClass)superTypeIt.next() : null; " + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\tif(!metricsPerContext.isEmpty()) {" + NL + "\t\t\t\t\tmetricsList.add(new ElementMetrics(nextEObj, " + NL + "\t\t\t\t\t\t\t(Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));" + NL + "\t\t\t\t\tmetricsPerContext.clear();\t\t\t\t" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn metricsList;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class ResultView extends ";
  protected final String TEXT_36 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String VIEW_ID = \"";
  protected final String TEXT_37 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate TableViewer viewer;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_38 = " diagramURI;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\t";
  protected final String TEXT_39 = " resource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tthis.diagramURI = resource.getURI();" + NL + "\t\t\tsetTitleToolTip(diagramURI.path());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_40 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_41 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_42 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_43 = " gc = new ";
  protected final String TEXT_44 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_45 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_46 = " headerSelListener = new ";
  protected final String TEXT_47 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_48 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_49 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_50 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_51 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = " editorPart = getSite().getPage()" + NL + "\t\t\t\t\t.openEditor(new ";
  protected final String TEXT_53 = "(";
  protected final String TEXT_54 = ".getFile(diagramURI))," + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_55 = ".ID);" + NL + "\t\t\t\tif(editorPart == null) {" + NL + "\t\t\t\t\treturn;" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_56 = " diagramPart = (";
  protected final String TEXT_57 = ")" + NL + "\t\t\t\t\teditorPart.getAdapter(";
  protected final String TEXT_58 = ".class);" + NL + "\t\t\t\t" + NL + "\t\t\t\tElementMetrics selection = (ElementMetrics)((";
  protected final String TEXT_59 = ")event.getSelection()).getFirstElement();" + NL + "\t\t\t\t";
  protected final String TEXT_60 = " targetEditParts = new ";
  protected final String TEXT_61 = "();" + NL + "\t\t\t\t";
  protected final String TEXT_62 = ".findElementsInDiagram(diagramPart, selection.elementURI, targetEditParts);" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".selectElementsInDiagram(diagramPart, targetEditParts);" + NL + "" + NL + "\t\t\t} catch (";
d95 83
a177 85
  protected final String TEXT_76 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_77 = " elementURI;\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;\t" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\tthis.elementURI = ";
  protected final String TEXT_78 = ".getURI(target);\t" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_79 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_80 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_81 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_82 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_83 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_84 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int[] semanticIDs;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_85 = " expression, int[] semanticIDs, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticIDs = semanticIDs;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticIDs != null) {" + NL + "\t\t\t\tint eObjectID = ";
  protected final String TEXT_86 = ".getVisualID((View)eObject); " + NL + "\t\t\t\tfor(int i = 0; i < semanticIDs.length; i++) {" + NL + "\t\t\t\t\tif(semanticIDs[i] == eObjectID) {" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn false;\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_87 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_88 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_89 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static Number calculateMetric(String metricKey, Object contextInstance) {" + NL + "\t\tif (key2MetricMap == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\tMetricDef metric = (MetricDef)key2MetricMap.get(metricKey);" + NL + "\t\tNumber value = (metric != null) ? metric.calcMetric(contextInstance) : null;" + NL + "\t\treturn (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_90 = "\t\t" + NL + "\t\t";
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = " ";
  protected final String TEXT_93 = " = new ";
  protected final String TEXT_94 = "(3);";
  protected final String TEXT_95 = ".put(\"";
  protected final String TEXT_96 = "\", ";
  protected final String TEXT_97 = "); //$NON-NLS-1$";
  protected final String TEXT_98 = NL + "\t\tregister(new MetricDef(";
  protected final String TEXT_99 = "," + NL + "\t\t\t";
  protected final String TEXT_100 = "null";
  protected final String TEXT_101 = ".";
  protected final String TEXT_102 = "(";
  protected final String TEXT_103 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_104 = ", ";
  protected final String TEXT_105 = ")";
  protected final String TEXT_106 = ".";
  protected final String TEXT_107 = "(";
  protected final String TEXT_108 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_109 = ")";
  protected final String TEXT_110 = "new ";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_113 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_114 = " self = (";
  protected final String TEXT_115 = ")context;";
  protected final String TEXT_116 = "\t" + NL + "\t\t";
  protected final String TEXT_117 = " ";
  protected final String TEXT_118 = " = (";
  protected final String TEXT_119 = ")env.get(\"";
  protected final String TEXT_120 = "\"); //$NON-NLS-1$";
  protected final String TEXT_121 = NL + "\t\treturn ";
  protected final String TEXT_122 = ".";
  protected final String TEXT_123 = "(self";
  protected final String TEXT_124 = ", ";
  protected final String TEXT_125 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_126 = NL + ",";
  protected final String TEXT_127 = NL + "\t\t\t";
  protected final String TEXT_128 = "," + NL + "\t\t\t";
  protected final String TEXT_129 = "new Double(";
  protected final String TEXT_130 = ")";
  protected final String TEXT_131 = "null";
  protected final String TEXT_132 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_133 = "new Double(";
  protected final String TEXT_134 = ")";
  protected final String TEXT_135 = "null";
  protected final String TEXT_136 = "," + NL + "\t\t\t";
  protected final String TEXT_137 = "," + NL + "\t\t\t";
  protected final String TEXT_138 = "));";
  protected final String TEXT_139 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_140 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_141 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_142 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_143 = " metrics = (";
  protected final String TEXT_144 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_145 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_146 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_147 = "\t\t";
  protected final String TEXT_148 = NL;
  protected final String TEXT_149 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_150 = " ";
  protected final String TEXT_151 = "(";
  protected final String TEXT_152 = " self";
  protected final String TEXT_153 = ", ";
  protected final String TEXT_154 = " ";
  protected final String TEXT_155 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_156 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_157 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_158 = NL + "\t} //JavaRules";
  protected final String TEXT_159 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_160 = NL;
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("java.util.Collections"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d281 2
a283 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d291 2
a293 2
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.ViewPart"));
d295 1
a295 1
    stringBuffer.append(genDiagram.getMetricViewID());
d297 1
a297 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d305 1
a305 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d311 1
a311 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.JFaceResources"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d317 1
a317 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d333 1
a333 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramWorkbenchPart"));
d337 2
a339 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d375 1
a375 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d377 1
a377 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.util.EcoreUtil"));
d379 1
a379 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d383 1
a383 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d385 1
a385 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d387 1
a387 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d389 1
a389 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d391 1
a391 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d393 1
a393 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a396 4
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_89);
d411 1
a411 1
    stringBuffer.append(TEXT_90);
d423 1
a423 1
    stringBuffer.append(TEXT_91);
d425 1
a425 1
    stringBuffer.append(TEXT_92);
d427 1
a427 1
    stringBuffer.append(TEXT_93);
d429 1
a429 1
    stringBuffer.append(TEXT_94);
d438 1
a438 1
    stringBuffer.append(TEXT_95);
d440 1
a440 1
    stringBuffer.append(TEXT_96);
d442 1
a442 1
    stringBuffer.append(TEXT_97);
d450 1
a450 1
    stringBuffer.append(TEXT_98);
d452 1
a452 1
    stringBuffer.append(TEXT_99);
d468 1
a468 1
    stringBuffer.append(TEXT_100);
d478 1
a478 1
    stringBuffer.append(TEXT_101);
d480 1
a480 1
    stringBuffer.append(TEXT_102);
d482 1
a482 1
    stringBuffer.append(TEXT_103);
d484 1
a484 1
    stringBuffer.append(TEXT_104);
d486 1
a486 1
    stringBuffer.append(TEXT_105);
d491 1
a491 1
    stringBuffer.append(TEXT_106);
d493 1
a493 1
    stringBuffer.append(TEXT_107);
d495 1
a495 1
    stringBuffer.append(TEXT_108);
d497 1
a497 1
    stringBuffer.append(TEXT_109);
d505 1
a505 1
    stringBuffer.append(TEXT_110);
d507 1
a507 1
    stringBuffer.append(TEXT_111);
d509 1
a509 1
    stringBuffer.append(TEXT_112);
d511 1
a511 1
    stringBuffer.append(TEXT_113);
d513 1
a513 1
    stringBuffer.append(TEXT_114);
d515 1
a515 1
    stringBuffer.append(TEXT_115);
d522 4
d531 1
a531 1
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
a532 4
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_120);
    		} 
    stringBuffer.append(TEXT_121);
d536 1
a536 1
    stringBuffer.append(TEXT_122);
d540 1
a540 1
    stringBuffer.append(TEXT_123);
d543 1
a543 1
    stringBuffer.append(TEXT_124);
d546 1
a546 1
    stringBuffer.append(TEXT_125);
d549 1
a549 1
    stringBuffer.append(TEXT_126);
d563 1
a563 1
    stringBuffer.append(TEXT_127);
d565 1
a565 1
    stringBuffer.append(TEXT_128);
d567 1
a567 1
    stringBuffer.append(TEXT_129);
d569 1
a569 1
    stringBuffer.append(TEXT_130);
d571 1
a571 1
    stringBuffer.append(TEXT_131);
d573 1
a573 1
    stringBuffer.append(TEXT_132);
d575 1
a575 1
    stringBuffer.append(TEXT_133);
d577 1
a577 1
    stringBuffer.append(TEXT_134);
d579 1
a579 1
    stringBuffer.append(TEXT_135);
d581 1
a581 1
    stringBuffer.append(TEXT_136);
d583 1
a583 1
    stringBuffer.append(TEXT_137);
d585 1
a585 1
    stringBuffer.append(TEXT_138);
d589 4
d596 1
a596 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d598 1
a598 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d600 1
a600 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
a601 4
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_144);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_145);
d605 1
a605 1
    stringBuffer.append(TEXT_146);
d614 2
a615 2
    stringBuffer.append(TEXT_147);
    stringBuffer.append(TEXT_148);
d636 1
a636 1
    stringBuffer.append(TEXT_149);
d638 1
a638 1
    stringBuffer.append(TEXT_150);
d640 1
a640 1
    stringBuffer.append(TEXT_151);
d642 1
a642 1
    stringBuffer.append(TEXT_152);
d650 1
a650 1
    stringBuffer.append(TEXT_153);
d652 1
a652 1
    stringBuffer.append(TEXT_154);
d656 1
a656 1
    stringBuffer.append(TEXT_155);
d658 1
a658 1
    stringBuffer.append(TEXT_156);
d660 1
a660 1
    stringBuffer.append(TEXT_157);
d667 1
a667 1
    stringBuffer.append(TEXT_158);
d671 1
a671 1
    stringBuffer.append(TEXT_159);
d673 1
a673 1
    stringBuffer.append(TEXT_160);
@


1.21
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d57 110
a166 110
  protected final String TEXT_38 = " diagramFile;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\t";
  protected final String TEXT_39 = " resource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tthis.diagramFile = ";
  protected final String TEXT_40 = ".getFile(resource);" + NL + "\t\t\tsetTitleToolTip(diagramFile.getFullPath().toString());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_41 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_42 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_43 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_44 = " gc = new ";
  protected final String TEXT_45 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_46 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_47 = " headerSelListener = new ";
  protected final String TEXT_48 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_49 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_50 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_51 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_52 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_53 = ".openEditor(getSite().getPage(), diagramFile, true);" + NL + "\t\t\t} catch (";
  protected final String TEXT_54 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_55 = ".getInstance().logError(\"Can't open diagram editor\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_56 = " calcMetricMaxValueStrLenMap(";
  protected final String TEXT_57 = " allMetrics) {" + NL + "\t\t\t";
  protected final String TEXT_58 = " metric2MaxStrLen = new ";
  protected final String TEXT_59 = "();\t\t\t \t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tString nextKey = ((MetricDef)getMetrics().get(i)).key; " + NL + "\t\t\t\tint trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);" + NL + "\t\t\t\tmetric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_60 = " it = allMetrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\tfor (int i = 0; i < elementMetrics.metrics.length; i++) {" + NL + "\t\t\t\t\tMetric metric = elementMetrics.metrics[i];" + NL + "\t\t\t\t\tString valueStr = (String)metric2MaxStrLen.get(metric.def.key);" + NL + "\t\t\t\t\tif(valueStr == null || metric.displayValue.length() > valueStr.length()) {" + NL + "\t\t\t\t\t\tmetric2MaxStrLen.put(metric.def.key, metric.displayValue);\t" + NL + "\t\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn metric2MaxStrLen;\t\t" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setFocus() {" + NL + "\t\t}\t\t" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tprivate boolean isElementColumn(int columnIndex) {" + NL + "\t\t\t\treturn columnIndex >= getMetrics().size();" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_61 = " getColumnImage(Object element, int columnIndex) {\t\t\t\t" + NL + "\t\t\t\treturn isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;" + NL + "\t\t\t}\t\t" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic String getColumnText(Object element, int columnIndex) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics)element;" + NL + "\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(columnIndex == getMetrics().size()) {" + NL + "\t\t\t\t\treturn elementMetrics.targetElementQName;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = elementMetrics.getMetricByKey(key);" + NL + "\t\t\t\treturn (metric != null) ? metric.displayValue : \"-\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_62 = " getBackground(Object element, int columnIndex) {" + NL + "\t\t\t\treturn null; " + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_63 = " getForeground(Object element, int columnIndex) {" + NL + "\t\t\t\tif(isElementColumn(columnIndex)) return null;" + NL + "\t\t\t\tElementMetrics columnElement = (ElementMetrics)element;" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = columnElement.getMetricByKey(key);\t\t\t" + NL + "\t\t\t\tif(metric != null && metric.value != null) {" + NL + "\t\t\t\t\tif (metric.def.highLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.highLimit.longValue() < metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_64 = ".red;" + NL + "\t\t\t\t\t} else if (metric.def.lowLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.lowLimit.longValue() > metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_65 = ".blue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementMetrics {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Metric[] metrics;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String targetElementQName;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_66 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_67 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_68 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_69 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_70 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_71 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_72 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int[] semanticIDs;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_73 = " expression, int[] semanticIDs, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticIDs = semanticIDs;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticIDs != null) {" + NL + "\t\t\t\tint eObjectID = ";
  protected final String TEXT_74 = ".getVisualID((View)eObject); " + NL + "\t\t\t\tfor(int i = 0; i < semanticIDs.length; i++) {" + NL + "\t\t\t\t\tif(semanticIDs[i] == eObjectID) {" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn false;\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_75 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_76 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_77 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static Number calculateMetric(String metricKey, Object contextInstance) {" + NL + "\t\tif (key2MetricMap == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\tMetricDef metric = (MetricDef)key2MetricMap.get(metricKey);" + NL + "\t\tNumber value = (metric != null) ? metric.calcMetric(contextInstance) : null;" + NL + "\t\treturn (value != null && !(value instanceof Double)) ? new Double(value.doubleValue()) : value;\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_78 = "\t\t" + NL + "\t\t";
  protected final String TEXT_79 = NL;
  protected final String TEXT_80 = " ";
  protected final String TEXT_81 = " = new ";
  protected final String TEXT_82 = "(3);";
  protected final String TEXT_83 = ".put(\"";
  protected final String TEXT_84 = "\", ";
  protected final String TEXT_85 = "); //$NON-NLS-1$";
  protected final String TEXT_86 = NL + "\t\tregister(new MetricDef(";
  protected final String TEXT_87 = "," + NL + "\t\t\t";
  protected final String TEXT_88 = "null";
  protected final String TEXT_89 = ".";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_92 = ", ";
  protected final String TEXT_93 = ")";
  protected final String TEXT_94 = ".";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_97 = ")";
  protected final String TEXT_98 = "new ";
  protected final String TEXT_99 = "(";
  protected final String TEXT_100 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_101 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_102 = " self = (";
  protected final String TEXT_103 = ")context;";
  protected final String TEXT_104 = "\t" + NL + "\t\t";
  protected final String TEXT_105 = " ";
  protected final String TEXT_106 = " = (";
  protected final String TEXT_107 = ")env.get(\"";
  protected final String TEXT_108 = "\"); //$NON-NLS-1$";
  protected final String TEXT_109 = NL + "\t\treturn ";
  protected final String TEXT_110 = ".";
  protected final String TEXT_111 = "(self";
  protected final String TEXT_112 = ", ";
  protected final String TEXT_113 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_114 = NL + ",";
  protected final String TEXT_115 = NL + "\t\t\t";
  protected final String TEXT_116 = "," + NL + "\t\t\t";
  protected final String TEXT_117 = "new Double(";
  protected final String TEXT_118 = ")";
  protected final String TEXT_119 = "null";
  protected final String TEXT_120 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_121 = "new Double(";
  protected final String TEXT_122 = ")";
  protected final String TEXT_123 = "null";
  protected final String TEXT_124 = "," + NL + "\t\t\t";
  protected final String TEXT_125 = "," + NL + "\t\t\t";
  protected final String TEXT_126 = "));";
  protected final String TEXT_127 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_128 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_129 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_130 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_131 = " metrics = (";
  protected final String TEXT_132 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_133 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_134 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_135 = "\t\t";
  protected final String TEXT_136 = NL;
  protected final String TEXT_137 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_138 = " ";
  protected final String TEXT_139 = "(";
  protected final String TEXT_140 = " self";
  protected final String TEXT_141 = ", ";
  protected final String TEXT_142 = " ";
  protected final String TEXT_143 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_144 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_145 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_146 = NL + "\t} //JavaRules";
  protected final String TEXT_147 = "\t\t" + NL + "" + NL + "}";
d168 12
d299 1
a299 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d303 1
a303 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d313 1
a313 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.JFaceResources"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
d331 20
d352 1
a352 1
    stringBuffer.append(TEXT_54);
d354 1
a354 1
    stringBuffer.append(TEXT_55);
d356 1
a356 1
    stringBuffer.append(TEXT_56);
d358 1
a358 1
    stringBuffer.append(TEXT_57);
d360 1
a360 1
    stringBuffer.append(TEXT_58);
d362 1
a362 1
    stringBuffer.append(TEXT_59);
d364 1
a364 1
    stringBuffer.append(TEXT_60);
d366 1
a366 1
    stringBuffer.append(TEXT_61);
d368 1
a368 1
    stringBuffer.append(TEXT_62);
d370 1
a370 1
    stringBuffer.append(TEXT_63);
d372 1
a372 1
    stringBuffer.append(TEXT_64);
d374 1
a374 1
    stringBuffer.append(TEXT_65);
d376 5
a380 1
    stringBuffer.append(TEXT_66);
d382 1
a382 1
    stringBuffer.append(TEXT_67);
d384 1
a384 1
    stringBuffer.append(TEXT_68);
d386 1
a386 1
    stringBuffer.append(TEXT_69);
d388 1
a388 1
    stringBuffer.append(TEXT_70);
d390 1
a390 1
    stringBuffer.append(TEXT_71);
d392 1
a392 1
    stringBuffer.append(TEXT_72);
d394 1
a394 1
    stringBuffer.append(TEXT_73);
d396 1
a396 1
    stringBuffer.append(TEXT_74);
d398 1
a398 1
    stringBuffer.append(TEXT_75);
d400 1
a400 1
    stringBuffer.append(TEXT_76);
d402 1
a402 1
    stringBuffer.append(TEXT_77);
d417 1
a417 1
    stringBuffer.append(TEXT_78);
d429 1
a429 1
    stringBuffer.append(TEXT_79);
d431 1
a431 1
    stringBuffer.append(TEXT_80);
d433 1
a433 1
    stringBuffer.append(TEXT_81);
d435 1
a435 1
    stringBuffer.append(TEXT_82);
d444 1
a444 1
    stringBuffer.append(TEXT_83);
d446 1
a446 1
    stringBuffer.append(TEXT_84);
d448 1
a448 1
    stringBuffer.append(TEXT_85);
d456 1
a456 1
    stringBuffer.append(TEXT_86);
d458 1
a458 1
    stringBuffer.append(TEXT_87);
d474 1
a474 1
    stringBuffer.append(TEXT_88);
d484 1
a484 1
    stringBuffer.append(TEXT_89);
d486 1
a486 1
    stringBuffer.append(TEXT_90);
d488 1
a488 1
    stringBuffer.append(TEXT_91);
d490 1
a490 1
    stringBuffer.append(TEXT_92);
d492 1
a492 1
    stringBuffer.append(TEXT_93);
d497 1
a497 1
    stringBuffer.append(TEXT_94);
d499 1
a499 1
    stringBuffer.append(TEXT_95);
d501 1
a501 1
    stringBuffer.append(TEXT_96);
d503 1
a503 1
    stringBuffer.append(TEXT_97);
d511 1
a511 1
    stringBuffer.append(TEXT_98);
d513 1
a513 1
    stringBuffer.append(TEXT_99);
d515 1
a515 1
    stringBuffer.append(TEXT_100);
d517 1
a517 1
    stringBuffer.append(TEXT_101);
d519 1
a519 1
    stringBuffer.append(TEXT_102);
d521 1
a521 1
    stringBuffer.append(TEXT_103);
d528 1
a528 1
    stringBuffer.append(TEXT_104);
d530 1
a530 1
    stringBuffer.append(TEXT_105);
d532 1
a532 1
    stringBuffer.append(TEXT_106);
d534 1
a534 1
    stringBuffer.append(TEXT_107);
d536 1
a536 1
    stringBuffer.append(TEXT_108);
d538 1
a538 1
    stringBuffer.append(TEXT_109);
d542 1
a542 1
    stringBuffer.append(TEXT_110);
d546 1
a546 1
    stringBuffer.append(TEXT_111);
d549 1
a549 1
    stringBuffer.append(TEXT_112);
d552 1
a552 1
    stringBuffer.append(TEXT_113);
d555 1
a555 1
    stringBuffer.append(TEXT_114);
d569 1
a569 1
    stringBuffer.append(TEXT_115);
d571 1
a571 1
    stringBuffer.append(TEXT_116);
d573 1
a573 1
    stringBuffer.append(TEXT_117);
d575 1
a575 1
    stringBuffer.append(TEXT_118);
d577 1
a577 1
    stringBuffer.append(TEXT_119);
d579 1
a579 1
    stringBuffer.append(TEXT_120);
d581 1
a581 1
    stringBuffer.append(TEXT_121);
d583 1
a583 1
    stringBuffer.append(TEXT_122);
d585 1
a585 1
    stringBuffer.append(TEXT_123);
d587 1
a587 1
    stringBuffer.append(TEXT_124);
d589 1
a589 1
    stringBuffer.append(TEXT_125);
d591 1
a591 1
    stringBuffer.append(TEXT_126);
d595 1
a595 1
    stringBuffer.append(TEXT_127);
d597 1
a597 1
    stringBuffer.append(TEXT_128);
d599 1
a599 1
    stringBuffer.append(TEXT_129);
d601 1
a601 1
    stringBuffer.append(TEXT_130);
d603 1
a603 1
    stringBuffer.append(TEXT_131);
d605 1
a605 1
    stringBuffer.append(TEXT_132);
d607 1
a607 1
    stringBuffer.append(TEXT_133);
d611 1
a611 1
    stringBuffer.append(TEXT_134);
d620 2
a621 2
    stringBuffer.append(TEXT_135);
    stringBuffer.append(TEXT_136);
d642 1
a642 1
    stringBuffer.append(TEXT_137);
d644 1
a644 1
    stringBuffer.append(TEXT_138);
d646 1
a646 1
    stringBuffer.append(TEXT_139);
d648 1
a648 1
    stringBuffer.append(TEXT_140);
d656 1
a656 1
    stringBuffer.append(TEXT_141);
d658 1
a658 1
    stringBuffer.append(TEXT_142);
d662 1
a662 1
    stringBuffer.append(TEXT_143);
d664 1
a664 1
    stringBuffer.append(TEXT_144);
d666 1
a666 1
    stringBuffer.append(TEXT_145);
d673 1
a673 1
    stringBuffer.append(TEXT_146);
d677 1
a677 1
    stringBuffer.append(TEXT_147);
d679 1
a679 1
    stringBuffer.append(TEXT_148);
@


1.20
log
@#148276 Evaluation of Diagram Metrics skipps the root object of the target hierarchy
@
text
@d385 1
a385 1
java.util.Map __exprEnvVariables
d387 1
@


1.19
log
@#147427 MetricProvider template should handle diagram without domain model correctly
@
text
@d28 1
a28 1
  protected final String TEXT_9 = " key2MetricMap;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int MAX_VISIBLE_KEY_CHAR_COUNT = 5;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
d42 2
a43 2
  protected final String TEXT_23 = " metrics = " + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram.eAllContents(), new ";
  protected final String TEXT_24 = "(50));" + NL + "\t\t\t\t\t\tif(diagram.getElement() != null) {\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram.getElement().eAllContents(), metrics);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\tsetResult(metrics);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t} catch(InterruptedException e) {" + NL + "\t\t\treturn ";
d45 123
a167 121
  protected final String TEXT_26 = " calculateMetrics(";
  protected final String TEXT_27 = " it, ";
  protected final String TEXT_28 = " metricsList) {" + NL + "\t\t";
  protected final String TEXT_29 = " metricsPerContext = new ";
  protected final String TEXT_30 = "();" + NL + "\t\twhile(it.hasNext()) {" + NL + "\t\t\tObject nextElement = it.next();" + NL + "\t\t\tif(nextElement instanceof EObject) {" + NL + "\t\t\t\tEObject nextEObj = (EObject)nextElement;" + NL + "\t\t\t\tEClass nextTarget = nextEObj.eClass();" + NL + "\t\t\t\t";
  protected final String TEXT_31 = " superTypeIt = nextTarget.getEAllSuperTypes().iterator();" + NL + "\t\t\t\twhile(nextTarget != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_32 = " metricList = getMetricsForTarget(nextTarget);" + NL + "\t\t\t\t\tif(metricList != null) {" + NL + "\t\t\t\t\t\tfor (";
  protected final String TEXT_33 = " metricIt = metricList.iterator(); metricIt.hasNext();) {" + NL + "\t\t\t\t\t\t\tMetricDef nextMetric = (MetricDef) metricIt.next();" + NL + "\t\t\t\t\t\t\tif(nextMetric.appliesTo(nextEObj)) {" + NL + "\t\t\t\t\t\t\t\tMetric metric = new Metric(nextMetric, nextEObj);" + NL + "\t\t\t\t\t\t\t\tmetricsPerContext.add(metric);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tnextTarget = superTypeIt.hasNext() ? (EClass)superTypeIt.next() : null; " + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\tif(!metricsPerContext.isEmpty()) {" + NL + "\t\t\t\t\tmetricsList.add(new ElementMetrics(nextEObj, " + NL + "\t\t\t\t\t\t\t(Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));" + NL + "\t\t\t\t\tmetricsPerContext.clear();\t\t\t\t" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn metricsList;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class ResultView extends ";
  protected final String TEXT_34 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String VIEW_ID = \"";
  protected final String TEXT_35 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate TableViewer viewer;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_36 = " diagramFile;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\t";
  protected final String TEXT_37 = " resource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tthis.diagramFile = ";
  protected final String TEXT_38 = ".getFile(resource);" + NL + "\t\t\tsetTitleToolTip(diagramFile.getFullPath().toString());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_39 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_40 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_41 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_42 = " gc = new ";
  protected final String TEXT_43 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_44 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_45 = " headerSelListener = new ";
  protected final String TEXT_46 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_47 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_48 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_49 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_50 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_51 = ".openEditor(getSite().getPage(), diagramFile, true);" + NL + "\t\t\t} catch (";
  protected final String TEXT_52 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_53 = ".getInstance().logError(\"Can't open diagram editor\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_54 = " calcMetricMaxValueStrLenMap(";
  protected final String TEXT_55 = " allMetrics) {" + NL + "\t\t\t";
  protected final String TEXT_56 = " metric2MaxStrLen = new ";
  protected final String TEXT_57 = "();\t\t\t \t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tString nextKey = ((MetricDef)getMetrics().get(i)).key; " + NL + "\t\t\t\tint trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);" + NL + "\t\t\t\tmetric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_58 = " it = allMetrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\tfor (int i = 0; i < elementMetrics.metrics.length; i++) {" + NL + "\t\t\t\t\tMetric metric = elementMetrics.metrics[i];" + NL + "\t\t\t\t\tString valueStr = (String)metric2MaxStrLen.get(metric.def.key);" + NL + "\t\t\t\t\tif(valueStr == null || metric.displayValue.length() > valueStr.length()) {" + NL + "\t\t\t\t\t\tmetric2MaxStrLen.put(metric.def.key, metric.displayValue);\t" + NL + "\t\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn metric2MaxStrLen;\t\t" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setFocus() {" + NL + "\t\t}\t\t" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tprivate boolean isElementColumn(int columnIndex) {" + NL + "\t\t\t\treturn columnIndex >= getMetrics().size();" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_59 = " getColumnImage(Object element, int columnIndex) {\t\t\t\t" + NL + "\t\t\t\treturn isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;" + NL + "\t\t\t}\t\t" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic String getColumnText(Object element, int columnIndex) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics)element;" + NL + "\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(columnIndex == getMetrics().size()) {" + NL + "\t\t\t\t\treturn elementMetrics.targetElementQName;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = elementMetrics.getMetricByKey(key);" + NL + "\t\t\t\treturn (metric != null) ? metric.displayValue : \"-\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_60 = " getBackground(Object element, int columnIndex) {" + NL + "\t\t\t\treturn null; " + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_61 = " getForeground(Object element, int columnIndex) {" + NL + "\t\t\t\tif(isElementColumn(columnIndex)) return null;" + NL + "\t\t\t\tElementMetrics columnElement = (ElementMetrics)element;" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = columnElement.getMetricByKey(key);\t\t\t" + NL + "\t\t\t\tif(metric != null && metric.value != null) {" + NL + "\t\t\t\t\tif (metric.def.highLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.highLimit.longValue() < metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_62 = ".red;" + NL + "\t\t\t\t\t} else if (metric.def.lowLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.lowLimit.longValue() > metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_63 = ".blue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementMetrics {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Metric[] metrics;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String targetElementQName;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_64 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_65 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_66 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_67 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_68 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_69 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_70 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int[] semanticIDs;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_71 = " expression, int[] semanticIDs, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticIDs = semanticIDs;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticIDs != null) {" + NL + "\t\t\t\tint eObjectID = ";
  protected final String TEXT_72 = ".getVisualID((View)eObject); " + NL + "\t\t\t\tfor(int i = 0; i < semanticIDs.length; i++) {" + NL + "\t\t\t\t\tif(semanticIDs[i] == eObjectID) {" + NL + "\t\t\t\t\t\treturn true;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn false;\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_73 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_74 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_75 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static Number calculateMetric(String metricKey, Object contextInstance) {" + NL + "\t\tif (key2MetricMap == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\tMetricDef metric = (MetricDef)key2MetricMap.get(metricKey);" + NL + "\t\treturn (metric != null) ? metric.calcMetric(contextInstance) : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_76 = "\t\t" + NL + "\t\t";
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = " = new ";
  protected final String TEXT_80 = "(3);";
  protected final String TEXT_81 = ".put(\"";
  protected final String TEXT_82 = "\", ";
  protected final String TEXT_83 = "); //$NON-NLS-1$";
  protected final String TEXT_84 = NL + "\t\tregister(new MetricDef(";
  protected final String TEXT_85 = "," + NL + "\t\t\t";
  protected final String TEXT_86 = "null";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = "(";
  protected final String TEXT_89 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_90 = ", ";
  protected final String TEXT_91 = ")";
  protected final String TEXT_92 = ".";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_95 = ")";
  protected final String TEXT_96 = "new ";
  protected final String TEXT_97 = "(";
  protected final String TEXT_98 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_99 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_100 = " self = (";
  protected final String TEXT_101 = ")context;";
  protected final String TEXT_102 = "\t" + NL + "\t\t";
  protected final String TEXT_103 = " ";
  protected final String TEXT_104 = " = (";
  protected final String TEXT_105 = ")env.get(\"";
  protected final String TEXT_106 = "\"); //$NON-NLS-1$";
  protected final String TEXT_107 = NL + "\t\treturn ";
  protected final String TEXT_108 = ".";
  protected final String TEXT_109 = "(self";
  protected final String TEXT_110 = ", ";
  protected final String TEXT_111 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_112 = NL + ",";
  protected final String TEXT_113 = NL + "\t\t\t";
  protected final String TEXT_114 = "," + NL + "\t\t\t";
  protected final String TEXT_115 = "new Double(";
  protected final String TEXT_116 = ")";
  protected final String TEXT_117 = "null";
  protected final String TEXT_118 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_119 = "new Double(";
  protected final String TEXT_120 = ")";
  protected final String TEXT_121 = "null";
  protected final String TEXT_122 = "," + NL + "\t\t\t";
  protected final String TEXT_123 = "," + NL + "\t\t\t";
  protected final String TEXT_124 = "));";
  protected final String TEXT_125 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_126 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_127 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_128 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_129 = " metrics = (";
  protected final String TEXT_130 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_131 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_132 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_133 = "\t\t";
  protected final String TEXT_134 = NL;
  protected final String TEXT_135 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_136 = " ";
  protected final String TEXT_137 = "(";
  protected final String TEXT_138 = " self";
  protected final String TEXT_139 = ", ";
  protected final String TEXT_140 = " ";
  protected final String TEXT_141 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_142 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_143 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_144 = NL + "\t} //JavaRules";
  protected final String TEXT_145 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_146 = NL;
d265 2
a267 2
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d271 2
a273 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.ViewPart"));
d281 1
a281 1
    stringBuffer.append(genDiagram.getMetricViewID());
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d285 1
a285 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d287 1
a287 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
d289 1
a289 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d291 2
a293 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d295 1
a295 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d297 2
a299 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.resource.JFaceResources"));
d301 1
a301 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d303 2
a305 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionEvent"));
d307 1
a307 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorPart"));
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d311 2
a313 2
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.ide.IDE"));
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PartInitException"));
d317 1
a317 1
    stringBuffer.append(pluginActivatorClass);
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d325 1
a325 1
    stringBuffer.append(importManager.getImportedName("java.util.HashMap"));
d327 1
a327 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d333 2
a335 2
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
d337 2
a339 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Image"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d343 2
a345 2
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d353 2
a355 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d357 1
a357 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d363 4
d381 1
a381 1
    stringBuffer.append(TEXT_76);
d392 1
a392 1
    stringBuffer.append(TEXT_77);
d394 1
a394 1
    stringBuffer.append(TEXT_78);
d396 1
a396 1
    stringBuffer.append(TEXT_79);
d398 1
a398 1
    stringBuffer.append(TEXT_80);
d407 1
a407 1
    stringBuffer.append(TEXT_81);
d409 1
a409 1
    stringBuffer.append(TEXT_82);
d411 1
a411 1
    stringBuffer.append(TEXT_83);
d419 1
a419 1
    stringBuffer.append(TEXT_84);
d421 1
a421 1
    stringBuffer.append(TEXT_85);
d437 1
a437 1
    stringBuffer.append(TEXT_86);
d447 1
a447 1
    stringBuffer.append(TEXT_87);
d449 1
a449 1
    stringBuffer.append(TEXT_88);
d451 1
a451 1
    stringBuffer.append(TEXT_89);
d453 1
a453 1
    stringBuffer.append(TEXT_90);
d455 1
a455 1
    stringBuffer.append(TEXT_91);
d460 1
a460 1
    stringBuffer.append(TEXT_92);
d462 1
a462 1
    stringBuffer.append(TEXT_93);
d464 1
a464 1
    stringBuffer.append(TEXT_94);
d466 1
a466 1
    stringBuffer.append(TEXT_95);
d474 1
a474 1
    stringBuffer.append(TEXT_96);
d476 1
a476 1
    stringBuffer.append(TEXT_97);
d478 1
a478 1
    stringBuffer.append(TEXT_98);
d480 1
a480 1
    stringBuffer.append(TEXT_99);
d482 1
a482 1
    stringBuffer.append(TEXT_100);
d484 1
a484 1
    stringBuffer.append(TEXT_101);
a490 4
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(nextVariableName);
d496 4
d501 1
a501 1
    stringBuffer.append(TEXT_107);
d505 1
a505 1
    stringBuffer.append(TEXT_108);
d509 1
a509 1
    stringBuffer.append(TEXT_109);
d512 1
a512 1
    stringBuffer.append(TEXT_110);
d515 1
a515 1
    stringBuffer.append(TEXT_111);
d518 1
a518 1
    stringBuffer.append(TEXT_112);
d532 1
a532 1
    stringBuffer.append(TEXT_113);
d534 1
a534 1
    stringBuffer.append(TEXT_114);
d536 1
a536 1
    stringBuffer.append(TEXT_115);
d538 1
a538 1
    stringBuffer.append(TEXT_116);
d540 1
a540 1
    stringBuffer.append(TEXT_117);
d542 1
a542 1
    stringBuffer.append(TEXT_118);
d544 1
a544 1
    stringBuffer.append(TEXT_119);
d546 1
a546 1
    stringBuffer.append(TEXT_120);
d548 1
a548 1
    stringBuffer.append(TEXT_121);
d550 1
a550 1
    stringBuffer.append(TEXT_122);
d552 1
a552 1
    stringBuffer.append(TEXT_123);
d554 1
a554 1
    stringBuffer.append(TEXT_124);
d558 1
a558 1
    stringBuffer.append(TEXT_125);
d560 1
a560 1
    stringBuffer.append(TEXT_126);
d562 1
a562 1
    stringBuffer.append(TEXT_127);
d564 1
a564 1
    stringBuffer.append(TEXT_128);
d566 1
a566 1
    stringBuffer.append(TEXT_129);
d568 1
a568 1
    stringBuffer.append(TEXT_130);
d570 1
a570 1
    stringBuffer.append(TEXT_131);
d574 1
a574 1
    stringBuffer.append(TEXT_132);
d583 2
a584 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(TEXT_134);
d605 1
a605 1
    stringBuffer.append(TEXT_135);
d607 1
a607 1
    stringBuffer.append(TEXT_136);
d609 1
a609 1
    stringBuffer.append(TEXT_137);
d611 1
a611 1
    stringBuffer.append(TEXT_138);
d619 1
a619 1
    stringBuffer.append(TEXT_139);
d621 1
a621 1
    stringBuffer.append(TEXT_140);
d625 1
a625 1
    stringBuffer.append(TEXT_141);
d627 1
a627 1
    stringBuffer.append(TEXT_142);
d629 1
a629 1
    stringBuffer.append(TEXT_143);
d636 1
a636 1
    stringBuffer.append(TEXT_144);
d640 1
a640 1
    stringBuffer.append(TEXT_145);
d642 1
a642 1
    stringBuffer.append(TEXT_146);
@


1.18
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d43 1
a43 1
  protected final String TEXT_24 = "(50));" + NL + "\t\t\t\t\t\tsetResult(calculateMetrics(diagram.getElement().eAllContents(), metrics));" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t} catch(InterruptedException e) {" + NL + "\t\t\treturn ";
@


1.17
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@d103 2
a104 2
  protected final String TEXT_84 = NL + "\t\tregister(new MetricDef(\"";
  protected final String TEXT_85 = "\"," + NL + "\t\t\t";
d107 2
a108 2
  protected final String TEXT_88 = "(\"";
  protected final String TEXT_89 = "\", //$NON-NLS-1$" + NL + "\t";
d112 2
a113 2
  protected final String TEXT_93 = "(\"";
  protected final String TEXT_94 = "\", //$NON-NLS-1$" + NL + "\t";
d142 24
a165 30
  protected final String TEXT_123 = "\"";
  protected final String TEXT_124 = "\"";
  protected final String TEXT_125 = "null";
  protected final String TEXT_126 = "," + NL + "\t\t\t";
  protected final String TEXT_127 = "\"";
  protected final String TEXT_128 = "\"";
  protected final String TEXT_129 = "null";
  protected final String TEXT_130 = "));";
  protected final String TEXT_131 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_132 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_133 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_134 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_135 = " metrics = (";
  protected final String TEXT_136 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_137 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_138 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_139 = "\t\t";
  protected final String TEXT_140 = NL;
  protected final String TEXT_141 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_142 = " ";
  protected final String TEXT_143 = "(";
  protected final String TEXT_144 = " self";
  protected final String TEXT_145 = ", ";
  protected final String TEXT_146 = " ";
  protected final String TEXT_147 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_148 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_149 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_150 = NL + "\t} //JavaRules";
  protected final String TEXT_151 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_152 = NL;
d414 1
a414 1
    stringBuffer.append(nextMetric.getKey());
d434 1
d444 1
a444 1
    stringBuffer.append(__genValueExpression.getBody());
d457 1
a457 1
    stringBuffer.append(__genValueExpression.getBody());
d545 1
a545 1
    if(nextMetric.getName()!=null){
d547 1
a547 1
    stringBuffer.append(nextMetric.getName());
a548 12
    }else{
    stringBuffer.append(TEXT_125);
    }
    stringBuffer.append(TEXT_126);
    if(nextMetric.getDescription()!=null){
    stringBuffer.append(TEXT_127);
    stringBuffer.append(nextMetric.getDescription());
    stringBuffer.append(TEXT_128);
    }else{
    stringBuffer.append(TEXT_129);
    }
    stringBuffer.append(TEXT_130);
d552 1
a552 1
    stringBuffer.append(TEXT_131);
d554 1
a554 1
    stringBuffer.append(TEXT_132);
d556 1
a556 1
    stringBuffer.append(TEXT_133);
d558 1
a558 1
    stringBuffer.append(TEXT_134);
d560 1
a560 1
    stringBuffer.append(TEXT_135);
d562 1
a562 1
    stringBuffer.append(TEXT_136);
d564 1
a564 1
    stringBuffer.append(TEXT_137);
d568 1
a568 1
    stringBuffer.append(TEXT_138);
d577 2
a578 2
    stringBuffer.append(TEXT_139);
    stringBuffer.append(TEXT_140);
d599 1
a599 1
    stringBuffer.append(TEXT_141);
d601 1
a601 1
    stringBuffer.append(TEXT_142);
d603 1
a603 1
    stringBuffer.append(TEXT_143);
d605 1
a605 1
    stringBuffer.append(TEXT_144);
d613 1
a613 1
    stringBuffer.append(TEXT_145);
d615 1
a615 1
    stringBuffer.append(TEXT_146);
d619 1
a619 1
    stringBuffer.append(TEXT_147);
d621 1
a621 1
    stringBuffer.append(TEXT_148);
d623 1
a623 1
    stringBuffer.append(TEXT_149);
d630 1
a630 1
    stringBuffer.append(TEXT_150);
d634 1
a634 1
    stringBuffer.append(TEXT_151);
d636 1
a636 1
    stringBuffer.append(TEXT_152);
@


1.16
log
@header comment should not be a javadoc comment
@
text
@d166 6
a171 5
  protected final String TEXT_147 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_148 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_149 = NL + "\t} //JavaRules";
  protected final String TEXT_150 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_151 = NL;
d605 1
d637 2
d640 1
a640 1
    stringBuffer.append(TEXT_148);
d642 1
a642 1
}
d647 1
a647 1
    stringBuffer.append(TEXT_149);
d651 1
a651 1
    stringBuffer.append(TEXT_150);
d653 1
a653 1
    stringBuffer.append(TEXT_151);
@


1.15
log
@#136701 [GMFGen] GenDiagramElementTarget should allow to target more then one element
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.14
log
@Correcting copyright processing
@
text
@d89 3
a91 3
  protected final String TEXT_70 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int semanticID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_71 = " expression, int semanticID, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticID = semanticID;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticID >= 0) { " + NL + "\t\t\t\treturn semanticID == ";
  protected final String TEXT_72 = ".getVisualID((View)eObject);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
d131 11
a141 11
  protected final String TEXT_112 = NL + "," + NL + "\t\t\t";
  protected final String TEXT_113 = "," + NL + "\t\t\t";
  protected final String TEXT_114 = "new Double(";
  protected final String TEXT_115 = ")";
  protected final String TEXT_116 = "null";
  protected final String TEXT_117 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_118 = "new Double(";
  protected final String TEXT_119 = ")";
  protected final String TEXT_120 = "null";
  protected final String TEXT_121 = "," + NL + "\t\t\t";
  protected final String TEXT_122 = "\"";
d143 3
a145 3
  protected final String TEXT_124 = "null";
  protected final String TEXT_125 = "," + NL + "\t\t\t";
  protected final String TEXT_126 = "\"";
d147 24
a170 23
  protected final String TEXT_128 = "null";
  protected final String TEXT_129 = "));";
  protected final String TEXT_130 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_131 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_132 = "();" + NL + "\t\t\tkey2MetricMap = new ";
  protected final String TEXT_133 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_134 = " metrics = (";
  protected final String TEXT_135 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_136 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t\tkey2MetricMap.put(metric.key, metric);\t\t" + NL + "\t}\t" + NL;
  protected final String TEXT_137 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_138 = "\t\t";
  protected final String TEXT_139 = NL;
  protected final String TEXT_140 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_141 = " ";
  protected final String TEXT_142 = "(";
  protected final String TEXT_143 = " self";
  protected final String TEXT_144 = ", ";
  protected final String TEXT_145 = " ";
  protected final String TEXT_146 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_147 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_148 = NL + "\t} //JavaRules";
  protected final String TEXT_149 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_150 = NL;
d517 13
a529 1
    stringBuffer.append(nextMetric.getTarget() instanceof GenDiagramElementTarget ? importManager.getImportedName(((GenDiagramElementTarget) nextMetric.getTarget()).getElement().getEditPartQualifiedClassName()) + ".VISUAL_ID" : "-1");
d531 2
d534 1
a534 1
    stringBuffer.append(TEXT_114);
d536 1
a536 1
    stringBuffer.append(TEXT_115);
d538 1
a538 1
    stringBuffer.append(TEXT_116);
d540 1
a540 1
    stringBuffer.append(TEXT_117);
d542 1
a542 1
    stringBuffer.append(TEXT_118);
d544 1
a544 1
    stringBuffer.append(TEXT_119);
d546 1
a546 1
    stringBuffer.append(TEXT_120);
d548 1
a548 1
    stringBuffer.append(TEXT_121);
d550 1
a550 1
    stringBuffer.append(TEXT_122);
d552 1
a552 1
    stringBuffer.append(TEXT_123);
d554 1
a554 1
    stringBuffer.append(TEXT_124);
d556 1
a556 1
    stringBuffer.append(TEXT_125);
d558 1
a558 1
    stringBuffer.append(TEXT_126);
d560 1
a560 1
    stringBuffer.append(TEXT_127);
d562 1
a562 1
    stringBuffer.append(TEXT_128);
d564 1
a564 1
    stringBuffer.append(TEXT_129);
d566 1
a566 1
}
d568 1
a568 1
    stringBuffer.append(TEXT_130);
d570 1
a570 1
    stringBuffer.append(TEXT_131);
d572 1
a572 1
    stringBuffer.append(TEXT_132);
a573 2
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d577 2
d580 1
a580 1
    stringBuffer.append(TEXT_136);
d584 1
a584 1
    stringBuffer.append(TEXT_137);
a592 1
    stringBuffer.append(TEXT_138);
d594 1
d614 1
a614 1
    stringBuffer.append(TEXT_140);
d616 1
a616 1
    stringBuffer.append(TEXT_141);
d618 1
a618 1
    stringBuffer.append(TEXT_142);
d620 1
a620 1
    stringBuffer.append(TEXT_143);
d628 1
a628 1
    stringBuffer.append(TEXT_144);
d630 1
a630 1
    stringBuffer.append(TEXT_145);
d634 1
a634 1
    stringBuffer.append(TEXT_146);
d636 1
a636 1
    stringBuffer.append(TEXT_147);
d643 1
a643 1
    stringBuffer.append(TEXT_148);
d647 1
a647 1
    stringBuffer.append(TEXT_149);
d649 1
a649 1
    stringBuffer.append(TEXT_150);
@


1.13
log
@#141340  Audit rule targeted to a metric definition is not registered as valid constraint
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d185 1
a185 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.12
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d27 114
a140 114
  protected final String TEXT_8 = " metricsRegistry;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int MAX_VISIBLE_KEY_CHAR_COUNT = 5;" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " createAction(String actionId," + NL + "\t\t\t";
  protected final String TEXT_10 = " partDescriptor) {" + NL + "\t\tif (MetricsAction.ACTION_KEY.equals(actionId)) {" + NL + "\t\t\treturn new MetricsAction(partDescriptor);" + NL + "\t\t}" + NL + "\t\treturn super.createAction(actionId, partDescriptor);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricsAction extends ";
  protected final String TEXT_11 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String ACTION_KEY = \"metricsAction\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ";
  protected final String TEXT_12 = " workbenchPartDescriptor;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic MetricsAction(";
  protected final String TEXT_13 = " workbenchPartDescriptor) {" + NL + "\t\t\tsetId(ACTION_KEY);" + NL + "\t\t\tsetText(\"Metrics\");" + NL + "\t\t\tthis.workbenchPartDescriptor = workbenchPartDescriptor;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run() {" + NL + "\t\t\t";
  protected final String TEXT_14 = " workbenchPart = workbenchPartDescriptor.getPartPage().getActivePart();" + NL + "\t\t\t";
  protected final String TEXT_15 = " metricsView = null;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tmetricsView = ";
  protected final String TEXT_16 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().findView(ResultView.VIEW_ID);\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(metricsView == null) {" + NL + "\t\t\t\t\tmetricsView = ";
  protected final String TEXT_17 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ResultView.VIEW_ID);\t\t\t\t\t" + NL + "\t\t\t\t} else {" + NL + "\t\t\t\t\tif (metricsView != null && workbenchPart instanceof IDiagramWorkbenchPart) {" + NL + "\t\t\t\t\t\tfinal IDiagramWorkbenchPart part = (IDiagramWorkbenchPart) workbenchPart;" + NL + "\t\t\t\t\t\t((ResultView)metricsView).setInput(part);" + NL + "\t\t\t\t\t}\t\t\t\t\t" + NL + "\t\t\t\t\tworkbenchPart.getSite().getPage().activate(metricsView);\t\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t} catch (";
  protected final String TEXT_18 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_19 = ".getInstance().logError(\"Diagram metric view failure\", e); //$NON-NLS-1$" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tstatic ";
  protected final String TEXT_20 = " calculateMetrics(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\tfinal Diagram diagram = diagramPart.getDiagram();" + NL + "\t\ttry {" + NL + "\t\t\treturn (";
  protected final String TEXT_21 = ")diagramPart.getDiagramEditPart().getEditingDomain().runExclusive(\t\t\t\t" + NL + "\t\t\t\tnew org.eclipse.emf.transaction.RunnableWithResult.Impl() {" + NL + "\t\t\t\t\tpublic void run() {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_22 = " metrics = " + NL + "\t\t\t\t\t\t\tcalculateMetrics(diagram.eAllContents(), new ";
  protected final String TEXT_23 = "(50));" + NL + "\t\t\t\t\t\tsetResult(calculateMetrics(diagram.getElement().eAllContents(), metrics));" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t});" + NL + "\t\t} catch(InterruptedException e) {" + NL + "\t\t\treturn ";
  protected final String TEXT_24 = ".EMPTY_LIST;\t\t" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic ";
  protected final String TEXT_25 = " calculateMetrics(";
  protected final String TEXT_26 = " it, ";
  protected final String TEXT_27 = " metricsList) {" + NL + "\t\t";
  protected final String TEXT_28 = " metricsPerContext = new ";
  protected final String TEXT_29 = "();" + NL + "\t\twhile(it.hasNext()) {" + NL + "\t\t\tObject nextElement = it.next();" + NL + "\t\t\tif(nextElement instanceof EObject) {" + NL + "\t\t\t\tEObject nextEObj = (EObject)nextElement;" + NL + "\t\t\t\tEClass nextTarget = nextEObj.eClass();" + NL + "\t\t\t\t";
  protected final String TEXT_30 = " superTypeIt = nextTarget.getEAllSuperTypes().iterator();" + NL + "\t\t\t\twhile(nextTarget != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_31 = " metricList = getMetricsForTarget(nextTarget);" + NL + "\t\t\t\t\tif(metricList != null) {" + NL + "\t\t\t\t\t\tfor (";
  protected final String TEXT_32 = " metricIt = metricList.iterator(); metricIt.hasNext();) {" + NL + "\t\t\t\t\t\t\tMetricDef nextMetric = (MetricDef) metricIt.next();" + NL + "\t\t\t\t\t\t\tif(nextMetric.appliesTo(nextEObj)) {" + NL + "\t\t\t\t\t\t\t\tMetric metric = new Metric(nextMetric, nextEObj);" + NL + "\t\t\t\t\t\t\t\tmetricsPerContext.add(metric);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tnextTarget = superTypeIt.hasNext() ? (EClass)superTypeIt.next() : null; " + NL + "\t\t\t\t}" + NL + "\t\t\t\t" + NL + "\t\t\t\tif(!metricsPerContext.isEmpty()) {" + NL + "\t\t\t\t\tmetricsList.add(new ElementMetrics(nextEObj, " + NL + "\t\t\t\t\t\t\t(Metric[])metricsPerContext.toArray(new Metric[metricsPerContext.size()])));" + NL + "\t\t\t\t\tmetricsPerContext.clear();\t\t\t\t" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t}\t\t\t" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\treturn metricsList;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static class ResultView extends ";
  protected final String TEXT_33 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic static final String VIEW_ID = \"";
  protected final String TEXT_34 = "\"; //$NON-NLS-1$" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tprivate TableViewer viewer;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_35 = " diagramFile;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    void setInput(IDiagramWorkbenchPart diagramPart) {" + NL + "\t\t\t";
  protected final String TEXT_36 = " resource = diagramPart.getDiagram().eResource();" + NL + "\t\t\tthis.diagramFile = ";
  protected final String TEXT_37 = ".getFile(resource);" + NL + "\t\t\tsetTitleToolTip(diagramFile.getFullPath().toString());" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_38 = " metrics = calculateMetrics(diagramPart);" + NL + "\t    \tadjustLayout(metrics);" + NL + "\t    \tviewer.setInput(metrics); " + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t    private void adjustLayout(";
  protected final String TEXT_39 = " metricResultList) {" + NL + "\t    \t";
  protected final String TEXT_40 = " maxValStrMap = calcMetricMaxValueStrLenMap(metricResultList);" + NL + "\t\t\tTable table = viewer.getTable();" + NL + "\t\t\tTableLayout layout = new TableLayout();" + NL + "\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_41 = " gc = new ";
  protected final String TEXT_42 = "(table);" + NL + "\t\t\tgc.setFont(";
  protected final String TEXT_43 = ".getDialogFont());" + NL + "\t\t\tint padding = gc.stringExtent(\"X\").x * 2; //$NON-NLS-1$" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = (MetricDef)getMetrics().get(i);" + NL + "\t\t\t\tString valueStr = (String)maxValStrMap.get(nextMetric.key);" + NL + "\t\t\t\tint minWidth = valueStr != null ? gc.stringExtent(valueStr).x + padding : 20;\t\t\t" + NL + "\t\t\t\tlayout.addColumnData(new ColumnPixelData(minWidth, true));" + NL + "\t\t\t}" + NL + "\t\t\tgc.dispose();" + NL + "\t\t\t" + NL + "\t\t\tlayout.addColumnData(new ColumnWeightData(1, 50, true));" + NL + "\t\t\tviewer.getTable().setLayout(layout);" + NL + "\t\t\tviewer.getTable().layout(true, true);" + NL + "\t    }" + NL + "\t    " + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t    " + NL + "\t\tpublic void createPartControl(Composite parent) {\t\t\t" + NL + "\t\t\tthis.viewer = new TableViewer(parent, SWT.FULL_SELECTION);" + NL + "\t\t\tfinal Table table = viewer.getTable();" + NL + "\t\t\ttable.setHeaderVisible(true);" + NL + "\t\t\ttable.setLinesVisible(true);\t" + NL + "\t\t\t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tMetricDef nextMetric = ((MetricDef)getMetrics().get(i));\t\t" + NL + "\t\t\t\tTableColumn column = new TableColumn(table, SWT.NONE);" + NL + "\t\t\t\tcolumn.setAlignment(SWT.RIGHT);" + NL + "\t\t\t\tcolumn.setMoveable(true);\t\t\t\t" + NL + "\t\t\t\tcolumn.setText(nextMetric.key);" + NL + "\t\t\t\tcolumn.setToolTipText(nextMetric.getToolTipText());" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tTableColumn objectColumn = new TableColumn(table, SWT.NONE);\t\t\t" + NL + "\t\t\tobjectColumn.setText(\"Element\");" + NL + "\t\t\tobjectColumn.setToolTipText(\"Measurement element\");" + NL + "\t\t\t" + NL + "\t\t\tviewer.setLabelProvider(new Labels());" + NL + "\t\t\tviewer.setContentProvider(new ArrayContentProvider());\t\t\t\t\t\t" + NL + "\t\t\tviewer.addOpenListener(new IOpenListener() {" + NL + "\t\t\t\tpublic void open(OpenEvent event) {" + NL + "\t\t\t\t\thandleOpen(event);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_44 = " headerSelListener = new ";
  protected final String TEXT_45 = "() {" + NL + "\t\t\t\tpublic void widgetSelected(org.eclipse.swt.events.SelectionEvent e) {" + NL + "\t\t\t\t\ttable.setSortColumn((TableColumn)e.getSource());  " + NL + "\t\t\t\t\ttable.setSortDirection((table.getSortDirection() != SWT.DOWN) ? SWT.DOWN : SWT.UP);" + NL + "\t\t\t\t\tviewer.refresh();" + NL + "\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\tpublic void widgetDefaultSelected(";
  protected final String TEXT_46 = " e) {\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t};\t\t\t" + NL + "\t\t\tTableColumn[] columns = viewer.getTable().getColumns();" + NL + "\t\t\tfor (int i = 0; i < columns.length; i++) {" + NL + "\t\t\t\tcolumns[i].addSelectionListener(headerSelListener);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tviewer.setSorter(" + NL + "\t\t\t\tnew ViewerSorter() {" + NL + "\t\t\t\t\tpublic int compare(Viewer viewer, Object e1, Object e2) {" + NL + "\t\t\t\t\t\tTableColumn c = table.getSortColumn();" + NL + "\t\t\t\t\t\tint result = 0;" + NL + "\t\t\t\t\t\tif(c != null) {" + NL + "\t\t\t\t\t\t\tMetric mc1 = ((ElementMetrics)e1).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tMetric mc2 = ((ElementMetrics)e2).getMetricByKey(c.getText());" + NL + "\t\t\t\t\t\t\tresult = (mc1 != null && mc2 != null) ?" + NL + "\t\t\t\t\t\t\t\tmc1.compareTo(mc2) : (mc1 == null ? -1 : 1);" + NL + "\t\t\t\t\t\t} else {" + NL + "\t\t\t\t\t\t\tresult = ((ElementMetrics)e1).targetElementQName.compareTo(((ElementMetrics)e2).targetElementQName);" + NL + "\t\t\t\t\t\t}\t\t\t\t\t\t" + NL + "\t\t\t\t\t\treturn table.getSortDirection() == SWT.DOWN ? result : -result;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t);" + NL + "\t\t\t" + NL + "\t        ";
  protected final String TEXT_47 = " editor = getSite().getPage().getActiveEditor();" + NL + "\t        if(editor != null && editor.getClass().equals(";
  protected final String TEXT_48 = ".class)) {" + NL + "\t\t\t\tsetInput((";
  protected final String TEXT_49 = ")editor);" + NL + "\t        }\t\t\t" + NL + "\t\t}" + NL + "\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t\t\t" + NL + "\t\tprivate void handleOpen(OpenEvent event) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\t";
  protected final String TEXT_50 = ".openEditor(getSite().getPage(), diagramFile, true);" + NL + "\t\t\t} catch (";
  protected final String TEXT_51 = " e) {" + NL + "\t\t\t\t";
  protected final String TEXT_52 = ".getInstance().logError(\"Can't open diagram editor\", e); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate static ";
  protected final String TEXT_53 = " calcMetricMaxValueStrLenMap(";
  protected final String TEXT_54 = " allMetrics) {" + NL + "\t\t\t";
  protected final String TEXT_55 = " metric2MaxStrLen = new ";
  protected final String TEXT_56 = "();\t\t\t \t" + NL + "\t\t\tfor (int i = 0; i < getMetrics().size(); i++) {" + NL + "\t\t\t\tString nextKey = ((MetricDef)getMetrics().get(i)).key; " + NL + "\t\t\t\tint trimPos = Math.min(nextKey.length(), MAX_VISIBLE_KEY_CHAR_COUNT);" + NL + "\t\t\t\tmetric2MaxStrLen.put(nextKey, nextKey.substring(0, trimPos));\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_57 = " it = allMetrics.iterator(); it.hasNext();) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics) it.next();" + NL + "\t\t\t\tfor (int i = 0; i < elementMetrics.metrics.length; i++) {" + NL + "\t\t\t\t\tMetric metric = elementMetrics.metrics[i];" + NL + "\t\t\t\t\tString valueStr = (String)metric2MaxStrLen.get(metric.def.key);" + NL + "\t\t\t\t\tif(valueStr == null || metric.displayValue.length() > valueStr.length()) {" + NL + "\t\t\t\t\t\tmetric2MaxStrLen.put(metric.def.key, metric.displayValue);\t" + NL + "\t\t\t\t\t}\t\t\t\t" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn metric2MaxStrLen;\t\t" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void setFocus() {" + NL + "\t\t}\t\t" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tprivate class Labels extends LabelProvider implements ITableLabelProvider, ITableColorProvider {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tprivate boolean isElementColumn(int columnIndex) {" + NL + "\t\t\t\treturn columnIndex >= getMetrics().size();" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_58 = " getColumnImage(Object element, int columnIndex) {\t\t\t\t" + NL + "\t\t\t\treturn isElementColumn(columnIndex) ? ((ElementMetrics)element).elementImage : null;" + NL + "\t\t\t}\t\t" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic String getColumnText(Object element, int columnIndex) {" + NL + "\t\t\t\tElementMetrics elementMetrics = (ElementMetrics)element;" + NL + "\t\t\t\t\t\t\t" + NL + "\t\t\t\tif(columnIndex == getMetrics().size()) {" + NL + "\t\t\t\t\treturn elementMetrics.targetElementQName;" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = elementMetrics.getMetricByKey(key);" + NL + "\t\t\t\treturn (metric != null) ? metric.displayValue : \"-\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_59 = " getBackground(Object element, int columnIndex) {" + NL + "\t\t\t\treturn null; " + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t" + NL + "\t\t\tpublic ";
  protected final String TEXT_60 = " getForeground(Object element, int columnIndex) {" + NL + "\t\t\t\tif(isElementColumn(columnIndex)) return null;" + NL + "\t\t\t\tElementMetrics columnElement = (ElementMetrics)element;" + NL + "\t\t\t\tString key = ((MetricDef)getMetrics().get(columnIndex)).key;" + NL + "\t\t\t\tMetric metric = columnElement.getMetricByKey(key);\t\t\t" + NL + "\t\t\t\tif(metric != null && metric.value != null) {" + NL + "\t\t\t\t\tif (metric.def.highLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.highLimit.longValue() < metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_61 = ".red;" + NL + "\t\t\t\t\t} else if (metric.def.lowLimit != null" + NL + "\t\t\t\t\t\t\t&& metric.def.lowLimit.longValue() > metric.value.longValue()) {" + NL + "\t\t\t\t\t\treturn ";
  protected final String TEXT_62 = ".blue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementMetrics {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Metric[] metrics;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String targetElementQName;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tfinal ";
  protected final String TEXT_63 = " elementImage;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tElementMetrics(EObject target, Metric[] metrics) {" + NL + "\t\t\tthis.metrics = metrics;" + NL + "\t\t\tassert metrics.length > 0;" + NL + "\t\t\t" + NL + "\t\t\tEClass imageTarget = target.eClass();\t\t\t" + NL + "\t\t\tif (target instanceof View) {" + NL + "\t\t\t\tView viewTarget = (View) target;" + NL + "\t\t\t\tStringBuffer notationQNameBuf = new StringBuffer();" + NL + "\t\t\t\tnotationQNameBuf.append(";
  protected final String TEXT_64 = ".getQualifiedName(viewTarget, true));" + NL + "\t\t\t\tif (\"\".equals(viewTarget.getType()) && viewTarget.getElement() != null) { //$NON-NLS-1$" + NL + "\t\t\t\t\tnotationQNameBuf" + NL + "\t\t\t\t\t\t.append('-').append('>')" + NL + "\t\t\t\t\t\t.append(";
  protected final String TEXT_65 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = ";
  protected final String TEXT_66 = ".getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_67 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_68 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal ";
  protected final String TEXT_69 = " expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int semanticID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, ";
  protected final String TEXT_70 = " expression, int semanticID, " + NL + "\t\t\tDouble low, Double high, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticID = semanticID;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticID >= 0) { " + NL + "\t\t\t\treturn semanticID == ";
  protected final String TEXT_71 = ".getVisualID((View)eObject);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && (expression.context() instanceof EClass) && " + NL + "\t\t\t\t((EClass)expression.context()).isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_72 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_73 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_74 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_75 = "\t\t" + NL + "\t\t";
  protected final String TEXT_76 = NL;
  protected final String TEXT_77 = " ";
  protected final String TEXT_78 = " = new ";
  protected final String TEXT_79 = "(3);";
  protected final String TEXT_80 = ".put(\"";
  protected final String TEXT_81 = "\", ";
  protected final String TEXT_82 = "); //$NON-NLS-1$";
  protected final String TEXT_83 = NL + "\t\tregister(new MetricDef(\"";
  protected final String TEXT_84 = "\"," + NL + "\t\t\t";
  protected final String TEXT_85 = "null";
  protected final String TEXT_86 = ".";
  protected final String TEXT_87 = "(\"";
  protected final String TEXT_88 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_89 = ", ";
  protected final String TEXT_90 = ")";
  protected final String TEXT_91 = ".";
  protected final String TEXT_92 = "(\"";
  protected final String TEXT_93 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_94 = ")";
  protected final String TEXT_95 = "new ";
  protected final String TEXT_96 = "(";
  protected final String TEXT_97 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_98 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_99 = " self = (";
  protected final String TEXT_100 = ")context;";
  protected final String TEXT_101 = "\t" + NL + "\t\t";
  protected final String TEXT_102 = " ";
  protected final String TEXT_103 = " = (";
  protected final String TEXT_104 = ")env.get(\"";
  protected final String TEXT_105 = "\"); //$NON-NLS-1$";
  protected final String TEXT_106 = NL + "\t\treturn ";
  protected final String TEXT_107 = ".";
  protected final String TEXT_108 = "(self";
  protected final String TEXT_109 = ", ";
  protected final String TEXT_110 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_111 = NL + "," + NL + "\t\t\t";
  protected final String TEXT_112 = "," + NL + "\t\t\t";
  protected final String TEXT_113 = "new Double(";
  protected final String TEXT_114 = ")";
  protected final String TEXT_115 = "null";
  protected final String TEXT_116 = ",\t\t\t\t\t" + NL + "\t\t\t";
  protected final String TEXT_117 = "new Double(";
  protected final String TEXT_118 = ")";
  protected final String TEXT_119 = "null";
  protected final String TEXT_120 = "," + NL + "\t\t\t";
  protected final String TEXT_121 = "\"";
d142 3
a144 3
  protected final String TEXT_123 = "null";
  protected final String TEXT_124 = "," + NL + "\t\t\t";
  protected final String TEXT_125 = "\"";
d146 24
a169 22
  protected final String TEXT_127 = "null";
  protected final String TEXT_128 = "));";
  protected final String TEXT_129 = "\t\t" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_130 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_131 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_132 = " metrics = (";
  protected final String TEXT_133 = ")context2MetricsMap.get(metric.expression.context());" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_134 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.expression.context(), metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t}\t" + NL;
  protected final String TEXT_135 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class JavaRules {";
  protected final String TEXT_136 = "\t\t";
  protected final String TEXT_137 = NL;
  protected final String TEXT_138 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_139 = " ";
  protected final String TEXT_140 = "(";
  protected final String TEXT_141 = " self";
  protected final String TEXT_142 = ", ";
  protected final String TEXT_143 = " ";
  protected final String TEXT_144 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_145 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_146 = NL + "\t} //JavaRules";
  protected final String TEXT_147 = "\t\t" + NL + "" + NL + "}";
  protected final String TEXT_148 = NL;
d231 2
d234 1
a234 1
    stringBuffer.append(TEXT_9);
d236 1
a236 1
    stringBuffer.append(TEXT_10);
a237 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.util.IWorkbenchPartDescriptor"));
d241 2
d244 1
a244 1
    stringBuffer.append(TEXT_14);
a245 2
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d249 2
d252 1
a252 1
    stringBuffer.append(TEXT_18);
a253 2
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d259 2
d262 1
a262 1
    stringBuffer.append(TEXT_23);
d264 1
a264 1
    stringBuffer.append(TEXT_24);
d266 1
a266 1
    stringBuffer.append(TEXT_25);
d268 1
a268 1
    stringBuffer.append(TEXT_26);
a269 2
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d273 2
d276 1
a276 1
    stringBuffer.append(TEXT_30);
d278 1
a278 1
    stringBuffer.append(TEXT_31);
d280 1
a280 1
    stringBuffer.append(TEXT_32);
d282 1
a282 1
    stringBuffer.append(TEXT_33);
d284 1
a284 1
    stringBuffer.append(TEXT_34);
d286 1
a286 1
    stringBuffer.append(TEXT_35);
d288 1
a288 1
    stringBuffer.append(TEXT_36);
a289 2
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d293 2
a295 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.GC"));
d299 2
a301 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.events.SelectionListener"));
d305 2
d308 1
a308 1
    stringBuffer.append(TEXT_46);
a309 2
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getQualifiedClassName()));
d313 2
d316 1
a316 1
    stringBuffer.append(TEXT_50);
d318 1
a318 1
    stringBuffer.append(TEXT_51);
d320 1
a320 1
    stringBuffer.append(TEXT_52);
d322 1
a322 1
    stringBuffer.append(TEXT_53);
d324 1
a324 1
    stringBuffer.append(TEXT_54);
d326 1
a326 1
    stringBuffer.append(TEXT_55);
d328 1
a328 1
    stringBuffer.append(TEXT_56);
d330 1
a330 1
    stringBuffer.append(TEXT_57);
a331 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d335 1
a335 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
d339 2
a341 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EMFCoreUtil"));
d345 2
d348 1
a348 1
    stringBuffer.append(TEXT_66);
d350 1
a350 1
    stringBuffer.append(TEXT_67);
a351 2
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d355 2
a357 2
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d363 2
d379 1
a379 1
    stringBuffer.append(TEXT_75);
d390 1
a390 1
    stringBuffer.append(TEXT_76);
d392 1
a392 1
    stringBuffer.append(TEXT_77);
d394 1
a394 1
    stringBuffer.append(TEXT_78);
d396 1
a396 1
    stringBuffer.append(TEXT_79);
d405 1
a405 1
    stringBuffer.append(TEXT_80);
d407 1
a407 1
    stringBuffer.append(TEXT_81);
d409 1
a409 1
    stringBuffer.append(TEXT_82);
d417 1
a417 1
    stringBuffer.append(TEXT_83);
d419 1
a419 1
    stringBuffer.append(TEXT_84);
d435 1
a435 1
    stringBuffer.append(TEXT_85);
d444 1
a444 1
    stringBuffer.append(TEXT_86);
d446 1
a446 1
    stringBuffer.append(TEXT_87);
d448 1
a448 1
    stringBuffer.append(TEXT_88);
d450 1
a450 1
    stringBuffer.append(TEXT_89);
d452 1
a452 1
    stringBuffer.append(TEXT_90);
d457 1
a457 1
    stringBuffer.append(TEXT_91);
d459 1
a459 1
    stringBuffer.append(TEXT_92);
d461 1
a461 1
    stringBuffer.append(TEXT_93);
d463 1
a463 1
    stringBuffer.append(TEXT_94);
d471 1
a471 1
    stringBuffer.append(TEXT_95);
d473 1
a473 1
    stringBuffer.append(TEXT_96);
d475 1
a475 1
    stringBuffer.append(TEXT_97);
a476 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d480 2
d488 1
a488 1
    stringBuffer.append(TEXT_101);
d490 1
a490 1
    stringBuffer.append(TEXT_102);
d492 1
a492 1
    stringBuffer.append(TEXT_103);
d494 1
a494 1
    stringBuffer.append(TEXT_104);
d496 1
a496 1
    stringBuffer.append(TEXT_105);
d498 1
a498 1
    stringBuffer.append(TEXT_106);
d502 1
a502 1
    stringBuffer.append(TEXT_107);
d506 1
a506 1
    stringBuffer.append(TEXT_108);
d509 1
a509 1
    stringBuffer.append(TEXT_109);
d512 1
a512 1
    stringBuffer.append(TEXT_110);
d515 1
a515 1
    stringBuffer.append(TEXT_111);
d517 1
a517 1
    stringBuffer.append(TEXT_112);
d519 1
a519 1
    stringBuffer.append(TEXT_113);
d521 1
a521 1
    stringBuffer.append(TEXT_114);
d523 1
a523 1
    stringBuffer.append(TEXT_115);
d525 1
a525 1
    stringBuffer.append(TEXT_116);
d527 1
a527 1
    stringBuffer.append(TEXT_117);
d529 1
a529 1
    stringBuffer.append(TEXT_118);
d531 1
a531 1
    stringBuffer.append(TEXT_119);
d533 1
a533 1
    stringBuffer.append(TEXT_120);
d535 1
a535 1
    stringBuffer.append(TEXT_121);
d537 1
a537 1
    stringBuffer.append(TEXT_122);
d539 1
a539 1
    stringBuffer.append(TEXT_123);
d541 1
a541 1
    stringBuffer.append(TEXT_124);
d543 1
a543 1
    stringBuffer.append(TEXT_125);
d545 1
a545 1
    stringBuffer.append(TEXT_126);
d547 1
a547 1
    stringBuffer.append(TEXT_127);
d549 1
a549 1
    stringBuffer.append(TEXT_128);
d553 1
a553 1
    stringBuffer.append(TEXT_129);
d555 1
a555 1
    stringBuffer.append(TEXT_130);
d557 3
a559 1
    stringBuffer.append(TEXT_131);
d561 1
a561 1
    stringBuffer.append(TEXT_132);
d563 1
a563 1
    stringBuffer.append(TEXT_133);
d565 1
a565 1
    stringBuffer.append(TEXT_134);
d569 1
a569 1
    stringBuffer.append(TEXT_135);
d578 2
a579 2
    stringBuffer.append(TEXT_136);
    stringBuffer.append(TEXT_137);
d599 1
a599 1
    stringBuffer.append(TEXT_138);
d601 1
a601 1
    stringBuffer.append(TEXT_139);
d603 1
a603 1
    stringBuffer.append(TEXT_140);
d605 1
a605 1
    stringBuffer.append(TEXT_141);
d613 1
a613 1
    stringBuffer.append(TEXT_142);
d615 1
a615 1
    stringBuffer.append(TEXT_143);
d619 1
a619 1
    stringBuffer.append(TEXT_144);
d621 1
a621 1
    stringBuffer.append(TEXT_145);
d628 1
a628 1
    stringBuffer.append(TEXT_146);
d632 1
a632 1
    stringBuffer.append(TEXT_147);
d634 1
a634 1
    stringBuffer.append(TEXT_148);
@


1.11
log
@Correcting the order of 'high', 'low' arguments in MetricDef constructor
@
text
@d463 1
a463 1
		String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ?((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
d482 1
a482 1
			String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
d583 1
a583 1
	String evalCtxQualifiedName = (__genExprContext instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprContext).getQualifiedInterfaceName() : __genExprContext.getEcoreClassifier().getInstanceClassName();
a588 2
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) 
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
d590 1
a590 1
		__exprResultTypeQualifiedName = ((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d604 1
a604 1
		String qualifiedTypeName = (nextVariableType instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) ? ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)nextVariableType).getQualifiedInterfaceName() : nextVariableType.getEcoreClassifier().getInstanceClassName();
@


1.10
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d89 1
a89 1
  protected final String TEXT_70 = " expression, int semanticID, " + NL + "\t\t\tDouble high, Double low, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.expression = expression;\t\t\t" + NL + "\t\t\tthis.semanticID = semanticID;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticID >= 0) { " + NL + "\t\t\t\treturn semanticID == ";
@


1.9
log
@#136672 Adapt Element Initializers, Link Constraints templates
@
text
@d512 1
a512 1
    stringBuffer.append(nextMetric.getTarget() instanceof GenDiagramElementTarget ? ((GenDiagramElementTarget)nextMetric.getTarget()).getElement().getVisualID() : -1);
@


1.8
log
@#136672 Adapt gmf.codegen templates using expressions to use common expression accessor
@
text
@d107 1
a107 1
  protected final String TEXT_88 = "\", ";
d112 1
a112 1
  protected final String TEXT_93 = "\", ";
d437 1
a437 2
		if(!__exprEnvVariables.isEmpty()) {	
		
d450 1
a450 3

		} else { 
		
a460 1

d495 2
d499 2
d586 7
a592 2
	if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClass) __genExprResultTypeObj = ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getQualifiedInterfaceName();
	else if(!(__genExprResultTypeObj instanceof String)) ((org.eclipse.emf.codegen.ecore.genmodel.GenClass)__genExprResultTypeObj).getEcoreClassifier().getInstanceClassName();
d596 1
a596 1
    stringBuffer.append(__genExprResultType);
d600 1
a600 1
    stringBuffer.append(evalCtxQualifiedName);
d610 1
a610 1
    stringBuffer.append(qualifiedTypeName);
@


1.7
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d87 81
a167 33
  protected final String TEXT_68 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal org.eclipse.emf.ocl.query.Query expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal EClass ctxClass;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int semanticID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, String body, EClass context, int semanticID, " + NL + "\t\t\tDouble high, Double low, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.ctxClass = context;" + NL + "\t\t\tthis.expression = org.eclipse.emf.ocl.query.QueryFactory.eINSTANCE.createQuery(body, context);\t\t\t" + NL + "\t\t\tthis.semanticID = semanticID;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticID >= 0) { " + NL + "\t\t\t\treturn semanticID == ";
  protected final String TEXT_69 = ".getVisualID((View)eObject);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && ctxClass.isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_70 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_71 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_72 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_73 = "\t\t" + NL + "\t\tregister(new MetricDef(\"";
  protected final String TEXT_74 = "\", \"";
  protected final String TEXT_75 = "\", " + NL + "\t\t\t\t\t";
  protected final String TEXT_76 = ", ";
  protected final String TEXT_77 = "," + NL + "\t\t\t\t\t";
  protected final String TEXT_78 = "new Double(";
  protected final String TEXT_79 = ")";
  protected final String TEXT_80 = "null";
  protected final String TEXT_81 = ",\t\t\t\t\t" + NL + "\t\t\t\t\t";
  protected final String TEXT_82 = "new Double(";
  protected final String TEXT_83 = ")";
  protected final String TEXT_84 = "null";
  protected final String TEXT_85 = "," + NL + "\t\t\t\t\t";
  protected final String TEXT_86 = "\"";
  protected final String TEXT_87 = "\"";
  protected final String TEXT_88 = "null";
  protected final String TEXT_89 = "," + NL + "\t\t\t\t\t";
  protected final String TEXT_90 = "\"";
  protected final String TEXT_91 = "\"";
  protected final String TEXT_92 = "null";
  protected final String TEXT_93 = "));";
  protected final String TEXT_94 = "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_95 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_96 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_97 = " metrics = (";
  protected final String TEXT_98 = ")context2MetricsMap.get(metric.ctxClass);" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_99 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.ctxClass, metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t}\t" + NL + "" + NL + "}";
  protected final String TEXT_100 = NL;
d175 1
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d357 4
d362 2
a363 1
for(Iterator it = genDiagram.getEditorGen().getMetrics().getMetrics().iterator(); it.hasNext();) {
d365 9
a373 5
	GenClassifier ctx = nextMetric.getTarget() != null ? nextMetric.getTarget().getContext() : null;
	if(ctx == null) continue;	
	String ctxAccessor = ctx.getGenPackage().getQualifiedPackageInterfaceName() + ".eINSTANCE.get" + ctx.getClassifierAccessorName() + "()";
	String body = nextMetric.getRule() != null ? nextMetric.getRule().getBody() : null;
	int visualID = nextMetric.getTarget() instanceof GenDiagramElementTarget ? ((GenDiagramElementTarget)nextMetric.getTarget()).getElement().getVisualID() : -1;	
a374 4
    stringBuffer.append(TEXT_73);
    stringBuffer.append(nextMetric.getKey());
    stringBuffer.append(TEXT_74);
    stringBuffer.append(body);
d376 10
a385 1
    stringBuffer.append(ctxAccessor);
d387 1
a387 1
    stringBuffer.append(visualID);
d389 125
d515 1
a515 1
    stringBuffer.append(TEXT_78);
d517 1
a517 1
    stringBuffer.append(TEXT_79);
d519 1
a519 1
    stringBuffer.append(TEXT_80);
d521 1
a521 1
    stringBuffer.append(TEXT_81);
d523 1
a523 1
    stringBuffer.append(TEXT_82);
d525 1
a525 1
    stringBuffer.append(TEXT_83);
d527 1
a527 1
    stringBuffer.append(TEXT_84);
d529 1
a529 1
    stringBuffer.append(TEXT_85);
d531 1
a531 1
    stringBuffer.append(TEXT_86);
d533 1
a533 1
    stringBuffer.append(TEXT_87);
d535 1
a535 1
    stringBuffer.append(TEXT_88);
d537 1
a537 1
    stringBuffer.append(TEXT_89);
d539 1
a539 1
    stringBuffer.append(TEXT_90);
d541 1
a541 1
    stringBuffer.append(TEXT_91);
d543 1
a543 1
    stringBuffer.append(TEXT_92);
d545 1
a545 1
    stringBuffer.append(TEXT_93);
d549 1
a549 1
    stringBuffer.append(TEXT_94);
d551 1
a551 1
    stringBuffer.append(TEXT_95);
d553 1
a553 1
    stringBuffer.append(TEXT_96);
d555 1
a555 1
    stringBuffer.append(TEXT_97);
d557 1
a557 1
    stringBuffer.append(TEXT_98);
d559 65
a623 1
    stringBuffer.append(TEXT_99);
d625 1
a625 1
    stringBuffer.append(TEXT_100);
@


1.6
log
@using M6 to generate code.
@
text
@d84 36
a119 38
  protected final String TEXT_65 = ".getQualifiedName(viewTarget.getElement(), true));" + NL + "\t\t\t\t\timageTarget = viewTarget.getElement().eClass();" + NL + "\t\t\t\t}" + NL + "\t\t\t\tint visualID = getVisualID(viewTarget);" + NL + "\t\t\t\tnotationQNameBuf.append('[').append(visualID < 0 ? Integer.toString(System.identityHashCode(viewTarget)) : Integer.toString(visualID)).append(']');\t\t\t\t" + NL + "" + NL + "\t\t\t\tthis.targetElementQName = notationQNameBuf.toString();" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthis.targetElementQName = ";
  protected final String TEXT_66 = ".getQualifiedName(target, true);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\tthis.elementImage = ";
  protected final String TEXT_67 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal org.eclipse.emf.ocl.query.Query expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal EClass ctxClass;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int semanticID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, String body, EClass context, int semanticID, " + NL + "\t\t\tDouble high, Double low, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.ctxClass = context;" + NL + "\t\t\tthis.expression = org.eclipse.emf.ocl.query.QueryFactory.eINSTANCE.createQuery(body, context);\t\t\t" + NL + "\t\t\tthis.semanticID = semanticID;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticID >= 0) { " + NL + "\t\t\t\treturn semanticID == getVisualID((View)eObject);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && ctxClass.isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tpublic static ";
  protected final String TEXT_68 = "/*MetricDef*/ getMetricsForTarget(EClass target) {" + NL + "\t\tif(context2MetricsMap == null) {" + NL + "\t\t\tinitializeRegistry();\t\t\t" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_69 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_70 = " getMetrics() {" + NL + "\t\tif(metricsRegistry == null) {" + NL + "\t\t\tinitializeRegistry();" + NL + "\t\t}" + NL + "\t\treturn metricsRegistry;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static void initializeRegistry() {" + NL + "\t\tif(context2MetricsMap != null) return;";
  protected final String TEXT_71 = "\t\t" + NL + "\t\tregister(new MetricDef(\"";
  protected final String TEXT_72 = "\", \"";
  protected final String TEXT_73 = "\", " + NL + "\t\t\t\t\t";
  protected final String TEXT_74 = ", ";
  protected final String TEXT_75 = "," + NL + "\t\t\t\t\t";
  protected final String TEXT_76 = "new Double(";
  protected final String TEXT_77 = ")";
  protected final String TEXT_78 = "null";
  protected final String TEXT_79 = ",\t\t\t\t\t" + NL + "\t\t\t\t\t";
  protected final String TEXT_80 = "new Double(";
  protected final String TEXT_81 = ")";
  protected final String TEXT_82 = "null";
  protected final String TEXT_83 = "," + NL + "\t\t\t\t\t";
  protected final String TEXT_84 = "\"";
  protected final String TEXT_85 = "\"";
  protected final String TEXT_86 = "null";
  protected final String TEXT_87 = "," + NL + "\t\t\t\t\t";
  protected final String TEXT_88 = "\"";
  protected final String TEXT_89 = "\"";
  protected final String TEXT_90 = "null";
  protected final String TEXT_91 = "));";
  protected final String TEXT_92 = "\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static void register(MetricDef metric) {" + NL + "\t\tif (context2MetricsMap == null) {" + NL + "\t\t\tcontext2MetricsMap = new ";
  protected final String TEXT_93 = "();" + NL + "\t\t\tmetricsRegistry = new ";
  protected final String TEXT_94 = "();" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_95 = " metrics = (";
  protected final String TEXT_96 = ")context2MetricsMap.get(metric.ctxClass);" + NL + "\t\tif(metrics == null) {" + NL + "\t\t\tmetrics = new ";
  protected final String TEXT_97 = "();" + NL + "\t\t\tcontext2MetricsMap.put(metric.ctxClass, metrics);" + NL + "\t\t}" + NL + "\t\tmetricsRegistry.add(metric);" + NL + "\t\tmetrics.add(metric);" + NL + "\t}\t" + NL + "\t";
  protected final String TEXT_98 = NL;
  protected final String TEXT_99 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_100 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_101 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "}";
  protected final String TEXT_102 = NL;
d294 2
d297 1
a297 1
    stringBuffer.append(TEXT_66);
a298 2
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d304 4
d317 1
a317 1
    stringBuffer.append(TEXT_71);
d319 1
a319 1
    stringBuffer.append(TEXT_72);
d321 1
a321 1
    stringBuffer.append(TEXT_73);
d323 1
a323 1
    stringBuffer.append(TEXT_74);
d325 1
a325 1
    stringBuffer.append(TEXT_75);
d327 1
a327 1
    stringBuffer.append(TEXT_76);
d329 1
a329 1
    stringBuffer.append(TEXT_77);
d331 1
a331 1
    stringBuffer.append(TEXT_78);
d333 1
a333 1
    stringBuffer.append(TEXT_79);
d335 1
a335 1
    stringBuffer.append(TEXT_80);
d337 1
a337 1
    stringBuffer.append(TEXT_81);
d339 1
a339 1
    stringBuffer.append(TEXT_82);
d341 1
a341 1
    stringBuffer.append(TEXT_83);
d343 1
a343 1
    stringBuffer.append(TEXT_84);
d345 1
a345 1
    stringBuffer.append(TEXT_85);
d347 1
a347 1
    stringBuffer.append(TEXT_86);
d349 1
a349 1
    stringBuffer.append(TEXT_87);
d351 1
a351 1
    stringBuffer.append(TEXT_88);
d353 1
a353 1
    stringBuffer.append(TEXT_89);
d355 1
a355 1
    stringBuffer.append(TEXT_90);
d357 1
a357 1
    stringBuffer.append(TEXT_91);
d361 1
a361 1
    stringBuffer.append(TEXT_92);
d363 1
a363 1
    stringBuffer.append(TEXT_93);
d365 1
a365 1
    stringBuffer.append(TEXT_94);
d367 1
a367 1
    stringBuffer.append(TEXT_95);
d369 1
a369 1
    stringBuffer.append(TEXT_96);
a370 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(TEXT_98);
d372 1
a372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a373 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_101);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_102);
@


1.5
log
@restore generators
@
text
@d125 1
a125 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@#134095 do not store compiled templates in cvs
@
text
@d125 1
a125 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.3
log
@Switching to eclipse M6.
@
text
@@


1.2
log
@#134085 Implement metrics transformation from gmfmap to gmfgen model
@
text
@d125 1
a125 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.1
log
@[rdvorak] #133369 Generate code for metric evaluation and result visualization
@
text
@d86 1
a86 1
  protected final String TEXT_67 = ".getImage(imageTarget);\t\t\t" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tMetric getMetricByKey(String key) {" + NL + "\t\t\tfor (int i = 0; i < metrics.length; i++) {" + NL + "\t\t\t\tif(metrics[i].def.key.equals(key)) {" + NL + "\t\t\t\t\treturn metrics[i]; " + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static class Metric implements Comparable {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal MetricDef def;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Number value;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String displayValue;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetric(MetricDef def, EObject target) {" + NL + "\t\t\tthis.def = def;" + NL + "\t\t\tvalue = def.calcMetric(target);" + NL + "\t\t\tthis.displayValue = (value != null) ? java.text.NumberFormat.getInstance().format(value) : \"null\"; //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic int compareTo(Object other) {" + NL + "\t\t\tMetric otherMetric = (Metric)other;" + NL + "\t\t\tif(value != null && otherMetric.value != null) {" + NL + "\t\t\t\treturn (value.longValue() < otherMetric.value.longValue()) ? " + NL + "\t\t\t\t\t\t-1 : (value.longValue() == otherMetric.value.longValue() ? 0 : 1);" + NL + "\t\t\t}" + NL + "\t\t\treturn (value == null && otherMetric.value == null) ? " + NL + "\t\t\t\t\t0 : (value == null) ? -1 : 1;  " + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class MetricDef {" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t" + NL + "\t\tfinal Double lowLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal Double highLimit;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String key;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal org.eclipse.emf.ocl.query.Query expression;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal EClass ctxClass;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal int semanticID;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String name;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tfinal String description;" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tMetricDef(String key, String body, EClass context, int semanticID, " + NL + "\t\t\tDouble high, Double low, String name, String description) {" + NL + "\t\t\tthis.key = key;" + NL + "\t\t\tthis.ctxClass = context;" + NL + "\t\t\tthis.expression = org.eclipse.emf.ocl.query.QueryFactory.eINSTANCE.createQuery(body, context);\t\t\t" + NL + "\t\t\tthis.semanticID = semanticID;\t\t\t" + NL + "\t\t\tthis.lowLimit = low;" + NL + "\t\t\tthis.highLimit = high;" + NL + "\t\t\tthis.name = name;" + NL + "\t\t\tthis.description = description;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tNumber calcMetric(Object contextInstance) {" + NL + "\t\t\tObject val = expression.evaluate(contextInstance);" + NL + "\t\t\treturn (val instanceof Number) ? (Number)val : null;" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tboolean appliesTo(EObject eObject) {" + NL + "\t\t\tif(eObject instanceof View && semanticID >= 0) { " + NL + "\t\t\t\treturn semanticID == getVisualID((View)eObject);\t\t\t\t" + NL + "\t\t\t}" + NL + "\t\t\treturn eObject != null && ctxClass.isSuperTypeOf(eObject.eClass());" + NL + "\t\t}" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tString getToolTipText() {" + NL + "\t\t\tStringBuffer buf = new StringBuffer();" + NL + "\t\t\tif(name != null) buf.append(name);" + NL + "\t\t\tif(description != null) buf.append('\\n').append(description).append('\\n');" + NL + "\t\t\tif(lowLimit != null) buf.append(\"low:\").append(lowLimit);" + NL + "\t\t\tif(highLimit != null) buf.append(\" high:\").append(highLimit);" + NL + "\t\t\treturn buf.toString();" + NL + "\t\t}\t\t" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tstatic ";
d88 1
a88 1
  protected final String TEXT_69 = ")context2MetricsMap.get(target);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tstatic ";
d309 3
a311 2
	GenClassifier ctx = nextMetric.getTarget() != null ? nextMetric.getTarget().getContext() : null;	
	String ctxAccessor = ctx != null ? ctx.getGenPackage().getQualifiedPackageInterfaceName() + ".eINSTANCE.get" + ctx.getClassifierAccessorName() + "()" : null;
@

