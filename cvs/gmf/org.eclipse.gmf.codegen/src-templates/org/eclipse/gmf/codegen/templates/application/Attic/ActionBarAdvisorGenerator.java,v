head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061013-1330:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.12.18.18.20.51;	author dstadnik;	state dead;
branches;
next	1.5;
commitid	7d774586dbfa4567;

1.5
date	2006.11.27.17.28.37;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	3c73456b20434567;

1.4
date	2006.11.21.12.48.18;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	13004562f58f4567;

1.3
date	2006.10.09.16.07.49;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.04.16.43.41;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.03.08.05.55;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.6
log
@rewrite application templates in xpand; simplify genmodel
@
text
@package org.eclipse.gmf.codegen.templates.application;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ActionBarAdvisorGenerator
{
  protected static String nl;
  public static synchronized ActionBarAdvisorGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ActionBarAdvisorGenerator result = new ActionBarAdvisorGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.io.File;" + NL + "import java.util.Iterator;" + NL + "" + NL + "import org.eclipse.emf.common.ui.URIEditorInput;" + NL + "import org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.edit.ui.action.LoadResourceAction;" + NL + "import org.eclipse.jface.action.GroupMarker;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.action.IMenuManager;" + NL + "import org.eclipse.jface.action.MenuManager;" + NL + "import org.eclipse.jface.action.Separator;" + NL + "import org.eclipse.jface.dialogs.Dialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.StructuredSelection;" + NL + "import org.eclipse.jface.wizard.WizardDialog;" + NL + "import org.eclipse.osgi.util.NLS;" + NL + "import org.eclipse.swt.SWT;" + NL + "import org.eclipse.swt.widgets.FileDialog;" + NL + "import org.eclipse.ui.IEditorDescriptor;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.IWorkbenchActionConstants;" + NL + "import org.eclipse.ui.IWorkbenchPage;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.actions.ActionFactory;" + NL + "import org.eclipse.ui.actions.ContributionItemFactory;" + NL + "import org.eclipse.ui.application.ActionBarAdvisor;" + NL + "import org.eclipse.ui.application.IActionBarConfigurer;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ActionBarAdvisor {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(IActionBarConfigurer configurer) {" + NL + "\t\tsuper(configurer);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void fillMenuBar(IMenuManager menuBar) {" + NL + "\t\tIWorkbenchWindow window = getActionBarConfigurer().getWindowConfigurer().getWindow();" + NL + "\t\tmenuBar.add(createFileMenu(window));" + NL + "\t\tmenuBar.add(createEditMenu(window));" + NL + "\t\tmenuBar.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenuBar.add(createWindowMenu(window));" + NL + "\t\tmenuBar.add(createHelpMenu(window));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createFileMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&File\", IWorkbenchActionConstants.M_FILE);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_START));" + NL + "\t\tIMenuManager newMenu = new MenuManager(\"&New\", \"new\"); //$NON-NLS-2$" + NL + "\t\tnewMenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(newMenu);" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CLOSE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CLOSE_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE_AS.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.QUIT.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_END));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createEditMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Edit\", IWorkbenchActionConstants.M_EDIT);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.EDIT_START));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.UNDO.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.REDO.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.UNDO_EXT));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CUT.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.COPY.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.PASTE.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.CUT_EXT));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.DELETE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SELECT_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.ADD_EXT));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.EDIT_END));" + NL + "\t\tmenu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createWindowMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Window\", IWorkbenchActionConstants.M_WINDOW);" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.OPEN_NEW_WINDOW.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(ContributionItemFactory.OPEN_WINDOWS.create(window));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createHelpMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Help\", IWorkbenchActionConstants.M_HELP);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.HELP_START));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.HELP_END));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addToMenuAndRegister(IMenuManager menuManager, IAction action) {" + NL + "\t\tmenuManager.add(action);" + NL + "\t\tregister(action);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean openEditor(IWorkbench workbench, URI fileURI) {" + NL + "\t\tIWorkbenchWindow workbenchWindow = workbench.getActiveWorkbenchWindow();" + NL + "\t\tIWorkbenchPage page = workbenchWindow.getActivePage();" + NL + "\t\tIEditorDescriptor editorDescriptor = workbench.getEditorRegistry().getDefaultEditor(fileURI.toFileString());" + NL + "\t\tif (editorDescriptor == null) {" + NL + "\t\t\tMessageDialog.openError(workbenchWindow.getShell(), \"Error\", NLS.bind(\"There is no editor registered for the file ''{0}''\", fileURI.toFileString()));" + NL + "\t\t\treturn false;" + NL + "\t\t} else {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tpage.openEditor(new URIEditorInput(fileURI), editorDescriptor.getId());" + NL + "\t\t\t} catch (PartInitException exception) {" + NL + "\t\t\t\tMessageDialog.openError(workbenchWindow.getShell(), \"Open Editor\", exception.getMessage());" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NewDiagramAction extends WorkbenchWindowActionDelegate {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run(IAction action) {" + NL + "\t\t\t";
  protected final String TEXT_8 = " wizard =" + NL + "\t\t\t\tnew ";
  protected final String TEXT_9 = "();" + NL + "\t\t\twizard.init(getWindow().getWorkbench(), StructuredSelection.EMPTY);" + NL + "\t\t\tWizardDialog wizardDialog = new WizardDialog(getWindow().getShell(), wizard);" + NL + "\t\t\twizardDialog.open();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class OpenURIAction extends WorkbenchWindowActionDelegate {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run(IAction action) {" + NL + "\t\t\tLoadResourceAction.LoadResourceDialog loadResourceDialog = new LoadResourceAction.LoadResourceDialog(getWindow().getShell());" + NL + "\t\t\tif (Dialog.OK == loadResourceDialog.open()) {" + NL + "\t\t\t\tfor (Iterator i = loadResourceDialog.getURIs().iterator(); i.hasNext();) {" + NL + "\t\t\t\t\topenEditor(getWindow().getWorkbench(), (URI) i.next());" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class OpenAction extends WorkbenchWindowActionDelegate {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run(IAction action) {" + NL + "\t\t\tFileDialog fileDialog = new FileDialog(getWindow().getShell(), SWT.OPEN);" + NL + "\t\t\tfileDialog.open();" + NL + "\t\t\tif (fileDialog.getFileName() != null && fileDialog.getFileName().length() > 0) {" + NL + "\t\t\t\topenEditor(getWindow().getWorkbench(), URI.createFileURI(fileDialog.getFilterPath() + File.separator + fileDialog.getFileName()));" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class AboutAction extends WorkbenchWindowActionDelegate {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run(IAction action) {" + NL + "\t\t\tMessageDialog.openInformation(getWindow().getShell(), \"About\", \"";
  protected final String TEXT_10 = " Diagram Editor\");" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenApplication application = (GenApplication) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    {
	GenDiagram genDiagram = application.getEditorGen().getDiagram();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(application.getEditorGen().getDiagram().getCreationWizardQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(application.getEditorGen().getDiagram().getCreationWizardQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(application.getEditorGen().getModelID());
    stringBuffer.append(TEXT_10);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_11);
    return stringBuffer.toString();
  }
}
@


1.5
log
@generate common rcp actions
@
text
@@


1.4
log
@#114200 add new diagram action
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.common.ui.action.WorkbenchWindowActionDelegate;" + NL + "import org.eclipse.jface.action.GroupMarker;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.action.IMenuManager;" + NL + "import org.eclipse.jface.action.MenuManager;" + NL + "import org.eclipse.jface.action.Separator;" + NL + "import org.eclipse.jface.viewers.StructuredSelection;" + NL + "import org.eclipse.jface.wizard.WizardDialog;" + NL + "import org.eclipse.ui.IWorkbenchActionConstants;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.actions.ActionFactory;" + NL + "import org.eclipse.ui.actions.ContributionItemFactory;" + NL + "import org.eclipse.ui.application.ActionBarAdvisor;" + NL + "import org.eclipse.ui.application.IActionBarConfigurer;";
d24 1
a24 1
  protected final String TEXT_7 = "(IActionBarConfigurer configurer) {" + NL + "\t\tsuper(configurer);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void fillMenuBar(IMenuManager menuBar) {" + NL + "\t\tIWorkbenchWindow window = getActionBarConfigurer().getWindowConfigurer().getWindow();" + NL + "\t\tmenuBar.add(createFileMenu(window));" + NL + "\t\tmenuBar.add(createEditMenu(window));" + NL + "\t\tmenuBar.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenuBar.add(createWindowMenu(window));" + NL + "\t\tmenuBar.add(createHelpMenu(window));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createFileMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&File\", IWorkbenchActionConstants.M_FILE);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_START));" + NL + "\t\tIMenuManager newMenu = new MenuManager(\"&New\", \"new\"); //$NON-NLS-2$" + NL + "\t\tnewMenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(newMenu);" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CLOSE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CLOSE_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE_AS.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.QUIT.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_END));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createEditMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Edit\", IWorkbenchActionConstants.M_EDIT);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.EDIT_START));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.UNDO.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.REDO.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.UNDO_EXT));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CUT.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.COPY.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.PASTE.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.CUT_EXT));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.DELETE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SELECT_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.ADD_EXT));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.EDIT_END));" + NL + "\t\tmenu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createWindowMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Window\", IWorkbenchActionConstants.M_WINDOW);" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.OPEN_NEW_WINDOW.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(ContributionItemFactory.OPEN_WINDOWS.create(window));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createHelpMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Help\", IWorkbenchActionConstants.M_HELP);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.HELP_START));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.HELP_END));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addToMenuAndRegister(IMenuManager menuManager, IAction action) {" + NL + "\t\tmenuManager.add(action);" + NL + "\t\tregister(action);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static class NewDiagramAction extends WorkbenchWindowActionDelegate {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void run(IAction action) {" + NL + "\t\t\t";
d26 3
a28 2
  protected final String TEXT_9 = "();" + NL + "\t\t\twizard.init(getWindow().getWorkbench(), StructuredSelection.EMPTY);" + NL + "\t\t\tWizardDialog wizardDialog = new WizardDialog(getWindow().getShell(), wizard);" + NL + "\t\t\twizardDialog.open();" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d62 2
d65 1
a65 1
    stringBuffer.append(TEXT_10);
@


1.3
log
@use generic getCompilationUnitName() call
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.jface.action.GroupMarker;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.action.IMenuManager;" + NL + "import org.eclipse.jface.action.MenuManager;" + NL + "import org.eclipse.jface.action.Separator;" + NL + "import org.eclipse.ui.IWorkbenchActionConstants;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.actions.ActionFactory;" + NL + "import org.eclipse.ui.actions.ContributionItemFactory;" + NL + "import org.eclipse.ui.application.ActionBarAdvisor;" + NL + "import org.eclipse.ui.application.IActionBarConfigurer;";
d24 4
a27 2
  protected final String TEXT_7 = "(IActionBarConfigurer configurer) {" + NL + "\t\tsuper(configurer);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void fillMenuBar(IMenuManager menuBar) {" + NL + "\t\tIWorkbenchWindow window = getActionBarConfigurer().getWindowConfigurer().getWindow();" + NL + "\t\tmenuBar.add(createFileMenu(window));" + NL + "\t\tmenuBar.add(createEditMenu(window));" + NL + "\t\tmenuBar.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenuBar.add(createWindowMenu(window));" + NL + "\t\tmenuBar.add(createHelpMenu(window));" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createFileMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&File\", IWorkbenchActionConstants.M_FILE);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_START));" + NL + "\t\tIMenuManager newMenu = new MenuManager(\"&New\", \"new\"); //$NON-NLS-2$" + NL + "\t\tnewMenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(newMenu);" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CLOSE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CLOSE_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE_AS.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SAVE_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.QUIT.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.FILE_END));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createEditMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Edit\", IWorkbenchActionConstants.M_EDIT);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.EDIT_START));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.UNDO.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.REDO.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.UNDO_EXT));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.CUT.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.COPY.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.PASTE.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.CUT_EXT));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.DELETE.create(window));" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.SELECT_ALL.create(window));" + NL + "\t\tmenu.add(new Separator());" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.ADD_EXT));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.EDIT_END));" + NL + "\t\tmenu.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createWindowMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Window\", IWorkbenchActionConstants.M_WINDOW);" + NL + "\t\taddToMenuAndRegister(menu, ActionFactory.OPEN_NEW_WINDOW.create(window));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\tmenu.add(ContributionItemFactory.OPEN_WINDOWS.create(window));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IMenuManager createHelpMenu(IWorkbenchWindow window) {" + NL + "\t\tIMenuManager menu = new MenuManager(\"&Help\", IWorkbenchActionConstants.M_HELP);" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.HELP_START));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.HELP_END));" + NL + "\t\tmenu.add(new GroupMarker(IWorkbenchActionConstants.MB_ADDITIONS));" + NL + "\t\treturn menu;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void addToMenuAndRegister(IMenuManager menuManager, IAction action) {" + NL + "\t\tmenuManager.add(action);" + NL + "\t\tregister(action);" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d57 4
d62 1
a62 1
    stringBuffer.append(TEXT_8);
@


1.2
log
@#114200 provide common menu items
@
text
@d51 1
a51 1
    stringBuffer.append(application.getActionBarAdvisorClassName());
d53 1
a53 1
    stringBuffer.append(application.getActionBarAdvisorClassName());
@


1.1
log
@#114200 generate RCP specific classes
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.jface.action.IMenuManager;" + NL + "import org.eclipse.jface.action.MenuManager;" + NL + "import org.eclipse.ui.IWorkbenchActionConstants;" + NL + "import org.eclipse.ui.IWorkbenchWindow;" + NL + "import org.eclipse.ui.actions.ActionFactory;" + NL + "import org.eclipse.ui.actions.ActionFactory.IWorkbenchAction;" + NL + "import org.eclipse.ui.application.ActionBarAdvisor;" + NL + "import org.eclipse.ui.application.IActionBarConfigurer;";
d23 2
a24 2
  protected final String TEXT_6 = " extends ActionBarAdvisor {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchAction quitAction;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "(IActionBarConfigurer configurer) {" + NL + "\t\tsuper(configurer);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void makeActions(final IWorkbenchWindow window) {" + NL + "\t\tquitAction = ActionFactory.QUIT.create(window);" + NL + "\t\tregister(quitAction);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void fillMenuBar(IMenuManager menuBar) {" + NL + "\t\tMenuManager fileMenu = new MenuManager(\"&File\", IWorkbenchActionConstants.M_FILE);" + NL + "\t\tmenuBar.add(fileMenu);" + NL + "\t\tfileMenu.add(quitAction);" + NL + "\t}" + NL + "}";
@

