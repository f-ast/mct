head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2005.10.24.14.58.46;	author atikhomirov;	state dead;
branches;
next	1.5;

1.5
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.18.10.21.18;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.14.17.27.16;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import java.util.*;
import org.eclipse.gmf.codegen.util.ImportUtil;

public class InitDiagramFileActionGen
{
  protected static String nl;
  public static synchronized InitDiagramFileActionGen create(String lineSeparator)
  {
    nl = lineSeparator;
    InitDiagramFileActionGen result = new InitDiagramFileActionGen();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";";
  protected final String TEXT_3 = NL + "import java.io.IOException;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    private static final String FILE_EXT = \"";
  protected final String TEXT_6 = "\";" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkWithClassVID2EObject = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT).lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\tex.printStackTrace();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = " resourceSet = new ";
  protected final String TEXT_9 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_10 = ".createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_11 = NL + "\t\tResource modelResource = ResourceUtil.load(mySelection.getLocation().toOSString());" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_12 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_13 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_14 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_15 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID == -1) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tmyLinkWithClassVID2EObject.clear();" + NL + "\t\tmyEObject2NodeMap.clear();";
  protected final String TEXT_16 = NL + "\t\tmyLinkWithClassVID2EObject.put(new Integer(";
  protected final String TEXT_17 = "), new LinkedList());";
  protected final String TEXT_18 = NL + "\t\tDiagram diagram = DiagramUtil.createDiagram(diagramModel, \"";
  protected final String TEXT_19 = "\", ";
  protected final String TEXT_20 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreateDiagramChildren(diagram, diagramModel);" + NL + "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createDiagramChildren(Diagram diagram, EObject diagramObject) {" + NL + "\t\tfor (Iterator it = diagramObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tstoreLinkReferenceOnly(nextChild);" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreLinkWithClass(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(diagram, nextChild, null, ";
  protected final String TEXT_22 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t\tswitch (nodeVID) {";
  protected final String TEXT_23 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_24 = ":" + NL + "\t\t\t\tcreate";
  protected final String TEXT_25 = "Children(nextNode, nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_26 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_27 = "\t\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_28 = "Children(Node node, EObject nodeObject) {" + NL + "\t\tfor (Iterator it = nodeObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tstoreLinkReferenceOnly(nextChild);" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getChildNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreLinkWithClass(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tNode container;" + NL + "\t\t\tswitch (nodeVID) {";
  protected final String TEXT_30 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_31 = ":" + NL + "\t\t\t\tcontainer = getCompartment(node, \"";
  protected final String TEXT_32 = "\");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_33 = NL + "\t\t\tdefault:" + NL + "\t\t\t\tcontainer = node;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(container, nextChild, null, ";
  protected final String TEXT_34 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_35 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Node getCompartment(Node node, String name) {" + NL + "\t\tfor (Iterator it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tView nextView = (View) it.next();" + NL + "\t\t\tif (nextView instanceof Node && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (Node) nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn node;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeLinkWithClass(EObject link) {" + NL + "\t\tint linkVID = ";
  protected final String TEXT_36 = ".INSTANCE.getLinkWithClassVisualID(link);" + NL + "\t\tif (linkVID == -1) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(linkVID))).add(link);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinkReferenceOnly(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tfor (Iterator it = containerMetaclass.getEAllStructuralFeatures().iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature nextFeature = (EStructuralFeature) it.next();";
  protected final String TEXT_37 = NL + "\t\t\tif (";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "().equals(nextFeature)) {" + NL + "\t\t\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_40 = "))).add(container);" + NL + "\t\t\t}";
  protected final String TEXT_41 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {" + NL + "\t\tCollection linkElements;";
  protected final String TEXT_42 = NL + "\t\tlinkElements = (Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_43 = "));" + NL + "\t\tfor (Iterator it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_44 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_45 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_46 = NL + "\t\t\tNode srcNode = (Node) myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_47 = ".eINSTANCE.get";
  protected final String TEXT_48 = "();" + NL + "\t\t\tObject structuralFeatureResult = linkElement.eGet(structuralFeature);";
  protected final String TEXT_49 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_50 = NL + "\t\t\tif (structuralFeatureResult instanceof Collection == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator destinations = ((Collection) structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_51 = NL + "\t\t\tNode dstNode = (Node) myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_52 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_53 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\t\t\tEdge edge = (Edge) ViewService.getInstance().createConnectorView(new IAdaptable() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (IElementType.class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_55 = ".";
  protected final String TEXT_56 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ViewUtil.APPEND, ";
  protected final String TEXT_57 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_58 = NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_60 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    
GenDiagram genDiagram = (GenDiagram) argument;
List genNodes = genDiagram.getNodes();
List genLinks = genDiagram.getLinks();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(genDiagram.getEditorPackageName());
    stringBuffer.append(TEXT_2);
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getInitDiagramFileActionClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getDiagramFileExtension());
    stringBuffer.append(TEXT_6);
    if (genDiagram.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_10);
    } else {
    stringBuffer.append(TEXT_11);
    }
    stringBuffer.append(TEXT_12);
    if (genDiagram.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_15);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_16);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_17);
    
}

    stringBuffer.append(TEXT_18);
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_22);
    
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextGenNode = (GenNode) it.next();

    stringBuffer.append(TEXT_23);
    stringBuffer.append(nextGenNode.getVisualID());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(nextGenNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_25);
    
}

    stringBuffer.append(TEXT_26);
    
for (Iterator genNodesIt = genNodes.iterator(); genNodesIt.hasNext();) {
	GenNode nextGenNode = (GenNode) genNodesIt.next();

    stringBuffer.append(TEXT_27);
    stringBuffer.append(nextGenNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_29);
    
	for (Iterator childGenNodesIt = nextGenNode.getChildNodes().iterator(); childGenNodesIt.hasNext();) {
		GenChildNode nextChildGenNode = (GenChildNode) childGenNodesIt.next();

    stringBuffer.append(TEXT_30);
    stringBuffer.append(nextChildGenNode.getVisualID());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(nextChildGenNode.getGroupID());
    stringBuffer.append(TEXT_32);
    
	}

    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    
}

    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_36);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink instanceof GenLinkReferenceOnly) {
		GenFeature genFeature = nextLink.getDomainLinkTargetFeature();

    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(genFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_39);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_40);
    
	}
}

    stringBuffer.append(TEXT_41);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	GenFeature domainLinkTargetGenFeature = nextLink.getDomainLinkTargetFeature();

    stringBuffer.append(TEXT_42);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_43);
    	
	if (nextLink instanceof GenLinkWithClass) {

    stringBuffer.append(TEXT_44);
    
	} else {

    stringBuffer.append(TEXT_45);
    	
	}

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(domainLinkTargetGenFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_48);
    
	if (nextLink instanceof GenLinkWithClass) {

    stringBuffer.append(TEXT_49);
    
	} else {

    stringBuffer.append(TEXT_50);
    	
	}

    stringBuffer.append(TEXT_51);
    
	if (nextLink instanceof GenLinkWithClass) {

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_53);
    
	} else {

    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    	
	}

    stringBuffer.append(TEXT_58);
    
}

    stringBuffer.append(TEXT_59);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_60);
    return stringBuffer.toString();
  }
}
@


1.5
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@@


1.4
log
@[ashatalin] #112776 correct imports for generated ElementTypes class
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.io.IOException;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;" + NL + "import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;";
d25 55
a79 47
  protected final String TEXT_6 = "\";" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkWithClassVID2EObject = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT).lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\tex.printStackTrace();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {" + NL + "\t\tResourceSet resourceSet = new ResourceSetImpl();" + NL + "\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);" + NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());" + NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_7 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID == -1) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tmyLinkWithClassVID2EObject.clear();" + NL + "\t\tmyEObject2NodeMap.clear();";
  protected final String TEXT_8 = NL + "\t\tmyLinkWithClassVID2EObject.put(new Integer(";
  protected final String TEXT_9 = "), new LinkedList());";
  protected final String TEXT_10 = NL + "\t\tDiagram diagram = DiagramUtil.createDiagram(diagramModel, \"";
  protected final String TEXT_11 = "\", ";
  protected final String TEXT_12 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreateDiagramChildren(diagram, diagramModel);" + NL + "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createDiagramChildren(Diagram diagram, EObject diagramObject) {" + NL + "\t\tfor (Iterator it = diagramObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tstoreLinkReferenceOnly(nextChild);" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_13 = ".INSTANCE.getNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreLinkWithClass(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(diagram, nextChild, null, ";
  protected final String TEXT_14 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t\tswitch (nodeVID) {";
  protected final String TEXT_15 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_16 = ":" + NL + "\t\t\t\tcreate";
  protected final String TEXT_17 = "Children(nextNode, nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_18 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_19 = "\t\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_20 = "Children(Node node, EObject nodeObject) {" + NL + "\t\tfor (Iterator it = nodeObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tstoreLinkReferenceOnly(nextChild);" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getChildNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreLinkWithClass(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tNode container;" + NL + "\t\t\tswitch (nodeVID) {";
  protected final String TEXT_22 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_23 = ":" + NL + "\t\t\t\tcontainer = getCompartment(node, \"";
  protected final String TEXT_24 = "\");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_25 = NL + "\t\t\tdefault:" + NL + "\t\t\t\tcontainer = node;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(container, nextChild, null, ";
  protected final String TEXT_26 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_27 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Node getCompartment(Node node, String name) {" + NL + "\t\tfor (Iterator it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tView nextView = (View) it.next();" + NL + "\t\t\tif (nextView instanceof Node && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (Node) nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn node;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeLinkWithClass(EObject link) {" + NL + "\t\tint linkVID = ";
  protected final String TEXT_28 = ".INSTANCE.getLinkWithClassVisualID(link);" + NL + "\t\tif (linkVID == -1) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(linkVID))).add(link);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinkReferenceOnly(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tfor (Iterator it = containerMetaclass.getEAllStructuralFeatures().iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature nextFeature = (EStructuralFeature) it.next();";
  protected final String TEXT_29 = NL + "\t\t\tif (";
  protected final String TEXT_30 = ".eINSTANCE.get";
  protected final String TEXT_31 = "().equals(nextFeature)) {" + NL + "\t\t\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_32 = "))).add(container);" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {" + NL + "\t\tCollection linkElements;";
  protected final String TEXT_34 = NL + "\t\tlinkElements = (Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_35 = "));" + NL + "\t\tfor (Iterator it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_36 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_37 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_38 = NL + "\t\t\tNode srcNode = (Node) myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_39 = ".eINSTANCE.get";
  protected final String TEXT_40 = "();" + NL + "\t\t\tObject structuralFeatureResult = linkElement.eGet(structuralFeature);";
  protected final String TEXT_41 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_42 = NL + "\t\t\tif (structuralFeatureResult instanceof Collection == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator destinations = ((Collection) structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_43 = NL + "\t\t\tNode dstNode = (Node) myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_44 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_45 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_46 = NL + "\t\t\t\t\tEdge edge = (Edge) ViewService.getInstance().createConnectorView(new IAdaptable() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (IElementType.class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_47 = ".";
  protected final String TEXT_48 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ViewUtil.APPEND, ";
  protected final String TEXT_49 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t}";
  protected final String TEXT_51 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_52 = NL;
d100 16
d117 1
a117 1
    stringBuffer.append(TEXT_7);
d122 1
a122 1
    stringBuffer.append(TEXT_8);
d124 1
a124 1
    stringBuffer.append(TEXT_9);
d128 1
a128 1
    stringBuffer.append(TEXT_10);
d130 1
a130 1
    stringBuffer.append(TEXT_11);
d132 1
a132 1
    stringBuffer.append(TEXT_12);
d134 1
a134 1
    stringBuffer.append(TEXT_13);
d136 1
a136 1
    stringBuffer.append(TEXT_14);
d141 1
a141 1
    stringBuffer.append(TEXT_15);
d143 1
a143 1
    stringBuffer.append(TEXT_16);
d145 1
a145 1
    stringBuffer.append(TEXT_17);
d149 1
a149 1
    stringBuffer.append(TEXT_18);
d154 1
a154 1
    stringBuffer.append(TEXT_19);
d156 1
a156 1
    stringBuffer.append(TEXT_20);
d158 1
a158 1
    stringBuffer.append(TEXT_21);
d163 1
a163 1
    stringBuffer.append(TEXT_22);
d165 1
a165 1
    stringBuffer.append(TEXT_23);
d167 1
a167 1
    stringBuffer.append(TEXT_24);
d171 1
a171 1
    stringBuffer.append(TEXT_25);
d173 1
a173 1
    stringBuffer.append(TEXT_26);
d177 1
a177 1
    stringBuffer.append(TEXT_27);
d179 1
a179 1
    stringBuffer.append(TEXT_28);
d186 1
a186 1
    stringBuffer.append(TEXT_29);
d188 1
a188 1
    stringBuffer.append(TEXT_30);
d190 1
a190 1
    stringBuffer.append(TEXT_31);
d192 1
a192 1
    stringBuffer.append(TEXT_32);
d197 1
a197 1
    stringBuffer.append(TEXT_33);
d203 1
a203 1
    stringBuffer.append(TEXT_34);
d205 1
a205 1
    stringBuffer.append(TEXT_35);
d209 1
a209 1
    stringBuffer.append(TEXT_36);
d213 1
a213 1
    stringBuffer.append(TEXT_37);
d217 1
a217 1
    stringBuffer.append(TEXT_38);
d219 1
a219 1
    stringBuffer.append(TEXT_39);
d221 1
a221 1
    stringBuffer.append(TEXT_40);
d225 1
a225 1
    stringBuffer.append(TEXT_41);
d229 1
a229 1
    stringBuffer.append(TEXT_42);
d233 1
a233 1
    stringBuffer.append(TEXT_43);
d237 1
a237 1
    stringBuffer.append(TEXT_44);
d239 1
a239 1
    stringBuffer.append(TEXT_45);
d243 1
a243 1
    stringBuffer.append(TEXT_46);
d245 1
a245 1
    stringBuffer.append(TEXT_47);
d247 1
a247 1
    stringBuffer.append(TEXT_48);
d249 1
a249 1
    stringBuffer.append(TEXT_49);
d253 1
a253 1
    stringBuffer.append(TEXT_50);
d257 1
a257 1
    stringBuffer.append(TEXT_51);
d259 1
a259 1
    stringBuffer.append(TEXT_52);
@


1.3
log
@[ashatalin] #112664 Create links w/o dedicated domain metaelement during initial filling of diagram file
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.io.IOException;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;" + NL + "import org.eclipse.gmf.ecore.edit.providers.ElementTypes;" + NL + "import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;";
d65 7
a71 6
  protected final String TEXT_46 = NL + "\t\t\t\t\tEdge edge = (Edge) ViewService.getInstance().createConnectorView(new IAdaptable() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (IElementType.class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ElementTypes.";
  protected final String TEXT_47 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ViewUtil.APPEND, ";
  protected final String TEXT_48 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\t}";
  protected final String TEXT_50 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_51 = NL;
d220 2
d223 1
a223 1
    stringBuffer.append(TEXT_47);
d225 1
a225 1
    stringBuffer.append(TEXT_48);
d229 1
a229 1
    stringBuffer.append(TEXT_49);
d233 1
a233 1
    stringBuffer.append(TEXT_50);
d235 1
a235 1
    stringBuffer.append(TEXT_51);
@


1.2
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.io.IOException;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;";
d31 2
a32 2
  protected final String TEXT_12 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreateDiagramChildren(diagram, diagramModel);" + NL + "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createDiagramChildren(Diagram diagram, EObject diagramObject) {" + NL + "\t\tfor (Iterator it = diagramObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_13 = ".INSTANCE.getNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreDiagramLink(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(diagram, nextChild, null, ";
d39 2
a40 2
  protected final String TEXT_20 = "Children(Node node, EObject nodeObject) {" + NL + "\t\tfor (Iterator it = nodeObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getChildNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreDiagramLink(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tNode container;" + NL + "\t\t\tswitch (nodeVID) {";
d46 25
a70 9
  protected final String TEXT_27 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Node getCompartment(Node node, String name) {" + NL + "\t\tfor (Iterator it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tView nextView = (View) it.next();" + NL + "\t\t\tif (nextView instanceof Node && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (Node) nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn node;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeDiagramLink(EObject link) {" + NL + "\t\tint linkVID = ";
  protected final String TEXT_28 = ".INSTANCE.getLinkWithClassVisualID(link);" + NL + "\t\tif (linkVID == -1) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(linkVID))).add(link);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {" + NL + "\t\tCollection linkElements;";
  protected final String TEXT_29 = NL + "\t\tlinkElements = (Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_30 = "));" + NL + "\t\tfor (Iterator it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();" + NL + "\t\t\tEObject src = linkElement.eContainer();" + NL + "\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_31 = ".eINSTANCE.get";
  protected final String TEXT_32 = "();" + NL + "\t\t\tObject structuralFeatureResult = linkElement.eGet(structuralFeature);" + NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;" + NL + "\t\t\t" + NL + "\t\t\tNode srcNode = (Node) myEObject2NodeMap.get(src);" + NL + "\t\t\tNode dstNode = (Node) myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (srcNode != null && dstNode != null) {" + NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_33 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_34 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_35 = NL;
d158 18
d178 1
a178 1
    stringBuffer.append(TEXT_29);
d180 13
a192 1
    stringBuffer.append(TEXT_30);
d194 1
a194 1
    stringBuffer.append(TEXT_31);
d196 25
a220 1
    stringBuffer.append(TEXT_32);
d222 5
a226 1
    stringBuffer.append(TEXT_33);
d230 1
a230 1
    stringBuffer.append(TEXT_34);
d232 1
a232 1
    stringBuffer.append(TEXT_35);
@


1.1
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + NL + "import java.io.IOException;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.emf.ecore.resource.ResourceSet;" + NL + "import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;" + NL + "" + NL + "import org.eclipse.gmf.diagramrt.ChildNode;" + NL + "import org.eclipse.gmf.diagramrt.DiagramCanvas;" + NL + "import org.eclipse.gmf.diagramrt.DiagramLink;" + NL + "import org.eclipse.gmf.diagramrt.DiagramNode;" + NL;
d25 30
a54 57
  protected final String TEXT_6 = "\";" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ResourceSet myResSet;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myObject2NodeMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkFactory2SourceNodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tInputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT)" + NL + "\t\t\t\t.lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmyResSet = new ResourceSetImpl();" + NL + "\t\tEObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\tif (diagram == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\tString filePath = mySelection.getFullPath().removeLastSegments(1).append(outputFileNameDialog.getValue()).toString();" + NL + "\t\tsave(filePath, diagram);" + NL + "\t\ttry {" + NL + "\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t} catch (PartInitException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tmyObject2NodeMap.clear();" + NL + "\t\tmyLinkFactory2SourceNodeMap.clear();";
  protected final String TEXT_7 = NL + "\t\tDiagramCanvas diagramCanvas = ";
  protected final String TEXT_8 = ".eINSTANCE.create";
  protected final String TEXT_9 = "();" + NL + "\t\tdiagramCanvas.setDomainContainerObject(diagramModel);" + NL + "\t\t";
  protected final String TEXT_10 = NL + "\t\tmyLinkFactory2SourceNodeMap.put(new LinkFactoryImpl";
  protected final String TEXT_11 = "(), new LinkedList());";
  protected final String TEXT_12 = NL + "\t\t" + NL + "\t\tfor (Iterator it = diagramModel.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject next = (EObject) it.next();" + NL + "\t\t\tEClass nextEClass = next.eClass();";
  protected final String TEXT_13 = NL + "            if (";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "().equals(nextEClass)) {" + NL + "            \tgenerateNode";
  protected final String TEXT_16 = "(next, diagramCanvas);" + NL + "            } else ";
  protected final String TEXT_17 = NL + "\t\t\t{" + NL + "\t\t\t\tgenerateUnrecognizedNode(next, diagramCanvas);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tfor (Iterator it = myLinkFactory2SourceNodeMap.entrySet().iterator(); it.hasNext();) {" + NL + "\t\t\tMap.Entry entry = (Map.Entry) it.next();" + NL + "\t\t\tLinkFactory nextLinkFactory = (LinkFactory) entry.getKey();" + NL + "\t\t\tfor (Iterator nodes = ((Collection) entry.getValue()).iterator(); nodes.hasNext();) {" + NL + "\t\t\t\tnextLinkFactory.createLinks((DiagramNode) nodes.next(), diagramCanvas);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t    return diagramCanvas;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void generateUnrecognizedNode(EObject modelElement, DiagramCanvas diagramCanvas) {" + NL + "\t\t// Handle special cases here" + NL + "\t}" + NL + "\t";
  protected final String TEXT_18 = NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void generateNode";
  protected final String TEXT_19 = "(EObject modelElement, DiagramCanvas diagramCanvas) {" + NL + "\t\tDiagramNode diagramNode = ";
  protected final String TEXT_20 = ".eINSTANCE.create";
  protected final String TEXT_21 = "();" + NL + "\t\tdiagramNode.setDomainModelElement(modelElement);" + NL + "\t\tstoreDiagramNode(diagramNode);" + NL + "\t\tdiagramNode.setUin(diagramCanvas.nextAvailableUin());" + NL + "\t\tdiagramNode.setVisualID(";
  protected final String TEXT_22 = ".VISUAL_ID);" + NL + "\t\tdiagramCanvas.getNodes().add(diagramNode);" + NL + "\t\t" + NL + "\t\tfor (Iterator it = modelElement.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject next = (EObject) it.next();" + NL + "\t\t\tEClass nextEClass = next.eClass();";
  protected final String TEXT_23 = NL + "            if (";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "().equals(nextEClass)) {" + NL + "\t\t\t\tChildNode nextChildNode = ";
  protected final String TEXT_26 = ".eINSTANCE.create";
  protected final String TEXT_27 = "();" + NL + "\t\t\t\tnextChildNode.setGroupID(\"";
  protected final String TEXT_28 = "\");" + NL + "\t\t\t\tnextChildNode.setDomainModelElement(next);" + NL + "\t\t\t\tstoreDiagramNode(nextChildNode);" + NL + "\t\t\t\tnextChildNode.setUin(diagramCanvas.nextAvailableUin());" + NL + "\t\t\t\tnextChildNode.setVisualID(";
  protected final String TEXT_29 = ".VISUAL_ID);" + NL + "\t\t\t\tdiagramNode.getChildNodes().add(nextChildNode);" + NL + "            } else ";
  protected final String TEXT_30 = NL + "\t\t\t{" + NL + "\t\t\t\tgenerateUnrecognizedSubNode";
  protected final String TEXT_31 = "(next, diagramNode, diagramCanvas);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void generateUnrecognizedSubNode";
  protected final String TEXT_32 = "(EObject modelElement, DiagramNode diagramNode, DiagramCanvas diagramCanvas) {" + NL + "\t\t// Handle special cases here for subnodes of the node with Visual_ID = ";
  protected final String TEXT_33 = NL + "\t}";
  protected final String TEXT_34 = NL + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeDiagramNode(DiagramNode diagramNode) {" + NL + "\t\tmyObject2NodeMap.put(diagramNode.getDomainModelElement(), diagramNode);" + NL + "\t\tfor (Iterator it = myLinkFactory2SourceNodeMap.entrySet().iterator(); it.hasNext();) {" + NL + "\t\t\tMap.Entry entry = (Map.Entry) it.next();" + NL + "\t\t\tLinkFactory nextLinkFactory = (LinkFactory) entry.getKey();" + NL + "\t\t\tCollection nodes = (Collection) entry.getValue();" + NL + "\t\t\tif (nextLinkFactory.isApplicable(diagramNode)) {" + NL + "\t\t\t\tnodes.add(diagramNode);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate DiagramNode getDiagramNode(EObject modelElement) {" + NL + "\t\treturn (DiagramNode) myObject2NodeMap.get(modelElement);" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {" + NL + "\t\tResource resource = myResSet.getResource(URI.createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = myResSet.createResource(URI.createURI(filePath));" + NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate interface LinkFactory {" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "    \t */" + NL + "\t\tboolean isApplicable(DiagramNode node);" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "    \t */" + NL + "\t\tvoid createLinks(DiagramNode node, DiagramCanvas diagramCanvas);" + NL + "\t\t" + NL + "\t}" + NL + "\t";
  protected final String TEXT_35 = NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class LinkFactoryImpl";
  protected final String TEXT_36 = " implements LinkFactory {" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "    \t */" + NL + "\t\tpublic boolean isApplicable(DiagramNode node) {" + NL + "\t\t\tEObject modelObject = node.getDomainModelElement();" + NL + "\t\t\tEClass modelObjectEClass = modelObject.eClass();";
  protected final String TEXT_37 = NL + "\t\t\tfor (Iterator it = modelObjectEClass.getEAllStructuralFeatures().iterator(); it.hasNext();) {" + NL + "\t\t\t\tif (";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "().equals(it.next())) {" + NL + "\t\t\t\t\treturn true;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "    \t */" + NL + "\t\tpublic void createLinks(DiagramNode node, DiagramCanvas diagramCanvas) {" + NL + "\t\t\tEObject modelObject = node.getDomainModelElement();";
  protected final String TEXT_40 = "\t\t\t" + NL + "\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "();" + NL + "\t\t\tObject structuralFeatureResult = modelObject.eGet(structuralFeature);" + NL + "\t\t\tif (structuralFeatureResult instanceof Collection) {" + NL + "\t\t\t\tfor (Iterator it = ((Collection) structuralFeatureResult).iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject nextLinkTarget = (EObject) it.next();" + NL + "\t\t\t\t\tDiagramNode targetNode = null;" + NL + "\t\t\t\t\tif (vetoLinkCreation(modelObject, nextLinkTarget)) {" + NL + "\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\ttargetNode = getDiagramNode(nextLinkTarget);";
  protected final String TEXT_43 = NL + "\t\t\tEStructuralFeature containmentFeature = ";
  protected final String TEXT_44 = ".eINSTANCE.get";
  protected final String TEXT_45 = "();" + NL + "\t\t\tObject containmentFeatureResult = modelObject.eGet(containmentFeature);" + NL + "\t\t\tif (containmentFeatureResult instanceof Collection) {" + NL + "\t\t\t\tfor (Iterator it = ((Collection) containmentFeatureResult).iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tEObject modelLinkObject = (EObject) it.next();" + NL + "\t\t\t\t\tDiagramNode targetNode = null;";
  protected final String TEXT_46 = NL + "\t\t\t\t\tEClass modelLinkObjectEClass = modelLinkObject.eClass();" + NL + "            \t\tif (!";
  protected final String TEXT_47 = ".eINSTANCE.get";
  protected final String TEXT_48 = "().equals(modelLinkObjectEClass)) {" + NL + "            \t\t\tcontinue;" + NL + "            \t\t}";
  protected final String TEXT_49 = NL + "\t\t\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "();" + NL + "\t\t\t\t\tif (structuralFeature == null) {" + NL + "\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tObject structuralFeatureResult = modelLinkObject.eGet(structuralFeature);" + NL + "\t\t\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tif (vetoLinkCreation(modelObject, (EObject) structuralFeatureResult, modelLinkObject)) {" + NL + "\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\ttargetNode = getDiagramNode((EObject) structuralFeatureResult);";
  protected final String TEXT_52 = NL + "\t\t\t\t\tif (targetNode == null) {" + NL + "\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tDiagramLink diagramLink = ";
  protected final String TEXT_53 = ".eINSTANCE.create";
  protected final String TEXT_54 = "();" + NL + "\t\t\t\t\tdiagramLink.setSource(node);" + NL + "\t\t\t\t\tdiagramLink.setUin(diagramCanvas.nextAvailableUin());" + NL + "\t\t\t\t\tdiagramLink.setTarget(targetNode);" + NL + "\t\t\t\t\tdiagramLink.setVisualID(";
  protected final String TEXT_55 = ".VISUAL_ID);" + NL + "\t\t\t\t\tdiagramCanvas.getLinks().add(diagramLink);";
  protected final String TEXT_56 = NL + "\t\t\t\t\tdiagramLink.setDomainModelElement(modelLinkObject);";
  protected final String TEXT_57 = NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_58 = NL + "\t    /**" + NL + "    \t * @@generated" + NL + "    \t */" + NL + "\t\tprivate boolean vetoLinkCreation(EObject linkSource, EObject target) {" + NL + "\t\t\treturn false;" + NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t    /**" + NL + "    \t * @@generated" + NL + "    \t */" + NL + "\t\tprivate boolean vetoLinkCreation(EObject linkSource, EObject target, EObject linkObject) {" + NL + "\t\t\treturn false;" + NL + "\t\t}";
  protected final String TEXT_60 = NL + "\t\t" + NL + "\t\t}" + NL + "\t";
  protected final String TEXT_61 = NL + NL + "}";
  protected final String TEXT_62 = NL;
d59 5
a63 1
    GenDiagram genDiagram = (GenDiagram) argument;
d75 1
a75 1
     GenClass diagramGenClass = genDiagram.getDiagramRunTimeClass();
d77 4
a80 1
    stringBuffer.append(importManager.getImportedName(diagramGenClass.getGenPackage().getQualifiedFactoryInterfaceName()));
d82 1
a82 1
    stringBuffer.append(diagramGenClass.getInterfaceName());
d85 1
a85 2
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext();) {
	GenLink nextGenLink = (GenLink) links.next();
d88 1
a88 1
    stringBuffer.append(nextGenLink.getVisualID());
d90 1
a90 3
    
}

d92 4
d97 2
a98 3
for (Iterator nodes = genDiagram.getNodes().iterator(); nodes.hasNext();) {
	GenNode nextGenNode = (GenNode) nodes.next();
	GenClass nextGenNodeGenClass = nextGenNode.getDomainMetaClass();
a99 4
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(nextGenNodeGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(nextGenNodeGenClass.getInterfaceName());
d103 1
a103 1
    }
d106 1
a106 3
for (Iterator nodes = genDiagram.getNodes().iterator(); nodes.hasNext();) {
	GenNode nextGenNode = (GenNode) nodes.next();
	GenClass nextNodeRuntimeGenClass = nextGenNode.getDiagramRunTimeClass();
d109 4
a112 1
    stringBuffer.append(nextGenNode.getVisualID());
d114 1
a114 1
    stringBuffer.append(importManager.getImportedName(nextNodeRuntimeGenClass.getGenPackage().getQualifiedFactoryInterfaceName()));
d116 1
a116 1
    stringBuffer.append(nextNodeRuntimeGenClass.getInterfaceName());
a117 2
    stringBuffer.append(importManager.getImportedName(nextGenNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_22);
d119 2
a120 4
	for (Iterator childNodes = nextGenNode.getChildNodes().iterator(); childNodes.hasNext();) {
		GenChildNode nextChildGenNode = (GenChildNode) childNodes.next();
		GenClass nextChildNodeRuntimeGenClass = nextChildGenNode.getDiagramRunTimeClass();
		GenClass nextChildNodeDomainGenClass = nextChildGenNode.getDomainMetaClass();
d122 2
d125 1
a125 1
    stringBuffer.append(importManager.getImportedName(nextChildNodeDomainGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
d127 3
a129 1
    stringBuffer.append(nextChildNodeDomainGenClass.getInterfaceName());
d131 1
a131 1
    stringBuffer.append(importManager.getImportedName(nextChildNodeRuntimeGenClass.getGenPackage().getQualifiedFactoryInterfaceName()));
d133 3
a135 1
    stringBuffer.append(nextChildNodeRuntimeGenClass.getInterfaceName());
d137 1
a137 1
    stringBuffer.append(nextChildGenNode.getGroupID());
d139 5
a143 1
    stringBuffer.append(importManager.getImportedName(nextChildGenNode.getEditPartQualifiedClassName()));
d145 1
a145 1
    	}
d147 1
a147 1
    stringBuffer.append(nextGenNode.getVisualID());
d149 1
a149 1
    stringBuffer.append(nextGenNode.getVisualID());
d151 1
a151 1
    stringBuffer.append(nextGenNode.getVisualID());
a152 99
    }
    stringBuffer.append(TEXT_34);
    
for (Iterator links = genDiagram.getLinks().iterator(); links.hasNext();) {
	GenLink nextGenLink = (GenLink) links.next();
	boolean referenceOnly = false;
	GenFeature containmentGenFeature = null;
	GenClass domainMetaElementGenClass = null;
	if (nextGenLink instanceof GenLinkReferenceOnly) {
		referenceOnly = true;
	} else {
		containmentGenFeature = nextGenLink.getContainmentMetaFeature();
		GenLinkWithClass withClassLink = (GenLinkWithClass) nextGenLink;
		if (withClassLink.getDomainMetaClass() != null) {
			domainMetaElementGenClass = withClassLink.getDomainMetaClass();
		}
	}
	
	GenClass nextLinkRuntimeGenClass = nextGenLink.getDiagramRunTimeClass();
	GenFeature domainLinkTargetGenFeature = nextGenLink.getDomainLinkTargetFeature();

    stringBuffer.append(TEXT_35);
    stringBuffer.append(nextGenLink.getVisualID());
    stringBuffer.append(TEXT_36);
    
	GenFeature genFeature;
	if (referenceOnly) {
		genFeature = domainLinkTargetGenFeature;
	} else {
		genFeature = containmentGenFeature;
	}

    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(genFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_39);
    
	if (referenceOnly) {

    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(domainLinkTargetGenFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_42);
    	
	} else {

    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(containmentGenFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(containmentGenFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_45);
    
		if (domainMetaElementGenClass != null) {

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(domainMetaElementGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(domainMetaElementGenClass.getInterfaceName());
    stringBuffer.append(TEXT_48);
    
		}

    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(domainLinkTargetGenFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_51);
    
	}

    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName(nextLinkRuntimeGenClass.getGenPackage().getQualifiedFactoryInterfaceName()));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(nextLinkRuntimeGenClass.getInterfaceName());
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(nextGenLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_55);
    
	if (!referenceOnly) {

    stringBuffer.append(TEXT_56);
    
	}

    stringBuffer.append(TEXT_57);
    
	if (referenceOnly) {

    stringBuffer.append(TEXT_58);
    
	} else {

    stringBuffer.append(TEXT_59);
    
	}

    stringBuffer.append(TEXT_60);
d156 1
a156 1
    stringBuffer.append(TEXT_61);
d158 1
a158 1
    stringBuffer.append(TEXT_62);
@

