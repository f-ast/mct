head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.17
	v20081001-1925:1.17
	v20080924-1925:1.17
	v20080917-1925:1.17
	v20080911-1728:1.17
	v20080910-1520:1.17
	v20080903-1520:1.17
	v20080827-1520:1.17
	v20080813-1520:1.17
	v20080806-1520:1.17
	v20070608-1300:1.16
	v20070605-1400:1.16
	v20070601-1400:1.15
	v20070525-1500:1.15
	v20070520-1200:1.15
	v20070518-1300:1.14
	v20070504-1000:1.14
	v20070427-0600:1.14
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070405-1100:1.13
	v20070403-1500:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070307-0700:1.13
	v20070301-1200:1.13
	v20070228-2000:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.13
	v20070103-0300:1.13
	M4_20:1.13
	v20061222-1800:1.13
	v20061218-1200:1.13
	v20061214-0000:1.13
	v20061120-1300:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.13
	v20061020-1000:1.13
	v20061013-1330:1.13
	v20060919-0800:1.13
	v20060907-1100:1.13
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.13
	v20060817-1500:1.13
	v20060728-0500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.11
	v20060519-1300:1.11
	v20060519-0800:1.11
	v20060512-1000:1.10
	I20060512-1000:1.10
	I20060505-1400:1.10
	I20060428-1300:1.10
	I20060424-0500:1.10
	I20060424-0300:1.10
	M6_10:1.10
	I20060407-1200:1.7
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2007.06.12.11.36.12;	author dstadnik;	state dead;
branches;
next	1.16;
commitid	31a3466e852b4567;

1.16
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	17ef46643bcf4567;

1.15
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.14;
commitid	7de14650454a4567;

1.14
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	78b462dc68e4567;

1.13
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.7;

1.7
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.02.16.20.58;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.17
log
@[192027] Rewrite IconProvider template in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class IconProviderGenerator
{
  protected static String nl;
  public static synchronized IconProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    IconProviderGenerator result = new IconProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractProvider implements IIconProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Image getIcon(IAdaptable hint, int flags) {" + NL + "\t\treturn ";
  protected final String TEXT_6 = ".getImage(hint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetIconOperation) {" + NL + "\t\t\treturn ((GetIconOperation) operation).execute(this) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getIconProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_6);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
@


1.16
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.15
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.14
log
@follow consisted spacing policy
@
text
@d18 7
a24 8
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractProvider implements IIconProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Image getIcon(IAdaptable hint, int flags) {" + NL + "\t\treturn ";
  protected final String TEXT_7 = ".getImage(hint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetIconOperation) {" + NL + "\t\t\treturn ((GetIconOperation) operation).execute(this) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
a32 1
    stringBuffer.append(TEXT_1);
d37 2
a39 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d42 2
d45 1
a45 1
    importManager.markImportLocation(stringBuffer);
d47 1
a47 1
    stringBuffer.append(genDiagram.getIconProviderClassName());
d49 1
a49 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a50 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_8);
@


1.13
log
@header comment should not be a javadoc comment
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d40 1
a40 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.12
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.11
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d40 1
a40 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.10
log
@using M6 to generate code.
@
text
@d21 5
a25 7
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractProvider implements IIconProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Image getIcon(IAdaptable hint, int flags) {" + NL + "\t\treturn ";
  protected final String TEXT_9 = ".getImage(hint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetIconOperation) {" + NL + "\t\t\treturn ((GetIconOperation) operation).execute(this) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d30 4
a33 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d43 1
d45 1
a45 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d47 1
a47 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d49 1
a49 1
    importManager.markImportLocation(stringBuffer);
d51 1
a51 1
    stringBuffer.append(genDiagram.getIconProviderClassName());
a52 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_10);
@


1.9
log
@restore generators
@
text
@d31 1
a31 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.8
log
@#134095 do not store compiled templates in cvs
@
text
@d31 1
a31 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.7
log
@Switching to eclipse M6.
@
text
@@


1.6
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d31 1
a31 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.5
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 10
a27 7
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;" + NL + "import org.eclipse.swt.graphics.Image;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractProvider implements IIconProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Image getIcon(IAdaptable hint, int flags) {" + NL + "\t\treturn ";
  protected final String TEXT_6 = ".getImage(hint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetIconOperation) {" + NL + "\t\t\treturn ((GetIconOperation) operation).execute(this) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
d34 9
d44 1
a44 1
    stringBuffer.append(TEXT_2);
d46 1
a46 1
    stringBuffer.append(TEXT_3);
d48 1
a48 1
    stringBuffer.append(TEXT_4);
d50 1
a50 1
    stringBuffer.append(TEXT_5);
d52 1
a52 1
    stringBuffer.append(TEXT_6);
d54 1
a54 1
    stringBuffer.append(TEXT_7);
@


1.4
log
@ImportManager moved to oeg.common
@
text
@d29 1
a29 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.3
log
@do not reference getHint()
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.2
log
@#116031 avoid hardcoded class names in templates
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;" + NL + "import org.eclipse.swt.graphics.Image;";
d23 1
a23 1
  protected final String TEXT_6 = ".getImage(hint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetIconOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetIconOperation) operation).getHint();" + NL + "\t\t\treturn getIcon(hint, IconOptions.NONE.intValue()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@


1.1
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d4 1
d19 6
a24 3
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.GetIconOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IIconProvider;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.icon.IconOptions;" + NL + "import org.eclipse.swt.graphics.Image;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends AbstractProvider implements IIconProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Image getIcon(IAdaptable hint, int flags) {" + NL + "\t\treturn ElementTypes.getImage(hint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetIconOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetIconOperation) operation).getHint();" + NL + "\t\t\treturn getIcon(hint, IconOptions.NONE.intValue()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_4 = NL;
d29 1
a29 1
    GenDiagram diagram = (GenDiagram) argument;
d31 1
a31 1
    stringBuffer.append(diagram.getProvidersPackageName());
d33 1
a33 1
    stringBuffer.append(diagram.getIconProviderClassName());
d35 1
d37 6
@

