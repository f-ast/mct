head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20070202-0200:1.13
	M4_20:1.13
	v20061222-1800:1.13
	v20061218-1200:1.13
	v20061214-0000:1.13
	v20061120-1300:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.13
	v20061020-1000:1.13
	v20061013-1330:1.13
	v20060919-0800:1.13
	v20060907-1100:1.13
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.13
	v20060817-1500:1.13
	v20060728-0500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.11
	v20060519-1300:1.11
	v20060519-0800:1.11
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.11
	I20060424-0300:1.11
	M6_10:1.11
	I20060407-1200:1.8
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.7
	I20060317-1200:1.7
	I20060316-1300:1.7
	I20060309-1300:1.7
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.3
	I20060202-1415:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2006.12.27.18.38.46;	author dstadnik;	state dead;
branches;
next	1.13;
commitid	64234592bdb54567;

1.13
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.8;

1.8
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.14
log
@[134107] Provide preferences for the generated diagram editors
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class PreferencesInitializerGenerator
{
  protected static String nl;
  public static synchronized PreferencesInitializerGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    PreferencesInitializerGenerator result = new PreferencesInitializerGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.DiagramPreferenceInitializer;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends DiagramPreferenceInitializer {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPreferenceStore getPreferenceStore() {" + NL + "\t\treturn ";
  protected final String TEXT_6 = ".getInstance().getPreferenceStore();" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GenEditorGenerator editorGen = (GenEditorGenerator) ((Object[]) argument)[0];
GenDiagram genDiagram = editorGen.getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(editorGen.getDiagram().getPreferenceInitializerClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(editorGen.getPlugin().getActivatorQualifiedClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
@


1.13
log
@header comment should not be a javadoc comment
@
text
@@


1.12
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.11
log
@using M6 to generate code.
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d40 1
a40 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.10
log
@restore generators
@
text
@d28 1
a28 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.9
log
@#134095 do not store compiled templates in cvs
@
text
@d28 1
a28 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.8
log
@Switching to eclipse M6.
@
text
@@


1.7
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d28 1
a28 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.6
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 7
a24 4
  protected final String TEXT_1 = NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.DiagramPreferenceInitializer;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_2 = " extends DiagramPreferenceInitializer {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPreferenceStore getPreferenceStore() {" + NL + "\t\treturn ";
  protected final String TEXT_3 = ".getInstance().getPreferenceStore();" + NL + "\t}" + NL + "}";
  protected final String TEXT_4 = NL;
d31 1
a33 1
importManager.emitPackageStatement(stringBuffer);
d35 4
a38 1
    stringBuffer.append(editorGen.getDiagram().getPreferenceInitializerClassName());
d40 1
a40 1
    stringBuffer.append(editorGen.getPlugin().getActivatorQualifiedClassName());
d42 2
d45 5
@


1.5
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d4 1
d18 4
a21 5
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.DiagramPreferenceInitializer;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends DiagramPreferenceInitializer {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPreferenceStore getPreferenceStore() {" + NL + "\t\treturn ";
  protected final String TEXT_4 = ".getInstance().getPreferenceStore();" + NL + "\t}" + NL + "}";
  protected final String TEXT_5 = NL;
d26 5
a30 1
    GenEditorGenerator editorGen = (GenEditorGenerator) argument;
d32 1
a32 1
    stringBuffer.append(editorGen.getEditor().getPackageName());
d34 1
a34 1
    stringBuffer.append(editorGen.getDiagram().getPreferenceInitializerClassName());
a35 1
    stringBuffer.append(editorGen.getPlugin().getActivatorQualifiedClassName());
a36 1
    stringBuffer.append(TEXT_5);
@


1.4
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d26 1
a26 1
    GenDiagram genDiagram = (GenDiagram) argument;
d28 1
a28 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d30 1
a30 1
    stringBuffer.append(genDiagram.getPreferenceInitializerClassName());
d32 1
a32 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
@


1.3
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d32 1
a32 1
    stringBuffer.append(genDiagram.getPlugin().getActivatorQualifiedClassName());
@


1.2
log
@#116031 avoid hardcoded class names in templates
@
text
@d32 1
a32 1
    stringBuffer.append(genDiagram.getPluginQualifiedClassName());
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d18 4
a21 3
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.preferences.DiagramPreferenceInitializer;" + NL + "import org.eclipse.jface.preference.IPreferenceStore;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class PreferencesInitializer extends DiagramPreferenceInitializer {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IPreferenceStore getPreferenceStore() {" + NL + "\t\treturn ";
  protected final String TEXT_3 = ".getInstance().getPreferenceStore();" + NL + "\t}" + NL + "}";
  protected final String TEXT_4 = NL;
d30 2
a32 1
    stringBuffer.append(TEXT_3);
d34 1
@

