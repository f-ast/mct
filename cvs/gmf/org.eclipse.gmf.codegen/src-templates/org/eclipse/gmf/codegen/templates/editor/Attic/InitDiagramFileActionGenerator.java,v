head	1.52;
access;
symbols
	v20081022-1925:1.52
	v20081015-1925:1.52
	v20081008-1925:1.52
	v20081001-1925:1.52
	v20080924-1925:1.52
	v20080917-1925:1.52
	v20080911-1728:1.52
	v20080910-1520:1.52
	v20080903-1520:1.52
	v20080827-1520:1.52
	v20080813-1520:1.52
	v20080806-1520:1.52
	v20060316-0600:1.50
	v20070307-0700:1.48
	v20070301-1200:1.48
	v20070228-2000:1.48
	v20070221-1500:1.48
	v20070208-1800:1.48
	v20070202-0200:1.45
	v20070103-0300:1.48
	M4_20:1.48
	v20061222-1800:1.48
	v20061218-1200:1.48
	v20061214-0000:1.48
	v20061120-1300:1.47
	M3_20:1.47
	v20061117-0800:1.47
	v20061027-1200:1.45
	v20061020-1000:1.45
	v20061013-1330:1.46
	v20060919-0800:1.45
	v20060907-1100:1.45
	M1_20:1.45
	v20060904-1500:1.45
	v20060824-1600:1.45
	v20060817-1500:1.45
	v20060728-0500:1.45
	v20060713-1700:1.45
	R1_0_maintenance:1.45.0.2
	R1_0:1.45
	v20060627-1200:1.45
	v20060626-1420:1.45
	v20060620-0400:1.45
	v20060616-1400:1.45
	v20060616-1200:1.45
	v20060609-1400:1.45
	v20060531-1730:1.43
	v20060530-1930:1.43
	v20060526-1200:1.42
	v20060519-1300:1.42
	v20060519-0800:1.42
	v20060512-1000:1.42
	I20060512-1000:1.42
	I20060505-1400:1.42
	I20060428-1300:1.42
	I20060424-0500:1.40
	I20060424-0300:1.40
	M6_10:1.40
	I20060407-1200:1.36
	I20060331-1000:1.35
	I20060324-0300:1.35
	I20060317-1300:1.35
	I20060317-1200:1.35
	I20060316-1300:1.35
	I20060309-1300:1.34
	M5_10:1.33
	S20060303-1600:1.33
	I20060227-1730:1.31
	I20060216-1945:1.30
	I20060210-1715:1.29
	I20060209-1815:1.29
	I20060203-0830:1.22
	I20060202-1415:1.22
	I20060129-1145:1.21
	I20060127-0900:1.21
	I20060120-1530:1.16
	I20060113-1700:1.14
	M4_10:1.14
	I20060107-1100:1.14
	I20060105-1630:1.14
	I20051230-1230:1.14
	I20051223-1100:1.14
	I20051217-0925:1.12
	I20051208-2000:1.12
	I20051201-1800:1.12
	I20051124-2000:1.9
	M3_10:1.9
	I20051118-1245:1.9
	I20051111-1800:1.4
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.52
date	2007.03.16.14.45.34;	author dstadnik;	state dead;
branches;
next	1.51;
commitid	2a5045faad8d4567;

1.51
date	2007.03.16.13.57.05;	author dstadnik;	state Exp;
branches;
next	1.50;
commitid	741e45faa2304567;

1.50
date	2007.03.15.12.21.03;	author dstadnik;	state Exp;
branches;
next	1.49;
commitid	34a45f93a2e4567;

1.49
date	2007.03.15.11.57.13;	author dstadnik;	state Exp;
branches;
next	1.48;
commitid	21b545f934984567;

1.48
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.47;
commitid	5f734567714f4567;

1.47
date	2006.11.01.18.25.42;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.09.15.21.46.16;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.06.02.15.08.49;	author ashatalin;	state Exp;
branches;
next	1.44;

1.44
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.43;

1.43
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.26.11.00.56;	author ashatalin;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.25.20.29.12;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.38;

1.38
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.36;

1.36
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.03.14.14.18.23;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.03.02.12.00.46;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.01.17.20.36;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.02.17.12.00.40;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.02.13.17.20.07;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.31.19.02.08;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.26.13.36.41;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.25.19.39.19;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.24.19.31.55;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.24.12.01.20;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.23.19.58.06;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2005.12.20.18.29.34;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.30.16.15.38;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.29.18.33.26;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.29.16.42.28;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.18.11.54.08;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.17.18.23.01;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.16.08.37.41;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.13.21.35;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.52
log
@rewrite init diagram file action in xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.common.codegen.*;

public class InitDiagramFileActionGenerator {
 
  protected static String nl;
  public static synchronized InitDiagramFileActionGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    InitDiagramFileActionGenerator result = new InitDiagramFileActionGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " domainModelURI;" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tdomainModelURI = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tIFile file = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\tdomainModelURI = ";
  protected final String TEXT_8 = ".createPlatformResourceURI(file.getFullPath().toString(), true);" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();";
  protected final String TEXT_9 = NL + "\t\tResourceSet resourceSet = new ";
  protected final String TEXT_10 = "();";
  protected final String TEXT_11 = NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();";
  protected final String TEXT_12 = NL + "\t\tEObject diagramRoot = null;" + NL + "\t\ttry {" + NL + "\t\t\tResource resource = resourceSet.getResource(domainModelURI, true);" + NL + "\t\t\tdiagramRoot = (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (WrappedException ex) {" + NL + "\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(\"Unable to load resource: \" + domainModelURI, ex);" + NL + "\t\t}" + NL + "\t\tif (diagramRoot == null) {" + NL + "\t\t\tMessageDialog.openError(myPart.getSite().getShell(), \"Error\", \"Model file loading failed\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tWizard wizard = new ";
  protected final String TEXT_14 = "(domainModelURI, diagramRoot, editingDomain);" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_15 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InitDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InitDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new \" + ";
  protected final String TEXT_16 = ".MODEL_ID + \" diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "}";

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
final String pluginActivatorClass = importManager.getImportedName(editorGen.getPlugin().getActivatorQualifiedClassName());

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
importManager.addImport("org.eclipse.core.resources.IFile");
importManager.addImport("org.eclipse.jface.action.IAction");
importManager.addImport("org.eclipse.jface.dialogs.IDialogSettings");
importManager.addImport("org.eclipse.jface.viewers.ISelection");
importManager.addImport("org.eclipse.jface.viewers.IStructuredSelection");
importManager.addImport("org.eclipse.jface.wizard.WizardDialog");
importManager.addImport("org.eclipse.jface.wizard.Wizard");
importManager.addImport("org.eclipse.ui.IObjectActionDelegate");
importManager.addImport("org.eclipse.ui.IWorkbenchPart");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("org.eclipse.emf.common.util.WrappedException");
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getInitDiagramFileActionClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_8);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
    stringBuffer.append(TEXT_10);
    } else {
    stringBuffer.append(TEXT_11);
    }
    stringBuffer.append(TEXT_12);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}@


1.51
log
@remove stale attribute
@
text
@@


1.50
log
@refactor attributes to match types
@
text
@d32 2
a33 2
  protected final String TEXT_14 = "(domainModelURI, myPart.getSite().getPage(), diagramRoot, editingDomain);" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_15 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new \" + ";
a163 1
importManager.addImport("org.eclipse.jface.viewers.StructuredSelection");
@


1.49
log
@[168661] Use URIs instead of IResources to make code reusable in RCP
@
text
@d25 1
a25 1
  protected final String TEXT_7 = " mySelectedModelFile;" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tIFile file = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\tmySelectedModelFile = ";
d30 3
a32 3
  protected final String TEXT_12 = NL + "\t\tEObject diagramRoot = null;" + NL + "\t\ttry {" + NL + "\t\t\tResource resource = resourceSet.getResource(mySelectedModelFile, true);" + NL + "\t\t\tdiagramRoot = (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (WrappedException ex) {" + NL + "\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile, ex);" + NL + "\t\t}" + NL + "\t\tif (diagramRoot == null) {" + NL + "\t\t\tMessageDialog.openError(myPart.getSite().getShell(), \"Error\", \"Model file loading failed\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tWizard wizard = new ";
  protected final String TEXT_14 = "(mySelectedModelFile, myPart.getSite().getPage(), diagramRoot, editingDomain);" + NL + "        IDialogSettings pluginDialogSettings = ";
@


1.48
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d24 11
a34 9
  protected final String TEXT_6 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tTransactionalEditingDomain editingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();";
  protected final String TEXT_7 = NL + "\t\tResourceSet resourceSet = new ";
  protected final String TEXT_8 = "();";
  protected final String TEXT_9 = NL + "\t\tResourceSet resourceSet = editingDomain.getResourceSet();";
  protected final String TEXT_10 = NL + "\t\tEObject diagramRoot = null;" + NL + "\t\ttry {" + NL + "\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString(), true), true);" + NL + "\t\t\tdiagramRoot = (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (WrappedException ex) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t}" + NL + "\t\tif (diagramRoot == null) {" + NL + "\t\t\tMessageDialog.openError(myPart.getSite().getShell(), \"Error\", \"Model file loading failed\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tWizard wizard = new ";
  protected final String TEXT_12 = "(mySelectedModelFile, myPart.getSite().getPage(), mySelection, diagramRoot, editingDomain);" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_13 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new \" + ";
  protected final String TEXT_14 = ".MODEL_ID + \" diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "}";
d183 1
a183 1
    if (editorGen.isSameFileForDiagramAndModel()) {
d185 1
a185 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d187 1
a187 1
    } else {
d189 1
a189 1
    }
d191 1
a191 1
    stringBuffer.append(pluginActivatorClass);
d193 1
a193 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName()));
d197 4
d202 1
a202 1
    stringBuffer.append(TEXT_14);
@


1.47
log
@GenModelGraphAnalyzer added and used while generating navigator.
@
text
@d42 7
a48 1
				result.append(importManager.getImportedName(feature.getEcoreFeature().getEType().getInstanceClassName()));
@


1.46
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d28 1
a28 1
  protected final String TEXT_10 = NL + "\t\tEObject diagramRoot = null;" + NL + "\t\ttry {" + NL + "\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\t\tdiagramRoot = (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (WrappedException ex) {" + NL + "\t\t\t";
@


1.45
log
@#139594 Create diagrams for non-root element of domain model.
@
text
@d42 1
a42 1
				result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
@


1.44
log
@header comment should not be a javadoc comment
@
text
@d24 9
a32 4
  protected final String TEXT_6 = " implements IObjectActionDelegate {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tWizard wizard = new ";
  protected final String TEXT_7 = "(mySelectedModelFile, myPart.getSite().getPage(), mySelection);" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_8 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new \" + ";
  protected final String TEXT_9 = ".MODEL_ID + \" diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "}";
d161 8
d175 10
d186 1
a186 1
    stringBuffer.append(TEXT_7);
d188 1
a188 1
    stringBuffer.append(TEXT_8);
d190 1
a190 1
    stringBuffer.append(TEXT_9);
@


1.43
log
@Correcting copyright processing
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.42
log
@#138574 NPE creating ship destination link in TaiPan sample
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d140 1
a140 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.41
log
@Suggesting correct diagram file name in wizard.
@
text
@a146 4
importManager.addImport("org.eclipse.core.resources.IResource");
importManager.addImport("org.eclipse.core.resources.ResourcesPlugin");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.core.runtime.Path");
a147 1
importManager.addImport("org.eclipse.jface.dialogs.IInputValidator");
@


1.40
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d24 4
a27 5
  protected final String TEXT_6 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension(\"";
  protected final String TEXT_7 = "\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tWizard wizard = new ";
  protected final String TEXT_8 = "(mySelectedModelFile, myPart.getSite().getPage(), mySelection);" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_9 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new \" + ";
  protected final String TEXT_10 = ".MODEL_ID + \" diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "}";
d167 1
a167 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d169 1
a169 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNewDiagramFileWizardQualifiedClassName()));
d171 1
a171 1
    stringBuffer.append(pluginActivatorClass);
a172 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_10);
@


1.39
log
@using M6 to generate code.
@
text
@d27 2
a28 2
  protected final String TEXT_9 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new ";
  protected final String TEXT_10 = " diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "}";
d174 1
a174 1
    stringBuffer.append(editorGen.getModelID());
@


1.38
log
@restore generators
@
text
@d128 1
a128 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.37
log
@#134095 do not store compiled templates in cvs
@
text
@d128 1
a128 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.36
log
@Switching to eclipse M6.
@
text
@@


1.35
log
@#131543 Code reconstructing the diagram contents separated from the init diagram file action.
@
text
@d128 1
a128 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.34
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@a4 1
import java.util.*;
d24 5
a28 125
  protected final String TEXT_6 = " implements IObjectActionDelegate, IInputValidator {" + NL;
  protected final String TEXT_7 = NL + "\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Integer LINK_KEY_";
  protected final String TEXT_8 = " = new Integer(";
  protected final String TEXT_9 = ");";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension(\"editorGen.getDiagramFileExtension()\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tNewDiagramFileWizard wizard = new NewDiagramFileWizard();" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_11 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new ";
  protected final String TEXT_12 = " diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class NewDiagramFileWizard extends Wizard {" + NL + "" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WizardNewFileCreationPage myFileCreationPage;" + NL + "\t\t" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic void addPages() {" + NL + "\t\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection);" + NL + "\t\t\tmyFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_13 = "\").lastSegment());" + NL + "\t\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\t\tmyFileCreationPage.setDescription(\"Create new diagram and initialize it using specified ";
  protected final String TEXT_14 = " model content\");" + NL + "\t\t\taddPage(myFileCreationPage);" + NL + "\t\t}" + NL + "" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic boolean performFinish() {" + NL + "\t\t\tfinal EObject diagramModelObject = load();" + NL + "\t\t\tif (diagramModelObject == null) {" + NL + "\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "" + NL + "\t\t\tList affectedFiles = new LinkedList();" + NL + "\t\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\t\tint diagramVID = ";
  protected final String TEXT_15 = ".INSTANCE.getDiagramVisualID(diagramModelObject);" + NL + "\t\t\t\t\tif (diagramVID != ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t\t}";
  protected final String TEXT_17 = NL + "\t\t\t\t\tmyLinkVID2EObjectMap.put(LINK_KEY_";
  protected final String TEXT_18 = ", new LinkedList());";
  protected final String TEXT_19 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, \"";
  protected final String TEXT_20 = "\", ";
  protected final String TEXT_21 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);";
  protected final String TEXT_22 = NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram.getElement());";
  protected final String TEXT_23 = NL + "\t\t\t\t\tcreate";
  protected final String TEXT_24 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_25 = NL + "\t\t\t\t\tResource resource = diagramModelObject.eResource();" + NL + "\t\t\t\t\tint nodeVID;" + NL + "\t\t\t\t\tfor (";
  protected final String TEXT_26 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\t\t\t\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\t\t\t\tnodeVID = ";
  protected final String TEXT_28 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_29 = " == nodeVID) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_30 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_31 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\t\t\t\tcreate";
  protected final String TEXT_32 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\t\t\t}";
  protected final String TEXT_34 = "\t\t" + NL + "\t\t\t\t\tcreateLinks();" + NL + "\t\t\t\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\t\t\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), diagramFile);" + NL + "\t\t\t} catch (ExecutionException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_35 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t\t} catch (IOException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_36 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_37 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject load() {";
  protected final String TEXT_38 = NL + "\t\t\tResourceSet resourceSet = new ";
  protected final String TEXT_39 = "();";
  protected final String TEXT_40 = NL + "\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_41 = NL + "\t\t\ttry {" + NL + "\t\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t\t} catch (WrappedException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_42 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t";
  protected final String TEXT_43 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_44 = "Children(";
  protected final String TEXT_45 = " viewObject, EObject modelObject) {";
  protected final String TEXT_46 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_47 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_48 = NL + "\t\t";
  protected final String TEXT_49 = " nextNode;";
  protected final String TEXT_50 = NL + "\t\tfor (";
  protected final String TEXT_51 = " values = ";
  protected final String TEXT_52 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_53 = NL + "\t\tnextValue = ";
  protected final String TEXT_54 = ";";
  protected final String TEXT_55 = NL + "\t\tnodeVID = ";
  protected final String TEXT_56 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_57 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_58 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_59 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_60 = NL + "\t\t}";
  protected final String TEXT_61 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_62 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_63 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_64 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_65 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_66 = " getCompartment(";
  protected final String TEXT_67 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_68 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_69 = " nextView = (";
  protected final String TEXT_70 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_71 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_72 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_73 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {\t";
  protected final String TEXT_74 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_75 = ".eINSTANCE.get";
  protected final String TEXT_76 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_77 = ";";
  protected final String TEXT_78 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_79 = " values = ((";
  protected final String TEXT_80 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_81 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_82 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_83 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_84 = " == linkVID) {" + NL + "\t\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_85 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\t\t\tEObject dst = (EObject) structuralFeatureResult;" + NL + "\t\t\t\t\t((";
  protected final String TEXT_86 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_87 = ")).add(new LinkDescriptor(container, dst, nextValue, diagram));" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_88 = NL + "\t\t\t}";
  protected final String TEXT_89 = NL + "\t\t}";
  protected final String TEXT_90 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_91 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_92 = ".eINSTANCE.get";
  protected final String TEXT_93 = "())) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_94 = ";";
  protected final String TEXT_95 = NL + "\t\t\tfor (";
  protected final String TEXT_96 = " destinations = ((";
  protected final String TEXT_97 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject nextDestination = (EObject) destinations.next();";
  protected final String TEXT_98 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\t\tEObject nextDestination = (EObject) structuralFeatureResult;";
  protected final String TEXT_99 = NL + "\t\t\t\t((";
  protected final String TEXT_100 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_101 = ")).add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_102 = ".";
  protected final String TEXT_103 = ", diagram));";
  protected final String TEXT_104 = NL + "\t\t\t\tint nodeVID = ";
  protected final String TEXT_105 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\t\t\tif (";
  protected final String TEXT_106 = " == nodeVID) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_107 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_108 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\t\t\t\tcreate";
  protected final String TEXT_109 = "Children(nextNode, nextDestination);" + NL + "\t\t\t\t}";
  protected final String TEXT_110 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_111 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_112 = NL + "\t\t";
  protected final String TEXT_113 = " linkElements;";
  protected final String TEXT_114 = NL + "\t\tlinkElements = (";
  protected final String TEXT_115 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_116 = ");" + NL + "\t\tfor (";
  protected final String TEXT_117 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t\t";
  protected final String TEXT_118 = " edge = (";
  protected final String TEXT_119 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), nextLinkDescriptor.getDiagram(), \"\", ";
  protected final String TEXT_120 = ".APPEND, ";
  protected final String TEXT_121 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tif (edge != null) {" + NL + "\t\t\t\tedge.setSource((";
  protected final String TEXT_122 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\t\tedge.setTarget((";
  protected final String TEXT_123 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_124 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class LinkDescriptor {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject mySource;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject myDestination;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate IAdaptable mySemanticAdapter;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate Diagram myDiagram;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected LinkDescriptor(EObject source, EObject destination, EObject linkElement, Diagram diagram) {" + NL + "\t\t\tthis(source, destination, diagram);" + NL + "\t\t\tmySemanticAdapter = new ";
  protected final String TEXT_125 = "(linkElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected LinkDescriptor(EObject source, EObject destination, ";
  protected final String TEXT_126 = " elementType, Diagram diagram) {" + NL + "\t\t\tthis(source, destination, diagram);" + NL + "\t\t\tfinal ";
  protected final String TEXT_127 = " elementTypeCopy = elementType;" + NL + "\t\t\tmySemanticAdapter = new ";
  protected final String TEXT_128 = "() {" + NL + "\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_129 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate LinkDescriptor(EObject source, EObject destination, Diagram diagram) {" + NL + "\t\t\tmySource = source;" + NL + "\t\t\tmyDestination = destination;" + NL + "\t\t\tmyDiagram = diagram;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected EObject getSource() {" + NL + "\t\t\treturn mySource;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected EObject getDestination() {" + NL + "\t\t\treturn myDestination;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected Diagram getDiagram() {" + NL + "\t\t\treturn myDiagram;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected IAdaptable getSemanticAdapter() {" + NL + "\t\t\treturn mySemanticAdapter;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_130 = NL;
d131 1
a132 1
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
a133 15
final String modelID = editorGen.getModelID();
List genLinks = genDiagram.getLinks();

// Collecting all phantom elements
Map genClass2Phantom = new LinkedHashMap();
for (Iterator topLevelNodes = genDiagram.getTopLevelNodes().iterator(); topLevelNodes.hasNext();) {
	GenTopLevelNode nextTopLevelNode = (GenTopLevelNode) topLevelNodes.next();
	TypeModelFacet nextModelFacet = nextTopLevelNode.getModelFacet();
	if (!nextModelFacet.isPhantomElement()) {
		continue;
	}
	genClass2Phantom.put(nextModelFacet.getMetaClass(), nextTopLevelNode);
}

boolean generateGetCompartment = false;
a146 4
importManager.addImport("java.io.IOException");
importManager.addImport("java.util.Collections");
importManager.addImport("java.util.HashMap");
importManager.addImport("java.util.Map");
a151 4
importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.emf.ecore.resource.Resource");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
d154 1
a154 1
importManager.addImport("org.eclipse.jface.dialogs.MessageDialog");
d158 2
a161 21
importManager.addImport("org.eclipse.ui.PartInitException");
importManager.addImport("org.eclipse.ui.ide.IDE");
importManager.addImport("org.eclipse.gmf.runtime.diagram.core.services.ViewService");
importManager.addImport("org.eclipse.jface.dialogs.IDialogSettings");
importManager.addImport("org.eclipse.jface.wizard.WizardDialog");
importManager.addImport("org.eclipse.jface.wizard.Wizard");
importManager.addImport("org.eclipse.ui.dialogs.WizardNewFileCreationPage");
importManager.addImport("org.eclipse.emf.transaction.TransactionalEditingDomain");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.GMFEditingDomainFactory");
importManager.addImport("org.eclipse.emf.common.util.WrappedException");
importManager.addImport("org.eclipse.emf.ecore.resource.ResourceSet");
importManager.addImport("org.eclipse.emf.common.util.URI");
importManager.addImport("java.util.List");
importManager.addImport("java.util.LinkedList");
importManager.addImport("org.eclipse.core.runtime.IProgressMonitor");
importManager.addImport("org.eclipse.gmf.runtime.emf.commands.core.command.AbstractTransactionalCommand");
importManager.addImport("org.eclipse.core.runtime.IAdaptable");
importManager.addImport("org.eclipse.core.commands.ExecutionException");
importManager.addImport("org.eclipse.gmf.runtime.common.core.command.CommandResult");
importManager.addImport("org.eclipse.core.commands.operations.OperationHistoryFactory");
importManager.addImport("org.eclipse.core.runtime.NullProgressMonitor");
d168 1
a168 4
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

d170 1
a170 1
    stringBuffer.append(nextLink.getVisualID());
d172 1
a172 1
    stringBuffer.append(nextLink.getVisualID());
d174 1
a174 3
    
}

a175 333
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_13);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_16);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_17);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_18);
    
}

    stringBuffer.append(TEXT_19);
    stringBuffer.append(modelID);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_21);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_22);
    }
    stringBuffer.append(TEXT_23);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_24);
    
if (!genClass2Phantom.isEmpty()) {

    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_26);
    
	for (Iterator phantoms = genClass2Phantom.values().iterator(); phantoms.hasNext();) {
		GenTopLevelNode phantomNode = (GenTopLevelNode) phantoms.next();

    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(phantomNode.getVisualID());
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_31);
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_32);
    
	}

    stringBuffer.append(TEXT_33);
    
}

    stringBuffer.append(TEXT_34);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_35);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_37);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
    stringBuffer.append(TEXT_39);
    } else {
    stringBuffer.append(TEXT_40);
    }
    stringBuffer.append(TEXT_41);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_42);
    
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();

    stringBuffer.append(TEXT_43);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_45);
    
	if (nextContainer.getContainedNodes().size() > 0) {

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_47);
    
	} else if (nextContainer instanceof GenNode && ((GenNode) nextContainer).getCompartments().size() > 0) {

    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_49);
    
	}
	
	for (Iterator children = nextContainer.getContainedNodes().iterator(); children.hasNext();) {
		GenNode nextChild = (GenNode) children.next();
		TypeModelFacet typeModelFacet = nextChild.getModelFacet();
		if (typeModelFacet.isPhantomElement()) {
// Skipping top-leve phantoms
			continue;
		}
		GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_52);
    
		} else {

    stringBuffer.append(TEXT_53);
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_54);
    
		}

    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(nextChild.getVisualID());
    stringBuffer.append(TEXT_57);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_58);
    stringBuffer.append(nextChild.getUniqueIdentifier());
    stringBuffer.append(TEXT_59);
    
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_60);
    
		}
	}
	
	if (nextContainer instanceof GenNode) {
		GenNode nextNode = (GenNode) nextContainer;
		for (Iterator compartments = nextNode.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment nextCompartment = (GenCompartment) compartments.next();
			generateGetCompartment = true;

    stringBuffer.append(TEXT_61);
    stringBuffer.append(nextCompartment.getTitle());
    stringBuffer.append(TEXT_62);
    stringBuffer.append(nextCompartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_63);
    
		}
	}

    stringBuffer.append(TEXT_64);
    
}

if (generateGetCompartment) {

    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_72);
    
}

    stringBuffer.append(TEXT_73);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		GenFeature childMetaFeature = typeLinkModelFacet.getChildMetaFeature();

    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_76);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_77);
    
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_80);
    
		} else {

    stringBuffer.append(TEXT_81);
    		
		}

    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_84);
    stringBuffer.append(getFeatureValueGetter("nextValue", typeLinkModelFacet.getTargetMetaFeature(), true, importManager));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_87);
    
		if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_88);
    
		}

    stringBuffer.append(TEXT_89);
    
	}
}

    stringBuffer.append(TEXT_90);
    
for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();
	if (nextLink.getModelFacet() instanceof FeatureModelFacet) {
		FeatureModelFacet linkFMF = (FeatureModelFacet) nextLink.getModelFacet();
		GenFeature genFeature = linkFMF.getMetaFeature();
		GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());

    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(genFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_93);
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_94);
    		if (genFeature.isListType()) {
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_97);
    		} else {
    stringBuffer.append(TEXT_98);
    		}
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_103);
    		if (genFeature.isContains() && phantomNode != null) {
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(phantomNode.getVisualID());
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_108);
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_109);
    		}
    stringBuffer.append(TEXT_110);
    
	}
}

    stringBuffer.append(TEXT_111);
    
if (genLinks.size() > 0) {

    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_113);
    
}

for (Iterator it = genLinks.iterator(); it.hasNext();) {
	GenLink nextLink = (GenLink) it.next();

    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_123);
    
}

    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.core.util.EObjectAdapter"));
    stringBuffer.append(TEXT_125);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_126);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_127);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_129);
a176 1
    stringBuffer.append(TEXT_130);
@


1.33
log
@#129162 Reinitializing diagrams / InitDiagramFileAction.javajet
@
text
@d21 129
a149 126
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " implements IObjectActionDelegate, IInputValidator {" + NL;
  protected final String TEXT_4 = NL + "\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Integer LINK_KEY_";
  protected final String TEXT_5 = " = new Integer(";
  protected final String TEXT_6 = ");";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension(\"editorGen.getDiagramFileExtension()\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tNewDiagramFileWizard wizard = new NewDiagramFileWizard();" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_8 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new ";
  protected final String TEXT_9 = " diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class NewDiagramFileWizard extends Wizard {" + NL + "" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WizardNewFileCreationPage myFileCreationPage;" + NL + "\t\t" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic void addPages() {" + NL + "\t\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection);" + NL + "\t\t\tmyFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_10 = "\").lastSegment());" + NL + "\t\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\t\tmyFileCreationPage.setDescription(\"Create new diagram and initialize it using specified ";
  protected final String TEXT_11 = " model content\");" + NL + "\t\t\taddPage(myFileCreationPage);" + NL + "\t\t}" + NL + "" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic boolean performFinish() {" + NL + "\t\t\tfinal EObject diagramModelObject = load();" + NL + "\t\t\tif (diagramModelObject == null) {" + NL + "\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "" + NL + "\t\t\tList affectedFiles = new LinkedList();" + NL + "\t\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\t\tint diagramVID = ";
  protected final String TEXT_12 = ".INSTANCE.getDiagramVisualID(diagramModelObject);" + NL + "\t\t\t\t\tif (diagramVID != ";
  protected final String TEXT_13 = ") {" + NL + "\t\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t\t}";
  protected final String TEXT_14 = NL + "\t\t\t\t\tmyLinkVID2EObjectMap.put(LINK_KEY_";
  protected final String TEXT_15 = ", new LinkedList());";
  protected final String TEXT_16 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, \"";
  protected final String TEXT_17 = "\", ";
  protected final String TEXT_18 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);";
  protected final String TEXT_19 = NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram.getElement());";
  protected final String TEXT_20 = NL + "\t\t\t\t\tcreate";
  protected final String TEXT_21 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_22 = NL + "\t\t\t\t\tResource resource = diagramModelObject.eResource();" + NL + "\t\t\t\t\tint nodeVID;" + NL + "\t\t\t\t\tfor (";
  protected final String TEXT_23 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\t\t\t\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_24 = NL + "\t\t\t\t\t\tnodeVID = ";
  protected final String TEXT_25 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_26 = " == nodeVID) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_27 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_28 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\t\t\t\tcreate";
  protected final String TEXT_29 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\t\t\t}";
  protected final String TEXT_31 = "\t\t" + NL + "\t\t\t\t\tcreateLinks();" + NL + "\t\t\t\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\t\t\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), diagramFile);" + NL + "\t\t\t} catch (ExecutionException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_32 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t\t} catch (IOException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject load() {";
  protected final String TEXT_35 = NL + "\t\t\tResourceSet resourceSet = new ";
  protected final String TEXT_36 = "();";
  protected final String TEXT_37 = NL + "\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_38 = NL + "\t\t\ttry {" + NL + "\t\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t\t} catch (WrappedException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_39 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t";
  protected final String TEXT_40 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_41 = "Children(";
  protected final String TEXT_42 = " viewObject, EObject modelObject) {";
  protected final String TEXT_43 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_44 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = " nextNode;";
  protected final String TEXT_47 = NL + "\t\tfor (";
  protected final String TEXT_48 = " values = ";
  protected final String TEXT_49 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_50 = NL + "\t\tnextValue = ";
  protected final String TEXT_51 = ";";
  protected final String TEXT_52 = NL + "\t\tnodeVID = ";
  protected final String TEXT_53 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_54 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_55 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_56 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\t}";
  protected final String TEXT_58 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_59 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_60 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_61 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_62 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_63 = " getCompartment(";
  protected final String TEXT_64 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_65 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_66 = " nextView = (";
  protected final String TEXT_67 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_68 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_69 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {\t";
  protected final String TEXT_71 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_72 = ".eINSTANCE.get";
  protected final String TEXT_73 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_74 = ";";
  protected final String TEXT_75 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_76 = " values = ((";
  protected final String TEXT_77 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_78 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_79 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_80 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_81 = " == linkVID) {" + NL + "\t\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_82 = ";" + NL + "\t\t\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\t\t\tEObject dst = (EObject) structuralFeatureResult;" + NL + "\t\t\t\t\t((";
  protected final String TEXT_83 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_84 = ")).add(new LinkDescriptor(container, dst, nextValue, diagram));" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_85 = NL + "\t\t\t}";
  protected final String TEXT_86 = NL + "\t\t}";
  protected final String TEXT_87 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_88 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_89 = ".eINSTANCE.get";
  protected final String TEXT_90 = "())) {" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_91 = ";";
  protected final String TEXT_92 = NL + "\t\t\tfor (";
  protected final String TEXT_93 = " destinations = ((";
  protected final String TEXT_94 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject nextDestination = (EObject) destinations.next();";
  protected final String TEXT_95 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject) {" + NL + "\t\t\t\tEObject nextDestination = (EObject) structuralFeatureResult;";
  protected final String TEXT_96 = NL + "\t\t\t\t((";
  protected final String TEXT_97 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_98 = ")).add(new LinkDescriptor(container, nextDestination, ";
  protected final String TEXT_99 = ".";
  protected final String TEXT_100 = ", diagram));";
  protected final String TEXT_101 = NL + "\t\t\t\tint nodeVID = ";
  protected final String TEXT_102 = ".INSTANCE.getNodeVisualID(diagram, nextDestination, \"\");" + NL + "\t\t\t\tif (";
  protected final String TEXT_103 = " == nodeVID) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_104 = " nextNode = ViewService.createNode(diagram, nextDestination, null, ";
  protected final String TEXT_105 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tmyEObject2NodeMap.put(nextDestination, nextNode);" + NL + "\t\t\t\t\tcreate";
  protected final String TEXT_106 = "Children(nextNode, nextDestination);" + NL + "\t\t\t\t}";
  protected final String TEXT_107 = NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_108 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_109 = NL + "\t\t";
  protected final String TEXT_110 = " linkElements;";
  protected final String TEXT_111 = NL + "\t\tlinkElements = (";
  protected final String TEXT_112 = ") myLinkVID2EObjectMap.get(LINK_KEY_";
  protected final String TEXT_113 = ");" + NL + "\t\tfor (";
  protected final String TEXT_114 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tLinkDescriptor nextLinkDescriptor = (LinkDescriptor) it.next();" + NL + "\t\t\t";
  protected final String TEXT_115 = " edge = (";
  protected final String TEXT_116 = ") ViewService.getInstance().createEdge(nextLinkDescriptor.getSemanticAdapter(), nextLinkDescriptor.getDiagram(), \"\", ";
  protected final String TEXT_117 = ".APPEND, ";
  protected final String TEXT_118 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tif (edge != null) {" + NL + "\t\t\t\tedge.setSource((";
  protected final String TEXT_119 = ") myEObject2NodeMap.get(nextLinkDescriptor.getSource()));" + NL + "\t\t\t\tedge.setTarget((";
  protected final String TEXT_120 = ") myEObject2NodeMap.get(nextLinkDescriptor.getDestination()));" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_121 = NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class LinkDescriptor {" + NL + "\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject mySource;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject myDestination;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate IAdaptable mySemanticAdapter;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate Diagram myDiagram;" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected LinkDescriptor(EObject source, EObject destination, EObject linkElement, Diagram diagram) {" + NL + "\t\t\tthis(source, destination, diagram);" + NL + "\t\t\tmySemanticAdapter = new ";
  protected final String TEXT_122 = "(linkElement);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected LinkDescriptor(EObject source, EObject destination, ";
  protected final String TEXT_123 = " elementType, Diagram diagram) {" + NL + "\t\t\tthis(source, destination, diagram);" + NL + "\t\t\tfinal ";
  protected final String TEXT_124 = " elementTypeCopy = elementType;" + NL + "\t\t\tmySemanticAdapter = new ";
  protected final String TEXT_125 = "() {" + NL + "\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_126 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\treturn elementTypeCopy;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate LinkDescriptor(EObject source, EObject destination, Diagram diagram) {" + NL + "\t\t\tmySource = source;" + NL + "\t\t\tmyDestination = destination;" + NL + "\t\t\tmyDiagram = diagram;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected EObject getSource() {" + NL + "\t\t\treturn mySource;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected EObject getDestination() {" + NL + "\t\t\treturn myDestination;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected Diagram getDiagram() {" + NL + "\t\t\treturn myDiagram;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprotected IAdaptable getSemanticAdapter() {" + NL + "\t\t\treturn mySemanticAdapter;" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_127 = NL;
a270 1
importManager.emitPackageStatement(stringBuffer);
d273 10
d328 1
a328 1
    stringBuffer.append(TEXT_2);
d330 1
a330 1
    stringBuffer.append(TEXT_3);
d335 1
a335 1
    stringBuffer.append(TEXT_4);
d337 1
a337 1
    stringBuffer.append(TEXT_5);
d339 1
a339 1
    stringBuffer.append(TEXT_6);
d343 1
a343 1
    stringBuffer.append(TEXT_7);
d345 1
a345 1
    stringBuffer.append(TEXT_8);
d347 1
a347 1
    stringBuffer.append(TEXT_9);
d349 1
a349 1
    stringBuffer.append(TEXT_10);
d351 1
a351 1
    stringBuffer.append(TEXT_11);
d353 1
a353 1
    stringBuffer.append(TEXT_12);
d355 1
a355 1
    stringBuffer.append(TEXT_13);
d360 1
a360 1
    stringBuffer.append(TEXT_14);
d362 1
a362 1
    stringBuffer.append(TEXT_15);
d366 1
a366 1
    stringBuffer.append(TEXT_16);
d368 1
a368 1
    stringBuffer.append(TEXT_17);
d370 1
a370 1
    stringBuffer.append(TEXT_18);
d372 1
a372 1
    stringBuffer.append(TEXT_19);
d374 1
a374 1
    stringBuffer.append(TEXT_20);
d376 1
a376 1
    stringBuffer.append(TEXT_21);
d380 1
a380 1
    stringBuffer.append(TEXT_22);
d382 1
a382 1
    stringBuffer.append(TEXT_23);
d387 1
a387 1
    stringBuffer.append(TEXT_24);
d389 1
a389 1
    stringBuffer.append(TEXT_25);
d391 1
a391 1
    stringBuffer.append(TEXT_26);
d393 1
a393 1
    stringBuffer.append(TEXT_27);
d395 1
a395 1
    stringBuffer.append(TEXT_28);
d397 1
a397 1
    stringBuffer.append(TEXT_29);
d401 1
a401 1
    stringBuffer.append(TEXT_30);
d405 1
a405 1
    stringBuffer.append(TEXT_31);
d407 1
a407 1
    stringBuffer.append(TEXT_32);
d409 1
a409 1
    stringBuffer.append(TEXT_33);
d411 1
a411 1
    stringBuffer.append(TEXT_34);
d413 1
a413 1
    stringBuffer.append(TEXT_35);
d415 1
a415 1
    stringBuffer.append(TEXT_36);
d417 1
a417 1
    stringBuffer.append(TEXT_37);
d419 1
a419 1
    stringBuffer.append(TEXT_38);
d421 1
a421 1
    stringBuffer.append(TEXT_39);
d426 1
a426 1
    stringBuffer.append(TEXT_40);
d428 1
a428 1
    stringBuffer.append(TEXT_41);
d430 1
a430 1
    stringBuffer.append(TEXT_42);
d434 1
a434 1
    stringBuffer.append(TEXT_43);
d436 1
a436 1
    stringBuffer.append(TEXT_44);
d440 1
a440 1
    stringBuffer.append(TEXT_45);
d442 1
a442 1
    stringBuffer.append(TEXT_46);
d456 1
a456 1
    stringBuffer.append(TEXT_47);
d458 1
a458 1
    stringBuffer.append(TEXT_48);
d460 1
a460 1
    stringBuffer.append(TEXT_49);
d464 1
a464 1
    stringBuffer.append(TEXT_50);
d466 1
a466 1
    stringBuffer.append(TEXT_51);
d470 1
a470 1
    stringBuffer.append(TEXT_52);
d472 1
a472 1
    stringBuffer.append(TEXT_53);
d474 1
a474 1
    stringBuffer.append(TEXT_54);
d476 1
a476 1
    stringBuffer.append(TEXT_55);
d478 1
a478 1
    stringBuffer.append(TEXT_56);
d482 1
a482 1
    stringBuffer.append(TEXT_57);
d493 1
a493 1
    stringBuffer.append(TEXT_58);
d495 1
a495 1
    stringBuffer.append(TEXT_59);
d497 1
a497 1
    stringBuffer.append(TEXT_60);
d502 1
a502 1
    stringBuffer.append(TEXT_61);
d508 1
a508 1
    stringBuffer.append(TEXT_62);
d510 1
a510 1
    stringBuffer.append(TEXT_63);
d512 1
a512 1
    stringBuffer.append(TEXT_64);
d514 1
a514 1
    stringBuffer.append(TEXT_65);
d516 1
a516 1
    stringBuffer.append(TEXT_66);
d518 1
a518 1
    stringBuffer.append(TEXT_67);
d520 1
a520 1
    stringBuffer.append(TEXT_68);
d522 1
a522 1
    stringBuffer.append(TEXT_69);
d526 1
a526 1
    stringBuffer.append(TEXT_70);
d534 1
a534 1
    stringBuffer.append(TEXT_71);
d536 1
a536 1
    stringBuffer.append(TEXT_72);
d538 1
a538 1
    stringBuffer.append(TEXT_73);
d540 1
a540 1
    stringBuffer.append(TEXT_74);
d544 1
a544 1
    stringBuffer.append(TEXT_75);
d546 1
a546 1
    stringBuffer.append(TEXT_76);
d548 1
a548 1
    stringBuffer.append(TEXT_77);
d552 1
a552 1
    stringBuffer.append(TEXT_78);
d556 1
a556 1
    stringBuffer.append(TEXT_79);
d558 1
a558 1
    stringBuffer.append(TEXT_80);
d560 1
a560 1
    stringBuffer.append(TEXT_81);
d562 1
a562 1
    stringBuffer.append(TEXT_82);
d564 1
a564 1
    stringBuffer.append(TEXT_83);
d566 1
a566 1
    stringBuffer.append(TEXT_84);
d570 1
a570 1
    stringBuffer.append(TEXT_85);
d574 1
a574 1
    stringBuffer.append(TEXT_86);
d579 1
a579 1
    stringBuffer.append(TEXT_87);
d588 1
a588 1
    stringBuffer.append(TEXT_88);
d590 1
a590 1
    stringBuffer.append(TEXT_89);
d592 1
a592 1
    stringBuffer.append(TEXT_90);
d594 1
a594 1
    stringBuffer.append(TEXT_91);
d596 1
a596 1
    stringBuffer.append(TEXT_92);
d598 1
a598 1
    stringBuffer.append(TEXT_93);
d600 1
a600 1
    stringBuffer.append(TEXT_94);
d602 1
a602 1
    stringBuffer.append(TEXT_95);
d604 1
a604 1
    stringBuffer.append(TEXT_96);
d606 1
a606 1
    stringBuffer.append(TEXT_97);
d608 1
a608 1
    stringBuffer.append(TEXT_98);
d610 1
a610 1
    stringBuffer.append(TEXT_99);
d612 1
a612 1
    stringBuffer.append(TEXT_100);
d614 1
a614 1
    stringBuffer.append(TEXT_101);
d616 1
a616 1
    stringBuffer.append(TEXT_102);
d618 1
a618 1
    stringBuffer.append(TEXT_103);
d620 1
a620 1
    stringBuffer.append(TEXT_104);
d622 1
a622 1
    stringBuffer.append(TEXT_105);
d624 1
a624 1
    stringBuffer.append(TEXT_106);
d626 1
a626 1
    stringBuffer.append(TEXT_107);
d631 1
a631 1
    stringBuffer.append(TEXT_108);
d635 1
a635 1
    stringBuffer.append(TEXT_109);
d637 1
a637 1
    stringBuffer.append(TEXT_110);
d644 1
a644 1
    stringBuffer.append(TEXT_111);
d646 1
a646 1
    stringBuffer.append(TEXT_112);
d648 1
a648 1
    stringBuffer.append(TEXT_113);
d650 1
a650 1
    stringBuffer.append(TEXT_114);
d652 1
a652 1
    stringBuffer.append(TEXT_115);
d654 1
a654 1
    stringBuffer.append(TEXT_116);
d656 1
a656 1
    stringBuffer.append(TEXT_117);
d658 1
a658 1
    stringBuffer.append(TEXT_118);
d660 1
a660 1
    stringBuffer.append(TEXT_119);
d662 1
a662 1
    stringBuffer.append(TEXT_120);
d666 1
a666 1
    stringBuffer.append(TEXT_121);
d668 1
a668 1
    stringBuffer.append(TEXT_122);
d670 1
a670 1
    stringBuffer.append(TEXT_123);
d672 1
a672 1
    stringBuffer.append(TEXT_124);
d674 1
a674 1
    stringBuffer.append(TEXT_125);
d676 1
a676 1
    stringBuffer.append(TEXT_126);
d678 1
a678 1
    stringBuffer.append(TEXT_127);
@


1.32
log
@#127696 Templates should use new transaction API
@
text
@d22 125
a146 138
  protected final String TEXT_3 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension(\"editorGen.getDiagramFileExtension()\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tNewDiagramFileWizard wizard = new NewDiagramFileWizard();" + NL + "        IDialogSettings pluginDialogSettings = ";
  protected final String TEXT_4 = ".getInstance().getDialogSettings();" + NL + "        IDialogSettings initDiagramFileSettings = pluginDialogSettings.getSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        if (initDiagramFileSettings == null) {" + NL + "        \tinitDiagramFileSettings = pluginDialogSettings.addNewSection(\"InisDiagramFile\"); //$NON-NLS-1$" + NL + "        }" + NL + "        wizard.setDialogSettings(initDiagramFileSettings);" + NL + "\t\twizard.setForcePreviousAndNextButtons(false);" + NL + "\t\twizard.setWindowTitle(\"Initialize new ";
  protected final String TEXT_5 = " diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class NewDiagramFileWizard extends Wizard {" + NL + "\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate TransactionalEditingDomain myEditingDomain = GMFEditingDomainFactory.INSTANCE.createEditingDomain();" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WizardNewFileCreationPage myFileCreationPage;" + NL + "\t\t" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic void addPages() {" + NL + "\t\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection);" + NL + "\t\t\tmyFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension(\"";
  protected final String TEXT_6 = "\").lastSegment());" + NL + "\t\t\tmyFileCreationPage.setTitle(\"Diagram file\");" + NL + "\t\t\tmyFileCreationPage.setDescription(\"Create new diagram and initialize it using specified ";
  protected final String TEXT_7 = " model content\");" + NL + "\t\t\taddPage(myFileCreationPage);" + NL + "\t\t}" + NL + "" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic boolean performFinish() {" + NL + "\t\t\tfinal EObject diagramModelObject = load();" + NL + "\t\t\tif (diagramModelObject == null) {" + NL + "\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tIFile diagramFile = myFileCreationPage.createNewFile();" + NL + "\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();" + NL + "\t\t\tfinal Resource diagramResource = resourceSet.createResource(URI.createPlatformResourceURI(diagramFile.getFullPath().toString()));" + NL + "" + NL + "\t\t\tList affectedFiles = new LinkedList();" + NL + "\t\t\taffectedFiles.add(mySelectedModelFile);" + NL + "\t\t\taffectedFiles.add(diagramFile);" + NL + "\t\t\t" + NL + "\t\t\tAbstractTransactionalCommand command = new AbstractTransactionalCommand(myEditingDomain, \"Initializing diagram contents\", affectedFiles) { //$NON-NLS-1$" + NL + "\t\t\t\tprotected CommandResult doExecuteWithResult(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {" + NL + "\t\t\t\t\tint diagramVID = ";
  protected final String TEXT_8 = ".INSTANCE.getDiagramVisualID(diagramModelObject);" + NL + "\t\t\t\t\tif (diagramVID != ";
  protected final String TEXT_9 = ") {" + NL + "\t\t\t\t\t\treturn CommandResult.newErrorCommandResult(\"Incorrect model object stored as a root resource object\"); //$NON-NLS-1$" + NL + "\t\t\t\t\t}";
  protected final String TEXT_10 = NL + "\t\t\t\t\tmyLinkVID2EObjectMap.put(new Integer(";
  protected final String TEXT_11 = "), new LinkedList());";
  protected final String TEXT_12 = NL + "\t\t\t\t\tDiagram diagram = ViewService.createDiagram(diagramModelObject, \"";
  protected final String TEXT_13 = "\", ";
  protected final String TEXT_14 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram);";
  protected final String TEXT_15 = NL + "\t\t\t\t\tdiagramResource.getContents().add(diagram.getElement());";
  protected final String TEXT_16 = NL + "\t\t\t\t\tcreate";
  protected final String TEXT_17 = "Children(diagram, diagramModelObject);";
  protected final String TEXT_18 = NL + "\t\t\t\t\tResource resource = diagramModelObject.eResource();" + NL + "\t\t\t\t\tint nodeVID;" + NL + "\t\t\t\t\tfor (";
  protected final String TEXT_19 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\t\t\t\tif (nextResourceObject == diagramModelObject) {" + NL + "\t\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_20 = NL + "\t\t\t\t\t\tnodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\t\t\t\tif (";
  protected final String TEXT_22 = " == nodeVID) {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_23 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_24 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\t\t\t\tcreate";
  protected final String TEXT_25 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\t\t\t\tcontinue;" + NL + "\t\t\t\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\t\t\t}";
  protected final String TEXT_27 = "\t\t" + NL + "\t\t\t\t\tcreateLinks();" + NL + "\t\t\t\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\t\t\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t\t\t\t\treturn CommandResult.newOKCommandResult();" + NL + "\t\t\t\t}" + NL + "\t\t\t};" + NL + "\t\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tOperationHistoryFactory.getOperationHistory().execute(command, new NullProgressMonitor(), null);" + NL + "\t\t\t\tdiagramResource.save(Collections.EMPTY_MAP);" + NL + "\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), diagramFile);" + NL + "\t\t\t} catch (ExecutionException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_28 = ".getInstance().logError(\"Unable to create model and diagram\", e); //$NON-NLS-1$" + NL + "\t\t\t} catch (IOException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_29 = ".getInstance().logError(\"Save operation failed for: \" + diagramFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_30 = ".getInstance().logError(\"Unable to open editor\", ex); //$NON-NLS-1$" + NL + "\t\t\t}\t\t\t" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t     */" + NL + "\t\tprivate EObject load() {";
  protected final String TEXT_31 = NL + "\t\t\tResourceSet resourceSet = new ";
  protected final String TEXT_32 = "();";
  protected final String TEXT_33 = NL + "\t\t\tResourceSet resourceSet = myEditingDomain.getResourceSet();";
  protected final String TEXT_34 = NL + "\t\t\ttry {" + NL + "\t\t\t\tResource resource = resourceSet.getResource(URI.createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t\t} catch (WrappedException ex) {" + NL + "\t\t\t\t";
  protected final String TEXT_35 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "\t";
  protected final String TEXT_36 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_37 = "Children(";
  protected final String TEXT_38 = " viewObject, EObject modelObject) {";
  protected final String TEXT_39 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_40 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " nextNode;";
  protected final String TEXT_43 = NL + "\t\tfor (";
  protected final String TEXT_44 = " values = ";
  protected final String TEXT_45 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_46 = NL + "\t\tnextValue = ";
  protected final String TEXT_47 = ";";
  protected final String TEXT_48 = NL + "\t\tnodeVID = ";
  protected final String TEXT_49 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_50 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_51 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_52 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_53 = NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_55 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_56 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_58 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_59 = " getCompartment(";
  protected final String TEXT_60 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_61 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_62 = " nextView = (";
  protected final String TEXT_63 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_64 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_65 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_67 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_70 = ";";
  protected final String TEXT_71 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_72 = " values = ((";
  protected final String TEXT_73 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_74 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_75 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_76 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_77 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_78 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_79 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_80 = NL + "\t\t\t}";
  protected final String TEXT_81 = NL + "\t\t}";
  protected final String TEXT_82 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_83 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_84 = ".eINSTANCE.get";
  protected final String TEXT_85 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_86 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_87 = "))).add(container);";
  protected final String TEXT_88 = NL + "\t\t\tfor (";
  protected final String TEXT_89 = " values = ";
  protected final String TEXT_90 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_91 = NL + "\t\t\tEObject nextValue = ";
  protected final String TEXT_92 = ";";
  protected final String TEXT_93 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_94 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_95 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_96 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_97 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_98 = "Children(nextNode, nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t\t}";
  protected final String TEXT_100 = NL + "\t\t}";
  protected final String TEXT_101 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_102 = NL + "\t\t";
  protected final String TEXT_103 = " linkElements;";
  protected final String TEXT_104 = NL + "\t\tlinkElements = (";
  protected final String TEXT_105 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_106 = "));" + NL + "\t\tfor (";
  protected final String TEXT_107 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_108 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_109 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_110 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_111 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_112 = NL + "\t\t\t";
  protected final String TEXT_113 = " srcNode = (";
  protected final String TEXT_114 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_115 = ";";
  protected final String TEXT_116 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_117 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_118 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_119 = " destinations = ((";
  protected final String TEXT_120 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_121 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_122 = NL + "\t\t\t";
  protected final String TEXT_123 = " dstNode = (";
  protected final String TEXT_124 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_125 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_126 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_127 = NL + "\t\t\t\t\t";
  protected final String TEXT_128 = " edge = (";
  protected final String TEXT_129 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_130 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_131 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_132 = ".";
  protected final String TEXT_133 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_134 = ".APPEND, ";
  protected final String TEXT_135 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_136 = NL + "\t\t\t\t}";
  protected final String TEXT_137 = NL + "\t\t\t}";
  protected final String TEXT_138 = NL + "\t\t}";
  protected final String TEXT_139 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_140 = NL;
d319 13
d333 1
a333 1
    stringBuffer.append(TEXT_4);
d335 1
a335 1
    stringBuffer.append(TEXT_5);
d337 1
a337 1
    stringBuffer.append(TEXT_6);
d339 1
a339 1
    stringBuffer.append(TEXT_7);
d341 1
a341 1
    stringBuffer.append(TEXT_8);
d343 1
a343 1
    stringBuffer.append(TEXT_9);
d348 1
a348 1
    stringBuffer.append(TEXT_10);
d350 1
a350 1
    stringBuffer.append(TEXT_11);
d354 1
a354 1
    stringBuffer.append(TEXT_12);
d356 1
a356 1
    stringBuffer.append(TEXT_13);
d358 1
a358 1
    stringBuffer.append(TEXT_14);
d360 1
a360 1
    stringBuffer.append(TEXT_15);
d362 1
a362 1
    stringBuffer.append(TEXT_16);
d364 1
a364 1
    stringBuffer.append(TEXT_17);
d368 1
a368 1
    stringBuffer.append(TEXT_18);
d370 1
a370 1
    stringBuffer.append(TEXT_19);
d375 1
a375 1
    stringBuffer.append(TEXT_20);
d377 1
a377 1
    stringBuffer.append(TEXT_21);
d379 1
a379 1
    stringBuffer.append(TEXT_22);
d381 1
a381 1
    stringBuffer.append(TEXT_23);
d383 1
a383 1
    stringBuffer.append(TEXT_24);
d385 1
a385 1
    stringBuffer.append(TEXT_25);
d389 1
a389 1
    stringBuffer.append(TEXT_26);
d393 1
a393 1
    stringBuffer.append(TEXT_27);
d395 1
a395 1
    stringBuffer.append(TEXT_28);
d397 1
a397 1
    stringBuffer.append(TEXT_29);
d399 1
a399 1
    stringBuffer.append(TEXT_30);
d401 1
a401 1
    stringBuffer.append(TEXT_31);
d403 1
a403 1
    stringBuffer.append(TEXT_32);
d405 1
a405 1
    stringBuffer.append(TEXT_33);
d407 1
a407 1
    stringBuffer.append(TEXT_34);
d409 1
a409 1
    stringBuffer.append(TEXT_35);
d414 1
a414 1
    stringBuffer.append(TEXT_36);
d416 1
a416 1
    stringBuffer.append(TEXT_37);
d418 1
a418 1
    stringBuffer.append(TEXT_38);
d422 1
a422 1
    stringBuffer.append(TEXT_39);
d424 1
a424 1
    stringBuffer.append(TEXT_40);
d428 1
a428 1
    stringBuffer.append(TEXT_41);
d430 1
a430 1
    stringBuffer.append(TEXT_42);
d444 1
a444 1
    stringBuffer.append(TEXT_43);
d446 1
a446 1
    stringBuffer.append(TEXT_44);
d448 1
a448 1
    stringBuffer.append(TEXT_45);
d452 1
a452 1
    stringBuffer.append(TEXT_46);
d454 1
a454 1
    stringBuffer.append(TEXT_47);
d458 1
a458 1
    stringBuffer.append(TEXT_48);
d460 1
a460 1
    stringBuffer.append(TEXT_49);
d462 1
a462 1
    stringBuffer.append(TEXT_50);
d464 1
a464 1
    stringBuffer.append(TEXT_51);
d466 1
a466 1
    stringBuffer.append(TEXT_52);
d470 1
a470 1
    stringBuffer.append(TEXT_53);
d481 1
a481 1
    stringBuffer.append(TEXT_54);
d483 1
a483 1
    stringBuffer.append(TEXT_55);
d485 1
a485 1
    stringBuffer.append(TEXT_56);
d490 1
a490 1
    stringBuffer.append(TEXT_57);
d496 1
a496 1
    stringBuffer.append(TEXT_58);
d498 1
a498 1
    stringBuffer.append(TEXT_59);
d500 1
a500 1
    stringBuffer.append(TEXT_60);
d502 1
a502 1
    stringBuffer.append(TEXT_61);
d504 1
a504 1
    stringBuffer.append(TEXT_62);
d506 1
a506 1
    stringBuffer.append(TEXT_63);
d508 1
a508 1
    stringBuffer.append(TEXT_64);
d510 1
a510 1
    stringBuffer.append(TEXT_65);
d514 1
a514 1
    stringBuffer.append(TEXT_66);
d522 1
a522 1
    stringBuffer.append(TEXT_67);
d524 1
a524 1
    stringBuffer.append(TEXT_68);
d526 1
a526 1
    stringBuffer.append(TEXT_69);
d528 1
a528 1
    stringBuffer.append(TEXT_70);
d532 1
a532 1
    stringBuffer.append(TEXT_71);
d534 1
a534 1
    stringBuffer.append(TEXT_72);
d536 1
a536 1
    stringBuffer.append(TEXT_73);
d540 1
a540 1
    stringBuffer.append(TEXT_74);
d544 1
a544 1
    stringBuffer.append(TEXT_75);
d546 1
a546 1
    stringBuffer.append(TEXT_76);
d548 3
a550 1
    stringBuffer.append(TEXT_77);
d552 1
a552 1
    stringBuffer.append(TEXT_78);
d554 1
a554 1
    stringBuffer.append(TEXT_79);
d558 1
a558 1
    stringBuffer.append(TEXT_80);
d562 1
a562 1
    stringBuffer.append(TEXT_81);
d567 1
a567 1
    stringBuffer.append(TEXT_82);
d574 1
d576 1
a576 1
    stringBuffer.append(TEXT_83);
d578 1
a578 1
    stringBuffer.append(TEXT_84);
d580 1
a580 16
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_87);
    
		if (genFeature.isContains()) {
// Processing phantom elements
// TODO: separate this code into incliuded file together with part of create???Children() operation
			GenTopLevelNode phantomNode = (GenTopLevelNode) genClass2Phantom.get(genFeature.getTypeGenClass());
			if (phantomNode != null) {
				if (genFeature.isListType()) {

    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_89);
a581 4
    stringBuffer.append(TEXT_90);
    
				} else {

d583 1
a583 1
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
d585 1
a585 3
    
				}

d587 1
a587 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d589 1
a589 1
    stringBuffer.append(phantomNode.getVisualID());
d591 1
a591 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d593 1
a593 1
    stringBuffer.append(pluginActivatorClass);
d595 1
a595 1
    stringBuffer.append(phantomNode.getUniqueIdentifier());
d597 1
a597 3
    
				if (genFeature.isListType()) {

d599 1
a599 5
    
				}
			}
		}

d601 14
d619 1
a619 1
    stringBuffer.append(TEXT_101);
d623 1
a623 1
    stringBuffer.append(TEXT_102);
d625 1
a625 1
    stringBuffer.append(TEXT_103);
a630 1
	GenFeature domainLinkTargetGenFeature;
d632 1
a632 1
    stringBuffer.append(TEXT_104);
d634 1
a634 1
    stringBuffer.append(TEXT_105);
d636 1
a636 1
    stringBuffer.append(TEXT_106);
a637 27
    stringBuffer.append(TEXT_107);
    	
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet typeLinkModelFacet = (TypeLinkModelFacet) nextLink.getModelFacet();
		domainLinkTargetGenFeature = typeLinkModelFacet.getTargetMetaFeature();
		if (typeLinkModelFacet.getSourceMetaFeature() != null) {

    stringBuffer.append(TEXT_108);
    stringBuffer.append(getFeatureValueGetter("linkElement", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
    stringBuffer.append(TEXT_109);
    
		} else {

    stringBuffer.append(TEXT_110);
    
		}
	} else {
		domainLinkTargetGenFeature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();

    stringBuffer.append(TEXT_111);
    	
	}

    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d639 1
a639 1
    stringBuffer.append(getFeatureValueGetter("linkElement", domainLinkTargetGenFeature, true, importManager));
d641 1
a641 3
    
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {

d643 1
a643 4
    
	} else {
		if (domainLinkTargetGenFeature.isListType()) {

d645 1
a645 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d647 1
a647 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d649 1
a649 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d651 2
a652 2
    	
		} else {
d655 1
a655 4
    
		}
	}

d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d661 1
a661 3
    
	if (nextLink.getModelFacet() instanceof TypeLinkModelFacet) {

d663 1
a663 1
    stringBuffer.append(pluginActivatorClass);
d665 1
a665 3
    
	} else {

a666 34
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_128);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_130);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_131);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_132);
    stringBuffer.append(nextLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_133);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
    stringBuffer.append(TEXT_134);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_135);
    
		if (domainLinkTargetGenFeature.isListType()) {

    stringBuffer.append(TEXT_136);
    
}

    stringBuffer.append(TEXT_137);
    	
	}

    stringBuffer.append(TEXT_138);
    
}

    stringBuffer.append(TEXT_139);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_140);
@


1.31
log
@missed Iterator import
@
text
@d22 1
a22 1
  protected final String TEXT_3 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelectedModelFile;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IStructuredSelection mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelectedModelFile = null;" + NL + "\t\tmySelection = StructuredSelection.EMPTY;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IStructuredSelection) selection;" + NL + "\t\tmySelectedModelFile = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelectedModelFile.getParent().getFile(new Path(newText).addFileExtension(\"editorGen.getDiagramFileExtension()\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tNewDiagramFileWizard wizard = new NewDiagramFileWizard();" + NL + "        IDialogSettings pluginDialogSettings = ";
d24 1
a24 1
  protected final String TEXT_5 = " diagram file\");" + NL + "" + NL + "        WizardDialog dialog = new WizardDialog(myPart.getSite().getShell(), wizard);" + NL + "        dialog.create();" + NL + "        dialog.getShell().setSize(Math.max(500, dialog.getShell().getSize().x), 500);" + NL + "        dialog.open();" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate class NewDiagramFileWizard extends Wizard {" + NL + "\t\t" + NL + "\t    /**" + NL + "    \t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate WizardNewFileCreationPage myFileCreationPage;" + NL + "\t\t" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic void addPages() {" + NL + "\t\t\tmyFileCreationPage = new WizardNewFileCreationPage(\"Initialize new Ecore diagram file\", mySelection);" + NL + "\t\t\tmyFileCreationPage.setFileName(mySelectedModelFile.getProjectRelativePath().removeFileExtension().addFileExtension(\"";
d26 134
a159 137
  protected final String TEXT_7 = " model content\");" + NL + "\t\t\taddPage(myFileCreationPage);" + NL + "\t\t}" + NL + "" + NL + "\t    /**" + NL + "\t     * @@generated" + NL + "\t     */" + NL + "\t\tpublic boolean performFinish() {" + NL + "\t\t\tfinal EObject diagramModelObject = load();" + NL + "\t\t\tif (diagramModelObject == null) {" + NL + "\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tmyFileCreationPage.getFileName();" + NL + "\t\t\t" + NL + "\t\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "" + NL + "\t\t\t\tpublic Object run() {" + NL + "\t\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\tIFile destFile = myFileCreationPage.createNewFile();" + NL + "\t\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_8 = ".getInstance().logError(\"Unable to open editor\", ex);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t}" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_9 = NL + "\t\t";
  protected final String TEXT_10 = " resourceSet = new ";
  protected final String TEXT_11 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_12 = ".createPlatformResourceURI(mySelectedModelFile.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(\"Unable to load resource: \" + mySelectedModelFile.getFullPath().toString(), ex);" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_14 = NL + "\t\tString resourcePath = mySelectedModelFile.getLocation().toOSString();" + NL + "\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\tif (modelResource == null) {" + NL + "\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t}" + NL + "\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Unable to load resource: \" + resourcePath, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_16 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_17 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_18 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_19 = ".getInstance().logError(\"Save operation failed for: \" + filePath, ex);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_20 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID != ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_22 = NL + "\t\tmyLinkVID2EObjectMap.put(new Integer(";
  protected final String TEXT_23 = "), new ";
  protected final String TEXT_24 = "());";
  protected final String TEXT_25 = NL + "\t\tDiagram diagram = ViewService.createDiagram(diagramModel, \"";
  protected final String TEXT_26 = "\", ";
  protected final String TEXT_27 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreate";
  protected final String TEXT_28 = "Children(diagram, diagramModel);";
  protected final String TEXT_29 = NL + "\t\tResource resource = diagramModel.eResource();" + NL + "\t\tint nodeVID;" + NL + "\t\tfor (";
  protected final String TEXT_30 = " it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\tif (nextResourceObject == diagramModel) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_31 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_32 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_33 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_34 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_35 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_36 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_37 = NL + "\t\t}";
  protected final String TEXT_38 = "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_39 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_40 = "Children(";
  protected final String TEXT_41 = " viewObject, EObject modelObject) {";
  protected final String TEXT_42 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_43 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_44 = NL + "\t\t";
  protected final String TEXT_45 = " nextNode;";
  protected final String TEXT_46 = NL + "\t\tfor (";
  protected final String TEXT_47 = " values = ";
  protected final String TEXT_48 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_49 = NL + "\t\tnextValue = ";
  protected final String TEXT_50 = ";";
  protected final String TEXT_51 = NL + "\t\tnodeVID = ";
  protected final String TEXT_52 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_53 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_54 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_55 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_56 = NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_58 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_59 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_60 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_61 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_62 = " getCompartment(";
  protected final String TEXT_63 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_64 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_65 = " nextView = (";
  protected final String TEXT_66 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_67 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_68 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_70 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_71 = ".eINSTANCE.get";
  protected final String TEXT_72 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_73 = ";";
  protected final String TEXT_74 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_75 = " values = ((";
  protected final String TEXT_76 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_77 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_78 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_79 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_80 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_81 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_82 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t\t}";
  protected final String TEXT_84 = NL + "\t\t}";
  protected final String TEXT_85 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_86 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_89 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_90 = "))).add(container);";
  protected final String TEXT_91 = NL + "\t\t\tfor (";
  protected final String TEXT_92 = " values = ";
  protected final String TEXT_93 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_94 = NL + "\t\t\tEObject nextValue = ";
  protected final String TEXT_95 = ";";
  protected final String TEXT_96 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_97 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_98 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_100 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_101 = "Children(nextNode, nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_102 = NL + "\t\t\t}";
  protected final String TEXT_103 = NL + "\t\t}";
  protected final String TEXT_104 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_105 = NL + "\t\t";
  protected final String TEXT_106 = " linkElements;";
  protected final String TEXT_107 = NL + "\t\tlinkElements = (";
  protected final String TEXT_108 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_109 = "));" + NL + "\t\tfor (";
  protected final String TEXT_110 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_111 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_112 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_113 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_114 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_115 = NL + "\t\t\t";
  protected final String TEXT_116 = " srcNode = (";
  protected final String TEXT_117 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_118 = ";";
  protected final String TEXT_119 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_120 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_121 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_122 = " destinations = ((";
  protected final String TEXT_123 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_124 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_125 = NL + "\t\t\t";
  protected final String TEXT_126 = " dstNode = (";
  protected final String TEXT_127 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_128 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_129 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_130 = NL + "\t\t\t\t\t";
  protected final String TEXT_131 = " edge = (";
  protected final String TEXT_132 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_133 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_134 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_135 = ".";
  protected final String TEXT_136 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_137 = ".APPEND, ";
  protected final String TEXT_138 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_139 = NL + "\t\t\t\t}";
  protected final String TEXT_140 = NL + "\t\t\t}";
  protected final String TEXT_141 = NL + "\t\t}";
  protected final String TEXT_142 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_143 = NL;
a295 3
importManager.addImport("org.eclipse.gmf.runtime.emf.core.edit.MRunnable");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.OperationUtil");
importManager.addImport("org.eclipse.gmf.runtime.emf.core.util.ResourceUtil");
a302 1
importManager.addImport("org.eclipse.swt.widgets.Shell");
d312 14
d340 1
a340 1
    stringBuffer.append(pluginActivatorClass);
d342 1
a342 1
    if (editorGen.isSameFileForDiagramAndModel()) {
a343 24
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_13);
    } else {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    if (editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_17);
    }
    stringBuffer.append(TEXT_18);
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_21);
d348 1
a348 1
    stringBuffer.append(TEXT_22);
d350 1
a350 3
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_24);
d354 1
a354 1
    stringBuffer.append(TEXT_25);
d356 1
a356 1
    stringBuffer.append(TEXT_26);
d358 5
a362 1
    stringBuffer.append(TEXT_27);
d364 1
a364 1
    stringBuffer.append(TEXT_28);
d368 1
a368 1
    stringBuffer.append(TEXT_29);
d370 1
a370 1
    stringBuffer.append(TEXT_30);
d375 1
a375 1
    stringBuffer.append(TEXT_31);
d377 1
a377 1
    stringBuffer.append(TEXT_32);
d379 1
a379 1
    stringBuffer.append(TEXT_33);
d381 1
a381 1
    stringBuffer.append(TEXT_34);
d383 1
a383 1
    stringBuffer.append(TEXT_35);
d385 1
a385 1
    stringBuffer.append(TEXT_36);
d389 1
a389 1
    stringBuffer.append(TEXT_37);
d393 17
a409 1
    stringBuffer.append(TEXT_38);
d414 1
a414 1
    stringBuffer.append(TEXT_39);
d416 1
a416 1
    stringBuffer.append(TEXT_40);
d418 1
a418 1
    stringBuffer.append(TEXT_41);
d422 1
a422 1
    stringBuffer.append(TEXT_42);
d424 1
a424 1
    stringBuffer.append(TEXT_43);
d428 1
a428 1
    stringBuffer.append(TEXT_44);
d430 1
a430 1
    stringBuffer.append(TEXT_45);
d444 1
a444 1
    stringBuffer.append(TEXT_46);
d446 1
a446 1
    stringBuffer.append(TEXT_47);
d448 1
a448 1
    stringBuffer.append(TEXT_48);
d452 1
a452 1
    stringBuffer.append(TEXT_49);
d454 1
a454 1
    stringBuffer.append(TEXT_50);
d458 1
a458 1
    stringBuffer.append(TEXT_51);
d460 1
a460 1
    stringBuffer.append(TEXT_52);
d462 1
a462 1
    stringBuffer.append(TEXT_53);
d464 1
a464 1
    stringBuffer.append(TEXT_54);
d466 1
a466 1
    stringBuffer.append(TEXT_55);
d470 1
a470 1
    stringBuffer.append(TEXT_56);
d481 1
a481 1
    stringBuffer.append(TEXT_57);
d483 1
a483 1
    stringBuffer.append(TEXT_58);
d485 1
a485 1
    stringBuffer.append(TEXT_59);
d490 1
a490 1
    stringBuffer.append(TEXT_60);
d496 1
a496 1
    stringBuffer.append(TEXT_61);
d498 1
a498 1
    stringBuffer.append(TEXT_62);
d500 1
a500 1
    stringBuffer.append(TEXT_63);
d502 1
a502 1
    stringBuffer.append(TEXT_64);
d504 1
a504 1
    stringBuffer.append(TEXT_65);
d506 1
a506 1
    stringBuffer.append(TEXT_66);
d508 1
a508 1
    stringBuffer.append(TEXT_67);
d510 1
a510 1
    stringBuffer.append(TEXT_68);
d514 1
a514 1
    stringBuffer.append(TEXT_69);
d522 1
a522 1
    stringBuffer.append(TEXT_70);
d524 1
a524 1
    stringBuffer.append(TEXT_71);
d526 1
a526 1
    stringBuffer.append(TEXT_72);
d528 1
a528 1
    stringBuffer.append(TEXT_73);
d532 1
a532 1
    stringBuffer.append(TEXT_74);
d534 1
a534 1
    stringBuffer.append(TEXT_75);
d536 1
a536 1
    stringBuffer.append(TEXT_76);
d540 1
a540 1
    stringBuffer.append(TEXT_77);
d544 1
a544 1
    stringBuffer.append(TEXT_78);
d546 1
a546 1
    stringBuffer.append(TEXT_79);
d548 1
a548 1
    stringBuffer.append(TEXT_80);
d550 1
a550 1
    stringBuffer.append(TEXT_81);
d552 1
a552 1
    stringBuffer.append(TEXT_82);
d556 1
a556 1
    stringBuffer.append(TEXT_83);
d560 1
a560 1
    stringBuffer.append(TEXT_84);
d565 1
a565 1
    stringBuffer.append(TEXT_85);
d573 1
a573 1
    stringBuffer.append(TEXT_86);
d575 1
a575 1
    stringBuffer.append(TEXT_87);
d577 1
a577 1
    stringBuffer.append(TEXT_88);
d579 1
a579 1
    stringBuffer.append(TEXT_89);
d581 1
a581 1
    stringBuffer.append(TEXT_90);
d590 1
a590 1
    stringBuffer.append(TEXT_91);
d592 1
a592 1
    stringBuffer.append(TEXT_92);
d594 1
a594 1
    stringBuffer.append(TEXT_93);
d598 1
a598 1
    stringBuffer.append(TEXT_94);
d600 1
a600 1
    stringBuffer.append(TEXT_95);
d604 1
a604 1
    stringBuffer.append(TEXT_96);
d606 1
a606 1
    stringBuffer.append(TEXT_97);
d608 1
a608 1
    stringBuffer.append(TEXT_98);
d610 1
a610 1
    stringBuffer.append(TEXT_99);
d612 1
a612 1
    stringBuffer.append(TEXT_100);
d614 1
a614 1
    stringBuffer.append(TEXT_101);
d618 1
a618 1
    stringBuffer.append(TEXT_102);
d624 1
a624 1
    stringBuffer.append(TEXT_103);
d629 1
a629 1
    stringBuffer.append(TEXT_104);
d633 1
a633 1
    stringBuffer.append(TEXT_105);
d635 1
a635 1
    stringBuffer.append(TEXT_106);
d643 1
a643 1
    stringBuffer.append(TEXT_107);
d645 1
a645 1
    stringBuffer.append(TEXT_108);
d647 1
a647 1
    stringBuffer.append(TEXT_109);
d649 1
a649 1
    stringBuffer.append(TEXT_110);
d656 1
a656 1
    stringBuffer.append(TEXT_111);
d658 1
a658 1
    stringBuffer.append(TEXT_112);
d662 1
a662 1
    stringBuffer.append(TEXT_113);
d668 1
a668 1
    stringBuffer.append(TEXT_114);
d672 1
a672 1
    stringBuffer.append(TEXT_115);
d674 1
a674 1
    stringBuffer.append(TEXT_116);
d676 1
a676 1
    stringBuffer.append(TEXT_117);
d678 1
a678 1
    stringBuffer.append(TEXT_118);
d682 1
a682 1
    stringBuffer.append(TEXT_119);
d687 1
a687 1
    stringBuffer.append(TEXT_120);
d689 1
a689 1
    stringBuffer.append(TEXT_121);
d691 1
a691 1
    stringBuffer.append(TEXT_122);
d693 1
a693 1
    stringBuffer.append(TEXT_123);
d697 1
a697 1
    stringBuffer.append(TEXT_124);
d702 1
a702 1
    stringBuffer.append(TEXT_125);
d704 1
a704 1
    stringBuffer.append(TEXT_126);
d706 1
a706 1
    stringBuffer.append(TEXT_127);
d710 1
a710 1
    stringBuffer.append(TEXT_128);
d712 1
a712 1
    stringBuffer.append(TEXT_129);
d716 1
a716 1
    stringBuffer.append(TEXT_130);
d718 1
a718 1
    stringBuffer.append(TEXT_131);
d720 1
a720 1
    stringBuffer.append(TEXT_132);
d722 1
a722 1
    stringBuffer.append(TEXT_133);
d724 1
a724 1
    stringBuffer.append(TEXT_134);
d726 1
a726 1
    stringBuffer.append(TEXT_135);
d728 1
a728 1
    stringBuffer.append(TEXT_136);
d730 1
a730 1
    stringBuffer.append(TEXT_137);
d732 1
a732 1
    stringBuffer.append(TEXT_138);
d736 1
a736 1
    stringBuffer.append(TEXT_139);
d740 1
a740 1
    stringBuffer.append(TEXT_140);
d744 1
a744 1
    stringBuffer.append(TEXT_141);
d748 1
a748 1
    stringBuffer.append(TEXT_142);
d750 1
a750 1
    stringBuffer.append(TEXT_143);
@


1.30
log
@#127497 Creating diagram file by InitDiagramFileAction in arbitrary location
+ correcting the case of OCL-related classes
@
text
@d48 115
a162 114
  protected final String TEXT_29 = NL + "\t\tResource resource = diagramModel.eResource();" + NL + "\t\tint nodeVID;" + NL + "\t\tfor (Iterator it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\tif (nextResourceObject == diagramModel) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_31 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_32 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_33 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_34 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_35 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_36 = NL + "\t\t}";
  protected final String TEXT_37 = "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_38 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_39 = "Children(";
  protected final String TEXT_40 = " viewObject, EObject modelObject) {";
  protected final String TEXT_41 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_42 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = " nextNode;";
  protected final String TEXT_45 = NL + "\t\tfor (";
  protected final String TEXT_46 = " values = ";
  protected final String TEXT_47 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_48 = NL + "\t\tnextValue = ";
  protected final String TEXT_49 = ";";
  protected final String TEXT_50 = NL + "\t\tnodeVID = ";
  protected final String TEXT_51 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_52 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_53 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_54 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\t}";
  protected final String TEXT_56 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_57 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_58 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_60 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_61 = " getCompartment(";
  protected final String TEXT_62 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_63 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_64 = " nextView = (";
  protected final String TEXT_65 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_66 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_67 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_69 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_70 = ".eINSTANCE.get";
  protected final String TEXT_71 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_72 = ";";
  protected final String TEXT_73 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_74 = " values = ((";
  protected final String TEXT_75 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_76 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_77 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_78 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_79 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_80 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_81 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_82 = NL + "\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t}";
  protected final String TEXT_84 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_85 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_86 = ".eINSTANCE.get";
  protected final String TEXT_87 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_88 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_89 = "))).add(container);";
  protected final String TEXT_90 = NL + "\t\t\tfor (";
  protected final String TEXT_91 = " values = ";
  protected final String TEXT_92 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_93 = NL + "\t\t\tEObject nextValue = ";
  protected final String TEXT_94 = ";";
  protected final String TEXT_95 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_96 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_97 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_98 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_99 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_100 = "Children(nextNode, nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_101 = NL + "\t\t\t}";
  protected final String TEXT_102 = NL + "\t\t}";
  protected final String TEXT_103 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_104 = NL + "\t\t";
  protected final String TEXT_105 = " linkElements;";
  protected final String TEXT_106 = NL + "\t\tlinkElements = (";
  protected final String TEXT_107 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_108 = "));" + NL + "\t\tfor (";
  protected final String TEXT_109 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_110 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_111 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_112 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_113 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " srcNode = (";
  protected final String TEXT_116 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_117 = ";";
  protected final String TEXT_118 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_119 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_120 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_121 = " destinations = ((";
  protected final String TEXT_122 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_123 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_124 = NL + "\t\t\t";
  protected final String TEXT_125 = " dstNode = (";
  protected final String TEXT_126 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_127 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_128 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_129 = NL + "\t\t\t\t\t";
  protected final String TEXT_130 = " edge = (";
  protected final String TEXT_131 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_132 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_133 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_134 = ".";
  protected final String TEXT_135 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_136 = ".APPEND, ";
  protected final String TEXT_137 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_138 = NL + "\t\t\t\t}";
  protected final String TEXT_139 = NL + "\t\t\t}";
  protected final String TEXT_140 = NL + "\t\t}";
  protected final String TEXT_141 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_142 = NL;
d384 2
d390 1
a390 1
    stringBuffer.append(TEXT_30);
d392 1
a392 1
    stringBuffer.append(TEXT_31);
d394 1
a394 1
    stringBuffer.append(TEXT_32);
d396 1
a396 1
    stringBuffer.append(TEXT_33);
d398 1
a398 1
    stringBuffer.append(TEXT_34);
d400 1
a400 1
    stringBuffer.append(TEXT_35);
d404 1
a404 1
    stringBuffer.append(TEXT_36);
d408 1
a408 1
    stringBuffer.append(TEXT_37);
d413 1
a413 1
    stringBuffer.append(TEXT_38);
d415 1
a415 1
    stringBuffer.append(TEXT_39);
d417 1
a417 1
    stringBuffer.append(TEXT_40);
d421 1
a421 1
    stringBuffer.append(TEXT_41);
d423 1
a423 1
    stringBuffer.append(TEXT_42);
d427 1
a427 1
    stringBuffer.append(TEXT_43);
d429 1
a429 1
    stringBuffer.append(TEXT_44);
d443 1
a443 1
    stringBuffer.append(TEXT_45);
d445 1
a445 1
    stringBuffer.append(TEXT_46);
d447 1
a447 1
    stringBuffer.append(TEXT_47);
d451 1
a451 1
    stringBuffer.append(TEXT_48);
d453 1
a453 1
    stringBuffer.append(TEXT_49);
d457 1
a457 1
    stringBuffer.append(TEXT_50);
d459 1
a459 1
    stringBuffer.append(TEXT_51);
d461 1
a461 1
    stringBuffer.append(TEXT_52);
d463 1
a463 1
    stringBuffer.append(TEXT_53);
d465 1
a465 1
    stringBuffer.append(TEXT_54);
d469 1
a469 1
    stringBuffer.append(TEXT_55);
d480 1
a480 1
    stringBuffer.append(TEXT_56);
d482 1
a482 1
    stringBuffer.append(TEXT_57);
d484 1
a484 1
    stringBuffer.append(TEXT_58);
d489 1
a489 1
    stringBuffer.append(TEXT_59);
d495 1
a495 1
    stringBuffer.append(TEXT_60);
d497 1
a497 1
    stringBuffer.append(TEXT_61);
d499 1
a499 1
    stringBuffer.append(TEXT_62);
a500 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d504 1
a504 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d508 2
d513 1
a513 1
    stringBuffer.append(TEXT_68);
d521 1
a521 1
    stringBuffer.append(TEXT_69);
d523 1
a523 1
    stringBuffer.append(TEXT_70);
d525 1
a525 1
    stringBuffer.append(TEXT_71);
d527 1
a527 1
    stringBuffer.append(TEXT_72);
d531 1
a531 1
    stringBuffer.append(TEXT_73);
d533 1
a533 1
    stringBuffer.append(TEXT_74);
d535 1
a535 1
    stringBuffer.append(TEXT_75);
d539 1
a539 1
    stringBuffer.append(TEXT_76);
d543 1
a543 1
    stringBuffer.append(TEXT_77);
d545 1
a545 1
    stringBuffer.append(TEXT_78);
d547 1
a547 1
    stringBuffer.append(TEXT_79);
d549 1
a549 1
    stringBuffer.append(TEXT_80);
d551 1
a551 1
    stringBuffer.append(TEXT_81);
d555 1
a555 1
    stringBuffer.append(TEXT_82);
d559 1
a559 1
    stringBuffer.append(TEXT_83);
d564 1
a564 1
    stringBuffer.append(TEXT_84);
d572 1
a572 1
    stringBuffer.append(TEXT_85);
d574 1
a574 1
    stringBuffer.append(TEXT_86);
d576 1
a576 1
    stringBuffer.append(TEXT_87);
d578 1
a578 1
    stringBuffer.append(TEXT_88);
d580 1
a580 1
    stringBuffer.append(TEXT_89);
d589 1
a589 1
    stringBuffer.append(TEXT_90);
d591 1
a591 1
    stringBuffer.append(TEXT_91);
d593 1
a593 1
    stringBuffer.append(TEXT_92);
d597 1
a597 1
    stringBuffer.append(TEXT_93);
d599 1
a599 1
    stringBuffer.append(TEXT_94);
d603 1
a603 1
    stringBuffer.append(TEXT_95);
d605 1
a605 1
    stringBuffer.append(TEXT_96);
d607 1
a607 1
    stringBuffer.append(TEXT_97);
d609 1
a609 1
    stringBuffer.append(TEXT_98);
d611 1
a611 1
    stringBuffer.append(TEXT_99);
d613 1
a613 1
    stringBuffer.append(TEXT_100);
d617 1
a617 1
    stringBuffer.append(TEXT_101);
d623 1
a623 1
    stringBuffer.append(TEXT_102);
d628 1
a628 1
    stringBuffer.append(TEXT_103);
d632 1
a632 1
    stringBuffer.append(TEXT_104);
d634 1
a634 1
    stringBuffer.append(TEXT_105);
d642 1
a642 1
    stringBuffer.append(TEXT_106);
d644 1
a644 1
    stringBuffer.append(TEXT_107);
d646 1
a646 1
    stringBuffer.append(TEXT_108);
d648 1
a648 1
    stringBuffer.append(TEXT_109);
d655 1
a655 1
    stringBuffer.append(TEXT_110);
d657 1
a657 1
    stringBuffer.append(TEXT_111);
d661 1
a661 1
    stringBuffer.append(TEXT_112);
d667 1
a667 1
    stringBuffer.append(TEXT_113);
a670 2
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d674 2
d677 1
a677 1
    stringBuffer.append(TEXT_117);
d681 1
a681 1
    stringBuffer.append(TEXT_118);
d686 1
a686 1
    stringBuffer.append(TEXT_119);
d688 1
a688 1
    stringBuffer.append(TEXT_120);
d690 1
a690 1
    stringBuffer.append(TEXT_121);
d692 1
a692 1
    stringBuffer.append(TEXT_122);
d696 1
a696 1
    stringBuffer.append(TEXT_123);
a700 2
    stringBuffer.append(TEXT_124);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d704 2
d709 1
a709 1
    stringBuffer.append(TEXT_127);
d711 1
a711 1
    stringBuffer.append(TEXT_128);
a714 2
    stringBuffer.append(TEXT_129);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d718 2
d721 1
a721 1
    stringBuffer.append(TEXT_132);
d723 1
a723 1
    stringBuffer.append(TEXT_133);
d725 1
a725 1
    stringBuffer.append(TEXT_134);
d727 1
a727 1
    stringBuffer.append(TEXT_135);
d729 1
a729 1
    stringBuffer.append(TEXT_136);
d731 1
a731 1
    stringBuffer.append(TEXT_137);
d735 1
a735 1
    stringBuffer.append(TEXT_138);
d739 1
a739 1
    stringBuffer.append(TEXT_139);
d743 1
a743 1
    stringBuffer.append(TEXT_140);
d747 1
a747 1
    stringBuffer.append(TEXT_141);
d749 1
a749 1
    stringBuffer.append(TEXT_142);
@


1.29
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d22 140
a161 136
  protected final String TEXT_3 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(\"editorGen.getDiagramFileExtension()\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(\"editorGen.getDiagramFileExtension()\").lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_4 = ".getInstance().logError(\"Unable to open editor\", ex);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_5 = NL + "\t\t";
  protected final String TEXT_6 = " resourceSet = new ";
  protected final String TEXT_7 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_8 = ".createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_9 = ".getInstance().logError(\"Unable to load resource: \" + mySelection.getFullPath().toString(), ex);" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_10 = NL + "\t\tString resourcePath = mySelection.getLocation().toOSString();" + NL + "\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\tif (modelResource == null) {" + NL + "\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t}" + NL + "\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Unable to load resource: \" + resourcePath, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_12 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_13 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_14 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_15 = ".getInstance().logError(\"Save operation failed for: \" + filePath, ex);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_16 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID != ";
  protected final String TEXT_17 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\tmyLinkVID2EObjectMap.put(new Integer(";
  protected final String TEXT_19 = "), new ";
  protected final String TEXT_20 = "());";
  protected final String TEXT_21 = NL + "\t\tDiagram diagram = ViewService.createDiagram(diagramModel, \"";
  protected final String TEXT_22 = "\", ";
  protected final String TEXT_23 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreate";
  protected final String TEXT_24 = "Children(diagram, diagramModel);";
  protected final String TEXT_25 = NL + "\t\tResource resource = diagramModel.eResource();" + NL + "\t\tint nodeVID;" + NL + "\t\tfor (Iterator it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\tif (nextResourceObject == diagramModel) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_27 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_28 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_29 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_30 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_31 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_32 = NL + "\t\t}";
  protected final String TEXT_33 = "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_34 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_35 = "Children(";
  protected final String TEXT_36 = " viewObject, EObject modelObject) {";
  protected final String TEXT_37 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_38 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_39 = NL + "\t\t";
  protected final String TEXT_40 = " nextNode;";
  protected final String TEXT_41 = NL + "\t\tfor (";
  protected final String TEXT_42 = " values = ";
  protected final String TEXT_43 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_44 = NL + "\t\tnextValue = ";
  protected final String TEXT_45 = ";";
  protected final String TEXT_46 = NL + "\t\tnodeVID = ";
  protected final String TEXT_47 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_48 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_49 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_50 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_51 = NL + "\t\t}";
  protected final String TEXT_52 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_53 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_54 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_56 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_57 = " getCompartment(";
  protected final String TEXT_58 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_59 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_60 = " nextView = (";
  protected final String TEXT_61 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_62 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_63 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_64 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_65 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_66 = ".eINSTANCE.get";
  protected final String TEXT_67 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_68 = ";";
  protected final String TEXT_69 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_70 = " values = ((";
  protected final String TEXT_71 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_72 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_73 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_74 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_75 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_76 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_77 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_78 = NL + "\t\t\t}";
  protected final String TEXT_79 = NL + "\t\t}";
  protected final String TEXT_80 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_81 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_82 = ".eINSTANCE.get";
  protected final String TEXT_83 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_84 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_85 = "))).add(container);";
  protected final String TEXT_86 = NL + "\t\t\tfor (";
  protected final String TEXT_87 = " values = ";
  protected final String TEXT_88 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_89 = NL + "\t\t\tEObject nextValue = ";
  protected final String TEXT_90 = ";";
  protected final String TEXT_91 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_92 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_93 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_94 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_95 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_96 = "Children(nextNode, nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_97 = NL + "\t\t\t}";
  protected final String TEXT_98 = NL + "\t\t}";
  protected final String TEXT_99 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_100 = NL + "\t\t";
  protected final String TEXT_101 = " linkElements;";
  protected final String TEXT_102 = NL + "\t\tlinkElements = (";
  protected final String TEXT_103 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_104 = "));" + NL + "\t\tfor (";
  protected final String TEXT_105 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_106 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_107 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_108 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_109 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_110 = NL + "\t\t\t";
  protected final String TEXT_111 = " srcNode = (";
  protected final String TEXT_112 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_113 = ";";
  protected final String TEXT_114 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_115 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_116 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_117 = " destinations = ((";
  protected final String TEXT_118 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_119 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_120 = NL + "\t\t\t";
  protected final String TEXT_121 = " dstNode = (";
  protected final String TEXT_122 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_123 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_124 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_125 = NL + "\t\t\t\t\t";
  protected final String TEXT_126 = " edge = (";
  protected final String TEXT_127 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_128 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_129 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_130 = ".";
  protected final String TEXT_131 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_132 = ".APPEND, ";
  protected final String TEXT_133 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_134 = NL + "\t\t\t\t}";
  protected final String TEXT_135 = NL + "\t\t\t}";
  protected final String TEXT_136 = NL + "\t\t}";
  protected final String TEXT_137 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_138 = NL;
a303 1
importManager.addImport("org.eclipse.jface.dialogs.InputDialog");
d307 1
d314 4
d326 1
a326 1
    if (editorGen.isSameFileForDiagramAndModel()) {
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d330 1
a330 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d334 1
a334 1
    stringBuffer.append(pluginActivatorClass);
d336 1
a336 1
    } else {
d338 1
a338 1
    stringBuffer.append(pluginActivatorClass);
d340 1
a340 1
    }
d342 1
a342 1
    if (editorGen.isSameFileForDiagramAndModel()) {
d344 1
a344 1
    }
d348 8
d357 1
a357 1
    stringBuffer.append(TEXT_16);
d359 1
a359 1
    stringBuffer.append(TEXT_17);
d364 1
a364 1
    stringBuffer.append(TEXT_18);
d366 1
a366 1
    stringBuffer.append(TEXT_19);
d368 1
a368 1
    stringBuffer.append(TEXT_20);
d372 1
a372 1
    stringBuffer.append(TEXT_21);
d374 1
a374 1
    stringBuffer.append(TEXT_22);
d376 1
a376 1
    stringBuffer.append(TEXT_23);
d378 1
a378 1
    stringBuffer.append(TEXT_24);
d382 1
a382 1
    stringBuffer.append(TEXT_25);
d387 1
a387 1
    stringBuffer.append(TEXT_26);
d389 1
a389 1
    stringBuffer.append(TEXT_27);
d391 1
a391 1
    stringBuffer.append(TEXT_28);
d393 1
a393 1
    stringBuffer.append(TEXT_29);
d395 1
a395 1
    stringBuffer.append(TEXT_30);
d397 1
a397 1
    stringBuffer.append(TEXT_31);
d401 1
a401 1
    stringBuffer.append(TEXT_32);
d405 1
a405 1
    stringBuffer.append(TEXT_33);
d410 1
a410 1
    stringBuffer.append(TEXT_34);
d412 1
a412 1
    stringBuffer.append(TEXT_35);
d414 1
a414 1
    stringBuffer.append(TEXT_36);
d418 1
a418 1
    stringBuffer.append(TEXT_37);
d420 1
a420 1
    stringBuffer.append(TEXT_38);
d424 1
a424 1
    stringBuffer.append(TEXT_39);
d426 1
a426 1
    stringBuffer.append(TEXT_40);
d440 1
a440 1
    stringBuffer.append(TEXT_41);
d442 1
a442 1
    stringBuffer.append(TEXT_42);
d444 1
a444 1
    stringBuffer.append(TEXT_43);
d448 1
a448 1
    stringBuffer.append(TEXT_44);
d450 1
a450 1
    stringBuffer.append(TEXT_45);
d454 1
a454 1
    stringBuffer.append(TEXT_46);
d456 1
a456 1
    stringBuffer.append(TEXT_47);
d458 1
a458 1
    stringBuffer.append(TEXT_48);
d460 1
a460 1
    stringBuffer.append(TEXT_49);
d462 1
a462 1
    stringBuffer.append(TEXT_50);
d466 1
a466 1
    stringBuffer.append(TEXT_51);
d477 1
a477 1
    stringBuffer.append(TEXT_52);
d479 1
a479 1
    stringBuffer.append(TEXT_53);
d481 1
a481 1
    stringBuffer.append(TEXT_54);
d486 1
a486 1
    stringBuffer.append(TEXT_55);
d492 1
a492 1
    stringBuffer.append(TEXT_56);
d494 1
a494 1
    stringBuffer.append(TEXT_57);
d496 1
a496 1
    stringBuffer.append(TEXT_58);
d498 1
a498 1
    stringBuffer.append(TEXT_59);
d500 1
a500 1
    stringBuffer.append(TEXT_60);
d502 1
a502 1
    stringBuffer.append(TEXT_61);
d504 1
a504 1
    stringBuffer.append(TEXT_62);
d506 1
a506 1
    stringBuffer.append(TEXT_63);
d510 1
a510 1
    stringBuffer.append(TEXT_64);
d518 1
a518 1
    stringBuffer.append(TEXT_65);
d520 1
a520 1
    stringBuffer.append(TEXT_66);
d522 1
a522 1
    stringBuffer.append(TEXT_67);
d524 1
a524 1
    stringBuffer.append(TEXT_68);
d528 1
a528 1
    stringBuffer.append(TEXT_69);
d530 1
a530 1
    stringBuffer.append(TEXT_70);
d532 1
a532 1
    stringBuffer.append(TEXT_71);
d536 1
a536 1
    stringBuffer.append(TEXT_72);
d540 1
a540 1
    stringBuffer.append(TEXT_73);
d542 1
a542 1
    stringBuffer.append(TEXT_74);
d544 1
a544 1
    stringBuffer.append(TEXT_75);
d546 1
a546 1
    stringBuffer.append(TEXT_76);
d548 1
a548 1
    stringBuffer.append(TEXT_77);
d552 1
a552 1
    stringBuffer.append(TEXT_78);
d556 1
a556 1
    stringBuffer.append(TEXT_79);
d561 1
a561 1
    stringBuffer.append(TEXT_80);
d569 1
a569 1
    stringBuffer.append(TEXT_81);
d571 1
a571 1
    stringBuffer.append(TEXT_82);
d573 1
a573 1
    stringBuffer.append(TEXT_83);
d575 1
a575 1
    stringBuffer.append(TEXT_84);
d577 1
a577 1
    stringBuffer.append(TEXT_85);
d586 1
a586 1
    stringBuffer.append(TEXT_86);
d588 1
a588 1
    stringBuffer.append(TEXT_87);
d590 1
a590 1
    stringBuffer.append(TEXT_88);
d594 1
a594 1
    stringBuffer.append(TEXT_89);
d596 1
a596 1
    stringBuffer.append(TEXT_90);
d600 1
a600 1
    stringBuffer.append(TEXT_91);
d602 1
a602 1
    stringBuffer.append(TEXT_92);
d604 1
a604 1
    stringBuffer.append(TEXT_93);
d606 1
a606 1
    stringBuffer.append(TEXT_94);
d608 1
a608 1
    stringBuffer.append(TEXT_95);
d610 1
a610 1
    stringBuffer.append(TEXT_96);
d614 1
a614 1
    stringBuffer.append(TEXT_97);
d620 1
a620 1
    stringBuffer.append(TEXT_98);
d625 1
a625 1
    stringBuffer.append(TEXT_99);
d629 1
a629 1
    stringBuffer.append(TEXT_100);
d631 1
a631 1
    stringBuffer.append(TEXT_101);
d639 1
a639 1
    stringBuffer.append(TEXT_102);
d641 1
a641 1
    stringBuffer.append(TEXT_103);
d643 1
a643 1
    stringBuffer.append(TEXT_104);
d645 1
a645 1
    stringBuffer.append(TEXT_105);
d652 1
a652 1
    stringBuffer.append(TEXT_106);
d654 1
a654 1
    stringBuffer.append(TEXT_107);
d658 1
a658 1
    stringBuffer.append(TEXT_108);
d664 1
a664 1
    stringBuffer.append(TEXT_109);
d668 1
a668 1
    stringBuffer.append(TEXT_110);
d670 1
a670 1
    stringBuffer.append(TEXT_111);
d672 1
a672 1
    stringBuffer.append(TEXT_112);
d674 1
a674 1
    stringBuffer.append(TEXT_113);
d678 1
a678 1
    stringBuffer.append(TEXT_114);
d683 1
a683 1
    stringBuffer.append(TEXT_115);
d685 1
a685 1
    stringBuffer.append(TEXT_116);
d687 1
a687 1
    stringBuffer.append(TEXT_117);
d689 1
a689 1
    stringBuffer.append(TEXT_118);
d693 1
a693 1
    stringBuffer.append(TEXT_119);
d698 1
a698 1
    stringBuffer.append(TEXT_120);
d700 1
a700 1
    stringBuffer.append(TEXT_121);
d702 1
a702 1
    stringBuffer.append(TEXT_122);
d706 1
a706 1
    stringBuffer.append(TEXT_123);
d708 1
a708 1
    stringBuffer.append(TEXT_124);
d712 1
a712 1
    stringBuffer.append(TEXT_125);
d714 1
a714 1
    stringBuffer.append(TEXT_126);
d716 1
a716 1
    stringBuffer.append(TEXT_127);
d718 1
a718 1
    stringBuffer.append(TEXT_128);
d720 1
a720 1
    stringBuffer.append(TEXT_129);
d722 1
a722 1
    stringBuffer.append(TEXT_130);
d724 1
a724 1
    stringBuffer.append(TEXT_131);
d726 1
a726 1
    stringBuffer.append(TEXT_132);
d728 1
a728 1
    stringBuffer.append(TEXT_133);
d732 1
a732 1
    stringBuffer.append(TEXT_134);
d736 1
a736 1
    stringBuffer.append(TEXT_135);
d740 1
a740 1
    stringBuffer.append(TEXT_136);
d744 1
a744 1
    stringBuffer.append(TEXT_137);
d746 1
a746 1
    stringBuffer.append(TEXT_138);
@


1.28
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d20 138
a157 139
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(\"editorGen.getDiagramFileExtension()\")).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(\"editorGen.getDiagramFileExtension()\").lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_5 = ".getInstance().logError(\"Unable to open editor\", ex);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_6 = NL + "\t\t";
  protected final String TEXT_7 = " resourceSet = new ";
  protected final String TEXT_8 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_9 = ".createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_10 = ".getInstance().logError(\"Unable to load resource: \" + mySelection.getFullPath().toString(), ex);" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_11 = NL + "\t\tString resourcePath = mySelection.getLocation().toOSString();" + NL + "\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\tif (modelResource == null) {" + NL + "\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t}" + NL + "\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_12 = ".getInstance().logError(\"Unable to load resource: \" + resourcePath, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_13 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_14 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_15 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_16 = ".getInstance().logError(\"Save operation failed for: \" + filePath, ex);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_17 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID != ";
  protected final String TEXT_18 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_19 = NL + "\t\tmyLinkVID2EObjectMap.put(new Integer(";
  protected final String TEXT_20 = "), new ";
  protected final String TEXT_21 = "());";
  protected final String TEXT_22 = NL + "\t\tDiagram diagram = ViewService.createDiagram(diagramModel, \"";
  protected final String TEXT_23 = "\", ";
  protected final String TEXT_24 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreate";
  protected final String TEXT_25 = "Children(diagram, diagramModel);";
  protected final String TEXT_26 = NL + "\t\tResource resource = diagramModel.eResource();" + NL + "\t\tint nodeVID;" + NL + "\t\tfor (Iterator it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\tif (nextResourceObject == diagramModel) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_28 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_29 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_30 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_31 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_32 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t}";
  protected final String TEXT_34 = "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_35 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_36 = "Children(";
  protected final String TEXT_37 = " viewObject, EObject modelObject) {";
  protected final String TEXT_38 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_39 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_40 = NL + "\t\t";
  protected final String TEXT_41 = " nextNode;";
  protected final String TEXT_42 = NL + "\t\tfor (";
  protected final String TEXT_43 = " values = ";
  protected final String TEXT_44 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_45 = NL + "\t\tnextValue = ";
  protected final String TEXT_46 = ";";
  protected final String TEXT_47 = NL + "\t\tnodeVID = ";
  protected final String TEXT_48 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_49 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_50 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_51 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_52 = NL + "\t\t}";
  protected final String TEXT_53 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_54 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_55 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_56 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_57 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_58 = " getCompartment(";
  protected final String TEXT_59 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_60 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_61 = " nextView = (";
  protected final String TEXT_62 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_63 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_64 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_65 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_66 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_69 = ";";
  protected final String TEXT_70 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_71 = " values = ((";
  protected final String TEXT_72 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_73 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_74 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_75 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_76 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_77 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_78 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_79 = NL + "\t\t\t}";
  protected final String TEXT_80 = NL + "\t\t}";
  protected final String TEXT_81 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_82 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_83 = ".eINSTANCE.get";
  protected final String TEXT_84 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_85 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_86 = "))).add(container);";
  protected final String TEXT_87 = NL + "\t\t\tfor (";
  protected final String TEXT_88 = " values = ";
  protected final String TEXT_89 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_90 = NL + "\t\t\tEObject nextValue = ";
  protected final String TEXT_91 = ";";
  protected final String TEXT_92 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_93 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_94 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_95 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_96 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_97 = "Children(nextNode, nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_98 = NL + "\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t}";
  protected final String TEXT_100 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_101 = NL + "\t\t";
  protected final String TEXT_102 = " linkElements;";
  protected final String TEXT_103 = NL + "\t\tlinkElements = (";
  protected final String TEXT_104 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_105 = "));" + NL + "\t\tfor (";
  protected final String TEXT_106 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_107 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_108 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_109 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_110 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_111 = NL + "\t\t\t";
  protected final String TEXT_112 = " srcNode = (";
  protected final String TEXT_113 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_114 = ";";
  protected final String TEXT_115 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_116 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_117 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_118 = " destinations = ((";
  protected final String TEXT_119 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_120 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_121 = NL + "\t\t\t";
  protected final String TEXT_122 = " dstNode = (";
  protected final String TEXT_123 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_124 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_125 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_126 = NL + "\t\t\t\t\t";
  protected final String TEXT_127 = " edge = (";
  protected final String TEXT_128 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_129 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_130 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_131 = ".";
  protected final String TEXT_132 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_133 = ".APPEND, ";
  protected final String TEXT_134 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_135 = NL + "\t\t\t\t}";
  protected final String TEXT_136 = NL + "\t\t\t}";
  protected final String TEXT_137 = NL + "\t\t}";
  protected final String TEXT_138 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_139 = NL;
d159 1
a159 1
	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d203 1
a203 1
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d246 1
a246 1
	protected final String getMetaClassAccessor(GenClass genClass, ImportUtil importManager) {
d259 1
a259 1
final GenDiagram genDiagram = (GenDiagram) argument;
d261 1
a261 1
final ImportUtil importManager = new ImportUtil(editorGen.getEditor().getPackageName());
d279 1
a280 2
    stringBuffer.append(editorGen.getEditor().getPackageName());
    stringBuffer.append(TEXT_2);
d313 2
d316 1
a316 1
    stringBuffer.append(genDiagram.getInitDiagramFileActionClassName());
d318 1
a318 1
    stringBuffer.append(pluginActivatorClass);
d320 1
a320 1
    if (editorGen.isSameFileForDiagramAndModel()) {
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d328 2
a330 2
    stringBuffer.append(TEXT_10);
    } else {
d332 1
a332 1
    stringBuffer.append(pluginActivatorClass);
d334 2
a336 2
    stringBuffer.append(TEXT_13);
    if (editorGen.isSameFileForDiagramAndModel()) {
d338 1
a338 1
    }
d340 1
a340 1
    stringBuffer.append(pluginActivatorClass);
d342 1
a342 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a343 2
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_18);
d348 2
d351 1
a351 1
    stringBuffer.append(nextLink.getVisualID());
a352 2
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_21);
d356 2
d359 1
a359 1
    stringBuffer.append(modelID);
d361 1
a361 1
    stringBuffer.append(pluginActivatorClass);
a362 2
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_25);
d366 1
a366 1
    stringBuffer.append(TEXT_26);
d371 2
d374 1
a374 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d376 1
a376 1
    stringBuffer.append(phantomNode.getVisualID());
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d380 1
a380 1
    stringBuffer.append(pluginActivatorClass);
a381 2
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_32);
d385 1
a385 1
    stringBuffer.append(TEXT_33);
d389 1
a389 1
    stringBuffer.append(TEXT_34);
d394 2
d397 1
a397 1
    stringBuffer.append(nextContainer.getUniqueIdentifier());
a398 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_37);
d402 2
a404 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_39);
d408 2
a410 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_41);
d424 2
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a428 2
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_44);
d432 2
a434 2
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_46);
d438 2
d441 1
a441 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d443 1
a443 1
    stringBuffer.append(nextChild.getVisualID());
d445 1
a445 1
    stringBuffer.append(pluginActivatorClass);
a446 2
    stringBuffer.append(nextChild.getUniqueIdentifier());
    stringBuffer.append(TEXT_51);
d450 1
a450 1
    stringBuffer.append(TEXT_52);
d461 2
d464 1
a464 1
    stringBuffer.append(nextCompartment.getTitle());
a465 2
    stringBuffer.append(nextCompartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_55);
d470 1
a470 1
    stringBuffer.append(TEXT_56);
d476 2
d479 1
a479 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d481 2
a483 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d487 1
a487 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a490 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_64);
d494 1
a494 1
    stringBuffer.append(TEXT_65);
d502 2
d505 1
a505 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d507 1
a507 1
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
a508 2
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_69);
d512 2
d515 1
a515 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a516 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_72);
d520 1
a520 1
    stringBuffer.append(TEXT_73);
d524 2
d527 1
a527 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d529 2
a531 2
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a532 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_78);
d536 1
a536 1
    stringBuffer.append(TEXT_79);
d540 1
a540 1
    stringBuffer.append(TEXT_80);
d545 1
a545 1
    stringBuffer.append(TEXT_81);
d553 2
d556 1
a556 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d558 1
a558 1
    stringBuffer.append(genFeature.getFeatureAccessorName());
d560 1
a560 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a561 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_86);
d570 2
d573 1
a573 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a574 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_89);
d578 2
a580 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_91);
d584 2
d587 1
a587 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d589 1
a589 1
    stringBuffer.append(phantomNode.getVisualID());
d591 1
a591 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d593 1
a593 1
    stringBuffer.append(pluginActivatorClass);
a594 2
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_97);
d598 1
a598 1
    stringBuffer.append(TEXT_98);
d604 1
a604 1
    stringBuffer.append(TEXT_99);
d609 1
a609 1
    stringBuffer.append(TEXT_100);
d613 2
a615 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_102);
d623 2
d626 1
a626 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d628 1
a628 1
    stringBuffer.append(nextLink.getVisualID());
a629 2
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_106);
d636 2
a638 2
    stringBuffer.append(getFeatureValueGetter("linkElement", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
    stringBuffer.append(TEXT_108);
d642 1
a642 1
    stringBuffer.append(TEXT_109);
d648 1
a648 1
    stringBuffer.append(TEXT_110);
d652 2
d657 1
a657 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
a658 2
    stringBuffer.append(getFeatureValueGetter("linkElement", domainLinkTargetGenFeature, true, importManager));
    stringBuffer.append(TEXT_114);
d662 1
a662 1
    stringBuffer.append(TEXT_115);
d667 2
d670 2
a672 2
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a673 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_119);
d677 1
a677 1
    stringBuffer.append(TEXT_120);
d682 2
a686 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_123);
d690 2
a692 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_125);
d696 2
d701 1
a701 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d707 1
a707 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d709 1
a709 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d711 1
a711 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
a712 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_134);
d716 1
a716 1
    stringBuffer.append(TEXT_135);
d720 1
a720 1
    stringBuffer.append(TEXT_136);
d724 1
a724 1
    stringBuffer.append(TEXT_137);
d728 2
a730 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_139);
@


1.27
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d262 1
a262 1
final ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
d281 1
a281 1
    stringBuffer.append(genDiagram.getEditorPackageName());
@


1.26
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d23 136
a158 137
  protected final String TEXT_4 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    private static final String FILE_EXT = \"";
  protected final String TEXT_5 = "\";" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT).lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_6 = ".getInstance().logError(\"Unable to open editor\", ex);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = " resourceSet = new ";
  protected final String TEXT_9 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_10 = ".createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Unable to load resource: \" + mySelection.getFullPath().toString(), ex);" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_12 = NL + "\t\tString resourcePath = mySelection.getLocation().toOSString();" + NL + "\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\tif (modelResource == null) {" + NL + "\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t}" + NL + "\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\t";
  protected final String TEXT_13 = ".getInstance().logError(\"Unable to load resource: \" + resourcePath, e);" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_14 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_15 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_16 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(\"Save operation failed for: \" + filePath, ex);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_18 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID != ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_20 = NL + "\t\tmyLinkVID2EObjectMap.put(new Integer(";
  protected final String TEXT_21 = "), new ";
  protected final String TEXT_22 = "());";
  protected final String TEXT_23 = NL + "\t\tDiagram diagram = ViewService.createDiagram(diagramModel, \"";
  protected final String TEXT_24 = "\", ";
  protected final String TEXT_25 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreate";
  protected final String TEXT_26 = "Children(diagram, diagramModel);";
  protected final String TEXT_27 = NL + "\t\tResource resource = diagramModel.eResource();" + NL + "\t\tint nodeVID;" + NL + "\t\tfor (Iterator it = resource.getContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextResourceObject = (EObject) it.next();" + NL + "\t\t\tif (nextResourceObject == diagramModel) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_28 = NL + "\t\t\tnodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getNodeVisualID(diagram, nextResourceObject, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_30 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_31 = " nextNode = ViewService.createNode(diagram, nextResourceObject, null, ";
  protected final String TEXT_32 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextResourceObject, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_33 = "Children(nextNode, nextResourceObject);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}";
  protected final String TEXT_34 = NL + "\t\t}";
  protected final String TEXT_35 = "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_36 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_37 = "Children(";
  protected final String TEXT_38 = " viewObject, EObject modelObject) {";
  protected final String TEXT_39 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_40 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " nextNode;";
  protected final String TEXT_43 = NL + "\t\tfor (";
  protected final String TEXT_44 = " values = ";
  protected final String TEXT_45 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_46 = NL + "\t\tnextValue = ";
  protected final String TEXT_47 = ";";
  protected final String TEXT_48 = NL + "\t\tnodeVID = ";
  protected final String TEXT_49 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_50 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_51 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_52 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_53 = NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_55 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_56 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\tstoreLinks(modelObject, viewObject.getDiagram());" + NL + "\t}";
  protected final String TEXT_58 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_59 = " getCompartment(";
  protected final String TEXT_60 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_61 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_62 = " nextView = (";
  protected final String TEXT_63 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_64 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_65 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container, Diagram diagram) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass, diagram);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_67 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_68 = ".eINSTANCE.get";
  protected final String TEXT_69 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_70 = ";";
  protected final String TEXT_71 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_72 = " values = ((";
  protected final String TEXT_73 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_74 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_75 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_76 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_77 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_78 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_79 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_80 = NL + "\t\t\t}";
  protected final String TEXT_81 = NL + "\t\t}";
  protected final String TEXT_82 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass, Diagram diagram) {";
  protected final String TEXT_83 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_84 = ".eINSTANCE.get";
  protected final String TEXT_85 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_86 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_87 = "))).add(container);";
  protected final String TEXT_88 = NL + "\t\t\tfor (";
  protected final String TEXT_89 = " values = ";
  protected final String TEXT_90 = ".iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = (EObject) values.next();";
  protected final String TEXT_91 = NL + "\t\t\tEObject nextValue = ";
  protected final String TEXT_92 = ";";
  protected final String TEXT_93 = NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_94 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\t\tif (";
  protected final String TEXT_95 = " == nodeVID) {" + NL + "\t\t\t\t";
  protected final String TEXT_96 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_97 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\t\tcreate";
  protected final String TEXT_98 = "Children(nextNode, nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t\t}";
  protected final String TEXT_100 = NL + "\t\t}";
  protected final String TEXT_101 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_102 = NL + "\t\t";
  protected final String TEXT_103 = " linkElements;";
  protected final String TEXT_104 = NL + "\t\tlinkElements = (";
  protected final String TEXT_105 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_106 = "));" + NL + "\t\tfor (";
  protected final String TEXT_107 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_108 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_109 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_110 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_111 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_112 = NL + "\t\t\t";
  protected final String TEXT_113 = " srcNode = (";
  protected final String TEXT_114 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_115 = ";";
  protected final String TEXT_116 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_117 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_118 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_119 = " destinations = ((";
  protected final String TEXT_120 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_121 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_122 = NL + "\t\t\t";
  protected final String TEXT_123 = " dstNode = (";
  protected final String TEXT_124 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_125 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_126 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_127 = NL + "\t\t\t\t\t";
  protected final String TEXT_128 = " edge = (";
  protected final String TEXT_129 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_130 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_131 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_132 = ".";
  protected final String TEXT_133 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_134 = ".APPEND, ";
  protected final String TEXT_135 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_136 = NL + "\t\t\t\t}";
  protected final String TEXT_137 = NL + "\t\t\t}";
  protected final String TEXT_138 = NL + "\t\t}";
  protected final String TEXT_139 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_140 = NL;
d261 1
d263 2
a264 2
final String pluginActivatorClass = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
final String modelID = genDiagram.getEditorGen().getModelID();
d318 1
a318 1
    stringBuffer.append(genDiagram.getDiagramFileExtension());
d320 1
a320 1
    stringBuffer.append(pluginActivatorClass);
d322 1
a322 1
    if (genDiagram.isSameFileForDiagramAndModel()) {
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d330 2
a332 2
    stringBuffer.append(TEXT_11);
    } else {
d334 1
a334 1
    stringBuffer.append(pluginActivatorClass);
d336 2
a338 2
    stringBuffer.append(TEXT_14);
    if (genDiagram.isSameFileForDiagramAndModel()) {
d340 1
a340 1
    }
d342 1
a342 1
    stringBuffer.append(pluginActivatorClass);
d344 1
a344 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a345 2
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_19);
d350 2
d353 1
a353 1
    stringBuffer.append(nextLink.getVisualID());
a354 2
    stringBuffer.append(importManager.getImportedName("java.util.LinkedList"));
    stringBuffer.append(TEXT_22);
d358 2
d361 1
a361 1
    stringBuffer.append(modelID);
d363 1
a363 1
    stringBuffer.append(pluginActivatorClass);
a364 2
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_26);
d368 1
a368 1
    stringBuffer.append(TEXT_27);
d373 2
d376 1
a376 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d378 1
a378 1
    stringBuffer.append(phantomNode.getVisualID());
d380 1
a380 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d382 1
a382 1
    stringBuffer.append(pluginActivatorClass);
a383 2
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_33);
d387 1
a387 1
    stringBuffer.append(TEXT_34);
d391 1
a391 1
    stringBuffer.append(TEXT_35);
d396 2
d399 1
a399 1
    stringBuffer.append(nextContainer.getUniqueIdentifier());
a400 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_38);
d404 2
a406 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_40);
d410 2
a412 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_42);
d426 2
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a430 2
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_45);
d434 2
a436 2
    stringBuffer.append(getFeatureValueGetter("modelObject", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_47);
d440 2
d443 1
a443 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d445 1
a445 1
    stringBuffer.append(nextChild.getVisualID());
d447 1
a447 1
    stringBuffer.append(pluginActivatorClass);
a448 2
    stringBuffer.append(nextChild.getUniqueIdentifier());
    stringBuffer.append(TEXT_52);
d452 1
a452 1
    stringBuffer.append(TEXT_53);
d463 2
d466 1
a466 1
    stringBuffer.append(nextCompartment.getTitle());
a467 2
    stringBuffer.append(nextCompartment.getUniqueIdentifier());
    stringBuffer.append(TEXT_56);
d472 1
a472 1
    stringBuffer.append(TEXT_57);
d478 2
d481 1
a481 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d483 2
a485 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d489 1
a489 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a492 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_65);
d496 1
a496 1
    stringBuffer.append(TEXT_66);
d504 2
d507 1
a507 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d509 1
a509 1
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
a510 2
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_70);
d514 2
d517 1
a517 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a518 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_73);
d522 1
a522 1
    stringBuffer.append(TEXT_74);
d526 2
d529 1
a529 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d531 2
a533 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a534 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_79);
d538 1
a538 1
    stringBuffer.append(TEXT_80);
d542 1
a542 1
    stringBuffer.append(TEXT_81);
d547 1
a547 1
    stringBuffer.append(TEXT_82);
d555 2
d558 1
a558 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d560 1
a560 1
    stringBuffer.append(genFeature.getFeatureAccessorName());
d562 1
a562 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a563 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_87);
d572 2
d575 1
a575 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a576 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_90);
d580 2
a582 2
    stringBuffer.append(getFeatureValueGetter("container", genFeature, true, importManager));
    stringBuffer.append(TEXT_92);
d586 2
d589 1
a589 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d591 1
a591 1
    stringBuffer.append(phantomNode.getVisualID());
d593 1
a593 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d595 1
a595 1
    stringBuffer.append(pluginActivatorClass);
a596 2
    stringBuffer.append(phantomNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_98);
d600 1
a600 1
    stringBuffer.append(TEXT_99);
d606 1
a606 1
    stringBuffer.append(TEXT_100);
d611 1
a611 1
    stringBuffer.append(TEXT_101);
d615 2
a617 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_103);
d625 2
d628 1
a628 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d630 1
a630 1
    stringBuffer.append(nextLink.getVisualID());
a631 2
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_107);
d638 2
a640 2
    stringBuffer.append(getFeatureValueGetter("linkElement", typeLinkModelFacet.getSourceMetaFeature(), true, importManager));
    stringBuffer.append(TEXT_109);
d644 1
a644 1
    stringBuffer.append(TEXT_110);
d650 1
a650 1
    stringBuffer.append(TEXT_111);
d654 2
d659 1
a659 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
a660 2
    stringBuffer.append(getFeatureValueGetter("linkElement", domainLinkTargetGenFeature, true, importManager));
    stringBuffer.append(TEXT_115);
d664 1
a664 1
    stringBuffer.append(TEXT_116);
d669 2
d672 2
a674 2
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a675 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_120);
d679 1
a679 1
    stringBuffer.append(TEXT_121);
d684 2
a688 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_124);
d692 2
a694 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_126);
d698 2
d703 1
a703 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d705 1
a705 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d707 1
a707 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d709 1
a709 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d711 1
a711 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d713 1
a713 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
a714 2
    stringBuffer.append(pluginActivatorClass);
    stringBuffer.append(TEXT_135);
d718 1
a718 1
    stringBuffer.append(TEXT_136);
d722 1
a722 1
    stringBuffer.append(TEXT_137);
d726 1
a726 1
    stringBuffer.append(TEXT_138);
d730 2
a732 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_140);
@


1.25
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d264 1
a264 1
final String modelID = genDiagram.getEditorGen().getDomainGenModel().getModelName();
@


1.24
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d261 4
a264 1
GenDiagram genDiagram = (GenDiagram) argument;
a283 2
ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());

d320 1
a320 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d330 1
a330 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d342 1
a342 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d361 1
a361 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d382 1
a382 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d447 1
a447 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d595 1
a595 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d695 1
a695 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d715 1
a715 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.23
log
@ImportManager moved to oeg.common
@
text
@d45 115
a159 93
  protected final String TEXT_26 = "Children(diagram, diagramModel);" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_27 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_28 = "Children(";
  protected final String TEXT_29 = " viewObject, EObject modelObject) {";
  protected final String TEXT_30 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_31 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_32 = NL + "\t\t";
  protected final String TEXT_33 = " nextNode;";
  protected final String TEXT_34 = NL + "\t\tfor (";
  protected final String TEXT_35 = " values = ";
  protected final String TEXT_36 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_37 = NL + "\t\tnextValue = ";
  protected final String TEXT_38 = ";";
  protected final String TEXT_39 = NL + "\t\tnodeVID = ";
  protected final String TEXT_40 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_41 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_42 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_43 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_44 = NL + "\t\t}";
  protected final String TEXT_45 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_46 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_47 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\tstoreLinks(modelObject);" + NL + "\t}";
  protected final String TEXT_49 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_50 = " getCompartment(";
  protected final String TEXT_51 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_52 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_53 = " nextView = (";
  protected final String TEXT_54 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_55 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_56 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_57 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_58 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_59 = ".eINSTANCE.get";
  protected final String TEXT_60 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_61 = ";";
  protected final String TEXT_62 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_63 = " values = ((";
  protected final String TEXT_64 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_65 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_66 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_67 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_68 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_69 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_70 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_71 = NL + "\t\t\t}";
  protected final String TEXT_72 = NL + "\t\t}";
  protected final String TEXT_73 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_74 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_75 = ".eINSTANCE.get";
  protected final String TEXT_76 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_77 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_78 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_79 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_80 = NL + "\t\t";
  protected final String TEXT_81 = " linkElements;";
  protected final String TEXT_82 = NL + "\t\tlinkElements = (";
  protected final String TEXT_83 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_84 = "));" + NL + "\t\tfor (";
  protected final String TEXT_85 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_86 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_87 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_88 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_89 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_90 = NL + "\t\t\t";
  protected final String TEXT_91 = " srcNode = (";
  protected final String TEXT_92 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_93 = ";";
  protected final String TEXT_94 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_95 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_96 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_97 = " destinations = ((";
  protected final String TEXT_98 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_99 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_100 = NL + "\t\t\t";
  protected final String TEXT_101 = " dstNode = (";
  protected final String TEXT_102 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_103 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_104 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_105 = NL + "\t\t\t\t\t";
  protected final String TEXT_106 = " edge = (";
  protected final String TEXT_107 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_108 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_109 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_110 = ".";
  protected final String TEXT_111 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_112 = ".APPEND, ";
  protected final String TEXT_113 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_114 = NL + "\t\t\t\t}";
  protected final String TEXT_115 = NL + "\t\t\t}";
  protected final String TEXT_116 = NL + "\t\t}";
  protected final String TEXT_117 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_118 = NL;
d264 11
d367 27
d397 1
a397 1
    stringBuffer.append(TEXT_27);
d399 1
a399 1
    stringBuffer.append(TEXT_28);
d401 1
a401 1
    stringBuffer.append(TEXT_29);
d405 1
a405 1
    stringBuffer.append(TEXT_30);
d407 1
a407 1
    stringBuffer.append(TEXT_31);
d411 1
a411 1
    stringBuffer.append(TEXT_32);
d413 1
a413 1
    stringBuffer.append(TEXT_33);
d420 4
d427 1
a427 1
    stringBuffer.append(TEXT_34);
d429 1
a429 1
    stringBuffer.append(TEXT_35);
d431 1
a431 1
    stringBuffer.append(TEXT_36);
d435 1
a435 1
    stringBuffer.append(TEXT_37);
d437 1
a437 1
    stringBuffer.append(TEXT_38);
d441 1
a441 1
    stringBuffer.append(TEXT_39);
d443 1
a443 1
    stringBuffer.append(TEXT_40);
d445 1
a445 1
    stringBuffer.append(TEXT_41);
d447 1
a447 1
    stringBuffer.append(TEXT_42);
d449 1
a449 1
    stringBuffer.append(TEXT_43);
d453 1
a453 1
    stringBuffer.append(TEXT_44);
d464 1
a464 1
    stringBuffer.append(TEXT_45);
d466 1
a466 1
    stringBuffer.append(TEXT_46);
d468 1
a468 1
    stringBuffer.append(TEXT_47);
d473 1
a473 1
    stringBuffer.append(TEXT_48);
d479 1
a479 1
    stringBuffer.append(TEXT_49);
d481 1
a481 1
    stringBuffer.append(TEXT_50);
d483 1
a483 1
    stringBuffer.append(TEXT_51);
d485 1
a485 1
    stringBuffer.append(TEXT_52);
d487 1
a487 1
    stringBuffer.append(TEXT_53);
d489 1
a489 1
    stringBuffer.append(TEXT_54);
d491 1
a491 1
    stringBuffer.append(TEXT_55);
d493 1
a493 1
    stringBuffer.append(TEXT_56);
d497 1
a497 1
    stringBuffer.append(TEXT_57);
d505 1
a505 1
    stringBuffer.append(TEXT_58);
d507 1
a507 1
    stringBuffer.append(TEXT_59);
d509 1
a509 1
    stringBuffer.append(TEXT_60);
d511 1
a511 1
    stringBuffer.append(TEXT_61);
d515 1
a515 1
    stringBuffer.append(TEXT_62);
d517 1
a517 1
    stringBuffer.append(TEXT_63);
d519 1
a519 1
    stringBuffer.append(TEXT_64);
d523 1
a523 1
    stringBuffer.append(TEXT_65);
d527 1
a527 1
    stringBuffer.append(TEXT_66);
d529 1
a529 1
    stringBuffer.append(TEXT_67);
d531 1
a531 1
    stringBuffer.append(TEXT_68);
d533 1
a533 1
    stringBuffer.append(TEXT_69);
d535 1
a535 1
    stringBuffer.append(TEXT_70);
d539 1
a539 1
    stringBuffer.append(TEXT_71);
d543 1
a543 1
    stringBuffer.append(TEXT_72);
d548 1
a548 1
    stringBuffer.append(TEXT_73);
d553 2
a554 1
		GenFeature genFeature = ((FeatureModelFacet) nextLink.getModelFacet()).getMetaFeature();
d556 1
a556 1
    stringBuffer.append(TEXT_74);
d558 1
a558 1
    stringBuffer.append(TEXT_75);
d560 1
a560 1
    stringBuffer.append(TEXT_76);
d562 1
a562 1
    stringBuffer.append(TEXT_77);
d564 44
a607 1
    stringBuffer.append(TEXT_78);
d612 1
a612 1
    stringBuffer.append(TEXT_79);
d616 1
a616 1
    stringBuffer.append(TEXT_80);
d618 1
a618 1
    stringBuffer.append(TEXT_81);
d626 1
a626 1
    stringBuffer.append(TEXT_82);
d628 1
a628 1
    stringBuffer.append(TEXT_83);
d630 1
a630 1
    stringBuffer.append(TEXT_84);
d632 1
a632 1
    stringBuffer.append(TEXT_85);
d639 1
a639 1
    stringBuffer.append(TEXT_86);
d641 1
a641 1
    stringBuffer.append(TEXT_87);
d645 1
a645 1
    stringBuffer.append(TEXT_88);
d651 1
a651 1
    stringBuffer.append(TEXT_89);
d655 1
a655 1
    stringBuffer.append(TEXT_90);
d657 1
a657 1
    stringBuffer.append(TEXT_91);
d659 1
a659 1
    stringBuffer.append(TEXT_92);
d661 1
a661 1
    stringBuffer.append(TEXT_93);
d665 1
a665 1
    stringBuffer.append(TEXT_94);
d670 1
a670 1
    stringBuffer.append(TEXT_95);
d672 1
a672 1
    stringBuffer.append(TEXT_96);
d674 1
a674 1
    stringBuffer.append(TEXT_97);
d676 1
a676 1
    stringBuffer.append(TEXT_98);
d680 1
a680 1
    stringBuffer.append(TEXT_99);
d685 1
a685 1
    stringBuffer.append(TEXT_100);
d687 1
a687 1
    stringBuffer.append(TEXT_101);
d689 1
a689 1
    stringBuffer.append(TEXT_102);
d693 1
a693 1
    stringBuffer.append(TEXT_103);
d695 1
a695 1
    stringBuffer.append(TEXT_104);
d699 1
a699 1
    stringBuffer.append(TEXT_105);
d701 1
a701 1
    stringBuffer.append(TEXT_106);
d703 1
a703 1
    stringBuffer.append(TEXT_107);
d705 1
a705 1
    stringBuffer.append(TEXT_108);
d707 1
a707 1
    stringBuffer.append(TEXT_109);
d709 1
a709 1
    stringBuffer.append(TEXT_110);
d711 1
a711 1
    stringBuffer.append(TEXT_111);
d713 1
a713 1
    stringBuffer.append(TEXT_112);
d715 1
a715 1
    stringBuffer.append(TEXT_113);
d719 1
a719 1
    stringBuffer.append(TEXT_114);
d723 1
a723 1
    stringBuffer.append(TEXT_115);
d727 1
a727 1
    stringBuffer.append(TEXT_116);
d731 1
a731 1
    stringBuffer.append(TEXT_117);
d733 1
a733 1
    stringBuffer.append(TEXT_118);
@


1.22
log
@#125893
Logging methods
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.ImportUtil;
@


1.21
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d24 114
a137 110
  protected final String TEXT_5 = "\";" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkVID2EObjectMap = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT).lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\tex.printStackTrace();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_6 = NL + "\t\t";
  protected final String TEXT_7 = " resourceSet = new ";
  protected final String TEXT_8 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_9 = ".createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_10 = NL + "\t\tString resourcePath = mySelection.getLocation().toOSString();" + NL + "\t\tResource modelResource = ResourceUtil.findResource(resourcePath);" + NL + "\t\tif (modelResource == null) {" + NL + "\t\t\tmodelResource = ResourceUtil.create(resourcePath);" + NL + "\t\t}" + NL + "\t\tif (!modelResource.isLoaded()) {" + NL + "\t\t\ttry {" + NL + "\t\t\t\tResourceUtil.load(modelResource);" + NL + "\t\t\t} catch (Exception e) {" + NL + "\t\t\t\te.printStackTrace();" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_11 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_12 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_13 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_14 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID != ";
  protected final String TEXT_15 = ") {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_16 = NL + "\t\tmyLinkVID2EObjectMap.put(new Integer(";
  protected final String TEXT_17 = "), new ";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t\tDiagram diagram = ViewService.createDiagram(diagramModel, \"";
  protected final String TEXT_20 = "\", ";
  protected final String TEXT_21 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreate";
  protected final String TEXT_22 = "Children(diagram, diagramModel);" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_23 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_24 = "Children(";
  protected final String TEXT_25 = " viewObject, EObject modelObject) {";
  protected final String TEXT_26 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_27 = " nextNode;" + NL + "\t\tint nodeVID;";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = " nextNode;";
  protected final String TEXT_30 = NL + "\t\tfor (";
  protected final String TEXT_31 = " values = ";
  protected final String TEXT_32 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_33 = NL + "\t\tnextValue = ";
  protected final String TEXT_34 = ";";
  protected final String TEXT_35 = NL + "\t\tnodeVID = ";
  protected final String TEXT_36 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_37 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_38 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_39 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_40 = NL + "\t\t}";
  protected final String TEXT_41 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_42 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_43 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_44 = NL + "\t\tstoreLinks(modelObject);" + NL + "\t}";
  protected final String TEXT_45 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_46 = " getCompartment(";
  protected final String TEXT_47 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_48 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_49 = " nextView = (";
  protected final String TEXT_50 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_51 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_52 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_53 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_54 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_55 = ".eINSTANCE.get";
  protected final String TEXT_56 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_57 = ";";
  protected final String TEXT_58 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_59 = " values = ((";
  protected final String TEXT_60 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_61 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_62 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_63 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_64 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_65 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_66 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_67 = NL + "\t\t\t}";
  protected final String TEXT_68 = NL + "\t\t}";
  protected final String TEXT_69 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_70 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_71 = ".eINSTANCE.get";
  protected final String TEXT_72 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_73 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_74 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_75 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_76 = NL + "\t\t";
  protected final String TEXT_77 = " linkElements;";
  protected final String TEXT_78 = NL + "\t\tlinkElements = (";
  protected final String TEXT_79 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_80 = "));" + NL + "\t\tfor (";
  protected final String TEXT_81 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_82 = NL + "\t\t\tObject srcResult = ";
  protected final String TEXT_83 = ";" + NL + "\t\t\tif (srcResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject src = (EObject) srcResult;";
  protected final String TEXT_84 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_85 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_86 = NL + "\t\t\t";
  protected final String TEXT_87 = " srcNode = (";
  protected final String TEXT_88 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_89 = ";";
  protected final String TEXT_90 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_91 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_92 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_93 = " destinations = ((";
  protected final String TEXT_94 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_95 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_96 = NL + "\t\t\t";
  protected final String TEXT_97 = " dstNode = (";
  protected final String TEXT_98 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_99 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_100 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_101 = NL + "\t\t\t\t\t";
  protected final String TEXT_102 = " edge = (";
  protected final String TEXT_103 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_104 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_105 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_106 = ".";
  protected final String TEXT_107 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_108 = ".APPEND, ";
  protected final String TEXT_109 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}";
  protected final String TEXT_110 = NL + "\t\t\t\t}";
  protected final String TEXT_111 = NL + "\t\t\t}";
  protected final String TEXT_112 = NL + "\t\t}";
  protected final String TEXT_113 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_114 = NL;
d286 2
d289 1
a289 1
    stringBuffer.append(TEXT_6);
d291 1
a291 1
    stringBuffer.append(TEXT_7);
d293 1
a293 1
    stringBuffer.append(TEXT_8);
d295 3
a297 1
    stringBuffer.append(TEXT_9);
d299 3
a301 1
    stringBuffer.append(TEXT_10);
d303 1
a303 1
    stringBuffer.append(TEXT_11);
d305 1
a305 1
    stringBuffer.append(TEXT_12);
d307 3
a309 1
    stringBuffer.append(TEXT_13);
d311 1
a311 1
    stringBuffer.append(TEXT_14);
d313 1
a313 1
    stringBuffer.append(TEXT_15);
d318 1
a318 1
    stringBuffer.append(TEXT_16);
d320 1
a320 1
    stringBuffer.append(TEXT_17);
d322 1
a322 1
    stringBuffer.append(TEXT_18);
d326 1
a326 1
    stringBuffer.append(TEXT_19);
d328 1
a328 1
    stringBuffer.append(TEXT_20);
d330 1
a330 1
    stringBuffer.append(TEXT_21);
d332 1
a332 1
    stringBuffer.append(TEXT_22);
d337 1
a337 1
    stringBuffer.append(TEXT_23);
d339 1
a339 1
    stringBuffer.append(TEXT_24);
d341 1
a341 1
    stringBuffer.append(TEXT_25);
d345 1
a345 1
    stringBuffer.append(TEXT_26);
d347 1
a347 1
    stringBuffer.append(TEXT_27);
d351 1
a351 1
    stringBuffer.append(TEXT_28);
d353 1
a353 1
    stringBuffer.append(TEXT_29);
d363 1
a363 1
    stringBuffer.append(TEXT_30);
d365 1
a365 1
    stringBuffer.append(TEXT_31);
d367 1
a367 1
    stringBuffer.append(TEXT_32);
d371 1
a371 1
    stringBuffer.append(TEXT_33);
d373 1
a373 1
    stringBuffer.append(TEXT_34);
d377 1
a377 1
    stringBuffer.append(TEXT_35);
d379 1
a379 1
    stringBuffer.append(TEXT_36);
d381 1
a381 1
    stringBuffer.append(TEXT_37);
d383 1
a383 1
    stringBuffer.append(TEXT_38);
d385 1
a385 1
    stringBuffer.append(TEXT_39);
d389 1
a389 1
    stringBuffer.append(TEXT_40);
d400 1
a400 1
    stringBuffer.append(TEXT_41);
d402 1
a402 1
    stringBuffer.append(TEXT_42);
d404 1
a404 1
    stringBuffer.append(TEXT_43);
d409 1
a409 1
    stringBuffer.append(TEXT_44);
d415 1
a415 1
    stringBuffer.append(TEXT_45);
d417 1
a417 1
    stringBuffer.append(TEXT_46);
d419 1
a419 1
    stringBuffer.append(TEXT_47);
d421 1
a421 1
    stringBuffer.append(TEXT_48);
d423 1
a423 1
    stringBuffer.append(TEXT_49);
d425 1
a425 1
    stringBuffer.append(TEXT_50);
d427 1
a427 1
    stringBuffer.append(TEXT_51);
d429 1
a429 1
    stringBuffer.append(TEXT_52);
d433 1
a433 1
    stringBuffer.append(TEXT_53);
d441 1
a441 1
    stringBuffer.append(TEXT_54);
d443 1
a443 1
    stringBuffer.append(TEXT_55);
d445 1
a445 1
    stringBuffer.append(TEXT_56);
d447 1
a447 1
    stringBuffer.append(TEXT_57);
d451 1
a451 1
    stringBuffer.append(TEXT_58);
d453 1
a453 1
    stringBuffer.append(TEXT_59);
d455 1
a455 1
    stringBuffer.append(TEXT_60);
d459 1
a459 1
    stringBuffer.append(TEXT_61);
d463 1
a463 1
    stringBuffer.append(TEXT_62);
d465 1
a465 1
    stringBuffer.append(TEXT_63);
d467 1
a467 1
    stringBuffer.append(TEXT_64);
d469 1
a469 1
    stringBuffer.append(TEXT_65);
d471 1
a471 1
    stringBuffer.append(TEXT_66);
d475 1
a475 1
    stringBuffer.append(TEXT_67);
d479 1
a479 1
    stringBuffer.append(TEXT_68);
d484 1
a484 1
    stringBuffer.append(TEXT_69);
d491 1
a491 1
    stringBuffer.append(TEXT_70);
d493 1
a493 1
    stringBuffer.append(TEXT_71);
d495 1
a495 1
    stringBuffer.append(TEXT_72);
d497 1
a497 1
    stringBuffer.append(TEXT_73);
d499 1
a499 1
    stringBuffer.append(TEXT_74);
d504 1
a504 1
    stringBuffer.append(TEXT_75);
d508 1
a508 1
    stringBuffer.append(TEXT_76);
d510 1
a510 1
    stringBuffer.append(TEXT_77);
d518 1
a518 1
    stringBuffer.append(TEXT_78);
d520 1
a520 1
    stringBuffer.append(TEXT_79);
d522 1
a522 1
    stringBuffer.append(TEXT_80);
d524 1
a524 1
    stringBuffer.append(TEXT_81);
d531 1
a531 1
    stringBuffer.append(TEXT_82);
d533 1
a533 1
    stringBuffer.append(TEXT_83);
d537 1
a537 1
    stringBuffer.append(TEXT_84);
d543 1
a543 1
    stringBuffer.append(TEXT_85);
d547 1
a547 1
    stringBuffer.append(TEXT_86);
d549 1
a549 1
    stringBuffer.append(TEXT_87);
d551 1
a551 1
    stringBuffer.append(TEXT_88);
d553 1
a553 1
    stringBuffer.append(TEXT_89);
d557 1
a557 1
    stringBuffer.append(TEXT_90);
d562 1
a562 1
    stringBuffer.append(TEXT_91);
d564 1
a564 1
    stringBuffer.append(TEXT_92);
d566 1
a566 1
    stringBuffer.append(TEXT_93);
d568 1
a568 1
    stringBuffer.append(TEXT_94);
d572 1
a572 1
    stringBuffer.append(TEXT_95);
d577 1
a577 1
    stringBuffer.append(TEXT_96);
d579 1
a579 1
    stringBuffer.append(TEXT_97);
d581 1
a581 1
    stringBuffer.append(TEXT_98);
d585 1
a585 1
    stringBuffer.append(TEXT_99);
d587 1
a587 1
    stringBuffer.append(TEXT_100);
d591 1
a591 1
    stringBuffer.append(TEXT_101);
d593 1
a593 1
    stringBuffer.append(TEXT_102);
d595 1
a595 1
    stringBuffer.append(TEXT_103);
d597 1
a597 1
    stringBuffer.append(TEXT_104);
d599 1
a599 1
    stringBuffer.append(TEXT_105);
d601 1
a601 1
    stringBuffer.append(TEXT_106);
d603 1
a603 1
    stringBuffer.append(TEXT_107);
d605 1
a605 1
    stringBuffer.append(TEXT_108);
d607 1
a607 1
    stringBuffer.append(TEXT_109);
d611 1
a611 1
    stringBuffer.append(TEXT_110);
d615 1
a615 1
    stringBuffer.append(TEXT_111);
d619 1
a619 1
    stringBuffer.append(TEXT_112);
d623 1
a623 1
    stringBuffer.append(TEXT_113);
d625 1
a625 1
    stringBuffer.append(TEXT_114);
@


1.20
log
@Correcting compilation errors in some cases.
@
text
@d317 1
a317 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
d370 1
a370 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
d574 1
a574 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
d594 1
a594 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
@


1.19
log
@#124958
Link processing in InitDiagramFileAction template was improved. From now it should works.
@
text
@d46 1
a46 1
  protected final String TEXT_27 = " nextNode;";
d54 1
a54 1
  protected final String TEXT_35 = NL + "\t\tint nodeVID = ";
@


1.18
log
@rename GenContainerEditPart -> GenContainerBase
@
text
@d63 71
a133 67
  protected final String TEXT_44 = NL + "\t\tstoreLinks(modelObject);";
  protected final String TEXT_45 = NL + "\t}";
  protected final String TEXT_46 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_47 = " getCompartment(";
  protected final String TEXT_48 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_49 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_50 = " nextView = (";
  protected final String TEXT_51 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_52 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_53 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_54 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_55 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_56 = ".eINSTANCE.get";
  protected final String TEXT_57 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_58 = ";";
  protected final String TEXT_59 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_60 = " values = ((";
  protected final String TEXT_61 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_62 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_63 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_64 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_65 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_66 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_67 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_68 = NL + "\t\t\t}";
  protected final String TEXT_69 = NL + "\t\t}";
  protected final String TEXT_70 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_71 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_72 = ".eINSTANCE.get";
  protected final String TEXT_73 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_74 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_75 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_76 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_77 = NL + "\t\t";
  protected final String TEXT_78 = " linkElements;";
  protected final String TEXT_79 = NL + "\t\tlinkElements = (";
  protected final String TEXT_80 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_81 = "));" + NL + "\t\tfor (";
  protected final String TEXT_82 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_83 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_84 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_85 = NL + "\t\t\t";
  protected final String TEXT_86 = " srcNode = (";
  protected final String TEXT_87 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_88 = ";";
  protected final String TEXT_89 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_90 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_91 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_92 = " destinations = ((";
  protected final String TEXT_93 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_94 = NL + "\t\t\t";
  protected final String TEXT_95 = " dstNode = (";
  protected final String TEXT_96 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_97 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_98 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_99 = NL + "\t\t\t\t\t";
  protected final String TEXT_100 = " edge = (";
  protected final String TEXT_101 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_102 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_103 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_104 = ".";
  protected final String TEXT_105 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_106 = ".APPEND, ";
  protected final String TEXT_107 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_108 = NL + "\t\t}";
  protected final String TEXT_109 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_110 = NL;
d395 1
a398 4
	}

    stringBuffer.append(TEXT_45);
    
d403 2
d406 1
a406 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d408 2
a410 2
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d414 1
a414 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
a417 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_53);
d421 1
a421 1
    stringBuffer.append(TEXT_54);
d429 2
d432 1
a432 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d434 1
a434 1
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
a435 2
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_58);
d439 2
d442 1
a442 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a443 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_61);
d447 1
a447 1
    stringBuffer.append(TEXT_62);
d451 2
d454 1
a454 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d456 2
a458 2
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a459 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_67);
d463 1
a463 1
    stringBuffer.append(TEXT_68);
d467 1
a467 1
    stringBuffer.append(TEXT_69);
d472 1
a472 1
    stringBuffer.append(TEXT_70);
d479 2
d482 1
a482 1
    stringBuffer.append(importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName()));
d484 1
a484 1
    stringBuffer.append(genFeature.getFeatureAccessorName());
d486 1
a486 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a487 2
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_75);
d492 1
a492 1
    stringBuffer.append(TEXT_76);
d496 2
a498 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_78);
d506 2
d509 1
a509 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d511 1
a511 1
    stringBuffer.append(nextLink.getVisualID());
a512 2
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_82);
d515 3
a517 1
		domainLinkTargetGenFeature = ((TypeLinkModelFacet) nextLink.getModelFacet()).getTargetMetaFeature();
d519 2
d523 5
d531 1
a531 1
    stringBuffer.append(TEXT_84);
a534 2
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d538 2
d541 1
a541 1
    stringBuffer.append(TEXT_88);
d545 1
a545 1
    stringBuffer.append(TEXT_89);
d548 1
d550 1
a550 1
    stringBuffer.append(TEXT_90);
d552 1
a552 1
    stringBuffer.append(TEXT_91);
d554 1
a554 1
    stringBuffer.append(TEXT_92);
d556 1
a556 1
    stringBuffer.append(TEXT_93);
d558 5
d565 1
a565 1
    stringBuffer.append(TEXT_94);
d567 1
a567 1
    stringBuffer.append(TEXT_95);
d569 1
a569 1
    stringBuffer.append(TEXT_96);
d573 1
a573 1
    stringBuffer.append(TEXT_97);
d575 1
a575 1
    stringBuffer.append(TEXT_98);
d579 1
a579 1
    stringBuffer.append(TEXT_99);
d581 1
a581 1
    stringBuffer.append(TEXT_100);
d583 1
a583 1
    stringBuffer.append(TEXT_101);
d585 1
a585 1
    stringBuffer.append(TEXT_102);
d587 1
a587 1
    stringBuffer.append(TEXT_103);
d589 1
a589 1
    stringBuffer.append(TEXT_104);
d591 1
a591 1
    stringBuffer.append(TEXT_105);
d593 1
a593 1
    stringBuffer.append(TEXT_106);
d595 9
a603 1
    stringBuffer.append(TEXT_107);
d607 1
a607 1
    stringBuffer.append(TEXT_108);
d611 1
a611 1
    stringBuffer.append(TEXT_109);
d613 1
a613 1
    stringBuffer.append(TEXT_110);
@


1.17
log
@- Border should be defined in gmfgraph model
- Setter for features with "isList() == true" corrected
@
text
@d318 2
a319 2
for (Iterator containers = genDiagram.getAllContainerEditParts().iterator(); containers.hasNext();) {
	GenContainerEditPart nextContainer = (GenContainerEditPart) containers.next();
@


1.16
log
@#124413
Cleaning up the gmfgen model
@
text
@d205 9
a213 3
			result.append(".set");
			result.append(feature.getAccessorName());
			result.append("(");
@


1.15
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a226 2
Collection allContainers = new LinkedList(genDiagram.getAllContainers());
allContainers.add(genDiagram);
d312 1
a312 1
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
@


1.14
log
@Removing usages of deprecated API.
@
text
@a3 1
import org.eclipse.gmf.codegen.util.*;
d40 59
a98 59
  protected final String TEXT_21 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreateDiagramChildren(diagram, diagramModel);" + NL + "\t\tcreateLinks();" + NL + "\t\tmyLinkVID2EObjectMap.clear();" + NL + "\t\tmyEObject2NodeMap.clear();\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createDiagramChildren(Diagram diagram, EObject diagramModel) {";
  protected final String TEXT_22 = NL + "\t\tEObject nextValue;";
  protected final String TEXT_23 = NL + "\t\tint nodeVID;";
  protected final String TEXT_24 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_25 = " values = ";
  protected final String TEXT_26 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();";
  protected final String TEXT_27 = NL + "\t\tnextValue = ";
  protected final String TEXT_28 = ";";
  protected final String TEXT_29 = NL + "\t\tnodeVID = ";
  protected final String TEXT_30 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_31 = " == nodeVID) {" + NL + "\t\t\t";
  protected final String TEXT_32 = " nextNode = ViewService.createNode(diagram, nextValue, null, ";
  protected final String TEXT_33 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_34 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_35 = NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t}";
  protected final String TEXT_37 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_38 = "Children(";
  protected final String TEXT_39 = " viewObject, EObject modelObject) {";
  protected final String TEXT_40 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_41 = " nextNode;";
  protected final String TEXT_42 = NL + "\t\t";
  protected final String TEXT_43 = " nextNode;";
  protected final String TEXT_44 = NL + "\t\tfor (";
  protected final String TEXT_45 = " values = ";
  protected final String TEXT_46 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_47 = NL + "\t\tnextValue = ";
  protected final String TEXT_48 = ";";
  protected final String TEXT_49 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_50 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_51 = " == nodeVID) {" + NL + "\t\t\tnextNode = ViewService.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_52 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_53 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_56 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_57 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_58 = NL + "\t\tstoreLinks(modelObject);";
  protected final String TEXT_59 = NL + "\t}";
  protected final String TEXT_60 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_61 = " getCompartment(";
  protected final String TEXT_62 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_63 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_64 = " nextView = (";
  protected final String TEXT_65 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_66 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_67 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_69 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_70 = ".eINSTANCE.get";
  protected final String TEXT_71 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_72 = ";";
  protected final String TEXT_73 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_74 = " values = ((";
  protected final String TEXT_75 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_76 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_77 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_78 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_79 = " == linkVID) {" + NL + "\t\t\t\t((";
d100 30
a129 44
  protected final String TEXT_81 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_82 = NL + "\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t}";
  protected final String TEXT_84 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_85 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_86 = ".eINSTANCE.get";
  protected final String TEXT_87 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_88 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_89 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_90 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_91 = NL + "\t\t";
  protected final String TEXT_92 = " linkElements;";
  protected final String TEXT_93 = NL + "\t\tlinkElements = (";
  protected final String TEXT_94 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_95 = "));" + NL + "\t\tfor (";
  protected final String TEXT_96 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_97 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_98 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_99 = NL + "\t\t\t";
  protected final String TEXT_100 = " srcNode = (";
  protected final String TEXT_101 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_102 = ";";
  protected final String TEXT_103 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_104 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_105 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_106 = " destinations = ((";
  protected final String TEXT_107 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_108 = NL + "\t\t\t";
  protected final String TEXT_109 = " dstNode = (";
  protected final String TEXT_110 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_111 = NL + "\t\t\t\tViewService.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_112 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_113 = NL + "\t\t\t\t\t";
  protected final String TEXT_114 = " edge = (";
  protected final String TEXT_115 = ") ViewService.getInstance().createEdge(new ";
  protected final String TEXT_116 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_117 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_118 = ".";
  protected final String TEXT_119 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_120 = ".APPEND, ";
  protected final String TEXT_121 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_122 = NL + "\t\t}";
  protected final String TEXT_123 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_124 = NL;
a225 1
List genNodes = genDiagram.getNodes();
d227 2
a228 1
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
d311 1
a311 3
    
if (genNodes.size() > 0) {

d314 2
a315 3
}

if (genNodes.size() > 0) {
d318 1
a318 9
    
}

for (Iterator diagramNodes = genNodes.iterator(); diagramNodes.hasNext();) {
	GenNode nextNode = (GenNode) diagramNodes.next();
	TypeModelFacet typeModelFacet = nextNode.getModelFacet();
	GenFeature childMetaFeature = typeModelFacet.getChildMetaFeature();	
	if (childMetaFeature.isListType()) {

d320 1
a320 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a321 2
    stringBuffer.append(getFeatureValueGetter("diagramModel", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_26);
d323 1
a323 1
	} else {
d325 2
a327 40
    stringBuffer.append(getFeatureValueGetter("diagramModel", childMetaFeature, true, importManager));
    stringBuffer.append(TEXT_28);
    		
	}

    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(nextNode.getVisualID());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_34);
    
	if (childMetaFeature.isListType()) {

    stringBuffer.append(TEXT_35);
    
	}
}

    stringBuffer.append(TEXT_36);
    
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer nextContainer = (GenChildContainer) containers.next();

    stringBuffer.append(TEXT_37);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_39);
    
	if (nextContainer.getChildNodes().size() > 0) {

    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_41);
d331 1
a331 1
    stringBuffer.append(TEXT_42);
d333 1
a333 1
    stringBuffer.append(TEXT_43);
d337 2
a338 2
	for (Iterator children = nextContainer.getChildNodes().iterator(); children.hasNext();) {
		GenChildNode nextChild = (GenChildNode) children.next();
d343 1
a343 1
    stringBuffer.append(TEXT_44);
d345 1
a345 1
    stringBuffer.append(TEXT_45);
d347 1
a347 1
    stringBuffer.append(TEXT_46);
d351 1
a351 1
    stringBuffer.append(TEXT_47);
d353 1
a353 1
    stringBuffer.append(TEXT_48);
d357 1
a357 1
    stringBuffer.append(TEXT_49);
d359 1
a359 1
    stringBuffer.append(TEXT_50);
d361 1
a361 1
    stringBuffer.append(TEXT_51);
d363 1
a363 1
    stringBuffer.append(TEXT_52);
d365 1
a365 1
    stringBuffer.append(TEXT_53);
d369 1
a369 1
    stringBuffer.append(TEXT_54);
d380 1
a380 1
    stringBuffer.append(TEXT_55);
d382 1
a382 1
    stringBuffer.append(TEXT_56);
d384 1
a384 1
    stringBuffer.append(TEXT_57);
d388 1
a388 1
    stringBuffer.append(TEXT_58);
d392 1
a392 1
    stringBuffer.append(TEXT_59);
d398 1
a398 1
    stringBuffer.append(TEXT_60);
d400 3
a402 3
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_62);
d404 1
a404 1
    stringBuffer.append(TEXT_63);
d406 1
a406 1
    stringBuffer.append(TEXT_64);
d408 1
a408 1
    stringBuffer.append(TEXT_65);
d410 1
a410 1
    stringBuffer.append(TEXT_66);
d412 1
a412 1
    stringBuffer.append(TEXT_67);
d416 1
a416 1
    stringBuffer.append(TEXT_68);
d424 1
a424 1
    stringBuffer.append(TEXT_69);
d426 1
a426 1
    stringBuffer.append(TEXT_70);
d428 1
a428 1
    stringBuffer.append(TEXT_71);
d430 1
a430 1
    stringBuffer.append(TEXT_72);
d434 1
a434 1
    stringBuffer.append(TEXT_73);
d436 1
a436 1
    stringBuffer.append(TEXT_74);
d438 1
a438 1
    stringBuffer.append(TEXT_75);
d442 1
a442 1
    stringBuffer.append(TEXT_76);
d446 1
a446 1
    stringBuffer.append(TEXT_77);
d448 1
a448 1
    stringBuffer.append(TEXT_78);
d450 1
a450 1
    stringBuffer.append(TEXT_79);
d452 1
a452 1
    stringBuffer.append(TEXT_80);
d454 1
a454 1
    stringBuffer.append(TEXT_81);
d458 1
a458 1
    stringBuffer.append(TEXT_82);
d462 1
a462 1
    stringBuffer.append(TEXT_83);
d467 1
a467 1
    stringBuffer.append(TEXT_84);
d474 1
a474 1
    stringBuffer.append(TEXT_85);
d476 1
a476 1
    stringBuffer.append(TEXT_86);
d478 1
a478 1
    stringBuffer.append(TEXT_87);
d480 1
a480 1
    stringBuffer.append(TEXT_88);
d482 1
a482 1
    stringBuffer.append(TEXT_89);
d487 1
a487 1
    stringBuffer.append(TEXT_90);
d491 1
a491 1
    stringBuffer.append(TEXT_91);
d493 1
a493 1
    stringBuffer.append(TEXT_92);
d501 1
a501 1
    stringBuffer.append(TEXT_93);
d503 1
a503 1
    stringBuffer.append(TEXT_94);
d505 1
a505 1
    stringBuffer.append(TEXT_95);
d507 1
a507 1
    stringBuffer.append(TEXT_96);
d512 1
a512 1
    stringBuffer.append(TEXT_97);
d517 1
a517 1
    stringBuffer.append(TEXT_98);
d521 1
a521 1
    stringBuffer.append(TEXT_99);
d523 1
a523 1
    stringBuffer.append(TEXT_100);
d525 1
a525 1
    stringBuffer.append(TEXT_101);
d527 1
a527 1
    stringBuffer.append(TEXT_102);
d531 1
a531 1
    stringBuffer.append(TEXT_103);
d535 1
a535 1
    stringBuffer.append(TEXT_104);
d537 1
a537 1
    stringBuffer.append(TEXT_105);
d539 1
a539 1
    stringBuffer.append(TEXT_106);
d541 1
a541 1
    stringBuffer.append(TEXT_107);
d545 1
a545 1
    stringBuffer.append(TEXT_108);
d547 1
a547 1
    stringBuffer.append(TEXT_109);
d549 1
a549 1
    stringBuffer.append(TEXT_110);
d553 1
a553 1
    stringBuffer.append(TEXT_111);
d555 1
a555 1
    stringBuffer.append(TEXT_112);
d559 1
a559 1
    stringBuffer.append(TEXT_113);
d561 1
a561 1
    stringBuffer.append(TEXT_114);
d563 1
a563 1
    stringBuffer.append(TEXT_115);
d565 1
a565 1
    stringBuffer.append(TEXT_116);
d567 1
a567 1
    stringBuffer.append(TEXT_117);
d569 1
a569 1
    stringBuffer.append(TEXT_118);
d571 1
a571 1
    stringBuffer.append(TEXT_119);
d573 1
a573 1
    stringBuffer.append(TEXT_120);
d575 1
a575 1
    stringBuffer.append(TEXT_121);
d579 1
a579 1
    stringBuffer.append(TEXT_122);
d583 1
a583 1
    stringBuffer.append(TEXT_123);
d585 1
a585 1
    stringBuffer.append(TEXT_124);
@


1.13
log
@#121581
Fields for the compartments are named unique.
@
text
@d39 1
a39 1
  protected final String TEXT_19 = NL + "\t\tDiagram diagram = DiagramUtil.createDiagram(diagramModel, \"";
d52 1
a52 1
  protected final String TEXT_32 = " nextNode = DiagramUtil.createNode(diagram, nextValue, null, ";
d71 1
a71 1
  protected final String TEXT_51 = " == nodeVID) {" + NL + "\t\t\tnextNode = DiagramUtil.createNode(viewObject, nextValue, null, ";
d131 1
a131 1
  protected final String TEXT_111 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
d135 10
a144 11
  protected final String TEXT_115 = ") ";
  protected final String TEXT_116 = ".getInstance().createEdge(new ";
  protected final String TEXT_117 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_118 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_119 = ".";
  protected final String TEXT_120 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_121 = ".APPEND, ";
  protected final String TEXT_122 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_123 = NL + "\t\t}";
  protected final String TEXT_124 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_125 = NL;
a264 1
importManager.addImport("org.eclipse.gmf.runtime.diagram.ui.DiagramUtil");
d280 1
d630 1
a630 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.services.ViewService"));
d632 1
a632 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d634 1
a634 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d636 1
a636 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d638 1
a638 1
    stringBuffer.append(nextLink.getUniqueIdentifier());
d640 1
a640 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.util.ViewUtil"));
a641 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_122);
d645 1
a645 1
    stringBuffer.append(TEXT_123);
d649 2
a651 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_125);
@


1.12
log
@#118656
get rid of deprecated API usage
@
text
@d631 1
a631 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService"));
@


1.11
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d30 1
a30 1
  protected final String TEXT_10 = NL + "\t\tResource modelResource = ResourceUtil.load(mySelection.getLocation().toOSString());" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
@


1.10
log
@Copilation error corrected in case of multiplicity = 1
@
text
@d228 9
@


1.9
log
@get rid of 'never used locally' compilation warning
@
text
@d43 103
a145 102
  protected final String TEXT_23 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_24 = " values = ";
  protected final String TEXT_25 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();";
  protected final String TEXT_26 = NL + "\t\tnextValue = ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_30 = " == nodeVID) {" + NL + "\t\t\t";
  protected final String TEXT_31 = " nextNode = DiagramUtil.createNode(diagram, nextValue, null, ";
  protected final String TEXT_32 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_33 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_34 = NL + "\t\t}";
  protected final String TEXT_35 = NL + "\t}";
  protected final String TEXT_36 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_37 = "Children(";
  protected final String TEXT_38 = " viewObject, EObject modelObject) {";
  protected final String TEXT_39 = NL + "\t\tEObject nextValue;" + NL + "\t\t";
  protected final String TEXT_40 = " nextNode;";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = " nextNode;";
  protected final String TEXT_43 = NL + "\t\tfor (";
  protected final String TEXT_44 = " values = ";
  protected final String TEXT_45 = ".iterator(); values.hasNext();) {" + NL + "\t\t\tnextValue = (EObject) values.next();" + NL;
  protected final String TEXT_46 = NL + "\t\tnextValue = ";
  protected final String TEXT_47 = ";";
  protected final String TEXT_48 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_49 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_50 = " == nodeVID) {" + NL + "\t\t\tnextNode = DiagramUtil.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_51 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_52 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_53 = NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_55 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_56 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\tstoreLinks(modelObject);";
  protected final String TEXT_58 = NL + "\t}";
  protected final String TEXT_59 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_60 = " getCompartment(";
  protected final String TEXT_61 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_62 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_63 = " nextView = (";
  protected final String TEXT_64 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_65 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_66 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_68 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_69 = ".eINSTANCE.get";
  protected final String TEXT_70 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_71 = ";";
  protected final String TEXT_72 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_73 = " values = ((";
  protected final String TEXT_74 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_75 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_76 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_77 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_78 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_79 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_80 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_81 = NL + "\t\t\t}";
  protected final String TEXT_82 = NL + "\t\t}";
  protected final String TEXT_83 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_84 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_85 = ".eINSTANCE.get";
  protected final String TEXT_86 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_87 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_88 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_89 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_90 = NL + "\t\t";
  protected final String TEXT_91 = " linkElements;";
  protected final String TEXT_92 = NL + "\t\tlinkElements = (";
  protected final String TEXT_93 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_94 = "));" + NL + "\t\tfor (";
  protected final String TEXT_95 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_96 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_97 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_98 = NL + "\t\t\t";
  protected final String TEXT_99 = " srcNode = (";
  protected final String TEXT_100 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_101 = ";";
  protected final String TEXT_102 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_103 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_104 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_105 = " destinations = ((";
  protected final String TEXT_106 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_107 = NL + "\t\t\t";
  protected final String TEXT_108 = " dstNode = (";
  protected final String TEXT_109 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_110 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_111 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_112 = NL + "\t\t\t\t\t";
  protected final String TEXT_113 = " edge = (";
  protected final String TEXT_114 = ") ";
  protected final String TEXT_115 = ".getInstance().createEdge(new ";
  protected final String TEXT_116 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_117 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_118 = ".";
  protected final String TEXT_119 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_120 = ".APPEND, ";
  protected final String TEXT_121 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_122 = NL + "\t\t}";
  protected final String TEXT_123 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_124 = NL;
d325 6
d337 1
a337 1
    stringBuffer.append(TEXT_23);
d339 1
a339 1
    stringBuffer.append(TEXT_24);
d341 1
a341 1
    stringBuffer.append(TEXT_25);
d345 1
a345 1
    stringBuffer.append(TEXT_26);
d347 1
a347 1
    stringBuffer.append(TEXT_27);
d351 1
a351 1
    stringBuffer.append(TEXT_28);
d353 1
a353 1
    stringBuffer.append(TEXT_29);
d355 1
a355 1
    stringBuffer.append(TEXT_30);
d357 1
a357 1
    stringBuffer.append(TEXT_31);
d359 1
a359 1
    stringBuffer.append(TEXT_32);
d361 1
a361 1
    stringBuffer.append(TEXT_33);
d365 1
a365 1
    stringBuffer.append(TEXT_34);
d370 1
a370 1
    stringBuffer.append(TEXT_35);
d375 1
a375 1
    stringBuffer.append(TEXT_36);
d377 1
a377 1
    stringBuffer.append(TEXT_37);
d379 1
a379 1
    stringBuffer.append(TEXT_38);
d383 1
a383 1
    stringBuffer.append(TEXT_39);
d385 1
a385 1
    stringBuffer.append(TEXT_40);
d389 1
a389 1
    stringBuffer.append(TEXT_41);
d391 1
a391 1
    stringBuffer.append(TEXT_42);
d401 1
a401 1
    stringBuffer.append(TEXT_43);
d403 1
a403 1
    stringBuffer.append(TEXT_44);
d405 1
a405 1
    stringBuffer.append(TEXT_45);
d409 1
a409 1
    stringBuffer.append(TEXT_46);
d411 1
a411 1
    stringBuffer.append(TEXT_47);
d415 1
a415 1
    stringBuffer.append(TEXT_48);
d417 1
a417 1
    stringBuffer.append(TEXT_49);
d419 1
a419 1
    stringBuffer.append(TEXT_50);
d421 1
a421 1
    stringBuffer.append(TEXT_51);
d423 1
a423 1
    stringBuffer.append(TEXT_52);
d427 1
a427 1
    stringBuffer.append(TEXT_53);
d438 1
a438 1
    stringBuffer.append(TEXT_54);
d440 1
a440 1
    stringBuffer.append(TEXT_55);
d442 1
a442 1
    stringBuffer.append(TEXT_56);
d446 1
a446 1
    stringBuffer.append(TEXT_57);
d450 1
a450 1
    stringBuffer.append(TEXT_58);
a455 2
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d459 2
a461 2
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d465 1
a465 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d469 2
d474 1
a474 1
    stringBuffer.append(TEXT_67);
d482 1
a482 1
    stringBuffer.append(TEXT_68);
d484 1
a484 1
    stringBuffer.append(TEXT_69);
d486 1
a486 1
    stringBuffer.append(TEXT_70);
d488 1
a488 1
    stringBuffer.append(TEXT_71);
d492 1
a492 1
    stringBuffer.append(TEXT_72);
d494 1
a494 1
    stringBuffer.append(TEXT_73);
d496 1
a496 1
    stringBuffer.append(TEXT_74);
d500 1
a500 1
    stringBuffer.append(TEXT_75);
d504 1
a504 1
    stringBuffer.append(TEXT_76);
d506 1
a506 1
    stringBuffer.append(TEXT_77);
d508 1
a508 1
    stringBuffer.append(TEXT_78);
d510 1
a510 1
    stringBuffer.append(TEXT_79);
d512 1
a512 1
    stringBuffer.append(TEXT_80);
d516 1
a516 1
    stringBuffer.append(TEXT_81);
d520 1
a520 1
    stringBuffer.append(TEXT_82);
d525 1
a525 1
    stringBuffer.append(TEXT_83);
d532 1
a532 1
    stringBuffer.append(TEXT_84);
d534 1
a534 1
    stringBuffer.append(TEXT_85);
d536 1
a536 1
    stringBuffer.append(TEXT_86);
d538 1
a538 1
    stringBuffer.append(TEXT_87);
d540 1
a540 1
    stringBuffer.append(TEXT_88);
d545 1
a545 1
    stringBuffer.append(TEXT_89);
d549 1
a549 1
    stringBuffer.append(TEXT_90);
d551 1
a551 1
    stringBuffer.append(TEXT_91);
d559 1
a559 1
    stringBuffer.append(TEXT_92);
d561 1
a561 1
    stringBuffer.append(TEXT_93);
d563 1
a563 1
    stringBuffer.append(TEXT_94);
d565 1
a565 1
    stringBuffer.append(TEXT_95);
d570 1
a570 1
    stringBuffer.append(TEXT_96);
d575 1
a575 1
    stringBuffer.append(TEXT_97);
a578 2
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d582 2
d585 1
a585 1
    stringBuffer.append(TEXT_101);
d589 1
a589 1
    stringBuffer.append(TEXT_102);
d593 1
a593 1
    stringBuffer.append(TEXT_103);
d595 1
a595 1
    stringBuffer.append(TEXT_104);
d597 1
a597 1
    stringBuffer.append(TEXT_105);
d599 1
a599 1
    stringBuffer.append(TEXT_106);
a602 2
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d606 2
d611 1
a611 1
    stringBuffer.append(TEXT_110);
d613 1
a613 1
    stringBuffer.append(TEXT_111);
a616 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Edge"));
d620 2
d623 1
a623 1
    stringBuffer.append(TEXT_115);
d625 1
a625 1
    stringBuffer.append(TEXT_116);
d627 1
a627 1
    stringBuffer.append(TEXT_117);
d629 1
a629 1
    stringBuffer.append(TEXT_118);
d631 1
a631 1
    stringBuffer.append(TEXT_119);
d633 1
a633 1
    stringBuffer.append(TEXT_120);
d635 1
a635 1
    stringBuffer.append(TEXT_121);
d639 1
a639 1
    stringBuffer.append(TEXT_122);
d643 1
a643 1
    stringBuffer.append(TEXT_123);
d645 1
a645 1
    stringBuffer.append(TEXT_124);
@


1.8
log
@#116905
Using VisualIDRegistry to create CanonicalEditPolicies
@
text
@d146 1
a146 1
	private String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
d190 1
a190 1
	private String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportUtil importManager) {
@


1.7
log
@#116655

Generating correct access for all the features.
@
text
@d42 103
a144 105
  protected final String TEXT_22 = NL + "\t\tObject featureValue;";
  protected final String TEXT_23 = "\t" + NL + "\t\tfeatureValue = ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_26 = " values = ((";
  protected final String TEXT_27 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_28 = NL + "\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_29 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_30 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_31 = " == nodeVID) {" + NL + "\t\t\t";
  protected final String TEXT_32 = " nextNode = DiagramUtil.createNode(diagram, nextValue, null, ";
  protected final String TEXT_33 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_34 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_35 = NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t}";
  protected final String TEXT_37 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_38 = "Children(";
  protected final String TEXT_39 = " viewObject, EObject modelObject) {";
  protected final String TEXT_40 = NL + "\t\tObject featureValue;" + NL + "\t\t";
  protected final String TEXT_41 = " nextNode;";
  protected final String TEXT_42 = NL + "\t\t";
  protected final String TEXT_43 = " nextNode;";
  protected final String TEXT_44 = NL + "\t\tfeatureValue = ";
  protected final String TEXT_45 = ";";
  protected final String TEXT_46 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_47 = " values = ((";
  protected final String TEXT_48 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_49 = NL + "\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_50 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_51 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_52 = " == nodeVID) {" + NL + "\t\t\tnextNode = DiagramUtil.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_53 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_54 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\t}";
  protected final String TEXT_56 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_57 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_58 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t\tstoreLinks(modelObject);";
  protected final String TEXT_60 = NL + "\t}";
  protected final String TEXT_61 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_62 = " getCompartment(";
  protected final String TEXT_63 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_64 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_65 = " nextView = (";
  protected final String TEXT_66 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_67 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_68 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_70 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_71 = ".eINSTANCE.get";
  protected final String TEXT_72 = "())) {" + NL + "\t\t\tObject featureValue = ";
  protected final String TEXT_73 = ";";
  protected final String TEXT_74 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_75 = " values = ((";
  protected final String TEXT_76 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_77 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_78 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_79 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_80 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_81 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_82 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_83 = NL + "\t\t\t}";
  protected final String TEXT_84 = NL + "\t\t}";
  protected final String TEXT_85 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_86 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_87 = ".eINSTANCE.get";
  protected final String TEXT_88 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_89 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_90 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_91 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_92 = NL + "\t\t";
  protected final String TEXT_93 = " linkElements;";
  protected final String TEXT_94 = NL + "\t\tlinkElements = (";
  protected final String TEXT_95 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_96 = "));" + NL + "\t\tfor (";
  protected final String TEXT_97 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_98 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_99 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_100 = NL + "\t\t\t";
  protected final String TEXT_101 = " srcNode = (";
  protected final String TEXT_102 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tObject structuralFeatureResult = ";
  protected final String TEXT_103 = ";";
  protected final String TEXT_104 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_105 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_106 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_107 = " destinations = ((";
  protected final String TEXT_108 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_109 = NL + "\t\t\t";
  protected final String TEXT_110 = " dstNode = (";
  protected final String TEXT_111 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_112 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_113 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_114 = NL + "\t\t\t\t\t";
  protected final String TEXT_115 = " edge = (";
  protected final String TEXT_116 = ") ";
  protected final String TEXT_117 = ".getInstance().createEdge(new ";
  protected final String TEXT_118 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_119 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_120 = ".";
  protected final String TEXT_121 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_122 = ".APPEND, ";
  protected final String TEXT_123 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_124 = NL + "\t\t}";
  protected final String TEXT_125 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_126 = NL;
d328 1
d331 2
d334 1
a334 1
    stringBuffer.append(TEXT_24);
d336 1
a336 1
	if (childMetaFeature.isListType()) {
a337 2
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
a340 4
    
	} else {

    stringBuffer.append(TEXT_28);
d344 2
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d349 1
a349 1
    stringBuffer.append(nextNode.getVisualID());
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
a354 2
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_34);
d358 1
a358 1
    stringBuffer.append(TEXT_35);
d363 1
a363 1
    stringBuffer.append(TEXT_36);
d368 2
d371 1
a371 1
    stringBuffer.append(nextContainer.getUniqueIdentifier());
a372 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_39);
d376 2
a378 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_41);
d382 2
a384 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_43);
d392 1
d394 2
d400 1
a400 1
		if (childMetaFeature.isListType()) {
d403 1
a403 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a404 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_48);
a405 4
		} else {

    stringBuffer.append(TEXT_49);
    		
d408 1
a408 1
    stringBuffer.append(TEXT_50);
d410 1
a410 1
    stringBuffer.append(TEXT_51);
d412 1
a412 1
    stringBuffer.append(TEXT_52);
d414 1
a414 1
    stringBuffer.append(TEXT_53);
d416 1
a416 1
    stringBuffer.append(TEXT_54);
d420 1
a420 1
    stringBuffer.append(TEXT_55);
d431 1
a431 1
    stringBuffer.append(TEXT_56);
d433 1
a433 1
    stringBuffer.append(TEXT_57);
d435 1
a435 1
    stringBuffer.append(TEXT_58);
d439 1
a439 1
    stringBuffer.append(TEXT_59);
d443 1
a443 1
    stringBuffer.append(TEXT_60);
d449 1
a449 1
    stringBuffer.append(TEXT_61);
d451 1
a451 1
    stringBuffer.append(TEXT_62);
d453 1
a453 1
    stringBuffer.append(TEXT_63);
d455 1
a455 1
    stringBuffer.append(TEXT_64);
d457 1
a457 1
    stringBuffer.append(TEXT_65);
d459 1
a459 1
    stringBuffer.append(TEXT_66);
d461 1
a461 1
    stringBuffer.append(TEXT_67);
d463 1
a463 1
    stringBuffer.append(TEXT_68);
d467 1
a467 1
    stringBuffer.append(TEXT_69);
d475 1
a475 1
    stringBuffer.append(TEXT_70);
d477 1
a477 1
    stringBuffer.append(TEXT_71);
d479 1
a479 1
    stringBuffer.append(TEXT_72);
d481 1
a481 1
    stringBuffer.append(TEXT_73);
d485 1
a485 1
    stringBuffer.append(TEXT_74);
d487 1
a487 1
    stringBuffer.append(TEXT_75);
d489 1
a489 1
    stringBuffer.append(TEXT_76);
d493 1
a493 1
    stringBuffer.append(TEXT_77);
d497 4
d502 1
a502 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
a505 4
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(nextLink.getVisualID());
    stringBuffer.append(TEXT_82);
d509 1
a509 1
    stringBuffer.append(TEXT_83);
d513 1
a513 1
    stringBuffer.append(TEXT_84);
d518 1
a518 1
    stringBuffer.append(TEXT_85);
d525 1
a525 1
    stringBuffer.append(TEXT_86);
d527 1
a527 1
    stringBuffer.append(TEXT_87);
d529 1
a529 1
    stringBuffer.append(TEXT_88);
d531 1
a531 1
    stringBuffer.append(TEXT_89);
d533 1
a533 1
    stringBuffer.append(TEXT_90);
d538 1
a538 1
    stringBuffer.append(TEXT_91);
d542 1
a542 1
    stringBuffer.append(TEXT_92);
d544 1
a544 1
    stringBuffer.append(TEXT_93);
d552 1
a552 1
    stringBuffer.append(TEXT_94);
d554 1
a554 1
    stringBuffer.append(TEXT_95);
d556 1
a556 1
    stringBuffer.append(TEXT_96);
d558 1
a558 1
    stringBuffer.append(TEXT_97);
d563 1
a563 1
    stringBuffer.append(TEXT_98);
d568 1
a568 1
    stringBuffer.append(TEXT_99);
d572 1
a572 1
    stringBuffer.append(TEXT_100);
d574 1
a574 1
    stringBuffer.append(TEXT_101);
d576 1
a576 1
    stringBuffer.append(TEXT_102);
d578 1
a578 1
    stringBuffer.append(TEXT_103);
d582 1
a582 1
    stringBuffer.append(TEXT_104);
d586 4
a592 4
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_108);
d596 1
a596 1
    stringBuffer.append(TEXT_109);
d598 1
a598 1
    stringBuffer.append(TEXT_110);
d600 1
a600 1
    stringBuffer.append(TEXT_111);
d604 1
a604 1
    stringBuffer.append(TEXT_112);
d606 1
a606 1
    stringBuffer.append(TEXT_113);
d610 1
a610 1
    stringBuffer.append(TEXT_114);
d612 1
a612 1
    stringBuffer.append(TEXT_115);
d614 1
a614 1
    stringBuffer.append(TEXT_116);
d616 1
a616 1
    stringBuffer.append(TEXT_117);
d618 1
a618 1
    stringBuffer.append(TEXT_118);
d620 1
a620 1
    stringBuffer.append(TEXT_119);
d622 1
a622 1
    stringBuffer.append(TEXT_120);
d624 1
a624 1
    stringBuffer.append(TEXT_121);
d626 1
a626 1
    stringBuffer.append(TEXT_122);
d628 1
a628 1
    stringBuffer.append(TEXT_123);
d632 1
a632 1
    stringBuffer.append(TEXT_124);
d636 1
a636 1
    stringBuffer.append(TEXT_125);
d638 1
a638 1
    stringBuffer.append(TEXT_126);
@


1.6
log
@#116622
Supporting infinite ChildNode hierarchy in InitDiagramFileAction
@
text
@d9 2
a10 2
public class InitDiagramFileActionGenerator
{
d43 187
a229 111
  protected final String TEXT_23 = "\t" + NL + "\t\tfeatureValue = ((";
  protected final String TEXT_24 = ") diagramModel).";
  protected final String TEXT_25 = "();";
  protected final String TEXT_26 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_27 = " values = ((";
  protected final String TEXT_28 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_29 = NL + "\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_30 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_31 = ".INSTANCE.getNodeVisualID(diagram, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_32 = " == nodeVID) {" + NL + "\t\t\t";
  protected final String TEXT_33 = " nextNode = DiagramUtil.createNode(diagram, nextValue, null, ";
  protected final String TEXT_34 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_35 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\t}";
  protected final String TEXT_37 = NL + "\t}";
  protected final String TEXT_38 = "\t" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_39 = "Children(";
  protected final String TEXT_40 = " viewObject, EObject modelObject) {";
  protected final String TEXT_41 = NL + "\t\tObject featureValue;" + NL + "\t\t";
  protected final String TEXT_42 = " nextNode;";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = " nextNode;";
  protected final String TEXT_45 = NL + "\t\tfeatureValue = ((";
  protected final String TEXT_46 = ") modelObject).";
  protected final String TEXT_47 = "();";
  protected final String TEXT_48 = "\t\t" + NL + "\t\tfor (";
  protected final String TEXT_49 = " values = ((";
  protected final String TEXT_50 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_51 = NL + "\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_52 = NL + "\t\tint nodeVID = ";
  protected final String TEXT_53 = ".INSTANCE.getNodeVisualID(viewObject, nextValue, \"\");" + NL + "\t\tif (";
  protected final String TEXT_54 = " == nodeVID) {" + NL + "\t\t\tnextNode = DiagramUtil.createNode(viewObject, nextValue, null, ";
  protected final String TEXT_55 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextValue, nextNode);" + NL + "\t\t\tcreate";
  protected final String TEXT_56 = "Children(nextNode, nextValue);" + NL + "\t\t}";
  protected final String TEXT_57 = NL + "\t\t}";
  protected final String TEXT_58 = NL + "\t\tnextNode = getCompartment(viewObject, \"";
  protected final String TEXT_59 = "\");" + NL + "\t\tif (nextNode != null) {" + NL + "\t\t\tcreate";
  protected final String TEXT_60 = "Children(nextNode, modelObject);" + NL + "\t\t}";
  protected final String TEXT_61 = NL + "\t\tstoreLinks(modelObject);";
  protected final String TEXT_62 = NL + "\t}";
  protected final String TEXT_63 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate ";
  protected final String TEXT_64 = " getCompartment(";
  protected final String TEXT_65 = " node, String name) {" + NL + "\t\tfor (";
  protected final String TEXT_66 = " it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\t";
  protected final String TEXT_67 = " nextView = (";
  protected final String TEXT_68 = ") it.next();" + NL + "\t\t\tif (nextView instanceof ";
  protected final String TEXT_69 = " && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (";
  protected final String TEXT_70 = ") nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinks(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tstoreFeatureModelFacetLinks(container, containerMetaclass);" + NL + "\t\tstoreTypeModelFacetLinks(container, containerMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeTypeModelFacetLinks(EObject container, EClass containerMetaclass) {\t";
  protected final String TEXT_72 = "\t\t" + NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "())) {" + NL + "\t\t\tObject featureValue = ((";
  protected final String TEXT_75 = ") container).";
  protected final String TEXT_76 = "();";
  protected final String TEXT_77 = "\t\t" + NL + "\t\t\tfor (";
  protected final String TEXT_78 = " values = ((";
  protected final String TEXT_79 = ") featureValue).iterator(); values.hasNext();) {" + NL + "\t\t\t\tEObject nextValue = ((EObject) values.next());";
  protected final String TEXT_80 = NL + "\t\t\tEObject nextValue = (EObject) featureValue;";
  protected final String TEXT_81 = NL + "\t\t\tint linkVID = ";
  protected final String TEXT_82 = ".INSTANCE.getLinkWithClassVisualID(nextValue);" + NL + "\t\t\tif (";
  protected final String TEXT_83 = " == linkVID) {" + NL + "\t\t\t\t((";
  protected final String TEXT_84 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_85 = "))).add(nextValue);" + NL + "\t\t\t}";
  protected final String TEXT_86 = NL + "\t\t\t}";
  protected final String TEXT_87 = NL + "\t\t}";
  protected final String TEXT_88 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeFeatureModelFacetLinks(EObject container, EClass containerMetaclass) {";
  protected final String TEXT_89 = NL + "\t\tif (-1 != containerMetaclass.getFeatureID(";
  protected final String TEXT_90 = ".eINSTANCE.get";
  protected final String TEXT_91 = "())) {" + NL + "\t\t\t((";
  protected final String TEXT_92 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_93 = "))).add(container);" + NL + "\t\t}";
  protected final String TEXT_94 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {";
  protected final String TEXT_95 = NL + "\t\t";
  protected final String TEXT_96 = " linkElements;";
  protected final String TEXT_97 = NL + "\t\tlinkElements = (";
  protected final String TEXT_98 = ") myLinkVID2EObjectMap.get(new Integer(";
  protected final String TEXT_99 = "));" + NL + "\t\tfor (";
  protected final String TEXT_100 = " it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_101 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_102 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_103 = NL + "\t\t\t";
  protected final String TEXT_104 = " srcNode = (";
  protected final String TEXT_105 = ") myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t";
  protected final String TEXT_106 = " structuralFeature = ";
  protected final String TEXT_107 = ".eINSTANCE.get";
  protected final String TEXT_108 = "();" + NL + "\t\t\tObject structuralFeatureResult = linkElement.eGet(structuralFeature);";
  protected final String TEXT_109 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_110 = NL + "\t\t\tif (structuralFeatureResult instanceof ";
  protected final String TEXT_111 = " == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (";
  protected final String TEXT_112 = " destinations = ((";
  protected final String TEXT_113 = ") structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_114 = NL + "\t\t\t";
  protected final String TEXT_115 = " dstNode = (";
  protected final String TEXT_116 = ") myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_117 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_118 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_119 = NL + "\t\t\t\t\t";
  protected final String TEXT_120 = " edge = (";
  protected final String TEXT_121 = ") ";
  protected final String TEXT_122 = ".getInstance().createEdge(new ";
  protected final String TEXT_123 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_124 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_125 = ".";
  protected final String TEXT_126 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_127 = ".APPEND, ";
  protected final String TEXT_128 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_129 = NL + "\t\t}";
  protected final String TEXT_130 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_131 = NL;

  public String generate(Object argument)
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
a333 2
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_25);
d337 2
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
a341 2
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_28);
d343 1
a343 1
	} else if (!childMetaFeature.isPrimitiveType()) {
d345 1
a345 1
    stringBuffer.append(TEXT_29);
a347 1
	if (childMetaFeature.isListType() || !childMetaFeature.isPrimitiveType()) {
d349 2
d352 1
a352 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d354 1
a354 1
    stringBuffer.append(nextNode.getVisualID());
d356 1
a356 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
d358 1
a358 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
a359 2
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_35);
a360 1
	}
d363 1
a363 1
    stringBuffer.append(TEXT_36);
d368 1
a368 1
    stringBuffer.append(TEXT_37);
d373 2
d376 1
a376 1
    stringBuffer.append(nextContainer.getUniqueIdentifier());
a377 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_40);
d381 2
a383 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_42);
d387 2
a389 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Node"));
    stringBuffer.append(TEXT_44);
d398 2
a400 4
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_47);
d404 1
a404 1
    stringBuffer.append(TEXT_48);
d406 1
a406 1
    stringBuffer.append(TEXT_49);
d408 1
a408 1
    stringBuffer.append(TEXT_50);
d410 1
a410 1
		} else if (!childMetaFeature.isPrimitiveType()) {
d412 1
a412 1
    stringBuffer.append(TEXT_51);
a414 1
		if (childMetaFeature.isListType() || !childMetaFeature.isPrimitiveType()) {
d416 1
a416 1
    stringBuffer.append(TEXT_52);
d418 1
a418 1
    stringBuffer.append(TEXT_53);
d420 1
a420 1
    stringBuffer.append(TEXT_54);
d422 1
a422 1
    stringBuffer.append(TEXT_55);
d424 1
a424 1
    stringBuffer.append(TEXT_56);
a425 1
		}
d428 1
a428 1
    stringBuffer.append(TEXT_57);
d439 1
a439 1
    stringBuffer.append(TEXT_58);
d441 1
a441 1
    stringBuffer.append(TEXT_59);
d443 1
a443 1
    stringBuffer.append(TEXT_60);
d447 1
a447 1
    stringBuffer.append(TEXT_61);
d451 1
a451 1
    stringBuffer.append(TEXT_62);
d457 1
a457 1
    stringBuffer.append(TEXT_63);
d459 1
a459 1
    stringBuffer.append(TEXT_64);
d461 1
a461 1
    stringBuffer.append(TEXT_65);
d463 1
a463 1
    stringBuffer.append(TEXT_66);
d465 1
a465 1
    stringBuffer.append(TEXT_67);
d467 1
a467 1
    stringBuffer.append(TEXT_68);
d469 1
a469 1
    stringBuffer.append(TEXT_69);
d471 1
a471 1
    stringBuffer.append(TEXT_70);
d475 1
a475 1
    stringBuffer.append(TEXT_71);
d483 4
d488 1
a488 1
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenPackage().getQualifiedPackageInterfaceName()));
a489 6
    stringBuffer.append(childMetaFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName(childMetaFeature.getGenClass().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(childMetaFeature.getGetAccessor());
    stringBuffer.append(TEXT_76);
d493 1
a493 1
    stringBuffer.append(TEXT_77);
d495 1
a495 1
    stringBuffer.append(TEXT_78);
d497 1
a497 1
    stringBuffer.append(TEXT_79);
d499 1
a499 1
		} else if (!childMetaFeature.isPrimitiveType()) {
d501 1
a501 1
    stringBuffer.append(TEXT_80);
a503 1
		if (childMetaFeature.isListType() || !childMetaFeature.isPrimitiveType()) {
d505 1
a505 1
    stringBuffer.append(TEXT_81);
d507 1
a507 1
    stringBuffer.append(TEXT_82);
d509 1
a509 1
    stringBuffer.append(TEXT_83);
d511 1
a511 1
    stringBuffer.append(TEXT_84);
d513 1
a513 1
    stringBuffer.append(TEXT_85);
a514 1
		}
d517 1
a517 1
    stringBuffer.append(TEXT_86);
d521 1
a521 1
    stringBuffer.append(TEXT_87);
d526 1
a526 1
    stringBuffer.append(TEXT_88);
d533 1
a533 1
    stringBuffer.append(TEXT_89);
d535 1
a535 1
    stringBuffer.append(TEXT_90);
d537 1
a537 1
    stringBuffer.append(TEXT_91);
d539 1
a539 1
    stringBuffer.append(TEXT_92);
d541 1
a541 1
    stringBuffer.append(TEXT_93);
d546 1
a546 1
    stringBuffer.append(TEXT_94);
d550 1
a550 1
    stringBuffer.append(TEXT_95);
d552 1
a552 1
    stringBuffer.append(TEXT_96);
d560 1
a560 1
    stringBuffer.append(TEXT_97);
d562 1
a562 1
    stringBuffer.append(TEXT_98);
d564 1
a564 1
    stringBuffer.append(TEXT_99);
d566 1
a566 1
    stringBuffer.append(TEXT_100);
d571 1
a571 1
    stringBuffer.append(TEXT_101);
d576 1
a576 1
    stringBuffer.append(TEXT_102);
d580 1
a580 1
    stringBuffer.append(TEXT_103);
d582 1
a582 1
    stringBuffer.append(TEXT_104);
d584 3
a586 7
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EStructuralFeature"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName(domainLinkTargetGenFeature.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_107);
    stringBuffer.append(domainLinkTargetGenFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_108);
d590 1
a590 1
    stringBuffer.append(TEXT_109);
d594 1
a594 1
    stringBuffer.append(TEXT_110);
d596 1
a596 1
    stringBuffer.append(TEXT_111);
d598 1
a598 1
    stringBuffer.append(TEXT_112);
d600 1
a600 1
    stringBuffer.append(TEXT_113);
d604 1
a604 1
    stringBuffer.append(TEXT_114);
d606 1
a606 1
    stringBuffer.append(TEXT_115);
d608 1
a608 1
    stringBuffer.append(TEXT_116);
d612 1
a612 1
    stringBuffer.append(TEXT_117);
d614 1
a614 1
    stringBuffer.append(TEXT_118);
d618 1
a618 1
    stringBuffer.append(TEXT_119);
d620 1
a620 1
    stringBuffer.append(TEXT_120);
d622 1
a622 1
    stringBuffer.append(TEXT_121);
d624 1
a624 1
    stringBuffer.append(TEXT_122);
d626 1
a626 1
    stringBuffer.append(TEXT_123);
d628 1
a628 1
    stringBuffer.append(TEXT_124);
d630 1
a630 1
    stringBuffer.append(TEXT_125);
d632 1
a632 1
    stringBuffer.append(TEXT_126);
d634 1
a634 1
    stringBuffer.append(TEXT_127);
d636 1
a636 1
    stringBuffer.append(TEXT_128);
d640 1
a640 1
    stringBuffer.append(TEXT_129);
d644 1
a644 1
    stringBuffer.append(TEXT_130);
d646 1
a646 1
    stringBuffer.append(TEXT_131);
d649 1
a649 1
}
@


1.5
log
@#116031 avoid hardcoded class names in templates
@
text
@d22 130
a151 68
  protected final String TEXT_2 = ";";
  protected final String TEXT_3 = NL + "import java.io.IOException;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " implements IObjectActionDelegate, IInputValidator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    private static final String FILE_EXT = \"";
  protected final String TEXT_6 = "\";" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbenchPart myPart;" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFile mySelection;" + NL + "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myLinkWithClassVID2EObject = new HashMap();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map myEObject2NodeMap = new HashMap();" + NL + "" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void setActivePart(IAction action, IWorkbenchPart targetPart) {" + NL + "\t\tmyPart = targetPart;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Shell getShell() {" + NL + "\t\treturn myPart.getSite().getShell();" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void selectionChanged(IAction action, ISelection selection) {" + NL + "\t\tmySelection = null;" + NL + "\t\taction.setEnabled(false);" + NL + "\t\tif (selection instanceof IStructuredSelection == false || selection.isEmpty()) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tmySelection = (IFile) ((IStructuredSelection) selection).getFirstElement();" + NL + "\t\taction.setEnabled(true);" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */\t" + NL + "\tpublic String isValid(String newText) {" + NL + "\t\tIStatus status = ResourcesPlugin.getWorkspace().validateName(newText, IResource.FILE);" + NL + "\t\tif (!status.isOK()) {" + NL + "\t\t\treturn status.getMessage();" + NL + "\t\t}" + NL + "\t\tif (mySelection.getParent().getFile(new Path(newText).addFileExtension(FILE_EXT)).exists()) {" + NL + "\t\t\treturn \"File already exists, choose another name\";" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tpublic void run(IAction action) {" + NL + "\t\tfinal InputDialog outputFileNameDialog = new InputDialog(getShell(), \"Diagram file name\", \"Please provide diagram file name\", mySelection.getProjectRelativePath().removeFileExtension().addFileExtension(FILE_EXT).lastSegment(), this);" + NL + "\t\tif (outputFileNameDialog.open() != InputDialog.OK) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tfinal EObject diagramModelObject = load();" + NL + "\t\tif (diagramModelObject == null) {" + NL + "\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to load user model\");" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tOperationUtil.runAsUnchecked(new MRunnable() {" + NL + "\t\t\tpublic Object run() {" + NL + "\t\t\t\tEObject diagram = create(diagramModelObject);" + NL + "\t\t\t\tif (diagram == null) {" + NL + "\t\t\t\t\tMessageDialog.openError(getShell(), \"Error\", \"Failed to create diagram object\");" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\tIFile destFile = mySelection.getParent().getFile(new Path(outputFileNameDialog.getValue()));" + NL + "\t\t\t\tsave(destFile.getLocation().toOSString(), diagram);" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tIDE.openEditor(myPart.getSite().getPage(), destFile);" + NL + "\t\t\t\t} catch (PartInitException ex) {" + NL + "\t\t\t\t\tex.printStackTrace();" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject load() {";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = " resourceSet = new ";
  protected final String TEXT_9 = "();" + NL + "\t\tResource resource = resourceSet.getResource(";
  protected final String TEXT_10 = ".createPlatformResourceURI(mySelection.getFullPath().toString()), true);" + NL + "\t\ttry {" + NL + "\t\t\tresource.load(Collections.EMPTY_MAP);" + NL + "\t\t\treturn (EObject) resource.getContents().get(0);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t\treturn null;";
  protected final String TEXT_11 = NL + "\t\tResource modelResource = ResourceUtil.load(mySelection.getLocation().toOSString());" + NL + "\t\treturn (EObject) modelResource.getContents().get(0);";
  protected final String TEXT_12 = NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void save(String filePath, EObject canvas) {" + NL + "\t\tResource resource = ResourceUtil.create(filePath, null);";
  protected final String TEXT_13 = NL + "\t\tresource.getContents().add(((Diagram) canvas).getElement());";
  protected final String TEXT_14 = NL + "\t\tresource.getContents().add(canvas);" + NL + "\t\ttry {" + NL + "\t\t\tresource.save(Collections.EMPTY_MAP);" + NL + "\t\t} catch (IOException ex) {" + NL + "\t\t\tex.printStackTrace();" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate EObject create(EObject diagramModel) {" + NL + "\t\tint diagramVID = ";
  protected final String TEXT_15 = ".INSTANCE.getDiagramVisualID(diagramModel);" + NL + "\t\tif (diagramVID == -1) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tmyLinkWithClassVID2EObject.clear();" + NL + "\t\tmyEObject2NodeMap.clear();";
  protected final String TEXT_16 = NL + "\t\tmyLinkWithClassVID2EObject.put(new Integer(";
  protected final String TEXT_17 = "), new LinkedList());";
  protected final String TEXT_18 = NL + "\t\tDiagram diagram = DiagramUtil.createDiagram(diagramModel, \"";
  protected final String TEXT_19 = "\", ";
  protected final String TEXT_20 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\tcreateDiagramChildren(diagram, diagramModel);" + NL + "\t\t" + NL + "\t\tcreateLinks();" + NL + "\t\t" + NL + "\t    return diagram;" + NL + "\t}" + NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createDiagramChildren(Diagram diagram, EObject diagramObject) {" + NL + "\t\tfor (Iterator it = diagramObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tstoreLinkReferenceOnly(nextChild);" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_21 = ".INSTANCE.getNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreLinkWithClass(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(diagram, nextChild, null, ";
  protected final String TEXT_22 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t\tswitch (nodeVID) {";
  protected final String TEXT_23 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_24 = ":" + NL + "\t\t\t\tcreate";
  protected final String TEXT_25 = "Children(nextNode, nextChild);" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_26 = NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_27 = "\t\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void create";
  protected final String TEXT_28 = "Children(Node node, EObject nodeObject) {" + NL + "\t\tfor (Iterator it = nodeObject.eContents().iterator(); it.hasNext();) {" + NL + "\t\t\tEObject nextChild = (EObject) it.next();" + NL + "\t\t\tstoreLinkReferenceOnly(nextChild);" + NL + "\t\t\tint nodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getChildNodeVisualID(nextChild);" + NL + "\t\t\tif (nodeVID == -1) {" + NL + "\t\t\t\tstoreLinkWithClass(nextChild);" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tNode container;" + NL + "\t\t\tswitch (nodeVID) {";
  protected final String TEXT_30 = "\t\t" + NL + "\t\t\tcase ";
  protected final String TEXT_31 = ":";
  protected final String TEXT_32 = "\t\t\t" + NL + "\t\t\t\tcontainer = getCompartment(node, \"";
  protected final String TEXT_33 = "\");";
  protected final String TEXT_34 = NL + "\t\t\t\tcontainer = node;";
  protected final String TEXT_35 = NL + "\t\t\t\tbreak;";
  protected final String TEXT_36 = NL + "\t\t\tdefault:" + NL + "\t\t\t\tcontainer = node;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(container, nextChild, null, ";
  protected final String TEXT_37 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_38 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Node getCompartment(Node node, String name) {" + NL + "\t\tfor (Iterator it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tView nextView = (View) it.next();" + NL + "\t\t\tif (nextView instanceof Node && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (Node) nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn node;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeLinkWithClass(EObject link) {" + NL + "\t\tint linkVID = ";
  protected final String TEXT_39 = ".INSTANCE.getLinkWithClassVisualID(link);" + NL + "\t\tif (linkVID == -1) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(linkVID))).add(link);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinkReferenceOnly(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tfor (Iterator it = containerMetaclass.getEAllStructuralFeatures().iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature nextFeature = (EStructuralFeature) it.next();";
  protected final String TEXT_40 = NL + "\t\t\tif (";
  protected final String TEXT_41 = ".eINSTANCE.get";
  protected final String TEXT_42 = "().equals(nextFeature)) {" + NL + "\t\t\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_43 = "))).add(container);" + NL + "\t\t\t}";
  protected final String TEXT_44 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {" + NL + "\t\tCollection linkElements;";
  protected final String TEXT_45 = NL + "\t\tlinkElements = (Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_46 = "));" + NL + "\t\tfor (Iterator it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_47 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_48 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_49 = NL + "\t\t\tNode srcNode = (Node) myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "();" + NL + "\t\t\tObject structuralFeatureResult = linkElement.eGet(structuralFeature);";
  protected final String TEXT_52 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_53 = NL + "\t\t\tif (structuralFeatureResult instanceof Collection == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator destinations = ((Collection) structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_54 = NL + "\t\t\tNode dstNode = (Node) myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_55 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_56 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_57 = NL + "\t\t\t\t\t";
  protected final String TEXT_58 = " edge = (";
  protected final String TEXT_59 = ") ";
  protected final String TEXT_60 = ".getInstance().createEdge(new ";
  protected final String TEXT_61 = "() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (";
  protected final String TEXT_62 = ".class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_63 = ".";
  protected final String TEXT_64 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ";
  protected final String TEXT_65 = ".APPEND, ";
  protected final String TEXT_66 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_67 = NL + "\t\t}";
  protected final String TEXT_68 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_69 = NL;
d160 3
d167 34
a200 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
d202 1
a202 1
    importManager.markImportLocation(stringBuffer);
d204 1
a204 1
    stringBuffer.append(genDiagram.getInitDiagramFileActionClassName());
d206 1
a206 1
    stringBuffer.append(genDiagram.getDiagramFileExtension());
d208 1
a208 1
    if (genDiagram.isSameFileForDiagramAndModel()) {
d210 1
a210 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d212 1
a212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.impl.ResourceSetImpl"));
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d216 1
a216 1
    } else {
d218 2
a220 2
    stringBuffer.append(TEXT_12);
    if (genDiagram.isSameFileForDiagramAndModel()) {
d222 1
a222 1
    }
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d233 2
d238 1
a238 1
    stringBuffer.append(TEXT_18);
d240 1
a240 1
    stringBuffer.append(TEXT_19);
a241 2
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d243 3
a245 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
d248 6
a253 2
for (Iterator it = genNodes.iterator(); it.hasNext();) {
	GenNode nextGenNode = (GenNode) it.next();
d256 1
a256 1
    stringBuffer.append(nextGenNode.getVisualID());
d258 1
a258 1
    stringBuffer.append(nextGenNode.getUniqueIdentifier());
d261 1
a261 1
}
d264 4
d269 1
a269 2
for (Iterator genNodesIt = genNodes.iterator(); genNodesIt.hasNext();) {
	GenNode nextGenNode = (GenNode) genNodesIt.next();
a270 4
    stringBuffer.append(TEXT_27);
    stringBuffer.append(nextGenNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d272 3
a274 3
    
	for (Iterator childGenNodesIt = AccessUtil.getAllChildNodes(nextGenNode).iterator(); childGenNodesIt.hasNext();) {
		GenChildNode nextChildGenNode = (GenChildNode) childGenNodesIt.next();
d277 1
a277 1
    stringBuffer.append(nextChildGenNode.getVisualID());
d279 77
d357 2
a358 2
		if (nextChildGenNode.getContainer() instanceof GenCompartment) {
			GenCompartment compartment = (GenCompartment) nextChildGenNode.getContainer();
d360 1
a360 3
    stringBuffer.append(TEXT_32);
    stringBuffer.append(compartment.getTitle());
    stringBuffer.append(TEXT_33);
d362 8
a369 1
		} else {
d371 5
a375 1
    stringBuffer.append(TEXT_34);
d379 1
a379 1
    stringBuffer.append(TEXT_35);
d383 21
a403 3
    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPluginQualifiedClassName()));
    stringBuffer.append(TEXT_37);
d407 34
a440 1
    stringBuffer.append(TEXT_38);
d442 21
a462 1
    stringBuffer.append(TEXT_39);
d469 1
a469 1
    stringBuffer.append(TEXT_40);
d471 1
a471 1
    stringBuffer.append(TEXT_41);
d473 3
a475 1
    stringBuffer.append(TEXT_42);
d477 1
a477 1
    stringBuffer.append(TEXT_43);
d482 7
a488 1
    stringBuffer.append(TEXT_44);
d490 2
d496 3
a498 1
    stringBuffer.append(TEXT_45);
d500 3
a502 1
    stringBuffer.append(TEXT_46);
d507 1
a507 1
    stringBuffer.append(TEXT_47);
d512 1
a512 1
    stringBuffer.append(TEXT_48);
d516 7
a522 1
    stringBuffer.append(TEXT_49);
d524 1
a524 1
    stringBuffer.append(TEXT_50);
d526 1
a526 1
    stringBuffer.append(TEXT_51);
d530 1
a530 1
    stringBuffer.append(TEXT_52);
d534 7
a540 1
    stringBuffer.append(TEXT_53);
d544 5
a548 1
    stringBuffer.append(TEXT_54);
d552 1
a552 1
    stringBuffer.append(TEXT_55);
d554 1
a554 1
    stringBuffer.append(TEXT_56);
d558 1
a558 1
    stringBuffer.append(TEXT_57);
d560 1
a560 1
    stringBuffer.append(TEXT_58);
d562 1
a562 1
    stringBuffer.append(TEXT_59);
d564 1
a564 1
    stringBuffer.append(TEXT_60);
d566 1
a566 1
    stringBuffer.append(TEXT_61);
d568 1
a568 1
    stringBuffer.append(TEXT_62);
d570 1
a570 1
    stringBuffer.append(TEXT_63);
d572 1
a572 1
    stringBuffer.append(TEXT_64);
d574 1
a574 1
    stringBuffer.append(TEXT_65);
d576 1
a576 1
    stringBuffer.append(TEXT_66);
d580 1
a580 1
    stringBuffer.append(TEXT_67);
d584 1
a584 1
    stringBuffer.append(TEXT_68);
d586 1
a586 1
    stringBuffer.append(TEXT_69);
@


1.4
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d126 1
a126 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d143 1
a143 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d167 1
a167 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d201 1
a201 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getProvidersPackageName() + ".ElementTypes"));
@


1.3
log
@[ashatalin] #115062 update to match changes in the runtime
@
text
@d23 1
a23 1
  protected final String TEXT_3 = NL + "import java.io.IOException;" + NL + "import java.util.Collection;" + NL + "import java.util.Collections;" + NL + "import java.util.HashMap;" + NL + "import java.util.Iterator;" + NL + "import java.util.LinkedList;" + NL + "import java.util.Map;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.core.runtime.IStatus;" + NL + "import org.eclipse.core.runtime.Path;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EStructuralFeature;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.gmf.runtime.diagram.core.internal.services.view.ViewService;" + NL + "import org.eclipse.gmf.runtime.diagram.core.util.ViewUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.DiagramUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.edit.MRunnable;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.OperationUtil;" + NL + "import org.eclipse.gmf.runtime.emf.core.util.ResourceUtil;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.Edge;" + NL + "import org.eclipse.gmf.runtime.notation.Node;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.jface.action.IAction;" + NL + "import org.eclipse.jface.dialogs.IInputValidator;" + NL + "import org.eclipse.jface.dialogs.InputDialog;" + NL + "import org.eclipse.jface.dialogs.MessageDialog;" + NL + "import org.eclipse.jface.viewers.ISelection;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.ui.IObjectActionDelegate;" + NL + "import org.eclipse.ui.IWorkbenchPart;" + NL + "import org.eclipse.ui.PartInitException;" + NL + "import org.eclipse.ui.ide.IDE;";
d77 13
a89 7
  protected final String TEXT_57 = NL + "\t\t\t\t\tEdge edge = (Edge) ViewService.getInstance().createEdge(new IAdaptable() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (IElementType.class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_58 = ".";
  protected final String TEXT_59 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ViewUtil.APPEND, ";
  protected final String TEXT_60 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_61 = NL + "\t\t}";
  protected final String TEXT_62 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_63 = NL;
d269 10
d280 1
a280 1
    stringBuffer.append(TEXT_58);
d282 3
a284 1
    stringBuffer.append(TEXT_59);
d286 1
a286 1
    stringBuffer.append(TEXT_60);
d290 1
a290 1
    stringBuffer.append(TEXT_61);
d294 1
a294 1
    stringBuffer.append(TEXT_62);
d296 1
a296 1
    stringBuffer.append(TEXT_63);
@


1.2
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d77 1
a77 1
  protected final String TEXT_57 = NL + "\t\t\t\t\tEdge edge = (Edge) ViewService.getInstance().createConnectorView(new IAdaptable() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (IElementType.class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
@


1.1
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d4 1
d51 33
a83 30
  protected final String TEXT_31 = ":" + NL + "\t\t\t\tcontainer = getCompartment(node, \"";
  protected final String TEXT_32 = "\");" + NL + "\t\t\t\tbreak;";
  protected final String TEXT_33 = NL + "\t\t\tdefault:" + NL + "\t\t\t\tcontainer = node;" + NL + "\t\t\t\tbreak;" + NL + "\t\t\t}" + NL + "\t\t\tNode nextNode = DiagramUtil.createNode(container, nextChild, null, ";
  protected final String TEXT_34 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\tmyEObject2NodeMap.put(nextChild, nextNode);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_35 = NL + "\t" + NL + "    /**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate Node getCompartment(Node node, String name) {" + NL + "\t\tfor (Iterator it = node.getChildren().iterator(); it.hasNext();) {" + NL + "\t\t\tView nextView = (View) it.next();" + NL + "\t\t\tif (nextView instanceof Node && name.equals(nextView.getType())) {" + NL + "\t\t\t\treturn (Node) nextView;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn node;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void storeLinkWithClass(EObject link) {" + NL + "\t\tint linkVID = ";
  protected final String TEXT_36 = ".INSTANCE.getLinkWithClassVisualID(link);" + NL + "\t\tif (linkVID == -1) {" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(linkVID))).add(link);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t *@@generated" + NL + "\t */" + NL + "\tprivate void storeLinkReferenceOnly(EObject container) {" + NL + "\t\tEClass containerMetaclass = container.eClass();" + NL + "\t\tfor (Iterator it = containerMetaclass.getEAllStructuralFeatures().iterator(); it.hasNext();) {" + NL + "\t\t\tEStructuralFeature nextFeature = (EStructuralFeature) it.next();";
  protected final String TEXT_37 = NL + "\t\t\tif (";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "().equals(nextFeature)) {" + NL + "\t\t\t\t((Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_40 = "))).add(container);" + NL + "\t\t\t}";
  protected final String TEXT_41 = NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "     * @@generated" + NL + "     */" + NL + "\tprivate void createLinks() {" + NL + "\t\tCollection linkElements;";
  protected final String TEXT_42 = NL + "\t\tlinkElements = (Collection) myLinkWithClassVID2EObject.get(new Integer(";
  protected final String TEXT_43 = "));" + NL + "\t\tfor (Iterator it = linkElements.iterator(); it.hasNext();) {" + NL + "\t\t\tEObject linkElement = (EObject) it.next();";
  protected final String TEXT_44 = NL + "\t\t\tEObject src = linkElement.eContainer();";
  protected final String TEXT_45 = NL + "\t\t\tEObject src = linkElement;";
  protected final String TEXT_46 = NL + "\t\t\tNode srcNode = (Node) myEObject2NodeMap.get(src);" + NL + "\t\t\tif (srcNode == null) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEStructuralFeature structuralFeature = ";
  protected final String TEXT_47 = ".eINSTANCE.get";
  protected final String TEXT_48 = "();" + NL + "\t\t\tObject structuralFeatureResult = linkElement.eGet(structuralFeature);";
  protected final String TEXT_49 = NL + "\t\t\tif (structuralFeatureResult instanceof EObject == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tEObject dst = (EObject) structuralFeatureResult;";
  protected final String TEXT_50 = NL + "\t\t\tif (structuralFeatureResult instanceof Collection == false) {" + NL + "\t\t\t\tcontinue;" + NL + "\t\t\t}" + NL + "\t\t\tfor (Iterator destinations = ((Collection) structuralFeatureResult).iterator(); destinations.hasNext();) {" + NL + "\t\t\t\tEObject dst = (EObject) destinations.next();";
  protected final String TEXT_51 = NL + "\t\t\tNode dstNode = (Node) myEObject2NodeMap.get(dst);" + NL + "\t\t\tif (dstNode != null) {";
  protected final String TEXT_52 = NL + "\t\t\t\tDiagramUtil.createEdge(srcNode, dstNode, linkElement, null, ";
  protected final String TEXT_53 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\t\t\tEdge edge = (Edge) ViewService.getInstance().createConnectorView(new IAdaptable() {" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (IElementType.class.equals(adapter)) {" + NL + "\t\t\t\t\t\t\t\treturn ";
  protected final String TEXT_55 = ".";
  protected final String TEXT_56 = ";" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn null;" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}, srcNode.getDiagram(), \"\", ViewUtil.APPEND, ";
  protected final String TEXT_57 = ".DIAGRAM_PREFERENCES_HINT);" + NL + "\t\t\t\t\tif (edge != null) {" + NL + "\t\t\t\t\t\tedge.setSource(srcNode);" + NL + "\t\t\t\t\t\tedge.setTarget(dstNode);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}";
  protected final String TEXT_58 = NL + "\t\t}";
  protected final String TEXT_59 = NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_60 = NL;
d164 1
a164 1
	for (Iterator childGenNodesIt = nextGenNode.getChildNodes().iterator(); childGenNodesIt.hasNext();) {
d170 4
a173 1
    stringBuffer.append(nextChildGenNode.getGroupID());
d175 10
d188 1
a188 1
    stringBuffer.append(TEXT_33);
d190 1
a190 1
    stringBuffer.append(TEXT_34);
d194 1
a194 1
    stringBuffer.append(TEXT_35);
d196 1
a196 1
    stringBuffer.append(TEXT_36);
d203 1
a203 1
    stringBuffer.append(TEXT_37);
d205 1
a205 1
    stringBuffer.append(TEXT_38);
d207 1
a207 1
    stringBuffer.append(TEXT_39);
d209 1
a209 1
    stringBuffer.append(TEXT_40);
d214 1
a214 1
    stringBuffer.append(TEXT_41);
d220 1
a220 1
    stringBuffer.append(TEXT_42);
d222 1
a222 1
    stringBuffer.append(TEXT_43);
d227 1
a227 1
    stringBuffer.append(TEXT_44);
d232 1
a232 1
    stringBuffer.append(TEXT_45);
d236 1
a236 1
    stringBuffer.append(TEXT_46);
d238 1
a238 1
    stringBuffer.append(TEXT_47);
d240 1
a240 1
    stringBuffer.append(TEXT_48);
d244 1
a244 1
    stringBuffer.append(TEXT_49);
d248 1
a248 1
    stringBuffer.append(TEXT_50);
d252 1
a252 1
    stringBuffer.append(TEXT_51);
d256 1
a256 1
    stringBuffer.append(TEXT_52);
d258 1
a258 1
    stringBuffer.append(TEXT_53);
d262 1
a262 1
    stringBuffer.append(TEXT_54);
d264 1
a264 1
    stringBuffer.append(TEXT_55);
d266 1
a266 1
    stringBuffer.append(TEXT_56);
d268 1
a268 1
    stringBuffer.append(TEXT_57);
d272 1
a272 1
    stringBuffer.append(TEXT_58);
d276 1
a276 1
    stringBuffer.append(TEXT_59);
d278 1
a278 1
    stringBuffer.append(TEXT_60);
@

