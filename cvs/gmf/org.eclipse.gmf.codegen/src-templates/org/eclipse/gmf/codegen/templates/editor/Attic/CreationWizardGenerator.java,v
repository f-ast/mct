head	1.33;
access;
symbols
	v20081022-1925:1.33
	v20081015-1925:1.33
	v20081008-1925:1.33
	v20081001-1925:1.33
	v20080924-1925:1.33
	v20080917-1925:1.33
	v20080911-1728:1.33
	v20080910-1520:1.33
	v20080903-1520:1.33
	v20080827-1520:1.33
	v20080813-1520:1.33
	v20080806-1520:1.33
	RC3_20:1.32
	v20070614-1400:1.32
	v20070608-1300:1.32
	v20070605-1400:1.32
	v20070601-1400:1.31
	v20070525-1500:1.31
	v20070520-1200:1.31
	v20070518-1300:1.30
	v20070504-1000:1.30
	v20070427-0600:1.30
	v20070420-1000:1.29
	v20070413-1300:1.29
	v20070405-1100:1.29
	v20070403-1500:1.29
	v20070330-1300:1.29
	v20060330-1300:1.29
	v20070322-1100:1.29
	v20060316-0600:1.29
	v20070307-0700:1.29
	v20070301-1200:1.29
	v20070228-2000:1.29
	v20070221-1500:1.29
	v20070208-1800:1.29
	v20070202-0200:1.18
	v20070103-0300:1.29
	M4_20:1.29
	v20061222-1800:1.29
	v20061218-1200:1.28
	v20061214-0000:1.28
	v20061120-1300:1.26
	M3_20:1.25
	v20061117-0800:1.25
	v20061027-1200:1.18
	v20061020-1000:1.18
	v20061013-1330:1.21
	v20060919-0800:1.18
	v20060907-1100:1.18
	M1_20:1.18
	v20060904-1500:1.18
	v20060824-1600:1.18
	v20060817-1500:1.18
	v20060728-0500:1.18
	v20060713-1700:1.18
	R1_0_maintenance:1.18.0.2
	R1_0:1.18
	v20060627-1200:1.18
	v20060626-1420:1.18
	v20060620-0400:1.18
	v20060616-1400:1.18
	v20060616-1200:1.18
	v20060609-1400:1.18
	v20060531-1730:1.17
	v20060530-1930:1.17
	v20060526-1200:1.15
	v20060519-1300:1.14
	v20060519-0800:1.14
	v20060512-1000:1.14
	I20060512-1000:1.14
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.13
	I20060407-1200:1.10
	I20060331-1000:1.9
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.9
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.33
date	2007.06.19.19.26.18;	author dstadnik;	state dead;
branches;
next	1.32;
commitid	611446782dd84567;

1.32
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.31;
commitid	17ef46643bcf4567;

1.31
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.30;
commitid	7de14650454a4567;

1.30
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.29;
commitid	78b462dc68e4567;

1.29
date	2006.12.19.14.26.09;	author atikhomirov;	state Exp;
branches;
next	1.28;
commitid	43e54587f67b4567;

1.28
date	2006.11.22.14.59.29;	author dstadnik;	state Exp;
branches;
next	1.27;
commitid	2e20456465d04567;

1.27
date	2006.11.21.11.43.34;	author dstadnik;	state Exp;
branches;
next	1.26;
commitid	109b4562e6644567;

1.26
date	2006.11.17.10.46.09;	author dstadnik;	state Exp;
branches;
next	1.25;
commitid	5576455d92f04567;

1.25
date	2006.11.03.12.28.31;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.10.16.17.42.17;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.03.08.32.24;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.29.19.06.48;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.27.17.03.34;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.29.17.17.18;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.26.14.16.24;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.20.13.24.47;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.10;

1.10
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.05.19.16.56;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.33
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class CreationWizardGenerator
{
  protected static String nl;
  public static synchronized CreationWizardGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CreationWizardGenerator result = new CreationWizardGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.PartInitException;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends Wizard implements INewWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbench workbench;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    protected IStructuredSelection selection;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_6 = " diagramModelFilePage;";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_8 = " domainModelFilePage;";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Resource diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean openNewlyCreatedDiagramEditor = true;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public IWorkbench getWorkbench() {" + NL + "        return workbench;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IStructuredSelection getSelection() {" + NL + "        return selection;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final Resource getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isOpenNewlyCreatedDiagramEditor() {" + NL + "\t\treturn openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {" + NL + "\t\tthis.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "        this.workbench = workbench;" + NL + "        this.selection = selection;" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_10 = " Diagram\");";
  protected final String TEXT_11 = NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_12 = ".getBundledImageDescriptor(\"icons/wizban/New";
  protected final String TEXT_13 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tdiagramModelFilePage = new ";
  protected final String TEXT_14 = "(\"DiagramModelFile\", getSelection(), \"";
  protected final String TEXT_15 = "\"); //$NON-NLS-1$ //$NON-NLS-2$" + NL + "\t\tdiagramModelFilePage.setTitle(\"Create ";
  protected final String TEXT_16 = " Diagram\");";
  protected final String TEXT_17 = NL + "\t\tdiagramModelFilePage.setDescription(\"Select file that will contain diagram model.\");";
  protected final String TEXT_18 = NL + "\t\tdiagramModelFilePage.setDescription(\"Select file that will contain diagram and domain models.\");";
  protected final String TEXT_19 = NL + "\t\taddPage(diagramModelFilePage);";
  protected final String TEXT_20 = NL + NL + "\t\tdomainModelFilePage = new ";
  protected final String TEXT_21 = "(\"DomainModelFile\", getSelection(), \"";
  protected final String TEXT_22 = "\"); //$NON-NLS-1$ //$NON-NLS-2$" + NL + "\t\tdomainModelFilePage.setTitle(\"Create ";
  protected final String TEXT_23 = " Diagram\");" + NL + "\t\tdomainModelFilePage.setDescription(\"Select file that will contain domain model.\");" + NL + "\t\taddPage(domainModelFilePage);";
  protected final String TEXT_24 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tIRunnableWithProgress op =";
  protected final String TEXT_25 = NL + "\t\t\t\tnew ";
  protected final String TEXT_26 = "(null) {" + NL + "" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {";
  protected final String TEXT_27 = NL + "\t\t\t\tnew IRunnableWithProgress() {" + NL + "" + NL + "\t\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {";
  protected final String TEXT_28 = NL + "\t\t\t\tdiagram = ";
  protected final String TEXT_29 = ".createDiagram(diagramModelFilePage.getURI(),";
  protected final String TEXT_30 = NL + "\t\t\t\t\t\tdomainModelFilePage.getURI(),";
  protected final String TEXT_31 = NL + "\t\t\t\t\t\tmonitor);" + NL + "\t\t\t\tif (isOpenNewlyCreatedDiagramEditor() && diagram != null) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_32 = ".openDiagram(diagram);" + NL + "\t\t\t\t\t} catch (PartInitException e) {" + NL + "\t\t\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Error opening diagram editor\", null, e.getStatus());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_33 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagram != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_34 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final boolean standaloneDomainModel = !genDiagram.getEditorGen().isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
    stringBuffer.append(TEXT_6);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    }
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_10);
    
final String iconNameStem;
// @@see Generator#generateWizardBanner
if (genDiagram.getDomainDiagramElement() != null) {
	iconNameStem = genDiagram.getDomainDiagramElement().getGenPackage().getPrefix();
} else {
	iconNameStem = ""; //$NON-NLS-1$
}
final String pluginClassName = importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());

    stringBuffer.append(TEXT_11);
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(iconNameStem);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genDiagram.getEditorGen().getDiagramFileExtension());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_16);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_17);
    } else {
    stringBuffer.append(TEXT_18);
    }
    stringBuffer.append(TEXT_19);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(genDiagram.getEditorGen().getDomainFileExtension());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_23);
    }
    stringBuffer.append(TEXT_24);
    if (genDiagram.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyOperation"));
    stringBuffer.append(TEXT_26);
    } else {
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    if (standaloneDomainModel) {
    stringBuffer.append(TEXT_30);
    }
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(pluginClassName);
    stringBuffer.append(TEXT_33);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_34);
    return stringBuffer.toString();
  }
}
@


1.32
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.31
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.30
log
@follow consisted spacing policy
@
text
@d18 34
a51 35
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.PartInitException;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends Wizard implements INewWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IWorkbench workbench;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    protected IStructuredSelection selection;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_7 = " diagramModelFilePage;";
  protected final String TEXT_8 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " domainModelFilePage;";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Resource diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean openNewlyCreatedDiagramEditor = true;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public IWorkbench getWorkbench() {" + NL + "        return workbench;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IStructuredSelection getSelection() {" + NL + "        return selection;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final Resource getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isOpenNewlyCreatedDiagramEditor() {" + NL + "\t\treturn openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {" + NL + "\t\tthis.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "        this.workbench = workbench;" + NL + "        this.selection = selection;" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_11 = " Diagram\");";
  protected final String TEXT_12 = NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_13 = ".getBundledImageDescriptor(\"icons/wizban/New";
  protected final String TEXT_14 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tdiagramModelFilePage = new ";
  protected final String TEXT_15 = "(\"DiagramModelFile\", getSelection(), \"";
  protected final String TEXT_16 = "\"); //$NON-NLS-1$ //$NON-NLS-2$" + NL + "\t\tdiagramModelFilePage.setTitle(\"Create ";
  protected final String TEXT_17 = " Diagram\");";
  protected final String TEXT_18 = NL + "\t\tdiagramModelFilePage.setDescription(\"Select file that will contain diagram model.\");";
  protected final String TEXT_19 = NL + "\t\tdiagramModelFilePage.setDescription(\"Select file that will contain diagram and domain models.\");";
  protected final String TEXT_20 = NL + "\t\taddPage(diagramModelFilePage);";
  protected final String TEXT_21 = NL + NL + "\t\tdomainModelFilePage = new ";
  protected final String TEXT_22 = "(\"DomainModelFile\", getSelection(), \"";
  protected final String TEXT_23 = "\"); //$NON-NLS-1$ //$NON-NLS-2$" + NL + "\t\tdomainModelFilePage.setTitle(\"Create ";
  protected final String TEXT_24 = " Diagram\");" + NL + "\t\tdomainModelFilePage.setDescription(\"Select file that will contain domain model.\");" + NL + "\t\taddPage(domainModelFilePage);";
  protected final String TEXT_25 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tIRunnableWithProgress op =";
  protected final String TEXT_26 = NL + "\t\t\t\tnew ";
  protected final String TEXT_27 = "(null) {" + NL + "" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {";
  protected final String TEXT_28 = NL + "\t\t\t\tnew IRunnableWithProgress() {" + NL + "" + NL + "\t\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {";
  protected final String TEXT_29 = NL + "\t\t\t\tdiagram = ";
  protected final String TEXT_30 = ".createDiagram(diagramModelFilePage.getURI(),";
  protected final String TEXT_31 = NL + "\t\t\t\t\t\tdomainModelFilePage.getURI(),";
  protected final String TEXT_32 = NL + "\t\t\t\t\t\tmonitor);" + NL + "\t\t\t\tif (isOpenNewlyCreatedDiagramEditor() && diagram != null) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_33 = ".openDiagram(diagram);" + NL + "\t\t\t\t\t} catch (PartInitException e) {" + NL + "\t\t\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Error opening diagram editor\", null, e.getStatus());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_34 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagram != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_35 = NL;
a60 1
    stringBuffer.append(TEXT_1);
d65 2
a67 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d70 2
d73 1
a73 1
    importManager.markImportLocation(stringBuffer);
d75 1
a75 1
    stringBuffer.append(importManager.getCompilationUnitName());
d77 2
a79 2
    stringBuffer.append(TEXT_7);
    if (standaloneDomainModel) {
d81 1
a81 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
d83 1
a83 1
    }
a84 2
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
    stringBuffer.append(TEXT_11);
d95 2
d98 1
a98 1
    stringBuffer.append(pluginClassName);
d100 1
a100 1
    stringBuffer.append(iconNameStem);
d102 1
a102 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
d104 1
a104 1
    stringBuffer.append(genDiagram.getEditorGen().getDiagramFileExtension());
d106 1
a106 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d108 1
a108 1
    if (standaloneDomainModel) {
d110 1
a110 1
    } else {
d112 1
a112 1
    }
d114 1
a114 1
    if (standaloneDomainModel) {
d116 1
a116 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getCreationWizardPageQualifiedClassName()));
d118 1
a118 1
    stringBuffer.append(genDiagram.getEditorGen().getDomainFileExtension());
d120 1
a120 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d122 1
a122 1
    }
d124 1
a124 1
    if (genDiagram.getEditorGen().getApplication() == null) {
d126 1
a126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.actions.WorkspaceModifyOperation"));
d128 1
a128 1
    } else {
d130 1
a130 1
    }
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d134 1
a134 1
    if (standaloneDomainModel) {
d136 1
a136 1
    }
d138 1
a138 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDiagramEditorUtilQualifiedClassName()));
d140 1
a140 1
    stringBuffer.append(pluginClassName);
a141 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_35);
@


1.29
log
@no reason to have subclasses just to pass plain string value
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d68 1
a68 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.28
log
@[165303] Use one more page in generated wizard to ask for model file when standalone domain model option is set
@
text
@d32 2
a33 2
  protected final String TEXT_15 = "(\"DiagramModelFile\", getSelection()) { //$NON-NLS-1$" + NL + "" + NL + "\t\t\tprotected String getExtension() {" + NL + "\t\t\t\treturn \"";
  protected final String TEXT_16 = "\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tdiagramModelFilePage.setTitle(\"Create ";
d39 2
a40 2
  protected final String TEXT_22 = "(\"DomainModelFile\", getSelection()) { //$NON-NLS-1$" + NL + "" + NL + "\t\t\tprotected String getExtension() {" + NL + "\t\t\t\treturn \"";
  protected final String TEXT_23 = "\"; //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\tdomainModelFilePage.setTitle(\"Create ";
@


1.27
log
@refactor: pass uris to diagram editor util
@
text
@d24 29
a52 18
  protected final String TEXT_7 = " page;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Resource diagram;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean openNewlyCreatedDiagramEditor = true;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public IWorkbench getWorkbench() {" + NL + "        return workbench;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IStructuredSelection getSelection() {" + NL + "        return selection;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final Resource getDiagram() {" + NL + "\t\treturn diagram;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isOpenNewlyCreatedDiagramEditor() {" + NL + "\t\treturn openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {" + NL + "\t\tthis.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "        this.workbench = workbench;" + NL + "        this.selection = selection;" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_8 = " Diagram\");";
  protected final String TEXT_9 = NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_10 = ".getBundledImageDescriptor(\"icons/wizban/New";
  protected final String TEXT_11 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tpage = new ";
  protected final String TEXT_12 = "(\"CreationWizardPage\", getSelection()); //$NON-NLS-1$" + NL + "\t\tpage.setTitle(\"Create ";
  protected final String TEXT_13 = " Diagram\");" + NL + "\t\tpage.setDescription(\"Create a new ";
  protected final String TEXT_14 = " diagram.\");" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tIRunnableWithProgress op =";
  protected final String TEXT_15 = NL + "\t\t\t\tnew ";
  protected final String TEXT_16 = "(null) {" + NL + "" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {";
  protected final String TEXT_17 = NL + "\t\t\t\tnew IRunnableWithProgress() {" + NL + "" + NL + "\t\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {";
  protected final String TEXT_18 = NL + "\t\t\t\tdiagram = ";
  protected final String TEXT_19 = ".createDiagram(page.getDiagramURI(),";
  protected final String TEXT_20 = NL + "\t\t\t\t\t\tpage.getModelURI(),";
  protected final String TEXT_21 = NL + "\t\t\t\t\t\tmonitor);" + NL + "\t\t\t\tif (isOpenNewlyCreatedDiagramEditor() && diagram != null) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_22 = ".openDiagram(diagram);" + NL + "\t\t\t\t\t} catch (PartInitException e) {" + NL + "\t\t\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Error opening diagram editor\", null, e.getStatus());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_23 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagram != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_24 = NL;
d60 1
d79 6
d86 1
a86 1
    stringBuffer.append(TEXT_8);
d97 1
a97 1
    stringBuffer.append(TEXT_9);
d99 1
a99 1
    stringBuffer.append(TEXT_10);
d101 1
a101 1
    stringBuffer.append(TEXT_11);
d103 3
a105 1
    stringBuffer.append(TEXT_12);
d107 13
a119 1
    stringBuffer.append(TEXT_13);
d121 3
a123 1
    stringBuffer.append(TEXT_14);
d125 1
a125 1
    stringBuffer.append(TEXT_15);
d127 1
a127 1
    stringBuffer.append(TEXT_16);
d129 1
a129 1
    stringBuffer.append(TEXT_17);
d131 1
a131 2
    final boolean standaloneDomainModel = !genDiagram.getEditorGen().isSameFileForDiagramAndModel() && genDiagram.getDomainDiagramElement() != null;
    stringBuffer.append(TEXT_18);
d133 1
a133 1
    stringBuffer.append(TEXT_19);
d135 1
a135 1
    stringBuffer.append(TEXT_20);
d137 1
a137 1
    stringBuffer.append(TEXT_21);
d139 1
a139 1
    stringBuffer.append(TEXT_22);
d141 1
a141 1
    stringBuffer.append(TEXT_23);
d143 1
a143 1
    stringBuffer.append(TEXT_24);
@


1.26
log
@catch PartInitException in RCP
@
text
@d36 6
a41 4
  protected final String TEXT_19 = ".createDiagram(page.getContainerFullPath(), page.getFileName(), monitor);" + NL + "\t\t\t\tif (isOpenNewlyCreatedDiagramEditor() && diagram != null) {" + NL + "\t\t\t\t\ttry {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_20 = ".openDiagram(diagram);" + NL + "\t\t\t\t\t} catch (PartInitException e) {" + NL + "\t\t\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Error opening diagram editor\", null, e.getStatus());" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_21 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagram != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
d97 1
d101 4
d106 1
a106 1
    stringBuffer.append(TEXT_20);
d108 1
a108 1
    stringBuffer.append(TEXT_21);
d110 1
a110 1
    stringBuffer.append(TEXT_22);
@


1.25
log
@remove deps from core.resources
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.ecore.resource.Resource;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;";
d36 2
a37 2
  protected final String TEXT_19 = ".createDiagram(page.getContainerFullPath(), page.getFileName(), monitor);" + NL + "\t\t\t\tif (isOpenNewlyCreatedDiagramEditor() && diagram != null) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_20 = ".openDiagram(diagram);" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
@


1.24
log
@remove unused parameters
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;";
d24 1
a24 1
  protected final String TEXT_7 = " page;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected URI diagramURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean openNewlyCreatedDiagramEditor = true;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public IWorkbench getWorkbench() {" + NL + "        return workbench;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IStructuredSelection getSelection() {" + NL + "        return selection;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final URI getDiagramURI() {" + NL + "\t\treturn diagramURI;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isOpenNewlyCreatedDiagramEditor() {" + NL + "\t\treturn openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {" + NL + "\t\tthis.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "        this.workbench = workbench;" + NL + "        this.selection = selection;" + NL + "\t\tsetWindowTitle(\"New ";
d35 5
a39 4
  protected final String TEXT_18 = NL + "\t\t\t\tdiagramURI = ";
  protected final String TEXT_19 = ".createAndOpenDiagram(" + NL + "\t\t\t\t\t\tpage.getContainerFullPath()," + NL + "\t\t\t\t\t\tpage.getFileName()," + NL + "\t\t\t\t\t\tgetWorkbench().getActiveWorkbenchWindow()," + NL + "\t\t\t\t\t\tmonitor," + NL + "\t\t\t\t\t\tisOpenNewlyCreatedDiagramEditor()," + NL + "\t\t\t\t\t\ttrue);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_20 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagramURI != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_21 = NL;
d98 2
d101 1
a101 1
    stringBuffer.append(TEXT_20);
d103 1
a103 1
    stringBuffer.append(TEXT_21);
@


1.23
log
@#114200 no workspace operation in rcp
@
text
@d36 3
a38 4
  protected final String TEXT_19 = ".createAndOpenDiagram(" + NL + "\t\t\t\t\t\tpage.getDiagramFileCreator()," + NL + "\t\t\t\t\t\tpage.getContainerFullPath()," + NL + "\t\t\t\t\t\tpage.getFileName()," + NL + "\t\t\t\t\t\tpage.getInitialContents()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_20 = ".MODEL_ID," + NL + "\t\t\t\t\t\tgetWorkbench().getActiveWorkbenchWindow()," + NL + "\t\t\t\t\t\tmonitor," + NL + "\t\t\t\t\t\tisOpenNewlyCreatedDiagramEditor()," + NL + "\t\t\t\t\t\ttrue);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_21 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagramURI != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
d97 1
a97 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d99 1
a99 1
    stringBuffer.append(pluginClassName);
a100 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_22);
@


1.22
log
@#114200 remove resource deps from wizard
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.emf.common.util.URI;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;" + NL;
d31 9
a39 7
  protected final String TEXT_14 = " diagram.\");" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {";
  protected final String TEXT_15 = NL + "\t\tIRunnableWithProgress op = new ";
  protected final String TEXT_16 = "(null) {" + NL + "" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {" + NL + "\t\t\t\tdiagramURI = ";
  protected final String TEXT_17 = ".createAndOpenDiagram(" + NL + "\t\t\t\t\t\tpage.getDiagramFileCreator()," + NL + "\t\t\t\t\t\tpage.getContainerFullPath()," + NL + "\t\t\t\t\t\tpage.getFileName()," + NL + "\t\t\t\t\t\tpage.getInitialContents()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_18 = ".MODEL_ID," + NL + "\t\t\t\t\t\tgetWorkbench().getActiveWorkbenchWindow()," + NL + "\t\t\t\t\t\tmonitor," + NL + "\t\t\t\t\t\tisOpenNewlyCreatedDiagramEditor()," + NL + "\t\t\t\t\t\ttrue);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_19 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagramURI != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_20 = NL;
d88 1
a88 6
    
GenApplication application = genDiagram.getEditorGen().getApplication();
String wmofqn = application == null ?
		"org.eclipse.ui.actions.WorkspaceModifyOperation" :
		application.getApplicationQualifiedClassName() + ".WorkspaceModifyOperation";

d90 1
a90 1
    stringBuffer.append(importManager.getImportedName(wmofqn));
d92 4
d97 1
a97 1
    stringBuffer.append(TEXT_17);
d99 1
a99 1
    stringBuffer.append(TEXT_18);
d101 1
a101 1
    stringBuffer.append(TEXT_19);
d103 1
a103 1
    stringBuffer.append(TEXT_20);
@


1.21
log
@#114200 remove ide dependency
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.operation.IRunnableWithProgress;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;" + NL;
d24 1
a24 1
  protected final String TEXT_7 = " page;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFile diagramFile;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean openNewlyCreatedDiagramEditor = true;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public IWorkbench getWorkbench() {" + NL + "        return workbench;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IStructuredSelection getSelection() {" + NL + "        return selection;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final IFile getDiagramFile() {" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isOpenNewlyCreatedDiagramEditor() {" + NL + "\t\treturn openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {" + NL + "\t\tthis.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "        this.workbench = workbench;" + NL + "        this.selection = selection;" + NL + "\t\tsetWindowTitle(\"New ";
d33 1
a33 1
  protected final String TEXT_16 = "(null) {" + NL + "" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {" + NL + "\t\t\t\tdiagramFile = ";
d36 1
a36 1
  protected final String TEXT_19 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException()); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagramFile != null;" + NL + "\t}" + NL + "}";
d59 1
a59 1
    stringBuffer.append(genDiagram.getCreationWizardClassName());
@


1.20
log
@#114200 do not use wizard from ide for RCP
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.jface.wizard.Wizard;" + NL + "import org.eclipse.ui.INewWizard;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.actions.WorkspaceModifyOperation;" + NL;
d31 7
a37 5
  protected final String TEXT_14 = " diagram.\");" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean performFinish() {" + NL + "\t\tWorkspaceModifyOperation op = new WorkspaceModifyOperation(null) {" + NL + "" + NL + "\t\t\tprotected void execute(IProgressMonitor monitor) throws CoreException, InterruptedException {" + NL + "\t\t\t\tdiagramFile = ";
  protected final String TEXT_15 = ".createAndOpenDiagram(" + NL + "\t\t\t\t\t\tpage.getDiagramFileCreator()," + NL + "\t\t\t\t\t\tpage.getContainerFullPath()," + NL + "\t\t\t\t\t\tpage.getFileName()," + NL + "\t\t\t\t\t\tpage.getInitialContents()," + NL + "\t\t\t\t\t\t";
  protected final String TEXT_16 = ".MODEL_ID," + NL + "\t\t\t\t\t\tgetWorkbench().getActiveWorkbenchWindow()," + NL + "\t\t\t\t\t\tmonitor," + NL + "\t\t\t\t\t\tisOpenNewlyCreatedDiagramEditor()," + NL + "\t\t\t\t\t\ttrue);" + NL + "\t\t\t}" + NL + "\t\t};" + NL + "\t\ttry {" + NL + "\t\t\tgetContainer().run(false, true, op);" + NL + "\t\t} catch (InterruptedException e) {" + NL + "\t\t\treturn false;" + NL + "\t\t} catch (InvocationTargetException e) {" + NL + "\t\t\tif (e.getTargetException() instanceof CoreException) {" + NL + "\t\t\t\tErrorDialog.openError(getContainer().getShell(), \"Creation Problems\", null, ((CoreException) e.getTargetException()).getStatus());" + NL + "\t\t\t} else {" + NL + "\t\t\t\t";
  protected final String TEXT_17 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException());" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagramFile != null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
d86 9
d96 1
a96 1
    stringBuffer.append(TEXT_15);
d98 1
a98 1
    stringBuffer.append(TEXT_16);
d100 1
a100 1
    stringBuffer.append(TEXT_17);
d102 1
a102 1
    stringBuffer.append(TEXT_18);
@


1.19
log
@#114200 remove gmf runtime ide dependencies
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.lang.reflect.InvocationTargetException;" + NL + "" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IProgressMonitor;" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "import org.eclipse.ui.actions.WorkspaceModifyOperation;" + NL + "import org.eclipse.ui.wizards.newresource.BasicNewResourceWizard;" + NL;
d23 2
a24 2
  protected final String TEXT_6 = " extends BasicNewResourceWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_7 = " page;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IFile diagramFile;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean openNewlyCreatedDiagramEditor = true;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isOpenNewlyCreatedDiagramEditor() {" + NL + "\t\treturn openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setOpenNewlyCreatedDiagramEditor(boolean openNewlyCreatedDiagramEditor) {" + NL + "\t\tthis.openNewlyCreatedDiagramEditor = openNewlyCreatedDiagramEditor;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper.init(workbench, selection);" + NL + "\t\tsetWindowTitle(\"New ";
d34 1
a34 1
  protected final String TEXT_17 = ".getInstance().logError(\"Error creating diagram\", e.getTargetException());" + NL + "\t\t\t}" + NL + "\t\t\treturn false;" + NL + "\t\t}" + NL + "\t\treturn diagramFile != null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final IFile getDiagramFile() {" + NL + "\t\treturn diagramFile;" + NL + "\t}" + NL + "}";
@


1.18
log
@header comment should not be a javadoc comment
@
text
@d21 15
a35 8
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorCreationWizard;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends EditorCreationWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tsuper.addPages();" + NL + "\t\tif (page == null) {" + NL + "\t\t\tpage = new ";
  protected final String TEXT_6 = "(getWorkbench(), getSelection());" + NL + "\t\t}" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper.init(workbench, selection);" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_7 = " Diagram\"); //$NON-NLS-1$";
  protected final String TEXT_8 = NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_9 = ".getBundledImageDescriptor(\"icons/wizban/New";
  protected final String TEXT_10 = "Wizard.gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;
d55 2
a57 2
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d59 2
d62 1
a62 1
    stringBuffer.append(TEXT_7);
d69 1
a69 1
	iconNameStem = "";
d73 1
a73 1
    stringBuffer.append(TEXT_8);
d75 1
a75 1
    stringBuffer.append(TEXT_9);
a76 1
    stringBuffer.append(TEXT_10);
d78 14
@


1.17
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.16
log
@#141865 Icon not displayed for the wizard banner
Wizard banner image and wizard/editor icon are generated now with EMF facility for coloured .gifs
Keyword added to iconPath values to allow reference icons from EMF editor
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d43 1
a43 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.15
log
@#114175 allow to create diagram editor without domain model
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d26 3
a28 4
  protected final String TEXT_9 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/full/wizban/New";
  protected final String TEXT_10 = ".gif\")); //$NON-NLS-1$";
  protected final String TEXT_11 = NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
a34 1
final GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
d54 10
a63 1
    if (genModel != null) {
d65 1
a65 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d67 1
a67 1
    stringBuffer.append(genModel.getModelName());
a68 1
    }
a69 1
    stringBuffer.append(TEXT_12);
@


1.14
log
@Using modelID in the UI instead of model name.
@
text
@d25 6
a30 4
  protected final String TEXT_7 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_8 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/full/wizban/New";
  protected final String TEXT_9 = ".gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "}";
  protected final String TEXT_10 = NL;
d57 2
d60 1
a60 1
    stringBuffer.append(TEXT_8);
a61 1
    stringBuffer.append(TEXT_9);
d63 3
@


1.13
log
@using M6 to generate code.
@
text
@d53 1
a53 1
    stringBuffer.append(genModel.getModelName());
@


1.12
log
@restore generators
@
text
@d32 1
a32 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@#134095 do not store compiled templates in cvs
@
text
@d32 1
a32 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.10
log
@Switching to eclipse M6.
@
text
@@


1.9
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d32 1
a32 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.8
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d19 10
a28 7
  protected final String TEXT_1 = NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorCreationWizard;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_2 = " extends EditorCreationWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tsuper.addPages();" + NL + "\t\tif (page == null) {" + NL + "\t\t\tpage = new ";
  protected final String TEXT_3 = "(getWorkbench(), getSelection());" + NL + "\t\t}" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper.init(workbench, selection);" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_4 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_5 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/full/wizban/New";
  protected final String TEXT_6 = ".gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
a37 1
importManager.emitPackageStatement(stringBuffer);
d39 4
a42 1
    stringBuffer.append(genDiagram.getCreationWizardClassName());
d44 1
a44 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d46 2
a47 1
    stringBuffer.append(genModel.getModelName());
d49 1
a49 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
d51 2
a53 1
    stringBuffer.append(TEXT_6);
d55 5
@


1.7
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d5 1
d19 7
a25 8
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorCreationWizard;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends EditorCreationWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tsuper.addPages();" + NL + "\t\tif (page == null) {" + NL + "\t\t\tpage = new ";
  protected final String TEXT_4 = "(getWorkbench(), getSelection());" + NL + "\t\t}" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper.init(workbench, selection);" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_5 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_6 = ".getBundledImageDescriptor(" + NL + "\t\t\t\"icons/full/wizban/New";
  protected final String TEXT_7 = ".gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d30 6
a35 2
    GenDiagram genDiagram = (GenDiagram) argument;
    GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
d37 1
a37 1
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
d39 1
a39 1
    stringBuffer.append(genDiagram.getCreationWizardClassName());
d41 1
a41 1
    stringBuffer.append(genDiagram.getCreationWizardPageClassName());
d43 2
a45 2
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName());
a46 1
    stringBuffer.append(genModel.getModelName());
a47 1
    stringBuffer.append(TEXT_8);
@


1.6
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d33 1
a33 1
    stringBuffer.append(genDiagram.getEditorPackageName());
@


1.5
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d31 1
a31 1
    GenModel genModel = genDiagram.getEMFGenModel();
d41 1
a41 1
    stringBuffer.append(genDiagram.getPlugin().getActivatorQualifiedClassName());
@


1.4
log
@#117731 icons defined has no effect in the generated code
@
text
@d41 1
a41 1
    stringBuffer.append(genDiagram.getPluginQualifiedClassName());
@


1.3
log
@#116031 avoid hardcoded class names in templates
@
text
@d23 1
a23 1
  protected final String TEXT_6 = ".getImageDescriptor(" + NL + "\t\t\t\"icons/full/wizban/New";
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d19 7
a25 5
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.wizards.EditorCreationWizard;" + NL + "import org.eclipse.jface.viewers.IStructuredSelection;" + NL + "import org.eclipse.ui.IWorkbench;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class CreationWizard extends EditorCreationWizard {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void addPages() {" + NL + "\t\tsuper.addPages();" + NL + "\t\tif (page == null) {" + NL + "\t\t\tpage = new CreationWizardPage(getWorkbench(), getSelection());" + NL + "\t\t}" + NL + "\t\taddPage(page);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void init(IWorkbench workbench, IStructuredSelection selection) {" + NL + "\t\tsuper.init(workbench, selection);" + NL + "\t\tsetWindowTitle(\"New ";
  protected final String TEXT_3 = " Diagram\"); //$NON-NLS-1$" + NL + "\t\tsetDefaultPageImageDescriptor(";
  protected final String TEXT_4 = ".getImageDescriptor(" + NL + "\t\t\t\"icons/full/wizban/New";
  protected final String TEXT_5 = ".gif\")); //$NON-NLS-1$" + NL + "\t\tsetNeedsProgressMonitor(true);" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;
d35 1
a35 1
    stringBuffer.append(genModel.getModelName());
d37 1
a37 1
    stringBuffer.append(genDiagram.getPluginQualifiedClassName());
d41 1
d43 3
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d29 1
a29 1
    GenModel genModel = genDiagram.getEmfGenModel();
@

