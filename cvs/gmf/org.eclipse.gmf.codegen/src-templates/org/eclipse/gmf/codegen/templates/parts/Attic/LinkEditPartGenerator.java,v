head	1.36;
access;
symbols
	v20081022-1925:1.36
	v20081015-1925:1.36
	v20081008-1925:1.36
	v20081001-1925:1.36
	v20080924-1925:1.36
	v20080917-1925:1.36
	v20080911-1728:1.36
	v20080910-1520:1.36
	v20080903-1520:1.36
	v20080827-1520:1.36
	v20080813-1520:1.36
	v20080806-1520:1.36
	v20070202-0200:1.31
	v20061120-1300:1.34
	M3_20:1.34
	v20061117-0800:1.34
	v20061027-1200:1.31
	v20061020-1000:1.31
	v20061013-1330:1.33
	v20060919-0800:1.31
	v20060907-1100:1.31
	M1_20:1.32
	v20060904-1500:1.32
	v20060824-1600:1.31
	v20060817-1500:1.31
	v20060728-0500:1.31
	v20060713-1700:1.31
	R1_0_maintenance:1.31.0.2
	R1_0:1.31
	v20060627-1200:1.31
	v20060626-1420:1.31
	v20060620-0400:1.31
	v20060616-1400:1.31
	v20060616-1200:1.31
	v20060609-1400:1.30
	v20060531-1730:1.29
	v20060530-1930:1.28
	v20060526-1200:1.27
	v20060519-1300:1.25
	v20060519-0800:1.25
	v20060512-1000:1.24
	I20060512-1000:1.24
	I20060505-1400:1.24
	I20060428-1300:1.24
	I20060424-0500:1.23
	I20060424-0300:1.23
	M6_10:1.21
	I20060407-1200:1.17
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.15
	I20060309-1300:1.15
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.13
	I20060216-1945:1.13
	I20060210-1715:1.13
	I20060209-1815:1.13
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.11
	I20060105-1630:1.9
	I20051230-1230:1.8
	I20051223-1100:1.8
	I20051217-0925:1.8
	I20051208-2000:1.8
	I20051201-1800:1.8
	I20051124-2000:1.8
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.36
date	2006.12.13.19.37.32;	author dstadnik;	state dead;
branches;
next	1.35;
commitid	753f458056514567;

1.35
date	2006.11.22.10.21.46;	author ashatalin;	state Exp;
branches;
next	1.34;
commitid	7860456424b04567;

1.34
date	2006.10.18.14.21.48;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.06.14.18.40.16;	author ahunter;	state Exp;
branches;
next	1.30;

1.30
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.05.31.19.53.02;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.24.11.47.59;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.23.14.55.52;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.04.25.11.46.05;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.18.12.08.43;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.17;

1.17
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.17.16.52.37;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.06.19.22.30;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.06.17.03.34;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.24.13.58.48;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.24.08.51.27;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.10.17.44.55;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.03.19.09.15;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.30.19.16.05;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.36
log
@use xpand template to generate link edit part
@
text
@package org.eclipse.gmf.codegen.templates.parts;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class LinkEditPartGenerator
{
  protected static String nl;
  public static synchronized LinkEditPartGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LinkEditPartGenerator result = new LinkEditPartGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends ";
  protected final String TEXT_8 = " {";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_11 = ";";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_13 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_14 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_15 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_18 = "()";
  protected final String TEXT_19 = NL + "\t\t{" + NL + "\t\t\tprotected ";
  protected final String TEXT_20 = " getSemanticCommand(";
  protected final String TEXT_21 = " editRequest) {" + NL + "\t\t\t\tif (editRequest instanceof ";
  protected final String TEXT_22 = " &&" + NL + "\t\t\t\t\t\tgetHost() instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_24 = "(" + NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_25 = "(" + NL + "\t\t\t\t\t\t\teditRequest.getEditingDomain(), ((";
  protected final String TEXT_26 = ") getHost()).getPrimaryView()));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getSemanticCommand(editRequest);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_27 = " getCommand(";
  protected final String TEXT_28 = " request) {" + NL + "\t\t\t\tif (REQ_RECONNECT_SOURCE.equals(request.getType()) || REQ_RECONNECT_TARGET.equals(request.getType())) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t\t);";
  protected final String TEXT_30 = NL;
  protected final String TEXT_31 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_32 = "\", new ";
  protected final String TEXT_33 = "()); //$NON-NLS-1$";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_35 = " createConnectionFigure() {";
  protected final String TEXT_36 = NL + "\t\treturn new ";
  protected final String TEXT_37 = "();";
  protected final String TEXT_38 = NL + "\t\treturn ";
  protected final String TEXT_39 = ";";
  protected final String TEXT_40 = NL + " \t\treturn new ";
  protected final String TEXT_41 = "();";
  protected final String TEXT_42 = NL + "\t}" + NL;
  protected final String TEXT_43 = NL;
  protected final String TEXT_44 = NL + "}";
  protected final String TEXT_45 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenLink genLink = (GenLink) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
GenDiagram genDiagram = genLink.getDiagram();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
if (genLink.getViewmap() instanceof InnerClassViewmap) {
importManager.registerInnerClass(((InnerClassViewmap) genLink.getViewmap()).getClassName());
}

    stringBuffer.append(TEXT_5);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart"));
    stringBuffer.append(TEXT_8);
    {	GenCommonBase genCommonBase = genLink;
    stringBuffer.append(TEXT_9);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(genCommonBase.getVisualID());
    stringBuffer.append(TEXT_11);
    }
    stringBuffer.append(TEXT_12);
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_13);
    if (genLink.getModelFacet() == null) {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy"));
    stringBuffer.append(TEXT_16);
    }
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_18);
    if (genLink.getModelFacet() == null) {
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand"));
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart"));
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_28);
    }
    stringBuffer.append(TEXT_29);
    {	GenCommonBase genCommonBase = genLink;
    stringBuffer.append(TEXT_30);
    
for (CustomBehaviour behaviour : genCommonBase.getBehaviour(CustomBehaviour.class)) {

    stringBuffer.append(TEXT_31);
    stringBuffer.append(behaviour.getKey());
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(behaviour.getEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    }
    }
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_35);
    
Viewmap viewmap = genLink.getViewmap();
if (viewmap instanceof FigureViewmap) {
	String figureQualifiedClassName = null;
	figureQualifiedClassName = ((FigureViewmap) viewmap).getFigureQualifiedClassName();
	if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
		figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx";
	}

    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_37);
    } // instanceof FigureViewmap
	else if (viewmap instanceof SnippetViewmap) {
    stringBuffer.append(TEXT_38);
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_39);
    } // instanceof SnippetViewmap 
	else if (viewmap instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_40);
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
    stringBuffer.append(TEXT_41);
    }
    stringBuffer.append(TEXT_42);
    if (genLink.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_43);
    stringBuffer.append(((InnerClassViewmap) genLink.getViewmap()).getClassBody());
    }
    stringBuffer.append(TEXT_44);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_45);
    return stringBuffer.toString();
  }
}
@


1.35
log
@[152717] - Do not generate *ReferenceConnectionEditPolicy
@
text
@@


1.34
log
@#161380 simplify feature model facets
@
text
@d32 1
a32 1
  protected final String TEXT_15 = ".CONNECTION_ROLE, new ";
d34 29
a62 32
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_18 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_21 = "()";
  protected final String TEXT_22 = NL + "\t\t{" + NL + "\t\t\tprotected ";
  protected final String TEXT_23 = " getSemanticCommand(";
  protected final String TEXT_24 = " editRequest) {" + NL + "\t\t\t\tif (editRequest instanceof ";
  protected final String TEXT_25 = " &&" + NL + "\t\t\t\t\t\tgetHost() instanceof ";
  protected final String TEXT_26 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_27 = "(" + NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_28 = "(" + NL + "\t\t\t\t\t\t\teditRequest.getEditingDomain(), ((";
  protected final String TEXT_29 = ") getHost()).getPrimaryView()));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getSemanticCommand(editRequest);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_30 = " getCommand(";
  protected final String TEXT_31 = " request) {" + NL + "\t\t\t\tif (REQ_RECONNECT_SOURCE.equals(request.getType()) || REQ_RECONNECT_TARGET.equals(request.getType())) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_32 = NL + "\t\t);";
  protected final String TEXT_33 = NL;
  protected final String TEXT_34 = NL + "\t\tinstallEditPolicy(\"";
  protected final String TEXT_35 = "\", new ";
  protected final String TEXT_36 = "()); //$NON-NLS-1$";
  protected final String TEXT_37 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_38 = " createConnectionFigure() {";
  protected final String TEXT_39 = NL + "\t\treturn new ";
  protected final String TEXT_40 = "();";
  protected final String TEXT_41 = NL + "\t\treturn ";
  protected final String TEXT_42 = ";";
  protected final String TEXT_43 = NL + " \t\treturn new ";
  protected final String TEXT_44 = "();";
  protected final String TEXT_45 = NL + "\t}" + NL;
  protected final String TEXT_46 = NL;
  protected final String TEXT_47 = NL + "}";
  protected final String TEXT_48 = NL;
d104 1
a104 1
    if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
d108 1
a108 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getReferenceConnectionEditPolicyQualifiedClassName()));
d110 1
a110 3
    
} 
if (genLink.getModelFacet() == null) {
d112 1
a112 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d114 1
a114 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy"));
d116 1
a116 1
    }
d118 1
a118 1
    stringBuffer.append(importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName()));
d120 1
a120 1
    if (genLink.getModelFacet() == null) {
d122 1
a122 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d124 1
a124 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest"));
d126 1
a126 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest"));
d130 1
a130 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.ICommandProxy"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand"));
d134 1
a134 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart"));
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
a137 6
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.Request"));
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
    {	GenCommonBase genCommonBase = genLink;
    stringBuffer.append(TEXT_33);
d141 1
a141 1
    stringBuffer.append(TEXT_34);
d143 1
a143 1
    stringBuffer.append(TEXT_35);
d145 1
a145 1
    stringBuffer.append(TEXT_36);
d148 1
a148 1
    stringBuffer.append(TEXT_37);
d150 1
a150 1
    stringBuffer.append(TEXT_38);
d160 1
a160 1
    stringBuffer.append(TEXT_39);
d162 1
a162 1
    stringBuffer.append(TEXT_40);
d165 1
a165 1
    stringBuffer.append(TEXT_41);
d167 1
a167 1
    stringBuffer.append(TEXT_42);
d170 1
a170 1
    stringBuffer.append(TEXT_43);
d172 1
a172 1
    stringBuffer.append(TEXT_44);
d174 1
a174 1
    stringBuffer.append(TEXT_45);
d176 1
a176 1
    stringBuffer.append(TEXT_46);
d179 1
a179 1
    stringBuffer.append(TEXT_47);
d181 1
a181 1
    stringBuffer.append(TEXT_48);
@


1.33
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d107 1
a107 1
    if (genLink.getModelFacet() instanceof FeatureModelFacet) {
@


1.32
log
@add custom behaviour
@
text
@d150 1
a150 2
for (java.util.Iterator it = genCommonBase.getCustomBehaviour().iterator(); it.hasNext();) {
	CustomBehaviour behaviour = (CustomBehaviour) it.next();
@


1.31
log
@[139856] gmf_head anthonyh 060614 EtoolsProxyCommand should be renamed to ICommandProxy
@
text
@d49 17
a65 12
  protected final String TEXT_32 = NL + "\t\t);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_33 = " createConnectionFigure() {";
  protected final String TEXT_34 = NL + "\t\treturn new ";
  protected final String TEXT_35 = "();";
  protected final String TEXT_36 = NL + "\t\treturn ";
  protected final String TEXT_37 = ";";
  protected final String TEXT_38 = NL + " \t\treturn new ";
  protected final String TEXT_39 = "();";
  protected final String TEXT_40 = NL + "\t}" + NL;
  protected final String TEXT_41 = NL;
  protected final String TEXT_42 = NL + "}";
  protected final String TEXT_43 = NL;
d98 1
a98 2
    {
GenCommonBase genCommonBase = genLink;
d147 14
d162 1
a162 1
    stringBuffer.append(TEXT_33);
d172 1
a172 1
    stringBuffer.append(TEXT_34);
d174 1
a174 1
    stringBuffer.append(TEXT_35);
d177 1
a177 1
    stringBuffer.append(TEXT_36);
d179 1
a179 1
    stringBuffer.append(TEXT_37);
d182 1
a182 1
    stringBuffer.append(TEXT_38);
d184 1
a184 1
    stringBuffer.append(TEXT_39);
d186 1
a186 1
    stringBuffer.append(TEXT_40);
d188 1
a188 1
    stringBuffer.append(TEXT_41);
d191 1
a191 1
    stringBuffer.append(TEXT_42);
d193 1
a193 1
    stringBuffer.append(TEXT_43);
@


1.30
log
@header comment should not be a javadoc comment
@
text
@d131 1
a131 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
@


1.29
log
@#144251 Example ecore diagram editor creates invalid ecore file

Should be possible to remove reference-only links.
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.28
log
@Correcting copyright processing
@
text
@d32 1
a32 1
  protected final String TEXT_15 = ".COMPONENT_ROLE, new ";
d34 27
a60 24
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_18 = "()";
  protected final String TEXT_19 = NL + "\t\t{" + NL + "\t\t\tprotected ";
  protected final String TEXT_20 = " getSemanticCommand(";
  protected final String TEXT_21 = " editRequest) {" + NL + "\t\t\t\tif (editRequest instanceof ";
  protected final String TEXT_22 = " &&" + NL + "\t\t\t\t\t\tgetHost() instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_24 = "(" + NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_25 = "(" + NL + "\t\t\t\t\t\t\teditRequest.getEditingDomain(), ((";
  protected final String TEXT_26 = ") getHost()).getPrimaryView()));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getSemanticCommand(editRequest);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_27 = " getCommand(";
  protected final String TEXT_28 = " request) {" + NL + "\t\t\t\tif (REQ_RECONNECT_SOURCE.equals(request.getType()) || REQ_RECONNECT_TARGET.equals(request.getType())) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t\t);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_30 = " createConnectionFigure() {";
  protected final String TEXT_31 = NL + "\t\treturn new ";
  protected final String TEXT_32 = "();";
  protected final String TEXT_33 = NL + "\t\treturn ";
  protected final String TEXT_34 = ";";
  protected final String TEXT_35 = NL + " \t\treturn new ";
  protected final String TEXT_36 = "();";
  protected final String TEXT_37 = NL + "\t}" + NL;
  protected final String TEXT_38 = NL;
  protected final String TEXT_39 = NL + "}";
  protected final String TEXT_40 = NL;
d103 1
a103 1
    if (genLink.getModelFacet() == null) {
d107 1
a107 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy"));
d109 3
a111 1
    }
d113 1
a113 1
    stringBuffer.append(importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName()));
d115 1
a115 1
    if (genLink.getModelFacet() == null) {
d117 1
a117 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.commands.Command"));
d119 1
a119 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.IEditCommandRequest"));
d121 1
a121 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.DestroyElementRequest"));
d123 1
a123 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editparts.GraphicalEditPart"));
d125 1
a125 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.commands.EtoolsProxyCommand"));
d127 1
a127 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.commands.DeleteCommand"));
d131 6
d138 1
a138 1
    stringBuffer.append(TEXT_27);
d140 1
a140 1
    stringBuffer.append(TEXT_28);
d142 1
a142 1
    stringBuffer.append(TEXT_29);
d144 1
a144 1
    stringBuffer.append(TEXT_30);
d154 1
a154 1
    stringBuffer.append(TEXT_31);
d156 1
a156 1
    stringBuffer.append(TEXT_32);
d159 1
a159 1
    stringBuffer.append(TEXT_33);
d161 1
a161 1
    stringBuffer.append(TEXT_34);
d164 1
a164 1
    stringBuffer.append(TEXT_35);
d166 1
a166 1
    stringBuffer.append(TEXT_36);
d168 1
a168 1
    stringBuffer.append(TEXT_37);
d170 1
a170 1
    stringBuffer.append(TEXT_38);
d173 1
a173 1
    stringBuffer.append(TEXT_39);
d175 1
a175 1
    stringBuffer.append(TEXT_40);
@


1.27
log
@#142211 Handle metamodel names that may have clashes with existing class names
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d73 1
a73 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.26
log
@do not use NonSemanticEditPolicy
@
text
@d22 1
a22 1
  protected final String TEXT_5 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 34
a57 33
  protected final String TEXT_7 = " extends ConnectionNodeEditPart {";
  protected final String TEXT_8 = NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_10 = ";";
  protected final String TEXT_11 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_12 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_14 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_17 = "()";
  protected final String TEXT_18 = NL + "\t\t{" + NL + "\t\t\tprotected ";
  protected final String TEXT_19 = " getSemanticCommand(";
  protected final String TEXT_20 = " editRequest) {" + NL + "\t\t\t\tif (editRequest instanceof ";
  protected final String TEXT_21 = " &&" + NL + "\t\t\t\t\t\tgetHost() instanceof ";
  protected final String TEXT_22 = ") {" + NL + "\t\t\t\t\treturn new ";
  protected final String TEXT_23 = "(" + NL + "\t\t\t\t\t\tnew ";
  protected final String TEXT_24 = "(" + NL + "\t\t\t\t\t\t\teditRequest.getEditingDomain(), ((";
  protected final String TEXT_25 = ") getHost()).getPrimaryView()));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getSemanticCommand(editRequest);" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_26 = " getCommand(";
  protected final String TEXT_27 = " request) {" + NL + "\t\t\t\tif (REQ_RECONNECT_SOURCE.equals(request.getType()) || REQ_RECONNECT_TARGET.equals(request.getType())) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn super.getCommand(request);" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_28 = NL + "\t\t);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_29 = " createConnectionFigure() {";
  protected final String TEXT_30 = NL + "\t\treturn new ";
  protected final String TEXT_31 = "();";
  protected final String TEXT_32 = NL + "\t\treturn ";
  protected final String TEXT_33 = ";";
  protected final String TEXT_34 = NL + " \t\treturn new ";
  protected final String TEXT_35 = "();";
  protected final String TEXT_36 = NL + "\t}" + NL;
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = NL + "}";
  protected final String TEXT_39 = NL;
d88 2
a91 1
    stringBuffer.append(TEXT_8);
d93 1
d95 1
a95 1
    stringBuffer.append(TEXT_10);
d97 1
a97 1
    stringBuffer.append(TEXT_11);
d99 1
a99 1
    stringBuffer.append(TEXT_12);
d101 1
a101 1
    stringBuffer.append(TEXT_13);
d103 1
a103 1
    stringBuffer.append(TEXT_14);
d105 1
a105 1
    stringBuffer.append(TEXT_15);
d107 1
a107 1
    stringBuffer.append(TEXT_16);
d109 1
a109 1
    stringBuffer.append(TEXT_17);
d111 1
a111 1
    stringBuffer.append(TEXT_18);
d113 1
a113 1
    stringBuffer.append(TEXT_19);
d115 1
a115 1
    stringBuffer.append(TEXT_20);
d117 1
a117 1
    stringBuffer.append(TEXT_21);
d119 1
a119 1
    stringBuffer.append(TEXT_22);
d121 1
a121 1
    stringBuffer.append(TEXT_23);
d123 1
a123 1
    stringBuffer.append(TEXT_24);
d125 1
a125 1
    stringBuffer.append(TEXT_25);
d127 1
a127 1
    stringBuffer.append(TEXT_26);
d129 1
a129 1
    stringBuffer.append(TEXT_27);
d131 1
a131 1
    stringBuffer.append(TEXT_28);
d133 1
a133 1
    stringBuffer.append(TEXT_29);
d143 1
a143 1
    stringBuffer.append(TEXT_30);
d145 1
a145 1
    stringBuffer.append(TEXT_31);
d148 1
a148 1
    stringBuffer.append(TEXT_32);
d150 1
a150 1
    stringBuffer.append(TEXT_33);
d153 1
a153 1
    stringBuffer.append(TEXT_34);
d155 1
a155 1
    stringBuffer.append(TEXT_35);
d157 1
a157 1
    stringBuffer.append(TEXT_36);
d159 1
a159 1
    stringBuffer.append(TEXT_37);
d162 1
a162 1
    stringBuffer.append(TEXT_38);
d164 1
a164 1
    stringBuffer.append(TEXT_39);
@


1.25
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d32 25
a56 16
  protected final String TEXT_15 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_20 = " createConnectionFigure() {";
  protected final String TEXT_21 = NL + "\t\treturn new ";
  protected final String TEXT_22 = "();";
  protected final String TEXT_23 = NL + "\t\treturn ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + " \t\treturn new ";
  protected final String TEXT_26 = "();";
  protected final String TEXT_27 = NL + "\t}" + NL;
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "}";
  protected final String TEXT_30 = NL;
d103 1
a103 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NonSemanticEditPolicy"));
d105 1
a105 1
    } else {
d107 1
a107 1
    stringBuffer.append(importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName()));
d109 18
d128 1
a128 1
    stringBuffer.append(TEXT_19);
d130 1
a130 1
    stringBuffer.append(TEXT_20);
d140 1
a140 1
    stringBuffer.append(TEXT_21);
d142 1
a142 1
    stringBuffer.append(TEXT_22);
d145 1
a145 1
    stringBuffer.append(TEXT_23);
d147 1
a147 1
    stringBuffer.append(TEXT_24);
d150 1
a150 1
    stringBuffer.append(TEXT_25);
d152 1
a152 1
    stringBuffer.append(TEXT_26);
d154 1
a154 1
    stringBuffer.append(TEXT_27);
d156 1
a156 1
    stringBuffer.append(TEXT_28);
d159 1
a159 1
    stringBuffer.append(TEXT_29);
d161 1
a161 1
    stringBuffer.append(TEXT_30);
@


1.24
log
@support "NodeFigure", "DefaultSizeNodeFigure" and "Connection" as gmfgraph figure names
@
text
@d21 27
a47 28
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends ConnectionNodeEditPart {";
  protected final String TEXT_9 = NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final int VISUAL_ID = ";
  protected final String TEXT_11 = ";";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_13 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_14 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_15 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_16 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_17 = "());";
  protected final String TEXT_18 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_21 = " createConnectionFigure() {";
  protected final String TEXT_22 = NL + "\t\treturn new ";
  protected final String TEXT_23 = "();";
  protected final String TEXT_24 = NL + "\t\treturn ";
  protected final String TEXT_25 = ";";
  protected final String TEXT_26 = NL + " \t\treturn new ";
  protected final String TEXT_27 = "();";
  protected final String TEXT_28 = NL + "\t}" + NL;
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "}";
  protected final String TEXT_31 = NL;
d53 2
a54 1
GenLink genLink = (GenLink) ((Object[]) argument)[0];
d66 1
d68 1
a68 3
    stringBuffer.append(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_5);
    ImportUtil importManager = new ImportUtil(genDiagram.getEditPartsPackageName());
d73 2
d76 1
a76 1
    importManager.markImportLocation(stringBuffer);
a77 2
    stringBuffer.append(genLink.getEditPartClassName());
    stringBuffer.append(TEXT_8);
d80 1
d82 1
d84 1
a84 1
    stringBuffer.append(genCommonBase.getVisualID());
d86 1
a86 1
    }
d88 1
a88 1
    stringBuffer.append(genLink.getEditPartClassName());
d90 1
a90 1
    if (genLink.getModelFacet() == null) {
d92 1
a92 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d94 1
a94 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy"));
d96 1
a96 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NonSemanticEditPolicy"));
d98 1
a98 1
    } else {
d100 1
a100 1
    stringBuffer.append(importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName()));
d102 1
a102 1
    }
a103 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Connection"));
    stringBuffer.append(TEXT_21);
d113 2
a115 2
    stringBuffer.append(importManager.getImportedName(figureQualifiedClassName));
    stringBuffer.append(TEXT_23);
d118 2
a120 2
    stringBuffer.append(((SnippetViewmap) viewmap).getBody());
    stringBuffer.append(TEXT_25);
d123 2
d126 1
a126 1
    stringBuffer.append(((InnerClassViewmap) viewmap).getClassName());
d128 1
a128 1
    }
a129 2
    if (genLink.getViewmap() instanceof InnerClassViewmap) {
    stringBuffer.append(TEXT_29);
d132 2
a134 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_31);
@


1.23
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d23 1
a23 1
  protected final String TEXT_6 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d37 12
a48 11
  protected final String TEXT_20 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_21 = NL + "\t\treturn new ";
  protected final String TEXT_22 = "();";
  protected final String TEXT_23 = NL + "\t\treturn ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + " \t\treturn new ";
  protected final String TEXT_26 = "();";
  protected final String TEXT_27 = NL + "\t}" + NL;
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL + "}";
  protected final String TEXT_30 = NL;
a69 2
    stringBuffer.append(TEXT_6);
    
d73 3
a75 1
importManager.markImportLocation(stringBuffer);
d103 2
d114 1
a114 1
    stringBuffer.append(TEXT_21);
d116 1
a116 1
    stringBuffer.append(TEXT_22);
d119 1
a119 1
    stringBuffer.append(TEXT_23);
d121 1
a121 1
    stringBuffer.append(TEXT_24);
d124 1
a124 1
    stringBuffer.append(TEXT_25);
d126 1
a126 1
    stringBuffer.append(TEXT_26);
d128 1
a128 1
    stringBuffer.append(TEXT_27);
d130 1
a130 1
    stringBuffer.append(TEXT_28);
d133 1
a133 1
    stringBuffer.append(TEXT_29);
d135 1
a135 1
    stringBuffer.append(TEXT_30);
@


1.22
log
@provide only 'delete from model' action for the ref-based links
@
text
@d27 2
a28 2
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String VISUAL_ID = \"";
  protected final String TEXT_11 = "\";";
@


1.21
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d32 16
a47 19
  protected final String TEXT_15 = ".CONNECTION_ROLE, new ";
  protected final String TEXT_16 = "());";
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_18 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_19 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_20 = "());";
  protected final String TEXT_21 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_22 = "());";
  protected final String TEXT_23 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_24 = NL + "\t\treturn new ";
  protected final String TEXT_25 = "();";
  protected final String TEXT_26 = NL + "\t\treturn ";
  protected final String TEXT_27 = ";";
  protected final String TEXT_28 = NL + " \t\treturn new ";
  protected final String TEXT_29 = "();";
  protected final String TEXT_30 = NL + "\t}" + NL;
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = NL + "}";
  protected final String TEXT_33 = NL;
d88 1
a88 1
    if (genLink.getModelFacet() instanceof FeatureModelFacet) {
d92 1
a92 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getReferenceConnectionEditPolicyQualifiedClassName()));
d94 1
a94 4
    
}
if (genLink.getModelFacet() == null) {

d96 1
a96 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPolicy"));
d98 1
a98 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.editpolicies.ViewComponentEditPolicy"));
d100 1
a100 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.internal.editpolicies.NonSemanticEditPolicy"));
a101 6
    } else {
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(genLink.getItemSemanticEditPolicyQualifiedClassName()));
    stringBuffer.append(TEXT_22);
    }
    stringBuffer.append(TEXT_23);
d111 1
a111 1
    stringBuffer.append(TEXT_24);
d113 1
a113 1
    stringBuffer.append(TEXT_25);
d116 1
a116 1
    stringBuffer.append(TEXT_26);
d118 1
a118 1
    stringBuffer.append(TEXT_27);
d121 1
a121 1
    stringBuffer.append(TEXT_28);
d123 1
a123 1
    stringBuffer.append(TEXT_29);
d125 1
a125 1
    stringBuffer.append(TEXT_30);
d127 1
a127 1
    stringBuffer.append(TEXT_31);
d130 1
a130 1
    stringBuffer.append(TEXT_32);
d132 1
a132 1
    stringBuffer.append(TEXT_33);
@


1.20
log
@using M6 to generate code.
@
text
@d25 8
a32 8
  protected final String TEXT_8 = " extends ConnectionNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_10 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_11 = ".CONNECTION_ROLE, new ";
  protected final String TEXT_12 = "());";
  protected final String TEXT_13 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_14 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_15 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
d34 8
a41 8
  protected final String TEXT_17 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_18 = "());";
  protected final String TEXT_19 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_20 = NL + "\t\treturn new ";
  protected final String TEXT_21 = "();";
  protected final String TEXT_22 = NL + "\t\treturn ";
  protected final String TEXT_23 = ";";
  protected final String TEXT_24 = NL + " \t\treturn new ";
d43 8
a50 4
  protected final String TEXT_26 = NL + "\t}" + NL;
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "}";
  protected final String TEXT_29 = NL;
d81 8
d90 1
a90 1
    stringBuffer.append(TEXT_9);
d92 1
a92 1
    stringBuffer.append(TEXT_10);
d94 1
a94 1
    stringBuffer.append(TEXT_11);
d96 1
a96 1
    stringBuffer.append(TEXT_12);
d101 1
a101 1
    stringBuffer.append(TEXT_13);
d103 1
a103 1
    stringBuffer.append(TEXT_14);
d105 1
a105 1
    stringBuffer.append(TEXT_15);
d107 1
a107 1
    stringBuffer.append(TEXT_16);
d109 1
a109 1
    stringBuffer.append(TEXT_17);
d111 1
a111 1
    stringBuffer.append(TEXT_18);
d113 1
a113 1
    stringBuffer.append(TEXT_19);
d123 1
a123 1
    stringBuffer.append(TEXT_20);
d125 1
a125 1
    stringBuffer.append(TEXT_21);
d128 1
a128 1
    stringBuffer.append(TEXT_22);
d130 1
a130 1
    stringBuffer.append(TEXT_23);
d133 1
a133 1
    stringBuffer.append(TEXT_24);
d135 1
a135 1
    stringBuffer.append(TEXT_25);
d137 1
a137 1
    stringBuffer.append(TEXT_26);
d139 1
a139 1
    stringBuffer.append(TEXT_27);
d142 1
a142 1
    stringBuffer.append(TEXT_28);
d144 1
a144 1
    stringBuffer.append(TEXT_29);
@


1.19
log
@restore generators
@
text
@d50 1
a50 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.18
log
@#134095 do not store compiled templates in cvs
@
text
@d50 1
a50 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.17
log
@Switching to eclipse M6.
@
text
@@


1.16
log
@Class names of Figures generated as inner classes may clash with well-known classes, thus we have to make sure we avoid that
@
text
@d50 1
a50 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d69 5
a73 1
    importManager.markImportLocation(stringBuffer);
@


1.14
log
@#114175 for links
@
text
@d18 9
a26 9
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ConnectionNodeEditPart {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createDefaultEditPolicies() {" + NL + "\t\tsuper.createDefaultEditPolicies();";
  protected final String TEXT_7 = NL + "\t\tinstallEditPolicy(";
  protected final String TEXT_8 = ".CONNECTION_ROLE, new ";
  protected final String TEXT_9 = "());";
d28 19
a46 16
  protected final String TEXT_11 = ".COMPONENT_ROLE, new ";
  protected final String TEXT_12 = "());" + NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_13 = "());";
  protected final String TEXT_14 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_15 = "());";
  protected final String TEXT_16 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_17 = NL + "\t\treturn new ";
  protected final String TEXT_18 = "();";
  protected final String TEXT_19 = NL + "\t\treturn ";
  protected final String TEXT_20 = ";";
  protected final String TEXT_21 = NL + " \t\treturn new ";
  protected final String TEXT_22 = "();";
  protected final String TEXT_23 = NL + "\t}" + NL;
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "}";
  protected final String TEXT_26 = NL;
d56 9
d66 1
a66 1
    stringBuffer.append(TEXT_2);
d68 1
a68 1
    stringBuffer.append(TEXT_3);
d70 1
a70 1
    stringBuffer.append(TEXT_4);
d72 1
a72 1
    stringBuffer.append(TEXT_5);
d74 1
a74 1
    stringBuffer.append(TEXT_6);
d76 1
a76 1
    stringBuffer.append(TEXT_7);
d78 1
a78 1
    stringBuffer.append(TEXT_8);
d80 1
a80 1
    stringBuffer.append(TEXT_9);
d85 1
a85 1
    stringBuffer.append(TEXT_10);
d87 1
a87 1
    stringBuffer.append(TEXT_11);
d89 1
a89 1
    stringBuffer.append(TEXT_12);
d91 1
a91 1
    stringBuffer.append(TEXT_13);
d93 1
a93 1
    stringBuffer.append(TEXT_14);
d95 1
a95 1
    stringBuffer.append(TEXT_15);
d97 1
a97 1
    stringBuffer.append(TEXT_16);
d107 1
a107 1
    stringBuffer.append(TEXT_17);
d109 1
a109 1
    stringBuffer.append(TEXT_18);
d112 1
a112 1
    stringBuffer.append(TEXT_19);
d114 1
a114 1
    stringBuffer.append(TEXT_20);
d117 1
a117 1
    stringBuffer.append(TEXT_21);
d119 1
a119 1
    stringBuffer.append(TEXT_22);
d121 1
a121 1
    stringBuffer.append(TEXT_23);
d123 1
a123 1
    stringBuffer.append(TEXT_24);
d126 1
a126 1
    stringBuffer.append(TEXT_25);
d128 1
a128 1
    stringBuffer.append(TEXT_26);
@


1.13
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d27 17
a43 12
  protected final String TEXT_10 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_11 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_12 = NL + "\t\treturn new ";
  protected final String TEXT_13 = "();";
  protected final String TEXT_14 = NL + "\t\treturn ";
  protected final String TEXT_15 = ";";
  protected final String TEXT_16 = NL + " \t\treturn new ";
  protected final String TEXT_17 = "();";
  protected final String TEXT_18 = NL + "\t}" + NL;
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + "}";
  protected final String TEXT_21 = NL;
d69 4
a72 1
    }
d74 8
d83 3
a85 1
    stringBuffer.append(TEXT_11);
d95 1
a95 1
    stringBuffer.append(TEXT_12);
d97 1
a97 1
    stringBuffer.append(TEXT_13);
d100 1
a100 1
    stringBuffer.append(TEXT_14);
d102 1
a102 1
    stringBuffer.append(TEXT_15);
d105 1
a105 1
    stringBuffer.append(TEXT_16);
d107 1
a107 1
    stringBuffer.append(TEXT_17);
d109 1
a109 1
    stringBuffer.append(TEXT_18);
d111 1
a111 1
    stringBuffer.append(TEXT_19);
d114 1
a114 1
    stringBuffer.append(TEXT_20);
d116 1
a116 1
    stringBuffer.append(TEXT_21);
@


1.12
log
@ImportManager moved to oeg.common
@
text
@d44 1
a44 1
GenLink genLink = (GenLink) argument;
@


1.11
log
@New plugin with IFigure codegeneration to support #114177 (graphical definition model) was added
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.10
log
@one more flavor of snippet viewmap - inner class
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.PolylineConnection;" + NL + "import org.eclipse.draw2d.RotatableDecoration;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
@


1.9
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d33 6
a38 2
  protected final String TEXT_16 = NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;
d85 10
d96 1
a96 1
    stringBuffer.append(TEXT_16);
d98 1
a98 1
    stringBuffer.append(TEXT_17);
@


1.8
log
@#117881 Connection decorations should have the same line with as the host connection
@
text
@a2 1
import java.util.*;
d28 1
a28 1
  protected final String TEXT_11 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PolylineConnection createConnectionShape() {";
d30 5
a34 32
  protected final String TEXT_13 = "();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void decorateConnectionShape(PolylineConnection shape) {";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\tshape.setLineStyle(";
  protected final String TEXT_16 = ".";
  protected final String TEXT_17 = ");";
  protected final String TEXT_18 = NL + "\tshape.setLineWidth(";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\tRotatableDecoration sourceDecoration = createSourceDecoration();" + NL + "\t\tif (sourceDecoration != null) {" + NL + "\t\t\tshape.setSourceDecoration(sourceDecoration);" + NL + "\t\t\tif (sourceDecoration instanceof ";
  protected final String TEXT_21 = ") {" + NL + "\t\t\t\t((";
  protected final String TEXT_22 = ") sourceDecoration).setLineWidth(shape.getLineWidth());" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tRotatableDecoration targetDecoration = createTargetDecoration();" + NL + "\t\tif (targetDecoration != null) {" + NL + "\t\t\tshape.setTargetDecoration(targetDecoration);" + NL + "\t\t\tif (targetDecoration instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\t\t((";
  protected final String TEXT_24 = ") targetDecoration).setLineWidth(shape.getLineWidth());" + NL + "\t\t\t}" + NL + "\t\t}";
  protected final String TEXT_25 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {" + NL + "\t\tPolylineConnection shape = createConnectionShape();" + NL + "\t\tdecorateConnectionShape(shape);" + NL + "\t\treturn shape;" + NL + "\t}" + NL;
  protected final String TEXT_26 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createSourceDecoration() {";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "\t";
  protected final String TEXT_29 = " decoration = new ";
  protected final String TEXT_30 = "();" + NL + "\tdecoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));" + NL + "\treturn decoration;";
  protected final String TEXT_31 = NL + "\treturn new ";
  protected final String TEXT_32 = "();";
  protected final String TEXT_33 = NL + "\treturn null;";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + "\t";
  protected final String TEXT_37 = " decoration = new ";
  protected final String TEXT_38 = "();" + NL + "\tdecoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));" + NL + "\treturn decoration;";
  protected final String TEXT_39 = NL + "\treturn new ";
  protected final String TEXT_40 = "();";
  protected final String TEXT_41 = NL + "\treturn null;";
  protected final String TEXT_42 = NL + "\t}";
  protected final String TEXT_43 = NL + "}";
  protected final String TEXT_44 = NL;
a65 1
String figureQualifiedClassName = null;
d67 1
d69 3
a71 4
}
if (figureQualifiedClassName == null || figureQualifiedClassName.trim().length() == 0) {
	figureQualifiedClassName = "org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx";
}
d76 2
d79 1
a79 15
    
// Code fragment that sets shape line width and style.
//
// Parameters:
//
// importManager - ImportUtil ref in code
// viewmap - Viewmap ref in code
// shape - draw2d Shape ref in text
//
{ // private namespace
	ShapeAttributes shapeAttrs = viewmap == null ? null : (ShapeAttributes) viewmap.find(ShapeAttributes.class);
	if (shapeAttrs != null) {
		String lineStyle = shapeAttrs.getLineStyle();
		if (lineStyle != null && lineStyle.trim().length() > 0) {

d81 1
a81 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Graphics"));
d83 1
a83 1
    stringBuffer.append(lineStyle);
a84 110
    
		}
		if (shapeAttrs.isSetLineWidth()) {

    stringBuffer.append(TEXT_18);
    stringBuffer.append(shapeAttrs.getLineWidth());
    stringBuffer.append(TEXT_19);
    
		}
	}
} // private namespace

    if (viewmap instanceof DecoratedConnectionViewmap) {
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Shape"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Shape"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Shape"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Shape"));
    stringBuffer.append(TEXT_24);
    }
    stringBuffer.append(TEXT_25);
    if (viewmap instanceof DecoratedConnectionViewmap) {
    stringBuffer.append(TEXT_26);
    	LinkDecoration linkDecoration = ((DecoratedConnectionViewmap) viewmap).getSource();
    stringBuffer.append(TEXT_27);
    
// Body of a method that returns link decoration figure.
//
// Parameters:
//
// importManager - ImportUtil ref in code
// linkDecoration - LinkDecoration ref in code
//
{ // private namespace
	if (linkDecoration != null && linkDecoration.getFigureQualifiedClassName() != null && linkDecoration.getFigureQualifiedClassName().trim().length() > 0) {
		String decorationClassName = importManager.getImportedName(linkDecoration.getFigureQualifiedClassName());
		Set SCALABLE_DECORATIONS = new HashSet();
		SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolylineDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolygonDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.RhombDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.FilledRhombDecoration");
		if (SCALABLE_DECORATIONS.contains(linkDecoration.getFigureQualifiedClassName())) {
			// XXX use smth like ScaleableAtttributes?

    stringBuffer.append(TEXT_28);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_30);
    		} else {
    stringBuffer.append(TEXT_31);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_32);
    
		}
	} else {

    stringBuffer.append(TEXT_33);
    
	}
} // private namespace

    stringBuffer.append(TEXT_34);
    	linkDecoration = ((DecoratedConnectionViewmap) viewmap).getTarget();
    stringBuffer.append(TEXT_35);
    
// Body of a method that returns link decoration figure.
//
// Parameters:
//
// importManager - ImportUtil ref in code
// linkDecoration - LinkDecoration ref in code
//
{ // private namespace
	if (linkDecoration != null && linkDecoration.getFigureQualifiedClassName() != null && linkDecoration.getFigureQualifiedClassName().trim().length() > 0) {
		String decorationClassName = importManager.getImportedName(linkDecoration.getFigureQualifiedClassName());
		Set SCALABLE_DECORATIONS = new HashSet();
		SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolylineDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolygonDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.RhombDecoration");
		SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.FilledRhombDecoration");
		if (SCALABLE_DECORATIONS.contains(linkDecoration.getFigureQualifiedClassName())) {
			// XXX use smth like ScaleableAtttributes?

    stringBuffer.append(TEXT_36);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_38);
    		} else {
    stringBuffer.append(TEXT_39);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_40);
    
		}
	} else {

    stringBuffer.append(TEXT_41);
    
	}
} // private namespace

    stringBuffer.append(TEXT_42);
    }
    stringBuffer.append(TEXT_43);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_44);
@


1.7
log
@#112318 Do not overwrite paintFigure() method in node edit part when specific figure class is specified
@
text
@d38 25
a62 21
  protected final String TEXT_20 = NL + "\t\tRotatableDecoration sourceDecoration = createSourceDecoration();" + NL + "\t\tif (sourceDecoration != null) {" + NL + "\t\t\tshape.setSourceDecoration(sourceDecoration);" + NL + "\t\t}" + NL + "\t\tRotatableDecoration targetDecoration = createTargetDecoration();" + NL + "\t\tif (targetDecoration != null) {" + NL + "\t\t\tshape.setTargetDecoration(targetDecoration);" + NL + "\t\t}";
  protected final String TEXT_21 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * Creates figure for this edit part." + NL + "\t * " + NL + "\t * Body of this method does not depend on settings in generation model" + NL + "\t * so you may safely remove <i>generated</i> tag and modify it." + NL + "\t * " + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {" + NL + "\t\tPolylineConnection shape = createConnectionShape();" + NL + "\t\tdecorateConnectionShape(shape);" + NL + "\t\treturn shape;" + NL + "\t}" + NL;
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createSourceDecoration() {";
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = NL + "\t";
  protected final String TEXT_25 = " decoration = new ";
  protected final String TEXT_26 = "();" + NL + "\tdecoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));" + NL + "\treturn decoration;";
  protected final String TEXT_27 = NL + "\treturn new ";
  protected final String TEXT_28 = "();";
  protected final String TEXT_29 = NL + "\treturn null;";
  protected final String TEXT_30 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_31 = NL;
  protected final String TEXT_32 = NL + "\t";
  protected final String TEXT_33 = " decoration = new ";
  protected final String TEXT_34 = "();" + NL + "\tdecoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));" + NL + "\treturn decoration;";
  protected final String TEXT_35 = NL + "\treturn new ";
  protected final String TEXT_36 = "();";
  protected final String TEXT_37 = NL + "\treturn null;";
  protected final String TEXT_38 = NL + "\t}";
  protected final String TEXT_39 = NL + "}";
  protected final String TEXT_40 = NL;
d140 8
d149 1
a149 1
    stringBuffer.append(TEXT_21);
d151 1
a151 1
    stringBuffer.append(TEXT_22);
d153 1
a153 1
    stringBuffer.append(TEXT_23);
d173 1
a173 1
    stringBuffer.append(TEXT_24);
d175 1
a175 1
    stringBuffer.append(TEXT_25);
d177 1
a177 1
    stringBuffer.append(TEXT_26);
d179 1
a179 1
    stringBuffer.append(TEXT_27);
d181 1
a181 1
    stringBuffer.append(TEXT_28);
d186 1
a186 1
    stringBuffer.append(TEXT_29);
d191 1
a191 1
    stringBuffer.append(TEXT_30);
d193 1
a193 1
    stringBuffer.append(TEXT_31);
d213 1
a213 1
    stringBuffer.append(TEXT_32);
d215 1
a215 1
    stringBuffer.append(TEXT_33);
d217 1
a217 1
    stringBuffer.append(TEXT_34);
d219 1
a219 1
    stringBuffer.append(TEXT_35);
d221 1
a221 1
    stringBuffer.append(TEXT_36);
d226 1
a226 1
    stringBuffer.append(TEXT_37);
d231 1
a231 1
    stringBuffer.append(TEXT_38);
d233 1
a233 1
    stringBuffer.append(TEXT_39);
d235 1
a235 1
    stringBuffer.append(TEXT_40);
@


1.6
log
@Using MapMode from editpart
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.RotatableDecoration;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d29 30
a58 35
  protected final String TEXT_11 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_12 = NL + "\t\treturn null;";
  protected final String TEXT_13 = NL + "\t\t";
  protected final String TEXT_14 = " connection = new ";
  protected final String TEXT_15 = "();";
  protected final String TEXT_16 = NL + "\t\tRotatableDecoration sourceDecoration = createSourceDecoration();" + NL + "\t\tif (sourceDecoration != null) {" + NL + "\t\t\tconnection.setSourceDecoration(sourceDecoration);" + NL + "\t\t}" + NL + "\t\tRotatableDecoration targetDecoration = createTargetDecoration();" + NL + "\t\tif (targetDecoration != null) {" + NL + "\t\t\tconnection.setTargetDecoration(targetDecoration);" + NL + "\t\t}";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t\t";
  protected final String TEXT_19 = ".setLineStyle(Graphics.";
  protected final String TEXT_20 = ");";
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_23 = NL + "\t\treturn connection;" + NL + "\t}" + NL;
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createSourceDecoration() {";
  protected final String TEXT_26 = NL;
  protected final String TEXT_27 = NL + "\t\treturn null;";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = " decoration = new ";
  protected final String TEXT_30 = "();" + NL + "\t\tdecoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_31 = NL + "\t\treturn new ";
  protected final String TEXT_32 = "();";
  protected final String TEXT_33 = NL + "\t\treturn null;";
  protected final String TEXT_34 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_35 = NL;
  protected final String TEXT_36 = NL + "\t\treturn null;";
  protected final String TEXT_37 = NL + "\t\t";
  protected final String TEXT_38 = " decoration = new ";
  protected final String TEXT_39 = "();" + NL + "\t\tdecoration.setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_40 = NL + "\t\treturn new ";
  protected final String TEXT_41 = "();";
  protected final String TEXT_42 = NL + "\t\treturn null;";
  protected final String TEXT_43 = NL + "\t}";
  protected final String TEXT_44 = NL + "}";
  protected final String TEXT_45 = NL;
d89 8
a96 1
if (false == genLink.getViewmap() instanceof FigureViewmap) {
d99 1
a99 4
    
}
String connClassName = importManager.getImportedName(((FigureViewmap) genLink.getViewmap()).getFigureQualifiedClassName());

a100 1
    stringBuffer.append(connClassName);
a101 2
    stringBuffer.append(connClassName);
    stringBuffer.append(TEXT_15);
d103 13
a115 1
if (genLink.getViewmap() instanceof DecoratedConnectionViewmap) {
d117 2
d120 1
a120 8
    
}
for (Iterator it = genLink.getViewmap().getAttributes().iterator(); it.hasNext(); ) {
	Attributes next = (Attributes) it.next();
	if (next instanceof ShapeAttributes) {
		String figureVarName = "connection";
		ShapeAttributes attrs = (ShapeAttributes) next;

d123 2
a124 2
String lineStyle = attrs.getLineStyle();
if (lineStyle != null && lineStyle.trim().length() > 0) {
d127 1
a127 1
    stringBuffer.append(figureVarName);
a128 2
    stringBuffer.append(lineStyle);
    stringBuffer.append(TEXT_20);
d130 3
a132 2
}
if (attrs.isSetLineWidth()) {
d134 3
d138 1
a138 1
    stringBuffer.append(figureVarName);
d140 2
a141 1
    }
d143 17
a159 3
	}
	// put additional Attributes support here 
} // for
a160 2
    stringBuffer.append(TEXT_23);
    if (genLink.getViewmap() instanceof DecoratedConnectionViewmap) {
d162 1
a162 11
    
DecoratedConnectionViewmap viewmap = (DecoratedConnectionViewmap) genLink.getViewmap();

Set SCALABLE_DECORATIONS = new HashSet();
{
	SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolylineDecoration");
	SCALABLE_DECORATIONS.add("org.eclipse.draw2d.PolygonDecoration");
	SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.RhombDecoration");
	SCALABLE_DECORATIONS.add("org.eclipse.gmf.draw2d.FilledRhombDecoration");
}

d164 1
a164 3
    
LinkDecoration linkDecoration = viewmap.getSource();

d166 4
d171 2
a172 1
if (linkDecoration == null) {
d174 1
a174 1
    stringBuffer.append(TEXT_27);
d176 2
a177 4
} else if (linkDecoration.getFigureQualifiedClassName() != null && linkDecoration.getFigureQualifiedClassName().trim().length() > 0) {
	String decorationClassName = importManager.getImportedName(linkDecoration.getFigureQualifiedClassName());
	if (SCALABLE_DECORATIONS.contains(linkDecoration.getFigureQualifiedClassName())) {
		// XXX use smth like ScaleableAtttributes?
a178 4
    stringBuffer.append(TEXT_28);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(decorationClassName);
d180 1
a180 1
    	} else {
d182 20
a202 3
    stringBuffer.append(TEXT_32);
    	}
} else {
d204 1
a204 1
    }
d206 1
a206 3
    
linkDecoration = viewmap.getTarget();

d208 2
d211 2
a212 1
if (linkDecoration == null) {
d214 1
a214 1
    stringBuffer.append(TEXT_36);
d216 2
a217 4
} else if (linkDecoration.getFigureQualifiedClassName() != null && linkDecoration.getFigureQualifiedClassName().trim().length() > 0) {
	String decorationClassName = importManager.getImportedName(linkDecoration.getFigureQualifiedClassName());
	if (SCALABLE_DECORATIONS.contains(linkDecoration.getFigureQualifiedClassName())) {
		// XXX use smth like ScaleableAtttributes?
a218 2
    stringBuffer.append(TEXT_37);
    stringBuffer.append(decorationClassName);
d220 1
a220 1
    stringBuffer.append(decorationClassName);
d222 1
a222 1
    	} else {
a223 11
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_41);
    	}
} else {
    stringBuffer.append(TEXT_42);
    }
    stringBuffer.append(TEXT_43);
    }
    stringBuffer.append(TEXT_44);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_45);
@


1.5
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d48 16
a63 20
  protected final String TEXT_30 = "();" + NL + "\t\tdecoration.setScale(";
  protected final String TEXT_31 = ".getMapMode().DPtoLP(7), ";
  protected final String TEXT_32 = ".getMapMode().DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_33 = NL + "\t\treturn new ";
  protected final String TEXT_34 = "();";
  protected final String TEXT_35 = NL + "\t\treturn null;";
  protected final String TEXT_36 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_37 = NL;
  protected final String TEXT_38 = NL + "\t\treturn null;";
  protected final String TEXT_39 = NL + "\t\t";
  protected final String TEXT_40 = " decoration = new ";
  protected final String TEXT_41 = "();" + NL + "\t\tdecoration.setScale(";
  protected final String TEXT_42 = ".getMapMode().DPtoLP(7), ";
  protected final String TEXT_43 = ".getMapMode().DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_44 = NL + "\t\treturn new ";
  protected final String TEXT_45 = "();";
  protected final String TEXT_46 = NL + "\t\treturn null;";
  protected final String TEXT_47 = NL + "\t}";
  protected final String TEXT_48 = NL + "}";
  protected final String TEXT_49 = NL;
a166 1
	String mapModeClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil");
d175 1
a175 1
    stringBuffer.append(mapModeClassName);
d177 1
a177 1
    stringBuffer.append(mapModeClassName);
a178 4
    	} else {
    stringBuffer.append(TEXT_33);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_34);
d181 1
a181 1
    stringBuffer.append(TEXT_35);
d183 1
a183 1
    stringBuffer.append(TEXT_36);
d187 1
a187 1
    stringBuffer.append(TEXT_37);
d191 1
a191 1
    stringBuffer.append(TEXT_38);
a194 1
	String mapModeClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil");
d198 4
d203 1
a203 1
    stringBuffer.append(decorationClassName);
a206 8
    stringBuffer.append(mapModeClassName);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(mapModeClassName);
    stringBuffer.append(TEXT_43);
    	} else {
    stringBuffer.append(TEXT_44);
    stringBuffer.append(decorationClassName);
    stringBuffer.append(TEXT_45);
d209 1
a209 1
    stringBuffer.append(TEXT_46);
d211 1
a211 1
    stringBuffer.append(TEXT_47);
d213 1
a213 1
    stringBuffer.append(TEXT_48);
d215 1
a215 1
    stringBuffer.append(TEXT_49);
@


1.4
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d49 2
a50 2
  protected final String TEXT_31 = ".DPtoLP(7), ";
  protected final String TEXT_32 = ".DPtoLP(3));" + NL + "\t\treturn decoration;";
d60 2
a61 2
  protected final String TEXT_42 = ".DPtoLP(7), ";
  protected final String TEXT_43 = ".DPtoLP(3));" + NL + "\t\treturn decoration;";
d171 1
a171 1
	String mapModeClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode");
d204 1
a204 1
	String mapModeClassName = importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode");
@


1.3
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.RotatableDecoration;" + NL + "import org.eclipse.gef.EditPolicy;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.EditPolicyRoles;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d25 43
a67 42
  protected final String TEXT_7 = NL + "\t\tinstallEditPolicy(EditPolicy.CONNECTION_ROLE, new ";
  protected final String TEXT_8 = "());";
  protected final String TEXT_9 = NL + "\t\tinstallEditPolicy(EditPolicyRoles.SEMANTIC_ROLE, new ";
  protected final String TEXT_10 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_11 = NL + "\t\treturn null;";
  protected final String TEXT_12 = NL + "\t\t";
  protected final String TEXT_13 = " connection = new ";
  protected final String TEXT_14 = "();";
  protected final String TEXT_15 = NL + "\t\tRotatableDecoration sourceDecoration = createSourceDecoration();" + NL + "\t\tif (sourceDecoration != null) {" + NL + "\t\t\tconnection.setSourceDecoration(sourceDecoration);" + NL + "\t\t}" + NL + "\t\tRotatableDecoration targetDecoration = createTargetDecoration();" + NL + "\t\tif (targetDecoration != null) {" + NL + "\t\t\tconnection.setTargetDecoration(targetDecoration);" + NL + "\t\t}";
  protected final String TEXT_16 = NL;
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = ".setLineStyle(Graphics.";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_22 = NL + "\t\treturn connection;" + NL + "\t}" + NL;
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createSourceDecoration() {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t\treturn null;";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = " decoration = new ";
  protected final String TEXT_29 = "();" + NL + "\t\tdecoration.setScale(";
  protected final String TEXT_30 = ".DPtoLP(7), ";
  protected final String TEXT_31 = ".DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_32 = NL + "\t\treturn new ";
  protected final String TEXT_33 = "();";
  protected final String TEXT_34 = NL + "\t\treturn null;";
  protected final String TEXT_35 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_36 = NL;
  protected final String TEXT_37 = NL + "\t\treturn null;";
  protected final String TEXT_38 = NL + "\t\t";
  protected final String TEXT_39 = " decoration = new ";
  protected final String TEXT_40 = "();" + NL + "\t\tdecoration.setScale(";
  protected final String TEXT_41 = ".DPtoLP(7), ";
  protected final String TEXT_42 = ".DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_43 = NL + "\t\treturn new ";
  protected final String TEXT_44 = "();";
  protected final String TEXT_45 = NL + "\t\treturn null;";
  protected final String TEXT_46 = NL + "\t}";
  protected final String TEXT_47 = NL + "}";
  protected final String TEXT_48 = NL;
d89 2
d92 1
a92 1
    stringBuffer.append(TEXT_8);
d94 1
a94 1
    stringBuffer.append(TEXT_9);
d96 1
a96 1
    stringBuffer.append(TEXT_10);
d100 1
a100 1
    stringBuffer.append(TEXT_11);
a104 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(connClassName);
d108 2
d113 1
a113 1
    stringBuffer.append(TEXT_15);
d122 1
a122 1
    stringBuffer.append(TEXT_16);
d127 1
a127 1
    stringBuffer.append(TEXT_17);
d129 1
a129 1
    stringBuffer.append(TEXT_18);
d131 1
a131 1
    stringBuffer.append(TEXT_19);
d136 1
a136 1
    stringBuffer.append(TEXT_20);
d138 1
a138 1
    stringBuffer.append(TEXT_21);
d145 1
a145 1
    stringBuffer.append(TEXT_22);
d147 1
a147 1
    stringBuffer.append(TEXT_23);
d159 1
a159 1
    stringBuffer.append(TEXT_24);
d163 1
a163 1
    stringBuffer.append(TEXT_25);
d167 1
a167 1
    stringBuffer.append(TEXT_26);
a174 2
    stringBuffer.append(TEXT_27);
    stringBuffer.append(decorationClassName);
d178 1
a178 1
    stringBuffer.append(mapModeClassName);
d182 2
d185 1
a185 1
    stringBuffer.append(TEXT_32);
d187 1
a187 1
    stringBuffer.append(TEXT_33);
d190 1
a190 1
    stringBuffer.append(TEXT_34);
d192 1
a192 1
    stringBuffer.append(TEXT_35);
d196 1
a196 1
    stringBuffer.append(TEXT_36);
d200 1
a200 1
    stringBuffer.append(TEXT_37);
a207 2
    stringBuffer.append(TEXT_38);
    stringBuffer.append(decorationClassName);
d211 1
a211 1
    stringBuffer.append(mapModeClassName);
d215 2
d218 1
a218 1
    stringBuffer.append(TEXT_43);
d220 1
a220 1
    stringBuffer.append(TEXT_44);
a222 2
    stringBuffer.append(TEXT_45);
    }
d226 2
d229 1
a229 1
    stringBuffer.append(TEXT_48);
@


1.2
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.RotatableDecoration;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 43
a66 38
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {";
  protected final String TEXT_7 = NL + "\t\treturn null;";
  protected final String TEXT_8 = NL + "\t\t";
  protected final String TEXT_9 = " connection = new ";
  protected final String TEXT_10 = "();";
  protected final String TEXT_11 = NL + "\t\tRotatableDecoration sourceDecoration = createSourceDecoration();" + NL + "\t\tif (sourceDecoration != null) {" + NL + "\t\t\tconnection.setSourceDecoration(sourceDecoration);" + NL + "\t\t}" + NL + "\t\tRotatableDecoration targetDecoration = createTargetDecoration();" + NL + "\t\tif (targetDecoration != null) {" + NL + "\t\t\tconnection.setTargetDecoration(targetDecoration);" + NL + "\t\t}";
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = NL + "\t\t";
  protected final String TEXT_14 = ".setLineStyle(Graphics.";
  protected final String TEXT_15 = ");";
  protected final String TEXT_16 = NL + "\t\t";
  protected final String TEXT_17 = ".setLineWidth(attrs.getLineWidth());";
  protected final String TEXT_18 = NL + "\t\treturn connection;" + NL + "\t}" + NL;
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createSourceDecoration() {";
  protected final String TEXT_21 = NL;
  protected final String TEXT_22 = NL + "\t\treturn null;";
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = " decoration = new ";
  protected final String TEXT_25 = "();" + NL + "\t\tdecoration.setScale(";
  protected final String TEXT_26 = ".DPtoLP(7), ";
  protected final String TEXT_27 = ".DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_28 = NL + "\t\treturn new ";
  protected final String TEXT_29 = "();";
  protected final String TEXT_30 = NL + "\t\treturn null;";
  protected final String TEXT_31 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = NL + "\t\treturn null;";
  protected final String TEXT_34 = NL + "\t\t";
  protected final String TEXT_35 = " decoration = new ";
  protected final String TEXT_36 = "();" + NL + "\t\tdecoration.setScale(";
  protected final String TEXT_37 = ".DPtoLP(7), ";
  protected final String TEXT_38 = ".DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_39 = NL + "\t\treturn new ";
  protected final String TEXT_40 = "();";
  protected final String TEXT_41 = NL + "\t\treturn null;";
  protected final String TEXT_42 = NL + "\t}";
  protected final String TEXT_43 = NL + "}";
d86 8
d97 1
a97 1
    stringBuffer.append(TEXT_7);
d102 1
a102 1
    stringBuffer.append(TEXT_8);
d104 1
a104 1
    stringBuffer.append(TEXT_9);
d106 1
a106 1
    stringBuffer.append(TEXT_10);
d110 1
a110 1
    stringBuffer.append(TEXT_11);
d119 1
a119 1
    stringBuffer.append(TEXT_12);
d124 1
a124 1
    stringBuffer.append(TEXT_13);
d126 1
a126 1
    stringBuffer.append(TEXT_14);
d128 1
a128 1
    stringBuffer.append(TEXT_15);
d133 1
a133 1
    stringBuffer.append(TEXT_16);
d135 1
a135 1
    stringBuffer.append(TEXT_17);
d142 1
a142 1
    stringBuffer.append(TEXT_18);
d144 1
a144 1
    stringBuffer.append(TEXT_19);
d156 1
a156 1
    stringBuffer.append(TEXT_20);
d160 1
a160 1
    stringBuffer.append(TEXT_21);
d164 1
a164 1
    stringBuffer.append(TEXT_22);
d172 1
a172 1
    stringBuffer.append(TEXT_23);
d174 1
a174 1
    stringBuffer.append(TEXT_24);
d176 1
a176 1
    stringBuffer.append(TEXT_25);
d178 1
a178 1
    stringBuffer.append(TEXT_26);
d180 1
a180 1
    stringBuffer.append(TEXT_27);
d182 1
a182 1
    stringBuffer.append(TEXT_28);
d184 1
a184 1
    stringBuffer.append(TEXT_29);
d187 1
a187 1
    stringBuffer.append(TEXT_30);
d189 1
a189 1
    stringBuffer.append(TEXT_31);
d193 1
a193 1
    stringBuffer.append(TEXT_32);
d197 1
a197 1
    stringBuffer.append(TEXT_33);
d205 1
a205 1
    stringBuffer.append(TEXT_34);
d207 1
a207 1
    stringBuffer.append(TEXT_35);
d209 1
a209 1
    stringBuffer.append(TEXT_36);
d211 1
a211 1
    stringBuffer.append(TEXT_37);
d213 1
a213 1
    stringBuffer.append(TEXT_38);
d215 1
a215 1
    stringBuffer.append(TEXT_39);
d217 1
a217 1
    stringBuffer.append(TEXT_40);
d220 1
a220 1
    stringBuffer.append(TEXT_41);
d222 1
a222 1
    stringBuffer.append(TEXT_42);
d224 1
a224 1
    stringBuffer.append(TEXT_43);
d226 1
@


1.1
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.Connection;" + NL + "import org.eclipse.draw2d.Graphics;" + NL + "import org.eclipse.draw2d.RotatableDecoration;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.ConnectionNodeEditPart;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d24 38
a61 20
  protected final String TEXT_6 = "(View view) {" + NL + "\t\tsuper(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Connection createConnectionFigure() {" + NL + "\t\tPolylineConnectionEx connection = new PolylineConnectionEx();" + NL + "\t\tRotatableDecoration sourceDecoration = createSourceDecoration();" + NL + "\t\tif (sourceDecoration != null) {" + NL + "\t\t\tconnection.setSourceDecoration(sourceDecoration);" + NL + "\t\t}" + NL + "\t\tRotatableDecoration targetDecoration = createTargetDecoration();" + NL + "\t\tif (targetDecoration != null) {" + NL + "\t\t\tconnection.setTargetDecoration(targetDecoration);" + NL + "\t\t}";
  protected final String TEXT_7 = NL + "\t\tconnection.setLineStyle(Graphics.";
  protected final String TEXT_8 = ");";
  protected final String TEXT_9 = NL + "\t\treturn connection;" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createSourceDecoration() {";
  protected final String TEXT_11 = NL + "\t\t";
  protected final String TEXT_12 = " decoration = new ";
  protected final String TEXT_13 = "();" + NL + "\t\tdecoration.setScale(MapMode.DPtoLP(7), MapMode.DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_14 = NL + "\t\treturn new ";
  protected final String TEXT_15 = "();";
  protected final String TEXT_16 = NL + "\t\treturn null;";
  protected final String TEXT_17 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected RotatableDecoration createTargetDecoration() {";
  protected final String TEXT_18 = NL + "\t\t";
  protected final String TEXT_19 = " decoration = new ";
  protected final String TEXT_20 = "();" + NL + "\t\tdecoration.setScale(MapMode.DPtoLP(7), MapMode.DPtoLP(3));" + NL + "\t\treturn decoration;";
  protected final String TEXT_21 = NL + "\t\treturn new ";
  protected final String TEXT_22 = "();";
  protected final String TEXT_23 = NL + "\t\treturn null;";
  protected final String TEXT_24 = NL + "\t}" + NL + "}";
  protected final String TEXT_25 = NL;
d82 27
a108 1
String lineStyle = genLink.getLineStyle();
d111 3
a113 1
    stringBuffer.append(TEXT_7);
d115 8
a122 1
    stringBuffer.append(TEXT_8);
a123 1
    stringBuffer.append(TEXT_9);
d125 10
d143 9
a151 1
    stringBuffer.append(TEXT_10);
d153 5
a157 4
String sourceDecorationClassQualifiedName = genLink.getSourceDecorationFigureQualifiedClassName();
if (sourceDecorationClassQualifiedName != null && sourceDecorationClassQualifiedName.trim().length() > 0) {
	String sourceDecorationClassName = importManager.getImportedName(sourceDecorationClassQualifiedName);
	if (SCALABLE_DECORATIONS.contains(sourceDecorationClassQualifiedName)) {
d159 9
a167 5
    stringBuffer.append(TEXT_11);
    stringBuffer.append(sourceDecorationClassName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(sourceDecorationClassName);
    stringBuffer.append(TEXT_13);
d169 3
a171 3
    stringBuffer.append(TEXT_14);
    stringBuffer.append(sourceDecorationClassName);
    stringBuffer.append(TEXT_15);
d174 1
a174 1
    stringBuffer.append(TEXT_16);
d176 5
a180 1
    stringBuffer.append(TEXT_17);
d182 1
a182 4
String targetDecorationClassQualifiedName = genLink.getTargetDecorationFigureQualifiedClassName();
if (targetDecorationClassQualifiedName != null && targetDecorationClassQualifiedName.trim().length() > 0) {
	String targetDecorationClassName = importManager.getImportedName(targetDecorationClassQualifiedName);
	if (SCALABLE_DECORATIONS.contains(targetDecorationClassQualifiedName)) {
d184 17
a200 5
    stringBuffer.append(TEXT_18);
    stringBuffer.append(targetDecorationClassName);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(targetDecorationClassName);
    stringBuffer.append(TEXT_20);
d202 3
a204 3
    stringBuffer.append(TEXT_21);
    stringBuffer.append(targetDecorationClassName);
    stringBuffer.append(TEXT_22);
d207 3
a209 1
    stringBuffer.append(TEXT_23);
d211 1
a211 1
    stringBuffer.append(TEXT_24);
a212 1
    stringBuffer.append(TEXT_25);
@

