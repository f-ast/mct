head	1.59;
access;
symbols
	v20081022-1925:1.59
	v20081015-1925:1.59
	v20081008-1925:1.59
	v20081001-1925:1.59
	v20080924-1925:1.59
	v20080917-1925:1.59
	v20080911-1728:1.59
	v20080910-1520:1.59
	v20080903-1520:1.59
	v20080827-1520:1.59
	v20080813-1520:1.59
	v20080806-1520:1.59
	v20070504-1000:1.58
	v20070427-0600:1.58
	v20070420-1000:1.57
	v20070413-1300:1.57
	v20070405-1100:1.56
	v20070403-1500:1.56
	v20070330-1300:1.56
	v20060330-1300:1.56
	v20070322-1100:1.56
	v20060316-0600:1.56
	v20070307-0700:1.56
	v20070301-1200:1.56
	v20070228-2000:1.56
	v20070221-1500:1.56
	v20070208-1800:1.56
	v20070202-0200:1.54.2.1
	v20070103-0300:1.55
	M4_20:1.55
	v20061222-1800:1.55
	v20061218-1200:1.55
	v20061214-0000:1.55
	v20061120-1300:1.55
	M3_20:1.55
	v20061117-0800:1.55
	v20061027-1200:1.54.2.1
	v20061020-1000:1.54.2.1
	v20061013-1330:1.55
	v20060919-0800:1.54.2.1
	v20060907-1100:1.54.2.1
	M1_20:1.55
	v20060904-1500:1.55
	v20060824-1600:1.54.2.1
	v20060817-1500:1.54.2.1
	v20060728-0500:1.54.2.1
	v20060713-1700:1.54
	R1_0_maintenance:1.54.0.2
	R1_0:1.54
	v20060627-1200:1.54
	v20060626-1420:1.54
	v20060620-0400:1.54
	v20060616-1400:1.54
	v20060616-1200:1.54
	v20060609-1400:1.52
	v20060531-1730:1.51
	v20060530-1930:1.51
	v20060526-1200:1.48
	v20060519-1300:1.48
	v20060519-0800:1.48
	v20060512-1000:1.46
	I20060512-1000:1.46
	I20060505-1400:1.44
	I20060428-1300:1.44
	I20060424-0500:1.42
	I20060424-0300:1.42
	M6_10:1.39
	I20060407-1200:1.33
	I20060331-1000:1.32
	I20060324-0300:1.32
	I20060317-1300:1.32
	I20060317-1200:1.32
	I20060316-1300:1.32
	I20060309-1300:1.31
	M5_10:1.30
	S20060303-1600:1.30
	I20060227-1730:1.30
	I20060216-1945:1.28
	I20060210-1715:1.24
	I20060209-1815:1.24
	I20060203-0830:1.19
	I20060202-1415:1.19
	I20060129-1145:1.18
	I20060127-0900:1.18
	I20060120-1530:1.16
	I20060113-1700:1.14
	M4_10:1.14
	I20060107-1100:1.12
	I20060105-1630:1.12
	I20051230-1230:1.12
	I20051223-1100:1.12
	I20051217-0925:1.11
	I20051208-2000:1.11
	I20051201-1800:1.11
	I20051124-2000:1.10
	M3_10:1.10
	I20051118-1245:1.10
	I20051111-1800:1.8
	I20051106-0900:1.5
	v20051030:1.4;
locks; strict;
comment	@# @;
expand	@k@;


1.59
date	2007.05.15.18.34.13;	author ashatalin;	state dead;
branches;
next	1.58;
commitid	25434649fd1f4567;

1.58
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.57;
commitid	78b462dc68e4567;

1.57
date	2007.04.06.12.14.57;	author dstadnik;	state Exp;
branches;
next	1.56;
commitid	6a69461639bf4567;

1.56
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.55;
commitid	271945b8e1904567;

1.55
date	2006.07.24.12.37.13;	author ashatalin;	state Exp;
branches;
next	1.54;

1.54
date	2006.06.14.13.56.50;	author radvorak;	state Exp;
branches
	1.54.2.1;
next	1.53;

1.53
date	2006.06.13.12.53.34;	author radvorak;	state Exp;
branches;
next	1.52;

1.52
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.51;

1.51
date	2006.05.30.15.28.05;	author radvorak;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.30.14.04.16;	author radvorak;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.18.14.03.44;	author dstadnik;	state Exp;
branches;
next	1.47;

1.47
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.05.11.12.21.32;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.27.16.46.41;	author radvorak;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.25.17.54.39;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.21.17.12.00;	author ashatalin;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.20.20.37.15;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.04.18.11.59.24;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.04.14.18.25.37;	author ashatalin;	state Exp;
branches;
next	1.38;

1.38
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.37;

1.37
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.33;

1.33
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.32;

1.32
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.02.24.20.23.27;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.02.17.12.02.06;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.16.21.32.50;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.02.14.18.46.23;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.02.13.19.21.42;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.13.17.20.07;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.31.19.02.08;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.01.24.12.01.20;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.01.23.21.25.43;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.12.10.41.34;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.25.14.22.59;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.16.08.37.41;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.11.13.47.43;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.10.18.32.55;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.09.13.20.23;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.25.18.28.41;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	;

1.54.2.1
date	2006.07.24.12.54.14;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.59
log
@Generating VisualIDRegistry using XPAND.
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import java.util.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class VisualIDRegistryGenerator
{
  protected static String nl;
  public static synchronized VisualIDRegistryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    VisualIDRegistryGenerator result = new VisualIDRegistryGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final String DEBUG_KEY = ";
  protected final String TEXT_7 = ".getInstance().getBundle().getSymbolicName() + \"/debug/visualID\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(View view) {" + NL + "\t\tif (view instanceof Diagram) {" + NL + "\t\t\tif (";
  protected final String TEXT_8 = ".MODEL_ID.equals(view.getType())) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_9 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getVisualID(view.getType());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
  protected final String TEXT_10 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram != null ? diagram.getType() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(String type) {" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(type);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\tif (Boolean.TRUE.toString().equalsIgnoreCase(Platform.getDebugOption(DEBUG_KEY))) {" + NL + "\t\t\t\t";
  protected final String TEXT_11 = ".getInstance().logError(\"Unable to parse view type as a visualID number: \" + type);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getType(int visualID) {" + NL + "\t\treturn String.valueOf(visualID);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_12 = NL + "\t\tif (";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "().isSuperTypeOf(domainElementMetaclass) && isDiagram";
  protected final String TEXT_15 = "((";
  protected final String TEXT_16 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_17 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, null);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!";
  protected final String TEXT_19 = ".MODEL_ID.equals(containerModelID)";
  protected final String TEXT_20 = "\t\t\t" + NL + "\t\t\t&& !\"";
  protected final String TEXT_21 = "\".equals(containerModelID)";
  protected final String TEXT_22 = NL + "\t\t) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (";
  protected final String TEXT_23 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_24 = ".VISUAL_ID;\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tint nodeVisualID = semanticHint != null ? getVisualID(semanticHint) : -1;" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_25 = NL + "\t\tcase ";
  protected final String TEXT_26 = ".VISUAL_ID:";
  protected final String TEXT_27 = NL + "\t\t\tif (";
  protected final String TEXT_28 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t\tif (";
  protected final String TEXT_31 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_32 = ".VISUAL_ID;" + NL + "\t\t\t} ";
  protected final String TEXT_33 = NL + "\t\t\tif ((semanticHint == null || ";
  protected final String TEXT_34 = ".VISUAL_ID == nodeVisualID)";
  protected final String TEXT_35 = NL + "\t\t\t\t\t&& ";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "().isSuperTypeOf(domainElementMetaclass)" + NL + "\t\t\t\t\t&& (domainElement == null || isNode";
  protected final String TEXT_38 = "((";
  protected final String TEXT_39 = ") domainElement))";
  protected final String TEXT_40 = NL + "\t\t\t\t) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_41 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_42 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_43 = "ChildNodeID(domainElement, semanticHint);";
  protected final String TEXT_44 = NL + "\t\tcase ";
  protected final String TEXT_45 = ".VISUAL_ID:";
  protected final String TEXT_46 = NL + "\t\t\tif (";
  protected final String TEXT_47 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_48 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_50 = "LinkLabelID(semanticHint);";
  protected final String TEXT_51 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_52 = NL + "\t\tif (";
  protected final String TEXT_53 = ".eINSTANCE.get";
  protected final String TEXT_54 = "().isSuperTypeOf(domainElementMetaclass) && (domainElement == null || isLinkWithClass";
  protected final String TEXT_55 = "((";
  protected final String TEXT_56 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_57 = ".VISUAL_ID;" + NL + "\t\t} else ";
  protected final String TEXT_58 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_59 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isDiagram";
  protected final String TEXT_60 = "(";
  protected final String TEXT_61 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_63 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isNode";
  protected final String TEXT_64 = "(";
  protected final String TEXT_65 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_66 = ".matches(element)";
  protected final String TEXT_67 = "true";
  protected final String TEXT_68 = ";" + NL + "\t}\t";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int getUnrecognized";
  protected final String TEXT_70 = "ChildNodeID(EObject domainElement, String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int getUnrecognized";
  protected final String TEXT_72 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_73 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isLinkWithClass";
  protected final String TEXT_75 = "(";
  protected final String TEXT_76 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_77 = ".matches(element)";
  protected final String TEXT_78 = "true";
  protected final String TEXT_79 = ";" + NL + "\t}";
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final ";
  protected final String TEXT_81 = " ";
  protected final String TEXT_82 = " = new ";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = "null";
  protected final String TEXT_85 = ".";
  protected final String TEXT_86 = "(";
  protected final String TEXT_87 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_88 = ", ";
  protected final String TEXT_89 = ")";
  protected final String TEXT_90 = ".";
  protected final String TEXT_91 = "(";
  protected final String TEXT_92 = ", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_93 = ")";
  protected final String TEXT_94 = "new ";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_97 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_98 = " self = (";
  protected final String TEXT_99 = ")context;";
  protected final String TEXT_100 = "\t" + NL + "\t\t";
  protected final String TEXT_101 = " ";
  protected final String TEXT_102 = " = (";
  protected final String TEXT_103 = ")env.get(\"";
  protected final String TEXT_104 = "\"); //$NON-NLS-1$";
  protected final String TEXT_105 = NL + "\t\treturn ";
  protected final String TEXT_106 = ".";
  protected final String TEXT_107 = "(self";
  protected final String TEXT_108 = ", ";
  protected final String TEXT_109 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_110 = NL + ");";
  protected final String TEXT_111 = "\t" + NL + "" + NL + "\t/**" + NL + "\t * @@generated\t" + NL + "\t */" + NL + "\tstatic class ";
  protected final String TEXT_112 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_113 = " condition;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\t";
  protected final String TEXT_114 = "(";
  protected final String TEXT_115 = " conditionExpression) {\t\t\t" + NL + "\t\t\tthis.condition = conditionExpression;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(Object object) {" + NL + "\t\t\tObject result = condition.evaluate(object);" + NL + "\t\t\treturn result instanceof Boolean && ((Boolean)result).booleanValue();\t\t\t" + NL + "\t\t}" + NL + "\t}// ";
  protected final String TEXT_116 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ";
  protected final String TEXT_117 = " {";
  protected final String TEXT_118 = NL;
  protected final String TEXT_119 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_120 = " ";
  protected final String TEXT_121 = "(";
  protected final String TEXT_122 = " self";
  protected final String TEXT_123 = ", ";
  protected final String TEXT_124 = " ";
  protected final String TEXT_125 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new ";
  protected final String TEXT_126 = ".NoImplException(\"No user java implementation provided in '";
  protected final String TEXT_127 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_128 = NL + "\t}// ";
  protected final String TEXT_129 = NL + "}" + NL + "\t";
  protected final String TEXT_130 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final String modelID = genDiagram.getEditorGen().getModelID();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final List genLinks = genDiagram.getLinks();
final Collection allContainers = genDiagram.getAllContainers();

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    
final String matcherClassName = "Matcher";
final String javaMatcherContainer = "JavaMatchers";
importManager.registerInnerClass(matcherClassName);
importManager.registerInnerClass(javaMatcherContainer);

importManager.addImport("org.eclipse.emf.ecore.EClass");
importManager.addImport("org.eclipse.emf.ecore.EObject");
importManager.addImport("org.eclipse.gmf.runtime.notation.View");
importManager.addImport("org.eclipse.gmf.runtime.notation.Diagram");
importManager.addImport("org.eclipse.core.runtime.Platform");

importManager.markImportLocation(stringBuffer);

    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    
if (genDiagram.getDomainDiagramElement() != null) {
	String classifierAccessorName = genDiagram.getDomainDiagramElement().getClassifierAccessorName();
	String interfaceName = importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_12);
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(classifierAccessorName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    }
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_19);
    
for (Iterator it = genDiagram.getShortcutsProvidedFor().iterator(); it.hasNext();) { 
	String nextDomainModelName = (String) it.next();
	if (modelID.equals(nextDomainModelName)) {
		continue;
	}

    stringBuffer.append(TEXT_20);
    stringBuffer.append(nextDomainModelName);
    stringBuffer.append(TEXT_21);
    
}

    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_24);
    
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();

    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName(nextContainer.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_26);
    
	if (nextContainer instanceof GenNode) {
		GenNode node = (GenNode) nextContainer;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();

    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    
		}
		for (Iterator compartments = node.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment compartment = (GenCompartment) compartments.next();

    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(compartment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(compartment.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_32);
    
		}
	}

	for (Iterator childNodes = nextContainer.getContainedNodes().iterator(); childNodes.hasNext();) {
		GenNode childNode = (GenNode) childNodes.next();

    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(childNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    
		if (childNode.getModelFacet() != null) {
			final String classifierAccessorName = childNode.getDomainMetaClass().getClassifierAccessorName();
			final String interfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getQualifiedInterfaceName());
			final String semanticPackageInterfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()); 

    stringBuffer.append(TEXT_35);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(classifierAccessorName);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(childNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_38);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_39);
    		}
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(childNode.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_41);
    
	}

    stringBuffer.append(TEXT_42);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_43);
    
}
for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
	if (link.getLabels().size() > 0) {

    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName(link.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_45);
    
		for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
			GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();

    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_48);
    		}
    stringBuffer.append(TEXT_49);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_50);
    	}
}
    stringBuffer.append(TEXT_51);
    
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		final TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		final String semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		final String qualifiedInterfaceName = modelFacet.getMetaClass().getQualifiedInterfaceName();
		final String semanticPackageInterfaceName = importManager.getImportedName(modelFacet.getMetaClass().getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_52);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_53);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_54);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_57);
    
		}
	}

    stringBuffer.append(TEXT_58);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_59);
    stringBuffer.append(genDiagram.getUniqueIdentifier());
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_61);
    }
    stringBuffer.append(TEXT_62);
    
for (Iterator nodes = genDiagram.getAllNodes().iterator(); nodes.hasNext();) {
	GenNode nextNode = (GenNode) nodes.next();
	if (nextNode.getModelFacet() == null) {
		continue;
	}
	String childNodeInterfaceName = importManager.getImportedName(nextNode.getDomainMetaClass().getQualifiedInterfaceName());
	boolean callMatcher = nextNode.getModelFacet() != null && nextNode.getModelFacet().getModelElementSelector() != null;

    stringBuffer.append(TEXT_63);
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(childNodeInterfaceName);
    stringBuffer.append(TEXT_65);
    if (callMatcher) {
    stringBuffer.append(nextNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_66);
    } else {
    stringBuffer.append(TEXT_67);
    }
    stringBuffer.append(TEXT_68);
    
}
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenContainerBase nextContainer = (GenContainerBase) containers.next();

    stringBuffer.append(TEXT_69);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_70);
    
}
for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
	if (link.getLabels().size() == 0) {
		continue;
	}

    stringBuffer.append(TEXT_71);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_72);
    }
    stringBuffer.append(TEXT_73);
    
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String interfaceName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
		boolean callMatcher = modelFacet.getModelElementSelector() != null;		

    stringBuffer.append(TEXT_74);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_75);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_76);
    if (callMatcher) {
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_77);
    } else {
    stringBuffer.append(TEXT_78);
    }
    stringBuffer.append(TEXT_79);
    
	}
}

final GenExpressionProviderContainer expressionProviders = genDiagram.getEditorGen().getExpressionProviders();
final List javaSelectorFacets = new ArrayList();
final Map __exprEnvVariables = Collections.EMPTY_MAP;
final String __outEnvVarName = null; // no custom env
final String __javaOperationContainer = javaMatcherContainer; // put method here
int selectorCounter = 0;
for (Iterator it = genDiagram.eAllContents(); it.hasNext() && expressionProviders != null;) {
	Object next = it.next();
	String id = null;
	TypeModelFacet modelFacet = null;
	if (next instanceof GenNode) {
		id = ((GenNode) next).getUniqueIdentifier();
		modelFacet = ((GenNode) next).getModelFacet();
	} else if (next instanceof GenLink && ((GenLink) next).getModelFacet() instanceof TypeLinkModelFacet) {
		id = ((GenLink) next).getUniqueIdentifier();
		modelFacet = (TypeLinkModelFacet) ((GenLink) next).getModelFacet();
	}
	if (modelFacet == null || modelFacet.getModelElementSelector() == null || modelFacet.getMetaClass() == null) {
		continue;
	}
	GenConstraint selector = modelFacet.getModelElementSelector();
	selectorCounter++;
	// setup expression factory
	ValueExpression __genValueExpression = selector;
	GenClassifier __genExprContext = modelFacet.getMetaClass();
	GenExpressionProviderBase expressionProvider = expressionProviders.getProvider(__genValueExpression); 
	if(expressionProvider instanceof GenJavaExpressionProvider && !expressionProviders.isCopy(__genValueExpression)) {
		// skipping duplicates coming from reused node mappings 
		javaSelectorFacets.add(modelFacet);
	}

    stringBuffer.append(TEXT_80);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_81);
    stringBuffer.append(id);
    stringBuffer.append(TEXT_82);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_83);
    
{ /*begin the scope*/
/*
ValueExpression __genValueExpression;
GenClassifier __genExprContext
java.util.Map __exprEnvVariables
String __outEnvVarName;
String __javaOperationContainer;
*/
	org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
	String __ctxEClassifierAccess = importManager.getImportedName(__genExprContext.getGenPackage().getQualifiedPackageInterfaceName()) + ".eINSTANCE.get" + __genExprContext.getClassifierAccessorName()+"()";
	String __importedAbstractClass = __genExprProvider != null ? importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName()) : null;

	if(__genExprProvider == null || __importedAbstractClass == null) {

    stringBuffer.append(TEXT_84);
    
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter) {
		org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter interpreter = (org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter)__genExprProvider;
		String __expressionAccessor = interpreter.getExpressionAccessor(__genValueExpression);
		String providerImportedClass = importManager.getImportedName(interpreter.getQualifiedClassName());
		if(!__exprEnvVariables.isEmpty()) {			

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_85);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_87);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_88);
    stringBuffer.append(__outEnvVarName);
    stringBuffer.append(TEXT_89);
    
		} else { 		

    stringBuffer.append(providerImportedClass);
    stringBuffer.append(TEXT_90);
    stringBuffer.append(__expressionAccessor);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(__genValueExpression.getBodyString());
    stringBuffer.append(TEXT_92);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_93);
    
		}
	} else if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) { /*inlined java expression adapter*/
		String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
		String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);	


    stringBuffer.append(TEXT_94);
    stringBuffer.append(__importedAbstractClass);
    stringBuffer.append(TEXT_95);
    stringBuffer.append(__ctxEClassifierAccess);
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("java.util.Map"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_99);
    	
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
			String nextVariableName = (String)envVarIt.next();
			org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(nextVariableName);
			String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_103);
    stringBuffer.append(nextVariableName);
    stringBuffer.append(TEXT_104);
    		} 
    stringBuffer.append(TEXT_105);
    
		if(__javaOperationContainer != null && __javaOperationContainer.length() > 0) { 
    stringBuffer.append(__javaOperationContainer);
    stringBuffer.append(TEXT_106);
    
		} 
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_107);
    
		for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();){
    stringBuffer.append(TEXT_108);
    stringBuffer.append((String)envVarIt.next());
    }
    stringBuffer.append(TEXT_109);
    }
    } /*end of scope*/
    stringBuffer.append(TEXT_110);
    
} /* end of selector interation */

if(selectorCounter > 0) { 
    stringBuffer.append(TEXT_111);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(matcherClassName);
    
	if(!javaSelectorFacets.isEmpty()) {

    stringBuffer.append(TEXT_116);
    stringBuffer.append(javaMatcherContainer);
    stringBuffer.append(TEXT_117);
    
		for(Iterator it = javaSelectorFacets.iterator(); it.hasNext();) {
			TypeModelFacet modelFacet = (TypeModelFacet) it.next();
			ValueExpression __genValueExpression = modelFacet.getModelElementSelector();
			GenClassifier __genExprContext = modelFacet.getMetaClass();
			String __genExprResultType = "java.lang.Boolean"; //$NON-NLS-1$

    stringBuffer.append(TEXT_118);
    
/* 
ValueExpression __genValueExpression
java.util.Map __exprEnvVariables
GenClassifier __genExprContext
GenClassifier || String/qualifiedClassName/__genExprResultType
*/
org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase __genExprProvider = (genDiagram.getEditorGen().getExpressionProviders() != null) ? genDiagram.getEditorGen().getExpressionProviders().getProvider(__genValueExpression) : null;
if(__genExprProvider instanceof org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider) {
	String __importedAbstractExpr = importManager.getImportedName(__genExprProvider.getContainer().getAbstractExpressionQualifiedClassName());
	String evalCtxQualifiedName = __genExprProvider.getQualifiedInstanceClassName(__genExprContext);
	// support GenClassifier and also String based qualified java class name
	Object __genExprResultTypeObj = __genExprResultType;
	String __exprResultTypeQualifiedName = null;
	if(__genExprResultTypeObj instanceof String) 
		__exprResultTypeQualifiedName = (String)__genExprResultTypeObj;
	else if(__genExprResultTypeObj instanceof org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)
		__exprResultTypeQualifiedName = __genExprProvider.getQualifiedInstanceClassName((org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__genExprResultTypeObj);
	String __exprJavaOperName = ((org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider)__genExprProvider).getOperationName(__genValueExpression);

    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName(__exprResultTypeQualifiedName));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
    stringBuffer.append(TEXT_122);
    
	for(java.util.Iterator envVarIt = __exprEnvVariables.keySet().iterator(); envVarIt.hasNext();) {
		String __nextVarName = (String)envVarIt.next();
		org.eclipse.emf.codegen.ecore.genmodel.GenClassifier nextVariableType = (org.eclipse.emf.codegen.ecore.genmodel.GenClassifier)__exprEnvVariables.get(__nextVarName);
		String qualifiedTypeName = __genExprProvider.getQualifiedInstanceClassName(nextVariableType);

	
    stringBuffer.append(TEXT_123);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_124);
    stringBuffer.append(__nextVarName);
    	} 

    stringBuffer.append(TEXT_125);
    stringBuffer.append(__importedAbstractExpr);
    stringBuffer.append(TEXT_126);
    stringBuffer.append(__exprJavaOperName);
    stringBuffer.append(TEXT_127);
    
} /* end of GenJavaExpressionProvider */

    
		} /* java javaSelectorFacets iteration */

    stringBuffer.append(TEXT_128);
    stringBuffer.append(javaMatcherContainer);
    
	} /* !javaSelectorFacets.isEmpty() */
} /* selectorCounter > 0 */

    stringBuffer.append(TEXT_129);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_130);
    return stringBuffer.toString();
  }
}
@


1.58
log
@follow consisted spacing policy
@
text
@@


1.57
log
@[179027] Code does not compile if domain element has explicit class name and initializer or matcher
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d167 1
a167 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.56
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d130 3
a132 3
  protected final String TEXT_111 = "\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated\t" + NL + "\t */" + NL + "\tstatic class ";
  protected final String TEXT_112 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_113 = " condition;" + NL + "\t\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\t";
d134 2
a135 2
  protected final String TEXT_115 = " conditionExpression) {\t\t\t" + NL + "\t\t\tthis.condition = conditionExpression;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(EObject object) {" + NL + "\t\t\tObject result = condition.evaluate(object);" + NL + "\t\t\treturn result instanceof Boolean && ((Boolean)result).booleanValue();\t\t\t" + NL + "\t\t}" + NL + "\t}// ";
  protected final String TEXT_116 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private static class ";
@


1.55
log
@Correcting null-pointer exception.
@
text
@a479 1
		String __bodyLiteral = org.eclipse.gmf.internal.common.codegen.Conversions.toStringLiteral(__genValueExpression.getBody());
d489 1
a489 1
    stringBuffer.append(__bodyLiteral);
d502 1
a502 1
    stringBuffer.append(__bodyLiteral);
@


1.54
log
@#140401 Escape all String literals in the generated code according to java rules, escape strings used  in plugins.xml
@
text
@d70 1
a70 1
  protected final String TEXT_51 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
@


1.54.2.1
log
@Correcting null-pointer in the generated code.
@
text
@d70 1
a70 1
  protected final String TEXT_51 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
@


1.53
log
@#145753 Suppress exceptions logged from unimplemented methods of JavaAudits during tests execution
@
text
@d105 2
a106 2
  protected final String TEXT_86 = "(\"";
  protected final String TEXT_87 = "\", //$NON-NLS-1$" + NL + "\t";
d110 2
a111 2
  protected final String TEXT_91 = "(\"";
  protected final String TEXT_92 = "\", //$NON-NLS-1$" + NL + "\t";
d480 1
d490 1
a490 1
    stringBuffer.append(__genValueExpression.getBody());
d503 1
a503 1
    stringBuffer.append(__genValueExpression.getBody());
@


1.52
log
@header comment should not be a javadoc comment
@
text
@d144 6
a149 5
  protected final String TEXT_125 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_126 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_127 = NL + "\t}// ";
  protected final String TEXT_128 = NL + "}" + NL + "\t";
  protected final String TEXT_129 = NL;
d595 1
d627 2
d630 1
a630 1
    stringBuffer.append(TEXT_126);
d632 1
a632 1
}
d637 1
a637 1
    stringBuffer.append(TEXT_127);
d643 1
a643 1
    stringBuffer.append(TEXT_128);
d645 1
a645 1
    stringBuffer.append(TEXT_129);
@


1.51
log
@#144305 VisualIDRegistry.javajet should check for java expression duplicates in case of reused NodeMapping
1) provide a cleaner detection of expression copies for use in templates
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.50
log
@#144305 VisualIDRegistry.javajet should check for java expression duplicates in case of reused NodeMapping
@
text
@d449 3
a451 3
	if(expressionProvider instanceof GenJavaExpressionProvider) {
		// skip duplicates coming from reused node mappings 
		if(expressionProvider.getExpressions().contains(__genValueExpression)) javaSelectorFacets.add(modelFacet);
@


1.49
log
@Correcting copyright processing
@
text
@d448 4
a451 2
	if(expressionProviders.getProvider(__genValueExpression) instanceof GenJavaExpressionProvider) {
		javaSelectorFacets.add(modelFacet);
@


1.48
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d166 1
a166 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.47
log
@#131543 Obsolete code should be eliminated
@
text
@d52 36
a87 36
  protected final String TEXT_33 = "\t\t" + NL + "\t\t\tif ((semanticHint == null || ";
  protected final String TEXT_34 = ".VISUAL_ID == nodeVisualID) && ";
  protected final String TEXT_35 = ".eINSTANCE.get";
  protected final String TEXT_36 = "().isSuperTypeOf(domainElementMetaclass) && (domainElement == null || isNode";
  protected final String TEXT_37 = "((";
  protected final String TEXT_38 = ") domainElement))) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_39 = ".VISUAL_ID;" + NL + "\t\t\t} ";
  protected final String TEXT_40 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_41 = "ChildNodeID(domainElement, semanticHint);";
  protected final String TEXT_42 = NL + "\t\tcase ";
  protected final String TEXT_43 = ".VISUAL_ID:";
  protected final String TEXT_44 = NL + "\t\t\tif (";
  protected final String TEXT_45 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_46 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_48 = "LinkLabelID(semanticHint);";
  protected final String TEXT_49 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_50 = NL + "\t\tif (";
  protected final String TEXT_51 = ".eINSTANCE.get";
  protected final String TEXT_52 = "().isSuperTypeOf(domainElementMetaclass) && (domainElement == null || isLinkWithClass";
  protected final String TEXT_53 = "((";
  protected final String TEXT_54 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_55 = ".VISUAL_ID;" + NL + "\t\t} else ";
  protected final String TEXT_56 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_57 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isDiagram";
  protected final String TEXT_58 = "(";
  protected final String TEXT_59 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isNode";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_64 = ".matches(element)";
  protected final String TEXT_65 = "true";
  protected final String TEXT_66 = ";" + NL + "\t}\t";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int getUnrecognized";
  protected final String TEXT_68 = "ChildNodeID(EObject domainElement, String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
d89 60
a148 58
  protected final String TEXT_70 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_72 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isLinkWithClass";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_75 = ".matches(element)";
  protected final String TEXT_76 = "true";
  protected final String TEXT_77 = ";" + NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final ";
  protected final String TEXT_79 = " ";
  protected final String TEXT_80 = " = new ";
  protected final String TEXT_81 = "(";
  protected final String TEXT_82 = "null";
  protected final String TEXT_83 = ".";
  protected final String TEXT_84 = "(\"";
  protected final String TEXT_85 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_86 = ", ";
  protected final String TEXT_87 = ")";
  protected final String TEXT_88 = ".";
  protected final String TEXT_89 = "(\"";
  protected final String TEXT_90 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_91 = ")";
  protected final String TEXT_92 = "new ";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_95 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_96 = " self = (";
  protected final String TEXT_97 = ")context;";
  protected final String TEXT_98 = "\t" + NL + "\t\t";
  protected final String TEXT_99 = " ";
  protected final String TEXT_100 = " = (";
  protected final String TEXT_101 = ")env.get(\"";
  protected final String TEXT_102 = "\"); //$NON-NLS-1$";
  protected final String TEXT_103 = NL + "\t\treturn ";
  protected final String TEXT_104 = ".";
  protected final String TEXT_105 = "(self";
  protected final String TEXT_106 = ", ";
  protected final String TEXT_107 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_108 = NL + ");";
  protected final String TEXT_109 = "\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated\t" + NL + "\t */" + NL + "\tstatic class ";
  protected final String TEXT_110 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_111 = " condition;" + NL + "\t\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\t";
  protected final String TEXT_112 = "(";
  protected final String TEXT_113 = " conditionExpression) {\t\t\t" + NL + "\t\t\tthis.condition = conditionExpression;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(EObject object) {" + NL + "\t\t\tObject result = condition.evaluate(object);" + NL + "\t\t\treturn result instanceof Boolean && ((Boolean)result).booleanValue();\t\t\t" + NL + "\t\t}" + NL + "\t}// ";
  protected final String TEXT_114 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private static class ";
  protected final String TEXT_115 = " {";
  protected final String TEXT_116 = NL;
  protected final String TEXT_117 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_118 = " ";
  protected final String TEXT_119 = "(";
  protected final String TEXT_120 = " self";
  protected final String TEXT_121 = ", ";
  protected final String TEXT_122 = " ";
  protected final String TEXT_123 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_124 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_125 = NL + "\t}// ";
  protected final String TEXT_126 = NL + "}" + NL + "\t";
  protected final String TEXT_127 = NL;
a269 3
		final String classifierAccessorName = childNode.getDomainMetaClass().getClassifierAccessorName();
		final String interfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getQualifiedInterfaceName());
		final String semanticPackageInterfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getGenPackage().getQualifiedPackageInterfaceName()); 
d274 7
d282 1
a282 1
    stringBuffer.append(TEXT_35);
d284 1
a284 1
    stringBuffer.append(TEXT_36);
d286 1
a286 1
    stringBuffer.append(TEXT_37);
d288 3
a290 1
    stringBuffer.append(TEXT_38);
d292 1
a292 1
    stringBuffer.append(TEXT_39);
d296 1
a296 1
    stringBuffer.append(TEXT_40);
d298 1
a298 1
    stringBuffer.append(TEXT_41);
d305 1
a305 1
    stringBuffer.append(TEXT_42);
d307 1
a307 1
    stringBuffer.append(TEXT_43);
d312 1
a312 1
    stringBuffer.append(TEXT_44);
d314 1
a314 1
    stringBuffer.append(TEXT_45);
d316 1
a316 1
    stringBuffer.append(TEXT_46);
d318 1
a318 1
    stringBuffer.append(TEXT_47);
d320 1
a320 1
    stringBuffer.append(TEXT_48);
d323 1
a323 1
    stringBuffer.append(TEXT_49);
d333 1
a333 1
    stringBuffer.append(TEXT_50);
d335 1
a335 1
    stringBuffer.append(TEXT_51);
d337 1
a337 1
    stringBuffer.append(TEXT_52);
d339 1
a339 1
    stringBuffer.append(TEXT_53);
d341 1
a341 1
    stringBuffer.append(TEXT_54);
d343 1
a343 1
    stringBuffer.append(TEXT_55);
d348 1
a348 1
    stringBuffer.append(TEXT_56);
d350 1
a350 1
    stringBuffer.append(TEXT_57);
d352 1
a352 1
    stringBuffer.append(TEXT_58);
d354 1
a354 1
    stringBuffer.append(TEXT_59);
d356 1
a356 1
    stringBuffer.append(TEXT_60);
d360 3
d366 1
a366 1
    stringBuffer.append(TEXT_61);
d368 1
a368 1
    stringBuffer.append(TEXT_62);
d370 1
a370 1
    stringBuffer.append(TEXT_63);
d373 1
a373 1
    stringBuffer.append(TEXT_64);
d375 1
a375 1
    stringBuffer.append(TEXT_65);
d377 1
a377 1
    stringBuffer.append(TEXT_66);
d383 1
a383 1
    stringBuffer.append(TEXT_67);
d385 1
a385 1
    stringBuffer.append(TEXT_68);
d394 1
a394 1
    stringBuffer.append(TEXT_69);
d396 1
a396 1
    stringBuffer.append(TEXT_70);
d398 1
a398 1
    stringBuffer.append(TEXT_71);
d407 1
a407 1
    stringBuffer.append(TEXT_72);
d409 1
a409 1
    stringBuffer.append(TEXT_73);
d411 1
a411 1
    stringBuffer.append(TEXT_74);
d414 1
a414 1
    stringBuffer.append(TEXT_75);
d416 1
a416 1
    stringBuffer.append(TEXT_76);
d418 1
a418 1
    stringBuffer.append(TEXT_77);
d452 1
a452 1
    stringBuffer.append(TEXT_78);
d454 1
a454 1
    stringBuffer.append(TEXT_79);
d456 1
a456 1
    stringBuffer.append(TEXT_80);
d458 1
a458 1
    stringBuffer.append(TEXT_81);
d474 1
a474 1
    stringBuffer.append(TEXT_82);
d483 1
a483 1
    stringBuffer.append(TEXT_83);
d485 1
a485 1
    stringBuffer.append(TEXT_84);
d487 1
a487 1
    stringBuffer.append(TEXT_85);
d489 1
a489 1
    stringBuffer.append(TEXT_86);
d491 1
a491 1
    stringBuffer.append(TEXT_87);
d496 1
a496 1
    stringBuffer.append(TEXT_88);
d498 1
a498 1
    stringBuffer.append(TEXT_89);
d500 1
a500 1
    stringBuffer.append(TEXT_90);
d502 1
a502 1
    stringBuffer.append(TEXT_91);
d510 1
a510 1
    stringBuffer.append(TEXT_92);
d512 1
a512 1
    stringBuffer.append(TEXT_93);
d514 1
a514 1
    stringBuffer.append(TEXT_94);
d516 1
a516 1
    stringBuffer.append(TEXT_95);
d518 1
a518 1
    stringBuffer.append(TEXT_96);
d520 1
a520 1
    stringBuffer.append(TEXT_97);
a526 4
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName(qualifiedTypeName));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(nextVariableName);
d532 4
d537 1
a537 1
    stringBuffer.append(TEXT_103);
d541 1
a541 1
    stringBuffer.append(TEXT_104);
d545 1
a545 1
    stringBuffer.append(TEXT_105);
d548 1
a548 1
    stringBuffer.append(TEXT_106);
d551 1
a551 1
    stringBuffer.append(TEXT_107);
d554 1
a554 1
    stringBuffer.append(TEXT_108);
a558 4
    stringBuffer.append(TEXT_109);
    stringBuffer.append(matcherClassName);
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName(expressionProviders.getAbstractExpressionQualifiedClassName()));
d565 4
d572 1
a572 1
    stringBuffer.append(TEXT_114);
d574 1
a574 1
    stringBuffer.append(TEXT_115);
d582 1
a582 1
    stringBuffer.append(TEXT_116);
d602 1
a602 1
    stringBuffer.append(TEXT_117);
d604 1
a604 1
    stringBuffer.append(TEXT_118);
d606 1
a606 1
    stringBuffer.append(TEXT_119);
d608 1
a608 1
    stringBuffer.append(TEXT_120);
d616 1
a616 1
    stringBuffer.append(TEXT_121);
d618 1
a618 1
    stringBuffer.append(TEXT_122);
d622 1
a622 1
    stringBuffer.append(TEXT_123);
d624 1
a624 1
    stringBuffer.append(TEXT_124);
d631 1
a631 1
    stringBuffer.append(TEXT_125);
d637 1
a637 1
    stringBuffer.append(TEXT_126);
d639 1
a639 1
    stringBuffer.append(TEXT_127);
@


1.46
log
@#139843
- VisualIdRegistry corrected
- .option file generated so in future we would be able to switch off info messages by default.
@
text
@d25 122
a146 121
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(View view) {" + NL + "\t\tif (view instanceof Diagram) {" + NL + "\t\t\tif (";
  protected final String TEXT_7 = ".MODEL_ID.equals(view.getType())) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_8 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getVisualID(view.getType());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
  protected final String TEXT_9 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram != null ? diagram.getType() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(String type) {" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(type);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_10 = ".getInstance().logInfo(\"Unable to parse view type as a visualID number: \" + type);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getType(int visualID) {" + NL + "\t\treturn String.valueOf(visualID);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_11 = NL + "\t\tif (";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().isSuperTypeOf(domainElementMetaclass) && isDiagram";
  protected final String TEXT_14 = "((";
  protected final String TEXT_15 = ") domainElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_16 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_17 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, null);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!";
  protected final String TEXT_18 = ".MODEL_ID.equals(containerModelID)";
  protected final String TEXT_19 = "\t\t\t" + NL + "\t\t\t&& !\"";
  protected final String TEXT_20 = "\".equals(containerModelID)";
  protected final String TEXT_21 = NL + "\t\t) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (";
  protected final String TEXT_22 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_23 = ".VISUAL_ID;\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tint nodeVisualID = semanticHint != null ? getVisualID(semanticHint) : -1;" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_24 = NL + "\t\tcase ";
  protected final String TEXT_25 = ".VISUAL_ID:";
  protected final String TEXT_26 = NL + "\t\t\tif (";
  protected final String TEXT_27 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_28 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_29 = NL + "\t\t\tif (";
  protected final String TEXT_30 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_31 = ".VISUAL_ID;" + NL + "\t\t\t} ";
  protected final String TEXT_32 = "\t\t" + NL + "\t\t\tif ((semanticHint == null || ";
  protected final String TEXT_33 = ".VISUAL_ID == nodeVisualID) && ";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "().isSuperTypeOf(domainElementMetaclass) && (domainElement == null || isNode";
  protected final String TEXT_36 = "((";
  protected final String TEXT_37 = ") domainElement))) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_38 = ".VISUAL_ID;" + NL + "\t\t\t} ";
  protected final String TEXT_39 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_40 = "ChildNodeID(domainElement, semanticHint);";
  protected final String TEXT_41 = NL + "\t\tcase ";
  protected final String TEXT_42 = ".VISUAL_ID:";
  protected final String TEXT_43 = NL + "\t\t\tif (";
  protected final String TEXT_44 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_45 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_46 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_47 = "LinkLabelID(semanticHint);";
  protected final String TEXT_48 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_49 = NL + "\t\tif (";
  protected final String TEXT_50 = ".eINSTANCE.get";
  protected final String TEXT_51 = "().isSuperTypeOf(domainElementMetaclass) && (domainElement == null || isLinkWithClass";
  protected final String TEXT_52 = "((";
  protected final String TEXT_53 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_54 = ".VISUAL_ID;" + NL + "\t\t} else ";
  protected final String TEXT_55 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_56 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isDiagram";
  protected final String TEXT_57 = "(";
  protected final String TEXT_58 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_60 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isNode";
  protected final String TEXT_61 = "(";
  protected final String TEXT_62 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_63 = ".matches(element)";
  protected final String TEXT_64 = "true";
  protected final String TEXT_65 = ";" + NL + "\t}\t";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int getUnrecognized";
  protected final String TEXT_67 = "ChildNodeID(EObject domainElement, String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate static int getUnrecognized";
  protected final String TEXT_69 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean isLinkWithClass";
  protected final String TEXT_72 = "(";
  protected final String TEXT_73 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_74 = ".matches(element)";
  protected final String TEXT_75 = "true";
  protected final String TEXT_76 = ";" + NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final ";
  protected final String TEXT_78 = " ";
  protected final String TEXT_79 = " = new ";
  protected final String TEXT_80 = "(";
  protected final String TEXT_81 = "null";
  protected final String TEXT_82 = ".";
  protected final String TEXT_83 = "(\"";
  protected final String TEXT_84 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_85 = ", ";
  protected final String TEXT_86 = ")";
  protected final String TEXT_87 = ".";
  protected final String TEXT_88 = "(\"";
  protected final String TEXT_89 = "\", //$NON-NLS-1$" + NL + "\t";
  protected final String TEXT_90 = ")";
  protected final String TEXT_91 = "new ";
  protected final String TEXT_92 = "(";
  protected final String TEXT_93 = ") {" + NL + "\tprotected Object doEvaluate(Object context, ";
  protected final String TEXT_94 = " env) {\t" + NL + "\t\t";
  protected final String TEXT_95 = " self = (";
  protected final String TEXT_96 = ")context;";
  protected final String TEXT_97 = "\t" + NL + "\t\t";
  protected final String TEXT_98 = " ";
  protected final String TEXT_99 = " = (";
  protected final String TEXT_100 = ")env.get(\"";
  protected final String TEXT_101 = "\"); //$NON-NLS-1$";
  protected final String TEXT_102 = NL + "\t\treturn ";
  protected final String TEXT_103 = ".";
  protected final String TEXT_104 = "(self";
  protected final String TEXT_105 = ", ";
  protected final String TEXT_106 = ");" + NL + "\t}" + NL + "}";
  protected final String TEXT_107 = NL + ");";
  protected final String TEXT_108 = "\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated\t" + NL + "\t */" + NL + "\tstatic class ";
  protected final String TEXT_109 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_110 = " condition;" + NL + "\t\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\t";
  protected final String TEXT_111 = "(";
  protected final String TEXT_112 = " conditionExpression) {\t\t\t" + NL + "\t\t\tthis.condition = conditionExpression;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(EObject object) {" + NL + "\t\t\tObject result = condition.evaluate(object);" + NL + "\t\t\treturn result instanceof Boolean && ((Boolean)result).booleanValue();\t\t\t" + NL + "\t\t}" + NL + "\t}// ";
  protected final String TEXT_113 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private static class ";
  protected final String TEXT_114 = " {";
  protected final String TEXT_115 = NL;
  protected final String TEXT_116 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "private static ";
  protected final String TEXT_117 = " ";
  protected final String TEXT_118 = "(";
  protected final String TEXT_119 = " self";
  protected final String TEXT_120 = ", ";
  protected final String TEXT_121 = " ";
  protected final String TEXT_122 = ") {" + NL + "\t// TODO: implement this method" + NL + "\t// Ensure that you remove @@generated or mark it @@generated NOT" + NL + "\t" + NL + "\tthrow new UnsupportedOperationException(\"No user implementation provided in '";
  protected final String TEXT_123 = "' operation\"); //$NON-NLS-1$" + NL + "}";
  protected final String TEXT_124 = NL + "\t}// ";
  protected final String TEXT_125 = NL + "}" + NL + "\t";
  protected final String TEXT_126 = NL;
d179 1
d186 1
a186 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d190 2
d193 1
a193 1
    stringBuffer.append(TEXT_9);
d195 1
a195 1
    stringBuffer.append(TEXT_10);
d201 1
a201 1
    stringBuffer.append(TEXT_11);
d203 1
a203 1
    stringBuffer.append(TEXT_12);
d205 1
a205 1
    stringBuffer.append(TEXT_13);
d207 1
a207 1
    stringBuffer.append(TEXT_14);
d209 1
a209 1
    stringBuffer.append(TEXT_15);
d211 1
a211 1
    stringBuffer.append(TEXT_16);
d213 1
a213 1
    stringBuffer.append(TEXT_17);
d215 1
a215 1
    stringBuffer.append(TEXT_18);
d223 1
a223 1
    stringBuffer.append(TEXT_19);
d225 1
a225 1
    stringBuffer.append(TEXT_20);
a228 2
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d232 2
d238 1
a238 1
    stringBuffer.append(TEXT_24);
d240 1
a240 1
    stringBuffer.append(TEXT_25);
a246 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
d250 2
a256 2
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(compartment.getEditPartQualifiedClassName()));
d260 2
d272 1
a272 1
    stringBuffer.append(TEXT_32);
d274 1
a274 1
    stringBuffer.append(TEXT_33);
d276 1
a276 1
    stringBuffer.append(TEXT_34);
d278 1
a278 1
    stringBuffer.append(TEXT_35);
d280 1
a280 1
    stringBuffer.append(TEXT_36);
d282 1
a282 1
    stringBuffer.append(TEXT_37);
d284 1
a284 1
    stringBuffer.append(TEXT_38);
d288 1
a288 1
    stringBuffer.append(TEXT_39);
d290 1
a290 1
    stringBuffer.append(TEXT_40);
d297 1
a297 1
    stringBuffer.append(TEXT_41);
d299 1
a299 1
    stringBuffer.append(TEXT_42);
a303 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
d307 2
d310 1
a310 1
    stringBuffer.append(TEXT_46);
d312 1
a312 1
    stringBuffer.append(TEXT_47);
d315 1
a315 1
    stringBuffer.append(TEXT_48);
d325 1
a325 1
    stringBuffer.append(TEXT_49);
d327 1
a327 1
    stringBuffer.append(TEXT_50);
d329 1
a329 1
    stringBuffer.append(TEXT_51);
d331 1
a331 1
    stringBuffer.append(TEXT_52);
d333 1
a333 1
    stringBuffer.append(TEXT_53);
d335 1
a335 1
    stringBuffer.append(TEXT_54);
d340 1
a340 1
    stringBuffer.append(TEXT_55);
d342 1
a342 1
    stringBuffer.append(TEXT_56);
d344 1
a344 1
    stringBuffer.append(TEXT_57);
d346 1
a346 1
    stringBuffer.append(TEXT_58);
d348 1
a348 1
    stringBuffer.append(TEXT_59);
d355 1
a355 1
    stringBuffer.append(TEXT_60);
d357 1
a357 1
    stringBuffer.append(TEXT_61);
d359 1
a359 1
    stringBuffer.append(TEXT_62);
d362 1
a362 1
    stringBuffer.append(TEXT_63);
d364 1
a364 1
    stringBuffer.append(TEXT_64);
d366 1
a366 1
    stringBuffer.append(TEXT_65);
d372 1
a372 1
    stringBuffer.append(TEXT_66);
d374 1
a374 1
    stringBuffer.append(TEXT_67);
d383 1
a383 1
    stringBuffer.append(TEXT_68);
d385 1
a385 1
    stringBuffer.append(TEXT_69);
d387 1
a387 1
    stringBuffer.append(TEXT_70);
d396 1
a396 1
    stringBuffer.append(TEXT_71);
d398 1
a398 1
    stringBuffer.append(TEXT_72);
d400 1
a400 1
    stringBuffer.append(TEXT_73);
d403 1
a403 1
    stringBuffer.append(TEXT_74);
d405 1
a405 1
    stringBuffer.append(TEXT_75);
d407 1
a407 1
    stringBuffer.append(TEXT_76);
d441 1
a441 1
    stringBuffer.append(TEXT_77);
d443 1
a443 1
    stringBuffer.append(TEXT_78);
d445 1
a445 1
    stringBuffer.append(TEXT_79);
d447 1
a447 1
    stringBuffer.append(TEXT_80);
d463 1
a463 1
    stringBuffer.append(TEXT_81);
d472 1
a472 1
    stringBuffer.append(TEXT_82);
d474 1
a474 1
    stringBuffer.append(TEXT_83);
d476 1
a476 1
    stringBuffer.append(TEXT_84);
d478 1
a478 1
    stringBuffer.append(TEXT_85);
d480 1
a480 1
    stringBuffer.append(TEXT_86);
d485 1
a485 1
    stringBuffer.append(TEXT_87);
d487 1
a487 1
    stringBuffer.append(TEXT_88);
d489 1
a489 1
    stringBuffer.append(TEXT_89);
d491 1
a491 1
    stringBuffer.append(TEXT_90);
d499 1
a499 1
    stringBuffer.append(TEXT_91);
d501 1
a501 1
    stringBuffer.append(TEXT_92);
d503 1
a503 1
    stringBuffer.append(TEXT_93);
a504 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName(evalCtxQualifiedName));
d508 2
d516 1
a516 1
    stringBuffer.append(TEXT_97);
d518 1
a518 1
    stringBuffer.append(TEXT_98);
d520 1
a520 1
    stringBuffer.append(TEXT_99);
d522 1
a522 1
    stringBuffer.append(TEXT_100);
d524 1
a524 1
    stringBuffer.append(TEXT_101);
d526 1
a526 1
    stringBuffer.append(TEXT_102);
d530 1
a530 1
    stringBuffer.append(TEXT_103);
d534 1
a534 1
    stringBuffer.append(TEXT_104);
d537 1
a537 1
    stringBuffer.append(TEXT_105);
d540 1
a540 1
    stringBuffer.append(TEXT_106);
d543 1
a543 1
    stringBuffer.append(TEXT_107);
d548 1
a548 1
    stringBuffer.append(TEXT_108);
d550 1
a550 1
    stringBuffer.append(TEXT_109);
d552 1
a552 1
    stringBuffer.append(TEXT_110);
d554 1
a554 1
    stringBuffer.append(TEXT_111);
d556 1
a556 1
    stringBuffer.append(TEXT_112);
d561 1
a561 1
    stringBuffer.append(TEXT_113);
d563 1
a563 1
    stringBuffer.append(TEXT_114);
d571 1
a571 1
    stringBuffer.append(TEXT_115);
d591 1
a591 1
    stringBuffer.append(TEXT_116);
d593 1
a593 1
    stringBuffer.append(TEXT_117);
d595 1
a595 1
    stringBuffer.append(TEXT_118);
d597 1
a597 1
    stringBuffer.append(TEXT_119);
d605 1
a605 1
    stringBuffer.append(TEXT_120);
d607 1
a607 1
    stringBuffer.append(TEXT_121);
d611 1
a611 1
    stringBuffer.append(TEXT_122);
d613 1
a613 1
    stringBuffer.append(TEXT_123);
d620 1
a620 1
    stringBuffer.append(TEXT_124);
d626 1
a626 1
    stringBuffer.append(TEXT_125);
d628 1
a628 1
    stringBuffer.append(TEXT_126);
@


1.45
log
@#133836 Creating a child node without a label causes error
@
text
@d42 1
a42 1
  protected final String TEXT_23 = ".VISUAL_ID;\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tint nodeVisualID = getVisualID(semanticHint);" + NL + "\t\tswitch (containerVisualID) {";
@


1.44
log
@#138696 Adapt VisualIDRegistry.javajet to use common expressions templates
@
text
@d240 1
a240 1
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext() && !node.isListContainerEntry();) {
@


1.43
log
@Using "isSuperTypeOf" instead of EClasses comparision in Visual ID registry.
@
text
@d6 1
d96 50
a145 12
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * Element matching condition for ";
  protected final String TEXT_78 = "." + NL + "\t * <pre>language: ";
  protected final String TEXT_79 = "</pre>\t" + NL + "\t * <pre>body    : ";
  protected final String TEXT_80 = "</pre>" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static final Matcher ";
  protected final String TEXT_81 = " = new Matcher(\"";
  protected final String TEXT_82 = "\");";
  protected final String TEXT_83 = "\t" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated\t" + NL + "\t */" + NL + "\tstatic class Matcher {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tprivate ";
  protected final String TEXT_84 = " condition;" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t" + NL + "\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\tbody = expressionBody;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t\t" + NL + "\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\ttry {" + NL + "\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t";
  protected final String TEXT_85 = ".getInstance().logError(null, e);" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t" + NL + "\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\tcondition = new ";
  protected final String TEXT_86 = "(body, evalContext);" + NL + "\t\t\t}" + NL + "\t\t\tif(condition != null) {" + NL + "\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t}" + NL + "\t\t\treturn Boolean.FALSE;" + NL + "\t\t}" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated\t" + NL + "\t\t */\t\t\t\t\t" + NL + "\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\tif(value == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t}" + NL + "\t\t\treturn Boolean.FALSE;" + NL + "\t\t}" + NL + "\t} // end of Matcher";
  protected final String TEXT_87 = "\t\t" + NL + "" + NL + "}" + NL + "\t";
  protected final String TEXT_88 = NL;
d169 5
d408 5
d414 1
a414 1
for (Iterator it = genDiagram.eAllContents(); it.hasNext();) {
d425 1
a425 1
	if (modelFacet == null || modelFacet.getModelElementSelector() == null) {
d430 6
d438 2
a440 2
    stringBuffer.append(TEXT_78);
    stringBuffer.append(selector.getLanguage());
d442 1
a442 1
    stringBuffer.append(selector.getBody());
d444 15
a458 1
    stringBuffer.append(id);
a459 2
    stringBuffer.append(selector.getBody());
    stringBuffer.append(TEXT_82);
d461 5
a465 1
}
d467 3
a469 1
if(selectorCounter > 0) { 
d471 1
a471 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
d473 1
a473 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d475 1
a475 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
d477 60
d538 85
a622 1
    stringBuffer.append(TEXT_87);
d624 1
a624 1
    stringBuffer.append(TEXT_88);
@


1.42
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d28 1
a28 1
  protected final String TEXT_10 = ".getInstance().logInfo(\"Unable to parse view type as a visualID number: \" + type);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getType(int visualID) {" + NL + "\t\treturn String.valueOf(visualID);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
d31 1
a31 1
  protected final String TEXT_13 = "().equals(domainElementMetaclass) && (domainElement == null || isDiagram";
d33 1
a33 1
  protected final String TEXT_15 = ") domainElement))) {" + NL + "\t\t\treturn ";
d53 1
a53 1
  protected final String TEXT_35 = "().equals(domainElementMetaclass) && (domainElement == null || isNode";
d69 1
a69 1
  protected final String TEXT_51 = "().equals(domainElementMetaclass) && (domainElement == null || isLinkWithClass";
@


1.41
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d24 61
a84 61
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_7 = " INSTANCE = new ";
  protected final String TEXT_8 = "();" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(View view) {" + NL + "\t\tif (view instanceof Diagram) {" + NL + "\t\t\tif (";
  protected final String TEXT_9 = ".MODEL_ID.equals(view.getType())) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_10 = ".VISUAL_ID;" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn getVisualID(view.getType());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
  protected final String TEXT_11 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram != null ? diagram.getType() : null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static int getVisualID(String type) {" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(type);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_12 = ".getInstance().logInfo(\"Unable to parse view type as a visualID number: \" + type);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getType(int visualID) {" + NL + "\t\treturn String.valueOf(visualID);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_13 = NL + "\t\tif (";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "().equals(domainElementMetaclass) && (domainElement == null || isDiagram";
  protected final String TEXT_16 = "((";
  protected final String TEXT_17 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_18 = ".VISUAL_ID;" + NL + "\t\t}";
  protected final String TEXT_19 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, null);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!";
  protected final String TEXT_20 = ".MODEL_ID.equals(containerModelID)";
  protected final String TEXT_21 = "\t\t\t" + NL + "\t\t\t&& !\"";
  protected final String TEXT_22 = "\".equals(containerModelID)";
  protected final String TEXT_23 = NL + "\t\t) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (";
  protected final String TEXT_24 = ".MODEL_ID.equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_25 = ".VISUAL_ID;\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tint nodeVisualID = getVisualID(semanticHint);" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_26 = NL + "\t\tcase ";
  protected final String TEXT_27 = ".VISUAL_ID:";
  protected final String TEXT_28 = NL + "\t\t\tif (";
  protected final String TEXT_29 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_30 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_31 = NL + "\t\t\tif (";
  protected final String TEXT_32 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_33 = ".VISUAL_ID;" + NL + "\t\t\t} ";
  protected final String TEXT_34 = "\t\t" + NL + "\t\t\tif ((semanticHint == null || ";
  protected final String TEXT_35 = ".VISUAL_ID == nodeVisualID) && ";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "().equals(domainElementMetaclass) && (domainElement == null || isNode";
  protected final String TEXT_38 = "((";
  protected final String TEXT_39 = ") domainElement))) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_40 = ".VISUAL_ID;" + NL + "\t\t\t} ";
  protected final String TEXT_41 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_42 = "ChildNodeID(domainElement, semanticHint);";
  protected final String TEXT_43 = NL + "\t\tcase ";
  protected final String TEXT_44 = ".VISUAL_ID:";
  protected final String TEXT_45 = NL + "\t\t\tif (";
  protected final String TEXT_46 = ".VISUAL_ID == nodeVisualID) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_47 = ".VISUAL_ID;" + NL + "\t\t\t}";
  protected final String TEXT_48 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_49 = "LinkLabelID(semanticHint);";
  protected final String TEXT_50 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_51 = NL + "\t\tif (";
  protected final String TEXT_52 = ".eINSTANCE.get";
  protected final String TEXT_53 = "().equals(domainElementMetaclass) && (domainElement == null || isLinkWithClass";
  protected final String TEXT_54 = "((";
  protected final String TEXT_55 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_56 = ".VISUAL_ID;" + NL + "\t\t} else ";
  protected final String TEXT_57 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_58 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_59 = "(";
  protected final String TEXT_60 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_61 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_63 = "(";
  protected final String TEXT_64 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_65 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
d86 1
a86 1
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
d88 2
a89 2
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
d91 15
a105 15
  protected final String TEXT_73 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_74 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_76 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_77 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_78 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_79 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_80 = " = new Matcher(\"";
  protected final String TEXT_81 = "\");";
  protected final String TEXT_82 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_83 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_84 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_85 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_86 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_87 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
d140 1
a140 1
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
d142 1
a142 1
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
d144 1
a144 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a147 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_12);
d153 4
d158 1
a158 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d160 1
a160 1
    stringBuffer.append(classifierAccessorName);
d162 1
a162 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d164 1
a164 1
    stringBuffer.append(interfaceName);
a167 4
    }
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_20);
d175 1
a175 1
    stringBuffer.append(TEXT_21);
d177 1
a177 1
    stringBuffer.append(TEXT_22);
d181 1
a181 1
    stringBuffer.append(TEXT_23);
d183 1
a183 1
    stringBuffer.append(TEXT_24);
d185 1
a185 1
    stringBuffer.append(TEXT_25);
d190 1
a190 1
    stringBuffer.append(TEXT_26);
d192 1
a192 1
    stringBuffer.append(TEXT_27);
d199 1
a199 1
    stringBuffer.append(TEXT_28);
d201 1
a201 1
    stringBuffer.append(TEXT_29);
d203 1
a203 1
    stringBuffer.append(TEXT_30);
d209 1
a209 1
    stringBuffer.append(TEXT_31);
d211 1
a211 1
    stringBuffer.append(TEXT_32);
d213 1
a213 1
    stringBuffer.append(TEXT_33);
d224 1
a224 1
    stringBuffer.append(TEXT_34);
d226 1
a226 1
    stringBuffer.append(TEXT_35);
d228 1
a228 1
    stringBuffer.append(TEXT_36);
d230 1
a230 1
    stringBuffer.append(TEXT_37);
d232 1
a232 1
    stringBuffer.append(TEXT_38);
d234 1
a234 1
    stringBuffer.append(TEXT_39);
d236 1
a236 1
    stringBuffer.append(TEXT_40);
d240 1
a240 1
    stringBuffer.append(TEXT_41);
d242 1
a242 1
    stringBuffer.append(TEXT_42);
d247 1
d249 1
a249 1
    stringBuffer.append(TEXT_43);
d251 1
a251 1
    stringBuffer.append(TEXT_44);
d253 2
a254 2
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
d256 4
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
d266 1
a267 4
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_49);
    }
    stringBuffer.append(TEXT_50);
d277 1
a277 1
    stringBuffer.append(TEXT_51);
d279 1
a279 1
    stringBuffer.append(TEXT_52);
d281 1
a281 1
    stringBuffer.append(TEXT_53);
d283 1
a283 1
    stringBuffer.append(TEXT_54);
d285 1
a285 1
    stringBuffer.append(TEXT_55);
d287 1
a287 1
    stringBuffer.append(TEXT_56);
d292 1
a292 1
    stringBuffer.append(TEXT_57);
d294 1
a294 1
    stringBuffer.append(TEXT_58);
d296 1
a296 1
    stringBuffer.append(TEXT_59);
d298 1
a298 1
    stringBuffer.append(TEXT_60);
d300 1
a300 1
    stringBuffer.append(TEXT_61);
a301 1
String acceptAllMatcherAccessor = "acceptAllMatcher()"; //$NON-NLS-1$
d304 2
a305 2
	String qualifiedChildNodeInterfaceName = nextNode.getDomainMetaClass().getQualifiedInterfaceName();
	String childNodeSelector = nextNode.getModelFacet() != null && nextNode.getModelFacet().getModelElementSelector() != null ? nextNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d307 4
d312 1
d315 1
a315 1
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
d317 1
a317 1
    stringBuffer.append(childNodeSelector);
d331 3
d345 2
a346 2
		String qualifiedInterfaceName = modelFacet.getMetaClass().getQualifiedInterfaceName();
		String linkSelector = modelFacet.getModelElementSelector() != null ? genLink.getUniqueIdentifier() : acceptAllMatcherAccessor;		
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
d353 2
a354 1
    stringBuffer.append(linkSelector);
d356 4
a363 2
    stringBuffer.append(TEXT_75);
    
d382 1
a382 1
    stringBuffer.append(TEXT_76);
d384 1
a384 1
    stringBuffer.append(TEXT_77);
d386 1
a386 1
    stringBuffer.append(TEXT_78);
d388 1
a388 1
    stringBuffer.append(TEXT_79);
d390 1
a390 1
    stringBuffer.append(TEXT_80);
a391 2
    stringBuffer.append(TEXT_81);
    }
d393 4
a396 1
    if(selectorCounter > 0) { 
@


1.40
log
@#137185 Problems with visual ids of some elements
@
text
@d28 3
a30 3
  protected final String TEXT_10 = ";" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(view.getType());" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_11 = ".getInstance().logInfo(\"Unable to parse view type as a visualID number: \" + view.getType());" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
  protected final String TEXT_12 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram != null ? diagram.getType() : null;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
d36 1
a36 1
  protected final String TEXT_18 = ";" + NL + "\t\t}";
d43 1
a43 1
  protected final String TEXT_25 = ";\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
d45 1
a45 1
  protected final String TEXT_27 = ":";
d47 2
a48 2
  protected final String TEXT_29 = ".VISUAL_ID.equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_30 = ";" + NL + "\t\t\t}";
d50 2
a51 2
  protected final String TEXT_32 = ".VISUAL_ID.equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_33 = ";" + NL + "\t\t\t} ";
d53 1
a53 1
  protected final String TEXT_35 = ".VISUAL_ID.equals(semanticHint)) && ";
d58 1
a58 1
  protected final String TEXT_40 = ";" + NL + "\t\t\t} ";
d62 1
a62 1
  protected final String TEXT_44 = ":";
d64 2
a65 2
  protected final String TEXT_46 = ".VISUAL_ID.equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_47 = ";" + NL + "\t\t\t}";
d74 1
a74 1
  protected final String TEXT_56 = ";" + NL + "\t\t} else ";
d146 1
a146 1
    stringBuffer.append(genDiagram.getVisualID());
d148 2
a150 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d166 1
a166 1
    stringBuffer.append(genDiagram.getVisualID());
d188 1
a188 1
    stringBuffer.append(genDiagram.getVisualID());
d195 1
a195 1
    stringBuffer.append(nextContainer.getVisualID());
d206 1
a206 1
    stringBuffer.append(label.getVisualID());
d216 1
a216 1
    stringBuffer.append(compartment.getVisualID());
d239 1
a239 1
    stringBuffer.append(childNode.getVisualID());
d253 1
a253 1
    stringBuffer.append(link.getVisualID());
d262 1
a262 1
    stringBuffer.append(linkLabel.getVisualID());
d288 1
a288 1
    stringBuffer.append(genLink.getVisualID());
@


1.39
log
@#136863 NPE while deleting a number of elements on diagram
@
text
@d29 1
a29 1
  protected final String TEXT_11 = ".getInstance().logError(\"Unable to parse view type as a visualID number: \" + view.getType(), e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static String getModelID(View view) {" + NL + "\t\tView diagram = view.getDiagram();" + NL + "\t\twhile (view != diagram) {" + NL + "\t\t\t";
@


1.38
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d30 1
a30 1
  protected final String TEXT_12 = " annotation = view.getEAnnotation(\"Shortcut\"); //$NON-NLS-1$" + NL + "\t\t\tif (annotation != null) {" + NL + "\t\t\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t\t\t}" + NL + "\t\t\tview = (View) view.eContainer();" + NL + "\t\t}" + NL + "\t\treturn diagram.getType();" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
@


1.37
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d24 1
a24 1
  protected final String TEXT_6 = " {" + NL + "" + NL + "\tpublic static final ";
d26 51
a76 51
  protected final String TEXT_8 = "();" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_9 = NL + "\t\tif (";
  protected final String TEXT_10 = ".eINSTANCE.get";
  protected final String TEXT_11 = "().equals(domainElementMetaclass) && (domainElement == null || isDiagram";
  protected final String TEXT_12 = "((";
  protected final String TEXT_13 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_14 = ";" + NL + "\t\t}";
  protected final String TEXT_15 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, null);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!\"";
  protected final String TEXT_16 = "\".equals(containerModelID)";
  protected final String TEXT_17 = "\t\t\t" + NL + "\t\t\t&& !\"";
  protected final String TEXT_18 = "\".equals(containerModelID)";
  protected final String TEXT_19 = NL + "\t\t) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (\"";
  protected final String TEXT_20 = "\".equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_21 = ";\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ":";
  protected final String TEXT_24 = NL + "\t\t\tif (";
  protected final String TEXT_25 = ".VISUAL_ID.equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_26 = ";" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\tif (";
  protected final String TEXT_28 = ".VISUAL_ID.equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_30 = "\t\t" + NL + "\t\t\tif ((semanticHint == null || ";
  protected final String TEXT_31 = ".VISUAL_ID.equals(semanticHint)) && ";
  protected final String TEXT_32 = ".eINSTANCE.get";
  protected final String TEXT_33 = "().equals(domainElementMetaclass) && (domainElement == null || isNode";
  protected final String TEXT_34 = "((";
  protected final String TEXT_35 = ") domainElement))) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_36 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_37 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_38 = "ChildNodeID(domainElement, semanticHint);";
  protected final String TEXT_39 = NL + "\t\tcase ";
  protected final String TEXT_40 = ":";
  protected final String TEXT_41 = NL + "\t\t\tif (";
  protected final String TEXT_42 = ".VISUAL_ID.equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_43 = ";" + NL + "\t\t\t}";
  protected final String TEXT_44 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_45 = "LinkLabelID(semanticHint);";
  protected final String TEXT_46 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_47 = NL + "\t\tif (";
  protected final String TEXT_48 = ".eINSTANCE.get";
  protected final String TEXT_49 = "().equals(domainElementMetaclass) && (domainElement == null || isLinkWithClass";
  protected final String TEXT_50 = "((";
  protected final String TEXT_51 = ") domainElement))) {" + NL + "\t\t\treturn ";
  protected final String TEXT_52 = ";" + NL + "\t\t} else ";
  protected final String TEXT_53 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_54 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_55 = "(";
  protected final String TEXT_56 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_57 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_58 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
d78 29
a106 32
  protected final String TEXT_60 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_61 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_63 = "ChildNodeID(EObject domainElement, String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_64 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_65 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_68 = "(";
  protected final String TEXT_69 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_70 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_74 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_77 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_78 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_79 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_80 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_81 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_82 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_83 = " = new Matcher(\"";
  protected final String TEXT_84 = "\");";
  protected final String TEXT_85 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_86 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_87 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_88 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_89 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_90 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_91 = NL;
d144 8
d157 1
a157 1
    stringBuffer.append(TEXT_9);
d159 1
a159 1
    stringBuffer.append(TEXT_10);
d161 1
a161 1
    stringBuffer.append(TEXT_11);
d163 1
a163 1
    stringBuffer.append(TEXT_12);
d165 1
a165 1
    stringBuffer.append(TEXT_13);
d167 1
a167 1
    stringBuffer.append(TEXT_14);
d169 3
a171 3
    stringBuffer.append(TEXT_15);
    stringBuffer.append(modelID);
    stringBuffer.append(TEXT_16);
d179 1
a179 1
    stringBuffer.append(TEXT_17);
d181 1
a181 1
    stringBuffer.append(TEXT_18);
d185 3
a187 3
    stringBuffer.append(TEXT_19);
    stringBuffer.append(modelID);
    stringBuffer.append(TEXT_20);
d189 1
a189 1
    stringBuffer.append(TEXT_21);
d194 1
a194 1
    stringBuffer.append(TEXT_22);
d196 1
a196 1
    stringBuffer.append(TEXT_23);
d203 1
a203 1
    stringBuffer.append(TEXT_24);
d205 1
a205 1
    stringBuffer.append(TEXT_25);
d207 1
a207 1
    stringBuffer.append(TEXT_26);
d213 1
a213 1
    stringBuffer.append(TEXT_27);
d215 1
a215 1
    stringBuffer.append(TEXT_28);
d217 1
a217 1
    stringBuffer.append(TEXT_29);
d228 1
a228 1
    stringBuffer.append(TEXT_30);
d230 1
a230 1
    stringBuffer.append(TEXT_31);
d232 1
a232 1
    stringBuffer.append(TEXT_32);
d234 1
a234 1
    stringBuffer.append(TEXT_33);
d236 1
a236 1
    stringBuffer.append(TEXT_34);
d238 1
a238 1
    stringBuffer.append(TEXT_35);
d240 1
a240 1
    stringBuffer.append(TEXT_36);
d244 1
a244 1
    stringBuffer.append(TEXT_37);
d246 1
a246 1
    stringBuffer.append(TEXT_38);
d252 1
a252 1
    stringBuffer.append(TEXT_39);
d254 1
a254 1
    stringBuffer.append(TEXT_40);
d259 1
a259 1
    stringBuffer.append(TEXT_41);
d261 1
a261 1
    stringBuffer.append(TEXT_42);
d263 1
a263 1
    stringBuffer.append(TEXT_43);
d265 1
a265 1
    stringBuffer.append(TEXT_44);
d267 1
a267 1
    stringBuffer.append(TEXT_45);
d269 1
a269 1
    stringBuffer.append(TEXT_46);
d279 1
a279 1
    stringBuffer.append(TEXT_47);
d281 1
a281 1
    stringBuffer.append(TEXT_48);
d283 1
a283 1
    stringBuffer.append(TEXT_49);
d285 1
a285 1
    stringBuffer.append(TEXT_50);
d287 1
a287 1
    stringBuffer.append(TEXT_51);
d289 1
a289 1
    stringBuffer.append(TEXT_52);
d294 1
a294 1
    stringBuffer.append(TEXT_53);
d296 1
a296 1
    stringBuffer.append(TEXT_54);
d298 1
a298 1
    stringBuffer.append(TEXT_55);
d300 1
a300 1
    stringBuffer.append(TEXT_56);
d302 1
a302 1
    stringBuffer.append(TEXT_57);
d310 1
a310 1
    stringBuffer.append(TEXT_58);
d312 1
a312 1
    stringBuffer.append(TEXT_59);
d314 1
a314 1
    stringBuffer.append(TEXT_60);
d316 1
a316 1
    stringBuffer.append(TEXT_61);
d322 1
a322 1
    stringBuffer.append(TEXT_62);
d324 1
a324 1
    stringBuffer.append(TEXT_63);
d330 1
a330 1
    stringBuffer.append(TEXT_64);
d332 1
a332 1
    stringBuffer.append(TEXT_65);
d334 1
a334 1
    stringBuffer.append(TEXT_66);
d343 1
a343 1
    stringBuffer.append(TEXT_67);
d345 1
a345 1
    stringBuffer.append(TEXT_68);
d347 1
a347 1
    stringBuffer.append(TEXT_69);
d349 1
a349 1
    stringBuffer.append(TEXT_70);
a353 5
    stringBuffer.append(TEXT_71);
    stringBuffer.append(TEXT_72);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_74);
a354 5
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_78);
d374 1
a374 1
    stringBuffer.append(TEXT_79);
d376 1
a376 1
    stringBuffer.append(TEXT_80);
d378 1
a378 1
    stringBuffer.append(TEXT_81);
d380 1
a380 1
    stringBuffer.append(TEXT_82);
d382 1
a382 1
    stringBuffer.append(TEXT_83);
d384 1
a384 1
    stringBuffer.append(TEXT_84);
d386 1
a386 1
    stringBuffer.append(TEXT_85);
d388 1
a388 1
    stringBuffer.append(TEXT_86);
d390 1
a390 1
    stringBuffer.append(TEXT_87);
d392 1
a392 1
    stringBuffer.append(TEXT_88);
d394 1
a394 1
    stringBuffer.append(TEXT_89);
d396 1
a396 1
    stringBuffer.append(TEXT_90);
d398 1
a398 1
    stringBuffer.append(TEXT_91);
@


1.36
log
@using M6 to generate code.
@
text
@d29 1
a29 1
  protected final String TEXT_11 = "().equals(domainElementMetaclass) && (domainElement != null ? isDiagram";
d31 1
a31 1
  protected final String TEXT_13 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
d33 1
a33 1
  protected final String TEXT_15 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, String semanticHint) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!\"";
d43 1
a43 1
  protected final String TEXT_25 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
d46 1
a46 1
  protected final String TEXT_28 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
d48 62
a109 64
  protected final String TEXT_30 = NL + "\t\t\tif (semanticHint != null && !\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_31 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_32 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_35 = "((";
  protected final String TEXT_36 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_37 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_38 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_39 = "ChildNodeID(domainElement);";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ":";
  protected final String TEXT_42 = NL + "\t\t\tif (";
  protected final String TEXT_43 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_44 = ";" + NL + "\t\t\t}";
  protected final String TEXT_45 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_46 = "LinkLabelID(semanticHint);";
  protected final String TEXT_47 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_48 = NL + "\t\tif (";
  protected final String TEXT_49 = ".eINSTANCE.get";
  protected final String TEXT_50 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_51 = "((";
  protected final String TEXT_52 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_53 = ";" + NL + "\t\t} else ";
  protected final String TEXT_54 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_55 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_56 = "(";
  protected final String TEXT_57 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_58 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_59 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_60 = "(";
  protected final String TEXT_61 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_62 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_63 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_64 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_65 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_67 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_72 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_73 = NL;
  protected final String TEXT_74 = NL;
  protected final String TEXT_75 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_76 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_77 = NL;
  protected final String TEXT_78 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_79 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_80 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_81 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_82 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_83 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_84 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_85 = " = new Matcher(\"";
  protected final String TEXT_86 = "\");";
  protected final String TEXT_87 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_88 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_89 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_90 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_91 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_92 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_93 = NL;
d195 1
a195 2
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
a196 1
			String labelViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d199 1
a199 1
    stringBuffer.append(labelViewId);
a206 1
			String compartmentViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Compartments." + compartment.getSemanticHintFieldName();
d209 1
a209 1
    stringBuffer.append(compartmentViewId);
a216 4
    stringBuffer.append(TEXT_30);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_31);
    	
d223 4
d228 1
a228 1
    stringBuffer.append(semanticPackageInterfaceName);
d230 1
a230 1
    stringBuffer.append(classifierAccessorName);
d232 1
a232 1
    stringBuffer.append(childNode.getUniqueIdentifier());
d234 1
a234 1
    stringBuffer.append(interfaceName);
a235 2
    stringBuffer.append(childNode.getVisualID());
    stringBuffer.append(TEXT_37);
d239 2
a241 2
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_39);
a245 1
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
d247 2
a249 2
    stringBuffer.append(link.getVisualID());
    stringBuffer.append(TEXT_41);
a252 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + linkLabel.getSemanticHintFieldName();
d254 2
d257 1
a257 1
    stringBuffer.append(labelViewId);
d259 1
a259 1
    stringBuffer.append(linkLabel.getVisualID());
d261 1
a261 1
    	}
d263 1
a263 1
    stringBuffer.append(link.getUniqueIdentifier());
a264 2
    }
    stringBuffer.append(TEXT_47);
d274 2
d277 1
a277 1
    stringBuffer.append(semanticPackageInterfaceName);
d279 1
a279 1
    stringBuffer.append(semanticLinkInterfaceName);
d281 1
a281 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d283 1
a283 1
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
a284 2
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_53);
d289 2
d292 1
a292 1
    if (genDiagram.getDomainDiagramElement() != null) {
d294 1
a294 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
a297 2
    }
    stringBuffer.append(TEXT_58);
d305 2
d308 1
a308 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
a311 2
    stringBuffer.append(childNodeSelector);
    stringBuffer.append(TEXT_62);
d317 2
a319 4
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_64);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_65);
d325 1
a325 1
    stringBuffer.append(TEXT_66);
d327 1
a327 1
    stringBuffer.append(TEXT_67);
d329 1
a329 1
    stringBuffer.append(TEXT_68);
d338 1
a338 1
    stringBuffer.append(TEXT_69);
d340 1
a340 1
    stringBuffer.append(TEXT_70);
d342 1
a342 1
    stringBuffer.append(TEXT_71);
d344 1
a344 1
    stringBuffer.append(TEXT_72);
d349 2
d352 1
d355 1
a356 1
    stringBuffer.append(TEXT_76);
d358 1
a359 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_80);
d379 4
d384 2
a386 2
    stringBuffer.append(TEXT_82);
    stringBuffer.append(selector.getLanguage());
d390 1
a390 1
    stringBuffer.append(id);
d392 1
a392 1
    stringBuffer.append(selector.getBody());
d394 1
a394 1
    }
d396 1
a396 1
    if(selectorCounter > 0) { 
d400 1
a400 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d402 1
a402 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
a403 4
    }
    stringBuffer.append(TEXT_92);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_93);
@


1.35
log
@restore generators
@
text
@d115 1
a115 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.34
log
@#134095 do not store compiled templates in cvs
@
text
@d115 1
a115 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.33
log
@Switching to eclipse M6.
@
text
@@


1.32
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d115 1
a115 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.31
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d23 1
a23 1
  protected final String TEXT_5 = NL + "\t" + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
d47 65
a111 80
  protected final String TEXT_29 = ";" + NL + "\t\t\t}  ";
  protected final String TEXT_30 = NL + "\t\t\tif (";
  protected final String TEXT_31 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_32 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_33 = NL + "\t\t\tif (semanticHint != null && !\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_34 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_35 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_38 = "((";
  protected final String TEXT_39 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_40 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_41 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_42 = "ChildNodeID(domainElement);";
  protected final String TEXT_43 = NL + "\t\tcase ";
  protected final String TEXT_44 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_45 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_46 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn -1;";
  protected final String TEXT_47 = NL + "\t\tcase ";
  protected final String TEXT_48 = ":";
  protected final String TEXT_49 = NL + "\t\t\tif (";
  protected final String TEXT_50 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_51 = ";" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_53 = "LinkLabelID(semanticHint);";
  protected final String TEXT_54 = NL + "\t\tcase ";
  protected final String TEXT_55 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_56 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_57 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_58 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_59 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_60 = NL + "\t\tif (";
  protected final String TEXT_61 = ".eINSTANCE.get";
  protected final String TEXT_62 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_63 = "((";
  protected final String TEXT_64 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_65 = ";" + NL + "\t\t} else ";
  protected final String TEXT_66 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_67 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_68 = "(";
  protected final String TEXT_69 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_72 = "(";
  protected final String TEXT_73 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_74 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_75 = NL;
  protected final String TEXT_76 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_77 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_78 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_80 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_82 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_83 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_85 = "(";
  protected final String TEXT_86 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_87 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = NL;
  protected final String TEXT_90 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_91 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_92 = NL;
  protected final String TEXT_93 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_94 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_95 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_96 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_97 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_98 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_99 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_100 = " = new Matcher(\"";
  protected final String TEXT_101 = "\");";
  protected final String TEXT_102 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_103 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_104 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_105 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_106 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_107 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_108 = NL;
d200 1
a200 2
			if (label instanceof ExternalLabel) {
				String labelViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
a207 10
			} else {
				String labelTextViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();

    stringBuffer.append(TEXT_27);
    stringBuffer.append(labelTextViewId);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_29);
    
			}
d211 1
a211 1
			String compartmentId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Compartments." + compartment.getSemanticHintFieldName();
d213 3
a215 3
    stringBuffer.append(TEXT_30);
    stringBuffer.append(compartmentId);
    stringBuffer.append(TEXT_31);
d217 1
a217 1
    stringBuffer.append(TEXT_32);
d222 1
a222 1
    stringBuffer.append(TEXT_33);
d224 1
a224 1
    stringBuffer.append(TEXT_34);
d232 1
a232 1
    stringBuffer.append(TEXT_35);
d234 1
a234 1
    stringBuffer.append(TEXT_36);
d236 1
a236 1
    stringBuffer.append(TEXT_37);
d238 1
a238 1
    stringBuffer.append(TEXT_38);
d240 1
a240 1
    stringBuffer.append(TEXT_39);
d242 1
a242 1
    stringBuffer.append(TEXT_40);
d246 1
a246 1
    stringBuffer.append(TEXT_41);
d248 1
a248 1
    stringBuffer.append(TEXT_42);
a249 19
	if (nextContainer instanceof GenNode) {
		GenNode node = (GenNode) nextContainer;
		String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
			if (label instanceof ExternalLabel) {
				String labelTextViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();

    stringBuffer.append(TEXT_43);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_44);
    stringBuffer.append(labelTextViewId);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_46);
    
			}
		}
	}
d255 1
a255 1
    stringBuffer.append(TEXT_47);
d257 1
a257 1
    stringBuffer.append(TEXT_48);
d261 1
a261 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + linkLabel.getSemanticHintLabelFieldName();
d263 1
a263 1
    stringBuffer.append(TEXT_49);
d265 1
a265 1
    stringBuffer.append(TEXT_50);
d267 3
a269 5
    stringBuffer.append(TEXT_51);
    
	}

    stringBuffer.append(TEXT_52);
d271 3
a273 20
    stringBuffer.append(TEXT_53);
    
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();
		String labelTextViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + linkLabel.getSemanticHintFieldName();

    stringBuffer.append(TEXT_54);
    stringBuffer.append(linkLabel.getVisualID());
    stringBuffer.append(TEXT_55);
    stringBuffer.append(labelTextViewId);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(linkLabel.getVisualID());
    stringBuffer.append(TEXT_57);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_58);
    
	}
}

    stringBuffer.append(TEXT_59);
d283 1
a283 1
    stringBuffer.append(TEXT_60);
d285 1
a285 1
    stringBuffer.append(TEXT_61);
d287 1
a287 1
    stringBuffer.append(TEXT_62);
d289 1
a289 1
    stringBuffer.append(TEXT_63);
d291 1
a291 1
    stringBuffer.append(TEXT_64);
d293 1
a293 1
    stringBuffer.append(TEXT_65);
d298 1
a298 1
    stringBuffer.append(TEXT_66);
d300 1
a300 1
    stringBuffer.append(TEXT_67);
d302 1
a302 1
    stringBuffer.append(TEXT_68);
d304 1
a304 1
    stringBuffer.append(TEXT_69);
d306 1
a306 1
    stringBuffer.append(TEXT_70);
d314 1
a314 1
    stringBuffer.append(TEXT_71);
d316 1
a316 1
    stringBuffer.append(TEXT_72);
d318 1
a318 1
    stringBuffer.append(TEXT_73);
d320 1
a320 1
    stringBuffer.append(TEXT_74);
a322 3

    stringBuffer.append(TEXT_75);
    
d326 1
a326 1
    stringBuffer.append(TEXT_76);
d328 1
a328 1
    stringBuffer.append(TEXT_77);
d330 1
a330 1
    stringBuffer.append(TEXT_78);
a332 1

d336 1
a336 1
    stringBuffer.append(TEXT_79);
d338 3
a340 12
    stringBuffer.append(TEXT_80);
    
	if (link.getLabels().size() > 0) {

    stringBuffer.append(TEXT_81);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_82);
    
	}
}

    stringBuffer.append(TEXT_83);
d349 1
a349 1
    stringBuffer.append(TEXT_84);
d351 1
a351 1
    stringBuffer.append(TEXT_85);
d353 1
a353 1
    stringBuffer.append(TEXT_86);
d355 1
a355 1
    stringBuffer.append(TEXT_87);
d360 3
a362 3
    stringBuffer.append(TEXT_88);
    stringBuffer.append(TEXT_89);
    stringBuffer.append(TEXT_90);
d364 3
a366 3
    stringBuffer.append(TEXT_91);
    stringBuffer.append(TEXT_92);
    stringBuffer.append(TEXT_93);
d368 1
a368 1
    stringBuffer.append(TEXT_94);
d370 1
a370 1
    stringBuffer.append(TEXT_95);
d390 1
a390 1
    stringBuffer.append(TEXT_96);
d392 1
a392 1
    stringBuffer.append(TEXT_97);
d394 1
a394 1
    stringBuffer.append(TEXT_98);
d396 1
a396 1
    stringBuffer.append(TEXT_99);
d398 1
a398 1
    stringBuffer.append(TEXT_100);
d400 1
a400 1
    stringBuffer.append(TEXT_101);
d402 1
a402 1
    stringBuffer.append(TEXT_102);
d404 1
a404 1
    stringBuffer.append(TEXT_103);
d406 1
a406 1
    stringBuffer.append(TEXT_104);
d408 1
a408 1
    stringBuffer.append(TEXT_105);
d410 1
a410 1
    stringBuffer.append(TEXT_106);
d412 1
a412 1
    stringBuffer.append(TEXT_107);
d414 1
a414 1
    stringBuffer.append(TEXT_108);
@


1.30
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@d20 22
a41 22
  protected final String TEXT_2 = NL + "\t" + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " {" + NL + "" + NL + "\tpublic static final ";
  protected final String TEXT_4 = " INSTANCE = new ";
  protected final String TEXT_5 = "();" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_6 = NL + "\t\tif (";
  protected final String TEXT_7 = ".eINSTANCE.get";
  protected final String TEXT_8 = "().equals(domainElementMetaclass) && (domainElement != null ? isDiagram";
  protected final String TEXT_9 = "((";
  protected final String TEXT_10 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_11 = ";" + NL + "\t\t}";
  protected final String TEXT_12 = NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, String semanticHint) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!\"";
  protected final String TEXT_13 = "\".equals(containerModelID)";
  protected final String TEXT_14 = "\t\t\t" + NL + "\t\t\t&& !\"";
  protected final String TEXT_15 = "\".equals(containerModelID)";
  protected final String TEXT_16 = NL + "\t\t) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (\"";
  protected final String TEXT_17 = "\".equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_18 = ";\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_19 = NL + "\t\tcase ";
  protected final String TEXT_20 = ":";
  protected final String TEXT_21 = NL + "\t\t\tif (";
  protected final String TEXT_22 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_23 = ";" + NL + "\t\t\t}";
d44 1
a44 1
  protected final String TEXT_26 = ";" + NL + "\t\t\t}  ";
d47 47
a93 47
  protected final String TEXT_29 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_30 = NL + "\t\t\tif (semanticHint != null && !\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_31 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_32 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_35 = "((";
  protected final String TEXT_36 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_37 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_38 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_39 = "ChildNodeID(domainElement);";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_42 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_43 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn -1;";
  protected final String TEXT_44 = NL + "\t\tcase ";
  protected final String TEXT_45 = ":";
  protected final String TEXT_46 = NL + "\t\t\tif (";
  protected final String TEXT_47 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_48 = ";" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_50 = "LinkLabelID(semanticHint);";
  protected final String TEXT_51 = NL + "\t\tcase ";
  protected final String TEXT_52 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_53 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_54 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_55 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_56 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_57 = NL + "\t\tif (";
  protected final String TEXT_58 = ".eINSTANCE.get";
  protected final String TEXT_59 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_60 = "((";
  protected final String TEXT_61 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_62 = ";" + NL + "\t\t} else ";
  protected final String TEXT_63 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL;
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_65 = "(";
  protected final String TEXT_66 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_69 = "(";
  protected final String TEXT_70 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_71 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_72 = NL;
  protected final String TEXT_73 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_74 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_75 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
d95 12
a106 12
  protected final String TEXT_77 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_79 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_80 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_82 = "(";
  protected final String TEXT_83 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_84 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = NL;
  protected final String TEXT_87 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_88 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
d108 19
a126 16
  protected final String TEXT_90 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_91 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_92 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_93 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_94 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_95 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_96 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_97 = " = new Matcher(\"";
  protected final String TEXT_98 = "\");";
  protected final String TEXT_99 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_100 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_101 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_102 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_103 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_104 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_105 = NL;
a137 1
importManager.emitPackageStatement(stringBuffer);
d140 10
d157 1
a157 1
    stringBuffer.append(TEXT_2);
d159 1
a159 1
    stringBuffer.append(TEXT_3);
d161 1
a161 1
    stringBuffer.append(TEXT_4);
d163 1
a163 1
    stringBuffer.append(TEXT_5);
d169 1
a169 1
    stringBuffer.append(TEXT_6);
d171 1
a171 1
    stringBuffer.append(TEXT_7);
d173 1
a173 1
    stringBuffer.append(TEXT_8);
d175 1
a175 1
    stringBuffer.append(TEXT_9);
d177 1
a177 1
    stringBuffer.append(TEXT_10);
d179 1
a179 1
    stringBuffer.append(TEXT_11);
d181 1
a181 1
    stringBuffer.append(TEXT_12);
d183 1
a183 1
    stringBuffer.append(TEXT_13);
d191 1
a191 1
    stringBuffer.append(TEXT_14);
d193 1
a193 1
    stringBuffer.append(TEXT_15);
d197 1
a197 1
    stringBuffer.append(TEXT_16);
d199 1
a199 1
    stringBuffer.append(TEXT_17);
d201 1
a201 1
    stringBuffer.append(TEXT_18);
d206 1
a206 1
    stringBuffer.append(TEXT_19);
d208 1
a208 1
    stringBuffer.append(TEXT_20);
d218 1
a218 1
    stringBuffer.append(TEXT_21);
d220 1
a220 1
    stringBuffer.append(TEXT_22);
d222 1
a222 1
    stringBuffer.append(TEXT_23);
d227 1
a227 1
    stringBuffer.append(TEXT_24);
d229 1
a229 1
    stringBuffer.append(TEXT_25);
d231 1
a231 1
    stringBuffer.append(TEXT_26);
d239 1
a239 1
    stringBuffer.append(TEXT_27);
d241 1
a241 1
    stringBuffer.append(TEXT_28);
d243 1
a243 1
    stringBuffer.append(TEXT_29);
d248 1
a248 1
    stringBuffer.append(TEXT_30);
d250 1
a250 1
    stringBuffer.append(TEXT_31);
d258 1
a258 1
    stringBuffer.append(TEXT_32);
d260 1
a260 1
    stringBuffer.append(TEXT_33);
d262 1
a262 1
    stringBuffer.append(TEXT_34);
d264 1
a264 1
    stringBuffer.append(TEXT_35);
d266 1
a266 1
    stringBuffer.append(TEXT_36);
d268 1
a268 1
    stringBuffer.append(TEXT_37);
d272 1
a272 1
    stringBuffer.append(TEXT_38);
d274 1
a274 1
    stringBuffer.append(TEXT_39);
d284 1
a284 1
    stringBuffer.append(TEXT_40);
d286 1
a286 1
    stringBuffer.append(TEXT_41);
d288 1
a288 1
    stringBuffer.append(TEXT_42);
d290 1
a290 1
    stringBuffer.append(TEXT_43);
d300 1
a300 1
    stringBuffer.append(TEXT_44);
d302 1
a302 1
    stringBuffer.append(TEXT_45);
d308 1
a308 1
    stringBuffer.append(TEXT_46);
d310 1
a310 1
    stringBuffer.append(TEXT_47);
d312 1
a312 1
    stringBuffer.append(TEXT_48);
d316 1
a316 1
    stringBuffer.append(TEXT_49);
d318 1
a318 1
    stringBuffer.append(TEXT_50);
d324 1
a324 1
    stringBuffer.append(TEXT_51);
d326 1
a326 1
    stringBuffer.append(TEXT_52);
d328 1
a328 1
    stringBuffer.append(TEXT_53);
d330 1
a330 1
    stringBuffer.append(TEXT_54);
d332 1
a332 1
    stringBuffer.append(TEXT_55);
d337 1
a337 1
    stringBuffer.append(TEXT_56);
d347 1
a347 1
    stringBuffer.append(TEXT_57);
d349 1
a349 1
    stringBuffer.append(TEXT_58);
d351 1
a351 1
    stringBuffer.append(TEXT_59);
d353 1
a353 1
    stringBuffer.append(TEXT_60);
d355 1
a355 1
    stringBuffer.append(TEXT_61);
d357 1
a357 1
    stringBuffer.append(TEXT_62);
d362 1
a362 1
    stringBuffer.append(TEXT_63);
d364 1
a364 1
    stringBuffer.append(TEXT_64);
d366 1
a366 1
    stringBuffer.append(TEXT_65);
d368 1
a368 1
    stringBuffer.append(TEXT_66);
d370 1
a370 1
    stringBuffer.append(TEXT_67);
d378 1
a378 1
    stringBuffer.append(TEXT_68);
d380 1
a380 1
    stringBuffer.append(TEXT_69);
d382 1
a382 1
    stringBuffer.append(TEXT_70);
d384 1
a384 1
    stringBuffer.append(TEXT_71);
d388 1
a388 1
    stringBuffer.append(TEXT_72);
d393 1
a393 1
    stringBuffer.append(TEXT_73);
d395 1
a395 1
    stringBuffer.append(TEXT_74);
d397 1
a397 1
    stringBuffer.append(TEXT_75);
d404 1
a404 1
    stringBuffer.append(TEXT_76);
d406 1
a406 1
    stringBuffer.append(TEXT_77);
d410 1
a410 1
    stringBuffer.append(TEXT_78);
d412 1
a412 1
    stringBuffer.append(TEXT_79);
d417 1
a417 1
    stringBuffer.append(TEXT_80);
d426 1
a426 1
    stringBuffer.append(TEXT_81);
d428 1
a428 1
    stringBuffer.append(TEXT_82);
d430 1
a430 1
    stringBuffer.append(TEXT_83);
d432 1
a432 1
    stringBuffer.append(TEXT_84);
a436 4
    stringBuffer.append(TEXT_85);
    stringBuffer.append(TEXT_86);
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d442 4
d447 1
a447 1
    stringBuffer.append(TEXT_92);
d467 1
a467 1
    stringBuffer.append(TEXT_93);
d469 1
a469 1
    stringBuffer.append(TEXT_94);
d471 1
a471 1
    stringBuffer.append(TEXT_95);
d473 1
a473 1
    stringBuffer.append(TEXT_96);
d475 1
a475 1
    stringBuffer.append(TEXT_97);
d477 1
a477 1
    stringBuffer.append(TEXT_98);
d479 1
a479 1
    stringBuffer.append(TEXT_99);
d481 1
a481 1
    stringBuffer.append(TEXT_100);
d483 1
a483 1
    stringBuffer.append(TEXT_101);
d485 1
a485 1
    stringBuffer.append(TEXT_102);
d487 1
a487 1
    stringBuffer.append(TEXT_103);
d489 1
a489 1
    stringBuffer.append(TEXT_104);
d491 1
a491 1
    stringBuffer.append(TEXT_105);
@


1.29
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d108 1
a108 1
  protected final String TEXT_90 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getVisualID(View containerView) {" + NL + "\t\t";
@


1.28
log
@[rdvorak] #128087 - Migrate to EMFT OCL API changes - #125458, 125684
@
text
@d29 2
a30 2
  protected final String TEXT_11 = ";" + NL + "\t\t}" + NL + "\t\treturn getUnrecognizedDiagramID(domainElement);";
  protected final String TEXT_12 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, String semanticHint) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!\"";
d81 13
a93 13
  protected final String TEXT_63 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_64 = "(";
  protected final String TEXT_65 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_67 = "(";
  protected final String TEXT_68 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_69 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_70 = NL;
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_72 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_73 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_75 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
d95 29
a123 27
  protected final String TEXT_77 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_78 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_80 = "(";
  protected final String TEXT_81 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_82 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_86 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_87 = NL;
  protected final String TEXT_88 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_89 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_90 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_91 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_92 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_93 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_94 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_95 = " = new Matcher(\"";
  protected final String TEXT_96 = "\");";
  protected final String TEXT_97 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_98 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_99 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_100 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new ";
  protected final String TEXT_101 = "(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_102 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_103 = NL;
d153 1
a153 1
{
d168 1
a168 3
    
}

d351 2
d354 1
a354 1
    stringBuffer.append(TEXT_64);
d356 3
a358 1
    stringBuffer.append(TEXT_65);
d366 1
a366 1
    stringBuffer.append(TEXT_66);
d368 1
a368 1
    stringBuffer.append(TEXT_67);
d370 1
a370 1
    stringBuffer.append(TEXT_68);
d372 1
a372 1
    stringBuffer.append(TEXT_69);
d376 1
a376 1
    stringBuffer.append(TEXT_70);
d381 1
a381 1
    stringBuffer.append(TEXT_71);
d383 1
a383 1
    stringBuffer.append(TEXT_72);
d385 1
a385 1
    stringBuffer.append(TEXT_73);
d392 1
a392 1
    stringBuffer.append(TEXT_74);
d394 1
a394 1
    stringBuffer.append(TEXT_75);
d398 1
a398 1
    stringBuffer.append(TEXT_76);
d400 1
a400 1
    stringBuffer.append(TEXT_77);
d405 1
a405 1
    stringBuffer.append(TEXT_78);
d414 1
a414 1
    stringBuffer.append(TEXT_79);
d416 1
a416 1
    stringBuffer.append(TEXT_80);
d418 1
a418 1
    stringBuffer.append(TEXT_81);
d420 1
a420 1
    stringBuffer.append(TEXT_82);
a424 2
    stringBuffer.append(TEXT_83);
    stringBuffer.append(TEXT_84);
a425 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d428 1
d430 2
d433 1
a433 1
    stringBuffer.append(TEXT_89);
d435 1
a435 1
    stringBuffer.append(TEXT_90);
d455 1
a455 1
    stringBuffer.append(TEXT_91);
d457 1
a457 1
    stringBuffer.append(TEXT_92);
a458 4
    stringBuffer.append(TEXT_93);
    stringBuffer.append(selector.getBody());
    stringBuffer.append(TEXT_94);
    stringBuffer.append(id);
d462 1
a462 1
    }
d464 1
a464 1
    if(selectorCounter > 0) { 
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
d468 1
a468 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d472 4
d477 1
a477 1
    stringBuffer.append(TEXT_102);
d479 1
a479 1
    stringBuffer.append(TEXT_103);
@


1.27
log
@[rdvorak] #127700 Rename genmodel::ModelElementSelector as a generic GenConstraint element
@
text
@d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OclConstraintCondition"));
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OclConstraintCondition"));
@


1.26
log
@Rollback. Sources should be compatible with stable build of EMFT.
@
text
@d448 1
a448 1
	ModelElementSelector selector = modelFacet.getModelElementSelector();
@


1.25
log
@#127497 Creating diagram file by InitDiagramFileAction in arbitrary location
+ correcting the case of OCL-related classes
@
text
@d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OCLConstraintCondition"));
@


1.24
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d118 4
a121 3
  protected final String TEXT_100 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_101 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_102 = NL;
d466 1
a466 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OclConstraintCondition"));
d470 2
d473 1
a473 1
    stringBuffer.append(TEXT_101);
d475 1
a475 1
    stringBuffer.append(TEXT_102);
@


1.23
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d19 83
a101 83
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "\t" + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " {" + NL + "" + NL + "\tpublic static final ";
  protected final String TEXT_5 = " INSTANCE = new ";
  protected final String TEXT_6 = "();" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_7 = NL + "\t\tif (";
  protected final String TEXT_8 = ".eINSTANCE.get";
  protected final String TEXT_9 = "().equals(domainElementMetaclass) && (domainElement != null ? isDiagram";
  protected final String TEXT_10 = "((";
  protected final String TEXT_11 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_12 = ";" + NL + "\t\t}" + NL + "\t\treturn getUnrecognizedDiagramID(domainElement);";
  protected final String TEXT_13 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, String semanticHint) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tString containerModelID = getModelID(containerView);" + NL + "\t\tif (!\"";
  protected final String TEXT_14 = "\".equals(containerModelID)";
  protected final String TEXT_15 = "\t\t\t" + NL + "\t\t\t&& !\"";
  protected final String TEXT_16 = "\".equals(containerModelID)";
  protected final String TEXT_17 = NL + "\t\t) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tint containerVisualID;" + NL + "\t\tif (\"";
  protected final String TEXT_18 = "\".equals(containerModelID)) {" + NL + "\t\t\tcontainerVisualID = getVisualID(containerView);" + NL + "\t\t} else {" + NL + "\t\t\tif (containerView instanceof Diagram) {" + NL + "\t\t\t\tcontainerVisualID = ";
  protected final String TEXT_19 = ";\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {";
  protected final String TEXT_20 = NL + "\t\tcase ";
  protected final String TEXT_21 = ":";
  protected final String TEXT_22 = NL + "\t\t\tif (";
  protected final String TEXT_23 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_24 = ";" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\tif (";
  protected final String TEXT_26 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_27 = ";" + NL + "\t\t\t}  ";
  protected final String TEXT_28 = NL + "\t\t\tif (";
  protected final String TEXT_29 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_30 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_31 = NL + "\t\t\tif (semanticHint != null && !\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_32 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_33 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_36 = "((";
  protected final String TEXT_37 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_38 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_39 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_40 = "ChildNodeID(domainElement);";
  protected final String TEXT_41 = NL + "\t\tcase ";
  protected final String TEXT_42 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_43 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_44 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn -1;";
  protected final String TEXT_45 = NL + "\t\tcase ";
  protected final String TEXT_46 = ":";
  protected final String TEXT_47 = NL + "\t\t\tif (";
  protected final String TEXT_48 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_49 = ";" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_51 = "LinkLabelID(semanticHint);";
  protected final String TEXT_52 = NL + "\t\tcase ";
  protected final String TEXT_53 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_54 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_55 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_56 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_57 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_58 = NL + "\t\tif (";
  protected final String TEXT_59 = ".eINSTANCE.get";
  protected final String TEXT_60 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_61 = "((";
  protected final String TEXT_62 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_63 = ";" + NL + "\t\t} else ";
  protected final String TEXT_64 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_65 = "(";
  protected final String TEXT_66 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_68 = "(";
  protected final String TEXT_69 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_70 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_71 = NL;
  protected final String TEXT_72 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_73 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_74 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_76 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_78 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_79 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_81 = "(";
  protected final String TEXT_82 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_83 = ".matches(element);" + NL + "\t}";
d103 18
a120 19
  protected final String TEXT_85 = NL;
  protected final String TEXT_86 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_87 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_88 = NL;
  protected final String TEXT_89 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_90 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\t";
  protected final String TEXT_91 = ".getInstance().logError(\"Unable to parse \\\"visualID\\\" annotation: \" + visualID, e);" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_92 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_93 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_94 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_95 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_96 = " = new Matcher(\"";
  protected final String TEXT_97 = "\");";
  protected final String TEXT_98 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_99 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_100 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_101 = ".getInstance().logError(null, e);" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_102 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_103 = NL;
d126 1
a126 1
final GenDiagram genDiagram = (GenDiagram) argument;
d128 3
a130 2
List genLinks = genDiagram.getLinks();
Collection allContainers = genDiagram.getAllContainers();
d132 1
a133 2
    stringBuffer.append(genDiagram.getEditorGen().getEditor().getPackageName());
    stringBuffer.append(TEXT_2);
a134 2
ImportUtil importManager = new ImportUtil(genDiagram.getEditorGen().getEditor().getPackageName());

d142 2
a148 2
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
    stringBuffer.append(TEXT_6);
d154 2
d157 1
a157 1
    stringBuffer.append(genDiagram.getMetaPackageName(importManager));
d159 1
a159 1
    stringBuffer.append(classifierAccessorName);
d161 1
a161 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d163 1
a163 1
    stringBuffer.append(interfaceName);
a164 2
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_12);
d168 2
a170 2
    stringBuffer.append(modelID);
    stringBuffer.append(TEXT_14);
d178 2
a180 2
    stringBuffer.append(nextDomainModelName);
    stringBuffer.append(TEXT_16);
d184 2
d187 1
a187 1
    stringBuffer.append(modelID);
a188 2
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_19);
d193 2
a195 2
    stringBuffer.append(nextContainer.getVisualID());
    stringBuffer.append(TEXT_21);
d205 2
d208 1
a208 1
    stringBuffer.append(labelViewId);
a209 2
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_24);
d214 2
d217 1
a217 1
    stringBuffer.append(labelTextViewId);
a218 2
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_27);
d226 2
d229 1
a229 1
    stringBuffer.append(compartmentId);
a230 2
    stringBuffer.append(compartment.getVisualID());
    stringBuffer.append(TEXT_30);
d235 2
a237 2
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_32);
d245 2
d248 1
a248 1
    stringBuffer.append(semanticPackageInterfaceName);
d250 1
a250 1
    stringBuffer.append(classifierAccessorName);
d252 1
a252 1
    stringBuffer.append(childNode.getUniqueIdentifier());
d254 1
a254 1
    stringBuffer.append(interfaceName);
a255 2
    stringBuffer.append(childNode.getVisualID());
    stringBuffer.append(TEXT_38);
d259 2
a261 2
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_40);
d271 2
d274 2
a276 2
    stringBuffer.append(TEXT_42);
    stringBuffer.append(labelTextViewId);
a277 2
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_44);
d287 2
a289 2
    stringBuffer.append(link.getVisualID());
    stringBuffer.append(TEXT_46);
d295 2
d298 1
a298 1
    stringBuffer.append(labelViewId);
a299 2
    stringBuffer.append(linkLabel.getVisualID());
    stringBuffer.append(TEXT_49);
d303 2
a305 2
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_51);
d311 2
d314 2
a316 2
    stringBuffer.append(TEXT_53);
    stringBuffer.append(labelTextViewId);
d318 1
a318 1
    stringBuffer.append(linkLabel.getVisualID());
a319 2
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_56);
d324 1
a324 1
    stringBuffer.append(TEXT_57);
d334 2
d337 1
a337 1
    stringBuffer.append(semanticPackageInterfaceName);
d339 1
a339 1
    stringBuffer.append(semanticLinkInterfaceName);
d341 1
a341 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
a344 2
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_63);
d349 2
d352 1
a352 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
a353 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_66);
d361 2
d364 1
a364 1
    stringBuffer.append(nextNode.getUniqueIdentifier());
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
a367 2
    stringBuffer.append(childNodeSelector);
    stringBuffer.append(TEXT_70);
d371 1
a371 1
    stringBuffer.append(TEXT_71);
d376 2
a380 2
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_74);
d387 2
a389 2
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_76);
d393 2
a395 2
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_78);
d400 1
a400 1
    stringBuffer.append(TEXT_79);
d409 2
d412 1
a412 1
    stringBuffer.append(genLink.getUniqueIdentifier());
d414 1
a414 1
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
a415 2
    stringBuffer.append(linkSelector);
    stringBuffer.append(TEXT_83);
d420 1
d423 1
a424 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
d427 1
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
a430 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_91);
d450 2
d453 1
a453 1
    stringBuffer.append(id);
d455 1
a455 1
    stringBuffer.append(selector.getLanguage());
d457 2
a459 2
    stringBuffer.append(TEXT_95);
    stringBuffer.append(id);
d461 1
a461 1
    stringBuffer.append(selector.getBody());
d463 1
a463 1
    }
d465 1
a465 1
    if(selectorCounter > 0) { 
d467 1
a467 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.query.ocl.conditions.OclConstraintCondition"));
d469 1
a469 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d471 1
a471 1
    }
a472 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_103);
@


1.22
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d133 1
a133 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d136 1
a136 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.21
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d128 1
a128 1
final String modelID = genDiagram.getEditorGen().getDomainGenModel().getModelName();
@


1.20
log
@ImportManager moved to oeg.common
@
text
@a3 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
d127 2
a128 1
GenDiagram genDiagram = (GenDiagram) argument;
a152 2
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
d158 1
a158 1
    stringBuffer.append(semanticPackageInterfaceName);
d172 1
a172 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
d177 1
a177 1
	if (genDiagram.getEMFGenModel().getModelName().equals(nextDomainModelName)) {
d188 1
a188 1
    stringBuffer.append(genDiagram.getEMFGenModel().getModelName());
d244 3
a246 2
		String classifierAccessorName = childNode.getDomainMetaClass().getClassifierAccessorName();
		String interfaceName = importManager.getImportedName(childNode.getDomainMetaClass().getQualifiedInterfaceName());
d332 4
a335 3
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
		String semanticLinkInterfaceName = modelFacet.getMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = modelFacet.getMetaClass().getQualifiedInterfaceName();
d432 1
a432 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
d470 1
a470 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPlugin().getActivatorQualifiedClassName()));
@


1.19
log
@#125893
Logging methods
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.18
log
@rename GenContainerEditPart -> GenContainerBase
@
text
@d109 14
a122 12
  protected final String TEXT_90 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_91 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_92 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_93 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_94 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_95 = " = new Matcher(\"";
  protected final String TEXT_96 = "\");";
  protected final String TEXT_97 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_98 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_99 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_100 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_101 = NL;
d432 2
d453 1
a453 1
    stringBuffer.append(TEXT_91);
d455 1
a455 1
    stringBuffer.append(TEXT_92);
d457 1
a457 1
    stringBuffer.append(TEXT_93);
d459 1
a459 1
    stringBuffer.append(TEXT_94);
d461 1
a461 1
    stringBuffer.append(TEXT_95);
d463 1
a463 1
    stringBuffer.append(TEXT_96);
d465 1
a465 1
    stringBuffer.append(TEXT_97);
d467 1
a467 1
    stringBuffer.append(TEXT_98);
d469 3
a471 1
    stringBuffer.append(TEXT_99);
d473 1
a473 1
    stringBuffer.append(TEXT_100);
d475 1
a475 1
    stringBuffer.append(TEXT_101);
@


1.17
log
@Null could be passed as a semantic hint.
@
text
@d128 1
a128 1
Collection allContainers = genDiagram.getAllContainerEditParts();
d194 1
a194 1
	GenContainerEditPart nextContainer = (GenContainerEditPart) containers.next();
d375 1
a375 1
	GenContainerEditPart nextContainer = (GenContainerEditPart) containers.next();
@


1.16
log
@#124413
Cleaning up the gmfgen model
@
text
@d50 1
a50 1
  protected final String TEXT_31 = NL + "\t\t\tif (!\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
@


1.15
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d128 1
a128 2
Collection allContainers = new LinkedList(genDiagram.getAllContainers());
allContainers.add(genDiagram);
@


1.14
log
@#114178
Create shortcut functionality added
@
text
@d38 19
a56 19
  protected final String TEXT_19 = ";\t\t" + NL + "\t\t\t} else {" + NL + "\t\t\t\treturn -1;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tswitch (containerVisualID) {" + NL + "\t\tcase ";
  protected final String TEXT_20 = ":";
  protected final String TEXT_21 = NL + "\t\t\tif (";
  protected final String TEXT_22 = ".eINSTANCE.get";
  protected final String TEXT_23 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_24 = "((";
  protected final String TEXT_25 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_26 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_27 = NL + "\t\t\treturn getUnrecognizedDiagramChildID(domainElement);";
  protected final String TEXT_28 = NL + "\t\tcase ";
  protected final String TEXT_29 = ":";
  protected final String TEXT_30 = NL + "\t\t\tif (";
  protected final String TEXT_31 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_32 = ";" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\tif (";
  protected final String TEXT_34 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_35 = ";" + NL + "\t\t\t}  ";
  protected final String TEXT_36 = NL + "\t\t\tif (";
  protected final String TEXT_37 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
d58 63
a120 75
  protected final String TEXT_39 = NL + "\t\t\tif (!\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_40 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_41 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_42 = ".eINSTANCE.get";
  protected final String TEXT_43 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_44 = "((";
  protected final String TEXT_45 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_46 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_47 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_48 = "ChildNodeID(domainElement);";
  protected final String TEXT_49 = NL + "\t\tcase ";
  protected final String TEXT_50 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_51 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_52 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn -1;";
  protected final String TEXT_53 = NL + "\t\tcase ";
  protected final String TEXT_54 = ":";
  protected final String TEXT_55 = NL + "\t\t\tif (";
  protected final String TEXT_56 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_57 = ";" + NL + "\t\t\t}";
  protected final String TEXT_58 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_59 = "LinkLabelID(semanticHint);";
  protected final String TEXT_60 = NL + "\t\tcase ";
  protected final String TEXT_61 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_62 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_63 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_64 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_65 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_66 = NL + "\t\tif (";
  protected final String TEXT_67 = ".eINSTANCE.get";
  protected final String TEXT_68 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_69 = "((";
  protected final String TEXT_70 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_71 = ";" + NL + "\t\t} else ";
  protected final String TEXT_72 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_73 = "(";
  protected final String TEXT_74 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_76 = "(";
  protected final String TEXT_77 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_78 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_80 = "(";
  protected final String TEXT_81 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_82 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognizedDiagramChildID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_85 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_86 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_87 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_88 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_89 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_90 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_91 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_92 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_95 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_96 = NL;
  protected final String TEXT_97 = NL;
  protected final String TEXT_98 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String getModelID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_99 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (String) annotation.getDetails().get(\"modelID\"); //$NON-NLS-1$" + NL + "\t}" + NL;
  protected final String TEXT_100 = NL;
  protected final String TEXT_101 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_102 = " annotation = containerView.getEAnnotation(\"ViewIdentifier\"); //$NON-NLS-1$" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"visualID\"); //$NON-NLS-1$" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_103 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_104 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_105 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_106 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_107 = " = new Matcher(\"";
  protected final String TEXT_108 = "\");";
  protected final String TEXT_109 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_110 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_111 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_112 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_113 = NL;
a126 1
List genNodes = genDiagram.getNodes();
d128 2
a129 1
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
a192 23
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_20);
    
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String classifierAccessorName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String interfaceName = importManager.getImportedName(genNode.getDomainMetaClass().getQualifiedInterfaceName());

    stringBuffer.append(TEXT_21);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(classifierAccessorName);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(interfaceName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(genNode.getVisualID());
    stringBuffer.append(TEXT_26);
    
}

    stringBuffer.append(TEXT_27);
d195 1
a195 1
	GenChildContainer nextContainer = (GenChildContainer) containers.next();
d197 1
a197 1
    stringBuffer.append(TEXT_28);
d199 1
a199 1
    stringBuffer.append(TEXT_29);
d209 1
a209 1
    stringBuffer.append(TEXT_30);
d211 1
a211 1
    stringBuffer.append(TEXT_31);
d213 1
a213 1
    stringBuffer.append(TEXT_32);
d218 1
a218 1
    stringBuffer.append(TEXT_33);
d220 1
a220 1
    stringBuffer.append(TEXT_34);
d222 1
a222 1
    stringBuffer.append(TEXT_35);
d230 1
a230 1
    stringBuffer.append(TEXT_36);
d232 1
a232 1
    stringBuffer.append(TEXT_37);
d234 1
a234 1
    stringBuffer.append(TEXT_38);
d239 1
a239 1
    stringBuffer.append(TEXT_39);
d241 1
a241 1
    stringBuffer.append(TEXT_40);
d243 1
a243 1
	for (Iterator childNodes = nextContainer.getChildNodes().iterator(); childNodes.hasNext();) {
d248 1
a248 1
    stringBuffer.append(TEXT_41);
d250 1
a250 1
    stringBuffer.append(TEXT_42);
d252 1
a252 1
    stringBuffer.append(TEXT_43);
d254 1
a254 1
    stringBuffer.append(TEXT_44);
d256 1
a256 1
    stringBuffer.append(TEXT_45);
d258 1
a258 1
    stringBuffer.append(TEXT_46);
d262 1
a262 1
    stringBuffer.append(TEXT_47);
d264 1
a264 1
    stringBuffer.append(TEXT_48);
d274 1
a274 1
    stringBuffer.append(TEXT_49);
d276 1
a276 1
    stringBuffer.append(TEXT_50);
d278 1
a278 1
    stringBuffer.append(TEXT_51);
d280 1
a280 1
    stringBuffer.append(TEXT_52);
d290 1
a290 1
    stringBuffer.append(TEXT_53);
d292 1
a292 1
    stringBuffer.append(TEXT_54);
d298 1
a298 1
    stringBuffer.append(TEXT_55);
d300 1
a300 1
    stringBuffer.append(TEXT_56);
d302 1
a302 1
    stringBuffer.append(TEXT_57);
d306 1
a306 1
    stringBuffer.append(TEXT_58);
d308 1
a308 1
    stringBuffer.append(TEXT_59);
d314 1
a314 1
    stringBuffer.append(TEXT_60);
d316 1
a316 1
    stringBuffer.append(TEXT_61);
d318 1
a318 1
    stringBuffer.append(TEXT_62);
d320 1
a320 1
    stringBuffer.append(TEXT_63);
d322 1
a322 1
    stringBuffer.append(TEXT_64);
d327 1
a327 1
    stringBuffer.append(TEXT_65);
d336 1
a336 1
    stringBuffer.append(TEXT_66);
d338 1
a338 1
    stringBuffer.append(TEXT_67);
d340 1
a340 1
    stringBuffer.append(TEXT_68);
d342 1
a342 1
    stringBuffer.append(TEXT_69);
d344 1
a344 1
    stringBuffer.append(TEXT_70);
d346 1
a346 1
    stringBuffer.append(TEXT_71);
d351 1
a351 1
    stringBuffer.append(TEXT_72);
d353 1
a353 1
    stringBuffer.append(TEXT_73);
d355 1
a355 1
    stringBuffer.append(TEXT_74);
d358 4
a361 4
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String qualifiedNodeInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
	String nodeSelector = genNode.getModelFacet() != null && genNode.getModelFacet().getModelElementSelector() != null ? genNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d363 3
a365 20
    stringBuffer.append(TEXT_75);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName(qualifiedNodeInterfaceName));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(nodeSelector);
    stringBuffer.append(TEXT_78);
    
}

for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer nextContainer = (GenChildContainer) containers.next();
	for (Iterator childNodes = nextContainer.getChildNodes().iterator(); childNodes.hasNext();) {
		GenChildNode nextChildNode = (GenChildNode) childNodes.next();
		String qualifiedChildNodeInterfaceName = nextChildNode.getDomainMetaClass().getQualifiedInterfaceName();
		String childNodeSelector = nextChildNode.getModelFacet() != null && nextChildNode.getModelFacet().getModelElementSelector() != null ? nextChildNode.getUniqueIdentifier() : acceptAllMatcherAccessor;

    stringBuffer.append(TEXT_79);
    stringBuffer.append(nextChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_80);
d367 1
a367 1
    stringBuffer.append(TEXT_81);
d369 1
a369 1
    stringBuffer.append(TEXT_82);
a370 1
	}
d373 1
a373 1
    stringBuffer.append(TEXT_83);
d376 1
a376 1
	GenChildContainer nextContainer = (GenChildContainer) containers.next();
d378 1
a378 1
    stringBuffer.append(TEXT_84);
d380 1
a380 1
    stringBuffer.append(TEXT_85);
d382 1
a382 1
    stringBuffer.append(TEXT_86);
d389 1
a389 1
    stringBuffer.append(TEXT_87);
d391 1
a391 1
    stringBuffer.append(TEXT_88);
d395 1
a395 1
    stringBuffer.append(TEXT_89);
d397 1
a397 1
    stringBuffer.append(TEXT_90);
d402 1
a402 1
    stringBuffer.append(TEXT_91);
d411 1
a411 1
    stringBuffer.append(TEXT_92);
d413 1
a413 1
    stringBuffer.append(TEXT_93);
d415 1
a415 1
    stringBuffer.append(TEXT_94);
d417 1
a417 1
    stringBuffer.append(TEXT_95);
d422 3
a424 3
    stringBuffer.append(TEXT_96);
    stringBuffer.append(TEXT_97);
    stringBuffer.append(TEXT_98);
d426 3
a428 3
    stringBuffer.append(TEXT_99);
    stringBuffer.append(TEXT_100);
    stringBuffer.append(TEXT_101);
d430 1
a430 1
    stringBuffer.append(TEXT_102);
d450 1
a450 1
    stringBuffer.append(TEXT_103);
d452 1
a452 1
    stringBuffer.append(TEXT_104);
d454 1
a454 1
    stringBuffer.append(TEXT_105);
d456 1
a456 1
    stringBuffer.append(TEXT_106);
d458 1
a458 1
    stringBuffer.append(TEXT_107);
d460 1
a460 1
    stringBuffer.append(TEXT_108);
d462 1
a462 1
    stringBuffer.append(TEXT_109);
d464 1
a464 1
    stringBuffer.append(TEXT_110);
d466 1
a466 1
    stringBuffer.append(TEXT_111);
d468 1
a468 1
    stringBuffer.append(TEXT_112);
d470 1
a470 1
    stringBuffer.append(TEXT_113);
@


1.13
log
@#122054 support external node labels (partial fix)
@
text
@d32 17
a48 17
  protected final String TEXT_13 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, String semanticHint) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(containerView, domainElement, domainElementMetaclass, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tint containerVisualID = getVisualID(containerView);" + NL + "\t\tswitch (containerVisualID) {" + NL + "\t\tcase ";
  protected final String TEXT_14 = ":";
  protected final String TEXT_15 = NL + "\t\t\tif (";
  protected final String TEXT_16 = ".eINSTANCE.get";
  protected final String TEXT_17 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_18 = "((";
  protected final String TEXT_19 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_20 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_21 = NL + "\t\t\treturn getUnrecognizedDiagramChildID(domainElement);";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ":";
  protected final String TEXT_24 = NL + "\t\t\tif (";
  protected final String TEXT_25 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_26 = ";" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\tif (";
  protected final String TEXT_28 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ";" + NL + "\t\t\t}  ";
d51 24
a74 24
  protected final String TEXT_32 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_33 = NL + "\t\t\tif (!\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_34 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_35 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_36 = ".eINSTANCE.get";
  protected final String TEXT_37 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_38 = "((";
  protected final String TEXT_39 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_40 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_41 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_42 = "ChildNodeID(domainElement);";
  protected final String TEXT_43 = NL + "\t\tcase ";
  protected final String TEXT_44 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_45 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_46 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn -1;";
  protected final String TEXT_47 = NL + "\t\tcase ";
  protected final String TEXT_48 = ":";
  protected final String TEXT_49 = NL + "\t\t\tif (";
  protected final String TEXT_50 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_51 = ";" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_53 = "LinkLabelID(semanticHint);";
  protected final String TEXT_54 = NL + "\t\tcase ";
  protected final String TEXT_55 = ":" + NL + "\t\t\tif (";
d76 57
a132 48
  protected final String TEXT_57 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_58 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_59 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_60 = NL + "\t\tif (";
  protected final String TEXT_61 = ".eINSTANCE.get";
  protected final String TEXT_62 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_63 = "((";
  protected final String TEXT_64 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_65 = ";" + NL + "\t\t} else ";
  protected final String TEXT_66 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_67 = "(";
  protected final String TEXT_68 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_72 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_73 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_74 = "(";
  protected final String TEXT_75 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_76 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_77 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognizedDiagramChildID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_78 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_79 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_80 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_81 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_82 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_83 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_84 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_85 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_86 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_87 = "(";
  protected final String TEXT_88 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_89 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_90 = NL;
  protected final String TEXT_91 = NL;
  protected final String TEXT_92 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_93 = " annotation = containerView.getEAnnotation(\"VisualID\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"value\");" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_94 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_95 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_96 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_97 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_98 = " = new Matcher(\"";
  protected final String TEXT_99 = "\");";
  protected final String TEXT_100 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_101 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_102 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_103 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_104 = NL;
d152 1
d185 18
d204 3
a206 1
    stringBuffer.append(TEXT_14);
d213 1
a213 1
    stringBuffer.append(TEXT_15);
d215 1
a215 1
    stringBuffer.append(TEXT_16);
d217 1
a217 1
    stringBuffer.append(TEXT_17);
d219 1
a219 1
    stringBuffer.append(TEXT_18);
d221 1
a221 1
    stringBuffer.append(TEXT_19);
d223 1
a223 1
    stringBuffer.append(TEXT_20);
d227 1
a227 1
    stringBuffer.append(TEXT_21);
d232 1
a232 1
    stringBuffer.append(TEXT_22);
d234 1
a234 1
    stringBuffer.append(TEXT_23);
d244 1
a244 1
    stringBuffer.append(TEXT_24);
d246 1
a246 1
    stringBuffer.append(TEXT_25);
d248 1
a248 1
    stringBuffer.append(TEXT_26);
d253 1
a253 1
    stringBuffer.append(TEXT_27);
d255 1
a255 1
    stringBuffer.append(TEXT_28);
d257 1
a257 1
    stringBuffer.append(TEXT_29);
d265 1
a265 1
    stringBuffer.append(TEXT_30);
d267 1
a267 1
    stringBuffer.append(TEXT_31);
d269 1
a269 1
    stringBuffer.append(TEXT_32);
d274 1
a274 1
    stringBuffer.append(TEXT_33);
d276 1
a276 1
    stringBuffer.append(TEXT_34);
d283 1
a283 1
    stringBuffer.append(TEXT_35);
d285 1
a285 1
    stringBuffer.append(TEXT_36);
d287 1
a287 1
    stringBuffer.append(TEXT_37);
d289 1
a289 1
    stringBuffer.append(TEXT_38);
d291 1
a291 1
    stringBuffer.append(TEXT_39);
d293 1
a293 1
    stringBuffer.append(TEXT_40);
d297 1
a297 1
    stringBuffer.append(TEXT_41);
d299 1
a299 1
    stringBuffer.append(TEXT_42);
d309 1
a309 1
    stringBuffer.append(TEXT_43);
d311 1
a311 1
    stringBuffer.append(TEXT_44);
d313 1
a313 1
    stringBuffer.append(TEXT_45);
d315 1
a315 1
    stringBuffer.append(TEXT_46);
d325 1
a325 1
    stringBuffer.append(TEXT_47);
d327 1
a327 1
    stringBuffer.append(TEXT_48);
d333 1
a333 1
    stringBuffer.append(TEXT_49);
d335 1
a335 1
    stringBuffer.append(TEXT_50);
d337 1
a337 1
    stringBuffer.append(TEXT_51);
d341 1
a341 1
    stringBuffer.append(TEXT_52);
d343 1
a343 1
    stringBuffer.append(TEXT_53);
d349 1
a349 1
    stringBuffer.append(TEXT_54);
d351 1
a351 1
    stringBuffer.append(TEXT_55);
d353 1
a353 1
    stringBuffer.append(TEXT_56);
d355 1
a355 1
    stringBuffer.append(TEXT_57);
d357 1
a357 1
    stringBuffer.append(TEXT_58);
d362 1
a362 1
    stringBuffer.append(TEXT_59);
d371 1
a371 1
    stringBuffer.append(TEXT_60);
d373 1
a373 1
    stringBuffer.append(TEXT_61);
d375 1
a375 1
    stringBuffer.append(TEXT_62);
d377 1
a377 1
    stringBuffer.append(TEXT_63);
d379 1
a379 1
    stringBuffer.append(TEXT_64);
d381 1
a381 1
    stringBuffer.append(TEXT_65);
d386 1
a386 1
    stringBuffer.append(TEXT_66);
d388 1
a388 1
    stringBuffer.append(TEXT_67);
d390 1
a390 1
    stringBuffer.append(TEXT_68);
d398 1
a398 1
    stringBuffer.append(TEXT_69);
d400 1
a400 1
    stringBuffer.append(TEXT_70);
d402 1
a402 1
    stringBuffer.append(TEXT_71);
d404 1
a404 1
    stringBuffer.append(TEXT_72);
d415 1
a415 1
    stringBuffer.append(TEXT_73);
d417 1
a417 1
    stringBuffer.append(TEXT_74);
d419 1
a419 1
    stringBuffer.append(TEXT_75);
d421 1
a421 1
    stringBuffer.append(TEXT_76);
d426 1
a426 1
    stringBuffer.append(TEXT_77);
d431 1
a431 1
    stringBuffer.append(TEXT_78);
d433 1
a433 1
    stringBuffer.append(TEXT_79);
d435 1
a435 1
    stringBuffer.append(TEXT_80);
d442 1
a442 1
    stringBuffer.append(TEXT_81);
d444 1
a444 1
    stringBuffer.append(TEXT_82);
d448 1
a448 1
    stringBuffer.append(TEXT_83);
d450 1
a450 1
    stringBuffer.append(TEXT_84);
d455 1
a455 1
    stringBuffer.append(TEXT_85);
d464 1
a464 1
    stringBuffer.append(TEXT_86);
d466 1
a466 1
    stringBuffer.append(TEXT_87);
d468 1
a468 1
    stringBuffer.append(TEXT_88);
d470 1
a470 1
    stringBuffer.append(TEXT_89);
d475 7
a481 3
    stringBuffer.append(TEXT_90);
    stringBuffer.append(TEXT_91);
    stringBuffer.append(TEXT_92);
d483 1
a483 1
    stringBuffer.append(TEXT_93);
d503 1
a503 1
    stringBuffer.append(TEXT_94);
d505 1
a505 1
    stringBuffer.append(TEXT_95);
d507 1
a507 1
    stringBuffer.append(TEXT_96);
d509 1
a509 1
    stringBuffer.append(TEXT_97);
d511 1
a511 1
    stringBuffer.append(TEXT_98);
d513 1
a513 1
    stringBuffer.append(TEXT_99);
d515 1
a515 1
    stringBuffer.append(TEXT_100);
d517 1
a517 1
    stringBuffer.append(TEXT_101);
d519 1
a519 1
    stringBuffer.append(TEXT_102);
d521 1
a521 1
    stringBuffer.append(TEXT_103);
d523 1
a523 1
    stringBuffer.append(TEXT_104);
@


1.12
log
@#121581
Fields for the compartments are named unique.
@
text
@d45 1
a45 1
  protected final String TEXT_26 = ";" + NL + "\t\t\t}  ";
d48 18
a65 18
  protected final String TEXT_29 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_30 = NL + "\t\t\tif (!\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_31 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_32 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_33 = ".eINSTANCE.get";
  protected final String TEXT_34 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_35 = "((";
  protected final String TEXT_36 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_37 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_38 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_39 = "ChildNodeID(domainElement);";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ":";
  protected final String TEXT_42 = NL + "\t\t\tif (";
  protected final String TEXT_43 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_44 = ";" + NL + "\t\t\t}";
  protected final String TEXT_45 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_46 = "LinkLabelID(semanticHint);";
d67 19
a85 19
  protected final String TEXT_48 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_49 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_50 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_51 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_52 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_53 = NL + "\t\tif (";
  protected final String TEXT_54 = ".eINSTANCE.get";
  protected final String TEXT_55 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_56 = "((";
  protected final String TEXT_57 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_58 = ";" + NL + "\t\t} else ";
  protected final String TEXT_59 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}\t" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_60 = "(";
  protected final String TEXT_61 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_62 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_63 = "(";
  protected final String TEXT_64 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_65 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_66 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
d87 37
a123 30
  protected final String TEXT_68 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_69 = ".matches(element);" + NL + "\t}\t";
  protected final String TEXT_70 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognizedDiagramChildID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_71 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_72 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_73 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_74 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_75 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_76 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_77 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_78 = NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_79 = NL + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional " + NL + "\t * conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_80 = "(";
  protected final String TEXT_81 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_82 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_83 = NL;
  protected final String TEXT_84 = NL;
  protected final String TEXT_85 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_86 = " annotation = containerView.getEAnnotation(\"VisualID\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"value\");" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_87 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_88 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_89 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_90 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_91 = " = new Matcher(\"";
  protected final String TEXT_92 = "\");";
  protected final String TEXT_93 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_94 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_95 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_96 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_97 = NL;
d211 2
a212 1
			String labelTextViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + label.getSemanticHintFieldName();
d215 1
a215 1
    stringBuffer.append(labelTextViewId);
d219 11
a229 1
    			
d235 1
a235 1
    stringBuffer.append(TEXT_27);
d237 1
a237 1
    stringBuffer.append(TEXT_28);
d239 1
a239 1
    stringBuffer.append(TEXT_29);
d244 1
a244 1
    stringBuffer.append(TEXT_30);
d246 1
a246 1
    stringBuffer.append(TEXT_31);
d253 1
a253 1
    stringBuffer.append(TEXT_32);
d255 1
a255 1
    stringBuffer.append(TEXT_33);
d257 1
a257 1
    stringBuffer.append(TEXT_34);
d259 1
a259 1
    stringBuffer.append(TEXT_35);
d261 1
a261 1
    stringBuffer.append(TEXT_36);
d263 1
a263 1
    stringBuffer.append(TEXT_37);
d267 1
a267 1
    stringBuffer.append(TEXT_38);
d269 17
a285 1
    stringBuffer.append(TEXT_39);
d287 3
d295 1
a295 1
    stringBuffer.append(TEXT_40);
d297 1
a297 1
    stringBuffer.append(TEXT_41);
d303 1
a303 1
    stringBuffer.append(TEXT_42);
d305 1
a305 1
    stringBuffer.append(TEXT_43);
d307 1
a307 1
    stringBuffer.append(TEXT_44);
d311 1
a311 1
    stringBuffer.append(TEXT_45);
d313 1
a313 1
    stringBuffer.append(TEXT_46);
d319 1
a319 1
    stringBuffer.append(TEXT_47);
d321 1
a321 1
    stringBuffer.append(TEXT_48);
d323 1
a323 1
    stringBuffer.append(TEXT_49);
d325 1
a325 1
    stringBuffer.append(TEXT_50);
d327 1
a327 1
    stringBuffer.append(TEXT_51);
d332 1
a332 1
    stringBuffer.append(TEXT_52);
d341 1
a341 1
    stringBuffer.append(TEXT_53);
d343 1
a343 1
    stringBuffer.append(TEXT_54);
d345 1
a345 1
    stringBuffer.append(TEXT_55);
d347 1
a347 1
    stringBuffer.append(TEXT_56);
d349 1
a349 1
    stringBuffer.append(TEXT_57);
d351 1
a351 1
    stringBuffer.append(TEXT_58);
d356 1
a356 1
    stringBuffer.append(TEXT_59);
d358 1
a358 1
    stringBuffer.append(TEXT_60);
d360 1
a360 1
    stringBuffer.append(TEXT_61);
d368 1
a368 1
    stringBuffer.append(TEXT_62);
d370 1
a370 1
    stringBuffer.append(TEXT_63);
d372 1
a372 1
    stringBuffer.append(TEXT_64);
d374 1
a374 1
    stringBuffer.append(TEXT_65);
d385 1
a385 1
    stringBuffer.append(TEXT_66);
d387 1
a387 1
    stringBuffer.append(TEXT_67);
d389 1
a389 1
    stringBuffer.append(TEXT_68);
d391 1
a391 1
    stringBuffer.append(TEXT_69);
d396 1
a396 1
    stringBuffer.append(TEXT_70);
d401 1
a401 1
    stringBuffer.append(TEXT_71);
d403 1
a403 1
    stringBuffer.append(TEXT_72);
d405 1
a405 1
    stringBuffer.append(TEXT_73);
d412 1
a412 1
    stringBuffer.append(TEXT_74);
d414 1
a414 1
    stringBuffer.append(TEXT_75);
d418 1
a418 1
    stringBuffer.append(TEXT_76);
d420 1
a420 1
    stringBuffer.append(TEXT_77);
d425 1
a425 1
    stringBuffer.append(TEXT_78);
d434 1
a434 1
    stringBuffer.append(TEXT_79);
d436 1
a436 1
    stringBuffer.append(TEXT_80);
d438 1
a438 1
    stringBuffer.append(TEXT_81);
d440 1
a440 1
    stringBuffer.append(TEXT_82);
d445 3
a447 3
    stringBuffer.append(TEXT_83);
    stringBuffer.append(TEXT_84);
    stringBuffer.append(TEXT_85);
d449 1
a449 1
    stringBuffer.append(TEXT_86);
d469 1
a469 1
    stringBuffer.append(TEXT_87);
d471 1
a471 1
    stringBuffer.append(TEXT_88);
d473 1
a473 1
    stringBuffer.append(TEXT_89);
d475 1
a475 1
    stringBuffer.append(TEXT_90);
d477 1
a477 1
    stringBuffer.append(TEXT_91);
d479 1
a479 1
    stringBuffer.append(TEXT_92);
d481 1
a481 1
    stringBuffer.append(TEXT_93);
d483 1
a483 1
    stringBuffer.append(TEXT_94);
d485 1
a485 1
    stringBuffer.append(TEXT_95);
d487 1
a487 1
    stringBuffer.append(TEXT_96);
d489 1
a489 1
    stringBuffer.append(TEXT_97);
@


1.11
log
@#118053
Infinite child mapping hierarchy in .gmfmap
@
text
@d204 1
a204 1
			String labelTextViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelTextId(label);
d215 1
a215 1
			String compartmentId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Compartments." + AccessUtil.getCompartmentId(compartment);
d264 1
a264 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelId(linkLabel);
d280 1
a280 1
		String labelTextViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelTextId(linkLabel);
@


1.10
log
@#116622
Supporting infinite ChildNode hierarchy in InitDiagramFileAction
@
text
@d88 1
a88 1
  protected final String TEXT_69 = ".matches(element);" + NL + "\t}" + NL;
d339 8
a346 5
	List genChildNodes = AccessUtil.getAllChildNodes(genNode);
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String qualifiedChildNodeInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
		String childNodeSelector = genChildNode.getModelFacet() != null && genChildNode.getModelFacet().getModelElementSelector() != null ? genChildNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d349 1
a349 1
    stringBuffer.append(genChildNode.getUniqueIdentifier());
d355 2
a356 1
    	}
@


1.9
log
@#116031 avoid hardcoded class names in templates
@
text
@d21 96
a116 111
  protected final String TEXT_2 = ";";
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + "\t" + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " {" + NL + "" + NL + "\tpublic static final ";
  protected final String TEXT_6 = " INSTANCE = new ";
  protected final String TEXT_7 = "();" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_8 = NL + "\t\tif (";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "().equals(domainElementMetaclass) && (domainElement != null ? isDiagram";
  protected final String TEXT_11 = "((";
  protected final String TEXT_12 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_13 = ";" + NL + "\t\t}" + NL + "\t\treturn getUnrecognizedDiagramID(domainElement);";
  protected final String TEXT_14 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "//================================================================================================================";
  protected final String TEXT_15 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tint containerVisualID = getVisualID(containerView);" + NL + "\t\tswitch (containerVisualID) {" + NL + "\t\tcase ";
  protected final String TEXT_16 = ":";
  protected final String TEXT_17 = NL + "\t\t\tif (";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_20 = "((";
  protected final String TEXT_21 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_22 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_23 = NL + "\t\t\treturn getUnrecognizedDiagramChildID(domainElement);";
  protected final String TEXT_24 = NL + "\t\tcase ";
  protected final String TEXT_25 = ":";
  protected final String TEXT_26 = NL + "\t\t\tif (";
  protected final String TEXT_27 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_28 = ";" + NL + "\t\t\t}  ";
  protected final String TEXT_29 = NL + "\t\t\tif (";
  protected final String TEXT_30 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_31 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_32 = NL + "\t\t\tif (!\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_33 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_34 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_35 = ".eINSTANCE.get";
  protected final String TEXT_36 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_37 = "((";
  protected final String TEXT_38 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_39 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_40 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_41 = "ChildNodeID(domainElement);";
  protected final String TEXT_42 = NL + "\t\tcase ";
  protected final String TEXT_43 = ":";
  protected final String TEXT_44 = NL + "\t\t\tif (";
  protected final String TEXT_45 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_46 = ";" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_48 = "LinkLabelID(semanticHint);";
  protected final String TEXT_49 = NL + "\t\tcase ";
  protected final String TEXT_50 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_51 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_52 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_53 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_54 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_55 = NL;
  protected final String TEXT_56 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_57 = " annotation = containerView.getEAnnotation(\"VisualID\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"value\");" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognizedDiagramChildID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_58 = NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_59 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_60 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_61 = NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_62 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_63 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_64 = NL + "\t" + NL + "//================================================================================================================" + NL + "" + NL + "\t/**" + NL + "\t * @@deprecated" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@deprecated" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_65 = NL + "\t\tif (";
  protected final String TEXT_66 = ".eINSTANCE.get";
  protected final String TEXT_67 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_68 = "((";
  protected final String TEXT_69 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_70 = ";" + NL + "\t\t} else";
  protected final String TEXT_71 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedNodeID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getChildNodeVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getChildNodeVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getChildNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_72 = NL + "\t\tif (";
  protected final String TEXT_73 = ".eINSTANCE.get";
  protected final String TEXT_74 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_75 = "((";
  protected final String TEXT_76 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_77 = ";" + NL + "\t\t} else ";
  protected final String TEXT_78 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedChildNodeID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_79 = NL + "\t\tif (";
  protected final String TEXT_80 = ".eINSTANCE.get";
  protected final String TEXT_81 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_82 = "((";
  protected final String TEXT_83 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_84 = ";" + NL + "\t\t} else ";
  protected final String TEXT_85 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_86 = "(";
  protected final String TEXT_87 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t";
  protected final String TEXT_88 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_89 = "(";
  protected final String TEXT_90 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_91 = ".matches(element);" + NL + "\t}" + NL;
  protected final String TEXT_92 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_93 = "(";
  protected final String TEXT_94 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_95 = ".matches(element);" + NL + "\t}" + NL;
  protected final String TEXT_96 = NL + "\t";
  protected final String TEXT_97 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_98 = "(";
  protected final String TEXT_99 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_100 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_101 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_102 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_103 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_104 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_105 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_106 = " = new Matcher(\"";
  protected final String TEXT_107 = "\");";
  protected final String TEXT_108 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_109 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_110 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_111 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_112 = NL;
d125 1
d130 9
a138 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
d140 1
a140 1
    importManager.markImportLocation(stringBuffer);
a145 2
    stringBuffer.append(genDiagram.getVisualIDRegistryClassName());
    stringBuffer.append(TEXT_7);
d153 2
d156 1
a156 1
    stringBuffer.append(semanticPackageInterfaceName);
d158 1
a158 1
    stringBuffer.append(classifierAccessorName);
d160 1
a160 1
    stringBuffer.append(genDiagram.getUniqueIdentifier());
d162 1
a162 1
    stringBuffer.append(interfaceName);
a163 2
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_13);
d167 2
a170 6
Collection allContainers = AccessUtil.getAllContainers(genDiagram);

    stringBuffer.append(TEXT_15);
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_16);
    
d176 1
a176 1
    stringBuffer.append(TEXT_17);
d178 1
a178 1
    stringBuffer.append(TEXT_18);
d180 1
a180 1
    stringBuffer.append(TEXT_19);
d182 1
a182 1
    stringBuffer.append(TEXT_20);
d184 1
a184 1
    stringBuffer.append(TEXT_21);
d186 1
a186 1
    stringBuffer.append(TEXT_22);
d190 1
a190 1
    stringBuffer.append(TEXT_23);
d195 1
a195 1
    stringBuffer.append(TEXT_24);
d197 1
a197 1
    stringBuffer.append(TEXT_25);
d206 1
a206 1
    stringBuffer.append(TEXT_26);
d208 1
a208 1
    stringBuffer.append(TEXT_27);
d210 1
a210 1
    stringBuffer.append(TEXT_28);
d217 1
a217 1
    stringBuffer.append(TEXT_29);
d219 1
a219 1
    stringBuffer.append(TEXT_30);
d221 1
a221 1
    stringBuffer.append(TEXT_31);
d226 1
a226 1
    stringBuffer.append(TEXT_32);
d228 1
a228 1
    stringBuffer.append(TEXT_33);
d235 1
a235 1
    stringBuffer.append(TEXT_34);
d237 1
a237 1
    stringBuffer.append(TEXT_35);
d239 1
a239 1
    stringBuffer.append(TEXT_36);
d241 1
a241 1
    stringBuffer.append(TEXT_37);
d243 1
a243 1
    stringBuffer.append(TEXT_38);
d245 1
a245 1
    stringBuffer.append(TEXT_39);
d249 1
a249 1
    stringBuffer.append(TEXT_40);
d251 1
a251 1
    stringBuffer.append(TEXT_41);
d258 1
a258 1
    stringBuffer.append(TEXT_42);
d260 1
a260 1
    stringBuffer.append(TEXT_43);
d266 1
a266 1
    stringBuffer.append(TEXT_44);
d268 1
a268 1
    stringBuffer.append(TEXT_45);
d270 1
a270 1
    stringBuffer.append(TEXT_46);
d274 1
a274 1
    stringBuffer.append(TEXT_47);
d276 1
a276 1
    stringBuffer.append(TEXT_48);
d282 4
d289 1
a289 1
    stringBuffer.append(labelTextViewId);
a290 4
    stringBuffer.append(linkLabel.getVisualID());
    stringBuffer.append(TEXT_52);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_53);
d295 1
a295 74
    stringBuffer.append(TEXT_54);
    stringBuffer.append(TEXT_55);
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EAnnotation"));
    stringBuffer.append(TEXT_57);
    
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer nextContainer = (GenChildContainer) containers.next();

    stringBuffer.append(TEXT_58);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_59);
    stringBuffer.append(nextContainer.getUniqueIdentifier());
    stringBuffer.append(TEXT_60);
    
}

for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();

    stringBuffer.append(TEXT_61);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_62);
    stringBuffer.append(link.getUniqueIdentifier());
    stringBuffer.append(TEXT_63);
    
}

    stringBuffer.append(TEXT_64);
    
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_65);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_66);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_67);
    stringBuffer.append(genNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(genNode.getVisualID());
    stringBuffer.append(TEXT_70);
    
}

    stringBuffer.append(TEXT_71);
    
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	List genChildNodes = AccessUtil.getAllChildNodes(genNode);
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_72);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_73);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_74);
    stringBuffer.append(genChildNode.getUniqueIdentifier());
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(genChildNode.getVisualID());
    stringBuffer.append(TEXT_77);
    	}
}

    stringBuffer.append(TEXT_78);
d304 1
a304 1
    stringBuffer.append(TEXT_79);
d306 1
a306 1
    stringBuffer.append(TEXT_80);
d308 1
a308 1
    stringBuffer.append(TEXT_81);
d310 1
a310 1
    stringBuffer.append(TEXT_82);
d312 1
a312 1
    stringBuffer.append(TEXT_83);
d314 1
a314 1
    stringBuffer.append(TEXT_84);
d319 1
a319 1
    stringBuffer.append(TEXT_85);
d321 1
a321 1
    stringBuffer.append(TEXT_86);
d323 1
a323 1
    stringBuffer.append(TEXT_87);
d331 1
a331 1
    stringBuffer.append(TEXT_88);
d333 1
a333 1
    stringBuffer.append(TEXT_89);
d335 1
a335 1
    stringBuffer.append(TEXT_90);
d337 1
a337 1
    stringBuffer.append(TEXT_91);
d345 1
a345 1
    stringBuffer.append(TEXT_92);
d347 1
a347 1
    stringBuffer.append(TEXT_93);
d349 1
a349 1
    stringBuffer.append(TEXT_94);
d351 1
a351 1
    stringBuffer.append(TEXT_95);
d355 30
a384 1
    stringBuffer.append(TEXT_96);
d393 1
a393 1
    stringBuffer.append(TEXT_97);
d395 1
a395 1
    stringBuffer.append(TEXT_98);
d397 1
a397 1
    stringBuffer.append(TEXT_99);
d399 1
a399 1
    stringBuffer.append(TEXT_100);
d404 5
a408 1
    stringBuffer.append(TEXT_101);
d428 1
a428 1
    stringBuffer.append(TEXT_102);
d430 1
a430 1
    stringBuffer.append(TEXT_103);
d432 1
a432 1
    stringBuffer.append(TEXT_104);
d434 1
a434 1
    stringBuffer.append(TEXT_105);
d436 1
a436 1
    stringBuffer.append(TEXT_106);
d438 1
a438 1
    stringBuffer.append(TEXT_107);
d440 1
a440 1
    stringBuffer.append(TEXT_108);
d442 1
a442 1
    stringBuffer.append(TEXT_109);
d444 1
a444 1
    stringBuffer.append(TEXT_110);
d446 1
a446 1
    stringBuffer.append(TEXT_111);
d448 1
a448 1
    stringBuffer.append(TEXT_112);
@


1.8
log
@#115972 generate single class with semantic hints
@
text
@d23 22
a44 22
  protected final String TEXT_4 = NL + "\t" + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class VisualIDRegistry {" + NL + "" + NL + "\tpublic static final VisualIDRegistry INSTANCE = new VisualIDRegistry();" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tif (domainElement == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_5 = NL + "\t\tif (";
  protected final String TEXT_6 = ".eINSTANCE.get";
  protected final String TEXT_7 = "().equals(domainElementMetaclass) && (domainElement != null ? isDiagram";
  protected final String TEXT_8 = "((";
  protected final String TEXT_9 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_10 = ";" + NL + "\t\t}" + NL + "\t\treturn getUnrecognizedDiagramID(domainElement);";
  protected final String TEXT_11 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "//================================================================================================================";
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(View containerView, EObject domainElement, EClass domainElementMetaclass, String semanticHint) {" + NL + "\t\tint containerVisualID = getVisualID(containerView);" + NL + "\t\tswitch (containerVisualID) {" + NL + "\t\tcase ";
  protected final String TEXT_13 = ":";
  protected final String TEXT_14 = NL + "\t\t\tif (";
  protected final String TEXT_15 = ".eINSTANCE.get";
  protected final String TEXT_16 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_17 = "((";
  protected final String TEXT_18 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_19 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_20 = NL + "\t\t\treturn getUnrecognizedDiagramChildID(domainElement);";
  protected final String TEXT_21 = NL + "\t\tcase ";
  protected final String TEXT_22 = ":";
  protected final String TEXT_23 = NL + "\t\t\tif (";
  protected final String TEXT_24 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_25 = ";" + NL + "\t\t\t}  ";
d47 30
a76 30
  protected final String TEXT_28 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_29 = NL + "\t\t\tif (!\"\".equals(semanticHint)) {" + NL + "\t\t\t\treturn getUnrecognized";
  protected final String TEXT_30 = "ChildNodeID(semanticHint);" + NL + "\t\t\t} ";
  protected final String TEXT_31 = "\t\t" + NL + "\t\t\tif (";
  protected final String TEXT_32 = ".eINSTANCE.get";
  protected final String TEXT_33 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_34 = "((";
  protected final String TEXT_35 = ") domainElement) : true)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_36 = ";" + NL + "\t\t\t} ";
  protected final String TEXT_37 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_38 = "ChildNodeID(domainElement);";
  protected final String TEXT_39 = NL + "\t\tcase ";
  protected final String TEXT_40 = ":";
  protected final String TEXT_41 = NL + "\t\t\tif (";
  protected final String TEXT_42 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_43 = ";" + NL + "\t\t\t}";
  protected final String TEXT_44 = NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_45 = "LinkLabelID(semanticHint);";
  protected final String TEXT_46 = NL + "\t\tcase ";
  protected final String TEXT_47 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_48 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_49 = ";" + NL + "\t\t\t}" + NL + "\t\t\treturn getUnrecognized";
  protected final String TEXT_50 = "LinkLabelTextID(semanticHint);";
  protected final String TEXT_51 = NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_52 = NL;
  protected final String TEXT_53 = "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getVisualID(View containerView) {" + NL + "\t\t";
  protected final String TEXT_54 = " annotation = containerView.getEAnnotation(\"VisualID\");" + NL + "\t\tif (annotation == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\tString visualID = (String) annotation.getDetails().get(\"value\");" + NL + "\t\tif (visualID == null) {" + NL + "\t\t\treturn -1;" + NL + "\t\t}" + NL + "\t\ttry {" + NL + "\t\t\treturn Integer.parseInt(visualID);" + NL + "\t\t} catch (NumberFormatException e) {" + NL + "\t\t\te.printStackTrace();\t\t" + NL + "\t\t}" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognizedDiagramChildID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_55 = NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_56 = "ChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_57 = "ChildNodeID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t";
d78 27
a104 27
  protected final String TEXT_59 = "LinkLabelID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */\t" + NL + "\tprivate int getUnrecognized";
  protected final String TEXT_60 = "LinkLabelTextID(String semanticHint) {" + NL + "\t\treturn -1;" + NL + "\t}";
  protected final String TEXT_61 = NL + "\t" + NL + "//================================================================================================================" + NL + "" + NL + "\t/**" + NL + "\t * @@deprecated" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "" + NL + "\t/**" + NL + "\t * @@deprecated" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_62 = NL + "\t\tif (";
  protected final String TEXT_63 = ".eINSTANCE.get";
  protected final String TEXT_64 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_65 = "((";
  protected final String TEXT_66 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_67 = ";" + NL + "\t\t} else";
  protected final String TEXT_68 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedNodeID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getChildNodeVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getChildNodeVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getChildNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_69 = NL + "\t\tif (";
  protected final String TEXT_70 = ".eINSTANCE.get";
  protected final String TEXT_71 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_72 = "((";
  protected final String TEXT_73 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_74 = ";" + NL + "\t\t} else ";
  protected final String TEXT_75 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedChildNodeID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_76 = NL + "\t\tif (";
  protected final String TEXT_77 = ".eINSTANCE.get";
  protected final String TEXT_78 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_79 = "((";
  protected final String TEXT_80 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_81 = ";" + NL + "\t\t} else ";
  protected final String TEXT_82 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_83 = "(";
  protected final String TEXT_84 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t";
  protected final String TEXT_85 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
d106 26
a131 23
  protected final String TEXT_87 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_88 = ".matches(element);" + NL + "\t}" + NL;
  protected final String TEXT_89 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_90 = "(";
  protected final String TEXT_91 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_92 = ".matches(element);" + NL + "\t}" + NL;
  protected final String TEXT_93 = NL + "\t";
  protected final String TEXT_94 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_95 = "(";
  protected final String TEXT_96 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_97 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_98 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_99 = NL + NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_100 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_101 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_102 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_103 = " = new Matcher(\"";
  protected final String TEXT_104 = "\");";
  protected final String TEXT_105 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_106 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_107 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_108 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_109 = NL;
d148 6
d161 1
a161 1
    stringBuffer.append(TEXT_5);
d163 1
a163 1
    stringBuffer.append(TEXT_6);
d165 1
a165 1
    stringBuffer.append(TEXT_7);
d167 1
a167 1
    stringBuffer.append(TEXT_8);
d169 1
a169 1
    stringBuffer.append(TEXT_9);
d171 1
a171 1
    stringBuffer.append(TEXT_10);
d175 1
a175 1
    stringBuffer.append(TEXT_11);
d179 1
a179 1
    stringBuffer.append(TEXT_12);
d181 1
a181 1
    stringBuffer.append(TEXT_13);
d188 1
a188 1
    stringBuffer.append(TEXT_14);
d190 1
a190 1
    stringBuffer.append(TEXT_15);
d192 1
a192 1
    stringBuffer.append(TEXT_16);
d194 1
a194 1
    stringBuffer.append(TEXT_17);
d196 1
a196 1
    stringBuffer.append(TEXT_18);
d198 1
a198 1
    stringBuffer.append(TEXT_19);
d202 1
a202 1
    stringBuffer.append(TEXT_20);
d207 1
a207 1
    stringBuffer.append(TEXT_21);
d209 1
a209 1
    stringBuffer.append(TEXT_22);
d218 1
a218 1
    stringBuffer.append(TEXT_23);
d220 1
a220 1
    stringBuffer.append(TEXT_24);
d222 1
a222 1
    stringBuffer.append(TEXT_25);
d229 1
a229 1
    stringBuffer.append(TEXT_26);
d231 1
a231 1
    stringBuffer.append(TEXT_27);
d233 1
a233 1
    stringBuffer.append(TEXT_28);
d238 1
a238 1
    stringBuffer.append(TEXT_29);
d240 1
a240 1
    stringBuffer.append(TEXT_30);
d247 1
a247 1
    stringBuffer.append(TEXT_31);
d249 1
a249 1
    stringBuffer.append(TEXT_32);
d251 1
a251 1
    stringBuffer.append(TEXT_33);
d253 1
a253 1
    stringBuffer.append(TEXT_34);
d255 1
a255 1
    stringBuffer.append(TEXT_35);
d257 1
a257 1
    stringBuffer.append(TEXT_36);
d261 1
a261 1
    stringBuffer.append(TEXT_37);
d263 1
a263 1
    stringBuffer.append(TEXT_38);
d270 1
a270 1
    stringBuffer.append(TEXT_39);
d272 1
a272 1
    stringBuffer.append(TEXT_40);
d278 1
a278 1
    stringBuffer.append(TEXT_41);
d280 1
a280 1
    stringBuffer.append(TEXT_42);
d282 1
a282 1
    stringBuffer.append(TEXT_43);
d286 1
a286 1
    stringBuffer.append(TEXT_44);
d288 1
a288 1
    stringBuffer.append(TEXT_45);
d294 1
a294 1
    stringBuffer.append(TEXT_46);
d296 1
a296 1
    stringBuffer.append(TEXT_47);
d298 1
a298 1
    stringBuffer.append(TEXT_48);
d300 1
a300 1
    stringBuffer.append(TEXT_49);
d302 1
a302 1
    stringBuffer.append(TEXT_50);
d307 3
a309 3
    stringBuffer.append(TEXT_51);
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
d311 1
a311 1
    stringBuffer.append(TEXT_54);
d316 1
a316 1
    stringBuffer.append(TEXT_55);
d318 1
a318 1
    stringBuffer.append(TEXT_56);
d320 1
a320 1
    stringBuffer.append(TEXT_57);
d327 1
a327 1
    stringBuffer.append(TEXT_58);
d329 1
a329 1
    stringBuffer.append(TEXT_59);
d331 1
a331 1
    stringBuffer.append(TEXT_60);
d335 1
a335 1
    stringBuffer.append(TEXT_61);
d342 1
a342 1
    stringBuffer.append(TEXT_62);
d344 1
a344 1
    stringBuffer.append(TEXT_63);
d346 1
a346 1
    stringBuffer.append(TEXT_64);
d348 1
a348 1
    stringBuffer.append(TEXT_65);
d350 1
a350 1
    stringBuffer.append(TEXT_66);
d352 1
a352 1
    stringBuffer.append(TEXT_67);
d356 1
a356 1
    stringBuffer.append(TEXT_68);
d366 1
a366 1
    stringBuffer.append(TEXT_69);
d368 1
a368 1
    stringBuffer.append(TEXT_70);
d370 1
a370 1
    stringBuffer.append(TEXT_71);
d372 1
a372 1
    stringBuffer.append(TEXT_72);
d374 1
a374 1
    stringBuffer.append(TEXT_73);
d376 1
a376 1
    stringBuffer.append(TEXT_74);
d380 1
a380 1
    stringBuffer.append(TEXT_75);
d389 1
a389 1
    stringBuffer.append(TEXT_76);
d391 1
a391 1
    stringBuffer.append(TEXT_77);
d393 1
a393 1
    stringBuffer.append(TEXT_78);
d395 1
a395 1
    stringBuffer.append(TEXT_79);
d397 1
a397 1
    stringBuffer.append(TEXT_80);
d399 1
a399 1
    stringBuffer.append(TEXT_81);
d404 1
a404 1
    stringBuffer.append(TEXT_82);
d406 1
a406 1
    stringBuffer.append(TEXT_83);
d408 1
a408 1
    stringBuffer.append(TEXT_84);
d416 1
a416 1
    stringBuffer.append(TEXT_85);
d418 1
a418 1
    stringBuffer.append(TEXT_86);
d420 1
a420 1
    stringBuffer.append(TEXT_87);
d422 1
a422 1
    stringBuffer.append(TEXT_88);
d430 1
a430 1
    stringBuffer.append(TEXT_89);
d432 1
a432 1
    stringBuffer.append(TEXT_90);
d434 1
a434 1
    stringBuffer.append(TEXT_91);
d436 1
a436 1
    stringBuffer.append(TEXT_92);
d440 1
a440 1
    stringBuffer.append(TEXT_93);
d449 1
a449 1
    stringBuffer.append(TEXT_94);
d451 1
a451 1
    stringBuffer.append(TEXT_95);
d453 1
a453 1
    stringBuffer.append(TEXT_96);
d455 1
a455 1
    stringBuffer.append(TEXT_97);
d460 1
a460 1
    stringBuffer.append(TEXT_98);
d480 1
a480 1
    stringBuffer.append(TEXT_99);
d482 1
a482 1
    stringBuffer.append(TEXT_100);
d484 1
a484 1
    stringBuffer.append(TEXT_101);
d486 1
a486 1
    stringBuffer.append(TEXT_102);
d488 1
a488 1
    stringBuffer.append(TEXT_103);
d490 1
a490 1
    stringBuffer.append(TEXT_104);
d492 1
a492 1
    stringBuffer.append(TEXT_105);
d494 1
a494 1
    stringBuffer.append(TEXT_106);
d496 1
a496 1
    stringBuffer.append(TEXT_107);
d498 1
a498 1
    stringBuffer.append(TEXT_108);
d500 1
a500 1
    stringBuffer.append(TEXT_109);
@


1.7
log
@#115622 use genDiagram.eAllContents() to iterate over diagram contents instead of using custom iterator
@
text
@d204 1
a204 2
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(node);
			
a205 1
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d207 1
a207 1
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
a215 1
		
a216 1
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d218 1
a218 1
			String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(compartment);
a256 1

d259 1
a259 1
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(link);
a265 1
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d267 1
a267 1
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(linkLabel);
a281 1
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d283 1
a283 1
		String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(linkLabel);
@


1.6
log
@[ashatalin] #115625 fixes compilation problems with initializers
@
text
@d118 1
a118 1
  protected final String TEXT_99 = NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
d461 3
a463 2
for(Iterator it = AccessUtil.getGenEntities(genDiagram); it.hasNext();) {
	GenCommonBase nextElement = (GenCommonBase)it.next();
d465 10
a474 8
	if(nextElement instanceof GenNode) {
		modelFacet = ((GenNode)nextElement).getModelFacet();
	} else if(nextElement instanceof GenLink && 
		((GenLink)nextElement).getModelFacet() instanceof TypeLinkModelFacet) {
		modelFacet = (TypeLinkModelFacet)((GenLink)nextElement).getModelFacet();
	} 
	
	if(modelFacet == null || modelFacet.getModelElementSelector() == null) continue;
d477 1
a477 1
	
d479 1
a479 1
    stringBuffer.append(nextElement.getUniqueIdentifier());
d485 1
a485 1
    stringBuffer.append(nextElement.getUniqueIdentifier());
@


1.5
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d205 1
a205 2
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		
d207 1
d220 1
a264 1
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d271 1
d288 1
@


1.4
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d22 2
a23 2
  protected final String TEXT_3 = NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL;
  protected final String TEXT_4 = NL + "\t" + NL + "/**" + NL + " * This registry is used to determine which type of visual object should be" + NL + " * created for the corresponding Diagram, Node, ChildNode or Link represented " + NL + " * by a domain model object." + NL + " *" + NL + " * @@generated" + NL + " */" + NL + "public class VisualIDRegistry {" + NL + "" + NL + "\tpublic static final VisualIDRegistry INSTANCE = new VisualIDRegistry();" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getDiagramVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getDiagramVisualID(EObject domainElement, EClass domainElementMetaclass) {";
d29 100
a128 49
  protected final String TEXT_10 = ";" + NL + "\t\t}" + NL + "\t\treturn getUnrecognizedDiagramID(domainElement);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedDiagramID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getNodeVisualID(domainElement, domainElementMetaclass);" + NL + "" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_11 = NL + "\t\tif (";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().equals(domainElementMetaclass) && (domainElement != null ? isNode";
  protected final String TEXT_14 = "((";
  protected final String TEXT_15 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_16 = ";" + NL + "\t\t} else";
  protected final String TEXT_17 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedNodeID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getChildNodeVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getChildNodeVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getChildNodeVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_18 = NL + "\t\tif (";
  protected final String TEXT_19 = ".eINSTANCE.get";
  protected final String TEXT_20 = "().equals(domainElementMetaclass) && (domainElement != null ? isChildNode";
  protected final String TEXT_21 = "((";
  protected final String TEXT_22 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_23 = ";" + NL + "\t\t} else ";
  protected final String TEXT_24 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedChildNodeID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedChildNodeID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement) {" + NL + "\t\tEClass domainElementMetaclass = domainElement.eClass();" + NL + "\t\treturn getLinkWithClassVisualID(domainElement, domainElementMetaclass);" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int getLinkWithClassVisualID(EObject domainElement, EClass domainElementMetaclass) {";
  protected final String TEXT_25 = NL + "\t\tif (";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "().equals(domainElementMetaclass) && (domainElement != null ? isLinkWithClass";
  protected final String TEXT_28 = "((";
  protected final String TEXT_29 = ") domainElement) : true)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_30 = ";" + NL + "\t\t} else ";
  protected final String TEXT_31 = NL + "\t\t{" + NL + "\t\t\treturn getUnrecognizedLinkWithClassID(domainElement);" + NL + "\t\t}" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to handle some specific" + NL + "\t * situations not covered by default logic." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate int getUnrecognizedLinkWithClassID(EObject domainElement) {" + NL + "\t\treturn -1;" + NL + "\t}" + NL + "\t\t" + NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_32 = "(";
  protected final String TEXT_33 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t\t";
  protected final String TEXT_34 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_35 = "(";
  protected final String TEXT_36 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_37 = ".matches(element);" + NL + "\t}" + NL;
  protected final String TEXT_38 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_41 = ".matches(element);" + NL + "\t}" + NL;
  protected final String TEXT_42 = NL + "\t";
  protected final String TEXT_43 = NL + "\t/**" + NL + "\t * User can change implementation of this method to check some additional conditions here." + NL + "\t *" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isLinkWithClass";
  protected final String TEXT_44 = "(";
  protected final String TEXT_45 = " element) {" + NL + "\t\treturn ElementSelectors.";
  protected final String TEXT_46 = ".matches(element);" + NL + "\t}";
  protected final String TEXT_47 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static class ElementSelectors {\t";
  protected final String TEXT_48 = NL + "\t\t/**" + NL + "\t\t * Element matching condition for ";
  protected final String TEXT_49 = "." + NL + "\t\t * <pre>language: ";
  protected final String TEXT_50 = "</pre>\t" + NL + "\t\t * <pre>body    : ";
  protected final String TEXT_51 = "</pre>" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate static final Matcher ";
  protected final String TEXT_52 = " = new Matcher(\"";
  protected final String TEXT_53 = "\");";
  protected final String TEXT_54 = NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprivate ElementSelectors() {" + NL + "\t\t}";
  protected final String TEXT_55 = "\t\t\t" + NL + "\t\t/**" + NL + "\t\t* @@generated\t" + NL + "\t\t*/" + NL + "\t\tstatic class Matcher {" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate EClass evalContext;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate ";
  protected final String TEXT_56 = " condition;" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tprivate String body;\t\t" + NL + "\t\t\t\t\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t" + NL + "\t\t\tMatcher(String expressionBody) {\t\t\t" + NL + "\t\t\t\tbody = expressionBody;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t\t" + NL + "\t\t\tboolean matches(EObject object) {\t\t" + NL + "\t\t\t\ttry {" + NL + "\t\t\t\t\tBoolean result = (object != null) ? evaluate(object) : Boolean.FALSE;" + NL + "\t\t\t\t\treturn result.booleanValue();" + NL + "\t\t\t\t} catch(IllegalArgumentException e) {" + NL + "\t\t\t\t\t// TODO - add log entry" + NL + "\t\t\t\t\te.printStackTrace();" + NL + "\t\t\t\t\treturn false;" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t" + NL + "\t\t\tprivate Boolean evaluate(EObject context) {" + NL + "\t\t\t\tthis.evalContext = context.eClass();" + NL + "\t\t\t\tif(condition == null) {\t\t\t\t\t" + NL + "\t\t\t\t\tcondition = new OclConstraintCondition(body, evalContext);" + NL + "\t\t\t\t}" + NL + "\t\t\t\tif(condition != null) {" + NL + "\t\t\t\t\treturn booleanCast(condition.evaluate(context));" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t" + NL + "\t\t\t/**" + NL + "\t\t\t* @@generated\t" + NL + "\t\t\t*/\t\t\t\t\t" + NL + "\t\t\tprivate static Boolean booleanCast(Object value) {" + NL + "\t\t\t\tif(value == null) {" + NL + "\t\t\t\t\treturn null;" + NL + "\t\t\t\t} else if(value instanceof Boolean) {" + NL + "\t\t\t\t\t return (Boolean)value;\t" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn Boolean.FALSE;" + NL + "\t\t\t}" + NL + "\t\t} // end of Matcher";
  protected final String TEXT_57 = "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tstatic class AcceptAllMatcher {" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t" + NL + "\t\t\tstatic final AcceptAllMatcher INSTANCE = new AcceptAllMatcher();" + NL + "\t\t\t/**" + NL + "\t\t\t * @@generated" + NL + "\t\t\t */\t\t\t\t\t" + NL + "\t\t\tboolean matches(Object element) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */\t\t" + NL + "\t\tstatic AcceptAllMatcher acceptAllMatcher() {" + NL + "\t\t\treturn AcceptAllMatcher.INSTANCE;" + NL + "\t\t}" + NL + "\t} // end of ElementSelectors" + NL + "}" + NL + "\t";
  protected final String TEXT_58 = NL;
d136 1
d148 3
d155 1
a155 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d159 1
a159 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
d164 169
d338 1
a338 1
    stringBuffer.append(TEXT_11);
d340 1
a340 1
    stringBuffer.append(TEXT_12);
d342 1
a342 1
    stringBuffer.append(TEXT_13);
d344 1
a344 1
    stringBuffer.append(TEXT_14);
d346 1
a346 1
    stringBuffer.append(TEXT_15);
d348 1
a348 1
    stringBuffer.append(TEXT_16);
d352 1
a352 1
    stringBuffer.append(TEXT_17);
d362 1
a362 1
    stringBuffer.append(TEXT_18);
d364 1
a364 1
    stringBuffer.append(TEXT_19);
d366 1
a366 1
    stringBuffer.append(TEXT_20);
d368 1
a368 1
    stringBuffer.append(TEXT_21);
d370 1
a370 1
    stringBuffer.append(TEXT_22);
d372 1
a372 1
    stringBuffer.append(TEXT_23);
d376 1
a376 1
    stringBuffer.append(TEXT_24);
a377 1
List genLinks = genDiagram.getLinks();
d385 1
a385 1
    stringBuffer.append(TEXT_25);
d387 1
a387 1
    stringBuffer.append(TEXT_26);
d389 1
a389 1
    stringBuffer.append(TEXT_27);
d391 1
a391 1
    stringBuffer.append(TEXT_28);
d393 1
a393 1
    stringBuffer.append(TEXT_29);
d395 1
a395 1
    stringBuffer.append(TEXT_30);
d400 1
a400 1
    stringBuffer.append(TEXT_31);
d402 1
a402 1
    stringBuffer.append(TEXT_32);
d404 1
a404 1
    stringBuffer.append(TEXT_33);
d412 1
a412 1
    stringBuffer.append(TEXT_34);
d414 1
a414 1
    stringBuffer.append(TEXT_35);
d416 1
a416 1
    stringBuffer.append(TEXT_36);
d418 1
a418 1
    stringBuffer.append(TEXT_37);
d426 1
a426 1
    stringBuffer.append(TEXT_38);
d428 1
a428 1
    stringBuffer.append(TEXT_39);
d430 1
a430 1
    stringBuffer.append(TEXT_40);
d432 1
a432 1
    stringBuffer.append(TEXT_41);
d436 1
a436 1
    stringBuffer.append(TEXT_42);
d445 1
a445 1
    stringBuffer.append(TEXT_43);
d447 1
a447 1
    stringBuffer.append(TEXT_44);
d449 1
a449 1
    stringBuffer.append(TEXT_45);
d451 1
a451 1
    stringBuffer.append(TEXT_46);
d456 1
a456 1
    stringBuffer.append(TEXT_47);
d473 1
a473 1
    stringBuffer.append(TEXT_48);
d475 1
a475 1
    stringBuffer.append(TEXT_49);
d477 1
a477 1
    stringBuffer.append(TEXT_50);
d479 1
a479 1
    stringBuffer.append(TEXT_51);
d481 1
a481 1
    stringBuffer.append(TEXT_52);
d483 1
a483 1
    stringBuffer.append(TEXT_53);
d485 1
a485 1
    stringBuffer.append(TEXT_54);
d487 1
a487 1
    stringBuffer.append(TEXT_55);
d489 1
a489 1
    stringBuffer.append(TEXT_56);
d491 1
a491 1
    stringBuffer.append(TEXT_57);
d493 1
a493 1
    stringBuffer.append(TEXT_58);
@


1.3
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d132 1
a132 1
	List genChildNodes = genNode.getChildNodes();
d197 1
a197 1
	List genChildNodes = genNode.getChildNodes();
@


1.2
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@d187 1
a187 1
	String nodeSelector = genNode.getModelElementSelector() != null ? genNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d201 1
a201 1
		String childNodeSelector = genChildNode.getModelElementSelector() != null ? genChildNode.getUniqueIdentifier() : acceptAllMatcherAccessor;
d220 1
a220 1
		String linkSelector = genLink.getModelElementSelector() != null ? genLink.getUniqueIdentifier() : acceptAllMatcherAccessor;		
d238 10
a247 5
	GenBaseElement  genElement = nextElement instanceof GenBaseElement ? (GenBaseElement) nextElement : null;
	if(genElement == null || genElement.getModelElementSelector() == null) continue;	
		
	ModelElementSelector selector = genElement.getModelElementSelector();
	if(selector.getBody() == null) continue;
@


1.1
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d55 2
a56 2
  protected final String TEXT_36 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_37 = "(element);" + NL + "\t}" + NL;
d59 2
a60 2
  protected final String TEXT_40 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_41 = "(element);" + NL + "\t}" + NL;
d64 14
a77 4
  protected final String TEXT_45 = " element) {" + NL + "\t\treturn ";
  protected final String TEXT_46 = "(element);" + NL + "\t}";
  protected final String TEXT_47 = NL + "\t\t" + NL + "}" + NL + "\t";
  protected final String TEXT_48 = NL;
d183 1
d187 1
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genNode));
d201 1
d208 1
a208 1
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genChildNode));
d220 1
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genLink));
d234 30
d265 1
a265 1
    stringBuffer.append(TEXT_48);
@

