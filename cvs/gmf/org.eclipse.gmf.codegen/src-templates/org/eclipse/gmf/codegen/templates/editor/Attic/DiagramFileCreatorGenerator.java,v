head	1.23;
access;
symbols
	v20081022-1925:1.23
	v20081015-1925:1.23
	v20081008-1925:1.23
	v20081001-1925:1.23
	v20080924-1925:1.23
	v20080917-1925:1.23
	v20080911-1728:1.23
	v20080910-1520:1.23
	v20080903-1520:1.23
	v20080827-1520:1.23
	v20080813-1520:1.23
	v20080806-1520:1.23
	v20070202-0200:1.17
	v20061027-1200:1.17
	v20061020-1000:1.17
	v20061013-1330:1.18
	v20060919-0800:1.17
	v20060907-1100:1.17
	M1_20:1.17
	v20060904-1500:1.17
	v20060824-1600:1.17
	v20060817-1500:1.17
	v20060728-0500:1.17
	v20060713-1700:1.17
	R1_0_maintenance:1.17.0.2
	R1_0:1.17
	v20060627-1200:1.17
	v20060626-1420:1.17
	v20060620-0400:1.17
	v20060616-1400:1.17
	v20060616-1200:1.17
	v20060609-1400:1.17
	v20060531-1730:1.15
	v20060530-1930:1.15
	v20060526-1200:1.14
	v20060519-1300:1.14
	v20060519-0800:1.14
	v20060512-1000:1.14
	I20060512-1000:1.14
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.14
	I20060407-1200:1.11
	I20060331-1000:1.10
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.9
	S20060303-1600:1.9
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.5
	I20060202-1415:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.23
date	2006.10.24.17.25.11;	author dstadnik;	state dead;
branches;
next	1.22;

1.22
date	2006.10.24.15.55.34;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.24.14.37.53;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.24.14.03.29;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.10.16.12.50.45;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.09.27.17.03.34;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.11;

1.11
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.13.05.28;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.26.18.36.27;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.16.07.42.23;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.15.00.13.01;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.23
log
@remove file creator template
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class DiagramFileCreatorGenerator
{
  protected static String nl;
  public static synchronized DiagramFileCreatorGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DiagramFileCreatorGenerator result = new DiagramFileCreatorGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.io.ByteArrayInputStream;" + NL + "" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.IResourceStatus;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.NullProgressMonitor;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static IFile createNewFile(IPath containerPath, String fileName, Shell shell) {" + NL + "\t\tIPath newFilePath = containerPath.append(fileName);" + NL + "\t\tIFile newFileHandle = ResourcesPlugin.getWorkspace().getRoot().getFile(newFilePath);" + NL + "\t\ttry {" + NL + "\t\t\tcreateFile(newFileHandle);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\tErrorDialog.openError(shell, \"Creation Problems\", null, e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn newFileHandle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected static void createFile(IFile fileHandle) throws CoreException {" + NL + "\t\ttry {" + NL + "\t\t\tfileHandle.create(new ByteArrayInputStream(new byte[0]), false, new NullProgressMonitor());" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t// If the file already existed locally, just refresh to get contents" + NL + "\t\t\tif (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED) {" + NL + "\t\t\t\tfileHandle.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthrow e;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_6);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
@


1.22
log
@simplify file names handling
@
text
@@


1.21
log
@remove unused parameters
@
text
@d23 2
a24 17
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_7 = " INSTANCE = new ";
  protected final String TEXT_8 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_9 = " getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean exists(IPath path) {";
  protected final String TEXT_10 = NL + "\t\treturn ResourcesPlugin.getWorkspace().getRoot().exists(path);";
  protected final String TEXT_11 = NL + "\t\treturn path.toFile().exists();";
  protected final String TEXT_12 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_13 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getUniqueFileName(IPath containerPath, String fileName) {" + NL + "\t\tint nFileNumber = 1;" + NL + "\t\tfileName = removeExtensionFromFileName(fileName);" + NL + "\t\tString newFileName = fileName;" + NL + "\t\tIPath diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));";
  protected final String TEXT_14 = NL + "\t\tIPath modelFilePath = containerPath.append(newFileName + \".";
  protected final String TEXT_15 = "\"); //$NON-NLS-1$";
  protected final String TEXT_16 = NL + "\t\twhile (exists(diagramFilePath)";
  protected final String TEXT_17 = NL + "\t\t\t\t|| exists(modelFilePath)";
  protected final String TEXT_18 = NL + "\t\t\t\t) {" + NL + "\t\t\tnFileNumber++;" + NL + "\t\t\tnewFileName = fileName + nFileNumber;" + NL + "\t\t\tdiagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));";
  protected final String TEXT_19 = NL + "\t\t\tmodelFilePath = containerPath.append(newFileName + \".";
  protected final String TEXT_20 = "\"); //$NON-NLS-1$";
  protected final String TEXT_21 = NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String appendExtensionToFileName(String fileName) {" + NL + "\t\tif (!fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName + getExtension();" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String removeExtensionFromFileName(String fileName) {" + NL + "\t\tif (fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName.substring(0, fileName.length() - getExtension().length());" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createNewFile(IPath containerPath, String fileName, Shell shell) {" + NL + "\t\tIPath newFilePath = containerPath.append(appendExtensionToFileName(fileName));" + NL + "\t\tIFile newFileHandle = ResourcesPlugin.getWorkspace().getRoot().getFile(newFilePath);" + NL + "\t\ttry {" + NL + "\t\t\tcreateFile(newFileHandle);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\tErrorDialog.openError(shell, \"Creation Problems\", null, e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn newFileHandle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createFile(IFile fileHandle) throws CoreException {" + NL + "\t\ttry {" + NL + "\t\t\tfileHandle.create(new ByteArrayInputStream(new byte[0]), false, new NullProgressMonitor());" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t// If the file already existed locally, just refresh to get contents" + NL + "\t\t\tif (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED) {" + NL + "\t\t\t\tfileHandle.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthrow e;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_22 = NL;
a30 1
final GenEditorGenerator editorGen = genDiagram.getEditorGen();
a31 1
final GenApplication application = editorGen.getApplication();
d48 1
a48 1
    stringBuffer.append(importManager.getCompilationUnitName());
a49 30
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_9);
    if (application == null) {
    stringBuffer.append(TEXT_10);
    } else {
    stringBuffer.append(TEXT_11);
    }
    stringBuffer.append(TEXT_12);
    stringBuffer.append(editorGen.getDiagramFileExtension());
    stringBuffer.append(TEXT_13);
    if (!editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    if (!editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_17);
    }
    stringBuffer.append(TEXT_18);
    if (!editorGen.isSameFileForDiagramAndModel()) {
    stringBuffer.append(TEXT_19);
    stringBuffer.append(editorGen.getDomainFileExtension());
    stringBuffer.append(TEXT_20);
    }
    stringBuffer.append(TEXT_21);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_22);
@


1.20
log
@[114200] avoid core.resource dep
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.io.ByteArrayInputStream;" + NL + "import java.io.InputStream;" + NL + "" + NL + "import org.eclipse.jface.dialogs.ErrorDialog;" + NL + "import org.eclipse.swt.widgets.Shell;" + NL + "import org.eclipse.core.resources.IFile;" + NL + "import org.eclipse.core.resources.IResource;" + NL + "import org.eclipse.core.resources.IResourceStatus;" + NL + "import org.eclipse.core.resources.ResourcesPlugin;" + NL + "" + NL + "import org.eclipse.core.runtime.CoreException;" + NL + "import org.eclipse.core.runtime.IPath;" + NL + "import org.eclipse.core.runtime.NullProgressMonitor;";
d38 1
a38 1
  protected final String TEXT_21 = NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String appendExtensionToFileName(String fileName) {" + NL + "\t\tif (!fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName + getExtension();" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String removeExtensionFromFileName(String fileName) {" + NL + "\t\tif (fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName.substring(0, fileName.length() - getExtension().length());" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createNewFile(IPath containerPath, String fileName, InputStream initialContents, Shell shell) {" + NL + "\t\tIPath newFilePath = containerPath.append(appendExtensionToFileName(fileName));" + NL + "\t\tIFile newFileHandle = ResourcesPlugin.getWorkspace().getRoot().getFile(newFilePath);" + NL + "\t\ttry {" + NL + "\t\t\tcreateFile(newFileHandle, initialContents);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\tErrorDialog.openError(shell, \"Creation Problems\", null, e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn newFileHandle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createFile(IFile fileHandle, InputStream contents) throws CoreException {" + NL + "\t\ttry {" + NL + "\t\t\tif (contents == null) {" + NL + "\t\t\t\tcontents = new ByteArrayInputStream(new byte[0]);" + NL + "\t\t\t}" + NL + "\t\t\tfileHandle.create(contents, false, new NullProgressMonitor());" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t// If the file already existed locally, just refresh to get contents" + NL + "\t\t\tif (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED) {" + NL + "\t\t\t\tfileHandle.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthrow e;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
@


1.19
log
@#114200 remove resource deps from wizard
@
text
@d26 14
a39 11
  protected final String TEXT_9 = " getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static boolean exists(IPath path) {" + NL + "\t\treturn ResourcesPlugin.getWorkspace().getRoot().exists(path);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getUniqueFileName(IPath containerPath, String fileName) {" + NL + "\t\tint nFileNumber = 1;" + NL + "\t\tfileName = removeExtensionFromFileName(fileName);" + NL + "\t\tString newFileName = fileName;" + NL + "\t\tIPath diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));";
  protected final String TEXT_11 = NL + "\t\tIPath modelFilePath = containerPath.append(newFileName + \".";
  protected final String TEXT_12 = "\"); //$NON-NLS-1$";
  protected final String TEXT_13 = NL + "\t\twhile (exists(diagramFilePath)";
  protected final String TEXT_14 = NL + "\t\t\t\t|| exists(modelFilePath)";
  protected final String TEXT_15 = NL + "\t\t\t\t) {" + NL + "\t\t\tnFileNumber++;" + NL + "\t\t\tnewFileName = fileName + nFileNumber;" + NL + "\t\t\tdiagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));";
  protected final String TEXT_16 = NL + "\t\t\tmodelFilePath = containerPath.append(newFileName + \".";
  protected final String TEXT_17 = "\"); //$NON-NLS-1$";
  protected final String TEXT_18 = NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String appendExtensionToFileName(String fileName) {" + NL + "\t\tif (!fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName + getExtension();" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String removeExtensionFromFileName(String fileName) {" + NL + "\t\tif (fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName.substring(0, fileName.length() - getExtension().length());" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFile createNewFile(IPath containerPath, String fileName, InputStream initialContents, Shell shell) {" + NL + "\t\tIPath newFilePath = containerPath.append(appendExtensionToFileName(fileName));" + NL + "\t\tIFile newFileHandle = ResourcesPlugin.getWorkspace().getRoot().getFile(newFilePath);" + NL + "\t\ttry {" + NL + "\t\t\tcreateFile(newFileHandle, initialContents);" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\tErrorDialog.openError(shell, \"Creation Problems\", null, e.getStatus());" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn newFileHandle;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void createFile(IFile fileHandle, InputStream contents) throws CoreException {" + NL + "\t\ttry {" + NL + "\t\t\tif (contents == null) {" + NL + "\t\t\t\tcontents = new ByteArrayInputStream(new byte[0]);" + NL + "\t\t\t}" + NL + "\t\t\tfileHandle.create(contents, false, new NullProgressMonitor());" + NL + "\t\t} catch (CoreException e) {" + NL + "\t\t\t// If the file already existed locally, just refresh to get contents" + NL + "\t\t\tif (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED) {" + NL + "\t\t\t\tfileHandle.refreshLocal(IResource.DEPTH_ZERO, null);" + NL + "\t\t\t} else {" + NL + "\t\t\t\tthrow e;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_19 = NL;
d48 1
d71 1
a71 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d73 1
a73 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d75 1
a75 1
    stringBuffer.append(editorGen.getDomainFileExtension());
d77 1
a77 1
    }
d81 2
d84 1
a84 1
    stringBuffer.append(TEXT_15);
a85 2
    stringBuffer.append(TEXT_16);
    stringBuffer.append(editorGen.getDomainFileExtension());
d89 6
d96 1
a96 1
    stringBuffer.append(TEXT_19);
@


1.18
log
@#114200 remove gmf runtime ide dependencies
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;";
d23 1
a23 1
  protected final String TEXT_6 = " extends DiagramFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
d25 12
a36 11
  protected final String TEXT_8 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static DiagramFileCreator getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getUniqueFileName(";
  protected final String TEXT_11 = " containerPath, String fileName) {" + NL + "\t\tint nFileNumber = 1;" + NL + "\t\tfileName = removeExtensionFromFileName(fileName);" + NL + "\t\tString newFileName = fileName;" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_12 = " diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));" + NL + "\t\t";
  protected final String TEXT_13 = " modelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));" + NL + "\t\t";
  protected final String TEXT_14 = " workspaceRoot = ";
  protected final String TEXT_15 = ".getWorkspace().getRoot();" + NL + "\t\t" + NL + "\t\twhile (workspaceRoot.exists(diagramFilePath) || workspaceRoot.exists(modelFilePath)) {" + NL + "\t\t\tnFileNumber++;" + NL + "\t\t\tnewFileName = fileName + nFileNumber;" + NL + "\t\t\tdiagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));" + NL + "\t\t\tmodelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));" + NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String removeExtensionFromFileName(String fileName) {" + NL + "\t\tif (fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName.substring(0, fileName.length() - getExtension().length());" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String appendExtensionToModelFileName(String fileName) {" + NL + "\t\treturn fileName + \".";
  protected final String TEXT_16 = "\"; //$NON-NLS-1$" + NL + "\t}";
  protected final String TEXT_17 = NL + "}";
  protected final String TEXT_18 = NL;
d59 1
a59 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d61 1
a61 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d63 1
a63 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d65 2
d68 1
a68 1
    stringBuffer.append(TEXT_9);
a69 2
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d71 1
a71 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d73 1
a73 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d75 1
a75 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d77 1
a77 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d79 2
d82 1
a82 1
    stringBuffer.append(TEXT_16);
d84 1
a84 1
    stringBuffer.append(TEXT_17);
d86 1
a86 1
    stringBuffer.append(TEXT_18);
@


1.17
log
@header comment should not be a javadoc comment
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;";
d23 1
a23 1
  protected final String TEXT_6 = " extends IDEEditorFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
d26 2
a27 2
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getUniqueFileName(";
d33 1
a33 1
  protected final String TEXT_16 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
d35 1
d56 1
a56 3
    
importManager.markImportLocation(stringBuffer);

d83 1
@


1.16
log
@fix some nls markers
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.15
log
@Correcting copyright processing
@
text
@d33 1
a33 1
  protected final String TEXT_16 = "\";" + NL + "\t}" + NL + "\t";
@


1.14
log
@using M6 to generate code.
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d50 1
a50 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.13
log
@restore generators
@
text
@d38 1
a38 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.12
log
@#134095 do not store compiled templates in cvs
@
text
@d38 1
a38 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.11
log
@Switching to eclipse M6.
@
text
@@


1.10
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d38 1
a38 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.9
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d18 17
a34 14
  protected final String TEXT_1 = NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends IDEEditorFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_4 = " INSTANCE = new ";
  protected final String TEXT_5 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static DiagramFileCreator getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_6 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
  protected final String TEXT_7 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getUniqueFileName(";
  protected final String TEXT_8 = " containerPath, String fileName) {" + NL + "\t\tint nFileNumber = 1;" + NL + "\t\tfileName = removeExtensionFromFileName(fileName);" + NL + "\t\tString newFileName = fileName;" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_9 = " diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));" + NL + "\t\t";
  protected final String TEXT_10 = " modelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));" + NL + "\t\t";
  protected final String TEXT_11 = " workspaceRoot = ";
  protected final String TEXT_12 = ".getWorkspace().getRoot();" + NL + "\t\t" + NL + "\t\twhile (workspaceRoot.exists(diagramFilePath) || workspaceRoot.exists(modelFilePath)) {" + NL + "\t\t\tnFileNumber++;" + NL + "\t\t\tnewFileName = fileName + nFileNumber;" + NL + "\t\t\tdiagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));" + NL + "\t\t\tmodelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));" + NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String removeExtensionFromFileName(String fileName) {" + NL + "\t\tif (fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName.substring(0, fileName.length() - getExtension().length());" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String appendExtensionToModelFileName(String fileName) {" + NL + "\t\treturn fileName + \".";
  protected final String TEXT_13 = "\";" + NL + "\t}" + NL + "\t";
  protected final String TEXT_14 = NL + "}";
a43 1
importManager.emitPackageStatement(stringBuffer);
d46 10
d58 1
a58 1
    stringBuffer.append(TEXT_2);
d60 1
a60 1
    stringBuffer.append(TEXT_3);
d62 1
a62 1
    stringBuffer.append(TEXT_4);
d64 1
a64 1
    stringBuffer.append(TEXT_5);
d66 1
a66 1
    stringBuffer.append(TEXT_6);
d68 1
a68 1
    stringBuffer.append(TEXT_7);
d70 1
a70 1
    stringBuffer.append(TEXT_8);
d72 1
a72 1
    stringBuffer.append(TEXT_9);
d74 1
a74 1
    stringBuffer.append(TEXT_10);
d76 1
a76 1
    stringBuffer.append(TEXT_11);
d78 1
a78 1
    stringBuffer.append(TEXT_12);
d80 1
a80 1
    stringBuffer.append(TEXT_13);
d82 1
a82 1
    stringBuffer.append(TEXT_14);
@


1.8
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d18 14
a31 15
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;";
  protected final String TEXT_3 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_4 = " extends IDEEditorFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_5 = " INSTANCE = new ";
  protected final String TEXT_6 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static DiagramFileCreator getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_7 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t";
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getUniqueFileName(";
  protected final String TEXT_9 = " containerPath, String fileName) {" + NL + "\t\tint nFileNumber = 1;" + NL + "\t\tfileName = removeExtensionFromFileName(fileName);" + NL + "\t\tString newFileName = fileName;" + NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_10 = " diagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));" + NL + "\t\t";
  protected final String TEXT_11 = " modelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));" + NL + "\t\t";
  protected final String TEXT_12 = " workspaceRoot = ";
  protected final String TEXT_13 = ".getWorkspace().getRoot();" + NL + "\t\t" + NL + "\t\twhile (workspaceRoot.exists(diagramFilePath) || workspaceRoot.exists(modelFilePath)) {" + NL + "\t\t\tnFileNumber++;" + NL + "\t\t\tnewFileName = fileName + nFileNumber;" + NL + "\t\t\tdiagramFilePath = containerPath.append(appendExtensionToFileName(newFileName));" + NL + "\t\t\tmodelFilePath = containerPath.append(appendExtensionToModelFileName(newFileName));" + NL + "\t\t}" + NL + "\t\treturn newFileName;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String removeExtensionFromFileName(String fileName) {" + NL + "\t\tif (fileName.endsWith(getExtension())) {" + NL + "\t\t\treturn fileName.substring(0, fileName.length() - getExtension().length());" + NL + "\t\t}" + NL + "\t\treturn fileName;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String appendExtensionToModelFileName(String fileName) {" + NL + "\t\treturn fileName + \".";
  protected final String TEXT_14 = "\";" + NL + "\t}" + NL + "\t";
  protected final String TEXT_15 = NL + "}";
d37 5
a41 2
GenDiagram genDiagram = (GenDiagram) argument;
GenEditorGenerator editorGen = genDiagram.getEditorGen();
a42 2
    stringBuffer.append(editorGen.getEditor().getPackageName());
    stringBuffer.append(TEXT_2);
a43 1
ImportUtil importManager = new ImportUtil(editorGen.getEditor().getPackageName());
d46 2
d53 1
a53 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d55 1
a55 1
    stringBuffer.append(editorGen.getDiagramFileExtension());
d57 1
a57 1
    if (!editorGen.isSameFileForDiagramAndModel()) {
d63 1
a63 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d65 1
a65 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d67 1
a67 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d69 1
a69 1
    stringBuffer.append(editorGen.getDomainFileExtension());
a70 2
    }
    stringBuffer.append(TEXT_15);
@


1.7
log
@file extensions moved out from genDiagram. Distinct property captures extension of domain model file now
@
text
@d41 1
a41 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d44 1
a44 1
ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
@


1.6
log
@ImportManager moved to oeg.common
@
text
@d37 3
a39 1
    GenDiagram genDiagram = (GenDiagram) argument;
d54 1
a54 1
    stringBuffer.append(genDiagram.getDiagramFileExtension());
d56 1
a56 1
    if (!genDiagram.isSameFileForDiagramAndModel()) {
d68 1
a68 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getGenPackage().getPrefix().toLowerCase());
@


1.5
log
@#121427
Fixing problems with re-creation recently removed diagram.
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.ImportUtil;
@


1.4
log
@#116031 avoid hardcoded class names in templates
@
text
@d4 1
d19 14
a32 6
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends IDEEditorFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static ";
  protected final String TEXT_4 = " INSTANCE = new ";
  protected final String TEXT_5 = "();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static DiagramFileCreator getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_6 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
d41 4
a44 1
    stringBuffer.append(genDiagram.getDiagramFileCreatorClassName());
d50 2
a52 1
    stringBuffer.append(TEXT_6);
d54 17
@


1.3
log
@catch up with recent API changes in the runtime
@
text
@d18 6
a23 3
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.util.DiagramFileCreator;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class DiagramFileCreatorBis extends IDEEditorFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static DiagramFileCreatorBis INSTANCE = new DiagramFileCreatorBis();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static DiagramFileCreator getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
  protected final String TEXT_3 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "}";
  protected final String TEXT_4 = NL;
d32 1
a32 1
    stringBuffer.append(genDiagram.getDiagramFileExtension());
d34 1
d36 5
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d18 1
a18 1
  protected final String TEXT_2 = ";" + NL + "" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.util.IDEEditorFileCreator;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.internal.util.EditorFileCreator;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class DiagramFileCreator extends IDEEditorFileCreator {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static DiagramFileCreator INSTANCE = new DiagramFileCreator();" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static EditorFileCreator getInstance() {" + NL + "\t\treturn INSTANCE;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getExtension() {" + NL + "\t\treturn \".";
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@a2 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
@

