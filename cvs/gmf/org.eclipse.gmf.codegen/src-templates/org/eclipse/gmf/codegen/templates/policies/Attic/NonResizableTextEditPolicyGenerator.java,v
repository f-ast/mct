head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081015-1925:1.3
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	v20080806-1520:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.03.14.15.31.58;	author dstadnik;	state dead;
branches;
next	1.2;

1.2
date	2006.03.13.18.39.47;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.3
log
@provide selection for the child nodes
@
text
@package org.eclipse.gmf.codegen.templates.policies;

import org.eclipse.gmf.codegen.gmfgen.*;

public class NonResizableTextEditPolicyGenerator
{
  protected static String nl;
  public static synchronized NonResizableTextEditPolicyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NonResizableTextEditPolicyGenerator result = new NonResizableTextEditPolicyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL + "" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.handles.MoveHandle;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class NonResizableTextEditPolicy\textends NonResizableEditPolicyEx {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WrapLabel getLabel() {" + NL + "\t\treturn (WrapLabel) ((GraphicalEditPart) getHost()).getFigure();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tgetLabel().setFocus(false);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tgetLabel().setSelected(false);" + NL + "\t\tgetLabel().setFocus(false);" + NL + "\t\tsuper.hideSelection();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\tgetLabel().setFocus(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showPrimarySelection() {" + NL + "\t\tsuper.showPrimarySelection();" + NL + "\t\tgetLabel().setFocus(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\tsuper.showSelection();" + NL + "\t\tgetLabel().setSelected(true);" + NL + "\t\tgetLabel().setFocus(false);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getEditPoliciesPackageName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(TEXT_6);
    return stringBuffer.toString();
  }
}
@


1.2
log
@use Labels instead of WrapLabels
@
text
@@


1.1
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d21 2
a22 3
  protected final String TEXT_5 = ";" + NL + "" + NL + "import java.util.Collections;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.gef.GraphicalEditPart;" + NL + "import org.eclipse.gef.handles.MoveHandle;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;" + NL + "import org.eclipse.gmf.runtime.draw2d.ui.figures.WrapLabel;" + NL + "import ";
  protected final String TEXT_6 = ".ITextAwareEditPart;" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class NonResizableTextEditPolicy\textends NonResizableEditPolicyEx {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WrapLabel getLabel() {" + NL + "\t\treturn ((ITextAwareEditPart) getHost()).getLabel();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideFocus() {" + NL + "\t\tgetLabel().setFocus(false);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void hideSelection() {" + NL + "\t\tgetLabel().setSelected(false);" + NL + "\t\tgetLabel().setFocus(false);" + NL + "\t\tsuper.hideSelection();" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showFocus() {" + NL + "\t\tgetLabel().setFocus(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showPrimarySelection() {" + NL + "\t\tsuper.showPrimarySelection();" + NL + "\t\tgetLabel().setFocus(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void showSelection() {" + NL + "\t\tsuper.showSelection();" + NL + "\t\tgetLabel().setSelected(true);" + NL + "\t\tgetLabel().setFocus(false);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected List createSelectionHandles() {" + NL + "\t\tMoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());" + NL + "\t\tmoveHandle.setBorder(null);" + NL + "\t\tmoveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));" + NL + "\t\treturn Collections.singletonList(moveHandle);" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
a41 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
a42 1
    stringBuffer.append(TEXT_7);
@

