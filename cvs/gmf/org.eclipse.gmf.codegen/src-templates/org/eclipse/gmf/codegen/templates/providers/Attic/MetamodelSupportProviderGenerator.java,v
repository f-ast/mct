head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.1
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.02.16.10.30.35;	author ashatalin;	state dead;
branches;
next	1.5;

1.5
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.10.17.21.40;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@#127696
Templates should use new transaction API
(not finished)
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class MetamodelSupportProviderGenerator
{
  protected static String nl;
  public static synchronized MetamodelSupportProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    MetamodelSupportProviderGenerator result = new MetamodelSupportProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.emf.common.notify.Notification;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.ecore.EPackage;" + NL + "import org.eclipse.emf.ecore.EReference;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.emf.core.services.metamodel.GetMetamodelSupportOperation;" + NL + "import org.eclipse.gmf.runtime.emf.core.services.metamodel.IMetamodelSupport;" + NL + "import org.eclipse.gmf.runtime.emf.core.services.metamodel.IMetamodelSupportProvider;" + NL + "import org.eclipse.gmf.runtime.notation.providers.internal.semproc.NotationSemProc;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractProvider implements IMetamodelSupportProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IMetamodelSupport support;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IMetamodelSupport getMetamodelSupport(EPackage ePackage) {" + NL + "\t\tif (support == null) {" + NL + "\t\t\tsupport = new MetamodelSupportImpl();" + NL + "\t\t}" + NL + "\t\treturn support;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetMetamodelSupportOperation) {" + NL + "\t\t\treturn ";
  protected final String TEXT_6 = ".eINSTANCE == ((GetMetamodelSupportOperation) operation).getEPackage();" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic class MetamodelSupportImpl implements IMetamodelSupport {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canDestroy(EObject eObject) {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canContain(EClass eContainer, EReference eReference, EClass eClass) {" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void handleEvent(Notification event) {" + NL + "\t\t\tNotationSemProc.handleEvent(event);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic void postProcess(EObject root) {}" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    GenDiagram diagram = (GenDiagram) ((Object[]) argument)[0];
    stringBuffer.append(TEXT_1);
    stringBuffer.append(diagram.getProvidersPackageName());
    stringBuffer.append(TEXT_2);
    ImportUtil importManager = new ImportUtil(diagram.getProvidersPackageName());
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(diagram.getMetamodelSupportProviderClassName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(diagram.getMetaPackageName(importManager));
    stringBuffer.append(TEXT_6);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_7);
    return stringBuffer.toString();
  }
}
@


1.5
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@@


1.4
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d29 1
a29 1
    GenDiagram diagram = (GenDiagram) argument;
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d39 1
a39 1
    stringBuffer.append(importManager.getImportedName(diagram.getDomainMetaModel().getQualifiedPackageInterfaceName()));
@


1.2
log
@#115861
ChildNode could be created not only in the compartment, but directly in it's parent.
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.1
log
@[dstadnik] #112900 metamodel support
@
text
@d39 1
a39 1
    stringBuffer.append(importManager.getImportedName(diagram.getDomainMetaModel().getQualifiedPackageClassName()));
@

