head	1.17;
access;
symbols
	v20081022-1925:1.17
	v20081015-1925:1.17
	v20081008-1925:1.17
	v20081001-1925:1.17
	v20080924-1925:1.17
	v20080917-1925:1.17
	v20080911-1728:1.17
	v20080910-1520:1.17
	v20080903-1520:1.17
	v20080827-1520:1.17
	v20080813-1520:1.17
	v20080806-1520:1.17
	RC3_20:1.16
	v20070614-1400:1.16
	v20070608-1300:1.16
	v20070605-1400:1.16
	v20070601-1400:1.15
	v20070525-1500:1.15
	v20070520-1200:1.15
	v20070518-1300:1.14
	v20070504-1000:1.14
	v20070427-0600:1.14
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070405-1100:1.13
	v20070403-1500:1.13
	v20070330-1300:1.13
	v20060330-1300:1.13
	v20070322-1100:1.13
	v20060316-0600:1.13
	v20070307-0700:1.13
	v20070301-1200:1.13
	v20070228-2000:1.13
	v20070221-1500:1.13
	v20070208-1800:1.13
	v20070202-0200:1.13
	v20070103-0300:1.13
	M4_20:1.13
	v20061222-1800:1.13
	v20061218-1200:1.13
	v20061214-0000:1.13
	v20061120-1300:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.13
	v20061020-1000:1.13
	v20061013-1330:1.13
	v20060919-0800:1.13
	v20060907-1100:1.13
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.13
	v20060817-1500:1.13
	v20060728-0500:1.13
	v20060713-1700:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	v20060627-1200:1.13
	v20060626-1420:1.13
	v20060620-0400:1.13
	v20060616-1400:1.13
	v20060616-1200:1.13
	v20060609-1400:1.13
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.11
	v20060519-1300:1.11
	v20060519-0800:1.11
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.9
	I20060424-0300:1.9
	M6_10:1.9
	I20060407-1200:1.5
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.17
date	2007.06.20.15.50.10;	author dstadnik;	state dead;
branches;
next	1.16;
commitid	3ba446794caf4567;

1.16
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	17ef46643bcf4567;

1.15
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.14;
commitid	7de14650454a4567;

1.14
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	78b462dc68e4567;

1.13
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.11;

1.11
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.04.12.09.29.27;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.5;

1.5
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.17
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class EditPartProviderGenerator
{
  protected static String nl;
  public static synchronized EditPartProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    EditPartProviderGenerator result = new EditPartProviderGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import java.lang.ref.WeakReference;" + NL + "" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.AbstractEditPartProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.CreateGraphicEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.IEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_4 = ".";
  protected final String TEXT_5 = ";";
  protected final String TEXT_6 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_7 = " extends AbstractEditPartProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPartFactory factory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean allowCaching;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "() {" + NL + "\t\tsetFactory(new ";
  protected final String TEXT_9 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((IEditPartOperation) operation).getView();" + NL + "\t\t\tif (!";
  protected final String TEXT_10 = ".MODEL_ID.equals(";
  protected final String TEXT_11 = ".getModelID(view))) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    stringBuffer.append(genDiagram.getEditPartsPackageName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
    stringBuffer.append(TEXT_5);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}
@


1.16
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.15
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.14
log
@follow consisted spacing policy
@
text
@d18 11
a28 12
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.lang.ref.WeakReference;" + NL + "" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.AbstractEditPartProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.CreateGraphicEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.IEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_5 = ".";
  protected final String TEXT_6 = ";";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractEditPartProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPartFactory factory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean allowCaching;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "() {" + NL + "\t\tsetFactory(new ";
  protected final String TEXT_10 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((IEditPartOperation) operation).getView();" + NL + "\t\t\tif (!";
  protected final String TEXT_11 = ".MODEL_ID.equals(";
  protected final String TEXT_12 = ".getModelID(view))) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
a36 1
    stringBuffer.append(TEXT_1);
d41 2
a43 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d46 2
d49 1
a49 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d51 1
a51 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d53 1
a53 1
    importManager.markImportLocation(stringBuffer);
d57 1
a57 1
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
d59 1
a59 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d61 1
a61 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a62 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_12);
@


1.13
log
@header comment should not be a javadoc comment
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d44 1
a44 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.12
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.11
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d44 1
a44 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.10
log
@#131543 Obsolete code should be eliminated
@
text
@d21 9
a29 10
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL + "" + NL + "import java.lang.ref.WeakReference;" + NL + "" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.AbstractEditPartProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.CreateGraphicEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.IEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_6 = ".";
  protected final String TEXT_7 = ";";
  protected final String TEXT_8 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_9 = " extends AbstractEditPartProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPartFactory factory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean allowCaching;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "() {" + NL + "\t\tsetFactory(new ";
  protected final String TEXT_11 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((IEditPartOperation) operation).getView();" + NL + "\t\t\tif (!";
  protected final String TEXT_12 = ".MODEL_ID.equals(";
  protected final String TEXT_13 = ".getModelID(view))) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
d35 2
a36 2
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d47 1
d49 1
a49 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d51 1
a51 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d53 1
a53 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d55 1
a55 1
    importManager.markImportLocation(stringBuffer);
d59 1
a59 1
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
d61 1
a61 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d63 1
a63 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
a64 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
@


1.9
log
@#135653 do not use deprecated api
@
text
@d4 1
d24 7
a30 5
  protected final String TEXT_7 = ";" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractEditPartProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPartFactory factory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean allowCaching;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "() {" + NL + "\t\tsetFactory(new ";
  protected final String TEXT_10 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((IEditPartOperation) operation).getView();" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;
d35 4
a38 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d55 1
a55 1
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
d59 2
a61 1
    stringBuffer.append(TEXT_10);
d63 5
@


1.8
log
@using M6 to generate code.
@
text
@d21 1
a21 1
  protected final String TEXT_5 = ";" + NL + "" + NL + "import java.lang.ref.WeakReference;" + NL + "" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.AbstractEditPartProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.CreateGraphicEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
d26 1
a26 1
  protected final String TEXT_10 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((CreateGraphicEditPartOperation) operation).getView();" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@


1.7
log
@restore generators
@
text
@d31 1
a31 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.6
log
@#134095 do not store compiled templates in cvs
@
text
@d31 1
a31 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.5
log
@Switching to eclipse M6.
@
text
@@


1.4
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d31 1
a31 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.3
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d17 11
a27 8
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL + "" + NL + "import java.lang.ref.WeakReference;" + NL + "" + NL + "import org.eclipse.gef.EditPart;" + NL + "import org.eclipse.gef.EditPartFactory;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.IGraphicalEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.AbstractEditPartProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.editpart.CreateGraphicEditPartOperation;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_3 = ".";
  protected final String TEXT_4 = ";" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractEditPartProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPartFactory factory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean allowCaching;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "() {" + NL + "\t\tsetFactory(new ";
  protected final String TEXT_7 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((CreateGraphicEditPartOperation) operation).getView();" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d34 4
a37 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d39 1
a39 1
    stringBuffer.append(genDiagram.getEditPartsPackageName());
d41 1
a41 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d43 1
a43 1
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
d45 1
a45 1
    stringBuffer.append(genDiagram.getEditPartProviderClassName());
d49 1
d51 5
@


1.2
log
@[dstadnik] #112900 metamodel support
@
text
@d29 1
a29 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d20 5
a24 3
  protected final String TEXT_4 = ";" + NL + "" + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class EditPartProvider extends AbstractEditPartProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate EditPartFactory factory;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean allowCaching;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedPart;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate WeakReference cachedView;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic EditPartProvider() {" + NL + "\t\tsetFactory(new ";
  protected final String TEXT_5 = "());" + NL + "\t\tsetAllowCaching(true);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final EditPartFactory getFactory() {" + NL + "\t\treturn factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFactory(EditPartFactory factory) {" + NL + "\t\tthis.factory = factory;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic final boolean isAllowCaching() {" + NL + "\t\treturn allowCaching;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected synchronized void setAllowCaching(boolean allowCaching) {" + NL + "\t\tthis.allowCaching = allowCaching;" + NL + "\t\tif (!allowCaching) {" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart createEditPart(View view) {" + NL + "\t\tEditPart part = factory.createEditPart(null, view);" + NL + "\t\tif (part instanceof IGraphicalEditPart) {" + NL + "\t\t\treturn (IGraphicalEditPart) part;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IGraphicalEditPart getCachedPart(View view) {" + NL + "\t\tif (cachedView != null && cachedView.get() == view) {" + NL + "\t\t\treturn (IGraphicalEditPart) cachedPart.get();" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized IGraphicalEditPart createGraphicEditPart(View view) {" + NL + "\t\tif (isAllowCaching()) {" + NL + "\t\t\tIGraphicalEditPart part = getCachedPart(view);" + NL + "\t\t\tcachedPart = null;" + NL + "\t\t\tcachedView = null;" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\treturn part;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn createEditPart(view);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic synchronized boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof CreateGraphicEditPartOperation) {" + NL + "\t\t\tView view = ((CreateGraphicEditPartOperation) operation).getView();" + NL + "\t\t\tif (isAllowCaching() && getCachedPart(view) != null) {" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t\tIGraphicalEditPart part = createEditPart(view);" + NL + "\t\t\tif (part != null) {" + NL + "\t\t\t\tif (isAllowCaching()) {" + NL + "\t\t\t\t\tcachedPart = new WeakReference(part);" + NL + "\t\t\t\t\tcachedView = new WeakReference(view);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn true;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;
d37 1
a37 1
    stringBuffer.append(genDiagram.getEditPartFactoryClassName());
d39 1
d41 3
@

