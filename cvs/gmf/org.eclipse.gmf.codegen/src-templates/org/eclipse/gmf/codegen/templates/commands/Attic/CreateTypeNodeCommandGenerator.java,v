head	1.9;
access;
symbols
	v20081022-1925:1.9
	v20081015-1925:1.9
	v20081008-1925:1.9
	v20081001-1925:1.9
	v20080924-1925:1.9
	v20080917-1925:1.9
	v20080911-1728:1.9
	v20080910-1520:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	v20080806-1520:1.9
	v20070605-1400:1.8
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.5
	v20070413-1300:1.4
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.1
	v20061214-0000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.06.07.17.32.55;	author dstadnik;	state dead;
branches;
next	1.8;
commitid	5505466841464567;

1.8
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	17ef46643bcf4567;

1.7
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.6;
commitid	7de14650454a4567;

1.6
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	78b462dc68e4567;

1.5
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	2e44462656a24567;

1.4
date	2007.04.10.18.52.28;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	58c0461bdcea4567;

1.3
date	2007.02.14.15.41.57;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	145545d32dc54567;

1.2
date	2006.12.20.19.01.27;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	2409458988864567;

1.1
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	;
commitid	34a457da6a14567;


desc
@@


1.9
log
@rewrite create node command in xpand
@
text
@package org.eclipse.gmf.codegen.templates.commands;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;

public class CreateTypeNodeCommandGenerator {
 
  protected static String nl;
  public static synchronized CreateTypeNodeCommandGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CreateTypeNodeCommandGenerator result = new CreateTypeNodeCommandGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends ";
  protected final String TEXT_6 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_7 = "(";
  protected final String TEXT_8 = " req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL;
  protected final String TEXT_9 = NL + "\t\tfalse" + NL + "\t\t/* " + NL + "\t\tFIXME no containment feature found in the genmodel, toolsmith need to specify correct one here manually" + NL + "\t\tIf you rely on superclass behaviour, simply delete this comment" + NL + "\t\t*/" + NL + "}";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_12 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_13 = ".eINSTANCE.get";
  protected final String TEXT_14 = "();" + NL + "\t\t}";
  protected final String TEXT_15 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_16 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_17 = " container = ((";
  protected final String TEXT_18 = ") getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_19 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_20 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}" + NL;
  protected final String TEXT_21 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_22 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_23 = " newElement = (";
  protected final String TEXT_24 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_25 = NL + "\t\t\t\t ";
  protected final String TEXT_26 = " container = (";
  protected final String TEXT_27 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_28 = NL + "\t\t\t\t\t";
  protected final String TEXT_29 = " featureValues = container.";
  protected final String TEXT_30 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_31 = NL + "\t\t\t\t \t";
  protected final String TEXT_32 = "newElement);";
  protected final String TEXT_33 = NL + "\t\t\t\t }";
  protected final String TEXT_34 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_35 = ".Initializers.";
  protected final String TEXT_36 = ".init(newElement);";
  protected final String TEXT_37 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\t";
  protected final String TEXT_39 = " container = (";
  protected final String TEXT_40 = ") getElementToEdit();";
  protected final String TEXT_41 = NL + "\t\t\tif (";
  protected final String TEXT_42 = " != null) {";
  protected final String TEXT_43 = NL + "\t\t\tif (";
  protected final String TEXT_44 = ".size() >= ";
  protected final String TEXT_45 = ") {";
  protected final String TEXT_46 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t\tif (";
  protected final String TEXT_48 = " != null) {";
  protected final String TEXT_49 = NL + "\t\t\tif (";
  protected final String TEXT_50 = ".size() >= ";
  protected final String TEXT_51 = ") {";
  protected final String TEXT_52 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_54 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_55 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_56 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_57 = " resource = ((";
  protected final String TEXT_58 = ") getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_59 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_60 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_61 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_62 = NL + NL + "}";
  protected final String TEXT_63 = NL;

	protected final String getFeatureValueGetter(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			result.append("((");
			if (feature.isListType()) {
				result.append(importManager.getImportedName("java.util.Collection"));
			} else {
				if (feature.getTypeGenClass() != null) {
					result.append(importManager.getImportedName(feature.getTypeGenClass().getQualifiedInterfaceName()));
				} else {
					// EDataType
					result.append(importManager.getImportedName(feature.getTypeGenClassifier().getEcoreClassifier().getInstanceClassName()));
				}

			}
			result.append(")");
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eGet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("()))");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			result.append(".");
			result.append(feature.getGetAccessor());
			result.append("()");
		}
		return result.toString();
	}
	
	protected final String getFeatureValueSetterPrefix(String containerName, GenFeature feature, boolean isContainerEObject, ImportAssistant importManager) {
		StringBuffer result = new StringBuffer();
		if (feature.getGenClass().isExternalInterface()) {
// Using EMF reflective method to access feature value
			if (!isContainerEObject) {
// Casting container to EObject - ExternalIntarfce could be not an instance of EObject
				result.append("((");
				result.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
				result.append(")");
			}
			result.append(containerName);
			if (!isContainerEObject) {
				result.append(")");
			}
			result.append(".eSet(");
			result.append(importManager.getImportedName(feature.getGenPackage().getQualifiedPackageInterfaceName()));
			result.append(".eINSTANCE.get");
			result.append(feature.getFeatureAccessorName());
			result.append("(), ");
		} else {
			if (isContainerEObject) {
// Casting container to the typed interface
				result.append("((");
				result.append(importManager.getImportedName(feature.getGenClass().getQualifiedInterfaceName()));
				result.append(")");
			}
			result.append(containerName);
			if (isContainerEObject) {
				result.append(")");
			}
			if (feature.isListType()) {
				result.append(".");
				result.append(feature.getGetAccessor());
				result.append("().add(");
			} else {
				result.append(".set");
				result.append(feature.getAccessorName());
				result.append("(");
			}
		}
		return result.toString();
	}
 
	protected final String getMetaClassAccessor(GenClass genClass, ImportAssistant importManager) {
		StringBuffer buf = new StringBuffer();
		buf.append(importManager.getImportedName(genClass.getGenPackage().getQualifiedPackageInterfaceName()))
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(genClass.getName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	} 
 
	public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    GenNode node = (GenNode) ((Object[]) argument)[0];
GenDiagram genDiagram = node.getDiagram(); 

final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

TypeModelFacet modelFacet = node.getModelFacet();
if (modelFacet == null) {
	throw new IllegalArgumentException("TypeModelFacet required");
}


    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_5);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand"));
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_8);
    if (!modelFacet.isPhantomElement() && modelFacet.getContainmentMetaFeature() == null && modelFacet.getChildMetaFeature() == null) {
    stringBuffer.append(TEXT_9);
    
	importManager.emitSortedImports();
	return stringBuffer.toString(); // 	ATTENTION !!! CHANGE OF CONTROL FLOW - the template below is NOT processed when both features are null
	// I don't want to wrap rest of the template into huge else block, hence this hack, which I believe will fade away with xpand. 
} 
    stringBuffer.append(TEXT_10);
    if (!modelFacet.isPhantomElement()) {
	GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(containerGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(containerGenClass.getClassifierAccessorName());
    stringBuffer.append(TEXT_14);
    }
    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_20);
    if (!modelFacet.isPhantomElement()) {
	GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();
	boolean initChildMetafeature = !modelFacet.getChildMetaFeature().isDerived() && !modelFacet.getChildMetaFeature().equals(modelFacet.getContainmentMetaFeature());
	if (modelFacet.getModelElementInitializer() != null || initChildMetafeature) { 
		String metaClassName = importManager.getImportedName(modelFacet.getMetaClass().getQualifiedInterfaceName());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(metaClassName);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(metaClassName);
    stringBuffer.append(TEXT_24);
    		if (initChildMetafeature) {
			String containerMetaClass = importManager.getImportedName(modelFacet.getChildMetaFeature().getGenClass().getQualifiedInterfaceName());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(containerMetaClass);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(containerMetaClass);
    stringBuffer.append(TEXT_27);
    			if (modelFacet.getChildMetaFeature().isListType()) {
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(modelFacet.getChildMetaFeature().getGetAccessor());
    stringBuffer.append(TEXT_30);
    			} else {
    stringBuffer.append(TEXT_31);
    stringBuffer.append(getFeatureValueSetterPrefix("container", modelFacet.getChildMetaFeature(), false, importManager));
    stringBuffer.append(TEXT_32);
    			}
    stringBuffer.append(TEXT_33);
    		}
		if (modelFacet.getModelElementInitializer() != null) {
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(node.getUniqueIdentifier());
    stringBuffer.append(TEXT_36);
    		}
    stringBuffer.append(TEXT_37);
    	}
	
	GenFeature containmentMetaFeature = modelFacet.getContainmentMetaFeature();
	GenFeature childMetaFeature = modelFacet.getChildMetaFeature();
	int upperContainmentBound = containmentMetaFeature.getEcoreFeature().getUpperBound();
	int upperChildBound = childMetaFeature.getEcoreFeature().getUpperBound();
	boolean checkChildMetafeature = !childMetaFeature.equals(containmentMetaFeature) && upperChildBound > 0;
	if (upperContainmentBound > 0 || checkChildMetafeature) {
		String containerInterfaceName = importManager.getImportedName(containerGenClass.getQualifiedInterfaceName());
    stringBuffer.append(TEXT_38);
    stringBuffer.append(containerInterfaceName);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(containerInterfaceName);
    stringBuffer.append(TEXT_40);
    		if (upperContainmentBound > 0) {
			if (upperContainmentBound == 1) {
    stringBuffer.append(TEXT_41);
    stringBuffer.append(getFeatureValueGetter("container", containmentMetaFeature, false, importManager));
    stringBuffer.append(TEXT_42);
    			} else {
    stringBuffer.append(TEXT_43);
    stringBuffer.append(getFeatureValueGetter("container", containmentMetaFeature, false, importManager));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(upperContainmentBound);
    stringBuffer.append(TEXT_45);
    			}
    stringBuffer.append(TEXT_46);
    		}
		
		if (checkChildMetafeature) {
			if (upperChildBound == 1) {
    stringBuffer.append(TEXT_47);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_48);
    			} else {
    stringBuffer.append(TEXT_49);
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, false, importManager));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(upperChildBound);
    stringBuffer.append(TEXT_51);
    			}
    stringBuffer.append(TEXT_52);
    		} 
    stringBuffer.append(TEXT_53);
    	}
} else {
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EReference"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_61);
    }
    stringBuffer.append(TEXT_62);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_63);
    return stringBuffer.toString();
  }
}@


1.8
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.7
log
@Anna Karyakina's migration fix
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.6
log
@follow consisted spacing policy
@
text
@d19 63
a81 64
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends ";
  protected final String TEXT_7 = " {" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic ";
  protected final String TEXT_8 = "(";
  protected final String TEXT_9 = " req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL;
  protected final String TEXT_10 = NL + "\t\tfalse" + NL + "\t\t/* " + NL + "\t\tFIXME no containment feature found in the genmodel, toolsmith need to specify correct one here manually" + NL + "\t\tIf you rely on superclass behaviour, simply delete this comment" + NL + "\t\t*/" + NL + "}";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_13 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_14 = ".eINSTANCE.get";
  protected final String TEXT_15 = "();" + NL + "\t\t}";
  protected final String TEXT_16 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_17 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_18 = " container = ((";
  protected final String TEXT_19 = ") getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_20 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_21 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}" + NL;
  protected final String TEXT_22 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_23 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_24 = " newElement = (";
  protected final String TEXT_25 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_26 = NL + "\t\t\t\t ";
  protected final String TEXT_27 = " container = (";
  protected final String TEXT_28 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_29 = NL + "\t\t\t\t\t";
  protected final String TEXT_30 = " featureValues = container.";
  protected final String TEXT_31 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_32 = NL + "\t\t\t\t \t";
  protected final String TEXT_33 = "newElement);";
  protected final String TEXT_34 = NL + "\t\t\t\t }";
  protected final String TEXT_35 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_36 = ".Initializers.";
  protected final String TEXT_37 = ".init(newElement);";
  protected final String TEXT_38 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_39 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\t";
  protected final String TEXT_40 = " container = (";
  protected final String TEXT_41 = ") getElementToEdit();";
  protected final String TEXT_42 = NL + "\t\t\tif (";
  protected final String TEXT_43 = " != null) {";
  protected final String TEXT_44 = NL + "\t\t\tif (";
  protected final String TEXT_45 = ".size() >= ";
  protected final String TEXT_46 = ") {";
  protected final String TEXT_47 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_48 = NL + "\t\t\tif (";
  protected final String TEXT_49 = " != null) {";
  protected final String TEXT_50 = NL + "\t\t\tif (";
  protected final String TEXT_51 = ".size() >= ";
  protected final String TEXT_52 = ") {";
  protected final String TEXT_53 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_55 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_56 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_57 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_58 = " resource = ((";
  protected final String TEXT_59 = ") getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_60 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_61 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_62 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_63 = NL + NL + "}";
  protected final String TEXT_64 = NL;
a198 1
    stringBuffer.append(TEXT_1);
d203 2
a205 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d208 2
d211 1
a211 1
    importManager.markImportLocation(stringBuffer);
d213 2
a215 2
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.commands.CreateElementCommand"));
d217 1
a217 1
    stringBuffer.append(importManager.getCompilationUnitName());
d219 1
a219 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
a220 2
    if (!modelFacet.isPhantomElement() && modelFacet.getContainmentMetaFeature() == null && modelFacet.getChildMetaFeature() == null) {
    stringBuffer.append(TEXT_10);
d226 1
a226 1
    stringBuffer.append(TEXT_11);
d229 2
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName(containerGenClass.getGenPackage().getQualifiedPackageInterfaceName()));
d236 1
a236 1
    stringBuffer.append(containerGenClass.getClassifierAccessorName());
d238 1
a238 1
    }
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
a247 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_21);
d253 2
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
a259 2
    stringBuffer.append(metaClassName);
    stringBuffer.append(TEXT_25);
d262 2
d267 1
a267 1
    stringBuffer.append(containerMetaClass);
d269 1
a269 1
    			if (modelFacet.getChildMetaFeature().isListType()) {
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d273 1
a273 1
    stringBuffer.append(modelFacet.getChildMetaFeature().getGetAccessor());
d275 1
a275 1
    			} else {
d277 1
a277 1
    stringBuffer.append(getFeatureValueSetterPrefix("container", modelFacet.getChildMetaFeature(), false, importManager));
a278 2
    			}
    stringBuffer.append(TEXT_34);
d281 2
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d286 1
a286 1
    stringBuffer.append(node.getUniqueIdentifier());
a287 2
    		}
    stringBuffer.append(TEXT_38);
d297 2
a301 2
    stringBuffer.append(containerInterfaceName);
    stringBuffer.append(TEXT_41);
d304 2
d307 2
a309 2
    stringBuffer.append(TEXT_43);
    			} else {
d311 1
a311 1
    stringBuffer.append(getFeatureValueGetter("container", containmentMetaFeature, false, importManager));
d313 1
a313 1
    stringBuffer.append(upperContainmentBound);
a314 2
    			}
    stringBuffer.append(TEXT_47);
d319 2
d322 2
a324 2
    stringBuffer.append(TEXT_49);
    			} else {
d326 1
a326 1
    stringBuffer.append(getFeatureValueGetter("container", childMetaFeature, false, importManager));
d328 1
a328 1
    stringBuffer.append(upperChildBound);
d330 1
a330 1
    			}
a331 2
    		} 
    stringBuffer.append(TEXT_54);
d334 2
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EReference"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d341 2
a343 2
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.requests.CreateElementRequest"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EClass"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d351 1
a351 1
    }
a352 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_64);
@


1.5
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d206 1
a206 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.4
log
@[181771] Generator should tolerate absence of both containment and child meta features
@
text
@d221 1
a221 1
    if (modelFacet.getContainmentMetaFeature() == null && modelFacet.getChildMetaFeature() == null) {
@


1.3
log
@[174171]: getting rid of superfluous semicolons
@
text
@d28 32
a59 32
  protected final String TEXT_10 = NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_11 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "();" + NL + "\t\t}";
  protected final String TEXT_14 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_15 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_16 = " container = ((";
  protected final String TEXT_17 = ") getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_18 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_19 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}" + NL;
  protected final String TEXT_20 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_21 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_22 = " newElement = (";
  protected final String TEXT_23 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_24 = NL + "\t\t\t\t ";
  protected final String TEXT_25 = " container = (";
  protected final String TEXT_26 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_27 = NL + "\t\t\t\t\t";
  protected final String TEXT_28 = " featureValues = container.";
  protected final String TEXT_29 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_30 = NL + "\t\t\t\t \t";
  protected final String TEXT_31 = "newElement);";
  protected final String TEXT_32 = NL + "\t\t\t\t }";
  protected final String TEXT_33 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_34 = ".Initializers.";
  protected final String TEXT_35 = ".init(newElement);";
  protected final String TEXT_36 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_37 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\t";
  protected final String TEXT_38 = " container = (";
  protected final String TEXT_39 = ") getElementToEdit();";
  protected final String TEXT_40 = NL + "\t\t\tif (";
  protected final String TEXT_41 = " != null) {";
d61 5
a65 5
  protected final String TEXT_43 = ".size() >= ";
  protected final String TEXT_44 = ") {";
  protected final String TEXT_45 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_46 = NL + "\t\t\tif (";
  protected final String TEXT_47 = " != null) {";
d67 16
a82 14
  protected final String TEXT_49 = ".size() >= ";
  protected final String TEXT_50 = ") {";
  protected final String TEXT_51 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_53 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_54 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_55 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_56 = " resource = ((";
  protected final String TEXT_57 = ") getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_58 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_59 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_60 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_61 = NL + NL + "}";
  protected final String TEXT_62 = NL;
d194 1
a194 1
TypeModelFacet modelFacet = (TypeModelFacet) node.getModelFacet();
a198 1
/*GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();*/
d221 8
d231 1
a231 1
    stringBuffer.append(TEXT_10);
d233 1
a233 1
    stringBuffer.append(TEXT_11);
d235 1
a235 1
    stringBuffer.append(TEXT_12);
d237 1
a237 1
    stringBuffer.append(TEXT_13);
d239 1
a239 1
    stringBuffer.append(TEXT_14);
d241 1
a241 1
    stringBuffer.append(TEXT_15);
d243 1
a243 1
    stringBuffer.append(TEXT_16);
d245 1
a245 1
    stringBuffer.append(TEXT_17);
d247 1
a247 1
    stringBuffer.append(TEXT_18);
d249 1
a249 1
    stringBuffer.append(TEXT_19);
d255 1
a255 1
    stringBuffer.append(TEXT_20);
d257 1
a257 1
    stringBuffer.append(TEXT_21);
d259 1
a259 1
    stringBuffer.append(TEXT_22);
d261 1
a261 1
    stringBuffer.append(TEXT_23);
d264 1
a264 1
    stringBuffer.append(TEXT_24);
d266 1
a266 1
    stringBuffer.append(TEXT_25);
d268 1
a268 1
    stringBuffer.append(TEXT_26);
d270 1
a270 1
    stringBuffer.append(TEXT_27);
d272 1
a272 1
    stringBuffer.append(TEXT_28);
d274 1
a274 1
    stringBuffer.append(TEXT_29);
d276 1
a276 1
    stringBuffer.append(TEXT_30);
d278 1
a278 1
    stringBuffer.append(TEXT_31);
d280 1
a280 1
    stringBuffer.append(TEXT_32);
d283 1
a283 1
    stringBuffer.append(TEXT_33);
d285 1
a285 1
    stringBuffer.append(TEXT_34);
d287 1
a287 1
    stringBuffer.append(TEXT_35);
d289 1
a289 1
    stringBuffer.append(TEXT_36);
d299 1
a299 1
    stringBuffer.append(TEXT_37);
d301 1
a301 1
    stringBuffer.append(TEXT_38);
d303 1
a303 1
    stringBuffer.append(TEXT_39);
d306 1
a306 1
    stringBuffer.append(TEXT_40);
d308 1
a308 1
    stringBuffer.append(TEXT_41);
d310 1
a310 1
    stringBuffer.append(TEXT_42);
d312 1
a312 1
    stringBuffer.append(TEXT_43);
d314 1
a314 1
    stringBuffer.append(TEXT_44);
d316 1
a316 1
    stringBuffer.append(TEXT_45);
d321 1
a321 1
    stringBuffer.append(TEXT_46);
d323 1
a323 1
    stringBuffer.append(TEXT_47);
d325 1
a325 1
    stringBuffer.append(TEXT_48);
d327 1
a327 1
    stringBuffer.append(TEXT_49);
d329 1
a329 1
    stringBuffer.append(TEXT_50);
d331 1
a331 1
    stringBuffer.append(TEXT_51);
d333 1
a333 1
    stringBuffer.append(TEXT_52);
d336 1
a336 1
    stringBuffer.append(TEXT_53);
d338 1
a338 1
    stringBuffer.append(TEXT_54);
d340 1
a340 1
    stringBuffer.append(TEXT_55);
d342 1
a342 1
    stringBuffer.append(TEXT_56);
d344 1
a344 1
    stringBuffer.append(TEXT_57);
d346 1
a346 1
    stringBuffer.append(TEXT_58);
d348 1
a348 1
    stringBuffer.append(TEXT_59);
d350 1
a350 1
    stringBuffer.append(TEXT_60);
d352 1
a352 1
    stringBuffer.append(TEXT_61);
d354 1
a354 1
    stringBuffer.append(TEXT_62);
@


1.2
log
@Updating templates to support phantom elements.
@
text
@d31 1
a31 1
  protected final String TEXT_13 = "();" + NL + "\t\t};";
@


1.1
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d27 31
a57 31
  protected final String TEXT_9 = " req) {" + NL + "\t\t\tsuper(req);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_10 = " getEClassToEdit() {" + NL + "\t\t\treturn ";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "();" + NL + "\t\t};" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_13 = " getElementToEdit() {" + NL + "\t\t\t";
  protected final String TEXT_14 = " container = ((";
  protected final String TEXT_15 = ") getRequest()).getContainer();" + NL + "\t\t\tif (container instanceof ";
  protected final String TEXT_16 = ") {" + NL + "\t\t\t\tcontainer = ((";
  protected final String TEXT_17 = ") container).getElement();" + NL + "\t\t\t}" + NL + "\t\t\treturn container;" + NL + "\t\t}" + NL;
  protected final String TEXT_18 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_19 = " doDefaultElementCreation() {" + NL + "\t\t\t";
  protected final String TEXT_20 = " newElement = (";
  protected final String TEXT_21 = ") super.doDefaultElementCreation();" + NL + "\t\t\tif (newElement != null) {";
  protected final String TEXT_22 = NL + "\t\t\t\t ";
  protected final String TEXT_23 = " container = (";
  protected final String TEXT_24 = ") getElementToEdit();" + NL + "\t\t\t\t if (container != null) {";
  protected final String TEXT_25 = NL + "\t\t\t\t\t";
  protected final String TEXT_26 = " featureValues = container.";
  protected final String TEXT_27 = "();" + NL + "\t\t\t\t\tfeatureValues.add(newElement);";
  protected final String TEXT_28 = NL + "\t\t\t\t \t";
  protected final String TEXT_29 = "newElement);";
  protected final String TEXT_30 = NL + "\t\t\t\t }";
  protected final String TEXT_31 = "\t\t" + NL + "\t\t\t\t";
  protected final String TEXT_32 = ".Initializers.";
  protected final String TEXT_33 = ".init(newElement);";
  protected final String TEXT_34 = NL + "\t\t\t}" + NL + "\t\t\treturn newElement;" + NL + "\t\t}";
  protected final String TEXT_35 = NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\t";
  protected final String TEXT_36 = " container = (";
  protected final String TEXT_37 = ") getElementToEdit();";
  protected final String TEXT_38 = NL + "\t\t\tif (";
  protected final String TEXT_39 = " != null) {";
d59 5
a63 5
  protected final String TEXT_41 = ".size() >= ";
  protected final String TEXT_42 = ") {";
  protected final String TEXT_43 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_44 = NL + "\t\t\tif (";
  protected final String TEXT_45 = " != null) {";
d65 16
a80 14
  protected final String TEXT_47 = ".size() >= ";
  protected final String TEXT_48 = ") {";
  protected final String TEXT_49 = NL + "\t\t\t\treturn false;" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t\treturn true;" + NL + "\t\t}";
  protected final String TEXT_51 = NL + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic boolean canExecute() {" + NL + "\t\t\tif (getEClass() != null) {" + NL + "\t\t\t\treturn getEClass().isSuperTypeOf(getEClassToEdit());" + NL + "\t\t\t}" + NL + "\t\t\treturn true;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_52 = " getContainmentFeature() {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_53 = " doDefaultElementCreation() {" + NL + "\t\t\t// Uncomment to put \"phantom\" objects into the diagram file.\t\t" + NL + "\t\t\t//";
  protected final String TEXT_54 = " resource = ((";
  protected final String TEXT_55 = ") getRequest()).getContainer().eResource();" + NL + "\t\t\t//if (resource == null) {" + NL + "\t\t\t//\treturn null;" + NL + "\t\t\t//}" + NL + "\t\t\t";
  protected final String TEXT_56 = " resource = getElementToEdit().eResource();" + NL + "\t\t\t";
  protected final String TEXT_57 = " eClass = getElementType().getEClass();" + NL + "\t\t\t";
  protected final String TEXT_58 = " eObject = eClass.getEPackage().getEFactoryInstance().create(eClass);" + NL + "\t\t\tresource.getContents().add(eObject);" + NL + "\t\t\treturn eObject;" + NL + "\t\t}";
  protected final String TEXT_59 = NL + NL + "}";
  protected final String TEXT_60 = NL;
d197 2
a198 1
GenClass containerGenClass = modelFacet.getContainmentMetaFeature().getGenClass();
d220 3
d224 1
a224 1
    stringBuffer.append(TEXT_10);
d226 1
a226 1
    stringBuffer.append(TEXT_11);
d228 3
a230 1
    stringBuffer.append(TEXT_12);
d232 1
a232 1
    stringBuffer.append(TEXT_13);
d234 1
a234 1
    stringBuffer.append(TEXT_14);
d236 1
a236 1
    stringBuffer.append(TEXT_15);
d238 1
a238 1
    stringBuffer.append(TEXT_16);
d240 1
a240 1
    stringBuffer.append(TEXT_17);
d242 1
d246 1
a246 1
    stringBuffer.append(TEXT_18);
d248 1
a248 1
    stringBuffer.append(TEXT_19);
d250 1
a250 1
    stringBuffer.append(TEXT_20);
d252 1
a252 1
    stringBuffer.append(TEXT_21);
d255 1
a255 1
    stringBuffer.append(TEXT_22);
d257 1
a257 1
    stringBuffer.append(TEXT_23);
d259 1
a259 1
    stringBuffer.append(TEXT_24);
d261 1
a261 1
    stringBuffer.append(TEXT_25);
d263 1
a263 1
    stringBuffer.append(TEXT_26);
d265 1
a265 1
    stringBuffer.append(TEXT_27);
d267 1
a267 1
    stringBuffer.append(TEXT_28);
d269 1
a269 1
    stringBuffer.append(TEXT_29);
d271 1
a271 1
    stringBuffer.append(TEXT_30);
d274 1
a274 1
    stringBuffer.append(TEXT_31);
d276 1
a276 1
    stringBuffer.append(TEXT_32);
d278 1
a278 1
    stringBuffer.append(TEXT_33);
d280 1
a280 1
    stringBuffer.append(TEXT_34);
d290 1
a290 1
    stringBuffer.append(TEXT_35);
d292 1
a292 1
    stringBuffer.append(TEXT_36);
d294 1
a294 1
    stringBuffer.append(TEXT_37);
d297 1
a297 1
    stringBuffer.append(TEXT_38);
d299 1
a299 1
    stringBuffer.append(TEXT_39);
d301 1
a301 1
    stringBuffer.append(TEXT_40);
d303 1
a303 1
    stringBuffer.append(TEXT_41);
d305 1
a305 1
    stringBuffer.append(TEXT_42);
d307 1
a307 1
    stringBuffer.append(TEXT_43);
d312 1
a312 1
    stringBuffer.append(TEXT_44);
d314 1
a314 1
    stringBuffer.append(TEXT_45);
d316 1
a316 1
    stringBuffer.append(TEXT_46);
d318 1
a318 1
    stringBuffer.append(TEXT_47);
d320 1
a320 1
    stringBuffer.append(TEXT_48);
d322 1
a322 1
    stringBuffer.append(TEXT_49);
d324 1
a324 1
    stringBuffer.append(TEXT_50);
d327 1
a327 1
    stringBuffer.append(TEXT_51);
d329 1
a329 1
    stringBuffer.append(TEXT_52);
d331 1
a331 1
    stringBuffer.append(TEXT_53);
d333 1
a333 1
    stringBuffer.append(TEXT_54);
d335 1
a335 1
    stringBuffer.append(TEXT_55);
d337 1
a337 1
    stringBuffer.append(TEXT_56);
d339 1
a339 1
    stringBuffer.append(TEXT_57);
d341 1
a341 1
    stringBuffer.append(TEXT_58);
d343 1
a343 1
    stringBuffer.append(TEXT_59);
d345 1
a345 1
    stringBuffer.append(TEXT_60);
@

