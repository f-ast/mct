head	1.66;
access;
symbols
	v20081022-1925:1.66
	v20081015-1925:1.66
	v20081008-1925:1.66
	v20081001-1925:1.66
	v20080924-1925:1.66
	v20080917-1925:1.66
	v20080911-1728:1.66
	v20080910-1520:1.66
	v20080903-1520:1.66
	v20080827-1520:1.66
	v20080813-1520:1.66
	v20080806-1520:1.66
	v20070608-1300:1.64
	v20070605-1400:1.63
	v20070601-1400:1.62
	v20070525-1500:1.62
	v20070520-1200:1.61
	v20070518-1300:1.60
	v20070504-1000:1.60
	v20070427-0600:1.60
	v20070420-1000:1.59
	v20070413-1300:1.59
	v20070405-1100:1.59
	v20070403-1500:1.59
	v20070330-1300:1.59
	v20060330-1300:1.59
	v20070322-1100:1.59
	v20060316-0600:1.58
	v20070307-0700:1.58
	v20070301-1200:1.58
	v20070228-2000:1.58
	v20070221-1500:1.56
	v20070208-1800:1.56
	v20070202-0200:1.28.2.1
	v20070103-0300:1.52
	M4_20:1.52
	v20061222-1800:1.52
	v20061218-1200:1.50
	v20061214-0000:1.49
	v20061120-1300:1.49
	M3_20:1.49
	v20061117-0800:1.49
	v20061027-1200:1.28
	v20061020-1000:1.28
	v20061013-1330:1.44
	v20060919-0800:1.28
	v20060907-1100:1.28
	M1_20:1.28
	v20060904-1500:1.28
	v20060824-1600:1.28
	v20060817-1500:1.28
	v20060728-0500:1.28
	v20060713-1700:1.28
	R1_0_maintenance:1.28.0.2
	R1_0:1.28
	v20060627-1200:1.28
	v20060626-1420:1.28
	v20060620-0400:1.28
	v20060616-1400:1.28
	v20060616-1200:1.28
	v20060609-1400:1.26
	v20060531-1730:1.23
	v20060530-1930:1.23
	v20060526-1200:1.22
	v20060519-1300:1.22
	v20060519-0800:1.22
	v20060512-1000:1.20
	I20060512-1000:1.20
	I20060505-1400:1.20
	I20060428-1300:1.20
	I20060424-0500:1.20
	I20060424-0300:1.20
	M6_10:1.20
	I20060407-1200:1.17
	I20060331-1000:1.16
	I20060324-0300:1.16
	I20060317-1300:1.16
	I20060317-1200:1.16
	I20060316-1300:1.16
	I20060309-1300:1.15
	M5_10:1.14
	S20060303-1600:1.14
	I20060227-1730:1.14
	I20060216-1945:1.14
	I20060210-1715:1.13
	I20060209-1815:1.13
	I20060203-0830:1.9
	I20060202-1415:1.9
	I20060129-1145:1.9
	I20060127-0900:1.9
	I20060120-1530:1.8
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.6
	I20051208-2000:1.6
	I20051201-1800:1.6
	I20051124-2000:1.6
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.5
	I20051106-0900:1.5
	v20051030:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.66
date	2007.06.12.14.18.40;	author ashatalin;	state dead;
branches;
next	1.65;
commitid	6fec466eab3f4567;

1.65
date	2007.06.10.10.34.13;	author ashatalin;	state Exp;
branches;
next	1.64;
commitid	e4e466bd3a44567;

1.64
date	2007.06.07.16.07.47;	author ashatalin;	state Exp;
branches;
next	1.63;
commitid	36a046682d514567;

1.63
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches;
next	1.62;
commitid	17ef46643bcf4567;

1.62
date	2007.05.22.18.18.54;	author ashatalin;	state Exp;
branches;
next	1.61;
commitid	5a1d465333ad4567;

1.61
date	2007.05.20.12.56.51;	author mfeldman;	state Exp;
branches;
next	1.60;
commitid	7de14650454a4567;

1.60
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.59;
commitid	78b462dc68e4567;

1.59
date	2007.03.20.20.15.02;	author ashatalin;	state Exp;
branches;
next	1.58;
commitid	1c03460040bd4567;

1.58
date	2007.02.23.14.41.18;	author ashatalin;	state Exp;
branches;
next	1.57;
commitid	211e45defd0c4567;

1.57
date	2007.02.22.19.49.50;	author ashatalin;	state Exp;
branches;
next	1.56;
commitid	299645ddf3da4567;

1.56
date	2007.02.07.12.05.15;	author ashatalin;	state Exp;
branches;
next	1.55;
commitid	37da45c9c07a4567;

1.55
date	2007.01.29.14.20.31;	author dstadnik;	state Exp;
branches;
next	1.54;
commitid	69ed45be02ac4567;

1.54
date	2007.01.26.19.01.05;	author atikhomirov;	state Exp;
branches;
next	1.53;
commitid	792e45ba4ff04567;

1.53
date	2007.01.26.15.15.51;	author dstadnik;	state Exp;
branches;
next	1.52;
commitid	22b345ba1b264567;

1.52
date	2006.12.19.16.16.51;	author ashatalin;	state Exp;
branches;
next	1.51;
commitid	284a458810724567;

1.51
date	2006.12.18.18.20.51;	author dstadnik;	state Exp;
branches;
next	1.50;
commitid	7d774586dbfa4567;

1.50
date	2006.12.14.19.02.25;	author dstadnik;	state Exp;
branches;
next	1.49;
commitid	408e45819fb94567;

1.49
date	2006.11.16.19.24.51;	author atikhomirov;	state Exp;
branches;
next	1.48;
commitid	1423455cbb014567;

1.48
date	2006.11.10.15.39.57;	author ashatalin;	state Exp;
branches;
next	1.47;
commitid	6da745549d4c4567;

1.47
date	2006.10.24.19.20.43;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.10.24.15.08.25;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.10.24.14.49.09;	author ashatalin;	state Exp;
branches;
next	1.44;

1.44
date	2006.10.09.17.30.47;	author dstadnik;	state Exp;
branches;
next	1.43;

1.43
date	2006.10.06.11.47.59;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.10.05.18.43.33;	author atikhomirov;	state Exp;
branches;
next	1.41;

1.41
date	2006.10.03.16.47.11;	author ashatalin;	state Exp;
branches;
next	1.40;

1.40
date	2006.09.29.18.04.08;	author atikhomirov;	state Exp;
branches;
next	1.39;

1.39
date	2006.09.29.17.06.31;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.09.29.16.10.37;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.09.29.12.15.04;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.09.27.20.39.06;	author atikhomirov;	state Exp;
branches;
next	1.35;

1.35
date	2006.09.22.13.21.22;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.09.21.12.14.21;	author atikhomirov;	state Exp;
branches;
next	1.33;

1.33
date	2006.09.15.21.37.49;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.09.15.20.44.31;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.09.14.18.01.23;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.09.13.16.11.04;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2006.09.13.10.50.46;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.13.13.28.06;	author ashatalin;	state Exp;
branches
	1.28.2.1;
next	1.27;

1.27
date	2006.06.12.14.02.09;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.06.09.10.15.47;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.06.01.09.04.14;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.05.17.12.38.17;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.05.16.07.30.34;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.08.16.56.36;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.11.41.49;	author dstadnik;	state dead;
branches;
next	1.17;

1.17
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.03.14.19.19.46;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2006.02.08.16.27.57;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.17.10.55.00;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.12.11.43.59;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.24.10.07.29;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.18.10.16.44;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	;

1.28.2.1
date	2007.01.26.14.04.38;	author mfeldman;	state Exp;
branches;
next	;
commitid	3b7045ba0a764567;


desc
@@


1.66
log
@[191856] - Convert /editor/Editor.javajet template to xpand
[192134] - NPE while regenerating TaiPan diagram (in editor template)
@
text
@package org.eclipse.gmf.codegen.templates.editor;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class EditorGenerator
{
  protected static String nl;
  public static synchronized EditorGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    EditorGenerator result = new EditorGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends DiagramDocumentEditor";
  protected final String TEXT_6 = NL + "\t\timplements ";
  protected final String TEXT_7 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ID = \"";
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String CONTEXT_ID = \"";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_11 = ");" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getContextID() {" + NL + "\t\treturn CONTEXT_ID;" + NL + "\t}" + NL;
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\tPaletteRoot root = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\tnew ";
  protected final String TEXT_13 = "().fillPalette(root);" + NL + "\t\treturn root;" + NL + "\t}";
  protected final String TEXT_14 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_15 = " getPreferencesHint() {";
  protected final String TEXT_16 = NL + "\t\treturn ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_19 = ".ID;" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_21 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_23 = " getDocumentProvider(";
  protected final String TEXT_24 = " input) {" + NL + "\t\tif (";
  protected final String TEXT_25 = "input instanceof ";
  protected final String TEXT_26 = " || ";
  protected final String TEXT_27 = "input instanceof ";
  protected final String TEXT_28 = ") {" + NL + "\t\t\treturn ";
  protected final String TEXT_29 = ".getInstance().getDocumentProvider();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public ";
  protected final String TEXT_30 = " getEditingDomain() {" + NL + "    \torg.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;" + NL + "    \tif (document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {" + NL + "    \t\treturn ((org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document).getEditingDomain();" + NL + "    \t}" + NL + "        return super.getEditingDomain();" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_31 = " input) {" + NL + "\t\tif (";
  protected final String TEXT_32 = "input instanceof ";
  protected final String TEXT_33 = " || ";
  protected final String TEXT_34 = "input instanceof ";
  protected final String TEXT_35 = ") {" + NL + "\t\t\tsetDocumentProvider(";
  protected final String TEXT_36 = ".getInstance().getDocumentProvider());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_38 = " marker) {";
  protected final String TEXT_39 = NL + "        ";
  protected final String TEXT_40 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_41 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_42 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_43 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_44 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_45 = " dialog = new ";
  protected final String TEXT_46 = "(shell);" + NL + "\t\t";
  protected final String TEXT_47 = " original = input instanceof ";
  protected final String TEXT_48 = " ? ((";
  protected final String TEXT_49 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_50 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_51 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_52 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_53 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_54 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_55 = " workspaceRoot = ";
  protected final String TEXT_56 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_57 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_58 = " newInput = new ";
  protected final String TEXT_59 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_60 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_61 = "[] editorRefs = ";
  protected final String TEXT_62 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_64 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_65 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_66 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_67 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_69 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_70 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_71 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_72 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_73 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_74 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public ";
  protected final String TEXT_76 = " getShowInContext() {" + NL + "    \treturn new ShowInContext(getEditorInput(), getNavigatorSelection());" + NL + "    }" + NL;
  protected final String TEXT_77 = "    " + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    private ";
  protected final String TEXT_78 = " getNavigatorSelection() {";
  protected final String TEXT_79 = NL + "        ";
  protected final String TEXT_80 = " document = getDiagramDocument();" + NL + "\t\tif (document == null) {" + NL + "\t\t\treturn ";
  protected final String TEXT_81 = ".EMPTY;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_82 = " diagram = document.getDiagram();" + NL + "\t\t";
  protected final String TEXT_83 = " file = ";
  protected final String TEXT_84 = ".getFile(diagram.eResource());" + NL + "\t\tif (file != null) {" + NL + "\t\t\t";
  protected final String TEXT_85 = " item = new ";
  protected final String TEXT_86 = "(diagram, file, false);" + NL + "\t\t\treturn new ";
  protected final String TEXT_87 = "(item);" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_88 = ".EMPTY;" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class required) {" + NL + "\t\tif (required == ";
  protected final String TEXT_89 = ".class) {" + NL + "\t\t\treturn new ";
  protected final String TEXT_90 = "() {" + NL + "\t\t\t\tpublic String[] getShowInTargetIds() {" + NL + "\t\t\t\t\treturn new String[] { ";
  protected final String TEXT_91 = ".VIEW_ID };" + NL + "\t\t\t\t}" + NL + "" + NL + "\t\t\t};" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(required);" + NL + "\t}";
  protected final String TEXT_92 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_93 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_94 = " viewer, ";
  protected final String TEXT_95 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_96 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_97 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_98 = " uris = new ";
  protected final String TEXT_99 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_100 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_101 = " selection = (";
  protected final String TEXT_102 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_103 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_104 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_105 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_106 = " view = ((";
  protected final String TEXT_107 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t} else ";
  protected final String TEXT_108 = "if (nextSelectedObject instanceof ";
  protected final String TEXT_109 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_110 = " adaptable = (";
  protected final String TEXT_111 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\tnextSelectedObject = adaptable.getAdapter(";
  protected final String TEXT_112 = ".class);" + NL + "\t\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_113 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_114 = " modelElement = (";
  protected final String TEXT_115 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_116 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_117 = " result = new ";
  protected final String TEXT_118 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_119 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_120 = " nextURI = (";
  protected final String TEXT_121 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_123 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_124 = NL + "\t" + NL + "}";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenEditorView genEditor = (GenEditorView) ((Object[]) argument)[0];
final GenDiagram genDiagram = genEditor.getEditorGen().getDiagram();
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenPropertySheet propertySheet = genDiagram.getEditorGen().getPropertySheet();
importManager.registerInnerClass("DropTargetListener");

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genEditor.getClassName());
    stringBuffer.append(TEXT_5);
    
Set<String> ifaces = new LinkedHashSet<String>();
if (genEditor.getEditorGen().getApplication() == null) {
	ifaces.add(importManager.getImportedName("org.eclipse.ui.ide.IGotoMarker"));
}
if (propertySheet != null && propertySheet.isReadOnly()) {
	ifaces.add(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor"));
}
if (!ifaces.isEmpty()) {

    stringBuffer.append(TEXT_6);
    stringBuffer.append(ifaces.toString().substring(1, ifaces.toString().length() - 1));
    }
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genEditor.getID());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(genEditor.getContextID());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(genEditor.getClassName());
    stringBuffer.append(TEXT_10);
    stringBuffer.append(genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout());
    stringBuffer.append(TEXT_11);
    if (genDiagram.getPalette() != null) {
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
    stringBuffer.append(TEXT_15);
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
    stringBuffer.append(TEXT_16);
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
    stringBuffer.append(TEXT_17);
    if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/
    stringBuffer.append(TEXT_18);
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
    stringBuffer.append(TEXT_19);
    } else {
    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage"));
    stringBuffer.append(TEXT_21);
    }
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_24);
    if (genDiagram.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_25);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
    stringBuffer.append(TEXT_26);
    }
    stringBuffer.append(TEXT_27);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("TransactionalEditingDomain"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_31);
    if (genDiagram.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
    stringBuffer.append(TEXT_33);
    }
    stringBuffer.append(TEXT_34);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_35);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
    stringBuffer.append(TEXT_36);
    if (genDiagram.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_37);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
    stringBuffer.append(TEXT_38);
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_44);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
    stringBuffer.append(TEXT_49);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
    stringBuffer.append(TEXT_50);
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
    stringBuffer.append(TEXT_51);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
    stringBuffer.append(TEXT_52);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
    stringBuffer.append(TEXT_53);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
    stringBuffer.append(TEXT_55);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
    stringBuffer.append(TEXT_56);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_58);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
    stringBuffer.append(TEXT_59);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_64);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
    stringBuffer.append(TEXT_65);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_67);
    }

if (genDiagram.generateCreateShortcutAction()) {
    stringBuffer.append(TEXT_68);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer"));
    stringBuffer.append(TEXT_74);
    if (genEditor.getEditorGen().getApplication() == null) {
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.ShowInContext"));
    stringBuffer.append(TEXT_76);
    
	/*
		Similar to NavigatorLinkHelper.xpt
	*/

    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.ISelection"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument"));
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_83);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.StructuredSelection"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.IShowInTargetList"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.IShowInTargetList"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.navigator.resources.ProjectExplorer"));
    stringBuffer.append(TEXT_91);
    }
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPartViewer"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.Transfer"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
    stringBuffer.append(TEXT_98);
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
    stringBuffer.append(TEXT_99);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_101);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
    stringBuffer.append(TEXT_102);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_103);
    
/*
 * TODO: move NavigatorItem to some place available in runtime and remove 
 * "genEditor.getEditorGen().getNavigator() != null" test
 */
	if (genEditor.getEditorGen().getNavigator() != null) {
    stringBuffer.append(TEXT_104);
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_105);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
    stringBuffer.append(TEXT_106);
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
    stringBuffer.append(TEXT_107);
    }
    stringBuffer.append(TEXT_108);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_109);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_110);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
    stringBuffer.append(TEXT_111);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_113);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_114);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_115);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
    stringBuffer.append(TEXT_116);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_117);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_118);
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_119);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_120);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
    stringBuffer.append(TEXT_121);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
    stringBuffer.append(TEXT_122);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
    stringBuffer.append(TEXT_123);
    }
    stringBuffer.append(TEXT_124);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}
@


1.65
log
@[182535] - Show In action doesn't work for generated diagram
@
text
@@


1.64
log
@[182535] - Show In action doesn't work for generated diagram
@
text
@d330 1
a330 1
    stringBuffer.append(importManager.getImportedName("IDiagramDocument"));
@


1.63
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@d92 51
a142 33
  protected final String TEXT_74 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_75 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_76 = " viewer, ";
  protected final String TEXT_77 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_78 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_79 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_80 = " uris = new ";
  protected final String TEXT_81 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_82 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_83 = " selection = (";
  protected final String TEXT_84 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_85 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_86 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_87 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_88 = " view = ((";
  protected final String TEXT_89 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t} else ";
  protected final String TEXT_90 = "if (nextSelectedObject instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_92 = " adaptable = (";
  protected final String TEXT_93 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\tnextSelectedObject = adaptable.getAdapter(";
  protected final String TEXT_94 = ".class);" + NL + "\t\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_96 = " modelElement = (";
  protected final String TEXT_97 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_98 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_99 = " result = new ";
  protected final String TEXT_100 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_101 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_102 = " nextURI = (";
  protected final String TEXT_103 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_104 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_105 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_106 = NL + "\t" + NL + "}";
d317 39
d357 1
a357 1
    stringBuffer.append(TEXT_75);
d359 1
a359 1
    stringBuffer.append(TEXT_76);
d361 1
a361 1
    stringBuffer.append(TEXT_77);
d363 1
a363 1
    stringBuffer.append(TEXT_78);
d365 1
a365 1
    stringBuffer.append(TEXT_79);
d367 1
a367 1
    stringBuffer.append(TEXT_80);
d369 1
a369 1
    stringBuffer.append(TEXT_81);
d371 1
a371 1
    stringBuffer.append(TEXT_82);
d373 1
a373 1
    stringBuffer.append(TEXT_83);
d375 1
a375 1
    stringBuffer.append(TEXT_84);
d377 1
a377 1
    stringBuffer.append(TEXT_85);
d384 1
a384 1
    stringBuffer.append(TEXT_86);
d386 1
a386 1
    stringBuffer.append(TEXT_87);
d388 1
a388 1
    stringBuffer.append(TEXT_88);
d390 1
a390 1
    stringBuffer.append(TEXT_89);
d392 1
a392 1
    stringBuffer.append(TEXT_90);
d394 1
a394 1
    stringBuffer.append(TEXT_91);
d396 1
a396 1
    stringBuffer.append(TEXT_92);
d398 1
a398 1
    stringBuffer.append(TEXT_93);
d400 1
a400 1
    stringBuffer.append(TEXT_94);
d402 1
a402 1
    stringBuffer.append(TEXT_95);
d404 1
a404 1
    stringBuffer.append(TEXT_96);
d406 1
a406 1
    stringBuffer.append(TEXT_97);
d408 1
a408 1
    stringBuffer.append(TEXT_98);
d410 1
a410 1
    stringBuffer.append(TEXT_99);
d412 1
a412 1
    stringBuffer.append(TEXT_100);
d414 1
a414 1
    stringBuffer.append(TEXT_101);
d416 1
a416 1
    stringBuffer.append(TEXT_102);
d418 1
a418 1
    stringBuffer.append(TEXT_103);
d420 1
a420 1
    stringBuffer.append(TEXT_104);
d422 1
a422 1
    stringBuffer.append(TEXT_105);
d424 1
a424 1
    stringBuffer.append(TEXT_106);
@


1.62
log
@F5 triggering update of selected element added
@
text
@d18 1
a18 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.61
log
@Anna Karyakina's migration fix
@
text
@d26 99
a124 98
  protected final String TEXT_8 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_9 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_10 = ");" + NL + "\t}" + NL;
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\tPaletteRoot root = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\tnew ";
  protected final String TEXT_12 = "().fillPalette(root);" + NL + "\t\treturn root;" + NL + "\t}";
  protected final String TEXT_13 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_14 = " getPreferencesHint() {";
  protected final String TEXT_15 = NL + "\t\treturn ";
  protected final String TEXT_16 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_18 = ".ID;" + NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_20 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_22 = " getDocumentProvider(";
  protected final String TEXT_23 = " input) {" + NL + "\t\tif (";
  protected final String TEXT_24 = "input instanceof ";
  protected final String TEXT_25 = " || ";
  protected final String TEXT_26 = "input instanceof ";
  protected final String TEXT_27 = ") {" + NL + "\t\t\treturn ";
  protected final String TEXT_28 = ".getInstance().getDocumentProvider();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public ";
  protected final String TEXT_29 = " getEditingDomain() {" + NL + "    \torg.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;" + NL + "    \tif (document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {" + NL + "    \t\treturn ((org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document).getEditingDomain();" + NL + "    \t}" + NL + "        return super.getEditingDomain();" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_30 = " input) {" + NL + "\t\tif (";
  protected final String TEXT_31 = "input instanceof ";
  protected final String TEXT_32 = " || ";
  protected final String TEXT_33 = "input instanceof ";
  protected final String TEXT_34 = ") {" + NL + "\t\t\tsetDocumentProvider(";
  protected final String TEXT_35 = ".getInstance().getDocumentProvider());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_37 = " marker) {";
  protected final String TEXT_38 = NL + "        ";
  protected final String TEXT_39 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_40 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_41 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_42 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_43 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_44 = " dialog = new ";
  protected final String TEXT_45 = "(shell);" + NL + "\t\t";
  protected final String TEXT_46 = " original = input instanceof ";
  protected final String TEXT_47 = " ? ((";
  protected final String TEXT_48 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_49 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_50 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_51 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_52 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_53 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_54 = " workspaceRoot = ";
  protected final String TEXT_55 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_56 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_57 = " newInput = new ";
  protected final String TEXT_58 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_59 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_60 = "[] editorRefs = ";
  protected final String TEXT_61 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_62 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_63 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_64 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_65 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_66 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_68 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_69 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_70 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_71 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_72 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_73 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_74 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_75 = " viewer, ";
  protected final String TEXT_76 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_77 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_78 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_79 = " uris = new ";
  protected final String TEXT_80 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_81 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_82 = " selection = (";
  protected final String TEXT_83 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_84 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_85 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_86 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_87 = " view = ((";
  protected final String TEXT_88 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t} else ";
  protected final String TEXT_89 = "if (nextSelectedObject instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_91 = " adaptable = (";
  protected final String TEXT_92 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\tnextSelectedObject = adaptable.getAdapter(";
  protected final String TEXT_93 = ".class);" + NL + "\t\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_94 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_95 = " modelElement = (";
  protected final String TEXT_96 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_97 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_98 = " result = new ";
  protected final String TEXT_99 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_100 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_101 = " nextURI = (";
  protected final String TEXT_102 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_103 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_104 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_105 = NL + "\t" + NL + "}";
d166 2
d169 1
a169 1
    stringBuffer.append(TEXT_9);
d171 1
a171 1
    stringBuffer.append(TEXT_10);
d173 1
a173 1
    stringBuffer.append(TEXT_11);
d175 1
a175 1
    stringBuffer.append(TEXT_12);
d177 1
a177 1
    stringBuffer.append(TEXT_13);
d179 1
a179 1
    stringBuffer.append(TEXT_14);
d181 1
a181 1
    stringBuffer.append(TEXT_15);
d183 1
a183 1
    stringBuffer.append(TEXT_16);
d185 1
a185 1
    stringBuffer.append(TEXT_17);
d187 1
a187 1
    stringBuffer.append(TEXT_18);
d189 1
a189 1
    stringBuffer.append(TEXT_19);
d191 1
a191 1
    stringBuffer.append(TEXT_20);
d193 1
a193 1
    stringBuffer.append(TEXT_21);
d195 1
a195 1
    stringBuffer.append(TEXT_22);
d197 1
a197 1
    stringBuffer.append(TEXT_23);
d199 1
a199 1
    stringBuffer.append(TEXT_24);
d201 1
a201 1
    stringBuffer.append(TEXT_25);
d203 1
a203 1
    stringBuffer.append(TEXT_26);
d205 1
a205 1
    stringBuffer.append(TEXT_27);
d207 1
a207 1
    stringBuffer.append(TEXT_28);
d209 1
a209 1
    stringBuffer.append(TEXT_29);
d211 1
a211 1
    stringBuffer.append(TEXT_30);
d213 1
a213 1
    stringBuffer.append(TEXT_31);
d215 1
a215 1
    stringBuffer.append(TEXT_32);
d217 1
a217 1
    stringBuffer.append(TEXT_33);
d219 1
a219 1
    stringBuffer.append(TEXT_34);
d221 1
a221 1
    stringBuffer.append(TEXT_35);
d223 1
a223 1
    stringBuffer.append(TEXT_36);
a224 1
    stringBuffer.append(TEXT_37);
d226 1
d228 1
a228 1
    stringBuffer.append(TEXT_39);
d230 1
a230 1
    stringBuffer.append(TEXT_40);
d232 1
a232 1
    stringBuffer.append(TEXT_41);
d234 1
a234 1
    stringBuffer.append(TEXT_42);
a235 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d239 2
a241 2
    stringBuffer.append(TEXT_46);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d245 2
d248 1
a248 1
    stringBuffer.append(TEXT_49);
d250 1
a250 1
    stringBuffer.append(TEXT_50);
d252 1
a252 1
    stringBuffer.append(TEXT_51);
d254 1
a254 1
    stringBuffer.append(TEXT_52);
d256 1
a256 1
    stringBuffer.append(TEXT_53);
d258 1
a258 1
    stringBuffer.append(TEXT_54);
d260 1
a260 1
    stringBuffer.append(TEXT_55);
d262 1
a262 1
    stringBuffer.append(TEXT_56);
d264 1
a264 1
    stringBuffer.append(TEXT_57);
d266 1
a266 1
    stringBuffer.append(TEXT_58);
d268 1
a268 1
    stringBuffer.append(TEXT_59);
d270 1
a270 1
    stringBuffer.append(TEXT_60);
d272 1
a272 1
    stringBuffer.append(TEXT_61);
d274 1
a274 1
    stringBuffer.append(TEXT_62);
a275 2
    stringBuffer.append(TEXT_63);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d279 2
d282 1
a282 1
    stringBuffer.append(TEXT_66);
d286 1
a286 1
    stringBuffer.append(TEXT_67);
d288 1
a288 1
    stringBuffer.append(TEXT_68);
d290 1
a290 1
    stringBuffer.append(TEXT_69);
d292 1
a292 1
    stringBuffer.append(TEXT_70);
d294 1
a294 1
    stringBuffer.append(TEXT_71);
d296 1
a296 1
    stringBuffer.append(TEXT_72);
d298 1
a298 1
    stringBuffer.append(TEXT_73);
d300 1
a300 1
    stringBuffer.append(TEXT_74);
d302 1
a302 1
    stringBuffer.append(TEXT_75);
d304 1
a304 1
    stringBuffer.append(TEXT_76);
d306 1
a306 1
    stringBuffer.append(TEXT_77);
d308 1
a308 1
    stringBuffer.append(TEXT_78);
d310 1
a310 1
    stringBuffer.append(TEXT_79);
a311 2
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
d317 2
d320 1
a320 1
    stringBuffer.append(TEXT_84);
d327 1
a327 1
    stringBuffer.append(TEXT_85);
d329 1
a329 1
    stringBuffer.append(TEXT_86);
d331 1
a331 1
    stringBuffer.append(TEXT_87);
d333 1
a333 1
    stringBuffer.append(TEXT_88);
a334 2
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d348 2
d351 1
a351 1
    stringBuffer.append(TEXT_97);
d353 1
a353 1
    stringBuffer.append(TEXT_98);
d355 1
a355 1
    stringBuffer.append(TEXT_99);
a356 2
    stringBuffer.append(TEXT_100);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d360 2
d363 1
a363 1
    stringBuffer.append(TEXT_103);
d365 1
a365 1
    stringBuffer.append(TEXT_104);
d367 1
a367 1
    stringBuffer.append(TEXT_105);
@


1.60
log
@follow consisted spacing policy
@
text
@d19 105
a123 106
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends DiagramDocumentEditor";
  protected final String TEXT_7 = NL + "\t\timplements ";
  protected final String TEXT_8 = NL + "{" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ID = \"";
  protected final String TEXT_9 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_11 = ");" + NL + "\t}" + NL;
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\tPaletteRoot root = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\tnew ";
  protected final String TEXT_13 = "().fillPalette(root);" + NL + "\t\treturn root;" + NL + "\t}";
  protected final String TEXT_14 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_15 = " getPreferencesHint() {";
  protected final String TEXT_16 = NL + "\t\treturn ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_18 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_19 = ".ID;" + NL + "\t}";
  protected final String TEXT_20 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_21 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_22 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_23 = " getDocumentProvider(";
  protected final String TEXT_24 = " input) {" + NL + "\t\tif (";
  protected final String TEXT_25 = "input instanceof ";
  protected final String TEXT_26 = " || ";
  protected final String TEXT_27 = "input instanceof ";
  protected final String TEXT_28 = ") {" + NL + "\t\t\treturn ";
  protected final String TEXT_29 = ".getInstance().getDocumentProvider();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public ";
  protected final String TEXT_30 = " getEditingDomain() {" + NL + "    \torg.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;" + NL + "    \tif (document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {" + NL + "    \t\treturn ((org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document).getEditingDomain();" + NL + "    \t}" + NL + "        return super.getEditingDomain();" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_31 = " input) {" + NL + "\t\tif (";
  protected final String TEXT_32 = "input instanceof ";
  protected final String TEXT_33 = " || ";
  protected final String TEXT_34 = "input instanceof ";
  protected final String TEXT_35 = ") {" + NL + "\t\t\tsetDocumentProvider(";
  protected final String TEXT_36 = ".getInstance().getDocumentProvider());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "\t";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_38 = " marker) {";
  protected final String TEXT_39 = NL + "        ";
  protected final String TEXT_40 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_41 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_42 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_43 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_44 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_45 = " dialog = new ";
  protected final String TEXT_46 = "(shell);" + NL + "\t\t";
  protected final String TEXT_47 = " original = input instanceof ";
  protected final String TEXT_48 = " ? ((";
  protected final String TEXT_49 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_50 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_51 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_52 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_53 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_54 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_55 = " workspaceRoot = ";
  protected final String TEXT_56 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_57 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_58 = " newInput = new ";
  protected final String TEXT_59 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_60 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_61 = "[] editorRefs = ";
  protected final String TEXT_62 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_64 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_65 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_66 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_67 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_68 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_69 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_70 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_71 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_72 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_73 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_74 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_75 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_76 = " viewer, ";
  protected final String TEXT_77 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_78 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_79 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_80 = " uris = new ";
  protected final String TEXT_81 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_82 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_83 = " selection = (";
  protected final String TEXT_84 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_85 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_86 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_87 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_88 = " view = ((";
  protected final String TEXT_89 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t} else ";
  protected final String TEXT_90 = "if (nextSelectedObject instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_92 = " adaptable = (";
  protected final String TEXT_93 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\tnextSelectedObject = adaptable.getAdapter(";
  protected final String TEXT_94 = ".class);" + NL + "\t\t\t\t\t}" + NL + "\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_95 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_96 = " modelElement = (";
  protected final String TEXT_97 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_98 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_99 = " result = new ";
  protected final String TEXT_100 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_101 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_102 = " nextURI = (";
  protected final String TEXT_103 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_104 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_105 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_106 = NL + "\t" + NL + "}";
a134 1
    stringBuffer.append(TEXT_1);
d139 2
a141 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d144 2
d147 1
a147 1
    importManager.markImportLocation(stringBuffer);
a148 2
    stringBuffer.append(genEditor.getClassName());
    stringBuffer.append(TEXT_6);
d159 1
a159 1
    stringBuffer.append(TEXT_7);
d162 2
d165 1
a165 1
    stringBuffer.append(genEditor.getID());
d167 1
a167 1
    stringBuffer.append(genEditor.getClassName());
d169 1
a169 1
    stringBuffer.append(genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout());
d171 1
a171 1
    if (genDiagram.getPalette() != null) {
d173 1
a173 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
d175 1
a175 1
    }
d177 1
a177 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
d179 1
a179 1
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
d181 2
a183 2
    stringBuffer.append(TEXT_17);
    if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/
d185 1
a185 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d187 1
a187 1
    } else {
d189 1
a189 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage"));
d191 1
a191 1
    }
d193 1
a193 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d195 1
a195 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d197 1
a197 1
    if (genDiagram.getEditorGen().getApplication() == null) {
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d201 1
a201 1
    }
d203 1
a203 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d205 1
a205 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d207 1
a207 1
    stringBuffer.append(importManager.getImportedName("TransactionalEditingDomain"));
d209 1
a209 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d211 1
a211 1
    if (genDiagram.getEditorGen().getApplication() == null) {
d213 1
a213 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d215 1
a215 1
    }
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d219 1
a219 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d221 1
a221 1
    if (genDiagram.getEditorGen().getApplication() == null) {
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d224 1
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d240 1
a240 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d258 1
a258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d262 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d264 1
a264 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
d268 1
a268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
d270 1
a270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d272 1
a272 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d274 1
a274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
a279 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_67);
d283 2
d286 2
a288 2
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d290 1
a290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
d292 2
a294 2
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer"));
d298 1
a298 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPartViewer"));
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.Transfer"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
a317 2
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_85);
d324 2
d327 2
a329 2
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d331 1
a331 1
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
d333 1
a333 1
    }
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IAdaptable"));
d347 1
a347 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d355 1
a355 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d359 1
a359 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d361 1
a361 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d363 1
a363 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
a364 2
    }
    stringBuffer.append(TEXT_106);
@


1.59
log
@NavigatorReference type constant name corrected.
Generating wrapper for domain model navigator nodes to preserve navigator tree selection/expansion on model files reload.
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d142 1
a142 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.58
log
@Removing additional dependencied to make the code compilable with RCP.
@
text
@d107 2
a108 2
  protected final String TEXT_89 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_90 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
d110 15
a124 11
  protected final String TEXT_92 = " modelElement = (";
  protected final String TEXT_93 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_94 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_95 = " result = new ";
  protected final String TEXT_96 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_97 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_98 = " nextURI = (";
  protected final String TEXT_99 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_100 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_101 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_102 = NL + "\t" + NL + "}";
d333 1
a333 1
    	}
d335 6
d342 3
a344 1
    stringBuffer.append(TEXT_91);
d346 1
a346 1
    stringBuffer.append(TEXT_92);
d348 1
a348 1
    stringBuffer.append(TEXT_93);
d350 1
a350 1
    stringBuffer.append(TEXT_94);
d352 1
a352 1
    stringBuffer.append(TEXT_95);
d354 1
a354 1
    stringBuffer.append(TEXT_96);
d356 1
a356 1
    stringBuffer.append(TEXT_97);
d358 1
a358 1
    stringBuffer.append(TEXT_98);
d360 1
a360 1
    stringBuffer.append(TEXT_99);
d362 1
a362 1
    stringBuffer.append(TEXT_100);
d364 1
a364 1
    stringBuffer.append(TEXT_101);
d366 1
a366 1
    stringBuffer.append(TEXT_102);
@


1.57
log
@[175169] - Double-click on diagram in Project Explorer should open corresponding diagram editor as before
@
text
@d54 67
a120 68
  protected final String TEXT_36 = ".getInstance().getDocumentProvider());" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_37 = "());" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_39 = " marker) {";
  protected final String TEXT_40 = NL + "        ";
  protected final String TEXT_41 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_42 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_43 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_44 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_45 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_46 = " dialog = new ";
  protected final String TEXT_47 = "(shell);" + NL + "\t\t";
  protected final String TEXT_48 = " original = input instanceof ";
  protected final String TEXT_49 = " ? ((";
  protected final String TEXT_50 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_51 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_52 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_53 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_54 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_55 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_56 = " workspaceRoot = ";
  protected final String TEXT_57 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_58 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_59 = " newInput = new ";
  protected final String TEXT_60 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_61 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_62 = "[] editorRefs = ";
  protected final String TEXT_63 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_65 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_66 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_67 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_68 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_69 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_70 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_71 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_72 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_73 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_74 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_75 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_76 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_77 = " viewer, ";
  protected final String TEXT_78 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_79 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_80 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_81 = " uris = new ";
  protected final String TEXT_82 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_83 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_84 = " selection = (";
  protected final String TEXT_85 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_86 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_87 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_89 = " view = ((";
  protected final String TEXT_90 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_91 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_92 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_93 = " modelElement = (";
  protected final String TEXT_94 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_95 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_96 = " result = new ";
  protected final String TEXT_97 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_98 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " nextURI = (";
  protected final String TEXT_100 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_101 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_102 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_103 = NL + "\t" + NL + "}";
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d219 1
a219 1
    if (genDiagram.getEditorGen().getApplication() == null) {
a220 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d222 1
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d230 1
a230 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d236 1
a236 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d238 1
a238 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d242 1
a242 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d246 1
a246 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d252 1
a252 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d254 1
a254 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d256 1
a256 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d258 1
a258 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d262 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d264 1
a264 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
d268 1
a268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d270 1
a270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d272 1
a272 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d276 1
a276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
a277 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_68);
d281 2
d284 2
a286 2
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d288 1
a288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
d290 2
a292 2
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d294 1
a294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer"));
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener"));
d298 1
a298 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPartViewer"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.Transfer"));
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d314 1
a314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
a315 2
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_86);
d318 1
a318 1
 * TODO: movel NavigatorItem to some public place and remove 
d322 2
d325 2
a327 2
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d329 1
a329 1
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
d331 1
a331 1
    	}
d337 1
a337 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d339 1
a339 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d341 1
a341 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d343 1
a343 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d345 1
a345 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d349 1
a349 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d351 1
a351 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d353 1
a353 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
a354 2
    }
    stringBuffer.append(TEXT_103);
@


1.56
log
@Removing *EditorInputProxies - only EditorInputs are used in generated code from now.
@
text
@d42 45
a86 45
  protected final String TEXT_24 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_25 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_26 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "    public ";
  protected final String TEXT_27 = " getEditingDomain() {" + NL + "    \torg.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocument document = getEditorInput() != null ? getDocumentProvider().getDocument(getEditorInput()) : null;" + NL + "    \tif (document instanceof org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) {" + NL + "    \t\treturn ((org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDiagramDocument) document).getEditingDomain();" + NL + "    \t}" + NL + "        return super.getEditingDomain();" + NL + "    }";
  protected final String TEXT_28 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_29 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_30 = ") {" + NL + "\t\t\tsetDocumentProvider(";
  protected final String TEXT_31 = ".getInstance().getDocumentProvider());" + NL + "\t\t} else if (input instanceof ";
  protected final String TEXT_32 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_33 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_34 = "());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_35 = " marker) {";
  protected final String TEXT_36 = NL + "        ";
  protected final String TEXT_37 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_38 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_39 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_40 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_41 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_42 = " dialog = new ";
  protected final String TEXT_43 = "(shell);" + NL + "\t\t";
  protected final String TEXT_44 = " original = input instanceof ";
  protected final String TEXT_45 = " ? ((";
  protected final String TEXT_46 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_47 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_48 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_49 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_50 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_51 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_52 = " workspaceRoot = ";
  protected final String TEXT_53 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_54 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_55 = " newInput = new ";
  protected final String TEXT_56 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_57 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_58 = "[] editorRefs = ";
  protected final String TEXT_59 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_60 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_61 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_62 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_63 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_65 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_66 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_67 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_68 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}";
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d196 1
a196 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider"));
d198 1
a198 1
    stringBuffer.append(importManager.getImportedName("TransactionalEditingDomain"));
d200 1
a200 1
    if (genDiagram.getEditorGen().getApplication() == null) {
d202 1
a202 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d204 1
a204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d206 1
a206 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getPlugin().getActivatorQualifiedClassName()));
d208 1
a208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d210 1
a210 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider"));
d212 1
a212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d216 1
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
d220 1
a220 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
a223 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d225 1
a225 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d229 1
a229 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d233 1
a233 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d235 1
a235 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d241 1
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d245 1
a245 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
d273 1
a273 1
    } else { // genDiagram.getEditorGen().getApplication() != null 
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider"));
@


1.55
log
@[171528] use URIEditorInput to open diagrams
@
text
@d29 93
a121 108
  protected final String TEXT_11 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getEditingDomainID() {" + NL + "\t\treturn \"";
  protected final String TEXT_12 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());";
  protected final String TEXT_13 = NL + "\t\tfinal ";
  protected final String TEXT_14 = " diagramResourceModifiedFilter = ";
  protected final String TEXT_15 = ".createNotifierFilter(domain.getResourceSet()).and(";
  protected final String TEXT_16 = ".createEventTypeFilter(";
  protected final String TEXT_17 = ".ADD)).and(";
  protected final String TEXT_18 = ".createFeatureFilter(";
  protected final String TEXT_19 = ".class, ";
  protected final String TEXT_20 = ".RESOURCE_SET__RESOURCES));" + NL + "\t\tdomain.getResourceSet().eAdapters().add(new ";
  protected final String TEXT_21 = "() {" + NL + "" + NL + "\t\t\tprivate ";
  protected final String TEXT_22 = " myTarger;" + NL + "" + NL + "\t\t\tpublic ";
  protected final String TEXT_23 = " getTarget() {" + NL + "\t\t\t\treturn myTarger;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic boolean isAdapterForType(Object type) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic void notifyChanged(";
  protected final String TEXT_24 = " notification) {" + NL + "\t\t\t\tif (diagramResourceModifiedFilter.matches(notification)) {" + NL + "\t\t\t\t\tObject value = notification.getNewValue();" + NL + "\t\t\t\t\tif (value instanceof ";
  protected final String TEXT_25 = ") {" + NL + "\t\t\t\t\t\t((";
  protected final String TEXT_26 = ") value).setTrackingModification(true);" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\tpublic void setTarget(";
  protected final String TEXT_27 = " newTarget) {" + NL + "\t\t\t\tmyTarger = newTarget;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "" + NL + "" + NL + "\t\treturn domain;" + NL + "\t}" + NL;
  protected final String TEXT_28 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\tPaletteRoot root = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\tnew ";
  protected final String TEXT_29 = "().fillPalette(root);" + NL + "\t\treturn root;" + NL + "\t}";
  protected final String TEXT_30 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_31 = " getPreferencesHint() {";
  protected final String TEXT_32 = NL + "\t\treturn ";
  protected final String TEXT_33 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_34 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_35 = ".ID;" + NL + "\t}";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_37 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_39 = " getDocumentProvider(";
  protected final String TEXT_40 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_41 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_42 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_44 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_45 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_46 = "());" + NL + "\t\t} else if (input instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_48 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_49 = "());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_50 = " marker) {";
  protected final String TEXT_51 = NL + "        ";
  protected final String TEXT_52 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_53 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_54 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_55 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_56 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_57 = " dialog = new ";
  protected final String TEXT_58 = "(shell);" + NL + "\t\t";
  protected final String TEXT_59 = " original = input instanceof ";
  protected final String TEXT_60 = " ? ((";
  protected final String TEXT_61 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_62 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_63 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_64 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_65 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_66 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_67 = " workspaceRoot = ";
  protected final String TEXT_68 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_69 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_70 = " newInput = new ";
  protected final String TEXT_71 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_72 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_73 = "[] editorRefs = ";
  protected final String TEXT_74 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_75 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_76 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_77 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_78 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_79 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_80 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_81 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_82 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_83 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_85 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_86 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_87 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_88 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_89 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_90 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_91 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_92 = " viewer, ";
  protected final String TEXT_93 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_94 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_95 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_96 = " uris = new ";
  protected final String TEXT_97 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_98 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_99 = " selection = (";
  protected final String TEXT_100 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_101 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_102 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_103 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_104 = " view = ((";
  protected final String TEXT_105 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_106 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_108 = " modelElement = (";
  protected final String TEXT_109 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_110 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_111 = " result = new ";
  protected final String TEXT_112 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_113 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_114 = " nextURI = (";
  protected final String TEXT_115 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_116 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_117 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_118 = NL + "\t" + NL + "}";
d168 1
a168 1
    stringBuffer.append(genDiagram.getEditingDomainID());
d170 1
a170 1
    String notificationGilterFQName = importManager.getImportedName("org.eclipse.emf.transaction.NotificationFilter");
d172 1
a172 1
    stringBuffer.append(notificationGilterFQName);
d174 1
a174 1
    stringBuffer.append(notificationGilterFQName);
d176 1
a176 1
    stringBuffer.append(notificationGilterFQName);
d178 1
a178 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d180 1
a180 1
    stringBuffer.append(notificationGilterFQName);
d182 1
a182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d184 1
a184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.ResourceSet"));
d186 1
a186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Adapter"));
d188 1
a188 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notifier"));
d190 1
a190 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notifier"));
d192 1
a192 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notification"));
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d196 1
a196 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d198 1
a198 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.notify.Notifier"));
d200 1
a200 1
    if (genDiagram.getPalette() != null) {
d202 1
a202 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
d204 1
a204 1
    }
d206 1
a206 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
d208 1
a208 1
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
d210 1
a210 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d212 1
a212 1
    if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/
d214 1
a214 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
a215 1
    } else {
d217 1
a217 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage"));
d219 1
a219 1
    }
d221 1
a221 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d223 2
a225 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider"));
d229 1
a229 1
    if (genDiagram.getEditorGen().getApplication() == null) {
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d235 1
a235 1
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
d237 1
a237 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d239 1
a239 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider"));
d241 1
a241 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d245 1
d247 1
a247 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d261 1
a261 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d263 1
a263 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d265 1
a265 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d267 1
a267 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d269 1
a269 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d271 1
a271 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d273 1
a273 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d275 1
a275 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d277 1
a277 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d279 1
a279 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
a280 30
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
    stringBuffer.append(TEXT_69);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_70);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
    stringBuffer.append(TEXT_71);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
    stringBuffer.append(TEXT_74);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
    stringBuffer.append(TEXT_75);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_76);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
    stringBuffer.append(TEXT_78);
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
    stringBuffer.append(TEXT_79);
    } else { // genDiagram.getEditorGen().getApplication() != null 
    stringBuffer.append(TEXT_80);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_81);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_82);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getEditor().getPackageName() + ".URIDiagramDocumentProvider"));
    stringBuffer.append(TEXT_83);
d284 1
a284 1
    stringBuffer.append(TEXT_84);
d286 1
a286 1
    stringBuffer.append(TEXT_85);
d288 1
a288 1
    stringBuffer.append(TEXT_86);
d290 1
a290 1
    stringBuffer.append(TEXT_87);
d292 1
a292 1
    stringBuffer.append(TEXT_88);
d294 1
a294 1
    stringBuffer.append(TEXT_89);
d296 1
a296 1
    stringBuffer.append(TEXT_90);
d298 1
a298 1
    stringBuffer.append(TEXT_91);
d300 1
a300 1
    stringBuffer.append(TEXT_92);
d302 1
a302 1
    stringBuffer.append(TEXT_93);
d304 1
a304 1
    stringBuffer.append(TEXT_94);
d306 1
a306 1
    stringBuffer.append(TEXT_95);
d308 1
a308 1
    stringBuffer.append(TEXT_96);
d310 1
a310 1
    stringBuffer.append(TEXT_97);
d312 1
a312 1
    stringBuffer.append(TEXT_98);
d314 1
a314 1
    stringBuffer.append(TEXT_99);
d316 1
a316 1
    stringBuffer.append(TEXT_100);
d318 1
a318 1
    stringBuffer.append(TEXT_101);
d325 1
a325 1
    stringBuffer.append(TEXT_102);
d327 1
a327 1
    stringBuffer.append(TEXT_103);
d329 1
a329 1
    stringBuffer.append(TEXT_104);
d331 1
a331 1
    stringBuffer.append(TEXT_105);
d333 1
a333 1
    stringBuffer.append(TEXT_106);
d335 1
a335 1
    stringBuffer.append(TEXT_107);
d337 1
a337 1
    stringBuffer.append(TEXT_108);
d339 1
a339 1
    stringBuffer.append(TEXT_109);
d341 1
a341 1
    stringBuffer.append(TEXT_110);
d343 1
a343 1
    stringBuffer.append(TEXT_111);
d345 1
a345 1
    stringBuffer.append(TEXT_112);
d347 1
a347 1
    stringBuffer.append(TEXT_113);
d349 1
a349 1
    stringBuffer.append(TEXT_114);
d351 1
a351 1
    stringBuffer.append(TEXT_115);
d353 1
a353 1
    stringBuffer.append(TEXT_116);
d355 1
a355 1
    stringBuffer.append(TEXT_117);
d357 1
a357 1
    stringBuffer.append(TEXT_118);
@


1.54
log
@comment not to forget reason for doSetInput
@
text
@d56 81
a136 96
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String contentObjectURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_39 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_40 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_41 = "(contentObjectURI));" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_42 = "());" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_43 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSetInput(";
  protected final String TEXT_44 = " input, boolean releaseEditorContents) throws ";
  protected final String TEXT_45 = " {" + NL + "\t\tcontentObjectURI = null;" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_46 = ") {" + NL + "\t\t\tfinal ";
  protected final String TEXT_47 = " diagram = ((";
  protected final String TEXT_48 = ") input).getDiagram();" + NL + "\t\t\tfinal ";
  protected final String TEXT_49 = " diagramFile = ";
  protected final String TEXT_50 = ".getFile(diagram.eResource());" + NL + "\t\t\t";
  protected final String TEXT_51 = " newInput = new ";
  protected final String TEXT_52 = "(diagramFile);" + NL + "\t\t\tcontentObjectURI = diagram.eResource().getURIFragment(diagram);" + NL + "\t\t\tsuper.doSetInput(newInput, releaseEditorContents);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.doSetInput(input, releaseEditorContents);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_53 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_54 = " marker) {";
  protected final String TEXT_55 = NL + "        ";
  protected final String TEXT_56 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_57 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_58 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_59 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_60 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_61 = " dialog = new ";
  protected final String TEXT_62 = "(shell);" + NL + "\t\t";
  protected final String TEXT_63 = " original = input instanceof ";
  protected final String TEXT_64 = " ? ((";
  protected final String TEXT_65 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_66 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_67 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_68 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_69 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_70 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_71 = " workspaceRoot = ";
  protected final String TEXT_72 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_73 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_74 = " newInput = new ";
  protected final String TEXT_75 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_76 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_77 = "[] editorRefs = ";
  protected final String TEXT_78 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_79 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_80 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_81 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_82 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_83 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSetInput(";
  protected final String TEXT_85 = " input, boolean releaseEditorContents) throws ";
  protected final String TEXT_86 = " {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_87 = ") {" + NL + "\t\t\tfinal ";
  protected final String TEXT_88 = " diagram = ((";
  protected final String TEXT_89 = ") input).getDiagram();" + NL + "\t\t\t";
  protected final String TEXT_90 = " newInput = new ";
  protected final String TEXT_91 = "(diagram.eResource().getURI());" + NL + "\t\t\tsuper.doSetInput(newInput, releaseEditorContents);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.doSetInput(input, releaseEditorContents);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_92 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_93 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_94 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_95 = " getDocumentProvider(";
  protected final String TEXT_96 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_97 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_98 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}";
  protected final String TEXT_99 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_100 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_101 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_102 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_103 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_104 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_105 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_106 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_107 = " viewer, ";
  protected final String TEXT_108 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_109 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_110 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_111 = " uris = new ";
  protected final String TEXT_112 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_113 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_114 = " selection = (";
  protected final String TEXT_115 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_116 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_117 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_118 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_119 = " view = ((";
  protected final String TEXT_120 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_121 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_122 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_123 = " modelElement = (";
  protected final String TEXT_124 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_125 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_126 = " result = new ";
  protected final String TEXT_127 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_128 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_129 = " nextURI = (";
  protected final String TEXT_130 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_131 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_132 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_133 = NL + "\t" + NL + "}";
a235 1
    if (genDiagram.getEditorGen().getApplication() == null) {
d237 2
a239 2
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d241 1
a241 1
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d245 1
a245 3
    for (Iterator it = genDiagram.getAllNodes().iterator(); it.hasNext();) {
	GenCommonBase next = (GenCommonBase) it.next();
	if (!next.getBehaviour(OpenDiagramBehaviour.class).isEmpty()) {
d249 1
a249 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d251 1
a251 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d253 1
a253 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d255 1
a255 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d257 1
a257 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d259 1
a259 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d262 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d264 1
a264 4
    
	break; // suffice to find at least one element with opendiagram policy to know we should override doSetInput
	}
}
d266 1
a266 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d268 1
d270 1
a270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
d272 1
a272 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d274 1
a274 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d276 1
a276 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d278 1
a278 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d280 1
a280 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d282 1
a282 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d284 1
a284 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d286 1
a286 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d288 1
a288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d290 1
a290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d294 1
a294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d296 1
a296 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d298 1
a298 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d302 1
a302 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
d312 1
a312 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
d314 1
a314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d318 1
a318 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d320 1
a320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
a325 31
    } else { // genDiagram.getEditorGen().getApplication() != null 
    /*XXX unconditionally adding doSetInput() which is needed only for opening this editor from another diagram, is a temp workaround, as long as we use IDiagramEditorInput in OpenEditPolicy*/
    stringBuffer.append(TEXT_84);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_85);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
    stringBuffer.append(TEXT_86);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
    stringBuffer.append(TEXT_87);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
    stringBuffer.append(TEXT_88);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
    stringBuffer.append(TEXT_89);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_90);
    stringBuffer.append("org.eclipse.emf.common.ui.URIEditorInput");
    stringBuffer.append(TEXT_91);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_92);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_93);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication().getPackageName() + ".URIDiagramDocumentProvider"));
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
    stringBuffer.append(TEXT_95);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
    stringBuffer.append(TEXT_96);
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication().getPackageName() + ".URIDiagramDocumentProvider"));
    stringBuffer.append(TEXT_98);
d329 1
a329 1
    stringBuffer.append(TEXT_99);
d331 1
a331 1
    stringBuffer.append(TEXT_100);
d333 1
a333 1
    stringBuffer.append(TEXT_101);
d335 1
a335 1
    stringBuffer.append(TEXT_102);
d337 1
a337 1
    stringBuffer.append(TEXT_103);
d339 1
a339 1
    stringBuffer.append(TEXT_104);
d341 1
a341 1
    stringBuffer.append(TEXT_105);
d343 1
a343 1
    stringBuffer.append(TEXT_106);
d345 1
a345 1
    stringBuffer.append(TEXT_107);
d347 1
a347 1
    stringBuffer.append(TEXT_108);
d349 1
a349 1
    stringBuffer.append(TEXT_109);
d351 1
a351 1
    stringBuffer.append(TEXT_110);
d353 1
a353 1
    stringBuffer.append(TEXT_111);
d355 1
a355 1
    stringBuffer.append(TEXT_112);
d357 1
a357 1
    stringBuffer.append(TEXT_113);
d359 1
a359 1
    stringBuffer.append(TEXT_114);
d361 1
a361 1
    stringBuffer.append(TEXT_115);
d363 1
a363 1
    stringBuffer.append(TEXT_116);
d370 1
a370 1
    stringBuffer.append(TEXT_117);
d372 1
a372 1
    stringBuffer.append(TEXT_118);
d374 1
a374 1
    stringBuffer.append(TEXT_119);
d376 1
a376 1
    stringBuffer.append(TEXT_120);
d378 1
a378 1
    stringBuffer.append(TEXT_121);
d380 1
a380 1
    stringBuffer.append(TEXT_122);
d382 1
a382 1
    stringBuffer.append(TEXT_123);
d384 1
a384 1
    stringBuffer.append(TEXT_124);
d386 1
a386 1
    stringBuffer.append(TEXT_125);
d388 1
a388 1
    stringBuffer.append(TEXT_126);
d390 1
a390 1
    stringBuffer.append(TEXT_127);
d392 1
a392 1
    stringBuffer.append(TEXT_128);
d394 1
a394 1
    stringBuffer.append(TEXT_129);
d396 1
a396 1
    stringBuffer.append(TEXT_130);
d398 1
a398 1
    stringBuffer.append(TEXT_131);
d400 1
a400 1
    stringBuffer.append(TEXT_132);
d402 1
a402 1
    stringBuffer.append(TEXT_133);
@


1.53
log
@do not thow error on opening diagram in rcp
@
text
@d348 1
@


1.52
log
@Removing unnecessary imports.
@
text
@d102 50
a151 43
  protected final String TEXT_84 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_85 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_86 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_87 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_88 = " getDocumentProvider(";
  protected final String TEXT_89 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_90 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_91 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}";
  protected final String TEXT_92 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_93 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_94 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_95 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_96 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_97 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_98 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_99 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_100 = " viewer, ";
  protected final String TEXT_101 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_102 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_103 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_104 = " uris = new ";
  protected final String TEXT_105 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_106 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_107 = " selection = (";
  protected final String TEXT_108 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_109 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_110 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_111 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_112 = " view = ((";
  protected final String TEXT_113 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_114 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_115 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_116 = " modelElement = (";
  protected final String TEXT_117 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_118 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_119 = " result = new ";
  protected final String TEXT_120 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_121 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " nextURI = (";
  protected final String TEXT_123 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_124 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_125 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_126 = NL + "\t" + NL + "}";
d351 14
d366 1
a366 1
    stringBuffer.append(TEXT_86);
d368 1
a368 1
    stringBuffer.append(TEXT_87);
d370 1
a370 1
    stringBuffer.append(TEXT_88);
d372 1
a372 1
    stringBuffer.append(TEXT_89);
d374 1
a374 1
    stringBuffer.append(TEXT_90);
d376 1
a376 1
    stringBuffer.append(TEXT_91);
d380 1
a380 1
    stringBuffer.append(TEXT_92);
d382 1
a382 1
    stringBuffer.append(TEXT_93);
d384 1
a384 1
    stringBuffer.append(TEXT_94);
d386 1
a386 1
    stringBuffer.append(TEXT_95);
d388 1
a388 1
    stringBuffer.append(TEXT_96);
d390 1
a390 1
    stringBuffer.append(TEXT_97);
d392 1
a392 1
    stringBuffer.append(TEXT_98);
d394 1
a394 1
    stringBuffer.append(TEXT_99);
d396 1
a396 1
    stringBuffer.append(TEXT_100);
d398 1
a398 1
    stringBuffer.append(TEXT_101);
d400 1
a400 1
    stringBuffer.append(TEXT_102);
d402 1
a402 1
    stringBuffer.append(TEXT_103);
d404 1
a404 1
    stringBuffer.append(TEXT_104);
d406 1
a406 1
    stringBuffer.append(TEXT_105);
d408 1
a408 1
    stringBuffer.append(TEXT_106);
d410 1
a410 1
    stringBuffer.append(TEXT_107);
d412 1
a412 1
    stringBuffer.append(TEXT_108);
d414 1
a414 1
    stringBuffer.append(TEXT_109);
d421 1
a421 1
    stringBuffer.append(TEXT_110);
d423 1
a423 1
    stringBuffer.append(TEXT_111);
d425 1
a425 1
    stringBuffer.append(TEXT_112);
d427 1
a427 1
    stringBuffer.append(TEXT_113);
d429 1
a429 1
    stringBuffer.append(TEXT_114);
d431 1
a431 1
    stringBuffer.append(TEXT_115);
d433 1
a433 1
    stringBuffer.append(TEXT_116);
d435 1
a435 1
    stringBuffer.append(TEXT_117);
d437 1
a437 1
    stringBuffer.append(TEXT_118);
d439 1
a439 1
    stringBuffer.append(TEXT_119);
d441 1
a441 1
    stringBuffer.append(TEXT_120);
d443 1
a443 1
    stringBuffer.append(TEXT_121);
d445 1
a445 1
    stringBuffer.append(TEXT_122);
d447 1
a447 1
    stringBuffer.append(TEXT_123);
d449 1
a449 1
    stringBuffer.append(TEXT_124);
d451 1
a451 1
    stringBuffer.append(TEXT_125);
d453 1
a453 1
    stringBuffer.append(TEXT_126);
@


1.51
log
@rewrite application templates in xpand; simplify genmodel
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
@


1.50
log
@[164935] Use border items infrastructure to support external labels
@
text
@d346 1
a346 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication().getApplicationPackageName() + ".URIDiagramDocumentProvider"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication().getApplicationPackageName() + ".URIDiagramDocumentProvider"));
@


1.49
log
@heading towards full palette specification in tooldef model - no reason to invoke palette factory indirectly through services
@
text
@d45 100
a144 101
  protected final String TEXT_27 = " newTarget) {" + NL + "\t\t\t\tmyTarger = newTarget;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "" + NL + "" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_28 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL;
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\tPaletteRoot root = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\tnew ";
  protected final String TEXT_30 = "().fillPalette(root);" + NL + "\t\treturn root;" + NL + "\t}";
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_32 = " getPreferencesHint() {";
  protected final String TEXT_33 = NL + "\t\treturn ";
  protected final String TEXT_34 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_36 = ".ID;" + NL + "\t}";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_38 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String contentObjectURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_40 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_41 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_42 = "(contentObjectURI));" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_43 = "());" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSetInput(";
  protected final String TEXT_45 = " input, boolean releaseEditorContents) throws ";
  protected final String TEXT_46 = " {" + NL + "\t\tcontentObjectURI = null;" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_47 = ") {" + NL + "\t\t\tfinal ";
  protected final String TEXT_48 = " diagram = ((";
  protected final String TEXT_49 = ") input).getDiagram();" + NL + "\t\t\tfinal ";
  protected final String TEXT_50 = " diagramFile = ";
  protected final String TEXT_51 = ".getFile(diagram.eResource());" + NL + "\t\t\t";
  protected final String TEXT_52 = " newInput = new ";
  protected final String TEXT_53 = "(diagramFile);" + NL + "\t\t\tcontentObjectURI = diagram.eResource().getURIFragment(diagram);" + NL + "\t\t\tsuper.doSetInput(newInput, releaseEditorContents);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.doSetInput(input, releaseEditorContents);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_54 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_55 = " marker) {";
  protected final String TEXT_56 = NL + "        ";
  protected final String TEXT_57 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_58 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_59 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_60 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_61 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_62 = " dialog = new ";
  protected final String TEXT_63 = "(shell);" + NL + "\t\t";
  protected final String TEXT_64 = " original = input instanceof ";
  protected final String TEXT_65 = " ? ((";
  protected final String TEXT_66 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_67 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_68 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_69 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_70 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_71 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_72 = " workspaceRoot = ";
  protected final String TEXT_73 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_74 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_75 = " newInput = new ";
  protected final String TEXT_76 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_77 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_78 = "[] editorRefs = ";
  protected final String TEXT_79 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_80 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_81 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_82 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_83 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_84 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_85 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_86 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_87 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_88 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_89 = " getDocumentProvider(";
  protected final String TEXT_90 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_91 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_92 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}";
  protected final String TEXT_93 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_94 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_95 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_96 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_97 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_98 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_99 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_100 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_101 = " viewer, ";
  protected final String TEXT_102 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_103 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_104 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_105 = " uris = new ";
  protected final String TEXT_106 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_107 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_108 = " selection = (";
  protected final String TEXT_109 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_110 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_111 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_112 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_113 = " view = ((";
  protected final String TEXT_114 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_115 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_116 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_117 = " modelElement = (";
  protected final String TEXT_118 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_119 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_120 = " result = new ";
  protected final String TEXT_121 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_122 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_123 = " nextURI = (";
  protected final String TEXT_124 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_125 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_126 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_127 = NL + "\t" + NL + "}";
d223 1
a223 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
d225 1
a225 1
    if (genDiagram.getPalette() != null) {
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
d229 1
a229 1
    }
d231 1
a231 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
d233 1
a233 1
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
d235 2
a237 2
    stringBuffer.append(TEXT_34);
    if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/
d239 1
a239 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d241 1
a241 1
    } else {
a242 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage"));
    stringBuffer.append(TEXT_38);
d245 2
d248 1
a248 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d250 1
a250 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d252 1
a252 1
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
a253 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
    stringBuffer.append(TEXT_43);
d257 2
d260 1
a260 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d262 1
a262 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d264 2
a266 2
    stringBuffer.append(TEXT_47);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d268 1
a268 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d270 1
a270 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d272 1
a272 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.workspace.util.WorkspaceSynchronizer"));
a275 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
    stringBuffer.append(TEXT_53);
d280 2
a282 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d284 1
d286 1
a286 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.common.ui.services.marker.MarkerNavigationService"));
d288 1
a288 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d290 1
a290 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d292 1
a292 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d294 1
a294 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d298 1
a298 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d300 1
a300 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d304 1
a304 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d306 1
a306 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d308 1
a308 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d310 1
a310 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d312 1
a312 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d314 1
a314 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d316 1
a316 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d318 1
a318 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d320 1
a320 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d322 1
a322 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d324 1
a324 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d326 1
a326 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
d328 1
a328 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
d330 1
a330 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d332 1
a332 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d334 1
a334 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d338 1
a338 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d340 1
a340 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
d342 1
a342 1
    } else { // genDiagram.getEditorGen().getApplication() != null 
d344 1
a344 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d346 1
a346 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
d348 1
a348 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication().getApplicationPackageName() + ".URIDiagramDocumentProvider"));
d350 1
a350 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d352 1
a352 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d354 1
a354 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.ui.URIEditorInput"));
a355 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorGen().getApplication().getApplicationPackageName() + ".URIDiagramDocumentProvider"));
    stringBuffer.append(TEXT_92);
d359 2
d362 2
a364 2
    stringBuffer.append(TEXT_94);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d366 1
a366 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
d368 2
a370 2
    stringBuffer.append(TEXT_97);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d372 1
a372 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.edit.ui.dnd.LocalTransfer"));
d374 1
a374 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener"));
d376 1
a376 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.EditPartViewer"));
d378 1
a378 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.Transfer"));
d380 1
a380 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d382 1
a382 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
d384 1
a384 1
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d386 1
a386 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d392 1
a392 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.viewers.IStructuredSelection"));
a393 2
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
    stringBuffer.append(TEXT_110);
d400 2
d403 2
a405 2
    stringBuffer.append(TEXT_112);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.View"));
d407 1
a407 1
    stringBuffer.append(importManager.getImportedName(genEditor.getEditorGen().getNavigator().getNavigatorItemQualifiedClassName()));
d409 1
a409 1
    	}
d415 1
a415 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d417 1
a417 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.resource.Resource"));
d419 1
a419 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d421 1
a421 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
d423 1
a423 1
    stringBuffer.append(importManager.getImportedName("java.util.Iterator"));
d427 1
a427 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.common.util.URI"));
d429 1
a429 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.emf.ecore.EObject"));
d431 1
a431 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.dnd.TransferData"));
a432 2
    }
    stringBuffer.append(TEXT_127);
@


1.48
log
@[155209] - GMF Editor does not get dirty when elements are added/removed thru custom code
@
text
@d22 1
a22 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.parts.DiagramDocumentEditor;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d46 67
a112 67
  protected final String TEXT_28 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_29 = " getPreferencesHint() {";
  protected final String TEXT_30 = NL + "\t\treturn ";
  protected final String TEXT_31 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_32 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_33 = ".ID;" + NL + "\t}";
  protected final String TEXT_34 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_35 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String contentObjectURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_37 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_38 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_39 = "(contentObjectURI));" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_40 = "());" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_41 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSetInput(";
  protected final String TEXT_42 = " input, boolean releaseEditorContents) throws ";
  protected final String TEXT_43 = " {" + NL + "\t\tcontentObjectURI = null;" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_44 = ") {" + NL + "\t\t\tfinal ";
  protected final String TEXT_45 = " diagram = ((";
  protected final String TEXT_46 = ") input).getDiagram();" + NL + "\t\t\tfinal ";
  protected final String TEXT_47 = " diagramFile = ";
  protected final String TEXT_48 = ".getFile(diagram.eResource());" + NL + "\t\t\t";
  protected final String TEXT_49 = " newInput = new ";
  protected final String TEXT_50 = "(diagramFile);" + NL + "\t\t\tcontentObjectURI = diagram.eResource().getURIFragment(diagram);" + NL + "\t\t\tsuper.doSetInput(newInput, releaseEditorContents);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.doSetInput(input, releaseEditorContents);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_51 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_52 = " marker) {";
  protected final String TEXT_53 = NL + "        ";
  protected final String TEXT_54 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_55 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_56 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_57 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_58 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_59 = " dialog = new ";
  protected final String TEXT_60 = "(shell);" + NL + "\t\t";
  protected final String TEXT_61 = " original = input instanceof ";
  protected final String TEXT_62 = " ? ((";
  protected final String TEXT_63 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_64 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_65 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_66 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_67 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_68 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_69 = " workspaceRoot = ";
  protected final String TEXT_70 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_71 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_72 = " newInput = new ";
  protected final String TEXT_73 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_74 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_75 = "[] editorRefs = ";
  protected final String TEXT_76 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_77 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_78 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_79 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_80 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_81 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_82 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_83 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_84 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_85 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_86 = " getDocumentProvider(";
  protected final String TEXT_87 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_89 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}";
  protected final String TEXT_90 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_91 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_92 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_93 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_94 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
d114 32
a145 29
  protected final String TEXT_96 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_97 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_98 = " viewer, ";
  protected final String TEXT_99 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_100 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_101 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_102 = " uris = new ";
  protected final String TEXT_103 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_104 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_105 = " selection = (";
  protected final String TEXT_106 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_107 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_108 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_109 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_110 = " view = ((";
  protected final String TEXT_111 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_112 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_113 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_114 = " modelElement = (";
  protected final String TEXT_115 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_116 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_117 = " result = new ";
  protected final String TEXT_118 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_119 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_120 = " nextURI = (";
  protected final String TEXT_121 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_122 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_123 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_124 = NL + "\t" + NL + "}";
d226 6
d233 1
a233 1
    stringBuffer.append(TEXT_29);
d235 1
a235 1
    stringBuffer.append(TEXT_30);
d237 1
a237 1
    stringBuffer.append(TEXT_31);
d239 1
a239 1
    stringBuffer.append(TEXT_32);
d241 1
a241 1
    stringBuffer.append(TEXT_33);
d243 1
a243 1
    stringBuffer.append(TEXT_34);
d245 1
a245 1
    stringBuffer.append(TEXT_35);
d248 1
a248 1
    stringBuffer.append(TEXT_36);
d250 1
a250 1
    stringBuffer.append(TEXT_37);
d252 1
a252 1
    stringBuffer.append(TEXT_38);
d254 1
a254 1
    stringBuffer.append(TEXT_39);
d256 1
a256 1
    stringBuffer.append(TEXT_40);
d260 1
a260 1
    stringBuffer.append(TEXT_41);
d262 1
a262 1
    stringBuffer.append(TEXT_42);
d264 1
a264 1
    stringBuffer.append(TEXT_43);
d266 1
a266 1
    stringBuffer.append(TEXT_44);
d268 1
a268 1
    stringBuffer.append(TEXT_45);
d270 1
a270 1
    stringBuffer.append(TEXT_46);
d272 1
a272 1
    stringBuffer.append(TEXT_47);
d274 1
a274 1
    stringBuffer.append(TEXT_48);
d276 1
a276 1
    stringBuffer.append(TEXT_49);
d278 1
a278 1
    stringBuffer.append(TEXT_50);
d283 1
a283 1
    stringBuffer.append(TEXT_51);
d285 2
a286 2
    stringBuffer.append(TEXT_52);
    stringBuffer.append(TEXT_53);
d288 1
a288 1
    stringBuffer.append(TEXT_54);
d290 1
a290 1
    stringBuffer.append(TEXT_55);
d292 1
a292 1
    stringBuffer.append(TEXT_56);
d294 1
a294 1
    stringBuffer.append(TEXT_57);
d296 1
a296 1
    stringBuffer.append(TEXT_58);
d298 1
a298 1
    stringBuffer.append(TEXT_59);
d300 1
a300 1
    stringBuffer.append(TEXT_60);
d302 1
a302 1
    stringBuffer.append(TEXT_61);
d304 1
a304 1
    stringBuffer.append(TEXT_62);
d306 1
a306 1
    stringBuffer.append(TEXT_63);
d308 1
a308 1
    stringBuffer.append(TEXT_64);
d310 1
a310 1
    stringBuffer.append(TEXT_65);
d312 1
a312 1
    stringBuffer.append(TEXT_66);
d314 1
a314 1
    stringBuffer.append(TEXT_67);
d316 1
a316 1
    stringBuffer.append(TEXT_68);
d318 1
a318 1
    stringBuffer.append(TEXT_69);
d320 1
a320 1
    stringBuffer.append(TEXT_70);
d322 1
a322 1
    stringBuffer.append(TEXT_71);
d324 1
a324 1
    stringBuffer.append(TEXT_72);
d326 1
a326 1
    stringBuffer.append(TEXT_73);
d328 1
a328 1
    stringBuffer.append(TEXT_74);
d330 1
a330 1
    stringBuffer.append(TEXT_75);
d332 1
a332 1
    stringBuffer.append(TEXT_76);
d334 1
a334 1
    stringBuffer.append(TEXT_77);
d336 1
a336 1
    stringBuffer.append(TEXT_78);
d338 1
a338 1
    stringBuffer.append(TEXT_79);
d340 1
a340 1
    stringBuffer.append(TEXT_80);
d342 1
a342 1
    stringBuffer.append(TEXT_81);
d344 1
a344 1
    stringBuffer.append(TEXT_82);
d346 1
a346 1
    stringBuffer.append(TEXT_83);
d348 1
a348 1
    stringBuffer.append(TEXT_84);
d350 1
a350 1
    stringBuffer.append(TEXT_85);
d352 1
a352 1
    stringBuffer.append(TEXT_86);
d354 1
a354 1
    stringBuffer.append(TEXT_87);
d356 1
a356 1
    stringBuffer.append(TEXT_88);
d358 1
a358 1
    stringBuffer.append(TEXT_89);
d362 1
a362 1
    stringBuffer.append(TEXT_90);
d364 1
a364 1
    stringBuffer.append(TEXT_91);
d366 1
a366 1
    stringBuffer.append(TEXT_92);
d368 1
a368 1
    stringBuffer.append(TEXT_93);
d370 1
a370 1
    stringBuffer.append(TEXT_94);
d372 1
a372 1
    stringBuffer.append(TEXT_95);
d374 1
a374 1
    stringBuffer.append(TEXT_96);
d376 1
a376 1
    stringBuffer.append(TEXT_97);
d378 1
a378 1
    stringBuffer.append(TEXT_98);
d380 1
a380 1
    stringBuffer.append(TEXT_99);
d382 1
a382 1
    stringBuffer.append(TEXT_100);
d384 1
a384 1
    stringBuffer.append(TEXT_101);
d386 1
a386 1
    stringBuffer.append(TEXT_102);
d388 1
a388 1
    stringBuffer.append(TEXT_103);
d390 1
a390 1
    stringBuffer.append(TEXT_104);
d392 1
a392 1
    stringBuffer.append(TEXT_105);
d394 1
a394 1
    stringBuffer.append(TEXT_106);
d396 1
a396 1
    stringBuffer.append(TEXT_107);
d403 1
a403 1
    stringBuffer.append(TEXT_108);
d405 1
a405 1
    stringBuffer.append(TEXT_109);
d407 1
a407 1
    stringBuffer.append(TEXT_110);
d409 1
a409 1
    stringBuffer.append(TEXT_111);
d411 1
a411 1
    stringBuffer.append(TEXT_112);
d413 1
a413 1
    stringBuffer.append(TEXT_113);
d415 1
a415 1
    stringBuffer.append(TEXT_114);
d417 1
a417 1
    stringBuffer.append(TEXT_115);
d419 1
a419 1
    stringBuffer.append(TEXT_116);
d421 1
a421 1
    stringBuffer.append(TEXT_117);
d423 1
a423 1
    stringBuffer.append(TEXT_118);
d425 1
a425 1
    stringBuffer.append(TEXT_119);
d427 1
a427 1
    stringBuffer.append(TEXT_120);
d429 1
a429 1
    stringBuffer.append(TEXT_121);
d431 1
a431 1
    stringBuffer.append(TEXT_122);
d433 1
a433 1
    stringBuffer.append(TEXT_123);
d435 1
a435 1
    stringBuffer.append(TEXT_124);
@


1.47
log
@Supporting EMF transfer for D&D
@
text
@d30 113
a142 98
  protected final String TEXT_12 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_13 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_14 = " getPreferencesHint() {";
  protected final String TEXT_15 = NL + "\t\treturn ";
  protected final String TEXT_16 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_18 = ".ID;" + NL + "\t}";
  protected final String TEXT_19 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_20 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate String contentObjectURI;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_22 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_23 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_24 = "(contentObjectURI));" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_25 = "());" + NL + "\t\t}" + NL + "\t}" + NL;
  protected final String TEXT_26 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSetInput(";
  protected final String TEXT_27 = " input, boolean releaseEditorContents) throws ";
  protected final String TEXT_28 = " {" + NL + "\t\tcontentObjectURI = null;" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_29 = ") {" + NL + "\t\t\tfinal ";
  protected final String TEXT_30 = " diagram = ((";
  protected final String TEXT_31 = ") input).getDiagram();" + NL + "\t\t\tfinal ";
  protected final String TEXT_32 = " diagramFile = ";
  protected final String TEXT_33 = ".getFile(diagram.eResource());" + NL + "\t\t\t";
  protected final String TEXT_34 = " newInput = new ";
  protected final String TEXT_35 = "(diagramFile);" + NL + "\t\t\tcontentObjectURI = diagram.eResource().getURIFragment(diagram);" + NL + "\t\t\tsuper.doSetInput(newInput, releaseEditorContents);" + NL + "\t\t} else {" + NL + "\t\t\tsuper.doSetInput(input, releaseEditorContents);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_36 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_37 = " marker) {";
  protected final String TEXT_38 = NL + "        ";
  protected final String TEXT_39 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_40 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_41 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_42 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_43 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_44 = " dialog = new ";
  protected final String TEXT_45 = "(shell);" + NL + "\t\t";
  protected final String TEXT_46 = " original = input instanceof ";
  protected final String TEXT_47 = " ? ((";
  protected final String TEXT_48 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_49 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_50 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_51 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_52 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_53 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_54 = " workspaceRoot = ";
  protected final String TEXT_55 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_56 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_57 = " newInput = new ";
  protected final String TEXT_58 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_59 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_60 = "[] editorRefs = ";
  protected final String TEXT_61 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_62 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_63 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_64 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_65 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_66 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_67 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
  protected final String TEXT_68 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_69 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_70 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsuper.setDocumentProvider(input);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_71 = " getDocumentProvider(";
  protected final String TEXT_72 = " input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_73 = ") {" + NL + "\t\t\treturn new ";
  protected final String TEXT_74 = "();" + NL + "\t\t}" + NL + "\t\treturn super.getDocumentProvider(input);" + NL + "\t}";
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_76 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_77 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_78 = ".getTransfer().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new DropTargetListener(getDiagramGraphicalViewer(), ";
  protected final String TEXT_79 = ".getInstance()) {" + NL + "" + NL + "\t\t\tprotected Object getJavaObject(";
  protected final String TEXT_80 = " data) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_81 = ".getInstance().nativeToJava(data);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate abstract class DropTargetListener extends ";
  protected final String TEXT_82 = " {" + NL + "\t" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tpublic DropTargetListener(";
  protected final String TEXT_83 = " viewer, ";
  protected final String TEXT_84 = " xfer) {" + NL + "\t\t\tsuper(viewer, xfer);" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected ";
  protected final String TEXT_85 = " getObjectsBeingDropped() {" + NL + "\t\t\t";
  protected final String TEXT_86 = " data = getCurrentEvent().currentDataType;" + NL + "\t\t\t";
  protected final String TEXT_87 = " uris = new ";
  protected final String TEXT_88 = "();" + NL + "" + NL + "\t\t\tObject transferedObject = getJavaObject(data);" + NL + "\t\t\tif (transferedObject instanceof ";
  protected final String TEXT_89 = ") {" + NL + "\t\t\t\t";
  protected final String TEXT_90 = " selection = (";
  protected final String TEXT_91 = ") transferedObject;" + NL + "\t\t\t\tfor (";
  protected final String TEXT_92 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_93 = NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_94 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_95 = " view = ((";
  protected final String TEXT_96 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t}";
  protected final String TEXT_97 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_98 = ") {" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_99 = " modelElement = (";
  protected final String TEXT_100 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t";
  protected final String TEXT_101 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t}" + NL + "" + NL + "\t\t\t";
  protected final String TEXT_102 = " result = new ";
  protected final String TEXT_103 = "();" + NL + "\t\t\tfor (";
  protected final String TEXT_104 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t";
  protected final String TEXT_105 = " nextURI = (";
  protected final String TEXT_106 = ") it.next();" + NL + "\t\t\t\t";
  protected final String TEXT_107 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t}" + NL + "\t\t\treturn result;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated" + NL + "\t\t */" + NL + "\t\tprotected abstract Object getJavaObject(";
  protected final String TEXT_108 = " data);" + NL + "\t" + NL + "\t}";
  protected final String TEXT_109 = NL + "\t" + NL + "}";
d191 30
d222 1
a222 1
    stringBuffer.append(TEXT_13);
d224 1
a224 1
    stringBuffer.append(TEXT_14);
d226 1
a226 1
    stringBuffer.append(TEXT_15);
d228 1
a228 1
    stringBuffer.append(TEXT_16);
d230 1
a230 1
    stringBuffer.append(TEXT_17);
d232 1
a232 1
    stringBuffer.append(TEXT_18);
d234 1
a234 1
    stringBuffer.append(TEXT_19);
d236 1
a236 1
    stringBuffer.append(TEXT_20);
d239 1
a239 1
    stringBuffer.append(TEXT_21);
d241 1
a241 1
    stringBuffer.append(TEXT_22);
d243 1
a243 1
    stringBuffer.append(TEXT_23);
d245 1
a245 1
    stringBuffer.append(TEXT_24);
d247 1
a247 1
    stringBuffer.append(TEXT_25);
d251 1
a251 1
    stringBuffer.append(TEXT_26);
d253 1
a253 1
    stringBuffer.append(TEXT_27);
d255 1
a255 1
    stringBuffer.append(TEXT_28);
d257 1
a257 1
    stringBuffer.append(TEXT_29);
d259 1
a259 1
    stringBuffer.append(TEXT_30);
d261 1
a261 1
    stringBuffer.append(TEXT_31);
d263 1
a263 1
    stringBuffer.append(TEXT_32);
d265 1
a265 1
    stringBuffer.append(TEXT_33);
d267 1
a267 1
    stringBuffer.append(TEXT_34);
d269 1
a269 1
    stringBuffer.append(TEXT_35);
d274 1
a274 1
    stringBuffer.append(TEXT_36);
d276 2
a277 2
    stringBuffer.append(TEXT_37);
    stringBuffer.append(TEXT_38);
d279 1
a279 1
    stringBuffer.append(TEXT_39);
d281 1
a281 1
    stringBuffer.append(TEXT_40);
d283 1
a283 1
    stringBuffer.append(TEXT_41);
d285 1
a285 1
    stringBuffer.append(TEXT_42);
d287 1
a287 1
    stringBuffer.append(TEXT_43);
d289 1
a289 1
    stringBuffer.append(TEXT_44);
d291 1
a291 1
    stringBuffer.append(TEXT_45);
d293 1
a293 1
    stringBuffer.append(TEXT_46);
d295 1
a295 1
    stringBuffer.append(TEXT_47);
d297 1
a297 1
    stringBuffer.append(TEXT_48);
d299 1
a299 1
    stringBuffer.append(TEXT_49);
d301 1
a301 1
    stringBuffer.append(TEXT_50);
d303 1
a303 1
    stringBuffer.append(TEXT_51);
d305 1
a305 1
    stringBuffer.append(TEXT_52);
d307 1
a307 1
    stringBuffer.append(TEXT_53);
d309 1
a309 1
    stringBuffer.append(TEXT_54);
d311 1
a311 1
    stringBuffer.append(TEXT_55);
d313 1
a313 1
    stringBuffer.append(TEXT_56);
d315 1
a315 1
    stringBuffer.append(TEXT_57);
d317 1
a317 1
    stringBuffer.append(TEXT_58);
d319 1
a319 1
    stringBuffer.append(TEXT_59);
d321 1
a321 1
    stringBuffer.append(TEXT_60);
d323 1
a323 1
    stringBuffer.append(TEXT_61);
d325 1
a325 1
    stringBuffer.append(TEXT_62);
d327 1
a327 1
    stringBuffer.append(TEXT_63);
d329 1
a329 1
    stringBuffer.append(TEXT_64);
d331 1
a331 1
    stringBuffer.append(TEXT_65);
d333 1
a333 1
    stringBuffer.append(TEXT_66);
d335 1
a335 1
    stringBuffer.append(TEXT_67);
d337 1
a337 1
    stringBuffer.append(TEXT_68);
d339 1
a339 1
    stringBuffer.append(TEXT_69);
d341 1
a341 1
    stringBuffer.append(TEXT_70);
d343 1
a343 1
    stringBuffer.append(TEXT_71);
d345 1
a345 1
    stringBuffer.append(TEXT_72);
d347 1
a347 1
    stringBuffer.append(TEXT_73);
d349 1
a349 1
    stringBuffer.append(TEXT_74);
d353 1
a353 1
    stringBuffer.append(TEXT_75);
d355 1
a355 1
    stringBuffer.append(TEXT_76);
d357 1
a357 1
    stringBuffer.append(TEXT_77);
d359 1
a359 1
    stringBuffer.append(TEXT_78);
d361 1
a361 1
    stringBuffer.append(TEXT_79);
d363 1
a363 1
    stringBuffer.append(TEXT_80);
d365 1
a365 1
    stringBuffer.append(TEXT_81);
d367 1
a367 1
    stringBuffer.append(TEXT_82);
d369 1
a369 1
    stringBuffer.append(TEXT_83);
d371 1
a371 1
    stringBuffer.append(TEXT_84);
d373 1
a373 1
    stringBuffer.append(TEXT_85);
d375 1
a375 1
    stringBuffer.append(TEXT_86);
d377 1
a377 1
    stringBuffer.append(TEXT_87);
d379 1
a379 1
    stringBuffer.append(TEXT_88);
d381 1
a381 1
    stringBuffer.append(TEXT_89);
d383 1
a383 1
    stringBuffer.append(TEXT_90);
d385 1
a385 1
    stringBuffer.append(TEXT_91);
d387 1
a387 1
    stringBuffer.append(TEXT_92);
d394 1
a394 1
    stringBuffer.append(TEXT_93);
d396 1
a396 1
    stringBuffer.append(TEXT_94);
d398 1
a398 1
    stringBuffer.append(TEXT_95);
d400 1
a400 1
    stringBuffer.append(TEXT_96);
d402 1
a402 1
    stringBuffer.append(TEXT_97);
d404 1
a404 1
    stringBuffer.append(TEXT_98);
d406 1
a406 1
    stringBuffer.append(TEXT_99);
d408 1
a408 1
    stringBuffer.append(TEXT_100);
d410 1
a410 1
    stringBuffer.append(TEXT_101);
d412 1
a412 1
    stringBuffer.append(TEXT_102);
d414 1
a414 1
    stringBuffer.append(TEXT_103);
d416 1
a416 1
    stringBuffer.append(TEXT_104);
d418 1
a418 1
    stringBuffer.append(TEXT_105);
d420 1
a420 1
    stringBuffer.append(TEXT_106);
d422 1
a422 1
    stringBuffer.append(TEXT_107);
d424 1
a424 1
    stringBuffer.append(TEXT_108);
d426 1
a426 1
    stringBuffer.append(TEXT_109);
@


1.46
log
@Correcting D&D processing.
@
text
@d93 35
a127 29
  protected final String TEXT_75 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void initializeGraphicalViewer() {" + NL + "\t\tsuper.initializeGraphicalViewer();" + NL + "\t\tgetDiagramGraphicalViewer().addDropTargetListener(new ";
  protected final String TEXT_76 = "(getDiagramGraphicalViewer(), ";
  protected final String TEXT_77 = ".getTransfer()) {" + NL + "" + NL + "\t\t\tprotected ";
  protected final String TEXT_78 = " getObjectsBeingDropped() {" + NL + "\t\t\t\t";
  protected final String TEXT_79 = "[] data = getCurrentEvent().dataTypes;" + NL + "\t\t\t\t";
  protected final String TEXT_80 = " uris = new ";
  protected final String TEXT_81 = "();" + NL + "\t\t\t\tfor (int i=0; i<data.length; i++) {" + NL + "\t\t\t\t\tif (";
  protected final String TEXT_82 = ".getTransfer().isSupportedType(data[i])) {" + NL + "\t\t\t\t\t\tObject result = ";
  protected final String TEXT_83 = ".getTransfer().nativeToJava(data[i]);" + NL + "\t\t\t\t\t\tif (result instanceof ";
  protected final String TEXT_84 = ") {" + NL + "\t\t\t\t\t\t\t";
  protected final String TEXT_85 = " selection = (";
  protected final String TEXT_86 = ") LocalSelectionTransfer.getTransfer().nativeToJava(data[i]);" + NL + "\t\t\t\t\t\t\tfor (";
  protected final String TEXT_87 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\tObject nextSelectedObject = it.next();";
  protected final String TEXT_88 = NL + "\t\t\t\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_89 = ") {" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_90 = " view = ((";
  protected final String TEXT_91 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\t\t\t\tnextSelectedObject = view.getElement();" + NL + "\t\t\t\t\t\t\t\t}";
  protected final String TEXT_92 = "\t\t\t\t\t\t\t\t" + NL + "\t\t\t\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_93 = ") {" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_94 = " modelElement = (";
  protected final String TEXT_95 = ") nextSelectedObject;" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_96 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_97 = " result = new ";
  protected final String TEXT_98 = "();" + NL + "\t\t\t\tfor (";
  protected final String TEXT_99 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_100 = " nextURI = (";
  protected final String TEXT_101 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_102 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_103 = NL + "\t" + NL + "}";
d137 1
d309 1
a309 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.DiagramDropTargetListener"));
d311 2
a313 2
    stringBuffer.append(TEXT_77);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d315 2
a317 2
    stringBuffer.append(TEXT_79);
    stringBuffer.append(importManager.getImportedName("java.util.Collection"));
d319 1
a319 1
    stringBuffer.append(importManager.getImportedName("java.util.HashSet"));
d321 1
a321 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
d323 1
a323 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.util.LocalSelectionTransfer"));
d325 10
d336 1
a336 1
    stringBuffer.append(TEXT_84);
d338 1
a338 1
    stringBuffer.append(TEXT_85);
d340 1
a340 1
    stringBuffer.append(TEXT_86);
d342 1
a342 1
    stringBuffer.append(TEXT_87);
d349 1
a349 1
    stringBuffer.append(TEXT_88);
d351 1
a351 1
    stringBuffer.append(TEXT_89);
d353 1
a353 1
    stringBuffer.append(TEXT_90);
d355 1
a355 1
    stringBuffer.append(TEXT_91);
d357 1
a357 1
    stringBuffer.append(TEXT_92);
d359 1
a359 1
    stringBuffer.append(TEXT_93);
d361 1
a361 1
    stringBuffer.append(TEXT_94);
d363 1
a363 1
    stringBuffer.append(TEXT_95);
d365 1
a365 1
    stringBuffer.append(TEXT_96);
d367 1
a367 1
    stringBuffer.append(TEXT_97);
d369 1
a369 1
    stringBuffer.append(TEXT_98);
d371 1
a371 1
    stringBuffer.append(TEXT_99);
d373 1
a373 1
    stringBuffer.append(TEXT_100);
d375 1
a375 1
    stringBuffer.append(TEXT_101);
d377 3
a379 1
    stringBuffer.append(TEXT_102);
d381 1
a381 1
    stringBuffer.append(TEXT_103);
@


1.45
log
@D&D from diagram content navigator to Diagram surface.
@
text
@d105 17
a121 13
  protected final String TEXT_87 = " it = selection.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t\t\t\tObject nextSelectedObject = it.next();" + NL + "\t\t\t\t\t\t\t\tif (nextSelectedObject instanceof ";
  protected final String TEXT_88 = ") {" + NL + "\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_89 = " view = ((";
  protected final String TEXT_90 = ") nextSelectedObject).getView();" + NL + "\t\t\t\t\t\t\t\t\tif (view.getElement() != null) {" + NL + "\t\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_91 = " modelElement = view.getElement();" + NL + "\t\t\t\t\t\t\t\t\t\t";
  protected final String TEXT_92 = " modelElementResource = modelElement.eResource();" + NL + "\t\t\t\t\t\t\t\t\t\turis.add(modelElementResource.getURI().appendFragment(modelElementResource.getURIFragment(modelElement)));\t" + NL + "\t\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t}" + NL + "\t\t\t\t";
  protected final String TEXT_93 = " result = new ";
  protected final String TEXT_94 = "();" + NL + "\t\t\t\tfor (";
  protected final String TEXT_95 = " it = uris.iterator(); it.hasNext();) {" + NL + "\t\t\t\t\t";
  protected final String TEXT_96 = " nextURI = (";
  protected final String TEXT_97 = ") it.next();" + NL + "\t\t\t\t\t";
  protected final String TEXT_98 = " modelObject = getEditingDomain().getResourceSet().getEObject(nextURI, true);" + NL + "\t\t\t\t\tresult.add(modelObject);" + NL + "\t\t\t\t}" + NL + "\t\t\t\treturn result;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t});" + NL + "\t}";
  protected final String TEXT_99 = NL + "\t" + NL + "}";
d299 2
a300 5
/*
 * TODO: movel NavigatorItem to some public place and remove 
 * "genEditor.getEditorGen().getNavigator() != null" test
 */
if (genEditor.getEditorGen().getNavigator() != null && genDiagram.generateCreateShortcutAction()) {
d326 7
d334 1
a334 1
    stringBuffer.append(TEXT_88);
d336 1
a336 1
    stringBuffer.append(TEXT_89);
d338 7
a344 1
    stringBuffer.append(TEXT_90);
d346 1
a346 1
    stringBuffer.append(TEXT_91);
d348 1
a348 1
    stringBuffer.append(TEXT_92);
d350 1
a350 1
    stringBuffer.append(TEXT_93);
d352 1
a352 1
    stringBuffer.append(TEXT_94);
d354 1
a354 1
    stringBuffer.append(TEXT_95);
d356 1
a356 1
    stringBuffer.append(TEXT_96);
d358 1
a358 1
    stringBuffer.append(TEXT_97);
d360 1
a360 1
    stringBuffer.append(TEXT_98);
d362 1
a362 1
    stringBuffer.append(TEXT_99);
@


1.44
log
@#114200 use uri editor input for diagram editor
@
text
@d93 25
a117 1
  protected final String TEXT_75 = NL + "}";
d295 5
d301 48
@


1.43
log
@LinkHelper generated for Project Explorer view.
@
text
@d85 9
a93 1
  protected final String TEXT_67 = NL + "}";
d254 16
d271 1
a271 1
    stringBuffer.append(TEXT_67);
@


1.42
log
@[119465] support for diagram partitioning - few hacks to use FileEditorInput because otherwise nothing gonna work
@
text
@d48 1
a48 1
  protected final String TEXT_30 = " = ((";
d50 1
a50 1
  protected final String TEXT_32 = " = ";
d170 1
a170 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram diagram"));
d174 1
a174 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile diagramFile"));
@


1.41
log
@Removing unnecessary imports.
@
text
@d39 1
a39 1
  protected final String TEXT_21 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(";
d42 44
a85 41
  protected final String TEXT_24 = "());" + NL + "\t\t} else if (input instanceof ";
  protected final String TEXT_25 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_26 = "() {" + NL + "" + NL + "\t\t\t\tpublic IEditorInput createInputWithEditingDomain(";
  protected final String TEXT_27 = " editorInput, TransactionalEditingDomain domain) {" + NL + "\t\t\t\t\tassert editorInput instanceof ";
  protected final String TEXT_28 = ";" + NL + "\t\t\t\t\tclass Proxy extends ";
  protected final String TEXT_29 = " implements ";
  protected final String TEXT_30 = " {" + NL + "" + NL + "\t\t\t\t\t\t// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=158740" + NL + "\t\t\t\t\t\tProxy(IEditorInput input, TransactionalEditingDomain domain) {" + NL + "\t\t\t\t\t\t\tsuper(input, domain);" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tpublic ";
  protected final String TEXT_31 = " getDiagram() {" + NL + "\t\t\t\t\t\t\treturn ((";
  protected final String TEXT_32 = ") fProxied).getDiagram();" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tpublic Object getAdapter(Class adapter) {" + NL + "\t\t\t\t\t\t\tif (adapter == org.eclipse.core.resources.IStorage.class) {" + NL + "\t\t\t\t\t\t\t\treturn super.getAdapter(org.eclipse.core.resources.IFile.class);" + NL + "\t\t\t\t\t\t\t}" + NL + "\t\t\t\t\t\t\treturn super.getAdapter(adapter);" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new Proxy(editorInput, domain);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_33 = "());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void gotoMarker(";
  protected final String TEXT_34 = " marker) {";
  protected final String TEXT_35 = NL + "        ";
  protected final String TEXT_36 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_37 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_38 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_39 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_40 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_41 = " dialog = new ";
  protected final String TEXT_42 = "(shell);" + NL + "\t\t";
  protected final String TEXT_43 = " original = input instanceof ";
  protected final String TEXT_44 = " ? ((";
  protected final String TEXT_45 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_46 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_47 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_48 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_49 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_50 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_51 = " workspaceRoot = ";
  protected final String TEXT_52 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_53 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_54 = " newInput = new ";
  protected final String TEXT_55 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_56 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_57 = "[] editorRefs = ";
  protected final String TEXT_58 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_59 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_60 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_61 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_62 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_64 = NL + "}";
d158 1
a158 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d160 3
a162 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramInputDocumentProvider"));
d166 2
a168 2
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.EditorInputProxy"));
d170 2
a172 2
    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d174 1
a174 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d176 1
a176 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d178 1
a178 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IMarker"));
d180 1
d182 8
d191 1
a191 1
    stringBuffer.append(TEXT_36);
d193 1
a193 1
    stringBuffer.append(TEXT_37);
d195 1
a195 1
    stringBuffer.append(TEXT_38);
d197 1
a197 1
    stringBuffer.append(TEXT_39);
d199 1
a199 1
    stringBuffer.append(TEXT_40);
d201 1
a201 1
    stringBuffer.append(TEXT_41);
d203 1
a203 1
    stringBuffer.append(TEXT_42);
d205 1
a205 1
    stringBuffer.append(TEXT_43);
d207 1
a207 1
    stringBuffer.append(TEXT_44);
d209 1
a209 1
    stringBuffer.append(TEXT_45);
d211 1
a211 1
    stringBuffer.append(TEXT_46);
d213 1
a213 1
    stringBuffer.append(TEXT_47);
d215 1
a215 1
    stringBuffer.append(TEXT_48);
d217 1
a217 1
    stringBuffer.append(TEXT_49);
d219 1
a219 1
    stringBuffer.append(TEXT_50);
d221 1
a221 1
    stringBuffer.append(TEXT_51);
d223 1
a223 1
    stringBuffer.append(TEXT_52);
d225 1
a225 1
    stringBuffer.append(TEXT_53);
d227 1
a227 1
    stringBuffer.append(TEXT_54);
d229 1
a229 1
    stringBuffer.append(TEXT_55);
d231 1
a231 1
    stringBuffer.append(TEXT_56);
d233 1
a233 1
    stringBuffer.append(TEXT_57);
d235 1
a235 1
    stringBuffer.append(TEXT_58);
d237 1
a237 1
    stringBuffer.append(TEXT_59);
d239 1
a239 1
    stringBuffer.append(TEXT_60);
d241 1
a241 1
    stringBuffer.append(TEXT_61);
d243 1
a243 1
    stringBuffer.append(TEXT_62);
d245 1
a245 1
    stringBuffer.append(TEXT_63);
d247 1
a247 1
    stringBuffer.append(TEXT_64);
@


1.40
log
@one more workaround for #158740
@
text
@a4 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
@


1.39
log
@#114200 implement 'save as' later for RCP
@
text
@d51 1
a51 1
  protected final String TEXT_32 = ") fProxied).getDiagram();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new Proxy(editorInput, domain);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
a83 1
  protected final String TEXT_65 = NL;
a235 1
    stringBuffer.append(TEXT_65);
@


1.38
log
@support 'save as' in rcp
@
text
@d55 29
a83 29
  protected final String TEXT_36 = ".getInstance().gotoMarker(this, marker);" + NL + "    }";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_38 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_39 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_40 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_41 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_42 = " dialog = new ";
  protected final String TEXT_43 = "(shell);" + NL + "\t\t";
  protected final String TEXT_44 = " original = input instanceof ";
  protected final String TEXT_45 = " ? ((";
  protected final String TEXT_46 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_47 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_48 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_49 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_50 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_51 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_52 = " workspaceRoot = ";
  protected final String TEXT_53 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_54 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_55 = " newInput = new ";
  protected final String TEXT_56 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_57 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_58 = "[] editorRefs = ";
  protected final String TEXT_59 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_60 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_61 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_62 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_63 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_64 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}" + NL + "}";
d180 1
a180 1
    }
d182 1
a182 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.NullProgressMonitor"));
d184 1
a184 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IProgressMonitor"));
d186 1
a186 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Shell"));
d188 1
a188 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d192 1
a192 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d194 1
a194 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d198 1
a198 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d200 1
a200 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.IDocumentProvider"));
d202 1
a202 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.osgi.util.NLS"));
d204 1
a204 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.IMessageProvider"));
d206 1
a206 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.window.Window"));
d208 1
a208 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IPath"));
d210 1
a210 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IWorkspaceRoot"));
d212 1
a212 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.ResourcesPlugin"));
d214 1
a214 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d216 1
a216 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorInput"));
d218 1
a218 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.part.FileEditorInput"));
d220 1
a220 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorMatchingStrategy"));
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IEditorReference"));
d224 1
a224 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.PlatformUI"));
d226 1
a226 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.MessageDialog"));
d228 1
a228 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.CoreException"));
d232 1
a232 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d234 1
a234 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.jface.dialogs.ErrorDialog"));
@


1.37
log
@#114200 remove editor.ide dep for rcp configuration
@
text
@d55 29
a83 29
  protected final String TEXT_36 = ".getInstance().gotoMarker(this, marker);" + NL + "    }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean isSaveAsAllowed() {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void doSaveAs() {" + NL + "\t\tperformSaveAs(new ";
  protected final String TEXT_37 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void performSaveAs(";
  protected final String TEXT_38 = " progressMonitor) {" + NL + "\t\t";
  protected final String TEXT_39 = " shell = getSite().getShell();" + NL + "\t\t";
  protected final String TEXT_40 = " input = getEditorInput();" + NL + "\t\t";
  protected final String TEXT_41 = " dialog = new ";
  protected final String TEXT_42 = "(shell);" + NL + "\t\t";
  protected final String TEXT_43 = " original = input instanceof ";
  protected final String TEXT_44 = " ? ((";
  protected final String TEXT_45 = ") input).getFile() : null;" + NL + "\t\tif (original != null) {" + NL + "\t\t\tdialog.setOriginalFile(original);" + NL + "\t\t}" + NL + "\t\tdialog.create();" + NL + "\t\t";
  protected final String TEXT_46 = " provider = getDocumentProvider();" + NL + "\t\tif (provider == null) {" + NL + "\t\t\t// editor has been programmatically closed while the dialog was open" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\tif (provider.isDeleted(input) && original != null) {" + NL + "\t\t\tString message = ";
  protected final String TEXT_47 = ".bind(\"The original file ''{0}'' has been deleted.\", original.getName());" + NL + "\t\t\tdialog.setErrorMessage(null);" + NL + "\t\t\tdialog.setMessage(message, ";
  protected final String TEXT_48 = ".WARNING);" + NL + "\t\t}" + NL + "\t\tif (dialog.open() == ";
  protected final String TEXT_49 = ".CANCEL) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_50 = " filePath = dialog.getResult();" + NL + "\t\tif (filePath == null) {" + NL + "\t\t\tif (progressMonitor != null) {" + NL + "\t\t\t\tprogressMonitor.setCanceled(true);" + NL + "\t\t\t}" + NL + "\t\t\treturn;" + NL + "\t\t}" + NL + "\t\t";
  protected final String TEXT_51 = " workspaceRoot = ";
  protected final String TEXT_52 = ".getWorkspace().getRoot();" + NL + "\t\t";
  protected final String TEXT_53 = " file = workspaceRoot.getFile(filePath);" + NL + "\t\tfinal ";
  protected final String TEXT_54 = " newInput = new ";
  protected final String TEXT_55 = "(file);" + NL + "\t\t// Check if the editor is already open" + NL + "\t\t";
  protected final String TEXT_56 = " matchingStrategy = getEditorDescriptor().getEditorMatchingStrategy();" + NL + "\t\t";
  protected final String TEXT_57 = "[] editorRefs = ";
  protected final String TEXT_58 = ".getWorkbench().getActiveWorkbenchWindow().getActivePage().getEditorReferences();" + NL + "\t\tfor (int i = 0; i < editorRefs.length; i++) {" + NL + "\t\t\tif (matchingStrategy.matches(editorRefs[i], newInput)) {" + NL + "\t\t\t\t";
  protected final String TEXT_59 = ".openWarning(shell, \"Problem During Save As...\", \"Save could not be completed. Target file is already open in another editor.\");" + NL + "\t\t\t\treturn;" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tboolean success = false;" + NL + "\t\ttry {" + NL + "\t\t\tprovider.aboutToChange(newInput);" + NL + "\t\t\tgetDocumentProvider(newInput).saveDocument(progressMonitor, newInput, getDocumentProvider().getDocument(getEditorInput()), true);" + NL + "\t\t\tsuccess = true;" + NL + "\t\t} catch (";
  protected final String TEXT_60 = " x) {" + NL + "\t\t\t";
  protected final String TEXT_61 = " status = x.getStatus();" + NL + "\t\t\tif (status == null || status.getSeverity() != ";
  protected final String TEXT_62 = ".CANCEL) {" + NL + "\t\t\t\t";
  protected final String TEXT_63 = ".openError(shell, \"Save Problems\", \"Could not save file.\", x.getStatus());" + NL + "\t\t\t}" + NL + "\t\t} finally {" + NL + "\t\t\tprovider.changed(newInput);" + NL + "\t\t\tif (success) {" + NL + "\t\t\t\tsetInput(newInput);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "\t\tif (progressMonitor != null) {" + NL + "\t\t\tprogressMonitor.setCanceled(!success);" + NL + "\t\t}" + NL + "\t}";
  protected final String TEXT_64 = NL + "}";
d180 2
d183 1
a183 1
    stringBuffer.append(TEXT_37);
d185 1
a185 1
    stringBuffer.append(TEXT_38);
d187 1
a187 1
    stringBuffer.append(TEXT_39);
a188 2
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.dialogs.SaveAsDialog"));
d192 2
a194 2
    stringBuffer.append(TEXT_43);
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d198 2
d201 1
a201 1
    stringBuffer.append(TEXT_46);
d203 1
a203 1
    stringBuffer.append(TEXT_47);
d205 1
a205 1
    stringBuffer.append(TEXT_48);
d207 1
a207 1
    stringBuffer.append(TEXT_49);
d209 1
a209 1
    stringBuffer.append(TEXT_50);
d211 1
a211 1
    stringBuffer.append(TEXT_51);
d213 1
a213 1
    stringBuffer.append(TEXT_52);
d215 1
a215 1
    stringBuffer.append(TEXT_53);
d217 1
a217 1
    stringBuffer.append(TEXT_54);
d219 1
a219 1
    stringBuffer.append(TEXT_55);
d221 1
a221 1
    stringBuffer.append(TEXT_56);
d223 1
a223 1
    stringBuffer.append(TEXT_57);
d225 1
a225 1
    stringBuffer.append(TEXT_58);
d227 1
a227 1
    stringBuffer.append(TEXT_59);
a228 2
    stringBuffer.append(TEXT_60);
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.runtime.IStatus"));
d232 2
a234 2
    stringBuffer.append(TEXT_63);
    }
@


1.36
log
@[119465] support for diagram partitioning - use annotations to keep references to diagrams and to pass information about editors to be open.
Still a lot of subtle issues to resolve, do not turn editpolicy generation on for a while
@
text
@d3 1
d5 1
d23 1
a23 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;" + NL + "import org.eclipse.ui.IEditorInput;" + NL + "import org.eclipse.ui.ide.IGotoMarker;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;";
d25 3
a27 3
  protected final String TEXT_6 = " extends FileDiagramEditor implements IGotoMarker";
  protected final String TEXT_7 = ", ";
  protected final String TEXT_8 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ID = \"";
d31 54
a84 21
  protected final String TEXT_12 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_13 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_14 = "());" + NL + "\t\t} else if (input instanceof ";
  protected final String TEXT_15 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_16 = "() {" + NL + "\t\t\t\tpublic IEditorInput createInputWithEditingDomain(IEditorInput editorInput, TransactionalEditingDomain domain) {" + NL + "\t\t\t\t\tassert editorInput instanceof ";
  protected final String TEXT_17 = ";" + NL + "\t\t\t\t\tclass Proxy extends ";
  protected final String TEXT_18 = " implements ";
  protected final String TEXT_19 = " {" + NL + "\t\t\t\t\t\t// workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=158740" + NL + "\t\t\t\t\t\tProxy(IEditorInput input, TransactionalEditingDomain domain) {" + NL + "\t\t\t\t\t\t\tsuper(input, domain);" + NL + "\t\t\t\t\t\t}" + NL + "" + NL + "\t\t\t\t\t\tpublic ";
  protected final String TEXT_20 = " getDiagram() {" + NL + "\t\t\t\t\t\t\treturn ((";
  protected final String TEXT_21 = ") fProxied).getDiagram();" + NL + "\t\t\t\t\t\t}" + NL + "\t\t\t\t\t}" + NL + "\t\t\t\t\treturn new Proxy(editorInput, domain);" + NL + "\t\t\t\t}" + NL + "\t\t\t});" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_22 = "());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_23 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_24 = " getPreferencesHint() {";
  protected final String TEXT_25 = NL + "\t\treturn ";
  protected final String TEXT_26 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_27 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_28 = ".ID;" + NL + "\t}";
  protected final String TEXT_29 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_30 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_31 = NL + "}";
  protected final String TEXT_32 = NL;
d110 10
a119 1
    if (propertySheet != null && propertySheet.isReadOnly()) {
d121 1
a121 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.properties.views.IReadOnlyDiagramPropertySheetPageContributor"));
d132 1
a132 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IFileEditorInput"));
d134 1
a134 1
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
d136 1
a136 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d138 1
a138 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.DiagramInputDocumentProvider"));
d140 1
a140 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d142 1
a142 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.EditorInputProxy"));
d144 1
a144 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d146 1
a146 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.notation.Diagram"));
d148 2
a149 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.parts.IDiagramEditorInput"));
d151 1
a151 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d153 1
a153 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
d155 1
a155 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
d157 1
a157 1
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
d159 1
a159 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d161 1
a161 1
    if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/
d163 1
a163 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d165 1
a165 1
    } else {
d167 1
a167 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.views.properties.IPropertySheetPage"));
d169 65
d235 1
a235 1
    stringBuffer.append(TEXT_31);
d237 1
a237 1
    stringBuffer.append(TEXT_32);
@


1.35
log
@Read-only properties provided into the navigator.
@
text
@d29 21
a49 14
  protected final String TEXT_12 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tif (input.getAdapter(";
  protected final String TEXT_13 = ".class) != null) {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_14 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_15 = "());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_16 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_17 = " getPreferencesHint() {";
  protected final String TEXT_18 = NL + "\t\treturn ";
  protected final String TEXT_19 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_20 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_21 = ".ID;" + NL + "\t}";
  protected final String TEXT_22 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_23 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_24 = NL + "}";
  protected final String TEXT_25 = NL;
d88 1
a88 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d92 14
d107 1
a107 1
    stringBuffer.append(TEXT_15);
d109 1
a109 1
    stringBuffer.append(TEXT_16);
d111 1
a111 1
    stringBuffer.append(TEXT_17);
d113 1
a113 1
    stringBuffer.append(TEXT_18);
d115 1
a115 1
    stringBuffer.append(TEXT_19);
d117 1
a117 1
    stringBuffer.append(TEXT_20);
d119 1
a119 1
    stringBuffer.append(TEXT_21);
d121 1
a121 1
    stringBuffer.append(TEXT_22);
d123 1
a123 1
    stringBuffer.append(TEXT_23);
d125 1
a125 1
    stringBuffer.append(TEXT_24);
d127 1
a127 1
    stringBuffer.append(TEXT_25);
@


1.34
log
@handle readOnly attribute of the property sheet
@
text
@d51 1
d68 1
a68 1
    if (genDiagram.getEditorGen().getPropertySheet().isReadOnly()) {
@


1.33
log
@fully-qualified class names are much better
@
text
@d23 20
a42 18
  protected final String TEXT_6 = " extends FileDiagramEditor implements IGotoMarker {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ID = \"";
  protected final String TEXT_7 = "\"; //$NON-NLS-1$" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_8 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_9 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected String getEditingDomainID() {" + NL + "\t\treturn \"";
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tif (input.getAdapter(";
  protected final String TEXT_11 = ".class) != null) {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_12 = "());" + NL + "\t\t} else {" + NL + "\t\t\tsetDocumentProvider(new ";
  protected final String TEXT_13 = "());" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_14 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_15 = " getPreferencesHint() {";
  protected final String TEXT_16 = NL + "\t\treturn ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}";
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic String getContributorId() {" + NL + "\t\treturn ";
  protected final String TEXT_19 = ".ID;" + NL + "\t}";
  protected final String TEXT_20 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == ";
  protected final String TEXT_21 = ".class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_22 = NL + "}";
  protected final String TEXT_23 = NL;
d67 1
a67 1
    stringBuffer.append(genEditor.getID());
d69 2
a70 1
    stringBuffer.append(genEditor.getClassName());
d72 1
a72 1
    stringBuffer.append(genDiagram.getPalette() != null && genDiagram.getPalette().isFlyout());
d74 1
a74 1
    stringBuffer.append(genDiagram.getEditingDomainID());
d76 1
a76 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.core.resources.IFile"));
d78 1
a78 1
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
d80 1
a80 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.document.StorageDiagramDocumentProvider"));
d82 1
a82 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
d84 1
a84 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
d86 1
a86 1
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
d88 1
a88 1
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
d90 1
a90 1
    if (genDiagram.getEditorGen().getPropertySheet() != null) { /*perhaps, we should override contributor id regardless of sheet presence, there's no much sense in default id either.*/
d94 4
d99 1
a99 1
    stringBuffer.append(TEXT_20);
d101 1
a101 1
    stringBuffer.append(TEXT_21);
d103 1
a103 1
    stringBuffer.append(TEXT_22);
d105 1
a105 1
    stringBuffer.append(TEXT_23);
@


1.32
log
@Generate PropertySheet pluged into tabbed page framework of Eclipse instead of plug-in as runtime provider.
Eases pages being added/removed/replaced/tuned
@
text
@d37 4
a40 3
  protected final String TEXT_20 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic Object getAdapter(Class type) {" + NL + "\t\tif (type == IPropertySheetPage.class) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn super.getAdapter(type);" + NL + "\t}";
  protected final String TEXT_21 = NL + "}";
  protected final String TEXT_22 = NL;
d93 2
d96 1
a96 1
    stringBuffer.append(TEXT_21);
d98 1
a98 1
    stringBuffer.append(TEXT_22);
@


1.31
log
@generated tag
@
text
@d34 6
a39 2
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
d86 8
d95 1
a95 1
    stringBuffer.append(TEXT_18);
@


1.30
log
@getParent() method generated for NavigatorContentProvider.
@
text
@d31 1
a31 1
  protected final String TEXT_14 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\tprotected ";
@


1.29
log
@[157119] use correct preference store in the editor
@
text
@d31 5
a35 4
  protected final String TEXT_14 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "" + NL + "\tprotected PreferencesHint getPreferencesHint() {";
  protected final String TEXT_15 = NL + "\t\treturn ";
  protected final String TEXT_16 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}" + NL + "}";
  protected final String TEXT_17 = NL;
d76 2
d79 1
a79 1
    stringBuffer.append(TEXT_15);
d81 1
a81 1
    stringBuffer.append(TEXT_16);
d83 1
a83 1
    stringBuffer.append(TEXT_17);
@


1.28
log
@Supporting EditorInput returned from version-control.
@
text
@d31 4
a34 2
  protected final String TEXT_14 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_15 = NL;
d75 4
d80 1
a80 1
    stringBuffer.append(TEXT_15);
@


1.28.2.1
log
@#165077. PreferenceInitializer is never invoked
@
text
@d31 2
a32 5
  protected final String TEXT_14 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_15 = " getPreferencesHint() {";
  protected final String TEXT_16 = " " + NL + "\t\treturn ";
  protected final String TEXT_17 = ".DIAGRAM_PREFERENCES_HINT;" + NL + "\t}" + NL + "}";
  protected final String TEXT_18 = NL;
d73 1
a73 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.diagram.core.preferences.PreferencesHint"));
a74 6
    /*XXX seems better we use preference store directly (in configureGraphicalViewer) instead all these indirect ids */
    stringBuffer.append(TEXT_16);
    stringBuffer.append(genDiagram.getEditorGen().getPlugin().getActivatorClassName());
    stringBuffer.append(TEXT_17);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_18);
@


1.27
log
@Supporting EditorInput returned from version-control.
@
text
@d27 2
a28 2
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tif (input instanceof ";
  protected final String TEXT_11 = ") {" + NL + "\t\t\tsetDocumentProvider(new ";
d65 1
a65 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.ui.IStorageEditorInput"));
d67 2
a69 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
@


1.26
log
@#143541 Add property to gmfgen to hold editing domain id
#144205 Add property to gmfgen model to hold diagram creation wizard category id
@
text
@d27 6
a32 4
  protected final String TEXT_10 = "\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_11 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_12 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_13 = NL;
d65 4
d70 1
a70 1
    stringBuffer.append(TEXT_11);
d72 1
a72 1
    stringBuffer.append(TEXT_12);
d74 1
a74 1
    stringBuffer.append(TEXT_13);
@


1.25
log
@header comment should not be a javadoc comment
@
text
@d27 1
a27 1
  protected final String TEXT_10 = "EditingDomain\"; //$NON-NLS-1$" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
d61 1
a61 1
    stringBuffer.append(genEditor.getEditorGen().getModelID());
@


1.24
log
@fix some nls markers
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.23
log
@Correcting copyright processing
@
text
@d24 1
a24 1
  protected final String TEXT_7 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d27 1
a27 1
  protected final String TEXT_10 = "EditingDomain\";" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected TransactionalEditingDomain createEditingDomain() {" + NL + "\t\tTransactionalEditingDomain domain = super.createEditingDomain();" + NL + "\t\tdomain.setID(getEditingDomainID());" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
@


1.22
log
@#142179 Each instance of the generated DiagramEditor should operate with own instance of editing domain
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d46 1
a46 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.21
log
@use element type bindings #136760
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;" + NL + "import org.eclipse.ui.IEditorInput;" + NL + "import org.eclipse.ui.ide.IGotoMarker;";
d27 1
a27 1
  protected final String TEXT_10 = "EditingDomain\";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
@


1.20
log
@using M6 to generate code.
@
text
@d26 5
a30 4
  protected final String TEXT_9 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_10 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_11 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t\tLayeredPane scalableLayers = (LayeredPane) root.getLayer(LayerConstants.SCALABLE_LAYERS);" + NL + "\t\tFreeformLayer scaledFeedbackLayer = new FreeformLayer();" + NL + "\t\tscaledFeedbackLayer.setEnabled(false);" + NL + "\t\tscalableLayers.addLayerAfter(scaledFeedbackLayer, LayerConstants.SCALED_FEEDBACK_LAYER, DiagramRootEditPart.DECORATION_UNPRINTABLE_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
d61 2
d64 1
a64 1
    stringBuffer.append(TEXT_10);
d66 1
a66 1
    stringBuffer.append(TEXT_11);
d68 1
a68 1
    stringBuffer.append(TEXT_12);
@


1.19
log
@restore generators
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.18
log
@#134095 do not store compiled templates in cvs
@
text
@d33 1
a33 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.17
log
@Switching to eclipse M6.
@
text
@@


1.16
log
@provide feedback consistent with the runtime
@
text
@d33 1
a33 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d28 1
a28 1
  protected final String TEXT_11 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t}" + NL + "}";
@


1.14
log
@#126199 add palette provider
@
text
@d18 12
a29 9
  protected final String TEXT_1 = NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;" + NL + "import org.eclipse.ui.IEditorInput;" + NL + "import org.eclipse.ui.ide.IGotoMarker;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends FileDiagramEditor implements IGotoMarker {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ID = \"";
  protected final String TEXT_4 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_6 = ");" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_7 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_8 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
a38 1
importManager.emitPackageStatement(stringBuffer);
d40 10
d51 1
a51 1
    stringBuffer.append(TEXT_2);
d53 1
a53 1
    stringBuffer.append(TEXT_3);
d55 1
a55 1
    stringBuffer.append(TEXT_4);
d57 1
a57 1
    stringBuffer.append(TEXT_5);
d59 1
a59 1
    stringBuffer.append(TEXT_6);
d61 1
a61 1
    stringBuffer.append(TEXT_7);
d63 1
a63 1
    stringBuffer.append(TEXT_8);
d65 1
a65 1
    stringBuffer.append(TEXT_9);
@


1.13
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d23 4
a26 9
  protected final String TEXT_6 = ");" + NL + "\t}" + NL;
  protected final String TEXT_7 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_8 = " createPaletteRoot(";
  protected final String TEXT_9 = " existingPaletteRoot) {" + NL + "\t\texistingPaletteRoot = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\t";
  protected final String TEXT_10 = ".fillPalette(existingPaletteRoot, getDiagram());" + NL + "\t\treturn existingPaletteRoot;" + NL + "\t}";
  protected final String TEXT_11 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_12 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_13 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_14 = NL;
d46 1
a46 1
    stringBuffer.append(genDiagram.getPalette() != null);
d48 1
a48 1
    if (genDiagram.getPalette() != null) {
d50 1
a50 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot"));
d52 1
a52 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot"));
a53 10
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_14);
@


1.12
log
@EDITOR_ID moved out from plugin to Editor
@
text
@d18 14
a31 16
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;" + NL + "import org.eclipse.ui.IEditorInput;" + NL + "import org.eclipse.ui.ide.IGotoMarker;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends FileDiagramEditor implements IGotoMarker {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final String ID = \"";
  protected final String TEXT_6 = "\";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_7 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_8 = ");" + NL + "\t}" + NL;
  protected final String TEXT_9 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_10 = " createPaletteRoot(";
  protected final String TEXT_11 = " existingPaletteRoot) {" + NL + "\t\texistingPaletteRoot = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\t";
  protected final String TEXT_12 = ".fillPalette(existingPaletteRoot, getDiagram());" + NL + "\t\treturn existingPaletteRoot;" + NL + "\t}";
  protected final String TEXT_13 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_14 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_15 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_16 = NL;
d37 1
a37 1
final GenEditorView genEditor = (GenEditorView) argument;
d39 1
d41 1
d43 1
a43 1
    stringBuffer.append(genEditor.getPackageName());
d45 1
a45 1
    ImportUtil importManager = new ImportUtil(genEditor.getPackageName());
d47 1
a47 1
    importManager.markImportLocation(stringBuffer);
d51 1
a51 1
    stringBuffer.append(genEditor.getID());
d53 1
a53 1
    stringBuffer.append(genEditor.getClassName());
d55 1
a55 1
    stringBuffer.append(genDiagram.getPalette() != null);
d57 1
a57 1
    if (genDiagram.getPalette() != null) {
d59 1
a59 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot"));
d61 1
a61 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot"));
d63 1
a63 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
d65 1
a65 1
    }
d67 1
a67 1
    stringBuffer.append(genDiagram.getDocumentProviderClassName());
a68 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_15);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_16);
@


1.11
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d22 12
a33 11
  protected final String TEXT_5 = " extends FileDiagramEditor implements IGotoMarker {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_6 = "() {" + NL + "\t\tsuper(";
  protected final String TEXT_7 = ");" + NL + "\t}" + NL;
  protected final String TEXT_8 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected ";
  protected final String TEXT_9 = " createPaletteRoot(";
  protected final String TEXT_10 = " existingPaletteRoot) {" + NL + "\t\texistingPaletteRoot = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\t";
  protected final String TEXT_11 = ".fillPalette(existingPaletteRoot, getDiagram());" + NL + "\t\treturn existingPaletteRoot;" + NL + "\t}";
  protected final String TEXT_12 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_13 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_14 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_15 = NL;
d51 2
d54 1
a54 1
    stringBuffer.append(TEXT_6);
d56 1
a56 1
    stringBuffer.append(TEXT_7);
a57 2
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gef.palette.PaletteRoot"));
d61 2
d64 1
a64 1
    stringBuffer.append(TEXT_11);
d66 1
a66 1
    stringBuffer.append(TEXT_12);
d68 1
a68 1
    stringBuffer.append(TEXT_13);
d70 1
a70 1
    stringBuffer.append(TEXT_14);
d72 1
a72 1
    stringBuffer.append(TEXT_15);
@


1.10
log
@ImportManager moved to oeg.common
@
text
@d37 4
a40 1
    GenDiagram genDiagram = (GenDiagram) argument;
d42 1
a42 1
    stringBuffer.append(genDiagram.getEditorPackageName());
d44 1
a44 1
    ImportUtil importManager = new ImportUtil(genDiagram.getEditorPackageName());
d48 1
a48 1
    stringBuffer.append(genDiagram.getEditorClassName());
d50 1
a50 1
    stringBuffer.append(genDiagram.getEditorClassName());
@


1.9
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@d4 1
a4 1
import org.eclipse.gmf.codegen.util.*;
@


1.8
log
@#123411 Support diagram without palette
cleanup (deprecated attribute removed, as well as incorrect javadoc)
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditor;" + NL + "import org.eclipse.ui.IEditorInput;";
d22 1
a22 1
  protected final String TEXT_5 = " extends FileDiagramEditor {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
@


1.7
log
@#122054 support external node labels
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.draw2d.DelegatingLayout;" + NL + "import org.eclipse.draw2d.FreeformLayer;" + NL + "import org.eclipse.draw2d.LayeredPane;" + NL + "import org.eclipse.gef.LayerConstants;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.editparts.DiagramRootEditPart;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditorWithFlyoutPalette;" + NL + "import org.eclipse.ui.IEditorInput;";
d22 11
a32 5
  protected final String TEXT_5 = " extends FileDiagramEditorWithFlyoutPalette {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\texistingPaletteRoot = super.createPaletteRoot(existingPaletteRoot);" + NL + "\t\t";
  protected final String TEXT_6 = ".fillPalette(existingPaletteRoot, getDiagram());" + NL + "\t\treturn existingPaletteRoot;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_7 = "());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void configureGraphicalViewer() {" + NL + "\t\tsuper.configureGraphicalViewer();" + NL + "\t\tDiagramRootEditPart root = (DiagramRootEditPart) getDiagramGraphicalViewer().getRootEditPart();" + NL + "\t\tLayeredPane printableLayers = (LayeredPane) root.getLayer(LayerConstants.PRINTABLE_LAYERS);" + NL + "\t\tFreeformLayer extLabelsLayer = new FreeformLayer();" + NL + "\t\textLabelsLayer.setLayoutManager(new DelegatingLayout());" + NL + "\t\tprintableLayers.addLayerAfter(extLabelsLayer, ";
  protected final String TEXT_8 = ".EXTERNAL_NODE_LABELS_LAYER, LayerConstants.PRIMARY_LAYER);" + NL + "\t}" + NL + "}";
  protected final String TEXT_9 = NL;
d47 10
d58 3
a60 1
    stringBuffer.append(TEXT_6);
d62 1
a62 1
    stringBuffer.append(TEXT_7);
d64 1
a64 1
    stringBuffer.append(TEXT_8);
d66 1
a66 1
    stringBuffer.append(TEXT_9);
@


1.6
log
@#117857 Generate palette factory that may contribute to existing palette model
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditorWithFlyoutPalette;" + NL + "import org.eclipse.ui.IEditorInput;";
d24 3
a26 2
  protected final String TEXT_7 = "());" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
d45 2
d48 1
a48 1
    stringBuffer.append(TEXT_8);
@


1.5
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d22 3
a24 3
  protected final String TEXT_5 = " extends FileDiagramEditorWithFlyoutPalette {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot(PaletteRoot existingPaletteRoot) {" + NL + "\t\tif (existingPaletteRoot != null) {" + NL + "\t\t\treturn existingPaletteRoot;" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_6 = ".createPalette(getDiagram());" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setDocumentProvider(IEditorInput input) {" + NL + "\t\tsetDocumentProvider(new ";
  protected final String TEXT_7 = "());" + NL + "\t}" + NL + "\t" + NL + "}";
@


1.4
log
@[dstadnik] #112764 sync with rt api update
@
text
@d20 1
a20 1
  protected final String TEXT_3 = NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditorWithFlyoutPalette;";
d23 3
a25 2
  protected final String TEXT_6 = ".createPalette(getDiagram());" + NL + "\t}" + NL + "}";
  protected final String TEXT_7 = NL;
d42 2
d45 1
a45 1
    stringBuffer.append(TEXT_7);
@


1.3
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d22 2
a23 2
  protected final String TEXT_5 = " extends FileDiagramEditorWithFlyoutPalette {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected PaletteRoot createPaletteRoot() {" + NL + "\t\treturn ";
  protected final String TEXT_6 = ".createPalette(getDiagram());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void updatePaletteRoot() {" + NL + "\t}" + NL + "}";
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@a2 1
import java.util.List;
d4 1
a4 2
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.util.ImportUtil;
d20 1
a20 1
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.emf.common.notify.AdapterFactory;" + NL + "import org.eclipse.emf.edit.provider.ComposedAdapterFactory;" + NL + "import org.eclipse.emf.edit.provider.ReflectiveItemProviderAdapterFactory;" + NL + "import org.eclipse.emf.edit.provider.resource.ResourceItemProviderAdapterFactory;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.ide.editor.FileDiagramEditorWithFlyoutPalette;";
d23 2
a24 7
  protected final String TEXT_6 = ".createPalette(getSemanticAdapterFactory(), getDiagram());" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void updatePaletteRoot() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected AdapterFactory getSemanticAdapterFactory() {" + NL + "\t\tList factories = new ArrayList();" + NL + "\t\tfillItemProviderFactories(factories);" + NL + "\t\treturn new ComposedAdapterFactory(factories);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void fillItemProviderFactories(List factories) {";
  protected final String TEXT_7 = NL + "\t\tfactories.add(new ";
  protected final String TEXT_8 = "());";
  protected final String TEXT_9 = NL + "\t\tfactories.add(new ";
  protected final String TEXT_10 = "());";
  protected final String TEXT_11 = NL + "\t\tfactories.add(new ResourceItemProviderAdapterFactory());" + NL + "\t\tfactories.add(new ReflectiveItemProviderAdapterFactory());" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
a29 1
    GenModel genModel = genDiagram.getEMFGenModel();
d41 1
a41 6
    
List genPackages = genModel.getAllGenPackagesWithClassifiers();
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
	if (genPackage.getGenModel().hasEditSupport()) {

a42 20
    stringBuffer.append(importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName()));
    stringBuffer.append(TEXT_8);
    
	}
}
genPackages = genModel.getAllUsedGenPackagesWithClassifiers();
for (int i = 0; i < genPackages.size(); i++) {
	GenPackage genPackage = (GenPackage) genPackages.get(i);
	if (genPackage.getGenModel().hasEditSupport()) {

    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genPackage.getQualifiedItemProviderAdapterFactoryClassName()));
    stringBuffer.append(TEXT_10);
    
	}
}

    stringBuffer.append(TEXT_11);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d37 1
a37 1
    GenModel genModel = genDiagram.getEmfGenModel();
@

