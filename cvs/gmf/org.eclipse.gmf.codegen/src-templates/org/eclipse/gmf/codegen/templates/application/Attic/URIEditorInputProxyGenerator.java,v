head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081015-1925:1.2
	v20081008-1925:1.2
	v20081001-1925:1.2
	v20080924-1925:1.2
	v20080917-1925:1.2
	v20080911-1728:1.2
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2007.01.29.14.20.31;	author dstadnik;	state dead;
branches;
next	1.1;
commitid	69ed45be02ac4567;

1.1
date	2006.10.09.17.30.47;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.2
log
@[171528] use URIEditorInput to open diagrams
@
text
@package org.eclipse.gmf.codegen.templates.application;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class URIEditorInputProxyGenerator
{
  protected static String nl;
  public static synchronized URIEditorInputProxyGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    URIEditorInputProxyGenerator result = new URIEditorInputProxyGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.emf.common.ui.URIEditorInput;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.common.core.util.HashUtil;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.resources.editor.document.MEditingDomainElement;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class URIEditorInputProxy extends URIEditorInput implements MEditingDomainElement {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final URIEditorInput delegate;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate final TransactionalEditingDomain domain;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic URIEditorInputProxy(URIEditorInput delegate, TransactionalEditingDomain domain) {" + NL + "\t\tsuper(delegate.getURI());" + NL + "\t\tthis.delegate = delegate;" + NL + "\t\tthis.domain = domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic TransactionalEditingDomain getEditingDomain() {" + NL + "\t\treturn domain;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean equals(Object obj) {" + NL + "\t\tif (obj instanceof URIEditorInputProxy) {" + NL + "\t\t\tURIEditorInputProxy another = (URIEditorInputProxy) obj;" + NL + "\t\t\treturn eq(delegate.getURI(), another.getURI()) && eq(domain, another.domain);" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate static boolean eq(Object obj1, Object obj2) {" + NL + "\t\treturn obj1 == null ? obj2 == null : obj1.equals(obj2);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic int hashCode() {" + NL + "\t\treturn HashUtil.hash(HashUtil.hash(delegate), domain);" + NL + "\t}" + NL + "}";
  protected final String TEXT_6 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenApplication application = (GenApplication) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    {
	GenDiagram genDiagram = application.getEditorGen().getDiagram();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_6);
    return stringBuffer.toString();
  }
}
@


1.1
log
@#114200 use uri editor input for diagram editor
@
text
@@

