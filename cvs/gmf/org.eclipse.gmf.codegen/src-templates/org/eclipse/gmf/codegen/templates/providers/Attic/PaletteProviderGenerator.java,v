head	1.11;
access;
symbols
	v20081022-1925:1.11
	v20081015-1925:1.11
	v20081008-1925:1.11
	v20081001-1925:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080911-1728:1.11
	v20080910-1520:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	v20080806-1520:1.11
	v20070202-0200:1.10
	v20061027-1200:1.10
	v20061020-1000:1.10
	v20061013-1330:1.10
	v20060919-0800:1.10
	v20060907-1100:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.10
	v20060817-1500:1.10
	v20060728-0500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060626-1420:1.10
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.8
	v20060519-1300:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2006.11.16.19.24.51;	author atikhomirov;	state dead;
branches;
next	1.10;
commitid	1423455cbb014567;

1.10
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.11.19.41.25;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.4;

1.4
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.30.10.26.45;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.07.15.45.29;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.11
log
@heading towards full palette specification in tooldef model - no reason to invoke palette factory indirectly through services
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class PaletteProviderGenerator
{
  protected static String nl;
  public static synchronized PaletteProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    PaletteProviderGenerator result = new PaletteProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " *";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import java.util.Map;" + NL + "import org.eclipse.core.runtime.IConfigurationElement;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.services.palette.IPaletteProvider;" + NL + "import org.eclipse.ui.IEditorPart;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractProvider implements IPaletteProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void contributeToPalette(IEditorPart editor, Object content, PaletteRoot root, Map predefinedEntries) {";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = " factory = new ";
  protected final String TEXT_9 = "();" + NL + "\t\tfactory.fillPalette(root);";
  protected final String TEXT_10 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setContributions(IConfigurationElement configElement) {" + NL + "\t\t// no configuration" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\treturn false; // all logic is done in the service" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getPaletteProviderClassName());
    stringBuffer.append(TEXT_6);
    if (genDiagram.getPalette() != null) {
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(genDiagram.getPalette().getFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_9);
    }
    stringBuffer.append(TEXT_10);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_11);
    return stringBuffer.toString();
  }
}
@


1.10
log
@header comment should not be a javadoc comment
@
text
@@


1.9
log
@Correcting copyright processing
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.8
log
@catch up with #135692 - PaletteProvider made public
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d43 1
a43 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.7
log
@using M6 to generate code.
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import java.util.Map;" + NL + "import org.eclipse.core.runtime.IConfigurationElement;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.IPaletteProvider;" + NL + "import org.eclipse.ui.IEditorPart;";
@


1.6
log
@restore generators
@
text
@d32 1
a32 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.5
log
@#134095 do not store compiled templates in cvs
@
text
@d32 1
a32 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@Switching to eclipse M6.
@
text
@@


1.3
log
@fix palette provider template
@
text
@d32 1
a32 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.2
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d21 1
a21 1
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IConfigurationElement;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.IPaletteProvider;" + NL + "import org.eclipse.ui.IEditorPart;";
d23 1
a23 1
  protected final String TEXT_6 = " extends AbstractProvider implements IPaletteProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void contributeToPalette(IEditorPart editor, Object content, PaletteRoot root) {";
@


1.1
log
@#126199 add palette provider
@
text
@d18 11
a28 8
  protected final String TEXT_1 = NL + "import org.eclipse.core.runtime.IConfigurationElement;" + NL + "import org.eclipse.gef.palette.PaletteRoot;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.internal.services.palette.IPaletteProvider;" + NL + "import org.eclipse.ui.IEditorPart;";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends AbstractProvider implements IPaletteProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void contributeToPalette(IEditorPart editor, Object content, PaletteRoot root) {";
  protected final String TEXT_4 = NL + "\t\t";
  protected final String TEXT_5 = " factory = new ";
  protected final String TEXT_6 = "();" + NL + "\t\tfactory.fillPalette(root);";
  protected final String TEXT_7 = NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic void setContributions(IConfigurationElement configElement) {" + NL + "\t\t// no configuration" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\treturn false; // all logic is done in the service" + NL + "\t}" + NL + "}";
  protected final String TEXT_8 = NL;
a35 1
importManager.emitPackageStatement(stringBuffer);
d38 10
d49 1
a49 1
    stringBuffer.append(TEXT_2);
d51 1
a51 1
    stringBuffer.append(TEXT_3);
d53 1
a53 1
    stringBuffer.append(TEXT_4);
d55 1
a55 1
    stringBuffer.append(TEXT_5);
d57 1
a57 1
    stringBuffer.append(TEXT_6);
d59 1
a59 1
    stringBuffer.append(TEXT_7);
d61 1
a61 1
    stringBuffer.append(TEXT_8);
@

