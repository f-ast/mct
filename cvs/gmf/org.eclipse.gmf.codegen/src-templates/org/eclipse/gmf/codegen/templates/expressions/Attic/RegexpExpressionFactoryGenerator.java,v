head	1.10;
access;
symbols
	v20081022-1925:1.10
	v20081015-1925:1.10
	v20081008-1925:1.10
	v20081001-1925:1.10
	v20080924-1925:1.10
	v20080917-1925:1.10
	v20080911-1728:1.10
	v20080910-1520:1.10
	v20080903-1520:1.10
	v20080827-1520:1.10
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070427-0600:1.6
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070202-0200:1.5
	v20070103-0300:1.5
	M4_20:1.5
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.5
	v20061020-1000:1.5
	v20061013-1330:1.5
	v20060919-0800:1.5
	v20060907-1100:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060728-0500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060620-0400:1.5
	v20060616-1400:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1;
locks; strict;
comment	@# @;


1.10
date	2007.09.14.18.23.24;	author dstadnik;	state dead;
branches;
next	1.9;
commitid	153b46ead19a4567;

1.9
date	2007.06.04.16.20.34;	author atikhomirov;	state Exp;
branches
	1.9.2.1;
next	1.8;
commitid	17ef46643bcf4567;

1.8
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.7;
commitid	7de14650454a4567;

1.7
date	2007.04.30.11.55.03;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	27bb4635d9164567;

1.6
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	78b462dc68e4567;

1.5
date	2006.06.06.16.22.23;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.06.01.09.14.35;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.19.09.09;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.26.17.48.40;	author radvorak;	state Exp;
branches;
next	;

1.9.2.1
date	2007.09.14.18.46.29;	author dstadnik;	state dead;
branches;
next	;
commitid	622c46ead7044567;


desc
@@


1.10
log
@get rid of jet
@
text
@package org.eclipse.gmf.codegen.templates.expressions;

import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class RegexpExpressionFactoryGenerator
{
  protected static String nl;
  public static synchronized RegexpExpressionFactoryGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    RegexpExpressionFactoryGenerator result = new RegexpExpressionFactoryGenerator();
    nl = null;
    return result;
  }

  public final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL;
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated " + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " {" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_6 = "() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_7 = " getExpression(String body," + NL + "\t\t\tEClassifier context, Map environment) {" + NL + "\t\treturn new Expression(body, context, environment);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_8 = " getExpression(String body," + NL + "\t\t\tEClassifier context) {" + NL + "\t\treturn getExpression(body, context, Collections.EMPTY_MAP);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprivate static class Expression extends ";
  protected final String TEXT_9 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate final Pattern pattern;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic Expression(String body, EClassifier context, Map environment) {" + NL + "\t\t\tsuper(body, context);" + NL + "\t\t\tPattern p;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tp = Pattern.compile(body);" + NL + "\t\t\t} catch (PatternSyntaxException e) {" + NL + "\t\t\t\tsetStatus(IStatus.ERROR, e.getMessage(), e);" + NL + "\t\t\t\tp = null;" + NL + "\t\t\t}" + NL + "\t\t\tthis.pattern = p;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprotected Object doEvaluate(Object contextInstance, Map env) {" + NL + "\t\t\tif (pattern == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(context() instanceof EDataType) {" + NL + "\t\t\t\tcontextInstance = EcoreUtil.convertToString((EDataType)context(), contextInstance);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMatcher matcher = this.pattern.matcher(String.valueOf(contextInstance));" + NL + "\t\t\treturn Boolean.valueOf(";
  protected final String TEXT_10 = "matcher.matches());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenExpressionInterpreter genInterpreter = (GenExpressionInterpreter) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
final GenDiagram genDiagram = genInterpreter.getContainer().getEditorGen().getDiagram();
final String factoryClassName = genInterpreter.getClassName();
final String abstractExpressionClass = genInterpreter.getContainer().getAbstractExpressionQualifiedClassName();
final boolean isNegationRegexp = !GenLanguage.REGEXP_LITERAL.equals(genInterpreter.getLanguage());

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
importManager.registerInnerClass("Expression");

importManager.addImport("java.util.Collections");
importManager.addImport("java.util.Map");
importManager.addImport("java.util.regex.Matcher");
importManager.addImport("java.util.regex.Pattern");
importManager.addImport("java.util.regex.PatternSyntaxException");
importManager.addImport("org.eclipse.core.runtime.IStatus");
importManager.addImport("org.eclipse.emf.ecore.EClassifier");
importManager.addImport("org.eclipse.emf.ecore.EDataType");
importManager.addImport("org.eclipse.emf.ecore.util.EcoreUtil");

    stringBuffer.append(TEXT_4);
    stringBuffer.append(factoryClassName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(factoryClassName);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(importManager.getImportedName(abstractExpressionClass));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(abstractExpressionClass));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(importManager.getImportedName(abstractExpressionClass));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(isNegationRegexp ? "!" : "");
    stringBuffer.append(TEXT_10);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_11);
    return stringBuffer.toString();
  }
}
@


1.9
log
@regenerated jet emitters with EMF 2.3 RC2
@
text
@@


1.9.2.1
log
@get rid of jet
@
text
@@


1.8
log
@Anna Karyakina's migration fix
@
text
@d17 1
a17 1
  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
@


1.7
log
@update not to use deprecated ocl code
@
text
@d18 11
a28 12
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL;
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated " + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " {" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = "() {" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_8 = " getExpression(String body," + NL + "\t\t\tEClassifier context, Map environment) {" + NL + "\t\treturn new Expression(body, context, environment);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tpublic static ";
  protected final String TEXT_9 = " getExpression(String body," + NL + "\t\t\tEClassifier context) {" + NL + "\t\treturn getExpression(body, context, Collections.EMPTY_MAP);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated " + NL + "\t */" + NL + "\tprivate static class Expression extends ";
  protected final String TEXT_10 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate final Pattern pattern;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic Expression(String body, EClassifier context, Map environment) {" + NL + "\t\t\tsuper(body, context);" + NL + "\t\t\tPattern p;" + NL + "\t\t\ttry {" + NL + "\t\t\t\tp = Pattern.compile(body);" + NL + "\t\t\t} catch (PatternSyntaxException e) {" + NL + "\t\t\t\tsetStatus(IStatus.ERROR, e.getMessage(), e);" + NL + "\t\t\t\tp = null;" + NL + "\t\t\t}" + NL + "\t\t\tthis.pattern = p;" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprotected Object doEvaluate(Object contextInstance, Map env) {" + NL + "\t\t\tif (pattern == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(context() instanceof EDataType) {" + NL + "\t\t\t\tcontextInstance = EcoreUtil.convertToString((EDataType)context(), contextInstance);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMatcher matcher = this.pattern.matcher(String.valueOf(contextInstance));" + NL + "\t\t\treturn Boolean.valueOf(";
  protected final String TEXT_11 = "matcher.matches());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_12 = NL;
a40 1
    stringBuffer.append(TEXT_1);
d45 2
a47 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d50 1
a50 1
    stringBuffer.append(TEXT_4);
d64 2
d69 1
a69 1
    stringBuffer.append(factoryClassName);
d75 1
a75 1
    stringBuffer.append(importManager.getImportedName(abstractExpressionClass));
d77 1
a77 1
    stringBuffer.append(isNegationRegexp ? "!" : "");
a78 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_12);
@


1.6
log
@follow consisted spacing policy
@
text
@d27 1
a27 1
  protected final String TEXT_10 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate Pattern pattern;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic Expression(String body, EClassifier context, Map environment) {" + NL + "\t\t\tsuper(body, context, environment);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tthis.pattern = Pattern.compile(body);" + NL + "\t\t\t} catch (PatternSyntaxException e) {" + NL + "\t\t\t\tsetStatus(IStatus.ERROR, e.getMessage(), e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprotected Object doEvaluate(Object contextInstance, Map env) {" + NL + "\t\t\tif (pattern == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(context() instanceof EDataType) {" + NL + "\t\t\t\tcontextInstance = EcoreUtil.convertToString((EDataType)context(), contextInstance);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMatcher matcher = this.pattern.matcher(String.valueOf(contextInstance));" + NL + "\t\t\treturn Boolean.valueOf(";
@


1.5
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d48 1
a48 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.4
log
@header comment should not be a javadoc comment
@
text
@d40 1
a40 1
final boolean isNegationRegexp = !"regexp".equals(genInterpreter.getLanguage());
@


1.3
log
@#144518 Support negation of 'regexp' in gmf models expressions
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.2
log
@Correcting copyright processing
@
text
@d27 3
a29 2
  protected final String TEXT_10 = " {" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprivate Pattern pattern;" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tpublic Expression(String body, EClassifier context, Map environment) {" + NL + "\t\t\tsuper(body, context, environment);" + NL + "\t\t\ttry {" + NL + "\t\t\t\tthis.pattern = Pattern.compile(body);" + NL + "\t\t\t} catch (PatternSyntaxException e) {" + NL + "\t\t\t\tsetStatus(IStatus.ERROR, e.getMessage(), e);" + NL + "\t\t\t}" + NL + "\t\t}" + NL + "" + NL + "\t\t/**" + NL + "\t\t * @@generated " + NL + "\t\t */" + NL + "\t\tprotected Object doEvaluate(Object contextInstance, Map env) {" + NL + "\t\t\tif (pattern == null) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tif(context() instanceof EDataType) {" + NL + "\t\t\t\tcontextInstance = EcoreUtil.convertToString((EDataType)context(), contextInstance);" + NL + "\t\t\t}" + NL + "\t\t\t" + NL + "\t\t\tMatcher matcher = this.pattern.matcher(String.valueOf(contextInstance));" + NL + "\t\t\treturn Boolean.valueOf(matcher.matches());" + NL + "\t\t}" + NL + "\t}" + NL + "}";
  protected final String TEXT_11 = NL;
d40 1
d77 2
d80 1
a80 1
    stringBuffer.append(TEXT_11);
@


1.1
log
@#138687 Add RegExpExpressionFactory JET template to the editor generation step
@
text
@d19 1
a19 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d46 1
a46 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@

