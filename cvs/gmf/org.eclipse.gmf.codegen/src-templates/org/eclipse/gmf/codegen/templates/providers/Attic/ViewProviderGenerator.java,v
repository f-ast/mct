head	1.60;
access;
symbols
	v20081022-1925:1.60
	v20081015-1925:1.60
	v20081008-1925:1.60
	v20081001-1925:1.60
	v20080924-1925:1.60
	v20080917-1925:1.60
	v20080911-1728:1.60
	v20080910-1520:1.60
	v20080903-1520:1.60
	v20080827-1520:1.60
	v20080813-1520:1.60
	v20080806-1520:1.60
	v20070525-1500:1.59
	v20070520-1200:1.59
	v20070518-1300:1.58
	v20070504-1000:1.58
	v20070427-0600:1.58
	v20070420-1000:1.57
	v20070413-1300:1.57
	v20070405-1100:1.57
	v20070403-1500:1.57
	v20070330-1300:1.57
	v20060330-1300:1.57
	v20070322-1100:1.57
	v20060316-0600:1.57
	v20070307-0700:1.57
	v20070301-1200:1.57
	v20070228-2000:1.57
	v20070221-1500:1.57
	v20070208-1800:1.57
	v20070202-0200:1.56
	v20070103-0300:1.57
	M4_20:1.57
	v20061222-1800:1.57
	v20061218-1200:1.57
	v20061214-0000:1.57
	v20061120-1300:1.57
	M3_20:1.57
	v20061117-0800:1.57
	v20061027-1200:1.56
	v20061020-1000:1.56
	v20061013-1330:1.56
	v20060919-0800:1.56
	v20060907-1100:1.56
	M1_20:1.56
	v20060904-1500:1.56
	v20060824-1600:1.56
	v20060817-1500:1.56
	v20060728-0500:1.56
	v20060713-1700:1.56
	R1_0_maintenance:1.56.0.2
	R1_0:1.56
	v20060627-1200:1.56
	v20060626-1420:1.56
	v20060620-0400:1.56
	v20060616-1400:1.56
	v20060616-1200:1.56
	v20060609-1400:1.56
	v20060531-1730:1.55
	v20060530-1930:1.55
	v20060526-1200:1.53
	v20060519-1300:1.51
	v20060519-0800:1.50
	v20060512-1000:1.48
	I20060512-1000:1.48
	I20060505-1400:1.47
	I20060428-1300:1.47
	I20060424-0500:1.46
	I20060424-0300:1.46
	M6_10:1.44
	I20060407-1200:1.40
	I20060331-1000:1.39
	I20060324-0300:1.39
	I20060317-1300:1.39
	I20060317-1200:1.39
	I20060316-1300:1.39
	I20060309-1300:1.38
	M5_10:1.37
	S20060303-1600:1.37
	I20060227-1730:1.35
	I20060216-1945:1.34
	I20060210-1715:1.34
	I20060209-1815:1.34
	I20060203-0830:1.30
	I20060202-1415:1.30
	I20060129-1145:1.30
	I20060127-0900:1.30
	I20060120-1530:1.29
	I20060113-1700:1.27
	M4_10:1.27
	I20060107-1100:1.25
	I20060105-1630:1.25
	I20051230-1230:1.25
	I20051223-1100:1.25
	I20051217-0925:1.24
	I20051208-2000:1.24
	I20051201-1800:1.24
	I20051124-2000:1.23
	M3_10:1.23
	I20051118-1245:1.23
	I20051111-1800:1.19
	I20051106-0900:1.18
	v20051030:1.15;
locks; strict;
comment	@# @;
expand	@k@;


1.60
date	2007.05.28.16.52.23;	author ashatalin;	state dead;
branches;
next	1.59;
commitid	51cb465b08c54567;

1.59
date	2007.05.20.12.56.52;	author mfeldman;	state Exp;
branches;
next	1.58;
commitid	7de14650454a4567;

1.58
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.57;
commitid	78b462dc68e4567;

1.57
date	2006.10.18.14.21.47;	author dstadnik;	state Exp;
branches;
next	1.56;

1.56
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.55;

1.55
date	2006.05.30.10.30.30;	author ashatalin;	state Exp;
branches;
next	1.54;

1.54
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.53;

1.53
date	2006.05.25.10.17.13;	author dstadnik;	state Exp;
branches;
next	1.52;

1.52
date	2006.05.25.09.35.12;	author dstadnik;	state Exp;
branches;
next	1.51;

1.51
date	2006.05.19.13.30.31;	author dstadnik;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.47;

1.47
date	2006.04.26.11.00.56;	author ashatalin;	state Exp;
branches;
next	1.46;

1.46
date	2006.04.21.17.12.00;	author ashatalin;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.20.20.37.16;	author ashatalin;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.13.22.22.23;	author ashatalin;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.41;

1.41
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.40;

1.40
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.03.02.12.52.48;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.02.17.12.31.43;	author ashatalin;	state Exp;
branches;
next	1.34;

1.34
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.33;

1.33
date	2006.02.08.12.28.12;	author atikhomirov;	state Exp;
branches;
next	1.32;

1.32
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.31;

1.31
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.24.12.01.20;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.19.00.10.44;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.12.10.41.34;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.28.17.48.39;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.17.12.38.37;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.04.14.56.41;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.04.13.28.37;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.21.13.31.57;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.18.11.09.13;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.07.13.28.03;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.16.03.15;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.30.19.16.09;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.29.09.49.41;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.60
log
@- ViewProvider is in xpand now.
- Separating semantic part of VisualIDRegistry from pure-notation.
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ViewProviderGenerator
{
  protected static String nl;
  public static synchronized ViewProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ViewProviderGenerator result = new ViewProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "/*" + NL + " * ";
  protected final String TEXT_2 = NL + " */";
  protected final String TEXT_3 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {";
  protected final String TEXT_6 = NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_7 = NL + "\t\tif (";
  protected final String TEXT_8 = ".MODEL_ID.equals(diagramKind)";
  protected final String TEXT_9 = NL + "\t\t\t\t&& ";
  protected final String TEXT_10 = ".getDiagramVisualID(semanticElement) != -1";
  protected final String TEXT_11 = NL + "\t\t\t\t) {" + NL + "\t\t\treturn ";
  protected final String TEXT_12 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (elementType != null && !";
  protected final String TEXT_13 = ".isKnownElementType(elementType)) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_14 = ".getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_15 = NL + "\t\tcase ";
  protected final String TEXT_16 = ".VISUAL_ID:" + NL + "\t\t\t return ";
  protected final String TEXT_17 = ".class;";
  protected final String TEXT_18 = NL + "\t\tcase ";
  protected final String TEXT_19 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_20 = ".class;";
  protected final String TEXT_21 = NL + "\t\tcase ";
  protected final String TEXT_22 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_23 = ".class;";
  protected final String TEXT_24 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (elementType != null && !";
  protected final String TEXT_25 = ".isKnownElementType(elementType)) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_26 = NL + "\t\tif (";
  protected final String TEXT_27 = ".";
  protected final String TEXT_28 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_29 = ".class;" + NL + "\t\t}";
  protected final String TEXT_30 = NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tif (semanticType == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint linkVID = ";
  protected final String TEXT_31 = ".getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_32 = NL + "\t\tcase ";
  protected final String TEXT_33 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_34 = ".class;";
  protected final String TEXT_35 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IElementType getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (IElementType) semanticAdapter.getAdapter(IElementType.class);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_36 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];
List genLinks = genDiagram.getLinks();

    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_1);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_2);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_3);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(genDiagram.getNotationViewProviderClassName());
    stringBuffer.append(TEXT_5);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_6);
    }
    stringBuffer.append(TEXT_7);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_8);
    if (genDiagram.getDomainDiagramElement() != null) {
    stringBuffer.append(TEXT_9);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_10);
    }
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_14);
    
for (Iterator containers = genDiagram.getAllChildContainers().iterator(); containers.hasNext();) {
	GenContainerBase container = (GenContainerBase) containers.next();

    stringBuffer.append(TEXT_15);
    stringBuffer.append(importManager.getImportedName(container.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(container.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_17);
    
	if (container instanceof GenNode) {
		GenNode node = (GenNode) container;
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();

    stringBuffer.append(TEXT_18);
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_19);
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_20);
    
		}
	}
}
for (Iterator links = genLinks.iterator(); links.hasNext();) {
	GenLink link = (GenLink) links.next();
	for (Iterator linkLabels = link.getLabels().iterator(); linkLabels.hasNext();) {
		GenLinkLabel linkLabel = (GenLinkLabel) linkLabels.next();

    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(importManager.getImportedName(linkLabel.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    
	}
}

    stringBuffer.append(TEXT_24);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_25);
    
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof FeatureLinkModelFacet || genLink.getModelFacet() == null) {

    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_27);
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_29);
    
	}
}

    stringBuffer.append(TEXT_30);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_31);
    
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {

    stringBuffer.append(TEXT_32);
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_34);
    
	}
}

    stringBuffer.append(TEXT_35);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_36);
    return stringBuffer.toString();
  }
}
@


1.59
log
@Anna Karyakina's migration fix
@
text
@@


1.58
log
@follow consisted spacing policy
@
text
@d19 36
a54 37
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {";
  protected final String TEXT_7 = NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_8 = NL + "\t\tif (";
  protected final String TEXT_9 = ".MODEL_ID.equals(diagramKind)";
  protected final String TEXT_10 = NL + "\t\t\t\t&& ";
  protected final String TEXT_11 = ".getDiagramVisualID(semanticElement) != -1";
  protected final String TEXT_12 = NL + "\t\t\t\t) {" + NL + "\t\t\treturn ";
  protected final String TEXT_13 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (elementType != null && !";
  protected final String TEXT_14 = ".isKnownElementType(elementType)) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_15 = ".getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_16 = NL + "\t\tcase ";
  protected final String TEXT_17 = ".VISUAL_ID:" + NL + "\t\t\t return ";
  protected final String TEXT_18 = ".class;";
  protected final String TEXT_19 = NL + "\t\tcase ";
  protected final String TEXT_20 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_21 = ".class;";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_24 = ".class;";
  protected final String TEXT_25 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (elementType != null && !";
  protected final String TEXT_26 = ".isKnownElementType(elementType)) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_27 = NL + "\t\tif (";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_30 = ".class;" + NL + "\t\t}";
  protected final String TEXT_31 = NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tif (semanticType == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint linkVID = ";
  protected final String TEXT_32 = ".getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_33 = NL + "\t\tcase ";
  protected final String TEXT_34 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ".class;";
  protected final String TEXT_36 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IElementType getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (IElementType) semanticAdapter.getAdapter(IElementType.class);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_37 = NL;
a63 1
    stringBuffer.append(TEXT_1);
d68 2
a70 2
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
d73 2
d76 1
a76 1
    importManager.markImportLocation(stringBuffer);
d78 1
a78 1
    stringBuffer.append(genDiagram.getNotationViewProviderClassName());
d80 1
a80 1
    if (genDiagram.getDomainDiagramElement() != null) {
d82 1
a82 1
    }
d84 1
a84 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d86 1
a86 1
    if (genDiagram.getDomainDiagramElement() != null) {
d88 1
a88 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d90 1
a90 1
    }
d92 1
a92 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName()));
d94 1
a94 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a95 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_15);
d100 2
d103 1
a103 1
    stringBuffer.append(importManager.getImportedName(container.getEditPartQualifiedClassName()));
a104 2
    stringBuffer.append(importManager.getImportedName(container.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_18);
d111 2
d114 1
a114 1
    stringBuffer.append(importManager.getImportedName(label.getEditPartQualifiedClassName()));
a115 2
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_21);
d125 2
d128 1
a128 1
    stringBuffer.append(importManager.getImportedName(linkLabel.getEditPartQualifiedClassName()));
a129 2
    stringBuffer.append(importManager.getImportedName(linkLabel.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_24);
d134 2
a136 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_26);
d142 2
d145 1
a145 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d147 1
a147 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a148 2
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_30);
d153 2
a155 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_32);
d161 2
d164 1
a164 1
    stringBuffer.append(importManager.getImportedName(genLink.getEditPartQualifiedClassName()));
a165 2
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_35);
d170 2
a172 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_37);
@


1.57
log
@#161380 simplify feature model facets
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d71 1
a71 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.56
log
@header comment should not be a javadoc comment
@
text
@d142 1
a142 1
	if (genLink.getModelFacet() instanceof FeatureModelFacet || genLink.getModelFacet() == null) {
@


1.55
log
@Correcting ViewProvider to correctly wok with no ElementType passed (for example - while creating views from CanonicalEditPolicy)
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.54
log
@Correcting copyright processing
@
text
@d31 1
a31 1
  protected final String TEXT_13 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (semanticAdapter != null && !";
d43 1
a43 1
  protected final String TEXT_25 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (semanticAdapter != null && !";
@


1.53
log
@check semantic adapter
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d71 1
a71 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.52
log
@#114175 enable links creation
@
text
@d43 1
a43 1
  protected final String TEXT_25 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = getSemanticElementType(semanticAdapter);" + NL + "\t\tif (!";
@


1.51
log
@prevent NPE for pure design nodes
@
text
@d31 3
a33 3
  protected final String TEXT_13 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tif (semanticAdapter != null && semanticAdapter.getAdapter(IElementType.class) != null && ";
  protected final String TEXT_14 = ".getElement(semanticAdapter) == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_15 = ".getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
d43 13
a55 20
  protected final String TEXT_25 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (semanticAdapter.getAdapter(IElementType.class) != null && ";
  protected final String TEXT_26 = ".getElement(semanticAdapter) == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = " elementType = getSemanticElementType(semanticAdapter);";
  protected final String TEXT_29 = NL + "\t\tif (";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ".class;" + NL + "\t\t}";
  protected final String TEXT_33 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tif (semanticType == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_34 = ".getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_35 = NL + "\t\tcase ";
  protected final String TEXT_36 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_37 = ".class;";
  protected final String TEXT_38 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_40 = " getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_41 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_42 = ".class);" + NL + "\t}";
  protected final String TEXT_43 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_44 = NL;
a139 1
boolean elementTypeInitialized = false;
a142 2
		if (!elementTypeInitialized) {
			elementTypeInitialized = true;
d145 1
a145 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d147 1
a147 3
    
		}

d149 1
a149 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a150 4
    stringBuffer.append(genLink.getUniqueIdentifier());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_32);
d155 1
a155 1
    stringBuffer.append(TEXT_33);
d157 1
a157 1
    stringBuffer.append(TEXT_34);
d163 1
a163 1
    stringBuffer.append(TEXT_35);
d165 1
a165 1
    stringBuffer.append(TEXT_36);
d167 1
a167 1
    stringBuffer.append(TEXT_37);
d172 1
a172 11
    stringBuffer.append(TEXT_38);
    if (elementTypeInitialized) {
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_42);
    }
    stringBuffer.append(TEXT_43);
d174 1
a174 1
    stringBuffer.append(TEXT_44);
@


1.50
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d31 1
a31 1
  protected final String TEXT_13 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tif (semanticAdapter.getAdapter(IElementType.class) != null && ";
@


1.49
log
@#131543 Obsolete code should be eliminated
@
text
@d22 41
a62 43
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {";
  protected final String TEXT_9 = NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_10 = NL + "\t\tif (";
  protected final String TEXT_11 = ".MODEL_ID.equals(diagramKind)";
  protected final String TEXT_12 = NL + "\t\t\t\t&& ";
  protected final String TEXT_13 = ".getDiagramVisualID(semanticElement) != -1";
  protected final String TEXT_14 = NL + "\t\t\t\t) {" + NL + "\t\t\treturn ";
  protected final String TEXT_15 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tif (semanticAdapter.getAdapter(IElementType.class) != null && ";
  protected final String TEXT_16 = ".getElement(semanticAdapter) == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_17 = ".getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_18 = NL + "\t\tcase ";
  protected final String TEXT_19 = ".VISUAL_ID:" + NL + "\t\t\t return ";
  protected final String TEXT_20 = ".class;";
  protected final String TEXT_21 = NL + "\t\tcase ";
  protected final String TEXT_22 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_23 = ".class;";
  protected final String TEXT_24 = NL + "\t\tcase ";
  protected final String TEXT_25 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_26 = ".class;";
  protected final String TEXT_27 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (semanticAdapter.getAdapter(IElementType.class) != null && ";
  protected final String TEXT_28 = ".getElement(semanticAdapter) == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = " elementType = getSemanticElementType(semanticAdapter);";
  protected final String TEXT_31 = NL + "\t\tif (";
  protected final String TEXT_32 = ".";
  protected final String TEXT_33 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_34 = ".class;" + NL + "\t\t}";
  protected final String TEXT_35 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tif (semanticType == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_36 = ".getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_37 = NL + "\t\tcase ";
  protected final String TEXT_38 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_39 = ".class;";
  protected final String TEXT_40 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}";
  protected final String TEXT_41 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_42 = " getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_43 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_44 = ".class);" + NL + "\t}";
  protected final String TEXT_45 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_46 = NL;
d68 2
a69 1
GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d81 1
d83 1
a83 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d85 1
a85 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d87 1
a87 1
    importManager.markImportLocation(stringBuffer);
d89 1
a89 1
    stringBuffer.append(genDiagram.getNotationViewProviderClassName());
d91 2
a93 2
    stringBuffer.append(TEXT_9);
    }
d95 1
a95 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditPartQualifiedClassName()));
d97 1
a97 1
    if (genDiagram.getDomainDiagramElement() != null) {
d99 1
a99 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d101 1
a101 1
    }
d103 1
a103 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName()));
a104 4
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_17);
d109 1
a109 1
    stringBuffer.append(TEXT_18);
d111 1
a111 1
    stringBuffer.append(TEXT_19);
d113 1
a113 1
    stringBuffer.append(TEXT_20);
d120 1
a120 1
    stringBuffer.append(TEXT_21);
d122 1
a122 1
    stringBuffer.append(TEXT_22);
d124 1
a124 1
    stringBuffer.append(TEXT_23);
d134 1
a134 1
    stringBuffer.append(TEXT_24);
d136 1
a136 1
    stringBuffer.append(TEXT_25);
d138 1
a138 1
    stringBuffer.append(TEXT_26);
d143 1
a143 1
    stringBuffer.append(TEXT_27);
d145 1
a145 1
    stringBuffer.append(TEXT_28);
d154 1
a154 1
    stringBuffer.append(TEXT_29);
d156 1
a156 1
    stringBuffer.append(TEXT_30);
d160 1
a160 1
    stringBuffer.append(TEXT_31);
d162 1
a162 1
    stringBuffer.append(TEXT_32);
d164 1
a164 1
    stringBuffer.append(TEXT_33);
d166 1
a166 1
    stringBuffer.append(TEXT_34);
d171 1
a171 1
    stringBuffer.append(TEXT_35);
d173 1
a173 1
    stringBuffer.append(TEXT_36);
d179 1
a179 1
    stringBuffer.append(TEXT_37);
d181 1
a181 1
    stringBuffer.append(TEXT_38);
d183 1
a183 1
    stringBuffer.append(TEXT_39);
d188 4
d193 1
a193 1
    if (elementTypeInitialized) {
d197 1
a197 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
d199 1
a199 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
a200 4
    }
    stringBuffer.append(TEXT_45);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_46);
@


1.48
log
@#133836 Creating a child node without a label causes error
@
text
@d24 1
a24 1
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d33 32
a64 30
  protected final String TEXT_15 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_16 = ".getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_17 = NL + "\t\tcase ";
  protected final String TEXT_18 = ".VISUAL_ID:" + NL + "\t\t\t return ";
  protected final String TEXT_19 = ".class;";
  protected final String TEXT_20 = NL + "\t\tcase ";
  protected final String TEXT_21 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_22 = ".class;";
  protected final String TEXT_23 = NL + "\t\tcase ";
  protected final String TEXT_24 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_25 = ".class;";
  protected final String TEXT_26 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = " elementType = getSemanticElementType(semanticAdapter);";
  protected final String TEXT_29 = NL + "\t\tif (";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ".class;" + NL + "\t\t}";
  protected final String TEXT_33 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tif (semanticType == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_34 = ".getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_35 = NL + "\t\tcase ";
  protected final String TEXT_36 = ".VISUAL_ID:" + NL + "\t\t\treturn ";
  protected final String TEXT_37 = ".class;";
  protected final String TEXT_38 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_40 = " getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_41 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_42 = ".class);" + NL + "\t}";
  protected final String TEXT_43 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_44 = NL;
d105 2
d108 1
a108 1
    stringBuffer.append(TEXT_16);
d113 1
a113 1
    stringBuffer.append(TEXT_17);
d115 1
a115 1
    stringBuffer.append(TEXT_18);
d117 1
a117 1
    stringBuffer.append(TEXT_19);
d124 1
a124 1
    stringBuffer.append(TEXT_20);
d126 1
a126 1
    stringBuffer.append(TEXT_21);
d128 1
a128 1
    stringBuffer.append(TEXT_22);
d138 1
a138 1
    stringBuffer.append(TEXT_23);
d140 1
a140 1
    stringBuffer.append(TEXT_24);
d142 1
a142 1
    stringBuffer.append(TEXT_25);
d147 3
a149 1
    stringBuffer.append(TEXT_26);
d158 1
a158 1
    stringBuffer.append(TEXT_27);
d160 1
a160 1
    stringBuffer.append(TEXT_28);
d164 1
a164 1
    stringBuffer.append(TEXT_29);
d166 1
a166 1
    stringBuffer.append(TEXT_30);
d168 1
a168 1
    stringBuffer.append(TEXT_31);
d170 1
a170 1
    stringBuffer.append(TEXT_32);
d175 1
a175 1
    stringBuffer.append(TEXT_33);
d177 1
a177 1
    stringBuffer.append(TEXT_34);
d183 1
a183 1
    stringBuffer.append(TEXT_35);
d185 1
a185 1
    stringBuffer.append(TEXT_36);
d187 1
a187 1
    stringBuffer.append(TEXT_37);
d192 1
a192 1
    stringBuffer.append(TEXT_38);
d194 1
a194 1
    stringBuffer.append(TEXT_39);
d196 1
a196 1
    stringBuffer.append(TEXT_40);
d198 1
a198 1
    stringBuffer.append(TEXT_41);
d200 1
a200 1
    stringBuffer.append(TEXT_42);
d202 1
a202 1
    stringBuffer.append(TEXT_43);
d204 1
a204 1
    stringBuffer.append(TEXT_44);
@


1.47
log
@#138574 NPE creating ship destination link in TaiPan sample
@
text
@d115 1
a115 1
	if (container instanceof GenNode && !((GenNode) container).isListContainerEntry()) {
@


1.46
log
@#137999 Generate pure static VisualIDRegisrty classes
@
text
@d51 1
a51 1
  protected final String TEXT_33 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
@


1.45
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d31 1
a31 1
  protected final String TEXT_13 = ".INSTANCE.getDiagramVisualID(semanticElement) != -1";
d34 1
a34 1
  protected final String TEXT_16 = ".INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
d52 1
a52 1
  protected final String TEXT_34 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
@


1.44
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d36 1
a36 1
  protected final String TEXT_18 = ":" + NL + "\t\t\t return ";
d39 1
a39 1
  protected final String TEXT_21 = ":" + NL + "\t\t\treturn ";
d42 1
a42 1
  protected final String TEXT_24 = ":" + NL + "\t\t\treturn ";
d54 1
a54 1
  protected final String TEXT_36 = ":" + NL + "\t\t\treturn ";
d110 1
a110 1
    stringBuffer.append(container.getVisualID());
d121 1
a121 1
    stringBuffer.append(label.getVisualID());
d135 1
a135 1
    stringBuffer.append(linkLabel.getVisualID());
d178 1
a178 1
    stringBuffer.append(genLink.getVisualID());
@


1.43
log
@using M6 to generate code.
@
text
@d28 2
a29 2
  protected final String TEXT_10 = NL + "\t\tif (\"";
  protected final String TEXT_11 = "\".equals(diagramKind)";
d93 1
a93 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
@


1.42
log
@restore generators
@
text
@d66 1
a66 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.41
log
@#134095 do not store compiled templates in cvs
@
text
@d66 1
a66 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.40
log
@Switching to eclipse M6.
@
text
@@


1.39
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d66 1
a66 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.38
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d39 24
a62 31
  protected final String TEXT_21 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_22 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_23 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_24 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\tcase ";
  protected final String TEXT_26 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_27 = ".class;";
  protected final String TEXT_28 = NL + "\t\tcase ";
  protected final String TEXT_29 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_30 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_31 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_32 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_34 = NL + "\t\t";
  protected final String TEXT_35 = " elementType = getSemanticElementType(semanticAdapter);";
  protected final String TEXT_36 = NL + "\t\tif (";
  protected final String TEXT_37 = ".";
  protected final String TEXT_38 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_39 = ".class;" + NL + "\t\t}";
  protected final String TEXT_40 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_41 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_42 = NL + "\t\tcase ";
  protected final String TEXT_43 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_44 = ".class;";
  protected final String TEXT_45 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}";
  protected final String TEXT_46 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_47 = " getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_48 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_49 = ".class);" + NL + "\t}";
  protected final String TEXT_50 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_51 = NL;
a118 3
			if (label instanceof ExternalLabel) {
				String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
				String labelViewId = semanticHintsClassName + '.' + node.getUniqueIdentifier() + "Labels." + ((ExternalLabel) label).getSemanticHintLabelFieldName();
d123 1
a123 1
    stringBuffer.append(labelViewId);
a124 4
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(importManager.getImportedName(((ExternalLabel) label).getTextNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_24);
a125 9
			} else {

    stringBuffer.append(TEXT_25);
    stringBuffer.append(label.getVisualID());
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_27);
    
			}
a128 1

a130 1
	String semanticHintsClassName = importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName());
a132 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + linkLabel.getSemanticHintLabelFieldName();
d134 1
a134 1
    stringBuffer.append(TEXT_28);
d136 1
a136 3
    stringBuffer.append(TEXT_29);
    stringBuffer.append(labelViewId);
    stringBuffer.append(TEXT_30);
d138 1
a138 3
    stringBuffer.append(TEXT_31);
    stringBuffer.append(importManager.getImportedName(linkLabel.getTextNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_32);
d143 1
a143 1
    stringBuffer.append(TEXT_33);
d152 1
a152 1
    stringBuffer.append(TEXT_34);
d154 1
a154 1
    stringBuffer.append(TEXT_35);
d158 1
a158 1
    stringBuffer.append(TEXT_36);
d160 1
a160 1
    stringBuffer.append(TEXT_37);
d162 1
a162 1
    stringBuffer.append(TEXT_38);
d164 1
a164 1
    stringBuffer.append(TEXT_39);
d169 1
a169 1
    stringBuffer.append(TEXT_40);
d171 1
a171 1
    stringBuffer.append(TEXT_41);
d177 1
a177 1
    stringBuffer.append(TEXT_42);
d179 1
a179 1
    stringBuffer.append(TEXT_43);
d181 1
a181 1
    stringBuffer.append(TEXT_44);
d186 1
a186 1
    stringBuffer.append(TEXT_45);
d188 1
a188 1
    stringBuffer.append(TEXT_46);
d190 1
a190 1
    stringBuffer.append(TEXT_47);
d192 1
a192 1
    stringBuffer.append(TEXT_48);
d194 1
a194 1
    stringBuffer.append(TEXT_49);
d196 1
a196 1
    stringBuffer.append(TEXT_50);
d198 1
a198 1
    stringBuffer.append(TEXT_51);
@


1.37
log
@#114175 for links
@
text
@d19 16
a34 16
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {";
  protected final String TEXT_6 = NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_7 = NL + "\t\tif (\"";
  protected final String TEXT_8 = "\".equals(diagramKind)";
  protected final String TEXT_9 = NL + "\t\t\t\t&& ";
  protected final String TEXT_10 = ".INSTANCE.getDiagramVisualID(semanticElement) != -1";
  protected final String TEXT_11 = NL + "\t\t\t\t) {" + NL + "\t\t\treturn ";
  protected final String TEXT_12 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_13 = ".INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_14 = NL + "\t\tcase ";
  protected final String TEXT_15 = ":" + NL + "\t\t\t return ";
  protected final String TEXT_16 = ".class;";
d36 7
a42 7
  protected final String TEXT_18 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_19 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_20 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_21 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_24 = ".class;";
d44 26
a69 23
  protected final String TEXT_26 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_27 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_28 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_29 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_30 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = " elementType = getSemanticElementType(semanticAdapter);";
  protected final String TEXT_33 = NL + "\t\tif (";
  protected final String TEXT_34 = ".";
  protected final String TEXT_35 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_36 = ".class;" + NL + "\t\t}";
  protected final String TEXT_37 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_38 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_39 = NL + "\t\tcase ";
  protected final String TEXT_40 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_41 = ".class;";
  protected final String TEXT_42 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}";
  protected final String TEXT_43 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_44 = " getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_45 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_46 = ".class);" + NL + "\t}";
  protected final String TEXT_47 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_48 = NL;
d79 4
a82 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d84 1
a84 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
d86 1
a86 1
    importManager.markImportLocation(stringBuffer);
d88 1
a88 1
    stringBuffer.append(genDiagram.getNotationViewProviderClassName());
d90 1
a90 1
    if (genDiagram.getDomainDiagramElement() != null) {
d92 1
a92 1
    }
d94 1
a94 1
    stringBuffer.append(genDiagram.getEditorGen().getModelID());
d98 1
a98 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d100 1
a100 1
    }
d102 1
a102 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getNotationViewFactoryQualifiedClassName()));
d106 6
d116 1
a116 1
    stringBuffer.append(TEXT_14);
d118 1
a118 1
    stringBuffer.append(TEXT_15);
d120 1
a120 1
    stringBuffer.append(TEXT_16);
d130 1
a130 1
    stringBuffer.append(TEXT_17);
d132 1
a132 1
    stringBuffer.append(TEXT_18);
d134 1
a134 1
    stringBuffer.append(TEXT_19);
d136 1
a136 1
    stringBuffer.append(TEXT_20);
d138 1
a138 1
    stringBuffer.append(TEXT_21);
d142 1
a142 1
    stringBuffer.append(TEXT_22);
d144 1
a144 1
    stringBuffer.append(TEXT_23);
d146 1
a146 1
    stringBuffer.append(TEXT_24);
d160 1
a160 1
    stringBuffer.append(TEXT_25);
d162 1
a162 1
    stringBuffer.append(TEXT_26);
d164 1
a164 1
    stringBuffer.append(TEXT_27);
d166 1
a166 1
    stringBuffer.append(TEXT_28);
d168 1
a168 1
    stringBuffer.append(TEXT_29);
d173 1
a173 1
    stringBuffer.append(TEXT_30);
d182 1
a182 1
    stringBuffer.append(TEXT_31);
d184 1
a184 1
    stringBuffer.append(TEXT_32);
d188 1
a188 1
    stringBuffer.append(TEXT_33);
d190 1
a190 1
    stringBuffer.append(TEXT_34);
d192 1
a192 1
    stringBuffer.append(TEXT_35);
d194 1
a194 1
    stringBuffer.append(TEXT_36);
d199 1
a199 1
    stringBuffer.append(TEXT_37);
d201 1
a201 1
    stringBuffer.append(TEXT_38);
d207 1
a207 1
    stringBuffer.append(TEXT_39);
d209 1
a209 1
    stringBuffer.append(TEXT_40);
d211 1
a211 1
    stringBuffer.append(TEXT_41);
d216 1
a216 1
    stringBuffer.append(TEXT_42);
d218 1
a218 1
    stringBuffer.append(TEXT_43);
d220 1
a220 1
    stringBuffer.append(TEXT_44);
d222 1
a222 1
    stringBuffer.append(TEXT_45);
d224 1
a224 1
    stringBuffer.append(TEXT_46);
d226 1
a226 1
    stringBuffer.append(TEXT_47);
d228 1
a228 1
    stringBuffer.append(TEXT_48);
@


1.36
log
@#125492 Cannot generate editors whose canvas does not map to a domain element
@
text
@d166 1
a166 1
	if (genLink.getModelFacet() instanceof FeatureModelFacet) {
@


1.35
log
@#128331 NPE in generate view provider when adding note...
+ updating with new templates.
@
text
@d23 44
a66 40
  protected final String TEXT_5 = " extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tif (\"";
  protected final String TEXT_6 = "\".equals(diagramKind)" + NL + "\t\t\t\t&& ";
  protected final String TEXT_7 = ".INSTANCE.getDiagramVisualID(semanticElement) != -1) { //$NON-NLS-1$" + NL + "\t\t\treturn ";
  protected final String TEXT_8 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_9 = ".INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_10 = NL + "\t\tcase ";
  protected final String TEXT_11 = ":" + NL + "\t\t\t return ";
  protected final String TEXT_12 = ".class;";
  protected final String TEXT_13 = NL + "\t\tcase ";
  protected final String TEXT_14 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_15 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_16 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_17 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_18 = NL + "\t\tcase ";
  protected final String TEXT_19 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_20 = ".class;";
  protected final String TEXT_21 = NL + "\t\tcase ";
  protected final String TEXT_22 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_23 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_24 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_25 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = " elementType = getSemanticElementType(semanticAdapter);";
  protected final String TEXT_29 = NL + "\t\tif (";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ".class;" + NL + "\t\t}";
  protected final String TEXT_33 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_34 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_35 = NL + "\t\tcase ";
  protected final String TEXT_36 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_37 = ".class;";
  protected final String TEXT_38 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_40 = " getSemanticElementType(IAdaptable semanticAdapter) {" + NL + "\t\tif (semanticAdapter == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\treturn (";
  protected final String TEXT_41 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_42 = ".class);" + NL + "\t}";
  protected final String TEXT_43 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "}";
  protected final String TEXT_44 = NL;
d84 4
d89 3
a91 1
    stringBuffer.append(TEXT_6);
d93 3
a95 1
    stringBuffer.append(TEXT_7);
d97 1
a97 1
    stringBuffer.append(TEXT_8);
d99 1
a99 1
    stringBuffer.append(TEXT_9);
d104 1
a104 1
    stringBuffer.append(TEXT_10);
d106 1
a106 1
    stringBuffer.append(TEXT_11);
d108 1
a108 1
    stringBuffer.append(TEXT_12);
d118 1
a118 1
    stringBuffer.append(TEXT_13);
d120 1
a120 1
    stringBuffer.append(TEXT_14);
d122 1
a122 1
    stringBuffer.append(TEXT_15);
d124 1
a124 1
    stringBuffer.append(TEXT_16);
d126 1
a126 1
    stringBuffer.append(TEXT_17);
d130 1
a130 1
    stringBuffer.append(TEXT_18);
d132 1
a132 1
    stringBuffer.append(TEXT_19);
d134 1
a134 1
    stringBuffer.append(TEXT_20);
d148 1
a148 1
    stringBuffer.append(TEXT_21);
d150 1
a150 1
    stringBuffer.append(TEXT_22);
d152 1
a152 1
    stringBuffer.append(TEXT_23);
d154 1
a154 1
    stringBuffer.append(TEXT_24);
d156 1
a156 1
    stringBuffer.append(TEXT_25);
d161 1
a161 1
    stringBuffer.append(TEXT_26);
d170 1
a170 1
    stringBuffer.append(TEXT_27);
d172 1
a172 1
    stringBuffer.append(TEXT_28);
d176 1
a176 1
    stringBuffer.append(TEXT_29);
d178 1
a178 1
    stringBuffer.append(TEXT_30);
d180 1
a180 1
    stringBuffer.append(TEXT_31);
d182 1
a182 1
    stringBuffer.append(TEXT_32);
d187 1
a187 1
    stringBuffer.append(TEXT_33);
d189 1
a189 1
    stringBuffer.append(TEXT_34);
d195 1
a195 1
    stringBuffer.append(TEXT_35);
d197 1
a197 1
    stringBuffer.append(TEXT_36);
d199 1
a199 1
    stringBuffer.append(TEXT_37);
d204 1
a204 1
    stringBuffer.append(TEXT_38);
d206 1
a206 1
    stringBuffer.append(TEXT_39);
d208 1
a208 1
    stringBuffer.append(TEXT_40);
d210 1
a210 1
    stringBuffer.append(TEXT_41);
d212 1
a212 1
    stringBuffer.append(TEXT_42);
d214 1
a214 1
    stringBuffer.append(TEXT_43);
d216 1
a216 1
    stringBuffer.append(TEXT_44);
@


1.34
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d46 17
a62 14
  protected final String TEXT_28 = " elementType = (";
  protected final String TEXT_29 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_30 = ".class);";
  protected final String TEXT_31 = NL + "\t\tif (";
  protected final String TEXT_32 = ".";
  protected final String TEXT_33 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_34 = ".class;" + NL + "\t\t}";
  protected final String TEXT_35 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_36 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_37 = NL + "\t\tcase ";
  protected final String TEXT_38 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_39 = ".class;";
  protected final String TEXT_40 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_41 = NL;
a160 4
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_30);
d164 1
a164 1
    stringBuffer.append(TEXT_31);
d166 1
a166 1
    stringBuffer.append(TEXT_32);
d168 1
a168 1
    stringBuffer.append(TEXT_33);
d170 1
a170 1
    stringBuffer.append(TEXT_34);
d175 1
a175 1
    stringBuffer.append(TEXT_35);
d177 1
a177 1
    stringBuffer.append(TEXT_36);
d183 1
a183 1
    stringBuffer.append(TEXT_37);
d185 1
a185 1
    stringBuffer.append(TEXT_38);
d187 1
a187 1
    stringBuffer.append(TEXT_39);
d192 4
d197 6
d204 1
a204 1
    stringBuffer.append(TEXT_41);
@


1.33
log
@constant used throughout templates to identify diagram (genModel.getModelName) was extracted as explicit attribute
packagePrefix added
@
text
@d65 1
a65 1
GenDiagram genDiagram = (GenDiagram) argument;
@


1.32
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@a3 1
import org.eclipse.emf.codegen.ecore.genmodel.*;
a65 1
GenModel genModel = genDiagram.getEditorGen().getDomainGenModel();
d77 1
a77 1
    stringBuffer.append(genModel.getModelName());
@


1.31
log
@ImportManager moved to oeg.common
@
text
@d67 1
a67 1
GenModel genModel = genDiagram.getEMFGenModel();
@


1.30
log
@rename GenContainerEditPart -> GenContainerBase
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.29
log
@#124413
Cleaning up the gmfgen model
@
text
@d89 1
a89 1
	GenContainerEditPart container = (GenContainerEditPart) containers.next();
@


1.28
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d88 1
a88 1
for (Iterator containers = genDiagram.getAllContainers().iterator(); containers.hasNext();) {
@


1.27
log
@#114178
Create shortcut functionality added
@
text
@a68 1
Collection allContainers = AccessUtil.getAllContainers(genDiagram);
d88 2
a89 2
for (Iterator containers = allContainers.iterator(); containers.hasNext();) {
	GenChildContainer container = (GenChildContainer) containers.next();
d97 1
a97 1
	if (container instanceof GenChildNode ? !((GenChildNode) container).isListContainerEntry() : container instanceof GenNode) {
@


1.26
log
@#122054 support external node labels (partial fix)
@
text
@d27 34
a60 35
  protected final String TEXT_8 = ".class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tif (containerView == null) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\tif (!\"";
  protected final String TEXT_9 = "\".equals(containerView.getDiagram().getType())) {" + NL + "\t\t\treturn null;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_10 = ".INSTANCE.getNodeVisualID(containerView, semanticElement, semanticType, semanticHint);" + NL + "" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_11 = NL + "\t\tcase ";
  protected final String TEXT_12 = ":" + NL + "\t\t\t return ";
  protected final String TEXT_13 = ".class;";
  protected final String TEXT_14 = NL + "\t\tcase ";
  protected final String TEXT_15 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_16 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_17 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_18 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_19 = NL + "\t\tcase ";
  protected final String TEXT_20 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_21 = ".class;";
  protected final String TEXT_22 = NL + "\t\tcase ";
  protected final String TEXT_23 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_24 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_25 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_26 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = " elementType = (";
  protected final String TEXT_30 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_31 = ".class);";
  protected final String TEXT_32 = NL + "\t\tif (";
  protected final String TEXT_33 = ".";
  protected final String TEXT_34 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ".class;" + NL + "\t\t}";
  protected final String TEXT_36 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_37 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_38 = NL + "\t\tcase ";
  protected final String TEXT_39 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_40 = ".class;";
  protected final String TEXT_41 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_42 = NL;
d86 1
a86 1
    stringBuffer.append(genModel.getModelName());
a87 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_10);
d92 2
d95 1
a95 1
    stringBuffer.append(container.getVisualID());
a96 2
    stringBuffer.append(importManager.getImportedName(container.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_13);
d106 2
d109 1
a109 1
    stringBuffer.append(label.getVisualID());
d111 1
a111 1
    stringBuffer.append(labelViewId);
d113 1
a113 1
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
a114 2
    stringBuffer.append(importManager.getImportedName(((ExternalLabel) label).getTextNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_18);
d118 2
d121 1
a121 1
    stringBuffer.append(label.getVisualID());
a122 2
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_21);
d136 2
d139 1
a139 1
    stringBuffer.append(linkLabel.getVisualID());
d141 1
a141 1
    stringBuffer.append(labelViewId);
d143 1
a143 1
    stringBuffer.append(importManager.getImportedName(linkLabel.getNotationViewFactoryQualifiedClassName()));
a144 2
    stringBuffer.append(importManager.getImportedName(linkLabel.getTextNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_26);
d149 1
a149 1
    stringBuffer.append(TEXT_27);
d158 2
a164 2
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.emf.type.core.IElementType"));
    stringBuffer.append(TEXT_31);
d168 2
d171 1
a171 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d173 1
a173 1
    stringBuffer.append(genLink.getUniqueIdentifier());
a174 2
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_35);
d179 2
a181 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_37);
d187 2
d190 1
a190 1
    stringBuffer.append(genLink.getVisualID());
a191 2
    stringBuffer.append(importManager.getImportedName(genLink.getNotationViewFactoryQualifiedClassName()));
    stringBuffer.append(TEXT_40);
d196 2
a198 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_42);
@


1.25
log
@#121581
Fields for the compartments are named unique.
@
text
@d34 28
a61 23
  protected final String TEXT_15 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_16 = ".class;";
  protected final String TEXT_17 = NL + "\t\tcase ";
  protected final String TEXT_18 = ":" + NL + "\t\t\tif (";
  protected final String TEXT_19 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_20 = ".class;" + NL + "\t\t\t} else { " + NL + "\t\t\t\treturn ";
  protected final String TEXT_21 = ".class;" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = " elementType = (";
  protected final String TEXT_25 = ") semanticAdapter.getAdapter(";
  protected final String TEXT_26 = ".class);";
  protected final String TEXT_27 = NL + "\t\tif (";
  protected final String TEXT_28 = ".";
  protected final String TEXT_29 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_30 = ".class;" + NL + "\t\t}";
  protected final String TEXT_31 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_32 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_33 = NL + "\t\tcase ";
  protected final String TEXT_34 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ".class;";
  protected final String TEXT_36 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_37 = NL;
d105 3
d112 2
d115 11
a125 1
    stringBuffer.append(TEXT_16);
d127 1
d139 1
a139 1
    stringBuffer.append(TEXT_17);
d141 1
a141 1
    stringBuffer.append(TEXT_18);
d143 1
a143 1
    stringBuffer.append(TEXT_19);
d145 1
a145 1
    stringBuffer.append(TEXT_20);
d147 1
a147 1
    stringBuffer.append(TEXT_21);
d152 1
a152 1
    stringBuffer.append(TEXT_22);
d161 1
a161 1
    stringBuffer.append(TEXT_23);
d163 1
a163 1
    stringBuffer.append(TEXT_24);
d165 1
a165 1
    stringBuffer.append(TEXT_25);
d167 1
a167 1
    stringBuffer.append(TEXT_26);
d171 1
a171 1
    stringBuffer.append(TEXT_27);
d173 1
a173 1
    stringBuffer.append(TEXT_28);
d175 1
a175 1
    stringBuffer.append(TEXT_29);
d177 1
a177 1
    stringBuffer.append(TEXT_30);
d182 1
a182 1
    stringBuffer.append(TEXT_31);
d184 1
a184 1
    stringBuffer.append(TEXT_32);
d190 1
a190 1
    stringBuffer.append(TEXT_33);
d192 1
a192 1
    stringBuffer.append(TEXT_34);
d194 1
a194 1
    stringBuffer.append(TEXT_35);
d199 1
a199 1
    stringBuffer.append(TEXT_36);
d201 1
a201 1
    stringBuffer.append(TEXT_37);
@


1.24
log
@#118256

Enabling links creation to/from sub-classes of corresponding metaclasses from model
@
text
@d116 1
a116 1
		String labelViewId = semanticHintsClassName + '.' + link.getUniqueIdentifier() + "Labels." + AccessUtil.getLabelId(linkLabel);
@


1.23
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d42 15
a56 12
  protected final String TEXT_23 = NL + "\t\tIElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);";
  protected final String TEXT_24 = NL + "\t\tif (";
  protected final String TEXT_25 = ".";
  protected final String TEXT_26 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_27 = ".class;" + NL + "\t\t}";
  protected final String TEXT_28 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_29 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_30 = NL + "\t\tcase ";
  protected final String TEXT_31 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ".class;";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_34 = NL;
d141 6
d150 1
a150 1
    stringBuffer.append(TEXT_24);
d152 1
a152 1
    stringBuffer.append(TEXT_25);
d154 1
a154 1
    stringBuffer.append(TEXT_26);
d156 1
a156 1
    stringBuffer.append(TEXT_27);
d161 1
a161 1
    stringBuffer.append(TEXT_28);
d163 1
a163 1
    stringBuffer.append(TEXT_29);
d169 1
a169 1
    stringBuffer.append(TEXT_30);
d171 1
a171 1
    stringBuffer.append(TEXT_31);
d173 1
a173 1
    stringBuffer.append(TEXT_32);
d178 1
a178 1
    stringBuffer.append(TEXT_33);
d180 1
a180 1
    stringBuffer.append(TEXT_34);
@


1.22
log
@#116655

Generating correct access for all the features.
@
text
@d93 1
a93 1
	if (container instanceof GenNode) {
@


1.21
log
@#116798 create distinct package for the view factories
@
text
@d41 13
a53 12
  protected final String TEXT_22 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getEdgeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);";
  protected final String TEXT_23 = NL + "\t\tif (";
  protected final String TEXT_24 = ".";
  protected final String TEXT_25 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_26 = ".class;" + NL + "\t\t}";
  protected final String TEXT_27 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_28 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_29 = NL + "\t\tcase ";
  protected final String TEXT_30 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_31 = ".class;";
  protected final String TEXT_32 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_33 = NL;
d130 1
d134 2
d138 4
d143 1
a143 1
    stringBuffer.append(TEXT_24);
d145 1
a145 1
    stringBuffer.append(TEXT_25);
d147 1
a147 1
    stringBuffer.append(TEXT_26);
d152 1
a152 1
    stringBuffer.append(TEXT_27);
d154 1
a154 1
    stringBuffer.append(TEXT_28);
d160 1
a160 1
    stringBuffer.append(TEXT_29);
d162 1
a162 1
    stringBuffer.append(TEXT_30);
d164 1
a164 1
    stringBuffer.append(TEXT_31);
d169 1
a169 1
    stringBuffer.append(TEXT_32);
d171 1
a171 1
    stringBuffer.append(TEXT_33);
@


1.20
log
@#116031 avoid hardcoded class names in templates
@
text
@d25 1
a25 1
  protected final String TEXT_6 = "\".equals(diagramKind) && ";
d70 1
a70 1
    stringBuffer.append(genDiagram.getViewProviderClassName());
d76 1
a76 1
    stringBuffer.append(genDiagram.getNotationViewFactoryClassName());
d138 1
a138 1
    stringBuffer.append(genLink.getNotationViewFactoryClassName());
d155 1
a155 1
    stringBuffer.append(genLink.getNotationViewFactoryClassName());
@


1.19
log
@#115972 generate single class with semantic hints
@
text
@d42 11
a52 10
  protected final String TEXT_23 = NL + "\t\tif (ElementTypes.";
  protected final String TEXT_24 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_25 = ".class;" + NL + "\t\t}";
  protected final String TEXT_26 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_27 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_28 = NL + "\t\tcase ";
  protected final String TEXT_29 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_30 = ".class;";
  protected final String TEXT_31 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_32 = NL;
d74 1
a74 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d80 1
a80 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d134 2
d137 1
a137 1
    stringBuffer.append(TEXT_24);
d139 1
a139 1
    stringBuffer.append(TEXT_25);
a143 2
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d145 2
d152 1
a152 1
    stringBuffer.append(TEXT_28);
d154 1
a154 1
    stringBuffer.append(TEXT_29);
d156 1
a156 1
    stringBuffer.append(TEXT_30);
d161 1
a161 1
    stringBuffer.append(TEXT_31);
d163 1
a163 1
    stringBuffer.append(TEXT_32);
@


1.18
log
@[ashatalin] #115070 links were not working due to recent runtime changes
@
text
@d108 1
a108 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(link);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d111 1
a111 1
		String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(linkLabel);
@


1.17
log
@clean unused code
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d41 1
a41 1
  protected final String TEXT_22 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);";
@


1.16
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@a147 2
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
@


1.15
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d26 26
a51 41
  protected final String TEXT_7 = ".INSTANCE.getDiagramVisualID(semanticElement) != -1) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tClass linkLabelViewClass = getLinkLabelViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\tif (linkLabelViewClass != null) {" + NL + "\t\t\treturn linkLabelViewClass;" + NL + "\t\t}" + NL + "\t\tif (containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0)) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getLinkLabelViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_8 = NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint linkVID = ";
  protected final String TEXT_9 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_10 = NL + "\t\tcase ";
  protected final String TEXT_11 = ":";
  protected final String TEXT_12 = NL + "\t\t\tif (";
  protected final String TEXT_13 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_14 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\tif (";
  protected final String TEXT_15 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\treturn null;";
  protected final String TEXT_17 = NL + "\t\t\t" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_19 = ".INSTANCE.getNodeVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_20 = NL + "\t\tcase ";
  protected final String TEXT_21 = ":";
  protected final String TEXT_22 = NL + "\t\t\tif (";
  protected final String TEXT_23 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_24 = NL + "\t\t\tif (";
  protected final String TEXT_25 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_26 = NL + "\t\t\treturn ";
  protected final String TEXT_27 = ".class;";
  protected final String TEXT_28 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_29 = ".INSTANCE.getChildNodeVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_30 = NL + "\t\tcase ";
  protected final String TEXT_31 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_32 = ".class;";
  protected final String TEXT_33 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);";
  protected final String TEXT_34 = NL + "\t\tif (ElementTypes.";
  protected final String TEXT_35 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_36 = ".class;" + NL + "\t\t}";
  protected final String TEXT_37 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_38 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_39 = NL + "\t\tcase ";
  protected final String TEXT_40 = ":";
  protected final String TEXT_41 = NL + "\t\t\tif (";
  protected final String TEXT_42 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tif (";
  protected final String TEXT_43 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_44 = NL + "\t\t\treturn ";
  protected final String TEXT_45 = ".class;";
  protected final String TEXT_46 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_47 = NL;
d56 6
a61 2
    GenDiagram genDiagram = (GenDiagram) argument;
    GenModel genModel = genDiagram.getEMFGenModel();
d75 1
a75 4
    
List genLinks = genDiagram.getLinks();
if (genLinks.size() != 0) {

d77 2
d80 1
a80 1
    stringBuffer.append(TEXT_9);
d82 2
a83 5
	for (int i = 0; i < genLinks.size(); i++) {
		GenLink genLink = (GenLink) genLinks.get(i);
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genLink);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
		if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
a84 2
    stringBuffer.append(TEXT_10);
    stringBuffer.append(genLink.getVisualID());
d86 4
d91 4
a94 5
			List labels = genLink.getLabels();
			for (int j = 0; j < labels.size(); j++) {
				GenLinkLabel label = (GenLinkLabel) labels.get(j);
				String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(label);
				String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);
a95 4
    stringBuffer.append(TEXT_12);
    stringBuffer.append(labelViewId);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName(label.getNotationViewFactoryQualifiedClassName()));
d97 1
a97 1
    stringBuffer.append(labelTextViewId);
d99 2
a101 4
			}

    stringBuffer.append(TEXT_16);
    			
d104 9
d115 1
a115 1
    }
d117 1
a117 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
d119 1
a119 5
    
List genNodes = genDiagram.getNodes();
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);

d121 1
a121 1
    stringBuffer.append(genNode.getVisualID());
a123 41
	String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
	String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
	List labels = genNode.getLabels();
	for (int j = 0; j < labels.size(); j++) {
		GenNodeLabel label = (GenNodeLabel) labels.get(j);
		String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);

    stringBuffer.append(TEXT_22);
    stringBuffer.append(labelTextViewId);
    stringBuffer.append(TEXT_23);
    
	}
	List genCompartments = genNode.getCompartments();
	for (int j = 0; j < genCompartments.size(); j++) {
		GenCompartment genChildContainer = (GenCompartment) genCompartments.get(j);
		String compartmentId = semanticHintsClassName + ".Compartments." + AccessUtil.getCompartmentId(genChildContainer);

    stringBuffer.append(TEXT_24);
    stringBuffer.append(compartmentId);
    stringBuffer.append(TEXT_25);
    	}
    stringBuffer.append(TEXT_26);
    stringBuffer.append(genNode.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_27);
    }
    stringBuffer.append(TEXT_28);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_29);
    
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	List genChildNodes = AccessUtil.getAllChildNodes(genNode);
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);

    stringBuffer.append(TEXT_30);
    stringBuffer.append(genChildNode.getVisualID());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(genChildNode.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_32);
    
d127 1
a127 1
    stringBuffer.append(TEXT_33);
d133 1
a133 1
    stringBuffer.append(TEXT_34);
d135 1
a135 1
    stringBuffer.append(TEXT_35);
d137 1
a137 1
    stringBuffer.append(TEXT_36);
d142 1
a142 1
    stringBuffer.append(TEXT_37);
d144 1
a144 1
    stringBuffer.append(TEXT_38);
d152 1
a152 1
    stringBuffer.append(TEXT_39);
d154 1
a154 16
    stringBuffer.append(TEXT_40);
    
		// disable creation of connector views for label links
		List labels = genLink.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			GenLinkLabel label = (GenLinkLabel) labels.get(j);
			String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelId(label);
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLabelTextId(label);

    stringBuffer.append(TEXT_41);
    stringBuffer.append(labelViewId);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(labelTextViewId);
    stringBuffer.append(TEXT_43);
    		}
    stringBuffer.append(TEXT_44);
d156 1
a156 1
    stringBuffer.append(TEXT_45);
d161 1
a161 1
    stringBuffer.append(TEXT_46);
d163 1
a163 1
    stringBuffer.append(TEXT_47);
@


1.14
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d151 3
a153 3
	List genChildContainers = genNode.getChildContainers();
	for (int j = 0; j < genChildContainers.size(); j++) {
		GenChildContainer genChildContainer = (GenChildContainer) genChildContainers.get(j);
d170 1
a170 1
	List genChildNodes = genNode.getChildNodes();
@


1.13
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d98 1
a98 1
		if (genLink instanceof GenLinkWithClass) {
d187 1
a187 1
	if (genLink instanceof GenLinkReferenceOnly) {
d206 1
a206 1
	if (genLink instanceof GenLinkWithClass) {
@


1.12
log
@[dstadnik] #112900 metamodel support
@
text
@d106 3
a108 3
				LinkLabel label = (LinkLabel) labels.get(j);
				String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelId(label);
				String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelTextId(label);
d113 1
a113 1
    stringBuffer.append(AccessUtil.getLinkLabelViewFactoryClassName(label));
d141 4
a144 2
	if (genNode.hasNameToEdit()) {
		String semanticHint = semanticHintsClassName + '.' + AccessUtil.getNameSemanticHint(genNode);
d147 1
a147 1
    stringBuffer.append(semanticHint);
d149 2
a150 1
    	}
d215 3
a217 3
			LinkLabel label = (LinkLabel) labels.get(j);
			String labelViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelId(label);
			String labelTextViewId = semanticHintsClassName + ".Labels." + AccessUtil.getLinkLabelTextId(label);
@


1.11
log
@[dstadnik] #112174 and #112185 - constants for compartments and labels
@
text
@d23 44
a66 43
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ViewProvider extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tif (\"";
  protected final String TEXT_5 = "\".equals(diagramKind) && ";
  protected final String TEXT_6 = ".INSTANCE.getDiagramVisualID(semanticElement) != -1) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tClass linkLabelViewClass = getLinkLabelViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\tif (linkLabelViewClass != null) {" + NL + "\t\t\treturn linkLabelViewClass;" + NL + "\t\t}" + NL + "\t\tif (containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0)) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getLinkLabelViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_7 = NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint linkVID = ";
  protected final String TEXT_8 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_9 = NL + "\t\tcase ";
  protected final String TEXT_10 = ":";
  protected final String TEXT_11 = NL + "\t\t\tif (";
  protected final String TEXT_12 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_13 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\tif (";
  protected final String TEXT_14 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_15 = NL + "\t\t\treturn null;";
  protected final String TEXT_16 = NL + "\t\t\t" + NL + "\t\t}";
  protected final String TEXT_17 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_18 = ".INSTANCE.getNodeVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_19 = NL + "\t\tcase ";
  protected final String TEXT_20 = ":";
  protected final String TEXT_21 = NL + "\t\t\tif (";
  protected final String TEXT_22 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_23 = NL + "\t\t\tif (";
  protected final String TEXT_24 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\treturn ";
  protected final String TEXT_26 = ".class;";
  protected final String TEXT_27 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_28 = ".INSTANCE.getChildNodeVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_29 = NL + "\t\tcase ";
  protected final String TEXT_30 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_31 = ".class;";
  protected final String TEXT_32 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);";
  protected final String TEXT_33 = NL + "\t\tif (ElementTypes.";
  protected final String TEXT_34 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_35 = ".class;" + NL + "\t\t}";
  protected final String TEXT_36 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_37 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_38 = NL + "\t\tcase ";
  protected final String TEXT_39 = ":";
  protected final String TEXT_40 = NL + "\t\t\tif (";
  protected final String TEXT_41 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tif (";
  protected final String TEXT_42 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_43 = NL + "\t\t\treturn ";
  protected final String TEXT_44 = ".class;";
  protected final String TEXT_45 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_46 = NL;
d80 2
d83 1
a83 1
    stringBuffer.append(TEXT_5);
d85 1
a85 1
    stringBuffer.append(TEXT_6);
d90 1
a90 1
    stringBuffer.append(TEXT_7);
d92 1
a92 1
    stringBuffer.append(TEXT_8);
d100 1
a100 1
    stringBuffer.append(TEXT_9);
d102 1
a102 1
    stringBuffer.append(TEXT_10);
d110 1
a110 1
    stringBuffer.append(TEXT_11);
d112 1
a112 1
    stringBuffer.append(TEXT_12);
d114 1
a114 1
    stringBuffer.append(TEXT_13);
d116 1
a116 1
    stringBuffer.append(TEXT_14);
d120 1
a120 1
    stringBuffer.append(TEXT_15);
d125 1
a125 1
    stringBuffer.append(TEXT_16);
d127 1
a127 1
    stringBuffer.append(TEXT_17);
d129 1
a129 1
    stringBuffer.append(TEXT_18);
d135 1
a135 1
    stringBuffer.append(TEXT_19);
d137 1
a137 1
    stringBuffer.append(TEXT_20);
d144 1
a144 1
    stringBuffer.append(TEXT_21);
d146 1
a146 1
    stringBuffer.append(TEXT_22);
d153 1
a153 1
    stringBuffer.append(TEXT_23);
d155 1
a155 1
    stringBuffer.append(TEXT_24);
d157 1
a157 1
    stringBuffer.append(TEXT_25);
d159 1
a159 1
    stringBuffer.append(TEXT_26);
d161 1
a161 1
    stringBuffer.append(TEXT_27);
d163 1
a163 1
    stringBuffer.append(TEXT_28);
d171 1
a171 1
    stringBuffer.append(TEXT_29);
d173 1
a173 1
    stringBuffer.append(TEXT_30);
d175 1
a175 1
    stringBuffer.append(TEXT_31);
d180 1
a180 1
    stringBuffer.append(TEXT_32);
d186 1
a186 1
    stringBuffer.append(TEXT_33);
d188 1
a188 1
    stringBuffer.append(TEXT_34);
d190 1
a190 1
    stringBuffer.append(TEXT_35);
d195 1
a195 1
    stringBuffer.append(TEXT_36);
d197 1
a197 1
    stringBuffer.append(TEXT_37);
d205 1
a205 1
    stringBuffer.append(TEXT_38);
d207 1
a207 1
    stringBuffer.append(TEXT_39);
d216 1
a216 1
    stringBuffer.append(TEXT_40);
d218 1
a218 1
    stringBuffer.append(TEXT_41);
d220 1
a220 1
    stringBuffer.append(TEXT_42);
d222 1
a222 1
    stringBuffer.append(TEXT_43);
d224 1
a224 1
    stringBuffer.append(TEXT_44);
d229 1
a229 1
    stringBuffer.append(TEXT_45);
d231 1
a231 1
    stringBuffer.append(TEXT_46);
@


1.10
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d25 41
a65 43
  protected final String TEXT_6 = ".INSTANCE.getDiagramVisualID(semanticElement) != -1) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tClass linkLabelViewClass = getLinkLabelViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\tif (linkLabelViewClass != null) {" + NL + "\t\t\treturn linkLabelViewClass;" + NL + "\t\t}" + NL + "\t\t" + NL + "\t\tboolean isTopLevel = containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0);" + NL + "\t\tif (isTopLevel) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getLinkLabelViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {";
  protected final String TEXT_8 = NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint linkVID = ";
  protected final String TEXT_9 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_10 = NL + "\t\tcase ";
  protected final String TEXT_11 = ":";
  protected final String TEXT_12 = NL + "\t\t\tif (\"";
  protected final String TEXT_13 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_14 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_15 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\treturn null;";
  protected final String TEXT_17 = NL + "\t\t\t" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\treturn null;" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_19 = ".INSTANCE.getNodeVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_20 = NL + "\t\tcase ";
  protected final String TEXT_21 = ":";
  protected final String TEXT_22 = NL + "\t\t\tif (";
  protected final String TEXT_23 = ".";
  protected final String TEXT_24 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_25 = NL + "\t\t\tif (\"";
  protected final String TEXT_26 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_27 = NL + "\t\t\treturn ";
  protected final String TEXT_28 = ".class;";
  protected final String TEXT_29 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint nodeVID = ";
  protected final String TEXT_30 = ".INSTANCE.getChildNodeVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (nodeVID) {";
  protected final String TEXT_31 = NL + "\t\tcase ";
  protected final String TEXT_32 = ":" + NL + "\t\t\treturn ";
  protected final String TEXT_33 = ".class;";
  protected final String TEXT_34 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tIElementType elementType = (IElementType) semanticAdapter.getAdapter(IElementType.class);";
  protected final String TEXT_35 = NL + "\t\tif (ElementTypes.";
  protected final String TEXT_36 = ".equals(elementType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_37 = ".class;" + NL + "\t\t}";
  protected final String TEXT_38 = NL + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "" + NL + "\t\tint linkVID = ";
  protected final String TEXT_39 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_40 = NL + "\t\tcase ";
  protected final String TEXT_41 = ":";
  protected final String TEXT_42 = NL + "\t\t\tif (\"";
  protected final String TEXT_43 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_44 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_45 = NL + "\t\t\treturn ";
  protected final String TEXT_46 = ".class;";
  protected final String TEXT_47 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_48 = NL;
a83 4
GenPackage genPackage = genDiagram.getDomainMetaModel();

    stringBuffer.append(TEXT_7);
    
d87 2
a89 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_9);
d93 2
d97 2
a99 2
    stringBuffer.append(genLink.getVisualID());
    stringBuffer.append(TEXT_11);
d104 2
d107 2
d110 1
a110 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
d112 1
a112 1
    stringBuffer.append(AccessUtil.getLinkLabelViewFactoryClassName(label));
a113 2
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
    stringBuffer.append(TEXT_15);
d117 1
a117 1
    stringBuffer.append(TEXT_16);
d122 2
d125 1
a125 3
    
}

a126 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_19);
a130 2
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();
d132 2
a134 2
    stringBuffer.append(genNode.getVisualID());
    stringBuffer.append(TEXT_21);
d136 2
d139 1
a139 2
		String semanticHintsQualifiedClassName = genDiagram.getProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
		String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d141 2
a143 4
    stringBuffer.append(semanticHintsClassName);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(AccessUtil.getNameSemanticHint(genNode));
    stringBuffer.append(TEXT_24);
d148 1
d150 4
d155 1
a155 1
    stringBuffer.append(genChildContainer.getGroupID());
d157 1
a157 1
    	}
d159 1
a159 1
    stringBuffer.append(genNode.getNotationViewFactoryClassName());
a161 6
}

    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName(genDiagram.getEditorPackageName() + ".VisualIDRegistry"));
    stringBuffer.append(TEXT_30);
    
d168 1
a168 1
    stringBuffer.append(TEXT_31);
d170 1
a170 1
    stringBuffer.append(TEXT_32);
d172 3
a174 2
    stringBuffer.append(TEXT_33);
    	}
d177 1
a177 1
    stringBuffer.append(TEXT_34);
d183 1
a183 1
    stringBuffer.append(TEXT_35);
d185 1
a185 1
    stringBuffer.append(TEXT_36);
d187 1
a187 1
    stringBuffer.append(TEXT_37);
d192 1
a192 1
    stringBuffer.append(TEXT_38);
d194 1
a194 1
    stringBuffer.append(TEXT_39);
d198 2
d202 1
a202 1
    stringBuffer.append(TEXT_40);
d204 1
a204 1
    stringBuffer.append(TEXT_41);
d210 2
d213 4
d218 1
a218 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
d220 1
a220 1
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
a221 4
    		}
    stringBuffer.append(TEXT_45);
    stringBuffer.append(genLink.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_46);
d226 1
a226 1
    stringBuffer.append(TEXT_47);
d228 1
a228 1
    stringBuffer.append(TEXT_48);
@


1.9
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
d53 15
a67 11
  protected final String TEXT_34 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tint linkVID = ";
  protected final String TEXT_35 = ".INSTANCE.getLinkWithClassVisualID(semanticElement, semanticType);" + NL + "\t\t" + NL + "\t\tswitch (linkVID) {";
  protected final String TEXT_36 = NL + "\t\tcase ";
  protected final String TEXT_37 = ":";
  protected final String TEXT_38 = NL + "\t\t\tif (\"";
  protected final String TEXT_39 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_40 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_41 = NL + "\t\t\treturn ";
  protected final String TEXT_42 = ".class;";
  protected final String TEXT_43 = NL + "\t\t}" + NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "}";
  protected final String TEXT_44 = NL;
d185 15
d201 1
a201 1
    stringBuffer.append(TEXT_35);
d207 1
a207 1
    stringBuffer.append(TEXT_36);
d209 1
a209 1
    stringBuffer.append(TEXT_37);
d216 1
a216 1
    stringBuffer.append(TEXT_38);
d218 1
a218 1
    stringBuffer.append(TEXT_39);
d220 1
a220 1
    stringBuffer.append(TEXT_40);
d222 1
a222 1
    stringBuffer.append(TEXT_41);
d224 1
a224 1
    stringBuffer.append(TEXT_42);
d229 1
a229 1
    stringBuffer.append(TEXT_43);
d231 1
a231 1
    stringBuffer.append(TEXT_44);
@


1.8
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d24 40
a63 72
  protected final String TEXT_5 = "\".equals(diagramKind) && isDiagram";
  protected final String TEXT_6 = "_";
  protected final String TEXT_7 = "((";
  protected final String TEXT_8 = ") semanticElement)) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_10 = NL + "\t\tif (";
  protected final String TEXT_11 = ".eINSTANCE.get";
  protected final String TEXT_12 = "().equals(semanticType) && isConnector";
  protected final String TEXT_13 = "_";
  protected final String TEXT_14 = "((";
  protected final String TEXT_15 = ") semanticElement)) {";
  protected final String TEXT_16 = NL + "\t\t\tif (\"";
  protected final String TEXT_17 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_18 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_19 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_20 = NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_21 = NL + "\t\tboolean isTopLevel = containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0);" + NL + "\t\tif (isTopLevel) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_22 = NL + "\t\tif (";
  protected final String TEXT_23 = ".eINSTANCE.get";
  protected final String TEXT_24 = "().equals(semanticType) && isNode";
  protected final String TEXT_25 = "_";
  protected final String TEXT_26 = "((";
  protected final String TEXT_27 = ") semanticElement)) {";
  protected final String TEXT_28 = NL + "\t\t\tif (";
  protected final String TEXT_29 = ".";
  protected final String TEXT_30 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_31 = NL + "\t\t\tif (\"";
  protected final String TEXT_32 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_33 = NL + "\t\t\treturn ";
  protected final String TEXT_34 = ".class;" + NL + "\t\t}";
  protected final String TEXT_35 = NL + "\t\treturn getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_36 = NL + "\t\tif (";
  protected final String TEXT_37 = ".eINSTANCE.get";
  protected final String TEXT_38 = "().equals(semanticType) && isChildNode";
  protected final String TEXT_39 = "_";
  protected final String TEXT_40 = "((";
  protected final String TEXT_41 = ") semanticElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_42 = ".class;" + NL + "\t\t}";
  protected final String TEXT_43 = NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_44 = NL + "\t\tif (";
  protected final String TEXT_45 = ".eINSTANCE.get";
  protected final String TEXT_46 = "().equals(semanticType) && isConnector";
  protected final String TEXT_47 = "_";
  protected final String TEXT_48 = "((";
  protected final String TEXT_49 = ") semanticElement)) {";
  protected final String TEXT_50 = NL + "\t\t\tif (\"";
  protected final String TEXT_51 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_52 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t\treturn ";
  protected final String TEXT_54 = ".class;" + NL + "\t\t}";
  protected final String TEXT_55 = NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_56 = "_";
  protected final String TEXT_57 = "(";
  protected final String TEXT_58 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_59 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_60 = "_";
  protected final String TEXT_61 = "(";
  protected final String TEXT_62 = " element) {" + NL + "\t\treturn element == null || ";
  protected final String TEXT_63 = "(element);" + NL + "\t}" + NL;
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_65 = "_";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = " element) {" + NL + "\t\treturn element == null || ";
  protected final String TEXT_68 = "(element);" + NL + "\t}" + NL;
  protected final String TEXT_69 = NL + "\t";
  protected final String TEXT_70 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isConnector";
  protected final String TEXT_71 = "_";
  protected final String TEXT_72 = "(";
  protected final String TEXT_73 = " element) {" + NL + "\t\treturn element == null || ";
  protected final String TEXT_74 = "(element);" + NL + "\t}";
  protected final String TEXT_75 = NL + "\t" + NL + "}";
  protected final String TEXT_76 = NL;
d79 1
a79 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d81 3
a83 1
    stringBuffer.append(genDiagram.getVisualID());
a84 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_8);
d86 2
a87 2
GenPackage genPackage = genDiagram.getDomainMetaModel();
String semanticPackageInterfaceName = importManager.getImportedName(genPackage.getQualifiedPackageInterfaceName());
d89 2
d93 3
a95 7
List genLinks = genDiagram.getLinks();
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();
d98 1
a98 1
    stringBuffer.append(semanticPackageInterfaceName);
d100 5
a104 1
    stringBuffer.append(semanticLinkInterfaceName);
d106 1
a106 1
    stringBuffer.append(semanticLinkInterfaceName);
d108 1
a108 1
    stringBuffer.append(genLinkWithClass.getVisualID());
d110 1
a110 1
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
d113 1
a113 3
		List labels = genLink.getLabels();
		for (int j = 0; j < labels.size(); j++) {
			LinkLabel label = (LinkLabel) labels.get(j);
d116 4
a119 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
a120 6
    stringBuffer.append(AccessUtil.getLinkLabelViewFactoryClassName(label));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
    stringBuffer.append(TEXT_19);
    		}
    stringBuffer.append(TEXT_20);
a121 1
	}
d124 3
a126 1
    stringBuffer.append(TEXT_21);
d134 1
a134 7
    stringBuffer.append(TEXT_22);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_23);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_25);
d136 1
a136 3
    stringBuffer.append(TEXT_26);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_27);
d142 1
a142 1
    stringBuffer.append(TEXT_28);
d144 1
a144 1
    stringBuffer.append(TEXT_29);
d146 1
a146 1
    stringBuffer.append(TEXT_30);
d152 1
a152 1
    stringBuffer.append(TEXT_31);
d154 1
a154 1
    stringBuffer.append(TEXT_32);
d156 1
a156 1
    stringBuffer.append(TEXT_33);
d158 1
a158 1
    stringBuffer.append(TEXT_34);
d162 3
a164 1
    stringBuffer.append(TEXT_35);
a170 2
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();
d172 1
a172 7
    stringBuffer.append(TEXT_36);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_37);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_38);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_39);
d174 1
a174 3
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_41);
d176 1
a176 1
    stringBuffer.append(TEXT_42);
d180 3
a182 1
    stringBuffer.append(TEXT_43);
a186 3
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();
d188 3
a190 11
    stringBuffer.append(TEXT_44);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_45);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_47);
    stringBuffer.append(genLinkWithClass.getVisualID());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_49);
d197 1
a197 1
    stringBuffer.append(TEXT_50);
d199 1
a199 1
    stringBuffer.append(TEXT_51);
d201 1
a201 1
    stringBuffer.append(TEXT_52);
d203 1
a203 1
    stringBuffer.append(TEXT_53);
d205 1
a205 1
    stringBuffer.append(TEXT_54);
d210 1
a210 64
    stringBuffer.append(TEXT_55);
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
    stringBuffer.append(TEXT_56);
    stringBuffer.append(genDiagram.getVisualID());
    stringBuffer.append(TEXT_57);
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_58);
    
for (int i = 0; i < genNodes.size(); i++) {
	GenNode genNode = (GenNode) genNodes.get(i);
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getClassifierAccessorName();
	String qualifiedNodeInterfaceName = genNode.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_59);
    stringBuffer.append(semanticNodeInterfaceName);
    stringBuffer.append(TEXT_60);
    stringBuffer.append(genNode.getVisualID());
    stringBuffer.append(TEXT_61);
    stringBuffer.append(importManager.getImportedName(qualifiedNodeInterfaceName));
    stringBuffer.append(TEXT_62);
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genNode));
    stringBuffer.append(TEXT_63);
    
	List genChildNodes = genNode.getChildNodes();
	for (int j = 0; j < genChildNodes.size(); j++) {
		GenChildNode genChildNode = (GenChildNode) genChildNodes.get(j);
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedChildNodeInterfaceName = genChildNode.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_64);
    stringBuffer.append(semanticChildNodeInterfaceName);
    stringBuffer.append(TEXT_65);
    stringBuffer.append(genChildNode.getVisualID());
    stringBuffer.append(TEXT_66);
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
    stringBuffer.append(TEXT_67);
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genChildNode));
    stringBuffer.append(TEXT_68);
    	}
}

    stringBuffer.append(TEXT_69);
    
for (int i = 0; i < genLinks.size(); i++) {
	GenLink genLink = (GenLink) genLinks.get(i);
	if (genLink instanceof GenLinkWithClass) {
		GenLinkWithClass genLinkWithClass = (GenLinkWithClass) genLink;
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getClassifierAccessorName();
		String qualifiedInterfaceName = genLinkWithClass.getDomainMetaClass().getQualifiedInterfaceName();

    stringBuffer.append(TEXT_70);
    stringBuffer.append(semanticLinkInterfaceName);
    stringBuffer.append(TEXT_71);
    stringBuffer.append(genLinkWithClass.getVisualID());
    stringBuffer.append(TEXT_72);
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_73);
    stringBuffer.append(importManager.getImportedName(PartSelectorUtil.getPartSelectorsFullClassName(genDiagram)) + "." + PartSelectorUtil.getPartSelectorMethodName(genLinkWithClass));
    stringBuffer.append(TEXT_74);
    
	}
}

    stringBuffer.append(TEXT_75);
d212 1
a212 1
    stringBuffer.append(TEXT_76);
@


1.7
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d81 15
a95 12
  protected final String TEXT_62 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_63 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_64 = "_";
  protected final String TEXT_65 = "(";
  protected final String TEXT_66 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_67 = NL + "\t";
  protected final String TEXT_68 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isConnector";
  protected final String TEXT_69 = "_";
  protected final String TEXT_70 = "(";
  protected final String TEXT_71 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_72 = NL + "\t" + NL + "}";
  protected final String TEXT_73 = NL;
d289 2
d298 1
a298 1
    stringBuffer.append(TEXT_63);
d300 1
a300 1
    stringBuffer.append(TEXT_64);
d302 1
a302 1
    stringBuffer.append(TEXT_65);
d304 3
a306 1
    stringBuffer.append(TEXT_66);
d310 1
a310 1
    stringBuffer.append(TEXT_67);
d319 1
a319 1
    stringBuffer.append(TEXT_68);
d321 1
a321 1
    stringBuffer.append(TEXT_69);
d323 1
a323 1
    stringBuffer.append(TEXT_70);
d325 3
a327 1
    stringBuffer.append(TEXT_71);
d332 1
a332 1
    stringBuffer.append(TEXT_72);
d334 1
a334 1
    stringBuffer.append(TEXT_73);
@


1.6
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@d22 71
a92 72
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.notation.Diagram;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
  protected final String TEXT_4 = ".*;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ViewProvider extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);" + NL + "\t\tif (\"";
  protected final String TEXT_6 = "\".equals(diagramKind) && isDiagram";
  protected final String TEXT_7 = "_";
  protected final String TEXT_8 = "((";
  protected final String TEXT_9 = ") semanticElement)) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_11 = NL + "\t\tif (";
  protected final String TEXT_12 = ".eINSTANCE.get";
  protected final String TEXT_13 = "().equals(semanticType) && isConnector";
  protected final String TEXT_14 = "_";
  protected final String TEXT_15 = "((";
  protected final String TEXT_16 = ") semanticElement)) {";
  protected final String TEXT_17 = NL + "\t\t\tif (\"";
  protected final String TEXT_18 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ";
  protected final String TEXT_19 = ".class;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_20 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_21 = NL + "\t\t\treturn null;" + NL + "\t\t}";
  protected final String TEXT_22 = NL + "\t\tboolean isTopLevel = containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0);" + NL + "\t\tif (isTopLevel) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_23 = NL + "\t\tif (";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "().equals(semanticType) && isNode";
  protected final String TEXT_26 = "_";
  protected final String TEXT_27 = "((";
  protected final String TEXT_28 = ") semanticElement)) {";
  protected final String TEXT_29 = NL + "\t\t\tif (";
  protected final String TEXT_30 = ".";
  protected final String TEXT_31 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_32 = NL + "\t\t\tif (\"";
  protected final String TEXT_33 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_34 = NL + "\t\t\treturn ";
  protected final String TEXT_35 = ".class;" + NL + "\t\t}";
  protected final String TEXT_36 = NL + "\t\treturn getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_37 = NL + "\t\tif (";
  protected final String TEXT_38 = ".eINSTANCE.get";
  protected final String TEXT_39 = "().equals(semanticType) && isChildNode";
  protected final String TEXT_40 = "_";
  protected final String TEXT_41 = "((";
  protected final String TEXT_42 = ") semanticElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_43 = ".class;" + NL + "\t\t}";
  protected final String TEXT_44 = NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_45 = NL + "\t\tif (";
  protected final String TEXT_46 = ".eINSTANCE.get";
  protected final String TEXT_47 = "().equals(semanticType) && isConnector";
  protected final String TEXT_48 = "_";
  protected final String TEXT_49 = "((";
  protected final String TEXT_50 = ") semanticElement)) {";
  protected final String TEXT_51 = NL + "\t\t\tif (\"";
  protected final String TEXT_52 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}" + NL + "\t\t\tif (\"";
  protected final String TEXT_53 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn null;" + NL + "\t\t\t}";
  protected final String TEXT_54 = NL + "\t\t\treturn ";
  protected final String TEXT_55 = ".class;" + NL + "\t\t}";
  protected final String TEXT_56 = NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_57 = "_";
  protected final String TEXT_58 = "(";
  protected final String TEXT_59 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_60 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_61 = "_";
  protected final String TEXT_62 = "(";
  protected final String TEXT_63 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_64 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_65 = "_";
  protected final String TEXT_66 = "(";
  protected final String TEXT_67 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_68 = NL + "\t";
  protected final String TEXT_69 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isConnector";
  protected final String TEXT_70 = "_";
  protected final String TEXT_71 = "(";
  protected final String TEXT_72 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_73 = NL + "\t" + NL + "}";
  protected final String TEXT_74 = NL;
d104 1
a104 1
    stringBuffer.append(genDiagram.getEditProvidersPackageName());
d106 1
a106 1
    importManager.markImportLocation(stringBuffer);
d108 1
a108 1
    stringBuffer.append(genModel.getModelName());
d110 1
a110 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d112 1
a112 1
    stringBuffer.append(genDiagram.getVisualID());
a113 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_9);
d118 1
a118 1
    stringBuffer.append(TEXT_10);
d128 2
d131 1
a131 1
    stringBuffer.append(semanticPackageInterfaceName);
d135 1
a135 1
    stringBuffer.append(semanticLinkInterfaceName);
d137 1
a137 1
    stringBuffer.append(genLinkWithClass.getVisualID());
a138 2
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_16);
d144 2
d147 1
a147 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
d149 1
a149 1
    stringBuffer.append(AccessUtil.getLinkLabelViewFactoryClassName(label));
d151 1
a151 1
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
a152 2
    		}
    stringBuffer.append(TEXT_21);
d157 1
a157 1
    stringBuffer.append(TEXT_22);
d165 2
d168 1
a168 1
    stringBuffer.append(semanticPackageInterfaceName);
d172 1
a172 1
    stringBuffer.append(semanticNodeInterfaceName);
d174 1
a174 1
    stringBuffer.append(genNode.getVisualID());
a175 2
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_28);
d178 1
a178 1
		String semanticHintsQualifiedClassName = genDiagram.getEditProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
d181 2
d184 1
a184 1
    stringBuffer.append(semanticHintsClassName);
a185 2
    stringBuffer.append(AccessUtil.getNameSemanticHint(genNode));
    stringBuffer.append(TEXT_31);
d191 2
d194 1
a194 1
    stringBuffer.append(genChildContainer.getGroupID());
d196 1
a196 1
    	}
a197 2
    stringBuffer.append(genNode.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_35);
d201 1
a201 1
    stringBuffer.append(TEXT_36);
d211 2
d214 1
a214 1
    stringBuffer.append(semanticPackageInterfaceName);
d218 1
a218 1
    stringBuffer.append(semanticChildNodeInterfaceName);
d220 1
a220 1
    stringBuffer.append(genChildNode.getVisualID());
d222 1
a222 1
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
a223 2
    stringBuffer.append(genChildNode.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_43);
d227 1
a227 1
    stringBuffer.append(TEXT_44);
d236 2
d239 1
a239 1
    stringBuffer.append(semanticPackageInterfaceName);
d243 1
a243 1
    stringBuffer.append(semanticLinkInterfaceName);
d245 1
a245 1
    stringBuffer.append(genLinkWithClass.getVisualID());
a246 2
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_50);
d253 2
d256 1
a256 1
    stringBuffer.append(AccessUtil.getLinkLabelViewName(label));
d258 1
a258 1
    stringBuffer.append(AccessUtil.getLinkLabelTextViewName(label));
d260 1
a260 1
    		}
a261 2
    stringBuffer.append(genLink.getNotationViewFactoryClassName());
    stringBuffer.append(TEXT_55);
d266 2
d269 1
a269 1
    stringBuffer.append(genDiagram.getDomainDiagramElement().getClassifierAccessorName());
d271 1
a271 1
    stringBuffer.append(genDiagram.getVisualID());
a272 2
    stringBuffer.append(importManager.getImportedName(genDiagram.getDomainDiagramElement().getQualifiedInterfaceName()));
    stringBuffer.append(TEXT_59);
d279 2
d282 1
a282 1
    stringBuffer.append(semanticNodeInterfaceName);
d284 1
a284 1
    stringBuffer.append(genNode.getVisualID());
a285 2
    stringBuffer.append(importManager.getImportedName(qualifiedNodeInterfaceName));
    stringBuffer.append(TEXT_63);
d293 2
d296 1
a296 1
    stringBuffer.append(semanticChildNodeInterfaceName);
d298 1
a298 1
    stringBuffer.append(genChildNode.getVisualID());
a299 2
    stringBuffer.append(importManager.getImportedName(qualifiedChildNodeInterfaceName));
    stringBuffer.append(TEXT_67);
d303 1
a303 1
    stringBuffer.append(TEXT_68);
d312 2
d315 1
a315 1
    stringBuffer.append(semanticLinkInterfaceName);
d317 1
a317 1
    stringBuffer.append(genLinkWithClass.getVisualID());
a318 2
    stringBuffer.append(importManager.getImportedName(qualifiedInterfaceName));
    stringBuffer.append(TEXT_72);
d323 2
a325 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_74);
@


1.5
log
@temp fix for inner elements
@
text
@d29 1
a29 1
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tboolean isTopLevel = containerView instanceof Diagram || (semanticHint != null && semanticHint.length() > 0);" + NL + "\t\tif (isTopLevel) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
d32 1
a32 1
  protected final String TEXT_13 = "().equals(semanticType) && isNode";
d36 58
a93 42
  protected final String TEXT_17 = NL + "\t\t\tif (";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_20 = NL + "\t\t\tif (\"";
  protected final String TEXT_21 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_22 = NL + "\t\t\treturn ";
  protected final String TEXT_23 = ".class;" + NL + "\t\t}";
  protected final String TEXT_24 = NL + "\t\treturn getUnrecognizedTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_25 = NL + "\t\tif (";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "().equals(semanticType) && isChildNode";
  protected final String TEXT_28 = "_";
  protected final String TEXT_29 = "((";
  protected final String TEXT_30 = ") semanticElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_31 = ".class;" + NL + "\t\t}";
  protected final String TEXT_32 = NL + "\t\treturn getUnrecognizedChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedChildNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
  protected final String TEXT_33 = NL + "\t\tif (";
  protected final String TEXT_34 = ".eINSTANCE.get";
  protected final String TEXT_35 = "().equals(semanticType) && isConnector";
  protected final String TEXT_36 = "_";
  protected final String TEXT_37 = "((";
  protected final String TEXT_38 = ") semanticElement)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_39 = ".class;" + NL + "\t\t}";
  protected final String TEXT_40 = NL + "\t\treturn getUnrecognizedConnectorViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\t private Class getUnrecognizedConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t \t// Handle unrecognized child node classes here" + NL + "\t \treturn null;" + NL + "\t }" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isDiagram";
  protected final String TEXT_41 = "_";
  protected final String TEXT_42 = "(";
  protected final String TEXT_43 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_44 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isNode";
  protected final String TEXT_45 = "_";
  protected final String TEXT_46 = "(";
  protected final String TEXT_47 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_48 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isChildNode";
  protected final String TEXT_49 = "_";
  protected final String TEXT_50 = "(";
  protected final String TEXT_51 = " element) {" + NL + "\t\treturn true;" + NL + "\t}" + NL;
  protected final String TEXT_52 = NL + "\t";
  protected final String TEXT_53 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean isConnector";
  protected final String TEXT_54 = "_";
  protected final String TEXT_55 = "(";
  protected final String TEXT_56 = " element) {" + NL + "\t\treturn true;" + NL + "\t}";
  protected final String TEXT_57 = NL + "\t" + NL + "}";
  protected final String TEXT_58 = NL;
d123 39
d168 1
a168 1
    stringBuffer.append(TEXT_11);
d170 1
a170 1
    stringBuffer.append(TEXT_12);
d172 1
a172 1
    stringBuffer.append(TEXT_13);
d174 1
a174 1
    stringBuffer.append(TEXT_14);
d176 1
a176 1
    stringBuffer.append(TEXT_15);
d178 1
a178 1
    stringBuffer.append(TEXT_16);
d184 1
a184 1
    stringBuffer.append(TEXT_17);
d186 1
a186 1
    stringBuffer.append(TEXT_18);
d188 1
a188 1
    stringBuffer.append(TEXT_19);
d194 1
a194 1
    stringBuffer.append(TEXT_20);
d196 1
a196 1
    stringBuffer.append(TEXT_21);
d198 1
a198 1
    stringBuffer.append(TEXT_22);
d200 1
a200 1
    stringBuffer.append(TEXT_23);
d204 1
a204 1
    stringBuffer.append(TEXT_24);
d214 1
a214 1
    stringBuffer.append(TEXT_25);
d216 1
a216 1
    stringBuffer.append(TEXT_26);
d218 1
a218 1
    stringBuffer.append(TEXT_27);
d220 1
a220 1
    stringBuffer.append(TEXT_28);
d222 1
a222 1
    stringBuffer.append(TEXT_29);
d224 1
a224 1
    stringBuffer.append(TEXT_30);
d226 1
a226 1
    stringBuffer.append(TEXT_31);
d230 1
a230 1
    stringBuffer.append(TEXT_32);
a231 1
List genLinks = genDiagram.getLinks();
d239 1
a239 1
    stringBuffer.append(TEXT_33);
d241 1
a241 1
    stringBuffer.append(TEXT_34);
d243 1
a243 1
    stringBuffer.append(TEXT_35);
d245 1
a245 1
    stringBuffer.append(TEXT_36);
d247 1
a247 1
    stringBuffer.append(TEXT_37);
d249 14
a262 1
    stringBuffer.append(TEXT_38);
d264 1
a264 1
    stringBuffer.append(TEXT_39);
d269 1
a269 1
    stringBuffer.append(TEXT_40);
d271 1
a271 1
    stringBuffer.append(TEXT_41);
d273 1
a273 1
    stringBuffer.append(TEXT_42);
d275 1
a275 1
    stringBuffer.append(TEXT_43);
d282 1
a282 1
    stringBuffer.append(TEXT_44);
d284 1
a284 1
    stringBuffer.append(TEXT_45);
d286 1
a286 1
    stringBuffer.append(TEXT_46);
d288 1
a288 1
    stringBuffer.append(TEXT_47);
d296 1
a296 1
    stringBuffer.append(TEXT_48);
d298 1
a298 1
    stringBuffer.append(TEXT_49);
d300 1
a300 1
    stringBuffer.append(TEXT_50);
d302 1
a302 1
    stringBuffer.append(TEXT_51);
d306 1
a306 1
    stringBuffer.append(TEXT_52);
d315 1
a315 1
    stringBuffer.append(TEXT_53);
d317 1
a317 1
    stringBuffer.append(TEXT_54);
d319 1
a319 1
    stringBuffer.append(TEXT_55);
d321 1
a321 1
    stringBuffer.append(TEXT_56);
d326 1
a326 1
    stringBuffer.append(TEXT_57);
d328 1
a328 1
    stringBuffer.append(TEXT_58);
@


1.4
log
@[ashatalin]
#111773 Multiple views for single domain metaelement based on it's state
#111782 Support same metaelement both as top-level and inner diagram element
@
text
@d29 1
a29 1
  protected final String TEXT_10 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tboolean isTopLevel = containerView instanceof Diagram;" + NL + "\t\tif (isTopLevel) {" + NL + "\t\t\treturn getTopLevelNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t} else {" + NL + "\t\t\treturn getChildNodeViewClass(semanticAdapter, containerView, semanticHint);" + NL + "\t\t}" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Class getTopLevelNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);" + NL + "\t\tEObject semanticElement = getSemanticElement(semanticAdapter);";
@


1.3
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EClass;" + NL + "import org.eclipse.gmf.runtime.diagram.core.providers.AbstractViewProvider;" + NL + "import org.eclipse.gmf.runtime.diagram.ui.view.factories.*;" + NL + "import org.eclipse.gmf.runtime.notation.View;" + NL + "import ";
d24 54
a77 24
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ViewProvider extends AbstractViewProvider {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getDiagramViewClass(IAdaptable semanticAdapter, String diagramKind) {" + NL + "\t\tif (\"";
  protected final String TEXT_6 = "\".equals(diagramKind)) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL;
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);";
  protected final String TEXT_8 = NL + "\t\tif (";
  protected final String TEXT_9 = ".eINSTANCE.get";
  protected final String TEXT_10 = "().equals(semanticType)) {";
  protected final String TEXT_11 = NL + "\t\t\tif (";
  protected final String TEXT_12 = ".";
  protected final String TEXT_13 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_14 = NL + "\t\t\tif (\"";
  protected final String TEXT_15 = "\".equals(semanticHint)) {" + NL + "\t\t\t\treturn ListCompartmentViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_16 = NL + "\t\t\treturn ";
  protected final String TEXT_17 = ".class;" + NL + "\t\t}";
  protected final String TEXT_18 = NL + "\t\tif (";
  protected final String TEXT_19 = ".eINSTANCE.get";
  protected final String TEXT_20 = "().equals(semanticType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_21 = ".class;" + NL + "\t\t}";
  protected final String TEXT_22 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);";
  protected final String TEXT_23 = NL + "\t\tif (";
  protected final String TEXT_24 = ".eINSTANCE.get";
  protected final String TEXT_25 = "().equals(semanticType)) {" + NL + "\t\t\treturn ";
  protected final String TEXT_26 = ".class;" + NL + "\t\t}";
  protected final String TEXT_27 = NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_28 = NL;
d95 6
d105 1
a105 1
    stringBuffer.append(TEXT_7);
d110 2
a111 1
	String semanticNodeInterfaceName = genNode.getDomainMetaClass().getName();
d113 1
a113 1
    stringBuffer.append(TEXT_8);
d115 3
a117 1
    stringBuffer.append(TEXT_9);
d119 5
a123 1
    stringBuffer.append(TEXT_10);
d129 1
a129 1
    stringBuffer.append(TEXT_11);
d131 1
a131 1
    stringBuffer.append(TEXT_12);
d133 1
a133 1
    stringBuffer.append(TEXT_13);
d139 1
a139 1
    stringBuffer.append(TEXT_14);
d141 1
a141 1
    stringBuffer.append(TEXT_15);
d143 1
a143 1
    stringBuffer.append(TEXT_16);
d145 5
a149 1
    stringBuffer.append(TEXT_17);
d151 2
d156 2
a157 1
		String semanticChildNodeInterfaceName = genChildNode.getDomainMetaClass().getName();
d159 1
a159 1
    stringBuffer.append(TEXT_18);
d161 3
a163 1
    stringBuffer.append(TEXT_19);
d165 5
a169 1
    stringBuffer.append(TEXT_20);
d171 1
a171 1
    stringBuffer.append(TEXT_21);
d175 1
a175 1
    stringBuffer.append(TEXT_22);
d182 2
a183 1
		String semanticLinkInterfaceName = genLinkWithClass.getDomainMetaClass().getName();
d185 1
a185 1
    stringBuffer.append(TEXT_23);
d187 3
a189 1
    stringBuffer.append(TEXT_24);
d191 5
a195 1
    stringBuffer.append(TEXT_25);
d197 58
a254 1
    stringBuffer.append(TEXT_26);
d259 1
a259 1
    stringBuffer.append(TEXT_27);
d261 1
a261 1
    stringBuffer.append(TEXT_28);
@


1.2
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d53 1
a53 1
    GenModel genModel = genDiagram.getEmfGenModel();
d66 1
a66 1
GenPackage genPackage = genDiagram.getEmfGenModel().findGenPackage(genDiagram.getDomainMetaModel());
@


1.1
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d3 1
a3 1
import org.eclipse.emf.common.util.EList;
d25 23
a47 11
  protected final String TEXT_6 = "\".equals(diagramKind)) { //$NON-NLS-1$" + NL + "\t\t\treturn DiagramViewFactory.class;" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getNodeViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\tEClass semanticType = getSemanticEClass(semanticAdapter);";
  protected final String TEXT_7 = NL + "\t\tif (";
  protected final String TEXT_8 = ".eINSTANCE.get";
  protected final String TEXT_9 = "().equals(semanticType)) {";
  protected final String TEXT_10 = NL + "\t\t\tif (";
  protected final String TEXT_11 = ".";
  protected final String TEXT_12 = ".equals(semanticHint)) {" + NL + "\t\t\t\treturn BasicNodeViewFactory.class;" + NL + "\t\t\t}";
  protected final String TEXT_13 = NL + "\t\t\treturn ";
  protected final String TEXT_14 = ".class;" + NL + "\t\t}";
  protected final String TEXT_15 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected Class getConnectorViewClass(IAdaptable semanticAdapter, View containerView, String semanticHint) {" + NL + "\t\treturn null;" + NL + "\t}" + NL + "}";
  protected final String TEXT_16 = NL;
d68 4
a71 1
EList genNodes = genDiagram.getNodes();
d76 1
a76 1
    stringBuffer.append(TEXT_7);
d78 1
a78 1
    stringBuffer.append(TEXT_8);
d80 1
a80 1
    stringBuffer.append(TEXT_9);
d82 3
a84 3
		if (genNode.hasNameToEdit()) {
			String semanticHintsQualifiedClassName = genDiagram.getEditProvidersPackageName() + '.' + AccessUtil.getSemanticHintsClassName(genNode);
			String semanticHintsClassName = importManager.getImportedName(semanticHintsQualifiedClassName);
d86 1
a86 1
    stringBuffer.append(TEXT_10);
d88 1
a88 1
    stringBuffer.append(TEXT_11);
a89 2
    stringBuffer.append(TEXT_12);
    		}
d91 5
a95 1
    stringBuffer.append(genNode.getNotationViewFactoryClassName());
d97 1
a97 1
    }
d99 41
d141 1
a141 1
    stringBuffer.append(TEXT_16);
@

