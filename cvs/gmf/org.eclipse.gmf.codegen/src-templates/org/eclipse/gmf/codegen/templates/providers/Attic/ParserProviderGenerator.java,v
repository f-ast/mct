head	1.34;
access;
symbols
	v20081022-1925:1.34
	v20081015-1925:1.34
	v20081008-1925:1.34
	v20081001-1925:1.34
	v20080924-1925:1.34
	v20080917-1925:1.34
	v20080911-1728:1.34
	v20080910-1520:1.34
	v20080903-1520:1.34
	v20080827-1520:1.34
	v20080813-1520:1.34
	v20080806-1520:1.34
	v20070427-0600:1.33
	v20070420-1000:1.32
	v20070413-1300:1.32
	v20070405-1100:1.32
	v20070403-1500:1.32
	v20070330-1300:1.32
	v20060330-1300:1.32
	v20070322-1100:1.32
	v20060316-0600:1.32
	v20070307-0700:1.32
	v20070301-1200:1.32
	v20070228-2000:1.32
	v20070221-1500:1.32
	v20070208-1800:1.32
	v20070202-0200:1.30
	v20070103-0300:1.32
	M4_20:1.32
	v20061222-1800:1.32
	v20061218-1200:1.32
	v20061214-0000:1.32
	v20061120-1300:1.32
	M3_20:1.32
	v20061117-0800:1.32
	v20061027-1200:1.30
	v20061020-1000:1.30
	v20061013-1330:1.31
	v20060919-0800:1.30
	v20060907-1100:1.30
	M1_20:1.30
	v20060904-1500:1.30
	v20060824-1600:1.30
	v20060817-1500:1.30
	v20060728-0500:1.30
	v20060713-1700:1.30
	R1_0_maintenance:1.30.0.2
	R1_0:1.30
	v20060627-1200:1.30
	v20060626-1420:1.30
	v20060620-0400:1.30
	v20060616-1400:1.30
	v20060616-1200:1.30
	v20060609-1400:1.30
	v20060531-1730:1.26
	v20060530-1930:1.26
	v20060526-1200:1.25
	v20060519-1300:1.25
	v20060519-0800:1.25
	v20060512-1000:1.23
	I20060512-1000:1.23
	I20060505-1400:1.22
	I20060428-1300:1.22
	I20060424-0500:1.22
	I20060424-0300:1.22
	M6_10:1.20
	I20060407-1200:1.15
	I20060331-1000:1.14
	I20060324-0300:1.14
	I20060317-1300:1.14
	I20060317-1200:1.14
	I20060316-1300:1.14
	I20060309-1300:1.14
	M5_10:1.12
	S20060303-1600:1.12
	I20060227-1730:1.11
	I20060216-1945:1.11
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.2
	I20060202-1415:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.34
date	2007.04.27.11.00.33;	author dstadnik;	state dead;
branches;
next	1.33;
commitid	23d34631d7d04567;

1.33
date	2007.04.24.08.57.56;	author dstadnik;	state Exp;
branches;
next	1.32;
commitid	78b462dc68e4567;

1.32
date	2006.10.18.14.21.47;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.09.22.17.45.47;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.06.07.09.29.01;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.01.12.42.51;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.06.01.09.14.34;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.05.29.18.20.56;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.05.18.13.58.29;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.05.15.17.18.15;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.04.20.21.24.27;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2006.04.20.20.37.16;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.04.13.12.39.59;	author ashatalin;	state Exp;
branches;
next	1.19;

1.19
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.18;

1.18
date	2006.04.08.17.19.56;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2006.04.08.16.56.37;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.04.08.11.41.50;	author dstadnik;	state dead;
branches;
next	1.15;

1.15
date	2006.04.07.14.49.25;	author ashatalin;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.07.15.45.28;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.07.14.09.19;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.03.09.05.59;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.02.15.13.27.40;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.14.13.06.38;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.09.16.16.00;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.06.13.14.41;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.06.11.52.36;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.06.11.00.20;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.03.12.38.15;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.34
log
@rewrite ParserProvider in xpand
@
text
@package org.eclipse.gmf.codegen.templates.providers;

import java.util.*;
import org.eclipse.emf.codegen.ecore.genmodel.*;
import org.eclipse.gmf.codegen.gmfgen.*;
import org.eclipse.gmf.common.codegen.*;

public class ParserProviderGenerator
{
  protected static String nl;
  public static synchronized ParserProviderGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ParserProviderGenerator result = new ParserProviderGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
  protected final String TEXT_3 = NL + " */";
  protected final String TEXT_4 = NL + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_5 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_6 = " extends AbstractProvider implements IParserProvider {";
  protected final String TEXT_7 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser ";
  protected final String TEXT_8 = ";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser get";
  protected final String TEXT_9 = "() {" + NL + "\t\tif (";
  protected final String TEXT_10 = " == null) {" + NL + "\t\t\t";
  protected final String TEXT_11 = " = create";
  protected final String TEXT_12 = "();" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_13 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser create";
  protected final String TEXT_14 = "() {";
  protected final String TEXT_15 = NL + "\t\t";
  protected final String TEXT_16 = " parser = new ";
  protected final String TEXT_17 = "(";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "());";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = " features = new ";
  protected final String TEXT_22 = "(";
  protected final String TEXT_23 = ");";
  protected final String TEXT_24 = NL + "\t\tfeatures.add(";
  protected final String TEXT_25 = ".eINSTANCE.get";
  protected final String TEXT_26 = "());";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = " parser = new ";
  protected final String TEXT_29 = "(features);";
  protected final String TEXT_30 = NL + "\t\tparser.setViewPattern(\"";
  protected final String TEXT_31 = "\");";
  protected final String TEXT_32 = NL + "\t\tparser.setEditPattern(\"";
  protected final String TEXT_33 = "\");";
  protected final String TEXT_34 = NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_35 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(int visualID) {" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_36 = NL + "\t\t\tcase ";
  protected final String TEXT_37 = ".VISUAL_ID:" + NL + "\t\t\t\treturn get";
  protected final String TEXT_38 = "();";
  protected final String TEXT_39 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString vid = (String) hint.getAdapter(String.class);" + NL + "\t\tif (vid != null) {" + NL + "\t\t\treturn getParser(";
  protected final String TEXT_40 = ".getVisualID(vid));" + NL + "\t\t}" + NL + "\t\tView view = (View) hint.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getParser(";
  protected final String TEXT_41 = ".getVisualID(view));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetParserOperation) operation).getHint();" + NL + "\t\t\tif (";
  protected final String TEXT_42 = ".getElement(hint) == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn getParser(hint) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_43 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
final ImportAssistant importManager = (ImportAssistant) ((Object[]) argument)[1];

    stringBuffer.append(TEXT_1);
    
String copyrightText = genDiagram.getEditorGen().getCopyrightText();
if (copyrightText != null && copyrightText.trim().length() > 0) {

    stringBuffer.append(TEXT_2);
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
    stringBuffer.append(TEXT_3);
    }
    importManager.emitPackageStatement(stringBuffer);
    stringBuffer.append(TEXT_4);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(genDiagram.getParserProviderClassName());
    stringBuffer.append(TEXT_6);
    
Map labelMethodNames = new LinkedHashMap(); // GenCommonBase -> String
for (Iterator contents = genDiagram.eAllContents(); contents.hasNext(); ) {
	Object next = contents.next();
	GenCommonBase genHost, genLabel;
	LabelModelFacet modelFacet;
	if (next instanceof GenLabel) {
		genLabel = (GenCommonBase) next;
		if (genLabel instanceof GenNodeLabel) {
			genHost = ((GenNodeLabel) genLabel).getNode();
		} else if (genLabel instanceof GenLinkLabel) {
			genHost = ((GenLinkLabel) genLabel).getLink();
		} else {
			throw new IllegalArgumentException("Unknown label type: " + genLabel);
		}
		modelFacet = ((GenLabel) genLabel).getModelFacet();
	} else if (next instanceof GenChildLabelNode) {
		genLabel = (GenCommonBase) next;
		genHost = genLabel;
		modelFacet = ((GenChildLabelNode) genLabel).getLabelModelFacet();
	} else {
		continue; // not a label
	}
	if (!(modelFacet instanceof FeatureLabelModelFacet)) {
		continue; // custom parser
	}
	String baseName = genLabel.getUniqueIdentifier();
	if (genHost.getClassNamePrefix() != null && genHost.getClassNamePrefix().length() > 0) {
		baseName = genHost.getClassNamePrefix() + baseName;
	}
	char c = baseName.charAt(0);
	baseName = baseName.substring(1) + "Parser";
	String fieldName = Character.toLowerCase(c) + baseName;
	String methodName = Character.toUpperCase(c) + baseName;
	labelMethodNames.put(genLabel, methodName);

    stringBuffer.append(TEXT_7);
    stringBuffer.append(fieldName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(methodName);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(fieldName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(fieldName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(methodName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(fieldName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(methodName);
    stringBuffer.append(TEXT_14);
    
		String parserClassName;
		String viewPattern = ((FeatureLabelModelFacet) modelFacet).getViewPattern();
		String editPattern = ((FeatureLabelModelFacet) modelFacet).getEditPattern();
		List<GenFeature> features = ((FeatureLabelModelFacet) modelFacet).getMetaFeatures();
		if (features.size() == 1) {
			parserClassName = importManager.getImportedName(genDiagram.getStructuralFeatureParserQualifiedClassName());
			GenFeature genFeature = features.get(0);
			String semanticPackageInterfaceName = importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_15);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(genFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_19);
    
		} else {
			parserClassName = importManager.getImportedName(genDiagram.getStructuralFeaturesParserQualifiedClassName());

    stringBuffer.append(TEXT_20);
    stringBuffer.append(importManager.getImportedName("java.util.List"));
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(features.size());
    stringBuffer.append(TEXT_23);
    
			for (GenFeature genFeature : features) {
				String semanticPackageInterfaceName = importManager.getImportedName(genFeature.getGenPackage().getQualifiedPackageInterfaceName());

    stringBuffer.append(TEXT_24);
    stringBuffer.append(semanticPackageInterfaceName);
    stringBuffer.append(TEXT_25);
    stringBuffer.append(genFeature.getFeatureAccessorName());
    stringBuffer.append(TEXT_26);
    			}
    stringBuffer.append(TEXT_27);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_29);
    
		}
		if (viewPattern != null && viewPattern.length() != 0) {

    stringBuffer.append(TEXT_30);
    stringBuffer.append(viewPattern);
    stringBuffer.append(TEXT_31);
    
		}
		if (editPattern == null || editPattern.length() == 0) {
			editPattern = viewPattern;
		}
		if (editPattern != null && editPattern.length() != 0) {

    stringBuffer.append(TEXT_32);
    stringBuffer.append(editPattern);
    stringBuffer.append(TEXT_33);
    		}
    stringBuffer.append(TEXT_34);
    }
    stringBuffer.append(TEXT_35);
    
for (Iterator it = labelMethodNames.keySet().iterator(); it.hasNext(); ) {
	GenCommonBase genLabel = (GenCommonBase) it.next();

    stringBuffer.append(TEXT_36);
    stringBuffer.append(importManager.getImportedName(genLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_37);
    stringBuffer.append(labelMethodNames.get(genLabel));
    stringBuffer.append(TEXT_38);
    }
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_41);
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
    stringBuffer.append(TEXT_42);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_43);
    return stringBuffer.toString();
  }
}
@


1.33
log
@follow consisted spacing policy
@
text
@@


1.32
log
@#161380 simplify feature model facets
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " *";
d77 1
a77 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n *"));
@


1.31
log
@do not use strings to obtain meta features
@
text
@d109 1
a109 1
	if (modelFacet == null || modelFacet instanceof DesignLabelModelFacet) {
d139 4
a142 3
		String viewPattern;
		String editPattern;
		if (modelFacet instanceof FeatureLabelModelFacet) {
d144 1
a144 3
			GenFeature genFeature = ((FeatureLabelModelFacet) modelFacet).getMetaFeature();
			viewPattern = ((FeatureLabelModelFacet) modelFacet).getViewPattern();
			editPattern = ((FeatureLabelModelFacet) modelFacet).getEditPattern();
d157 1
a157 1
		} else if (modelFacet instanceof CompositeFeatureLabelModelFacet) {
a158 3
			List features = ((CompositeFeatureLabelModelFacet) modelFacet).getMetaFeatures();
			viewPattern = ((CompositeFeatureLabelModelFacet) modelFacet).getViewPattern();
			editPattern = ((CompositeFeatureLabelModelFacet) modelFacet).getEditPattern();
d168 1
a168 2
			for (java.util.Iterator it = features.iterator(); it.hasNext(); ) {
				GenFeature genFeature = (GenFeature) it.next();
a182 2
		} else {
			throw new IllegalArgumentException("Unknown label model facet: " + modelFacet);
@


1.30
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d38 14
a51 14
  protected final String TEXT_19 = "().getEStructuralFeature(\"";
  protected final String TEXT_20 = "\")); //$NON-NLS-1$";
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = " features = new ";
  protected final String TEXT_23 = "(";
  protected final String TEXT_24 = ");";
  protected final String TEXT_25 = NL + "\t\tfeatures.add(";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "().getEStructuralFeature(\"";
  protected final String TEXT_28 = "\")); //$NON-NLS-1$";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = " parser = new ";
  protected final String TEXT_31 = "(features);";
  protected final String TEXT_32 = NL + "\t\tparser.setViewPattern(\"";
d53 10
a62 12
  protected final String TEXT_34 = NL + "\t\tparser.setEditPattern(\"";
  protected final String TEXT_35 = "\");";
  protected final String TEXT_36 = NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(int visualID) {" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_38 = NL + "\t\t\tcase ";
  protected final String TEXT_39 = ".VISUAL_ID:" + NL + "\t\t\t\treturn get";
  protected final String TEXT_40 = "();";
  protected final String TEXT_41 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString vid = (String) hint.getAdapter(String.class);" + NL + "\t\tif (vid != null) {" + NL + "\t\t\treturn getParser(";
  protected final String TEXT_42 = ".getVisualID(vid));" + NL + "\t\t}" + NL + "\t\tView view = (View) hint.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getParser(";
  protected final String TEXT_43 = ".getVisualID(view));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetParserOperation) operation).getHint();" + NL + "\t\t\tif (";
  protected final String TEXT_44 = ".getElement(hint) == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn getParser(hint) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_45 = NL;
d155 1
a155 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
a156 2
    stringBuffer.append(genFeature.getName());
    stringBuffer.append(TEXT_20);
d164 2
d167 1
a167 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d169 1
a169 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
a170 2
    stringBuffer.append(features.size());
    stringBuffer.append(TEXT_24);
d176 2
d179 1
a179 1
    stringBuffer.append(semanticPackageInterfaceName);
d181 1
a181 1
    stringBuffer.append(genFeature.getGenClass().getClassifierAccessorName());
d183 1
a183 1
    stringBuffer.append(genFeature.getName());
d185 1
a185 1
    			}
a186 4
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_30);
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_31);
d193 1
a193 1
    stringBuffer.append(TEXT_32);
d195 1
a195 1
    stringBuffer.append(TEXT_33);
d203 1
a203 1
    stringBuffer.append(TEXT_34);
d205 1
a205 1
    stringBuffer.append(TEXT_35);
d207 1
a207 1
    stringBuffer.append(TEXT_36);
d209 1
a209 1
    stringBuffer.append(TEXT_37);
d214 1
a214 1
    stringBuffer.append(TEXT_38);
d216 1
a216 1
    stringBuffer.append(TEXT_39);
d218 1
a218 1
    stringBuffer.append(TEXT_40);
d220 1
a220 1
    stringBuffer.append(TEXT_41);
d222 1
a222 1
    stringBuffer.append(TEXT_42);
d224 1
a224 1
    stringBuffer.append(TEXT_43);
d226 1
a226 1
    stringBuffer.append(TEXT_44);
d228 1
a228 1
    stringBuffer.append(TEXT_45);
@


1.29
log
@provide Node/Link/Label/Diagram class prefix instead of Unknown for elements without model facet; add extra empty values checks
@
text
@d111 1
a111 1
	if (modelFacet == null) {
@


1.28
log
@regenerated source files with non-nls markers
@
text
@d114 4
a117 1
	String baseName = genHost.getClassNamePrefix() + genLabel.getUniqueIdentifier();
@


1.27
log
@header comment should not be a javadoc comment
@
text
@d39 1
a39 1
  protected final String TEXT_20 = "\"));";
d47 1
a47 1
  protected final String TEXT_28 = "\"));";
@


1.26
log
@Correcting copyright processing
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/**" + NL + " *";
@


1.25
log
@use importAssistant to emit package statement instead of handcoding
@
text
@d21 1
a21 1
  protected final String TEXT_2 = NL + "/*" + NL + " * ";
d79 1
a79 1
    stringBuffer.append(copyrightText.replaceAll("\n", "\n * "));
@


1.24
log
@#131543 Obsolete code should be eliminated
@
text
@d23 31
a53 31
  protected final String TEXT_4 = NL + "package ";
  protected final String TEXT_5 = ";" + NL;
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.notation.View;";
  protected final String TEXT_7 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_8 = " extends AbstractProvider implements IParserProvider {";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser ";
  protected final String TEXT_10 = ";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser get";
  protected final String TEXT_11 = "() {" + NL + "\t\tif (";
  protected final String TEXT_12 = " == null) {" + NL + "\t\t\t";
  protected final String TEXT_13 = " = create";
  protected final String TEXT_14 = "();" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_15 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser create";
  protected final String TEXT_16 = "() {";
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = " parser = new ";
  protected final String TEXT_19 = "(";
  protected final String TEXT_20 = ".eINSTANCE.get";
  protected final String TEXT_21 = "().getEStructuralFeature(\"";
  protected final String TEXT_22 = "\"));";
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = " features = new ";
  protected final String TEXT_25 = "(";
  protected final String TEXT_26 = ");";
  protected final String TEXT_27 = NL + "\t\tfeatures.add(";
  protected final String TEXT_28 = ".eINSTANCE.get";
  protected final String TEXT_29 = "().getEStructuralFeature(\"";
  protected final String TEXT_30 = "\"));";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = " parser = new ";
  protected final String TEXT_33 = "(features);";
  protected final String TEXT_34 = NL + "\t\tparser.setViewPattern(\"";
d55 10
a64 12
  protected final String TEXT_36 = NL + "\t\tparser.setEditPattern(\"";
  protected final String TEXT_37 = "\");";
  protected final String TEXT_38 = NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(int visualID) {" + NL + "\t\tswitch (visualID) {";
  protected final String TEXT_40 = NL + "\t\t\tcase ";
  protected final String TEXT_41 = ".VISUAL_ID:" + NL + "\t\t\t\treturn get";
  protected final String TEXT_42 = "();";
  protected final String TEXT_43 = NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString vid = (String) hint.getAdapter(String.class);" + NL + "\t\tif (vid != null) {" + NL + "\t\t\treturn getParser(";
  protected final String TEXT_44 = ".getVisualID(vid));" + NL + "\t\t}" + NL + "\t\tView view = (View) hint.getAdapter(View.class);" + NL + "\t\tif (view != null) {" + NL + "\t\t\treturn getParser(";
  protected final String TEXT_45 = ".getVisualID(view));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetParserOperation) operation).getHint();" + NL + "\t\t\tif (";
  protected final String TEXT_46 = ".getElement(hint) == null) {" + NL + "\t\t\t\treturn false;" + NL + "\t\t\t}" + NL + "\t\t\treturn getParser(hint) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_47 = NL;
d69 4
a72 1
    GenDiagram genDiagram = (GenDiagram) ((Object[]) argument)[0];
d82 1
d84 1
a84 1
    stringBuffer.append(genDiagram.getProvidersPackageName());
d86 1
a86 1
    ImportUtil importManager = new ImportUtil(genDiagram.getProvidersPackageName());
a87 4
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(genDiagram.getParserProviderClassName());
    stringBuffer.append(TEXT_8);
d121 4
d128 2
a130 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(fieldName);
a135 4
    stringBuffer.append(fieldName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(methodName);
    stringBuffer.append(TEXT_16);
d147 1
a147 1
    stringBuffer.append(TEXT_17);
d149 1
a149 1
    stringBuffer.append(TEXT_18);
d151 1
a151 1
    stringBuffer.append(TEXT_19);
d153 1
a153 1
    stringBuffer.append(TEXT_20);
d155 1
a155 1
    stringBuffer.append(TEXT_21);
d157 1
a157 1
    stringBuffer.append(TEXT_22);
d165 1
a165 1
    stringBuffer.append(TEXT_23);
d167 1
a167 1
    stringBuffer.append(TEXT_24);
d169 1
a169 1
    stringBuffer.append(TEXT_25);
d171 1
a171 1
    stringBuffer.append(TEXT_26);
d177 1
a177 1
    stringBuffer.append(TEXT_27);
d179 1
a179 1
    stringBuffer.append(TEXT_28);
d181 1
a181 1
    stringBuffer.append(TEXT_29);
d183 1
a183 1
    stringBuffer.append(TEXT_30);
d185 1
a185 1
    stringBuffer.append(TEXT_31);
d187 1
a187 1
    stringBuffer.append(TEXT_32);
d189 1
a189 1
    stringBuffer.append(TEXT_33);
d196 1
a196 1
    stringBuffer.append(TEXT_34);
d198 1
a198 1
    stringBuffer.append(TEXT_35);
d206 1
a206 1
    stringBuffer.append(TEXT_36);
d208 1
a208 1
    stringBuffer.append(TEXT_37);
d210 1
a210 1
    stringBuffer.append(TEXT_38);
d212 1
a212 1
    stringBuffer.append(TEXT_39);
d217 1
a217 1
    stringBuffer.append(TEXT_40);
d219 1
a219 1
    stringBuffer.append(TEXT_41);
d221 1
a221 1
    stringBuffer.append(TEXT_42);
d223 1
a223 1
    stringBuffer.append(TEXT_43);
d225 1
a225 1
    stringBuffer.append(TEXT_44);
d227 1
a227 1
    stringBuffer.append(TEXT_45);
d229 1
a229 1
    stringBuffer.append(TEXT_46);
d231 1
a231 1
    stringBuffer.append(TEXT_47);
@


1.23
log
@#133836 Creating a child node without a label causes error
@
text
@d64 3
a66 2
  protected final String TEXT_45 = ".getVisualID(view));" + NL + "\t\t}" + NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_46 = NL;
d230 2
d233 1
a233 1
    stringBuffer.append(TEXT_46);
@


1.22
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d25 1
a25 1
  protected final String TEXT_6 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d58 8
a65 18
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(IElementType type, int visualID) {";
  protected final String TEXT_40 = NL + "\t\tif (";
  protected final String TEXT_41 = ".";
  protected final String TEXT_42 = " == type) {";
  protected final String TEXT_43 = NL + "\t\t\treturn get";
  protected final String TEXT_44 = "();";
  protected final String TEXT_45 = NL + "\t\t\tswitch (visualID) {";
  protected final String TEXT_46 = NL + "\t\t\tcase ";
  protected final String TEXT_47 = ".VISUAL_ID: {";
  protected final String TEXT_48 = NL + "\t\t\tif (";
  protected final String TEXT_49 = ".VISUAL_ID == visualID) {";
  protected final String TEXT_50 = NL + "\t\t\t\treturn get";
  protected final String TEXT_51 = "();" + NL + "\t\t\t}";
  protected final String TEXT_52 = NL + "\t\t\t}";
  protected final String TEXT_53 = NL + "\t\t}";
  protected final String TEXT_54 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tint visualID = ";
  protected final String TEXT_55 = ".getVisualID((String) hint.getAdapter(String.class));" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\treturn getParser(type, visualID);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_56 = NL;
d90 1
a90 2
Map labels = new LinkedHashMap(); // Gen[Node|Link] -> List : GenLabel
Map labelMethodNames = new HashMap(); // GenLabel -> String
d93 2
d96 1
a96 2
		GenLabel genLabel = (GenLabel) next;
		GenCommonBase genHost;
d104 17
a120 16
		LabelModelFacet modelFacet = genLabel.getModelFacet();
		if (modelFacet == null) {
			continue; // custom parser
		}
		List labelsList = (List) labels.get(genHost);
		if (labelsList == null) {
			labelsList = new ArrayList();
			labels.put(genHost, labelsList);
		}
		labelsList.add(genLabel);
		String baseName = genHost.getClassNamePrefix() + genLabel.getUniqueIdentifier();
		char c = baseName.charAt(0);
		baseName = baseName.substring(1) + "Parser";
		String fieldName = Character.toLowerCase(c) + baseName;
		String methodName = Character.toUpperCase(c) + baseName;
		labelMethodNames.put(genLabel, methodName);
d212 1
a212 4
    
	}
}

d215 2
a216 3
for (Iterator it1 = labels.keySet().iterator(); it1.hasNext(); ) {
	GenCommonBase genHost = (GenCommonBase) it1.next();
	List labelsList = (List) labels.get(genHost);
d219 1
a219 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
d221 1
a221 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d223 1
a223 4
    
	if (genHost instanceof GenChildNode && ((GenChildNode) genHost).isListContainerEntry()) {
		GenLabel genLabel = (GenLabel) labelsList.get(0);

d225 1
a225 1
    stringBuffer.append(labelMethodNames.get(genLabel));
d227 1
a227 3
    	} else {
    		boolean generateSwitch = labelsList.size() > 1;
		if (generateSwitch) {
d229 1
a229 4
    		}
		for (Iterator it2 = labelsList.iterator(); it2.hasNext(); ) {
			GenLabel genLabel = (GenLabel) it2.next();
			if (generateSwitch) {
a230 22
    stringBuffer.append(importManager.getImportedName(genLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_47);
    			} else {
    stringBuffer.append(TEXT_48);
    stringBuffer.append(importManager.getImportedName(genLabel.getEditPartQualifiedClassName()));
    stringBuffer.append(TEXT_49);
    			}
    stringBuffer.append(TEXT_50);
    stringBuffer.append(labelMethodNames.get(genLabel));
    stringBuffer.append(TEXT_51);
    		}
		if (generateSwitch) {
    stringBuffer.append(TEXT_52);
    		}
	}
    stringBuffer.append(TEXT_53);
    }
    stringBuffer.append(TEXT_54);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
    stringBuffer.append(TEXT_55);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_56);
@


1.21
log
@#125900 Redundant annotations added to View in generated view factory
@
text
@d58 1
a58 1
  protected final String TEXT_39 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(IElementType type, String viewType) {";
d64 12
a75 7
  protected final String TEXT_45 = NL + "\t\t\tif (";
  protected final String TEXT_46 = ".getType(";
  protected final String TEXT_47 = ".VISUAL_ID).equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_48 = "();" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\t}";
  protected final String TEXT_50 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\treturn getParser(type, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_51 = NL;
d243 5
a247 2
    
	} else {
d250 1
a250 3

    stringBuffer.append(TEXT_45);
    stringBuffer.append(importManager.getImportedName(genDiagram.getVisualIDRegistryQualifiedClassName()));
d254 6
d261 5
a265 3
    stringBuffer.append(TEXT_48);
    
		}
d267 1
a267 2

    stringBuffer.append(TEXT_49);
d269 3
a271 1
    stringBuffer.append(TEXT_50);
d273 1
a273 1
    stringBuffer.append(TEXT_51);
@


1.20
log
@#125900 Redundant annotations added to View in generated view factory

semantic hint class name plroperty removed from the model.
@
text
@d65 6
a70 5
  protected final String TEXT_46 = ".VISUAL_ID.equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_47 = "();" + NL + "\t\t\t}";
  protected final String TEXT_48 = NL + "\t\t}";
  protected final String TEXT_49 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\treturn getParser(type, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_50 = NL;
d244 2
d247 1
a247 1
    stringBuffer.append(TEXT_46);
d249 1
a249 1
    stringBuffer.append(TEXT_47);
d254 1
a254 1
    stringBuffer.append(TEXT_48);
d256 1
a256 1
    stringBuffer.append(TEXT_49);
d258 1
a258 1
    stringBuffer.append(TEXT_50);
@


1.19
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d118 1
a118 1
		String baseName = genHost.getClassNamePrefix() + genLabel.getSemanticHintFieldName();
@


1.18
log
@using M6 to generate code.
@
text
@d65 5
a69 7
  protected final String TEXT_46 = ".";
  protected final String TEXT_47 = "Labels.";
  protected final String TEXT_48 = ".equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_49 = "();" + NL + "\t\t\t}";
  protected final String TEXT_50 = NL + "\t\t}";
  protected final String TEXT_51 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\treturn getParser(type, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_52 = NL;
d243 1
a243 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d245 1
a245 1
    stringBuffer.append(genHost.getUniqueIdentifier());
a246 4
    stringBuffer.append(genLabel.getSemanticHintFieldName());
    stringBuffer.append(TEXT_48);
    stringBuffer.append(labelMethodNames.get(genLabel));
    stringBuffer.append(TEXT_49);
d251 1
a251 1
    stringBuffer.append(TEXT_50);
d253 1
a253 1
    stringBuffer.append(TEXT_51);
d255 1
a255 1
    stringBuffer.append(TEXT_52);
@


1.17
log
@restore generators
@
text
@d75 1
a75 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.16
log
@#134095 do not store compiled templates in cvs
@
text
@d75 1
a75 1
    final StringBuffer stringBuffer = new StringBuffer();
@


1.15
log
@Switching to eclipse M6.
@
text
@@


1.14
log
@#130100 Allow to specify copyright text in gmfgen model
@
text
@d75 1
a75 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.13
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d20 52
a71 49
  protected final String TEXT_1 = "package ";
  protected final String TEXT_2 = ";" + NL;
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
  protected final String TEXT_4 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_5 = " extends AbstractProvider implements IParserProvider {";
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser ";
  protected final String TEXT_7 = ";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser get";
  protected final String TEXT_8 = "() {" + NL + "\t\tif (";
  protected final String TEXT_9 = " == null) {" + NL + "\t\t\t";
  protected final String TEXT_10 = " = create";
  protected final String TEXT_11 = "();" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_12 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser create";
  protected final String TEXT_13 = "() {";
  protected final String TEXT_14 = NL + "\t\t";
  protected final String TEXT_15 = " parser = new ";
  protected final String TEXT_16 = "(";
  protected final String TEXT_17 = ".eINSTANCE.get";
  protected final String TEXT_18 = "().getEStructuralFeature(\"";
  protected final String TEXT_19 = "\"));";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = " features = new ";
  protected final String TEXT_22 = "(";
  protected final String TEXT_23 = ");";
  protected final String TEXT_24 = NL + "\t\tfeatures.add(";
  protected final String TEXT_25 = ".eINSTANCE.get";
  protected final String TEXT_26 = "().getEStructuralFeature(\"";
  protected final String TEXT_27 = "\"));";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = " parser = new ";
  protected final String TEXT_30 = "(features);";
  protected final String TEXT_31 = NL + "\t\tparser.setViewPattern(\"";
  protected final String TEXT_32 = "\");";
  protected final String TEXT_33 = NL + "\t\tparser.setEditPattern(\"";
  protected final String TEXT_34 = "\");";
  protected final String TEXT_35 = NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(IElementType type, String viewType) {";
  protected final String TEXT_37 = NL + "\t\tif (";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = " == type) {";
  protected final String TEXT_40 = NL + "\t\t\treturn get";
  protected final String TEXT_41 = "();";
  protected final String TEXT_42 = NL + "\t\t\tif (";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = "Labels.";
  protected final String TEXT_45 = ".equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_46 = "();" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\treturn getParser(type, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_49 = NL;
d78 9
d88 1
a88 1
    stringBuffer.append(TEXT_2);
d90 1
a90 1
    stringBuffer.append(TEXT_3);
d92 1
a92 1
    stringBuffer.append(TEXT_4);
d94 1
a94 1
    stringBuffer.append(TEXT_5);
a126 6
    stringBuffer.append(TEXT_6);
    stringBuffer.append(fieldName);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(methodName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(fieldName);
d134 2
d137 5
a141 1
    stringBuffer.append(TEXT_13);
d153 1
a153 1
    stringBuffer.append(TEXT_14);
d155 1
a155 1
    stringBuffer.append(TEXT_15);
d157 1
a157 1
    stringBuffer.append(TEXT_16);
d159 1
a159 1
    stringBuffer.append(TEXT_17);
d161 1
a161 1
    stringBuffer.append(TEXT_18);
d163 1
a163 1
    stringBuffer.append(TEXT_19);
d171 1
a171 1
    stringBuffer.append(TEXT_20);
d173 1
a173 1
    stringBuffer.append(TEXT_21);
d175 1
a175 1
    stringBuffer.append(TEXT_22);
d177 1
a177 1
    stringBuffer.append(TEXT_23);
d183 1
a183 1
    stringBuffer.append(TEXT_24);
d185 1
a185 1
    stringBuffer.append(TEXT_25);
d187 1
a187 1
    stringBuffer.append(TEXT_26);
d189 1
a189 1
    stringBuffer.append(TEXT_27);
d191 1
a191 1
    stringBuffer.append(TEXT_28);
d193 1
a193 1
    stringBuffer.append(TEXT_29);
d195 1
a195 1
    stringBuffer.append(TEXT_30);
d202 1
a202 1
    stringBuffer.append(TEXT_31);
d204 1
a204 1
    stringBuffer.append(TEXT_32);
d212 1
a212 1
    stringBuffer.append(TEXT_33);
d214 1
a214 1
    stringBuffer.append(TEXT_34);
d216 1
a216 1
    stringBuffer.append(TEXT_35);
d221 1
a221 1
    stringBuffer.append(TEXT_36);
d227 1
a227 1
    stringBuffer.append(TEXT_37);
d229 1
a229 1
    stringBuffer.append(TEXT_38);
d231 1
a231 1
    stringBuffer.append(TEXT_39);
d236 1
a236 1
    stringBuffer.append(TEXT_40);
d238 1
a238 1
    stringBuffer.append(TEXT_41);
d244 1
a244 1
    stringBuffer.append(TEXT_42);
d246 1
a246 1
    stringBuffer.append(TEXT_43);
d248 1
a248 1
    stringBuffer.append(TEXT_44);
d250 1
a250 1
    stringBuffer.append(TEXT_45);
d252 1
a252 1
    stringBuffer.append(TEXT_46);
d257 1
a257 1
    stringBuffer.append(TEXT_47);
d259 1
a259 1
    stringBuffer.append(TEXT_48);
d261 1
a261 1
    stringBuffer.append(TEXT_49);
@


1.12
log
@Acquire GenClass accessor name from GenFeature instead of host element in genmodel
@
text
@d99 1
a99 1
		if (modelFacet == null || modelFacet instanceof TextLabelModelFacet) {
@


1.11
log
@get editing domain from eobject
@
text
@a90 1
		String accessorName;
a92 1
			accessorName = ((GenNode) genHost).getDomainMetaClass().getClassifierAccessorName();
a94 6
			LinkModelFacet linkModelFacet = ((GenLink) genHost).getModelFacet();
			if (linkModelFacet instanceof TypeLinkModelFacet) {
				accessorName = ((TypeLinkModelFacet) linkModelFacet).getMetaClass().getClassifierAccessorName();
			} else {
				accessorName = ((FeatureModelFacet) linkModelFacet).getMetaFeature().getGenClass().getClassifierAccessorName();
			}
d136 1
a136 1
			String featureName = ((FeatureLabelModelFacet) modelFacet).getMetaFeature().getName();
d139 1
a139 1
			String semanticPackageInterfaceName = importManager.getImportedName(((FeatureLabelModelFacet) modelFacet).getMetaFeature().getGenPackage().getQualifiedPackageInterfaceName());
d148 1
a148 1
    stringBuffer.append(accessorName);
d150 1
a150 1
    stringBuffer.append(featureName);
d168 2
a169 3
				GenFeature nextGenFeature = (GenFeature) it.next(); 
				String featureName = nextGenFeature.getName();
				String semanticPackageInterfaceName = importManager.getImportedName(nextGenFeature.getGenPackage().getQualifiedPackageInterfaceName());
d174 1
a174 1
    stringBuffer.append(accessorName);
d176 1
a176 1
    stringBuffer.append(featureName);
@


1.10
log
@use new transactional emf api
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.util.Map;" + NL + "import java.util.WeakHashMap;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.emf.transaction.TransactionalEditingDomain;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d25 1
a25 1
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate Map ";
d27 1
a27 1
  protected final String TEXT_8 = "(TransactionalEditingDomain editingDomain) {" + NL + "\t\tif (";
d29 40
a68 41
  protected final String TEXT_10 = " = new WeakHashMap();" + NL + "\t\t}" + NL + "\t\tIParser parser = (IParser) ";
  protected final String TEXT_11 = ".get(editingDomain);" + NL + "\t\tif (parser == null) {" + NL + "\t\t\tparser = create";
  protected final String TEXT_12 = "(editingDomain);" + NL + "\t\t\t";
  protected final String TEXT_13 = ".put(editingDomain, parser);" + NL + "\t\t}" + NL + "\t\treturn parser;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser create";
  protected final String TEXT_14 = "(TransactionalEditingDomain editingDomain) {";
  protected final String TEXT_15 = NL + "\t\t";
  protected final String TEXT_16 = " parser = new ";
  protected final String TEXT_17 = "(";
  protected final String TEXT_18 = ".eINSTANCE.get";
  protected final String TEXT_19 = "().getEStructuralFeature(\"";
  protected final String TEXT_20 = "\"));";
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = " features = new ";
  protected final String TEXT_23 = "(";
  protected final String TEXT_24 = ");";
  protected final String TEXT_25 = NL + "\t\tfeatures.add(";
  protected final String TEXT_26 = ".eINSTANCE.get";
  protected final String TEXT_27 = "().getEStructuralFeature(\"";
  protected final String TEXT_28 = "\"));";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = " parser = new ";
  protected final String TEXT_31 = "(features);";
  protected final String TEXT_32 = NL + "\t\tparser.setViewPattern(\"";
  protected final String TEXT_33 = "\");";
  protected final String TEXT_34 = NL + "\t\tparser.setEditPattern(\"";
  protected final String TEXT_35 = "\");";
  protected final String TEXT_36 = NL + "\t\tparser.setEditingDomain(editingDomain);" + NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_37 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(IElementType type, String viewType, TransactionalEditingDomain editingDomain) {";
  protected final String TEXT_38 = NL + "\t\tif (";
  protected final String TEXT_39 = ".";
  protected final String TEXT_40 = " == type) {";
  protected final String TEXT_41 = NL + "\t\t\treturn get";
  protected final String TEXT_42 = "(editingDomain);";
  protected final String TEXT_43 = NL + "\t\t\tif (";
  protected final String TEXT_44 = ".";
  protected final String TEXT_45 = "Labels.";
  protected final String TEXT_46 = ".equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_47 = "(editingDomain);" + NL + "\t\t\t}";
  protected final String TEXT_48 = NL + "\t\t}";
  protected final String TEXT_49 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\tTransactionalEditingDomain editingDomain = (TransactionalEditingDomain) hint.getAdapter(TransactionalEditingDomain.class);" + NL + "\t\treturn getParser(type, viewType, editingDomain);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\treturn getParser(((GetParserOperation) operation).getHint()) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_50 = NL;
d119 1
a119 1
		String fieldName = Character.toLowerCase(c) + baseName + 's';
d132 2
d135 1
a135 1
    stringBuffer.append(TEXT_11);
a136 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(fieldName);
a137 2
    stringBuffer.append(methodName);
    stringBuffer.append(TEXT_14);
d149 2
d154 1
a154 1
    stringBuffer.append(parserClassName);
d156 1
a156 1
    stringBuffer.append(semanticPackageInterfaceName);
d158 1
a158 1
    stringBuffer.append(accessorName);
a159 2
    stringBuffer.append(featureName);
    stringBuffer.append(TEXT_20);
d167 2
d170 1
a170 1
    stringBuffer.append(importManager.getImportedName("java.util.List"));
d172 1
a172 1
    stringBuffer.append(importManager.getImportedName("java.util.ArrayList"));
a173 2
    stringBuffer.append(features.size());
    stringBuffer.append(TEXT_24);
d180 2
d183 1
a183 1
    stringBuffer.append(semanticPackageInterfaceName);
d185 1
a185 1
    stringBuffer.append(accessorName);
d187 1
a187 1
    stringBuffer.append(featureName);
d189 1
a189 1
    			}
a192 2
    stringBuffer.append(parserClassName);
    stringBuffer.append(TEXT_31);
d199 2
a201 2
    stringBuffer.append(viewPattern);
    stringBuffer.append(TEXT_33);
d209 2
d212 1
a212 1
    stringBuffer.append(editPattern);
a213 2
    		}
    stringBuffer.append(TEXT_36);
d218 1
a218 1
    stringBuffer.append(TEXT_37);
d224 2
d227 1
a227 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getElementTypesQualifiedClassName()));
a228 2
    stringBuffer.append(genHost.getUniqueIdentifier());
    stringBuffer.append(TEXT_40);
d233 2
a235 2
    stringBuffer.append(labelMethodNames.get(genLabel));
    stringBuffer.append(TEXT_42);
d241 2
d244 1
a244 1
    stringBuffer.append(importManager.getImportedName(genDiagram.getSemanticHintsQualifiedClassName()));
d246 1
a246 1
    stringBuffer.append(genHost.getUniqueIdentifier());
d248 1
a248 1
    stringBuffer.append(genLabel.getSemanticHintFieldName());
a249 2
    stringBuffer.append(labelMethodNames.get(genLabel));
    stringBuffer.append(TEXT_47);
d254 2
d257 1
a257 1
    }
a258 2
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_50);
@


1.9
log
@Updating with new transaction API.
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d25 1
a25 1
  protected final String TEXT_6 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IParser ";
d27 1
a27 1
  protected final String TEXT_8 = "() {" + NL + "\t\tif (";
d29 41
a69 40
  protected final String TEXT_10 = " = create";
  protected final String TEXT_11 = "();" + NL + "\t\t}" + NL + "\t\treturn ";
  protected final String TEXT_12 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser create";
  protected final String TEXT_13 = "() {";
  protected final String TEXT_14 = NL + "\t\t";
  protected final String TEXT_15 = " parser = new ";
  protected final String TEXT_16 = "(";
  protected final String TEXT_17 = ".eINSTANCE.get";
  protected final String TEXT_18 = "().getEStructuralFeature(\"";
  protected final String TEXT_19 = "\"));";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = " features = new ";
  protected final String TEXT_22 = "(";
  protected final String TEXT_23 = ");";
  protected final String TEXT_24 = NL + "\t\tfeatures.add(";
  protected final String TEXT_25 = ".eINSTANCE.get";
  protected final String TEXT_26 = "().getEStructuralFeature(\"";
  protected final String TEXT_27 = "\"));";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = " parser = new ";
  protected final String TEXT_30 = "(features);";
  protected final String TEXT_31 = NL + "\t\tparser.setViewPattern(\"";
  protected final String TEXT_32 = "\");";
  protected final String TEXT_33 = NL + "\t\tparser.setEditPattern(\"";
  protected final String TEXT_34 = "\");";
  protected final String TEXT_35 = NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(IElementType type, String viewType) {";
  protected final String TEXT_37 = NL + "\t\tif (";
  protected final String TEXT_38 = ".";
  protected final String TEXT_39 = " == type) {";
  protected final String TEXT_40 = NL + "\t\t\treturn get";
  protected final String TEXT_41 = "();";
  protected final String TEXT_42 = NL + "\t\t\tif (";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = "Labels.";
  protected final String TEXT_45 = ".equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_46 = "();" + NL + "\t\t\t}";
  protected final String TEXT_47 = NL + "\t\t}";
  protected final String TEXT_48 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\tif (type == null) {" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t}" + NL + "\t\treturn getParser(type, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetParserOperation) operation).getHint();" + NL + "\t\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\t\tIElementType type = (IElementType) hint.getAdapter(IElementType.class);" + NL + "\t\t\tif (type == null) {" + NL + "\t\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\t\ttype = ElementTypeRegistry.getInstance().getElementType(element);" + NL + "\t\t\t}" + NL + "\t\t\treturn getParser(type, viewType) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_49 = NL;
d120 1
a120 1
		String fieldName = Character.toLowerCase(c) + baseName;
d133 2
d136 1
a136 1
    stringBuffer.append(TEXT_11);
d138 1
a138 1
    stringBuffer.append(TEXT_12);
d140 1
a140 1
    stringBuffer.append(TEXT_13);
a151 2
    stringBuffer.append(TEXT_14);
    stringBuffer.append(parserClassName);
d155 2
d158 1
a158 1
    stringBuffer.append(TEXT_17);
d160 1
a160 1
    stringBuffer.append(TEXT_18);
d162 1
a162 1
    stringBuffer.append(TEXT_19);
d170 1
a170 1
    stringBuffer.append(TEXT_20);
d172 1
a172 1
    stringBuffer.append(TEXT_21);
d174 1
a174 1
    stringBuffer.append(TEXT_22);
d176 1
a176 1
    stringBuffer.append(TEXT_23);
d183 1
a183 1
    stringBuffer.append(TEXT_24);
d185 1
a185 1
    stringBuffer.append(TEXT_25);
d187 1
a187 1
    stringBuffer.append(TEXT_26);
d189 1
a189 1
    stringBuffer.append(TEXT_27);
a190 2
    stringBuffer.append(TEXT_28);
    stringBuffer.append(parserClassName);
d194 2
d202 1
a202 1
    stringBuffer.append(TEXT_31);
d204 1
a204 1
    stringBuffer.append(TEXT_32);
d212 1
a212 1
    stringBuffer.append(TEXT_33);
d214 1
a214 1
    stringBuffer.append(TEXT_34);
d216 1
a216 1
    stringBuffer.append(TEXT_35);
d221 1
a221 1
    stringBuffer.append(TEXT_36);
d227 1
a227 1
    stringBuffer.append(TEXT_37);
d229 1
a229 1
    stringBuffer.append(TEXT_38);
d231 1
a231 1
    stringBuffer.append(TEXT_39);
d236 1
a236 1
    stringBuffer.append(TEXT_40);
d238 1
a238 1
    stringBuffer.append(TEXT_41);
d244 1
a244 1
    stringBuffer.append(TEXT_42);
d246 1
a246 1
    stringBuffer.append(TEXT_43);
d248 1
a248 1
    stringBuffer.append(TEXT_44);
d250 1
a250 1
    stringBuffer.append(TEXT_45);
d252 1
a252 1
    stringBuffer.append(TEXT_46);
d257 1
a257 1
    stringBuffer.append(TEXT_47);
d259 1
a259 1
    stringBuffer.append(TEXT_48);
d261 1
a261 1
    stringBuffer.append(TEXT_49);
@


1.8
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d55 1
a55 1
  protected final String TEXT_36 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(EObject element, String viewType) {" + NL + "\t\tIElementType type = ElementTypeRegistry.getInstance().getElementType(element);";
d67 1
a67 1
  protected final String TEXT_48 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\treturn getParser(element, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetParserOperation) operation).getHint();" + NL + "\t\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\treturn getParser(element, viewType) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
@


1.7
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d73 1
a73 1
    GenDiagram genDiagram = (GenDiagram) argument;
@


1.6
log
@#126541 Support features with enumeration-based types for label model facets
@
text
@a85 1
String semanticPackageInterfaceName = importManager.getImportedName(genDiagram.getDomainMetaModel().getQualifiedPackageInterfaceName());
d147 1
d176 3
a178 1
				String featureName = ((GenFeature) it.next()).getName();
@


1.5
log
@#126537
Possibility to visualize child-parent relachipchip as a link implemented
@
text
@d50 19
a68 21
  protected final String TEXT_31 = NL + "\t\t((";
  protected final String TEXT_32 = ") parser).setViewPattern(\"";
  protected final String TEXT_33 = "\");";
  protected final String TEXT_34 = NL + "\t\t((";
  protected final String TEXT_35 = ") parser).setEditPattern(\"";
  protected final String TEXT_36 = "\");";
  protected final String TEXT_37 = NL + "\t\treturn parser;" + NL + "\t}";
  protected final String TEXT_38 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected IParser getParser(EObject element, String viewType) {" + NL + "\t\tIElementType type = ElementTypeRegistry.getInstance().getElementType(element);";
  protected final String TEXT_39 = NL + "\t\tif (";
  protected final String TEXT_40 = ".";
  protected final String TEXT_41 = " == type) {";
  protected final String TEXT_42 = NL + "\t\t\treturn get";
  protected final String TEXT_43 = "();";
  protected final String TEXT_44 = NL + "\t\t\tif (";
  protected final String TEXT_45 = ".";
  protected final String TEXT_46 = "Labels.";
  protected final String TEXT_47 = ".equals(viewType)) {" + NL + "\t\t\t\treturn get";
  protected final String TEXT_48 = "();" + NL + "\t\t\t}";
  protected final String TEXT_49 = NL + "\t\t}";
  protected final String TEXT_50 = NL + "\t\treturn null;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IParser getParser(IAdaptable hint) {" + NL + "\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\treturn getParser(element, viewType);" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic boolean provides(IOperation operation) {" + NL + "\t\tif (operation instanceof GetParserOperation) {" + NL + "\t\t\tIAdaptable hint = ((GetParserOperation) operation).getHint();" + NL + "\t\t\tString viewType = (String) hint.getAdapter(String.class);" + NL + "\t\t\tEObject element = (EObject) hint.getAdapter(EObject.class);" + NL + "\t\t\treturn getParser(element, viewType) != null;" + NL + "\t\t}" + NL + "\t\treturn false;" + NL + "\t}" + NL + "}";
  protected final String TEXT_51 = NL;
d198 1
a198 1
    stringBuffer.append(parserClassName);
a199 2
    stringBuffer.append(viewPattern);
    stringBuffer.append(TEXT_33);
d207 2
d210 1
a210 1
    stringBuffer.append(parserClassName);
a211 4
    stringBuffer.append(editPattern);
    stringBuffer.append(TEXT_36);
    		}
    stringBuffer.append(TEXT_37);
d216 1
a216 1
    stringBuffer.append(TEXT_38);
d222 1
a222 1
    stringBuffer.append(TEXT_39);
d224 1
a224 1
    stringBuffer.append(TEXT_40);
d226 1
a226 1
    stringBuffer.append(TEXT_41);
d231 1
a231 1
    stringBuffer.append(TEXT_42);
d233 1
a233 1
    stringBuffer.append(TEXT_43);
d239 1
a239 1
    stringBuffer.append(TEXT_44);
d241 1
a241 1
    stringBuffer.append(TEXT_45);
d243 1
a243 1
    stringBuffer.append(TEXT_46);
d245 1
a245 1
    stringBuffer.append(TEXT_47);
d247 1
a247 1
    stringBuffer.append(TEXT_48);
d252 1
a252 1
    stringBuffer.append(TEXT_49);
d254 1
a254 1
    stringBuffer.append(TEXT_50);
d256 1
a256 1
    stringBuffer.append(TEXT_51);
@


1.4
log
@#126533 It should be possible to specify a label with fixed text in gmfgen model
@
text
@d22 1
a22 1
  protected final String TEXT_3 = NL + "import java.util.ArrayList;" + NL + "import java.util.List;" + NL + "" + NL + "import org.eclipse.core.runtime.IAdaptable;" + NL + "import org.eclipse.emf.ecore.EObject;" + NL + "import org.eclipse.gmf.runtime.common.core.service.AbstractProvider;" + NL + "import org.eclipse.gmf.runtime.common.core.service.IOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.GetParserOperation;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParser;" + NL + "import org.eclipse.gmf.runtime.common.ui.services.parser.IParserProvider;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.ElementTypeRegistry;" + NL + "import org.eclipse.gmf.runtime.emf.type.core.IElementType;";
d165 1
a165 1
			java.util.List features = ((CompositeFeatureLabelModelFacet) modelFacet).getMetaFeatures();
@


1.3
log
@ImportManager moved to oeg.common
@
text
@d110 1
a110 1
		if (modelFacet == null) {
@


1.2
log
@refactor feature model facet; use distinct feature-based model facets for links and labels
@
text
@d6 1
a6 1
import org.eclipse.gmf.codegen.util.*;
@


1.1
log
@#125828 Generated code is bypassing parser service...
@
text
@d107 1
a107 1
			continue;
d110 3
d143 3
a145 1
		if (modelFacet instanceof FeatureModelFacet) {
d147 3
a149 1
			String featureName = ((FeatureModelFacet) modelFacet).getMetaFeature().getName();
d163 1
a163 1
		} else if (modelFacet instanceof CompositeFeatureModelFacet) {
d165 3
a167 1
			java.util.List features = ((CompositeFeatureModelFacet) modelFacet).getMetaFeatures();
d195 1
a195 1
			throw new IllegalArgumentException();
d197 1
a197 1
		if (modelFacet.getViewPattern() != null && modelFacet.getViewPattern().length() != 0) {
d202 1
a202 1
    stringBuffer.append(modelFacet.getViewPattern());
d206 4
a209 1
		if (modelFacet.getEditPattern() != null && modelFacet.getEditPattern().length() != 0) {
d214 1
a214 1
    stringBuffer.append(modelFacet.getEditPattern());
@

