head	1.14;
access;
symbols
	v20081022-1925:1.14
	v20081015-1925:1.14
	v20081008-1925:1.14
	v20081001-1925:1.14
	v20080930-1130:1.14
	v20080926-1245:1.14
	v20080924-1925:1.14
	v20080917-1925:1.14
	v20080911-1728:1.14
	v20080910-1520:1.14
	v20080903-1520:1.14
	v20080827-1520:1.14
	v20080813-1520:1.14
	v20080806-1520:1.14
	v20080722-1827:1.14
	v20080718-1731:1.14
	v20080716-1600:1.14
	v20080716-1642:1.14
	R2_1_maintenance:1.14.0.2
	Root_R2_1_maintenance:1.14
	R2_1_0:1.14
	v20080610-1132:1.14
	v20080603-1553:1.14
	v20080528-1052:1.14
	v20080521:1.14
	v20080516-1543:1.14
	v20080516-1143:1.14
	v20080512-1200:1.14
	v20080508-2000:1.14
	v20080507-1326:1.14
	v20080503-1740:1.14
	v20080501-1739:1.14
	v20080425-1959:1.14
	v20080417-1610:1.13
	v20080411-0411:1.13
	v20080404-1111:1.13
	v20080322-0000:1.13
	v20080222-1200:1.12
	v20080215-1500:1.12
	v20080207-0207:1.11.2.1
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.11.2.1
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.12
	v20070928-0000:1.11.2.1
	v20070921-0000:1.11.2.1
	v20070915-0000:1.11.2.1
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070614-1400:1.11
	v20070608-1300:1.11
	v20070605-1400:1.11
	v20070601-1400:1.11
	v20070525-1500:1.11
	v20070520-1200:1.11
	v20070518-1300:1.11
	v20070504-1000:1.11
	v20070427-0600:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.10
	v20070301-1200:1.10
	v20070228-2000:1.10
	v20070221-1500:1.10
	v20070208-1800:1.10
	v20070202-0200:1.10
	v20070103-0300:1.10
	M4_20:1.10
	v20061222-1800:1.10
	v20061218-1200:1.10
	v20061214-0000:1.10
	v20061120-1300:1.10
	M3_20:1.10
	v20061117-0800:1.10
	v20061027-1200:1.10
	v20061020-1000:1.10
	v20061013-1330:1.10
	v20060919-0800:1.10
	v20060907-1100:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.10
	v20060817-1500:1.10
	v20060728-0500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060626-1420:1.10
	v20060620-0400:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.8
	v20060530-1930:1.8
	v20060526-1200:1.8
	v20060519-1300:1.8
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.7
	I20060331-1000:1.7
	I20060324-0300:1.7
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.4
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.14
date	2008.04.18.14.43.20;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	2e1d4808b3814567;

1.13
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	5e5047cd7dd64567;

1.12
date	2007.09.07.18.16.49;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	5d1f46e195874567;

1.11
date	2007.03.14.14.39.36;	author atikhomirov;	state Exp;
branches
	1.11.2.1;
next	1.10;
commitid	444245f8090b4567;

1.10
date	2006.06.25.11.24.09;	author radvorak;	state Exp;
branches;
next	1.9;

1.9
date	2006.06.09.09.02.46;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.19.13.22.30;	author radvorak;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.23.17.04.22;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.26.17.33.09;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;

1.11.2.1
date	2007.09.07.18.10.36;	author dstadnik;	state Exp;
branches;
next	;
commitid	58d446e194134567;


desc
@@


1.14
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen;


import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Gen Child Node</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getContainers <em>Containers</em>}</li>
 * </ul>
 * </p>
 *
 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode()
 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not modelFacet.oclIsUndefined() implies not modelFacet.containmentMetaFeature.oclIsUndefined()' description='Child node must specify \'Containment Meta Feature\''"
 * @@generated
 */
public interface GenChildNode extends GenNode {
	/**
	 * Returns the value of the '<em><b>Diagram</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.codegen.gmfgen.GenDiagram#getChildNodes <em>Child Nodes</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Diagram</em>' container reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Diagram</em>' container reference.
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode_Diagram()
	 * @@see org.eclipse.gmf.codegen.gmfgen.GenDiagram#getChildNodes
	 * @@model opposite="childNodes" resolveProxies="false" required="true" transient="false" changeable="false"
	 * @@generated
	 */
	GenDiagram getDiagram();

	/**
	 * Returns the value of the '<em><b>Containers</b></em>' reference list.
	 * The list contents are of type {@@link org.eclipse.gmf.codegen.gmfgen.GenChildContainer}.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.codegen.gmfgen.GenChildContainer#getChildNodes <em>Child Nodes</em>}'.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Containers</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Containers</em>' reference list.
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode_Containers()
	 * @@see org.eclipse.gmf.codegen.gmfgen.GenChildContainer#getChildNodes
	 * @@model opposite="childNodes" changeable="false"
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='let cmps:OrderedSet(GenChildContainer)=containers->select(oclIsKindOf(GenCompartment)) in cmps->exists(oclAsType(GenCompartment).listLayout) implies not cmps->exists(not oclAsType(GenCompartment).listLayout)' description='Node is referenced from multiple containers with different \'List Layout\' value'"
	 * @@generated
	 */
	EList<GenChildContainer> getContainers();

} // GenChildNode
@


1.13
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@d42 1
a42 1
	 * @@model opposite="childNodes" resolveProxies="false" required="true" transient="false" suppressedSetVisibility="true"
@


1.12
log
@regenerate; add java expr accessor to the model
@
text
@d42 1
a42 1
	 * @@model opposite="childNodes" required="true" transient="false" changeable="false"
@


1.11
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d42 1
a42 1
	 * @@model opposite="childNodes" required="true" changeable="false"
d60 1
a60 1
	 * @@model type="org.eclipse.gmf.codegen.gmfgen.GenChildContainer" opposite="childNodes" changeable="false"
@


1.11.2.1
log
@regenerate; add java expr getter to model
@
text
@d42 1
a42 1
	 * @@model opposite="childNodes" required="true" transient="false" changeable="false"
d60 1
a60 1
	 * @@model opposite="childNodes" changeable="false"
@


1.10
log
@#148430 gmfmap, gmfgen Validation should report childnodes with domainElement but without containmentFeature
@
text
@d64 1
a64 1
	EList getContainers();
@


1.9
log
@#146199 There should be no exceptions when child nodes are defined in pure design diagrams
@
text
@d26 1
a26 1
 * @@model
@


1.8
log
@Correcting constraint failing due to 'listLayout' attribute move
@
text
@d26 1
a26 1
 * @@model annotation="http://www.eclipse.org/gmf/2005/constraints ocl='not modelFacet.containmentMetaFeature.oclIsUndefined()' description='Child node must specify \'Containment Meta Feature\''"
@


1.7
log
@[rdvorak] #131546 Update constraint annotations in gmfgen meta-model to the latest changes
@
text
@d61 1
a61 1
	 *        annotation="http://www.eclipse.org/gmf/2005/constraints ocl='containers->forAll(n|n.listLayout) or containers->forAll(n|not n.listLayout)' description='Node is referenced from multiple containers with different \'List Layout\' value'"
@


1.6
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d26 1
a26 1
 * @@model
d61 1
@


1.5
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d10 2
d20 2
a21 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getContainer <em>Container</em>}</li>
d29 1
a29 1
public interface GenChildNode extends GenNode{
d31 2
a32 2
	 * Returns the value of the '<em><b>Container</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.codegen.gmfgen.GenChildContainer#getChildNodes <em>Child Nodes</em>}'.
d35 1
a35 1
	 * If the meaning of the '<em>Container</em>' container reference isn't clear,
d39 3
a41 3
	 * @@return the value of the '<em>Container</em>' container reference.
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode_Container()
	 * @@see org.eclipse.gmf.codegen.gmfgen.GenChildContainer#getChildNodes
d45 1
a45 1
	GenChildContainer getContainer();
d48 3
d52 4
d57 4
a60 1
	 * @@model kind="operation"
d63 1
a63 1
	boolean isListContainerEntry();
@


1.4
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d44 8
@


1.3
log
@#113823 childMetaFeature moved to TypeModelFacet
@
text
@d18 1
a18 2
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getGroupID <em>Group ID</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getParentNode <em>Parent Node</em>}</li>
d28 2
a29 27
	 * Returns the value of the '<em><b>Group ID</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * <!-- begin-model-doc -->
	 * could be null if you don't use childContainers
	 * <!-- end-model-doc -->
	 * @@return the value of the '<em>Group ID</em>' attribute.
	 * @@see #setGroupID(String)
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode_GroupID()
	 * @@model
	 * @@generated
	 */
	String getGroupID();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getGroupID <em>Group ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Group ID</em>' attribute.
	 * @@see #getGroupID()
	 * @@generated
	 */
	void setGroupID(String value);

	/**
	 * Returns the value of the '<em><b>Parent Node</b></em>' container reference.
	 * It is bidirectional and its opposite is '{@@link org.eclipse.gmf.codegen.gmfgen.GenNode#getChildNodes <em>Child Nodes</em>}'.
d32 1
a32 1
	 * If the meaning of the '<em>Parent Node</em>' container reference isn't clear,
d36 3
a38 3
	 * @@return the value of the '<em>Parent Node</em>' container reference.
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode_ParentNode()
	 * @@see org.eclipse.gmf.codegen.gmfgen.GenNode#getChildNodes
d42 1
a42 1
	GenNode getParentNode();
@


1.2
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@a8 1
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
a19 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getChildMetaFeature <em>Child Meta Feature</em>}</li>
a69 26
	/**
	 * Returns the value of the '<em><b>Child Meta Feature</b></em>' reference.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Child Meta Feature</em>' reference isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Child Meta Feature</em>' reference.
	 * @@see #setChildMetaFeature(GenFeature)
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenChildNode_ChildMetaFeature()
	 * @@model required="true"
	 * @@generated
	 */
	GenFeature getChildMetaFeature();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.codegen.gmfgen.GenChildNode#getChildMetaFeature <em>Child Meta Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Child Meta Feature</em>' reference.
	 * @@see #getChildMetaFeature()
	 * @@generated
	 */
	void setChildMetaFeature(GenFeature value);

@


1.1
log
@*** empty log message ***
@
text
@d9 1
a9 1
import org.eclipse.emf.ecore.EReference;
d29 1
a29 1
public interface GenChildNode extends GenNode {
d81 1
a81 1
	 * @@see #setChildMetaFeature(EReference)
d86 1
a86 1
	EReference getChildMetaFeature();
d96 1
a96 1
	void setChildMetaFeature(EReference value);
@

