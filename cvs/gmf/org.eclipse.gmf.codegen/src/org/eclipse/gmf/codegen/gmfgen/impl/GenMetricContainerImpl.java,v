head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081015-1925:1.8
	v20081008-1925:1.8
	v20081001-1925:1.8
	v20080930-1130:1.8
	v20080926-1245:1.8
	v20080924-1925:1.8
	v20080917-1925:1.8
	v20080911-1728:1.8
	v20080910-1520:1.8
	v20080903-1520:1.8
	v20080827-1520:1.8
	v20080813-1520:1.8
	v20080806-1520:1.8
	v20080722-1827:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.8
	v20080521:1.8
	v20080516-1543:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080508-2000:1.8
	v20080507-1326:1.8
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080417-1610:1.7
	v20080411-0411:1.7
	v20080404-1111:1.7
	v20080322-0000:1.7
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070928-0000:1.6
	v20070921-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.4
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.3
	v20061020-1000:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060728-0500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	2e1d4808b3814567;

1.7
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	5e5047cd7dd64567;

1.6
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	725b461c97d64567;

1.5
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	444245f8090b4567;

1.4
date	2007.02.08.19.31.57;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	2f8045cb7a9f4567;

1.3
date	2006.06.16.09.09.37;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.15.22.36.46;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.03.18.32.30;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.8
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.gmfgen.GenMetricContainer;
import org.eclipse.gmf.codegen.gmfgen.GenMetricRule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Metric Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenMetricContainerImpl#getEditorGen <em>Editor Gen</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenMetricContainerImpl#getMetrics <em>Metrics</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenMetricContainerImpl extends EObjectImpl implements GenMetricContainer {
	/**
	 * The cached value of the '{@@link #getMetrics() <em>Metrics</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMetrics()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenMetricRule> metrics;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenMetricContainerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenMetricContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenEditorGenerator getEditorGen() {
		if (eContainerFeatureID != GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN) return null;
		return (GenEditorGenerator)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenMetricRule> getMetrics() {
		if (metrics == null) {
			metrics = new EObjectContainmentWithInverseEList<GenMetricRule>(GenMetricRule.class, this, GMFGenPackage.GEN_METRIC_CONTAINER__METRICS, GMFGenPackage.GEN_METRIC_RULE__CONTAINER);
		}
		return metrics;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public Set<GenPackage> getAllTargetedModelPackages() {
		HashSet<GenPackage> packages = new HashSet<GenPackage>();
		for (GenMetricRule nextRule  : getMetrics()) {
			if(nextRule.getTarget() != null && nextRule.getTarget().getContext() != null) {
				packages.add(nextRule.getTarget().getContext().getGenPackage());
			}
		}
		return packages;
	}	

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
			case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getMetrics()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				return eBasicSetContainer(null, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
			case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS:
				return ((InternalEList<?>)getMetrics()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_EDITOR_GENERATOR__METRICS, GenEditorGenerator.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				return getEditorGen();
			case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS:
				return getMetrics();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS:
				getMetrics().clear();
				getMetrics().addAll((Collection<? extends GenMetricRule>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS:
				getMetrics().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				return getEditorGen() != null;
			case GMFGenPackage.GEN_METRIC_CONTAINER__METRICS:
				return metrics != null && !metrics.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //GenMetricContainerImpl
@


1.7
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a9 1
import org.eclipse.emf.common.notify.Notification;
a17 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
a19 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a84 31
	public NotificationChain basicSetEditorGen(GenEditorGenerator newEditorGen, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newEditorGen, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditorGen(GenEditorGenerator newEditorGen) {
		if (newEditorGen != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN && newEditorGen != null)) {
			if (EcoreUtil.isAncestor(this, newEditorGen))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newEditorGen != null)
				msgs = ((InternalEObject)newEditorGen).eInverseAdd(this, GMFGenPackage.GEN_EDITOR_GENERATOR__METRICS, GenEditorGenerator.class, msgs);
			msgs = basicSetEditorGen(newEditorGen, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, newEditorGen, newEditorGen));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d119 1
a119 1
				return basicSetEditorGen((GenEditorGenerator)otherEnd, msgs);
d135 1
a135 1
				return basicSetEditorGen(null, msgs);
a180 3
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)newValue);
				return;
a196 3
			case GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)null);
				return;
@


1.6
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d10 1
d19 1
d22 1
d88 31
d153 1
a153 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
d169 1
a169 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_METRIC_CONTAINER__EDITOR_GEN, msgs);
d215 3
d234 3
@


1.5
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d49 1
a49 1
	protected EList<GenMetricRule> metrics = null;
@


1.4
log
@get rid of GenRuleContainerBase
@
text
@a10 1
import java.util.Iterator;
d13 1
a18 1

d49 1
a49 1
	protected EList metrics = null;
d65 1
d85 1
a85 1
	public EList getMetrics() {
d87 1
a87 1
			metrics = new EObjectContainmentWithInverseEList(GenMetricRule.class, this, GMFGenPackage.GEN_METRIC_CONTAINER__METRICS, GMFGenPackage.GEN_METRIC_RULE__CONTAINER);
d97 3
a99 5
	public Set getAllTargetedModelPackages() {
		Set packages = new HashSet();
		EList allRules = getMetrics();
		for (Iterator it = allRules.iterator(); it.hasNext();) {
			GenMetricRule nextRule = (GenMetricRule) it.next();
d112 2
d121 1
a121 1
				return ((InternalEList)getMetrics()).basicAdd(otherEnd, msgs);
d131 1
d137 1
a137 1
				return ((InternalEList)getMetrics()).basicRemove(otherEnd, msgs);
d147 1
d161 1
d177 2
d183 1
a183 1
				getMetrics().addAll((Collection)newValue);
d194 1
d209 1
@


1.3
log
@sync with the model
@
text
@d18 2
d23 1
d34 1
d41 1
a41 1
public class GenMetricContainerImpl extends GenRuleContainerBaseImpl implements GenMetricContainer {
d75 10
d116 4
d133 2
d146 13
d161 2
d205 2
@


1.2
log
@#147374 Audits and Metrics should collect required plugin IDs for external model packages
@
text
@d77 1
a77 1
	
@


1.1
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@d10 3
a14 1

a15 1

a17 1

a19 1

d77 17
@

