head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080930-1130:1.4
	v20080926-1245:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4
	v20080722-1827:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1543:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080508-2000:1.4
	v20080507-1326:1.4
	v20080503-1740:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070928-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.4
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.2
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.2
	v20061020-1000:1.2
	v20061013-1330:1.2
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060824-1600:1.2
	v20060817-1500:1.2
	v20060728-0500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	444245f8090b4567;

1.3
date	2006.12.12.18.10.58;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	750e457ef09e4567;

1.2
date	2006.05.05.15.42.02;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.30.20.42.04;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.draw2d.PositionConstants;
import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.ResizeConstraints;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Resize Constraints</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ResizeConstraintsImpl#getResizeHandles <em>Resize Handles</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ResizeConstraintsImpl#getNonResizeHandles <em>Non Resize Handles</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ResizeConstraintsImpl#getResizeHandleNames <em>Resize Handle Names</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ResizeConstraintsImpl#getNonResizeHandleNames <em>Non Resize Handle Names</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class ResizeConstraintsImpl extends EObjectImpl implements ResizeConstraints {
	/**
	 * The default value of the '{@@link #getResizeHandles() <em>Resize Handles</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getResizeHandles()
	 * @@generated
	 * @@ordered
	 */
	protected static final int RESIZE_HANDLES_EDEFAULT = 0;

	/**
	 * The cached value of the '{@@link #getResizeHandles() <em>Resize Handles</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getResizeHandles()
	 * @@generated
	 * @@ordered
	 */
	protected int resizeHandles = RESIZE_HANDLES_EDEFAULT;

	/**
	 * The default value of the '{@@link #getNonResizeHandles() <em>Non Resize Handles</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNonResizeHandles()
	 * @@generated
	 * @@ordered
	 */
	protected static final int NON_RESIZE_HANDLES_EDEFAULT = 0;

	/**
	 * The cached value of the '{@@link #getNonResizeHandles() <em>Non Resize Handles</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNonResizeHandles()
	 * @@generated
	 * @@ordered
	 */
	protected int nonResizeHandles = NON_RESIZE_HANDLES_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ResizeConstraintsImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getResizeConstraints();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getResizeHandles() {
		return resizeHandles;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setResizeHandles(int newResizeHandles) {
		int oldResizeHandles = resizeHandles;
		resizeHandles = newResizeHandles;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES, oldResizeHandles, resizeHandles));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getNonResizeHandles() {
		return nonResizeHandles;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNonResizeHandles(int newNonResizeHandles) {
		int oldNonResizeHandles = nonResizeHandles;
		nonResizeHandles = newNonResizeHandles;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES, oldNonResizeHandles, nonResizeHandles));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<String> getResizeHandleNames() {
		return getPositionConstantNames(getResizeHandles());
	}

	/**
	 * <!-- begin-user-doc -->
	 * XXX Actually, we make no use of non-resize handles, perhaps, should remove them
	 * from model (to use them, need to override method createSelectionHandles() in editPolicy
	 * class returned from getPrimaryDragEditPolicy, and use NonResizableHandleKit.addHandle.
	 * It's too much code (which is different from simple setResizeDirections(int), thus, not supported, at least now
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<String> getNonResizeHandleNames() {
		return getPositionConstantNames(getNonResizeHandles());
	}

	private EList<String> getPositionConstantNames(int value) {
		BasicEList<String> rv = new BasicEList<String>();
		addConstantIfFlagSet(value, PositionConstants.NORTH, "NORTH", rv);
		addConstantIfFlagSet(value, PositionConstants.SOUTH, "SOUTH", rv);
		addConstantIfFlagSet(value, PositionConstants.WEST, "WEST", rv);
		addConstantIfFlagSet(value, PositionConstants.EAST, "EAST", rv);
		return rv;
	}

	private static void addConstantIfFlagSet(int value, int flag, String constantName, EList<String> list) {
		if ((value & flag) == flag) {
			list.add(constantName);
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES:
				return new Integer(getResizeHandles());
			case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES:
				return new Integer(getNonResizeHandles());
			case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLE_NAMES:
				return getResizeHandleNames();
			case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLE_NAMES:
				return getNonResizeHandleNames();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES:
				setResizeHandles(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES:
				setNonResizeHandles(((Integer)newValue).intValue());
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES:
				setResizeHandles(RESIZE_HANDLES_EDEFAULT);
				return;
			case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES:
				setNonResizeHandles(NON_RESIZE_HANDLES_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLES:
				return resizeHandles != RESIZE_HANDLES_EDEFAULT;
			case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLES:
				return nonResizeHandles != NON_RESIZE_HANDLES_EDEFAULT;
			case GMFGenPackage.RESIZE_CONSTRAINTS__RESIZE_HANDLE_NAMES:
				return !getResizeHandleNames().isEmpty();
			case GMFGenPackage.RESIZE_CONSTRAINTS__NON_RESIZE_HANDLE_NAMES:
				return !getNonResizeHandleNames().isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (resizeHandles: ");
		result.append(resizeHandles);
		result.append(", nonResizeHandles: ");
		result.append(nonResizeHandles);
		result.append(')');
		return result.toString();
	}

} //ResizeConstraintsImpl
@


1.3
log
@convert operations in resize constraints to attributes so they may be used in xpand templates
@
text
@d94 1
d146 1
a146 1
	public EList getResizeHandleNames() {
d159 1
a159 1
	public EList getNonResizeHandleNames() {
d163 2
a164 2
	private EList getPositionConstantNames(int value) {
		EList rv = new BasicEList();
d172 1
a172 1
	private static void addConstantIfFlagSet(int value, int flag, String constantName, EList list) {
d183 1
d203 1
d221 1
d239 1
d259 1
@


1.2
log
@reflect changes made possible with #134462 - just set constant value instead of overriding method
@
text
@d32 2
d188 4
d241 4
@


1.1
log
@#114061 Support shape with fixed horizontal/vertical size. First, 'resize' part of the request was covered.
Obsolete ShapeAttributes class was deleted, same attributes should be set in gmfgraph now.
@
text
@d149 4
a165 4
		addConstantIfFlagSet(value, PositionConstants.NORTH_EAST, "NORTH_EAST", rv);
		addConstantIfFlagSet(value, PositionConstants.NORTH_WEST, "NORTH_WEST", rv);
		addConstantIfFlagSet(value, PositionConstants.SOUTH_EAST, "SOUTH_EAST", rv);
		addConstantIfFlagSet(value, PositionConstants.SOUTH_WEST, "SOUTH_WEST", rv);
@

