head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.2
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.04.19.19.42.26;	author atikhomirov;	state dead;
branches;
next	1.6;

1.6
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.18.18.35.10;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.13.17.11.22;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.NodeEntry;
import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node Entry</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.NodeEntryImpl#getGenNode <em>Gen Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.NodeEntryImpl#getGroup <em>Group</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class NodeEntryImpl extends ToolEntryImpl implements NodeEntry {
	/**
	 * The cached value of the '{@@link #getGenNode() <em>Gen Node</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGenNode()
	 * @@generated
	 * @@ordered
	 */
	protected EList genNode = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected NodeEntryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getNodeEntry();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList getGenNode() {
		if (genNode == null) {
			genNode = new EObjectResolvingEList(GenNode.class, this, GMFGenPackage.NODE_ENTRY__GEN_NODE);
		}
		return genNode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ToolGroup getGroup() {
		if (eContainerFeatureID != GMFGenPackage.NODE_ENTRY__GROUP) return null;
		return (ToolGroup)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.NODE_ENTRY__GROUP:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.NODE_ENTRY__GROUP, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.NODE_ENTRY__GROUP:
				return eBasicSetContainer(null, GMFGenPackage.NODE_ENTRY__GROUP, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.NODE_ENTRY__GROUP:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.TOOL_GROUP__NODE_TOOLS, ToolGroup.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.NODE_ENTRY__GEN_NODE:
				return getGenNode();
			case GMFGenPackage.NODE_ENTRY__GROUP:
				return getGroup();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.NODE_ENTRY__GEN_NODE:
				getGenNode().clear();
				getGenNode().addAll((Collection)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.NODE_ENTRY__GEN_NODE:
				getGenNode().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.NODE_ENTRY__GEN_NODE:
				return genNode != null && !genNode.isEmpty();
			case GMFGenPackage.NODE_ENTRY__GROUP:
				return getGroup() != null;
		}
		return super.eIsSet(featureID);
	}

} //NodeEntryImpl
@


1.6
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@@


1.5
log
@simplify naming strategy - it's sufficient to generate method names on the fly
@
text
@d185 1
@


1.4
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@a184 1

@


1.3
log
@#121888
One toolbar tool can create several elements.
@
text
@a13 1
import org.eclipse.emf.ecore.EStructuralFeature;
d83 1
a83 1
		return (ToolGroup)eContainer;
d91 6
a96 10
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.NODE_ENTRY__GROUP:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.NODE_ENTRY__GROUP, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d98 1
a98 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d106 4
a109 8
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.NODE_ENTRY__GROUP:
					return eBasicSetContainer(null, GMFGenPackage.NODE_ENTRY__GROUP, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d111 1
a111 1
		return eBasicSetContainer(null, featureID, msgs);
d119 4
a122 8
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.NODE_ENTRY__GROUP:
					return eContainer.eInverseRemove(this, GMFGenPackage.TOOL_GROUP__NODE_TOOLS, ToolGroup.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d124 1
a124 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d132 2
a133 16
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.NODE_ENTRY__ORDER:
				return new Integer(getOrder());
			case GMFGenPackage.NODE_ENTRY__TITLE_KEY:
				return getTitleKey();
			case GMFGenPackage.NODE_ENTRY__DESCRIPTION_KEY:
				return getDescriptionKey();
			case GMFGenPackage.NODE_ENTRY__LARGE_ICON_PATH:
				return getLargeIconPath();
			case GMFGenPackage.NODE_ENTRY__SMALL_ICON_PATH:
				return getSmallIconPath();
			case GMFGenPackage.NODE_ENTRY__CREATE_METHOD_NAME:
				return getCreateMethodName();
			case GMFGenPackage.NODE_ENTRY__DEFAULT:
				return isDefault() ? Boolean.TRUE : Boolean.FALSE;
d139 1
a139 1
		return eDynamicGet(eFeature, resolve);
d147 2
a148 23
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.NODE_ENTRY__ORDER:
				setOrder(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.NODE_ENTRY__TITLE_KEY:
				setTitleKey((String)newValue);
				return;
			case GMFGenPackage.NODE_ENTRY__DESCRIPTION_KEY:
				setDescriptionKey((String)newValue);
				return;
			case GMFGenPackage.NODE_ENTRY__LARGE_ICON_PATH:
				setLargeIconPath((String)newValue);
				return;
			case GMFGenPackage.NODE_ENTRY__SMALL_ICON_PATH:
				setSmallIconPath((String)newValue);
				return;
			case GMFGenPackage.NODE_ENTRY__CREATE_METHOD_NAME:
				setCreateMethodName((String)newValue);
				return;
			case GMFGenPackage.NODE_ENTRY__DEFAULT:
				setDefault(((Boolean)newValue).booleanValue());
				return;
d154 1
a154 1
		eDynamicSet(eFeature, newValue);
d162 2
a163 23
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.NODE_ENTRY__ORDER:
				setOrder(ORDER_EDEFAULT);
				return;
			case GMFGenPackage.NODE_ENTRY__TITLE_KEY:
				setTitleKey(TITLE_KEY_EDEFAULT);
				return;
			case GMFGenPackage.NODE_ENTRY__DESCRIPTION_KEY:
				setDescriptionKey(DESCRIPTION_KEY_EDEFAULT);
				return;
			case GMFGenPackage.NODE_ENTRY__LARGE_ICON_PATH:
				setLargeIconPath(LARGE_ICON_PATH_EDEFAULT);
				return;
			case GMFGenPackage.NODE_ENTRY__SMALL_ICON_PATH:
				setSmallIconPath(SMALL_ICON_PATH_EDEFAULT);
				return;
			case GMFGenPackage.NODE_ENTRY__CREATE_METHOD_NAME:
				setCreateMethodName(CREATE_METHOD_NAME_EDEFAULT);
				return;
			case GMFGenPackage.NODE_ENTRY__DEFAULT:
				setDefault(DEFAULT_EDEFAULT);
				return;
d168 1
a168 1
		eDynamicUnset(eFeature);
d176 2
a177 16
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.NODE_ENTRY__ORDER:
				return order != ORDER_EDEFAULT;
			case GMFGenPackage.NODE_ENTRY__TITLE_KEY:
				return TITLE_KEY_EDEFAULT == null ? titleKey != null : !TITLE_KEY_EDEFAULT.equals(titleKey);
			case GMFGenPackage.NODE_ENTRY__DESCRIPTION_KEY:
				return DESCRIPTION_KEY_EDEFAULT == null ? descriptionKey != null : !DESCRIPTION_KEY_EDEFAULT.equals(descriptionKey);
			case GMFGenPackage.NODE_ENTRY__LARGE_ICON_PATH:
				return LARGE_ICON_PATH_EDEFAULT == null ? largeIconPath != null : !LARGE_ICON_PATH_EDEFAULT.equals(largeIconPath);
			case GMFGenPackage.NODE_ENTRY__SMALL_ICON_PATH:
				return SMALL_ICON_PATH_EDEFAULT == null ? smallIconPath != null : !SMALL_ICON_PATH_EDEFAULT.equals(smallIconPath);
			case GMFGenPackage.NODE_ENTRY__CREATE_METHOD_NAME:
				return CREATE_METHOD_NAME_EDEFAULT == null ? createMethodName != null : !CREATE_METHOD_NAME_EDEFAULT.equals(createMethodName);
			case GMFGenPackage.NODE_ENTRY__DEFAULT:
				return default_ != DEFAULT_EDEFAULT;
d183 1
a183 1
		return eDynamicIsSet(eFeature);
@


1.2
log
@#120553
- Adding accessors for the palette entries factory methods into genmodel
- Refreshing unit-tests
- Fixing some old problems found by this refreshment.
@
text
@d9 2
a10 1
import org.eclipse.emf.common.notify.Notification;
d12 1
d16 1
a16 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
d38 1
a38 1
	 * The cached value of the '{@@link #getGenNode() <em>Gen Node</em>}' reference.
d45 1
a45 1
	protected GenNode genNode = null;
d70 3
a72 8
	public GenNode getGenNode() {
		if (genNode != null && genNode.eIsProxy()) {
			GenNode oldGenNode = genNode;
			genNode = (GenNode)eResolveProxy((InternalEObject)genNode);
			if (genNode != oldGenNode) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.NODE_ENTRY__GEN_NODE, oldGenNode, genNode));
			}
a81 21
	public GenNode basicGetGenNode() {
		return genNode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGenNode(GenNode newGenNode) {
		GenNode oldGenNode = genNode;
		genNode = newGenNode;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.NODE_ENTRY__GEN_NODE, oldGenNode, genNode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d164 1
a164 2
				if (resolve) return getGenNode();
				return basicGetGenNode();
d200 2
a201 1
				setGenNode((GenNode)newValue);
d236 1
a236 1
				setGenNode((GenNode)null);
d264 1
a264 1
				return genNode != null;
@


1.1
log
@*** empty log message ***
@
text
@d183 2
d218 3
d253 3
d283 2
@

