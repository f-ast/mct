head	1.18;
access;
symbols
	v20081022-1925:1.18
	v20081015-1925:1.18
	v20081008-1925:1.18
	v20081001-1925:1.18
	v20080930-1130:1.18
	v20080926-1245:1.18
	v20080924-1925:1.18
	v20080917-1925:1.18
	v20080911-1728:1.18
	v20080910-1520:1.18
	v20080903-1520:1.18
	v20080827-1520:1.18
	v20080813-1520:1.18
	v20080806-1520:1.18
	v20080722-1827:1.18
	v20080718-1731:1.18
	v20080716-1600:1.18
	v20080716-1642:1.18
	R2_1_maintenance:1.18.0.2
	Root_R2_1_maintenance:1.18
	R2_1_0:1.18
	v20080610-1132:1.18
	v20080603-1553:1.18
	v20080528-1052:1.18
	v20080521:1.18
	v20080516-1543:1.18
	v20080516-1143:1.18
	v20080512-1200:1.18
	v20080508-2000:1.18
	v20080507-1326:1.18
	v20080503-1740:1.17
	v20080501-1739:1.17
	v20080425-1959:1.17
	v20080417-1610:1.16
	v20080411-0411:1.15
	v20080404-1111:1.15
	v20080322-0000:1.15
	v20080222-1200:1.14
	v20080215-1500:1.14
	v20080207-0207:1.13.2.1
	v20071222-1111:1.14
	v20071214-1111:1.14
	v20071130-1111:1.14
	v20071124-0000:1.13.2.1
	v20071112-0000:1.14
	v20071108-0000:1.14
	v20071003-0000:1.14
	v20070928-0000:1.13.2.1
	v20070921-0000:1.13.2.1
	v20070915-0000:1.13.2.1
	v20070903-0000:1.13
	v20070809-0000:1.13
	R2_0_maintenance:1.13.0.2
	R2_0:1.13
	R4_20:1.13
	v20070621-0000:1.13
	RC3_20:1.13
	v20070614-1400:1.13
	v20070608-1300:1.13
	v20070605-1400:1.13
	v20070601-1400:1.13
	v20070525-1500:1.13
	v20070520-1200:1.13
	v20070518-1300:1.13
	v20070504-1000:1.13
	v20070427-0600:1.13
	v20070420-1000:1.13
	v20070413-1300:1.13
	v20070405-1100:1.12
	v20070403-1500:1.12
	v20070330-1300:1.12
	v20060330-1300:1.12
	v20070322-1100:1.12
	v20060316-0600:1.12
	v20070307-0700:1.11
	v20070301-1200:1.11
	v20070228-2000:1.11
	v20070221-1500:1.11
	v20070208-1800:1.11
	v20070202-0200:1.9
	v20070103-0300:1.9
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.9
	v20061214-0000:1.9
	v20061120-1300:1.9
	M3_20:1.9
	v20061117-0800:1.9
	v20061027-1200:1.9
	v20061020-1000:1.9
	v20061013-1330:1.9
	v20060919-0800:1.9
	v20060907-1100:1.9
	M1_20:1.9
	v20060904-1500:1.9
	v20060824-1600:1.9
	v20060817-1500:1.9
	v20060728-0500:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060626-1420:1.9
	v20060620-0400:1.9
	v20060616-1400:1.9
	v20060616-1200:1.9
	v20060609-1400:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-1300:1.9
	v20060519-0800:1.9
	v20060512-1000:1.9
	I20060512-1000:1.9
	I20060505-1400:1.9
	I20060428-1300:1.9
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.7
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.4
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.18
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	39124821b4de4567;

1.17
date	2008.04.18.14.43.23;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	2e1d4808b3814567;

1.16
date	2008.04.14.08.38.03;	author atikhomirov;	state Exp;
branches;
next	1.15;
commitid	1b0e480317df4567;

1.15
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	5e5047cd7dd64567;

1.14
date	2007.09.13.18.19.02;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	51ec46e97f104567;

1.13
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches
	1.13.2.1;
next	1.12;
commitid	725b461c97d64567;

1.12
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	444245f8090b4567;

1.11
date	2007.02.08.18.06.49;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	56b45cb66aa4567;

1.10
date	2007.02.07.00.37.49;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	c5d45c91f504567;

1.9
date	2006.04.25.19.16.05;	author radvorak;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.20.19.36.27;	author radvorak;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.12.08.48.32;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.09.13.28.19;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.03.18.32.30;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.24.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.14.18.46.22;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.20.53.19;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.12.51.22;	author atikhomirov;	state Exp;
branches;
next	;

1.13.2.1
date	2007.09.13.18.16.19;	author dstadnik;	state Exp;
branches;
next	;
commitid	485346e97e6f4567;


desc
@@


1.18
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
import org.eclipse.gmf.codegen.gmfgen.GenAuditable;
import org.eclipse.gmf.codegen.gmfgen.GenConstraint;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenDomainAttributeTarget;
import org.eclipse.gmf.codegen.gmfgen.GenLanguage;
import org.eclipse.gmf.codegen.gmfgen.GenSeverity;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Audit Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getRoot <em>Root</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getId <em>Id</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getRule <em>Rule</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getTarget <em>Target</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getMessage <em>Message</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getSeverity <em>Severity</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#isUseInLiveMode <em>Use In Live Mode</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#isRequiresConstraintAdapter <em>Requires Constraint Adapter</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getCategory <em>Category</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenAuditRuleImpl extends GenRuleBaseImpl implements GenAuditRule {
	/**
	 * The default value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected String id = ID_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getRule() <em>Rule</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRule()
	 * @@generated
	 * @@ordered
	 */
	protected GenConstraint rule;

	/**
	 * The cached value of the '{@@link #getTarget() <em>Target</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTarget()
	 * @@generated
	 * @@ordered
	 */
	protected GenAuditable target;

	/**
	 * The default value of the '{@@link #getMessage() <em>Message</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMessage()
	 * @@generated
	 * @@ordered
	 */
	protected static final String MESSAGE_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getMessage() <em>Message</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMessage()
	 * @@generated
	 * @@ordered
	 */
	protected String message = MESSAGE_EDEFAULT;

	/**
	 * The default value of the '{@@link #getSeverity() <em>Severity</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSeverity()
	 * @@generated
	 * @@ordered
	 */
	protected static final GenSeverity SEVERITY_EDEFAULT = GenSeverity.ERROR_LITERAL;

	/**
	 * The cached value of the '{@@link #getSeverity() <em>Severity</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getSeverity()
	 * @@generated
	 * @@ordered
	 */
	protected GenSeverity severity = SEVERITY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isUseInLiveMode() <em>Use In Live Mode</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUseInLiveMode()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean USE_IN_LIVE_MODE_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isUseInLiveMode() <em>Use In Live Mode</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isUseInLiveMode()
	 * @@generated
	 * @@ordered
	 */
	protected boolean useInLiveMode = USE_IN_LIVE_MODE_EDEFAULT;

	/**
	 * The default value of the '{@@link #isRequiresConstraintAdapter() <em>Requires Constraint Adapter</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isRequiresConstraintAdapter()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean REQUIRES_CONSTRAINT_ADAPTER_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #getCategory() <em>Category</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCategory()
	 * @@generated
	 * @@ordered
	 */
	protected GenAuditContainer category;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenAuditRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenAuditRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditRoot getRoot() {
		if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_RULE__ROOT) return null;
		return (GenAuditRoot)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditable getTarget() {
		return target;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetTarget(GenAuditable newTarget, NotificationChain msgs) {
		GenAuditable oldTarget = target;
		target = newTarget;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__TARGET, oldTarget, newTarget);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTarget(GenAuditable newTarget) {
		if (newTarget != target) {
			NotificationChain msgs = null;
			if (target != null)
				msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__TARGET, null, msgs);
			if (newTarget != null)
				msgs = ((InternalEObject)newTarget).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__TARGET, null, msgs);
			msgs = basicSetTarget(newTarget, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__TARGET, newTarget, newTarget));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getId() {
		return id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setId(String newId) {
		String oldId = id;
		id = newId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__ID, oldId, id));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getMessage() {
		return message;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setMessage(String newMessage) {
		String oldMessage = message;
		message = newMessage;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__MESSAGE, oldMessage, message));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenConstraint getRule() {
		if (rule != null && rule.eIsProxy()) {
			InternalEObject oldRule = (InternalEObject)rule;
			rule = (GenConstraint)eResolveProxy(oldRule);
			if (rule != oldRule) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_AUDIT_RULE__RULE, oldRule, rule));
			}
		}
		return rule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenConstraint basicGetRule() {
		return rule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setRule(GenConstraint newRule) {
		GenConstraint oldRule = rule;
		rule = newRule;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__RULE, oldRule, rule));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenSeverity getSeverity() {
		return severity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setSeverity(GenSeverity newSeverity) {
		GenSeverity oldSeverity = severity;
		severity = newSeverity == null ? SEVERITY_EDEFAULT : newSeverity;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__SEVERITY, oldSeverity, severity));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isUseInLiveMode() {
		return useInLiveMode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUseInLiveMode(boolean newUseInLiveMode) {
		boolean oldUseInLiveMode = useInLiveMode;
		useInLiveMode = newUseInLiveMode;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE, oldUseInLiveMode, useInLiveMode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getConstraintAdapterClassName() {
		if(getDiagram() == null || getConstraintAdapterLocalClassName() == null) {
			return null;
		}		
		return getDiagram().getValidationProviderClassName() + "$" + getConstraintAdapterLocalClassName(); //$NON-NLS-1$
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getConstraintAdapterLocalClassName() {
		return "Adapter" + (getRoot().getRules().indexOf(this) + 1); //$NON-NLS-1$ 
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */	
	public String getConstraintAdapterQualifiedClassName() {
		if(getDiagram() == null) {
			return null;
		}
		return getDiagram().getValidationProviderQualifiedClassName() + "$" + getConstraintAdapterLocalClassName(); //$NON-NLS-1$
	}
	
	private GenDiagram getDiagram() {
		if(getRoot() != null) {
			return getRoot().getEditorGen().getDiagram();
		}
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */	
	public boolean isRequiresConstraintAdapter() {
		if(getRule() != null) {
			if(getRule().getProvider().getLanguage() != GenLanguage.OCL_LITERAL || getTarget() instanceof GenDomainAttributeTarget) {
				return true;
			} else if(getTarget() != null && getTarget().getContext() != null) {
				return getTarget().getContext() != getTarget().getTargetClass();
			}
		}
		return false;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditContainer getCategory() {
		if (category != null && category.eIsProxy()) {
			InternalEObject oldCategory = (InternalEObject)category;
			category = (GenAuditContainer)eResolveProxy(oldCategory);
			if (category != oldCategory) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY, oldCategory, category));
			}
		}
		return category;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditContainer basicGetCategory() {
		return category;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetCategory(GenAuditContainer newCategory, NotificationChain msgs) {
		GenAuditContainer oldCategory = category;
		category = newCategory;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY, oldCategory, newCategory);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCategory(GenAuditContainer newCategory) {
		if (newCategory != category) {
			NotificationChain msgs = null;
			if (category != null)
				msgs = ((InternalEObject)category).eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);
			if (newCategory != null)
				msgs = ((InternalEObject)newCategory).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);
			msgs = basicSetCategory(newCategory, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY, newCategory, newCategory));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
			case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY:
				if (category != null)
					msgs = ((InternalEObject)category).eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);
				return basicSetCategory((GenAuditContainer)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				return basicSetTarget(null, msgs);
			case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY:
				return basicSetCategory(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_AUDIT_ROOT__RULES, GenAuditRoot.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				return getRoot();
			case GMFGenPackage.GEN_AUDIT_RULE__ID:
				return getId();
			case GMFGenPackage.GEN_AUDIT_RULE__RULE:
				if (resolve) return getRule();
				return basicGetRule();
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				return getTarget();
			case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE:
				return getMessage();
			case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY:
				return getSeverity();
			case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE:
				return isUseInLiveMode() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_AUDIT_RULE__REQUIRES_CONSTRAINT_ADAPTER:
				return isRequiresConstraintAdapter() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY:
				if (resolve) return getCategory();
				return basicGetCategory();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ID:
				setId((String)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__RULE:
				setRule((GenConstraint)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				setTarget((GenAuditable)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE:
				setMessage((String)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY:
				setSeverity((GenSeverity)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE:
				setUseInLiveMode(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY:
				setCategory((GenAuditContainer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ID:
				setId(ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__RULE:
				setRule((GenConstraint)null);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				setTarget((GenAuditable)null);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE:
				setMessage(MESSAGE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY:
				setSeverity(SEVERITY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE:
				setUseInLiveMode(USE_IN_LIVE_MODE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY:
				setCategory((GenAuditContainer)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				return getRoot() != null;
			case GMFGenPackage.GEN_AUDIT_RULE__ID:
				return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
			case GMFGenPackage.GEN_AUDIT_RULE__RULE:
				return rule != null;
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				return target != null;
			case GMFGenPackage.GEN_AUDIT_RULE__MESSAGE:
				return MESSAGE_EDEFAULT == null ? message != null : !MESSAGE_EDEFAULT.equals(message);
			case GMFGenPackage.GEN_AUDIT_RULE__SEVERITY:
				return severity != SEVERITY_EDEFAULT;
			case GMFGenPackage.GEN_AUDIT_RULE__USE_IN_LIVE_MODE:
				return useInLiveMode != USE_IN_LIVE_MODE_EDEFAULT;
			case GMFGenPackage.GEN_AUDIT_RULE__REQUIRES_CONSTRAINT_ADAPTER:
				return isRequiresConstraintAdapter() != REQUIRES_CONSTRAINT_ADAPTER_EDEFAULT;
			case GMFGenPackage.GEN_AUDIT_RULE__CATEGORY:
				return category != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (id: ");
		result.append(id);
		result.append(", message: ");
		result.append(message);
		result.append(", severity: ");
		result.append(severity);
		result.append(", useInLiveMode: ");
		result.append(useInLiveMode);
		result.append(')');
		return result.toString();
	}

} //GenAuditRuleImpl
@


1.17
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@d22 1
d68 1
a68 1
	 * The cached value of the '{@@link #getRule() <em>Rule</em>}' containment reference.
d287 8
d303 2
a304 8
	public NotificationChain basicSetRule(GenConstraint newRule, NotificationChain msgs) {
		GenConstraint oldRule = rule;
		rule = newRule;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__RULE, oldRule, newRule);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
d313 4
a316 11
		if (newRule != rule) {
			NotificationChain msgs = null;
			if (rule != null)
				msgs = ((InternalEObject)rule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__RULE, null, msgs);
			if (newRule != null)
				msgs = ((InternalEObject)newRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__RULE, null, msgs);
			msgs = basicSetRule(newRule, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__RULE, newRule, newRule));
d408 1
a408 1
			if(!getRule().isOCLExpression() || getTarget() instanceof GenDomainAttributeTarget) {
a506 2
			case GMFGenPackage.GEN_AUDIT_RULE__RULE:
				return basicSetRule(null, msgs);
d542 2
a543 1
				return getRule();
@


1.16
log
@[226149] Refactor Validation/Constraints: explicit context groupings instead of ID matching, unused IClientSelectors implementations are no longer generated, less custom code in the model, odd approach with map (semanticCtxIdMap) replaced with in-place VisualID check.
@
text
@a13 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d15 1
a16 1
import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
a199 31
	public NotificationChain basicSetRoot(GenAuditRoot newRoot, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newRoot, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setRoot(GenAuditRoot newRoot) {
		if (newRoot != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_RULE__ROOT && newRoot != null)) {
			if (EcoreUtil.isAncestor(this, newRoot))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newRoot != null)
				msgs = ((InternalEObject)newRoot).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_ROOT__RULES, GenAuditRoot.class, msgs);
			msgs = basicSetRoot(newRoot, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__ROOT, newRoot, newRoot));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d492 1
a492 1
				return basicSetRoot((GenAuditRoot)otherEnd, msgs);
d510 1
a510 1
				return basicSetRoot(null, msgs);
a573 3
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				setRoot((GenAuditRoot)newValue);
				return;
a606 3
			case GMFGenPackage.GEN_AUDIT_RULE__ROOT:
				setRoot((GenAuditRoot)null);
				return;
@


1.15
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a32 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getContextSelectorLocalClassName <em>Context Selector Local Class Name</em>}</li>
a47 20
	 * The default value of the '{@@link #getContextSelectorLocalClassName() <em>Context Selector Local Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getContextSelectorLocalClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getContextSelectorLocalClassName() <em>Context Selector Local Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getContextSelectorLocalClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String contextSelectorLocalClassName = CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT;

	/**
a401 59
	public String getContextSelectorClassName() {
		if(getTarget() == null || getDiagram() == null) {
			return null;
		}
		return getDiagram().getValidationProviderClassName() + "$" + getContextSelectorLocalClassName(); //$NON-NLS-1$  
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getContextSelectorQualifiedClassName() {
		if(getTarget() == null || getDiagram() == null) {
			return null;
		}
		return getDiagram().getValidationProviderQualifiedClassName() + "$" + getContextSelectorLocalClassName(); //$NON-NLS-1$ 
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getContextSelectorLocalClassNameGen() {
		return contextSelectorLocalClassName;
	}

	/**
	 * @@generated NOT
	 */
	public String getContextSelectorLocalClassName() {
		if (getContextSelectorLocalClassNameGen() != null) {
			return getContextSelectorLocalClassNameGen();
		}
		String name = "NoCtx"; //$NON-NLS-1$
		if (getTarget() != null) {
			name = getTarget().getClientContextID(); 
		}
		return name + (getRoot().getRules().indexOf(this) + 1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContextSelectorLocalClassName(String newContextSelectorLocalClassName) {
		String oldContextSelectorLocalClassName = contextSelectorLocalClassName;
		contextSelectorLocalClassName = newContextSelectorLocalClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME, oldContextSelectorLocalClassName, contextSelectorLocalClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
a576 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME:
				return getContextSelectorLocalClassName();
a608 3
			case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME:
				setContextSelectorLocalClassName((String)newValue);
				return;
a644 3
			case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME:
				setContextSelectorLocalClassName(CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT);
				return;
a679 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTEXT_SELECTOR_LOCAL_CLASS_NAME:
				return CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT == null ? contextSelectorLocalClassName != null : !CONTEXT_SELECTOR_LOCAL_CLASS_NAME_EDEFAULT.equals(contextSelectorLocalClassName);
d710 1
a710 3
		result.append(" (contextSelectorLocalClassName: ");
		result.append(contextSelectorLocalClassName);
		result.append(", id: ");
@


1.14
log
@rewrite validation prov in xpand
@
text
@d14 1
d222 31
d604 1
a604 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
d622 1
a622 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_RULE__ROOT, msgs);
d688 3
d727 3
@


1.13
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d426 3
a428 2
		if(getTarget() == null) {
			return "NoCtx"; //$NON-NLS-1$
d430 1
a430 1
		return getTarget().getClientContextID(); 
@


1.13.2.1
log
@rewrite validation prov in xpand
@
text
@d426 2
a427 3
		String name = "NoCtx"; //$NON-NLS-1$
		if (getTarget() != null) {
			name = getTarget().getClientContextID(); 
d429 1
a429 1
		return name + (getRoot().getRules().indexOf(this) + 1);
@


1.12
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d95 1
a95 1
	protected GenConstraint rule = null;
d105 1
a105 1
	protected GenAuditable target = null;
d185 1
a185 1
	protected GenAuditContainer category = null;
@


1.11
log
@refactor GenAuditContainer: flatten hierarchy as it fits most for templates we write
@
text
@d201 1
d565 1
d585 1
d605 1
d619 1
d652 1
d688 1
d724 1
d756 1
@


1.10
log
@complete migration of plugin.xml template to xpand version - constraint providers rewritten
@
text
@a13 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d15 1
d31 2
a38 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getContainer <em>Container</em>}</li>
d40 1
d48 20
d178 10
d210 10
a387 41
	 * @@generated
	 */
	public GenAuditContainer getContainer() {
		if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_RULE__CONTAINER) return null;
		return (GenAuditContainer)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetContainer(GenAuditContainer newContainer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newContainer, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContainer(GenAuditContainer newContainer) {
		if (newContainer != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_RULE__CONTAINER && newContainer != null)) {
			if (EcoreUtil.isAncestor(this, newContainer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newContainer != null)
				msgs = ((InternalEObject)newContainer).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);
			msgs = basicSetContainer(newContainer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER, newContainer, newContainer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d412 7
d422 3
d434 12
d461 1
a461 14
		if(getContainer() == null) {
			return null;
		}
		StringBuffer buf = new StringBuffer();
		for(GenAuditContainer container = getContainer(); container != null;) {
			GenAuditContainer parent = container.getParentContainer();
			if(parent != null) {
				buf.insert(0, parent.getChildContainers().indexOf(container) + 1);
			}
			container = parent;
		}
		buf.insert(0, "Adapter"); //$NON-NLS-1$
		buf.append(getContainer().getAudits().indexOf(this) + 1);
		return buf.toString(); 
d477 2
a478 2
		if(getContainer() != null && getContainer().getEditor() != null) {
			return getContainer().getEditor().getDiagram();
d504 60
d566 1
a566 1
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
d569 5
a573 1
				return basicSetContainer((GenAuditContainer)otherEnd, msgs);
d585 2
d591 2
a592 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
				return basicSetContainer(null, msgs);
d604 2
a605 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GenAuditContainer.class, msgs);
d617 4
a632 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
				return getContainer();
d635 3
d649 3
d670 2
a671 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
				setContainer((GenAuditContainer)newValue);
d684 3
d705 2
a706 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
				setContainer((GenAuditContainer)null);
d719 4
a734 2
			case GMFGenPackage.GEN_AUDIT_RULE__CONTAINER:
				return getContainer() != null;
d737 2
d752 3
a754 1
		result.append(" (id: ");
@


1.9
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d38 1
d146 10
d478 1
a478 1
	public boolean requiresConstraintAdapter() {
d555 2
d646 2
@


1.8
log
@#136672 use common expression accessor with audits
@
text
@d21 1
d468 8
a475 1
		return getRule() != null && !getRule().isOCLExpression();
@


1.7
log
@#126200 register element types in xml
@
text
@d20 1
a20 1
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
d378 1
a378 5
		if(getTarget() == null) {
			return null;
		}
		GenEditorGenerator editorGen = getContainer().getEditor();
		if(editorGen.getDiagram() == null) {
d381 1
a381 1
		return editorGen.getDiagram().getValidationProviderClassName() + "$" + getContextSelectorLocalClassName(); //$NON-NLS-1$  
d390 1
a390 2
		GenEditorGenerator editorGen = getContainer().getEditor();
		if(editorGen.getDiagram() == null) {
d393 1
a393 1
		return editorGen.getDiagram().getValidationProviderQualifiedClassName() + "$" + getContextSelectorLocalClassName(); //$NON-NLS-1$ 
d403 46
d451 8
a458 1
		return getTarget().getClientContextID(); 
d464 9
@


1.6
log
@remove stale imports
@
text
@d346 10
d365 1
a365 1
			msgs = eBasicSetContainer((InternalEObject)newContainer, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER, msgs);
d423 1
a423 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER, msgs);
d440 1
a440 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER, msgs);
@


1.5
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@a13 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
a20 1
import org.eclipse.gmf.codegen.gmfgen.GenRuleTarget;
@


1.4
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@d19 1
a31 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getTarget <em>Target</em>}</li>
d34 1
a34 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getName <em>Name</em>}</li>
a35 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getDescription <em>Description</em>}</li>
d44 1
a44 11
public class GenAuditRuleImpl extends EObjectImpl implements GenAuditRule {
	/**
	 * The cached value of the '{@@link #getTarget() <em>Target</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTarget()
	 * @@generated
	 * @@ordered
	 */
	protected GenRuleTarget target = null;

d76 1
a76 1
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
d79 1
a79 1
	 * @@see #getName()
d83 1
a83 11
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;
a105 20
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
d168 1
a168 1
	public GenRuleTarget getTarget() {
d177 2
a178 2
	public NotificationChain basicSetTarget(GenRuleTarget newTarget, NotificationChain msgs) {
		GenRuleTarget oldTarget = target;
d192 1
a192 1
	public void setTarget(GenRuleTarget newTarget) {
d196 1
a196 1
				msgs = ((InternalEObject)target).eInverseRemove(this, GMFGenPackage.GEN_RULE_TARGET__RULE, GenRuleTarget.class, msgs);
d198 1
a198 1
				msgs = ((InternalEObject)newTarget).eInverseAdd(this, GMFGenPackage.GEN_RULE_TARGET__RULE, GenRuleTarget.class, msgs);
a231 21
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a252 21
	public String getDescription() {
		return description;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__DESCRIPTION, oldDescription, description));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a411 4
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				if (target != null)
					msgs = ((InternalEObject)target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_AUDIT_RULE__TARGET, null, msgs);
				return basicSetTarget((GenRuleTarget)otherEnd, msgs);
d427 2
a430 2
			case GMFGenPackage.GEN_AUDIT_RULE__RULE:
				return basicSetRule(null, msgs);
a456 2
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				return getTarget();
d461 2
a462 2
			case GMFGenPackage.GEN_AUDIT_RULE__NAME:
				return getName();
a464 2
			case GMFGenPackage.GEN_AUDIT_RULE__DESCRIPTION:
				return getDescription();
a481 3
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				setTarget((GenRuleTarget)newValue);
				return;
d488 2
a489 2
			case GMFGenPackage.GEN_AUDIT_RULE__NAME:
				setName((String)newValue);
a493 3
			case GMFGenPackage.GEN_AUDIT_RULE__DESCRIPTION:
				setDescription((String)newValue);
				return;
a513 3
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				setTarget((GenRuleTarget)null);
				return;
d520 2
a521 2
			case GMFGenPackage.GEN_AUDIT_RULE__NAME:
				setName(NAME_EDEFAULT);
a525 3
			case GMFGenPackage.GEN_AUDIT_RULE__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
a545 2
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				return target != null;
d550 2
a551 2
			case GMFGenPackage.GEN_AUDIT_RULE__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
a553 2
			case GMFGenPackage.GEN_AUDIT_RULE__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
a574 2
		result.append(", name: ");
		result.append(name);
a576 2
		result.append(", description: ");
		result.append(description);
@


1.3
log
@[rdvorak] #127700 Rename genmodel::ModelElementSelector as a generic GenConstraint element
@
text
@a8 1
import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
d20 2
d31 1
a33 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditRuleImpl#getTarget <em>Target</em>}</li>
d47 10
a86 10
	 * The cached value of the '{@@link #getTarget() <em>Target</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTarget()
	 * @@generated
	 * @@ordered
	 */
	protected GenClass target = null;

	/**
d209 43
a378 38
	public GenClass getTarget() {
		if (target != null && target.eIsProxy()) {
			InternalEObject oldTarget = (InternalEObject)target;
			target = (GenClass)eResolveProxy(oldTarget);
			if (target != oldTarget) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_AUDIT_RULE__TARGET, oldTarget, target));
			}
		}
		return target;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenClass basicGetTarget() {
		return target;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTarget(GenClass newTarget) {
		GenClass oldTarget = target;
		target = newTarget;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_RULE__TARGET, oldTarget, target));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d450 41
d495 4
d514 2
d544 2
a549 3
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				if (resolve) return getTarget();
				return basicGetTarget();
d573 3
a581 3
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				setTarget((GenClass)newValue);
				return;
d611 3
a619 3
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				setTarget((GenClass)null);
				return;
d649 2
a654 2
			case GMFGenPackage.GEN_AUDIT_RULE__TARGET:
				return target != null;
@


1.2
log
@[rdvorak] #123656 Added message and description to audit rule
@
text
@d20 1
a21 1
import org.eclipse.gmf.codegen.gmfgen.ValueExpression;
d73 1
a73 1
	protected ValueExpression rule = null;
d292 1
a292 1
	public ValueExpression getRule() {
d301 2
a302 2
	public NotificationChain basicSetRule(ValueExpression newRule, NotificationChain msgs) {
		ValueExpression oldRule = rule;
d316 1
a316 1
	public void setRule(ValueExpression newRule) {
d525 1
a525 1
				setRule((ValueExpression)newValue);
d563 1
a563 1
				setRule((ValueExpression)null);
@


1.1
log
@[rdvorak] #123232 audits (ocl constraints) definition in genmodel
@
text
@d34 2
d106 40
d250 42
d500 4
d533 6
d571 6
d605 4
d632 4
@

