head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080930-1130:1.6
	v20080926-1245:1.6
	v20080924-1925:1.6
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080603-1553:1.5
	v20080528-1052:1.5
	v20080521:1.5
	v20080516-1543:1.5
	v20080516-1143:1.5
	v20080512-1200:1.5
	v20080508-2000:1.5
	v20080507-1326:1.5
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080417-1610:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2008.09.23.14.54.39;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	2569e48d903244567;

1.5
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2e1d4808b3814567;

1.4
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	5e5047cd7dd64567;

1.3
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	444245f8090b4567;

1.2
date	2007.01.24.21.05.02;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	6c1945b7c9f34567;

1.1
date	2006.12.21.17.14.28;	author dstadnik;	state Exp;
branches;
next	;
commitid	710b458ac0ed4567;


desc
@@


1.6
log
@[174961] Code generation support for custom actions
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenContributionItem;
import org.eclipse.gmf.codegen.gmfgen.GenContributionManager;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Contribution Item</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenContributionItemImpl#getOwner <em>Owner</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenContributionItemImpl extends EObjectImpl implements GenContributionItem {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenContributionItemImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenContributionItem();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenContributionManager getOwner() {
		if (eContainerFeatureID != GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER) return null;
		return (GenContributionManager)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				return eBasicSetContainer(null, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS, GenContributionManager.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				return getOwner();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				return getOwner() != null;
		}
		return super.eIsSet(featureID);
	}

} //GenContributionItemImpl
@


1.5
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@a13 1
import org.eclipse.gmf.codegen.gmfgen.GenApplication;
a24 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenContributionItemImpl#getApplication <em>Application</em>}</li>
a62 9
	 * @@generated NOT
	 */
	public GenApplication getApplication() {
		return getOwner() != null ? getOwner().getApplication() : (eContainer() instanceof GenApplication ? (GenApplication) eContainer() : null);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a113 2
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__APPLICATION:
				return getApplication();
a127 2
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__APPLICATION:
				return getApplication() != null;
@


1.4
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a8 1
import org.eclipse.emf.common.notify.Notification;
a11 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
a12 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a64 31
	 * @@generated
	 */
	public NotificationChain basicSetOwner(GenContributionManager newOwner, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newOwner, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setOwner(GenContributionManager newOwner) {
		if (newOwner != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER && newOwner != null)) {
			if (EcoreUtil.isAncestor(this, newOwner))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newOwner != null)
				msgs = ((InternalEObject)newOwner).eInverseAdd(this, GMFGenPackage.GEN_CONTRIBUTION_MANAGER__ITEMS, GenContributionManager.class, msgs);
			msgs = basicSetOwner(newOwner, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER, newOwner, newOwner));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d82 1
a82 1
				return basicSetOwner((GenContributionManager)otherEnd, msgs);
d96 1
a96 1
				return basicSetOwner(null, msgs);
a136 30
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				setOwner((GenContributionManager)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER:
				setOwner((GenContributionManager)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
@


1.3
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d9 1
d13 1
d15 1
d68 31
d116 1
a116 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER, msgs);
d130 1
a130 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_CONTRIBUTION_ITEM__OWNER, msgs);
d171 30
@


1.2
log
@need access to GenEditorGenerator from contribution items (i18n, #139733)
@
text
@d47 1
d76 1
d92 1
d106 1
d120 1
d136 1
@


1.1
log
@allow to specify ui contributions for rcp application in genmodel
@
text
@d9 1
d11 1
a11 1

a12 1

d14 1
d16 1
d23 5
d51 90
@

