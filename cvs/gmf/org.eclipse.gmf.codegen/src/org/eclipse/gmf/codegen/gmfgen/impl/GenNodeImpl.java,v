head	1.53;
access;
symbols
	v20081022-1925:1.53
	v20081015-1925:1.53
	v20081008-1925:1.53
	v20081001-1925:1.53
	v20080930-1130:1.53
	v20080926-1245:1.53
	v20080924-1925:1.53
	v20080917-1925:1.53
	v20080911-1728:1.53
	v20080910-1520:1.53
	v20080903-1520:1.53
	v20080827-1520:1.53
	v20080813-1520:1.52
	v20080806-1520:1.52
	v20080722-1827:1.52
	v20080718-1731:1.52
	v20080716-1600:1.52
	v20080716-1642:1.52
	R2_1_maintenance:1.52.0.2
	Root_R2_1_maintenance:1.52
	R2_1_0:1.52
	v20080610-1132:1.52
	v20080603-1553:1.51
	v20080528-1052:1.51
	v20080521:1.51
	v20080516-1543:1.51
	v20080516-1143:1.51
	v20080512-1200:1.51
	v20080508-2000:1.51
	v20080507-1326:1.51
	v20080503-1740:1.51
	v20080501-1739:1.51
	v20080425-1959:1.51
	v20080417-1610:1.51
	v20080411-0411:1.51
	v20080404-1111:1.51
	v20080322-0000:1.51
	v20080222-1200:1.51
	v20080215-1500:1.51
	v20080207-0207:1.50.2.1
	v20071222-1111:1.50
	v20071214-1111:1.50
	v20071130-1111:1.50
	v20071124-0000:1.50
	v20071112-0000:1.50
	v20071108-0000:1.50
	v20071003-0000:1.50
	v20070928-0000:1.50
	v20070921-0000:1.50
	v20070915-0000:1.50
	v20070903-0000:1.50
	v20070809-0000:1.50
	R2_0_maintenance:1.50.0.2
	R2_0:1.50
	R4_20:1.50
	v20070621-0000:1.50
	RC3_20:1.50
	v20070614-1400:1.50
	v20070608-1300:1.49
	v20070605-1400:1.49
	v20070601-1400:1.49
	v20070525-1500:1.49
	v20070520-1200:1.49
	v20070518-1300:1.49
	v20070504-1000:1.49
	v20070427-0600:1.49
	v20070420-1000:1.49
	v20070413-1300:1.49
	v20070405-1100:1.48
	v20070403-1500:1.48
	v20070330-1300:1.48
	v20060330-1300:1.48
	v20070322-1100:1.48
	v20060316-0600:1.48
	v20070307-0700:1.47
	v20070301-1200:1.47
	v20070228-2000:1.47
	v20070221-1500:1.47
	v20070208-1800:1.47
	v20070202-0200:1.39
	v20070103-0300:1.46
	M4_20:1.46
	v20061222-1800:1.46
	v20061218-1200:1.46
	v20061214-0000:1.45
	v20061120-1300:1.41
	M3_20:1.41
	v20061117-0800:1.41
	v20061027-1200:1.39
	v20061020-1000:1.39
	v20061013-1330:1.40
	v20060919-0800:1.39
	v20060907-1100:1.39
	M1_20:1.39
	v20060904-1500:1.39
	v20060824-1600:1.39
	v20060817-1500:1.39
	v20060728-0500:1.39
	v20060713-1700:1.39
	R1_0_maintenance:1.39.0.2
	R1_0:1.39
	v20060627-1200:1.39
	v20060626-1420:1.39
	v20060620-0400:1.39
	v20060616-1400:1.39
	v20060616-1200:1.39
	v20060609-1400:1.39
	v20060531-1730:1.35
	v20060530-1930:1.35
	v20060526-1200:1.35
	v20060519-1300:1.35
	v20060519-0800:1.35
	v20060512-1000:1.34
	I20060512-1000:1.34
	I20060505-1400:1.33
	I20060428-1300:1.33
	I20060424-0500:1.31
	I20060424-0300:1.31
	M6_10:1.31
	I20060407-1200:1.30
	I20060331-1000:1.28
	I20060324-0300:1.28
	I20060317-1300:1.28
	I20060317-1200:1.28
	I20060316-1300:1.28
	I20060309-1300:1.28
	M5_10:1.28
	S20060303-1600:1.28
	I20060227-1730:1.28
	I20060216-1945:1.28
	I20060210-1715:1.28
	I20060209-1815:1.28
	I20060203-0830:1.27
	I20060202-1415:1.27
	I20060129-1145:1.27
	I20060127-0900:1.27
	I20060120-1530:1.26
	I20060113-1700:1.23
	M4_10:1.23
	I20060107-1100:1.23
	I20060105-1630:1.23
	I20051230-1230:1.22
	I20051223-1100:1.22
	I20051217-0925:1.22
	I20051208-2000:1.22
	I20051201-1800:1.22
	I20051124-2000:1.21
	M3_10:1.18
	I20051118-1245:1.18
	I20051111-1800:1.18
	I20051106-0900:1.17
	v20051030:1.17
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.53
date	2008.08.22.15.20.16;	author atikhomirov;	state Exp;
branches;
next	1.52;
commitid	1abb48aed9234567;

1.52
date	2008.06.03.20.19.34;	author dstadnik;	state Exp;
branches;
next	1.51;
commitid	7d1a4845a7494567;

1.51
date	2008.02.05.14.03.01;	author ashatalin;	state Exp;
branches;
next	1.50;
commitid	3d4c47a86c954567;

1.50
date	2007.06.12.18.05.31;	author dstadnik;	state Exp;
branches
	1.50.2.1;
next	1.49;
commitid	5e91466ee0674567;

1.49
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.48;
commitid	725b461c97d64567;

1.48
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.47;
commitid	444245f8090b4567;

1.47
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.46;
commitid	21cf45be38464567;

1.46
date	2006.12.15.15.48.28;	author dstadnik;	state Exp;
branches;
next	1.45;
commitid	5de44582c3b54567;

1.45
date	2006.12.12.12.00.00;	author dstadnik;	state Exp;
branches;
next	1.44;
commitid	2d28457e99bb4567;

1.44
date	2006.12.11.19.39.19;	author dstadnik;	state Exp;
branches;
next	1.43;
commitid	4cb0457db3e64567;

1.43
date	2006.12.11.19.33.23;	author dstadnik;	state Exp;
branches;
next	1.42;
commitid	457e457db27f4567;

1.42
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	1.41;
commitid	34a457da6a14567;

1.41
date	2006.10.18.14.21.42;	author dstadnik;	state Exp;
branches;
next	1.40;

1.40
date	2006.09.26.15.41.04;	author atikhomirov;	state Exp;
branches;
next	1.39;

1.39
date	2006.06.07.13.52.17;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.06.07.09.29.00;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.06.06.12.02.13;	author dstadnik;	state Exp;
branches;
next	1.36;

1.36
date	2006.06.06.10.52.00;	author dstadnik;	state Exp;
branches;
next	1.35;

1.35
date	2006.05.18.12.38.57;	author dstadnik;	state Exp;
branches;
next	1.34;

1.34
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.04.27.11.11.11;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.04.26.07.39.20;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.04.06.14.16.01;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.04.03.12.52.48;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.02.03.14.04.47;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.23.10.43.51;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.17.10.55.00;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.28.16.09.46;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.24.08.51.27;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.24.13.32.02;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.11.16.43.53;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.11.12.25.35;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.07.13.01.35;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.04.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.03.19.09.14;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;

1.50.2.1
date	2008.02.05.13.57.41;	author ashatalin;	state Exp;
branches;
next	;
commitid	387b47a86b554567;


desc
@@


1.53
log
@[243151] mgolubev - explicit source/target for links
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.ECollections;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.EcoreEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenLinkEnd;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getGenOutgoingLinks <em>Gen Outgoing Links</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getGenIncomingLinks <em>Gen Incoming Links</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getModelFacet <em>Model Facet</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getLabels <em>Labels</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getCompartments <em>Compartments</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getPrimaryDragEditPolicyQualifiedClassName <em>Primary Drag Edit Policy Qualified Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getGraphicalNodeEditPolicyClassName <em>Graphical Node Edit Policy Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getCreateCommandClassName <em>Create Command Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getReorientedIncomingLinks <em>Reoriented Incoming Links</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenNodeImpl extends GenChildContainerImpl implements GenNode {
	/**
	 * The cached value of the '{@@link #getModelFacet() <em>Model Facet</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getModelFacet()
	 * @@generated
	 * @@ordered
	 */
	protected TypeModelFacet modelFacet;

	/**
	 * The cached value of the '{@@link #getLabels() <em>Labels</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLabels()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenNodeLabel> labels;

	/**
	 * The cached value of the '{@@link #getCompartments() <em>Compartments</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCompartments()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenCompartment> compartments;

	/**
	 * The default value of the '{@@link #getPrimaryDragEditPolicyQualifiedClassName() <em>Primary Drag Edit Policy Qualified Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPrimaryDragEditPolicyQualifiedClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getPrimaryDragEditPolicyQualifiedClassName() <em>Primary Drag Edit Policy Qualified Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPrimaryDragEditPolicyQualifiedClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String primaryDragEditPolicyQualifiedClassName = PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getGraphicalNodeEditPolicyClassName() <em>Graphical Node Edit Policy Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGraphicalNodeEditPolicyClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getGraphicalNodeEditPolicyClassName() <em>Graphical Node Edit Policy Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGraphicalNodeEditPolicyClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String graphicalNodeEditPolicyClassName = GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getCreateCommandClassName() <em>Create Command Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCreateCommandClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String CREATE_COMMAND_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getCreateCommandClassName() <em>Create Command Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCreateCommandClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String createCommandClassName = CREATE_COMMAND_CLASS_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenNodeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenNode();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenLink> getGenOutgoingLinks() {
		return GenLinkEndOperations.getGenOutgoingLinks(this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenLink> getGenIncomingLinks() {
		return GenLinkEndOperations.getGenIncomingLinks(this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public GenClass getDomainMetaClass() {
		return getModelFacet() == null ? null : getModelFacet().getMetaClass();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getGraphicalNodeEditPolicyQualifiedClassName() {
		return getDiagram().getEditPoliciesPackageName() + '.' + getGraphicalNodeEditPolicyClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getCreateCommandQualifiedClassName() {
		return getDiagram().getEditCommandsPackageName() + '.' + getCreateCommandClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_NODE__LABELS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getLabels()).basicAdd(otherEnd, msgs);
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getCompartments()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return basicSetModelFacet(null, msgs);
			case GMFGenPackage.GEN_NODE__LABELS:
				return ((InternalEList<?>)getLabels()).basicRemove(otherEnd, msgs);
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				return ((InternalEList<?>)getCompartments()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_NODE__GEN_OUTGOING_LINKS:
				return getGenOutgoingLinks();
			case GMFGenPackage.GEN_NODE__GEN_INCOMING_LINKS:
				return getGenIncomingLinks();
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return getModelFacet();
			case GMFGenPackage.GEN_NODE__LABELS:
				return getLabels();
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				return getCompartments();
			case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME:
				return getPrimaryDragEditPolicyQualifiedClassName();
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				return getGraphicalNodeEditPolicyClassName();
			case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME:
				return getCreateCommandClassName();
			case GMFGenPackage.GEN_NODE__REORIENTED_INCOMING_LINKS:
				return getReorientedIncomingLinks();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)newValue);
				return;
			case GMFGenPackage.GEN_NODE__LABELS:
				getLabels().clear();
				getLabels().addAll((Collection<? extends GenNodeLabel>)newValue);
				return;
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				getCompartments().clear();
				getCompartments().addAll((Collection<? extends GenCompartment>)newValue);
				return;
			case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME:
				setPrimaryDragEditPolicyQualifiedClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				setGraphicalNodeEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME:
				setCreateCommandClassName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)null);
				return;
			case GMFGenPackage.GEN_NODE__LABELS:
				getLabels().clear();
				return;
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				getCompartments().clear();
				return;
			case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME:
				setPrimaryDragEditPolicyQualifiedClassName(PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				setGraphicalNodeEditPolicyClassName(GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME:
				setCreateCommandClassName(CREATE_COMMAND_CLASS_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_NODE__GEN_OUTGOING_LINKS:
				return !getGenOutgoingLinks().isEmpty();
			case GMFGenPackage.GEN_NODE__GEN_INCOMING_LINKS:
				return !getGenIncomingLinks().isEmpty();
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return modelFacet != null;
			case GMFGenPackage.GEN_NODE__LABELS:
				return labels != null && !labels.isEmpty();
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				return compartments != null && !compartments.isEmpty();
			case GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME:
				return PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT == null ? primaryDragEditPolicyQualifiedClassName != null : !PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME_EDEFAULT.equals(primaryDragEditPolicyQualifiedClassName);
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				return GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? graphicalNodeEditPolicyClassName != null : !GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(graphicalNodeEditPolicyClassName);
			case GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME:
				return CREATE_COMMAND_CLASS_NAME_EDEFAULT == null ? createCommandClassName != null : !CREATE_COMMAND_CLASS_NAME_EDEFAULT.equals(createCommandClassName);
			case GMFGenPackage.GEN_NODE__REORIENTED_INCOMING_LINKS:
				return !getReorientedIncomingLinks().isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
		if (baseClass == GenLinkEnd.class) {
			switch (derivedFeatureID) {
				case GMFGenPackage.GEN_NODE__GEN_OUTGOING_LINKS: return GMFGenPackage.GEN_LINK_END__GEN_OUTGOING_LINKS;
				case GMFGenPackage.GEN_NODE__GEN_INCOMING_LINKS: return GMFGenPackage.GEN_LINK_END__GEN_INCOMING_LINKS;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
		if (baseClass == GenLinkEnd.class) {
			switch (baseFeatureID) {
				case GMFGenPackage.GEN_LINK_END__GEN_OUTGOING_LINKS: return GMFGenPackage.GEN_NODE__GEN_OUTGOING_LINKS;
				case GMFGenPackage.GEN_LINK_END__GEN_INCOMING_LINKS: return GMFGenPackage.GEN_NODE__GEN_INCOMING_LINKS;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenNodeLabel> getLabels() {
		if (labels == null) {
			labels = new EObjectContainmentWithInverseEList<GenNodeLabel>(GenNodeLabel.class, this, GMFGenPackage.GEN_NODE__LABELS, GMFGenPackage.GEN_NODE_LABEL__NODE);
		}
		return labels;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenCompartment> getCompartments() {
		if (compartments == null) {
			compartments = new EObjectWithInverseResolvingEList<GenCompartment>(GenCompartment.class, this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GMFGenPackage.GEN_COMPARTMENT__NODE);
		}
		return compartments;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getPrimaryDragEditPolicyQualifiedClassName() {
		return primaryDragEditPolicyQualifiedClassName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPrimaryDragEditPolicyQualifiedClassName(String newPrimaryDragEditPolicyQualifiedClassName) {
		String oldPrimaryDragEditPolicyQualifiedClassName = primaryDragEditPolicyQualifiedClassName;
		primaryDragEditPolicyQualifiedClassName = newPrimaryDragEditPolicyQualifiedClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__PRIMARY_DRAG_EDIT_POLICY_QUALIFIED_CLASS_NAME, oldPrimaryDragEditPolicyQualifiedClassName, primaryDragEditPolicyQualifiedClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getGraphicalNodeEditPolicyClassNameGen() {
		return graphicalNodeEditPolicyClassName;
	}

	public String getGraphicalNodeEditPolicyClassName() {
		return getValidClassName(getGraphicalNodeEditPolicyClassNameGen(), this, GRAPHICAL_NODE_EDIT_POLICY_SUFFIX);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGraphicalNodeEditPolicyClassName(String newGraphicalNodeEditPolicyClassName) {
		String oldGraphicalNodeEditPolicyClassName = graphicalNodeEditPolicyClassName;
		graphicalNodeEditPolicyClassName = newGraphicalNodeEditPolicyClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME, oldGraphicalNodeEditPolicyClassName, graphicalNodeEditPolicyClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getCreateCommandClassNameGen() {
		return createCommandClassName;
	}

	public String getCreateCommandClassName() {
		return GenCommonBaseImpl.getValidClassName(getCreateCommandClassNameGen(), this, CREATE_COMMAND_SUFFIX);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCreateCommandClassName(String newCreateCommandClassName) {
		String oldCreateCommandClassName = createCommandClassName;
		createCommandClassName = newCreateCommandClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__CREATE_COMMAND_CLASS_NAME, oldCreateCommandClassName, createCommandClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TypeModelFacet getModelFacet() {
		return modelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetModelFacet(TypeModelFacet newModelFacet, NotificationChain msgs) {
		TypeModelFacet oldModelFacet = modelFacet;
		modelFacet = newModelFacet;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__MODEL_FACET, oldModelFacet, newModelFacet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setModelFacet(TypeModelFacet newModelFacet) {
		if (newModelFacet != modelFacet) {
			NotificationChain msgs = null;
			if (modelFacet != null)
				msgs = ((InternalEObject)modelFacet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_FACET, null, msgs);
			if (newModelFacet != null)
				msgs = ((InternalEObject)newModelFacet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_FACET, null, msgs);
			msgs = basicSetModelFacet(newModelFacet, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__MODEL_FACET, newModelFacet, newModelFacet));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (primaryDragEditPolicyQualifiedClassName: ");
		result.append(primaryDragEditPolicyQualifiedClassName);
		result.append(", graphicalNodeEditPolicyClassName: ");
		result.append(graphicalNodeEditPolicyClassName);
		result.append(", createCommandClassName: ");
		result.append(createCommandClassName);
		result.append(')');
		return result.toString();
	}

	public String getClassNamePrefix() {
		// should be consistent with ClassNamingStrategy
		if (getDomainMetaClass() != null) {
			String name = getDomainMetaClass().getName();
			if (!isEmpty(name)) {
				return getValidClassName(name);
			}
		}
		return CLASS_NAME_PREFIX;
	}

	@@Override
	public EList<GenNode> getAssistantNodes() {
		BasicEList<GenNode> nodes = new BasicEList<GenNode>(super.getAssistantNodes());
		for (GenCompartment compartment : getCompartments()) {
			if (compartment.isListLayout()) {
				nodes.addAll(compartment.getContainedNodes());
			}
		}
		return nodes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenLink> getReorientedIncomingLinks() {
		if (getModelFacet() == null || getModelFacet().getMetaClass() == null || getModelFacet().getMetaClass().getEcoreClass() == null) {
			return ECollections.emptyEList();
		}
		// [artem] XXX not sure there might be two equal links in the genDiagram.links
		// but 'set' was there in the original template. legacy is the only reason i kept it,
		Set<GenLink> reorientedLinks = new HashSet<GenLink>();
		for (GenLink genLink : getDiagram().getLinks()) {
			if (!genLink.isViewDirectionAlignedWithModel() || genLink.getModelFacet() == null) {
				continue;
			}
			GenClass incomingClass;
			GenClass outgoingClass;
			if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
				outgoingClass = modelFacet.getSourceMetaFeature() == null
					? modelFacet.getContainmentMetaFeature().getGenClass()
					: modelFacet.getSourceMetaFeature().getTypeGenClass();
				incomingClass = modelFacet.getTargetMetaFeature().getTypeGenClass();
			} else if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
				GenFeature metaFeature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature();
				outgoingClass = metaFeature.getGenClass();
				incomingClass = metaFeature.getTypeGenClass();
			} else {
				continue;
			}
			if (incomingClass == null || incomingClass.getEcoreClass() == null || outgoingClass == null || outgoingClass.getEcoreClass() == null) {
				continue;
			}
			GenClass nodeMetaClass = getModelFacet().getMetaClass();
			boolean canBeSource = outgoingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
			boolean canBeTarget = incomingClass.getEcoreClass().isSuperTypeOf(nodeMetaClass.getEcoreClass());
/*
 * This logic is currently alligned with the logic in NodeItemSemanticEditPolicy.javajet i.e.:
 *
 * - we do not perform link rotation if this link could be drawn from instance of this EP 
 *   to the instance of this EP.
 *
 * - if link could be created in "opposite" direction (genLink.isIncomingCreationAllowed() == true)
 *   and this EP could be only a source of the link then we should reverse link at the end of link 
 *   creation
 *
 */
			if (canBeSource && canBeTarget) {
				continue;
			}
			if (genLink.isIncomingCreationAllowed() && canBeSource) {
				reorientedLinks.add(genLink);
			}
		}
		return new EcoreEList.UnmodifiableEList<GenLink>(this, GMFGenPackage.eINSTANCE.getGenNode_ReorientedIncomingLinks(), reorientedLinks.size(), reorientedLinks.toArray());
	}
	
	public boolean isSansDomain() {
		return getModelFacet() == null;
	}
} //GenNodeImpl
@


1.52
log
@[235337] prevent npe for invalid models
@
text
@d31 1
d44 2
d173 18
d256 4
d349 4
d376 34
@


1.51
log
@[216929] - Return EStructuralFeature$Setting instance from GenNodeImpl.getReorientedIncomingLinks
@
text
@d528 1
a528 1
		if (getModelFacet() == null) {
d553 3
@


1.50
log
@add method to find modeling assistant child nodes
@
text
@d25 1
d574 1
a574 1
		return new BasicEList.UnmodifiableEList<GenLink>(reorientedLinks.size(), reorientedLinks.toArray());
@


1.50.2.1
log
@[216929] - Return EStructuralFeature$Setting instance from GenNodeImpl.getReorientedIncomingLinks
@
text
@a24 1
import org.eclipse.emf.ecore.util.EcoreEList;
d573 1
a573 1
		return new EcoreEList.UnmodifiableEList<GenLink>(this, GMFGenPackage.eINSTANCE.getGenNode_ReorientedIncomingLinks(), reorientedLinks.size(), reorientedLinks.toArray());
@


1.49
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d510 11
@


1.48
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d63 1
a63 1
	protected TypeModelFacet modelFacet = null;
d73 1
a73 1
	protected EList<GenNodeLabel> labels = null;
d83 1
a83 1
	protected EList<GenCompartment> compartments = null;
@


1.47
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@a10 1
import java.util.Iterator;
d18 1
d73 1
a73 1
	protected EList labels = null;
d83 1
a83 1
	protected EList compartments = null;
d159 1
d196 2
d201 1
a201 1
				return ((InternalEList)getLabels()).basicAdd(otherEnd, msgs);
d203 1
a203 1
				return ((InternalEList)getCompartments()).basicAdd(otherEnd, msgs);
d213 1
d219 1
a219 1
				return ((InternalEList)getLabels()).basicRemove(otherEnd, msgs);
d221 1
a221 1
				return ((InternalEList)getCompartments()).basicRemove(otherEnd, msgs);
d231 1
d257 2
d266 1
a266 1
				getLabels().addAll((Collection)newValue);
d270 1
a270 1
				getCompartments().addAll((Collection)newValue);
d290 1
d320 1
d346 1
a346 1
	public EList getLabels() {
d348 1
a348 1
			labels = new EObjectContainmentWithInverseEList(GenNodeLabel.class, this, GMFGenPackage.GEN_NODE__LABELS, GMFGenPackage.GEN_NODE_LABEL__NODE);
d358 1
a358 1
	public EList getCompartments() {
d360 1
a360 1
			compartments = new EObjectWithInverseResolvingEList(GenCompartment.class, this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GMFGenPackage.GEN_COMPARTMENT__NODE);
d484 1
d515 1
a515 1
	public EList getReorientedIncomingLinks() {
d517 1
a517 1
			return new BasicEList.UnmodifiableEList(0, new Object[0]);
d522 1
a522 2
		for (Iterator links = getDiagram().getLinks().iterator(); links.hasNext(); ) {
			GenLink genLink = (GenLink) links.next();
d562 1
a562 1
		return new BasicEList.UnmodifiableEList(reorientedLinks.size(), reorientedLinks.toArray());
@


1.46
log
@remove unused edit policy name; add custom primary drag edit policy name
@
text
@a8 1
import java.util.ArrayList;
a9 1
import java.util.Collections;
a11 1
import java.util.List;
d555 4
@


1.45
log
@change getRevertedIncomingLinks() method to property for xpand templates
@
text
@d48 1
d89 20
d238 2
d268 3
d297 3
d323 2
d364 21
d482 3
a484 1
		result.append(" (graphicalNodeEditPolicyClassName: ");
@


1.44
log
@expose getReorientedIncomingGenLinks() in model
@
text
@d50 1
d221 2
d298 2
a448 6
	public boolean needsGraphicalNodeEditPolicy() {
		// XXX not good to collect all links just to answer this question.
		// Investigate better way to find this out
		return getModelFacet() != null && !getReorientedIncomingGenLinks().isEmpty();
	}

d454 1
a454 1
	public EList getReorientedIncomingGenLinks() {
d456 1
a456 1
			return new BasicEList();
d502 1
a502 1
		return new BasicEList(reorientedLinks);
@


1.43
log
@expose getReorientedIncomingGenLinks() in model
@
text
@d453 1
a453 1
	 * @@generated
@


1.42
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d21 1
d356 1
a356 1
	
d450 6
a455 1
	public List<GenLink> getReorientedIncomingGenLinks() {
d457 1
a457 1
			return Collections.emptyList();
d503 1
a503 1
		return new ArrayList<GenLink>(reorientedLinks);
@


1.41
log
@#161380 simplify feature model facets
@
text
@d48 1
d106 20
d164 9
d217 2
d244 3
d270 3
d292 2
d352 25
d426 2
@


1.40
log
@do not generate GraphicalNodeEditPolicy unless there's smth for it to do
@
text
@d28 1
a28 1
import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;
d402 2
a403 2
			} else if (genLink.getModelFacet() instanceof FeatureModelFacet) {
				GenFeature metaFeature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature();
@


1.39
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@d9 1
d11 5
d18 1
d28 1
d31 1
d34 1
d375 57
@


1.38
log
@provide Node/Link/Label/Diagram class prefix instead of Unknown for elements without model facet; add extra empty values checks
@
text
@d356 8
a363 1
		return getDomainMetaClass() == null ? "Node" : getDomainMetaClass().getName();
@


1.37
log
@refactor getUniqueIdentifier() : all GenCommonBase implementations use the same logic so move it in GenCommonBaseImpl
@
text
@d282 1
a282 5
		String value = getGraphicalNodeEditPolicyClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePrefix() + GRAPHICAL_NODE_EDIT_POLICY_SUFFIX;
		}
		return value;
d356 1
a356 1
		return getDomainMetaClass() == null ? "Unknown" : getDomainMetaClass().getName();
@


1.36
log
@#145502 deprecate getClassNameSuffix()
@
text
@a361 5

	public String getUniqueIdentifier() {
		return getClassNamePrefix() + "_" + getVisualID();
	}
	
@


1.35
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d284 1
a284 1
			value = getClassNamePart() + GRAPHICAL_NODE_EDIT_POLICY_SUFFIX;
@


1.34
log
@#133836 Creating a child node without a label causes error
@
text
@d360 1
a360 1
		return getDomainMetaClass() == null ? "Node" + hashCode() : getDomainMetaClass().getName();
d364 1
a364 1
		return getDomainMetaClass().getInterfaceName() + "_" + getVisualID();
@


1.33
log
@regenerate
@
text
@a129 2
	public abstract boolean isListContainerEntry();

@


1.32
log
@simplify list container entry check
@
text
@d130 2
@


1.31
log
@#126200 register element types in xml
@
text
@a21 2
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
a132 15
	 * @@generated NOT
	 */
	public boolean isListContainerEntry() {
		if (this instanceof GenChildNode) {
			GenChildNode childNode = (GenChildNode) this;
			if (childNode.getContainers().size() > 0) {
				return ((GenChildContainer) childNode.getContainers().get(0)).isListLayout();
			}
		}
		return false;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
@


1.30
log
@#135194 add @@generated NOT
@
text
@a20 1
import org.eclipse.gmf.codegen.gmfgen.ElementType;
a35 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getEditHelperClassName <em>Edit Helper Class Name</em>}</li>
a46 20
	 * The default value of the '{@@link #getEditHelperClassName() <em>Edit Helper Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditHelperClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDIT_HELPER_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditHelperClassName() <em>Edit Helper Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditHelperClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String editHelperClassName = EDIT_HELPER_CLASS_NAME_EDEFAULT;

	/**
a116 29
	 * @@generated
	 */
	public String getEditHelperClassNameGen() {
		return editHelperClassName;
	}

	public String getEditHelperClassName() {
		String value = getEditHelperClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePart() + ElementType.EDIT_HELPER_SUFFIX;
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditHelperClassName(String newEditHelperClassName) {
		String oldEditHelperClassName = editHelperClassName;
		editHelperClassName = newEditHelperClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME, oldEditHelperClassName, editHelperClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a185 2
			case GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME:
				return getEditHelperClassName();
a204 3
			case GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME:
				setEditHelperClassName((String)newValue);
				return;
a229 3
			case GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME:
				setEditHelperClassName(EDIT_HELPER_CLASS_NAME_EDEFAULT);
				return;
a252 2
			case GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME:
				return EDIT_HELPER_CLASS_NAME_EDEFAULT == null ? editHelperClassName != null : !EDIT_HELPER_CLASS_NAME_EDEFAULT.equals(editHelperClassName);
a269 30
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == ElementType.class) {
			switch (derivedFeatureID) {
				case GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME: return GMFGenPackage.ELEMENT_TYPE__EDIT_HELPER_CLASS_NAME;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == ElementType.class) {
			switch (baseFeatureID) {
				case GMFGenPackage.ELEMENT_TYPE__EDIT_HELPER_CLASS_NAME: return GMFGenPackage.GEN_NODE__EDIT_HELPER_CLASS_NAME;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a320 9
	 * @@generated NOT
	 */
	public String getEditHelperQualifiedClassName() {
		return getDiagram().getEditHelpersPackageName() + '.' + getEditHelperClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d370 1
a370 3
		result.append(" (editHelperClassName: ");
		result.append(editHelperClassName);
		result.append(", graphicalNodeEditPolicyClassName: ");
@


1.29
log
@#126200 register element types in xml
@
text
@d412 1
a412 1
	 * @@generated
@


1.28
log
@do not use '$' in default class names; they are resolved incorrectly (it's an inner class separator)
@
text
@d21 1
d37 1
d49 20
d139 29
d237 2
d258 3
d286 3
d312 2
d331 30
d414 9
d470 3
a472 1
		result.append(" (graphicalNodeEditPolicyClassName: ");
@


1.27
log
@#124834 do not throw NPE while creating node label
@
text
@d377 1
a377 1
		return getDomainMetaClass() == null ? "GenNode$" + hashCode() : getDomainMetaClass().getName();
@


1.26
log
@#124413
Cleaning up the gmfgen model
@
text
@d120 1
a120 1
		return getModelFacet().getMetaClass();
@


1.25
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d22 2
d135 1
a135 1
	 * @@generated
d138 7
a144 3
		// TODO: implement this method
		// Ensure that you remove @@generated or mark it @@generated NOT
		throw new UnsupportedOperationException();
@


1.24
log
@#123411 Support diagram without palette
cleanup (deprecated attribute removed, as well as incorrect javadoc)
@
text
@d19 1
a20 1
import org.eclipse.gmf.codegen.gmfgen.CompartmentPlacementKind;
a22 1
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
a33 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getDiagram <em>Diagram</em>}</li>
a36 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getChildContainersPlacement <em>Child Containers Placement</em>}</li>
d43 1
a43 1
public class GenNodeImpl extends GenChildContainerImpl implements GenNode {
d65 1
a65 1
	 * The cached value of the '{@@link #getCompartments() <em>Compartments</em>}' containment reference list.
a74 20
	 * The default value of the '{@@link #getChildContainersPlacement() <em>Child Containers Placement</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildContainersPlacement()
	 * @@generated
	 * @@ordered
	 */
	protected static final CompartmentPlacementKind CHILD_CONTAINERS_PLACEMENT_EDEFAULT = CompartmentPlacementKind.TOOLBAR_LITERAL;

	/**
	 * The cached value of the '{@@link #getChildContainersPlacement() <em>Child Containers Placement</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildContainersPlacement()
	 * @@generated
	 * @@ordered
	 */
	protected CompartmentPlacementKind childContainersPlacement = CHILD_CONTAINERS_PLACEMENT_EDEFAULT;

	/**
d115 1
a115 1
	 * @@generated
d117 2
a118 3
	public GenDiagram getDiagram() {
		if (eContainerFeatureID != GMFGenPackage.GEN_NODE__DIAGRAM) return null;
		return (GenDiagram)eContainer();
d126 2
a127 2
	public GenClass getDomainMetaClass() {
		return getModelFacet().getMetaClass();
d133 1
a133 1
	 * @@generated NOT
d135 4
a138 2
	public String getGraphicalNodeEditPolicyQualifiedClassName() {
		return getDiagram().getEditPoliciesPackageName() + '.' + getGraphicalNodeEditPolicyClassName();
a147 4
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_NODE__DIAGRAM, msgs);
a162 2
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				return eBasicSetContainer(null, GMFGenPackage.GEN_NODE__DIAGRAM, msgs);
a177 13
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__NODES, GenDiagram.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a179 2
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				return getDiagram();
a185 2
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				return getChildContainersPlacement();
a209 3
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement((CompartmentPlacementKind)newValue);
				return;
a232 3
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement(CHILD_CONTAINERS_PLACEMENT_EDEFAULT);
				return;
a246 2
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				return getDiagram() != null;
a252 2
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				return childContainersPlacement != CHILD_CONTAINERS_PLACEMENT_EDEFAULT;
d278 1
a278 1
			compartments = new EObjectContainmentWithInverseEList(GenCompartment.class, this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GMFGenPackage.GEN_COMPARTMENT__NODE);
a287 21
	public CompartmentPlacementKind getChildContainersPlacement() {
		return childContainersPlacement;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setChildContainersPlacement(CompartmentPlacementKind newChildContainersPlacement) {
		CompartmentPlacementKind oldChildContainersPlacement = childContainersPlacement;
		childContainersPlacement = newChildContainersPlacement == null ? CHILD_CONTAINERS_PLACEMENT_EDEFAULT : newChildContainersPlacement;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT, oldChildContainersPlacement, childContainersPlacement));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d364 1
a364 3
		result.append(" (childContainersPlacement: ");
		result.append(childContainersPlacement);
		result.append(", graphicalNodeEditPolicyClassName: ");
a373 4
	public String getClassNameSuffux() {
		return "Node";
	}
	
@


1.23
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@a39 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#isExplicitContentPane <em>Explicit Content Pane</em>}</li>
a97 20
	 * The default value of the '{@@link #isExplicitContentPane() <em>Explicit Content Pane</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isExplicitContentPane()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean EXPLICIT_CONTENT_PANE_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isExplicitContentPane() <em>Explicit Content Pane</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isExplicitContentPane()
	 * @@generated
	 * @@ordered
	 */
	protected boolean explicitContentPane = EXPLICIT_CONTENT_PANE_EDEFAULT;

	/**
a230 2
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				return isExplicitContentPane() ? Boolean.TRUE : Boolean.FALSE;
a257 3
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				setExplicitContentPane(((Boolean)newValue).booleanValue());
				return;
a283 3
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				setExplicitContentPane(EXPLICIT_CONTENT_PANE_EDEFAULT);
				return;
a307 2
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				return explicitContentPane != EXPLICIT_CONTENT_PANE_EDEFAULT;
a363 21
	public boolean isExplicitContentPane() {
		return explicitContentPane;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setExplicitContentPane(boolean newExplicitContentPane) {
		boolean oldExplicitContentPane = explicitContentPane;
		explicitContentPane = newExplicitContentPane;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE, oldExplicitContentPane, explicitContentPane));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a441 2
		result.append(", explicitContentPane: ");
		result.append(explicitContentPane);
@


1.22
log
@#117749 & #118040 generate unique names for the shared elements in mapping model
@
text
@a15 1
import org.eclipse.emf.ecore.EStructuralFeature;
a26 1
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
d163 1
a163 1
		return (GenDiagram)eContainer;
d189 161
a487 263
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_NODE__DIAGRAM:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_NODE__DIAGRAM, msgs);
				case GMFGenPackage.GEN_NODE__LABELS:
					return ((InternalEList)getLabels()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_NODE__COMPARTMENTS:
					return ((InternalEList)getCompartments()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_NODE__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_NODE__DIAGRAM:
					return eBasicSetContainer(null, GMFGenPackage.GEN_NODE__DIAGRAM, msgs);
				case GMFGenPackage.GEN_NODE__MODEL_FACET:
					return basicSetModelFacet(null, msgs);
				case GMFGenPackage.GEN_NODE__LABELS:
					return ((InternalEList)getLabels()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_NODE__COMPARTMENTS:
					return ((InternalEList)getCompartments()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_NODE__DIAGRAM:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__NODES, GenDiagram.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
		}
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_NODE__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_NODE__VIEWMAP:
				return getViewmap();
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				return getChildNodes();
			case GMFGenPackage.GEN_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return getCanonicalEditPolicyClassName();
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				return getDiagram();
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return getModelFacet();
			case GMFGenPackage.GEN_NODE__LABELS:
				return getLabels();
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				return getCompartments();
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				return getChildContainersPlacement();
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				return isExplicitContentPane() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				return getGraphicalNodeEditPolicyClassName();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_NODE__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)newValue);
				return;
			case GMFGenPackage.GEN_NODE__LABELS:
				getLabels().clear();
				getLabels().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				getCompartments().clear();
				getCompartments().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement((CompartmentPlacementKind)newValue);
				return;
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				setExplicitContentPane(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				setGraphicalNodeEditPolicyClassName((String)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_NODE__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				getChildNodes().clear();
				return;
			case GMFGenPackage.GEN_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName(CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)null);
				return;
			case GMFGenPackage.GEN_NODE__LABELS:
				getLabels().clear();
				return;
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				getCompartments().clear();
				return;
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement(CHILD_CONTAINERS_PLACEMENT_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				setExplicitContentPane(EXPLICIT_CONTENT_PANE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				setGraphicalNodeEditPolicyClassName(GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_NODE__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_NODE__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_NODE__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_NODE__VIEWMAP:
				return viewmap != null;
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
			case GMFGenPackage.GEN_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : !CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(canonicalEditPolicyClassName);
			case GMFGenPackage.GEN_NODE__DIAGRAM:
				return getDiagram() != null;
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return modelFacet != null;
			case GMFGenPackage.GEN_NODE__LABELS:
				return labels != null && !labels.isEmpty();
			case GMFGenPackage.GEN_NODE__COMPARTMENTS:
				return compartments != null && !compartments.isEmpty();
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS_PLACEMENT:
				return childContainersPlacement != CHILD_CONTAINERS_PLACEMENT_EDEFAULT;
			case GMFGenPackage.GEN_NODE__EXPLICIT_CONTENT_PANE:
				return explicitContentPane != EXPLICIT_CONTENT_PANE_EDEFAULT;
			case GMFGenPackage.GEN_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				return GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? graphicalNodeEditPolicyClassName != null : !GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(graphicalNodeEditPolicyClassName);
		}
		return eDynamicIsSet(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.21
log
@#112318 Do not overwrite paintFigure() method in node edit part when specific figure class is specified
@
text
@d262 3
a264 3
		String name = getGraphicalNodeEditPolicyClassNameGen();
		if (name == null || name.length() == 0) {
			return getClassNamePrefix() + getClassNameSuffux() + "GraphicalNodeEditPolicy"; //$NON-NLS-1$
d266 1
a266 1
		return name;
@


1.20
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d42 1
d101 20
d236 21
d429 2
d483 3
d536 3
d579 2
d598 2
@


1.19
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d375 2
d422 3
d474 3
d517 2
@


1.18
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d42 1
d100 20
d159 9
d215 29
d385 2
d434 3
d481 3
d519 2
d536 2
@


1.17
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d308 2
d346 3
d393 3
d434 2
@


1.16
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d23 1
a23 2
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
d40 1
a40 2
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getChildContainers <em>Child Containers</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getChildNodes <em>Child Nodes</em>}</li>
d47 1
a47 1
public class GenNodeImpl extends GenCommonBaseImpl implements GenNode {
d69 1
a69 1
	 * The cached value of the '{@@link #getChildContainers() <em>Child Containers</em>}' containment reference list.
d72 1
a72 1
	 * @@see #getChildContainers()
d76 1
a76 11
	protected EList childContainers = null;

	/**
	 * The cached value of the '{@@link #getChildNodes() <em>Child Nodes</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildNodes()
	 * @@generated
	 * @@ordered
	 */
	protected EList childNodes = null;
d152 3
a154 3
	public EList getChildContainers() {
		if (childContainers == null) {
			childContainers = new EObjectContainmentWithInverseEList(GenChildContainer.class, this, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS, GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE);
d156 1
a156 13
		return childContainers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList getChildNodes() {
		if (childNodes == null) {
			childNodes = new EObjectContainmentWithInverseEList(GenChildNode.class, this, GMFGenPackage.GEN_NODE__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE);
		}
		return childNodes;
d231 2
d239 2
a240 4
				case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS:
					return ((InternalEList)getChildContainers()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
d260 2
d268 2
a269 4
				case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS:
					return ((InternalEList)getChildContainers()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
d312 2
d320 2
a321 4
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS:
				return getChildContainers();
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				return getChildNodes();
d350 4
d361 3
a363 7
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS:
				getChildContainers().clear();
				getChildContainers().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
d394 3
d403 2
a404 5
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS:
				getChildContainers().clear();
				return;
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				getChildNodes().clear();
d430 2
d438 2
a439 4
			case GMFGenPackage.GEN_NODE__CHILD_CONTAINERS:
				return childContainers != null && !childContainers.isEmpty();
			case GMFGenPackage.GEN_NODE__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
@


1.15
log
@#112196 model facets in use for GenNode
@
text
@a25 1
import org.eclipse.gmf.codegen.gmfgen.GenElementInitializer;
a27 1
import org.eclipse.gmf.codegen.gmfgen.ModelElementSelector;
d49 1
a49 1
public class GenNodeImpl extends GenBaseElementImpl implements GenNode {
a254 4
				case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER:
					if (modelElementInitializer != null)
						msgs = ((InternalEObject)modelElementInitializer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER, null, msgs);
					return basicSetModelElementInitializer((GenElementInitializer)otherEnd, msgs);
a283 4
				case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_SELECTOR:
					return basicSetModelElementSelector(null, msgs);
				case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER:
					return basicSetModelElementInitializer(null, msgs);
a335 4
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_SELECTOR:
				return getModelElementSelector();
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER:
				return getModelElementInitializer();
a373 6
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_SELECTOR:
				setModelElementSelector((ModelElementSelector)newValue);
				return;
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER:
				setModelElementInitializer((GenElementInitializer)newValue);
				return;
a417 6
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_SELECTOR:
				setModelElementSelector((ModelElementSelector)null);
				return;
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER:
				setModelElementInitializer((GenElementInitializer)null);
				return;
a453 4
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_SELECTOR:
				return modelElementSelector != null;
			case GMFGenPackage.GEN_NODE__MODEL_ELEMENT_INITIALIZER:
				return modelElementInitializer != null;
@


1.14
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d41 1
a41 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getDomainMetaClass <em>Domain Meta Class</em>}</li>
a45 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getModelFacet <em>Model Facet</em>}</li>
d53 1
a53 1
	 * The cached value of the '{@@link #getDomainMetaClass() <em>Domain Meta Class</em>}' reference.
d56 1
a56 1
	 * @@see #getDomainMetaClass()
d60 1
a60 1
	protected GenClass domainMetaClass = null;
a112 10
	 * The cached value of the '{@@link #getModelFacet() <em>Model Facet</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getModelFacet()
	 * @@generated
	 * @@ordered
	 */
	protected TypeModelFacet modelFacet = null;

	/**
d143 1
a143 1
	 * @@generated
d146 1
a146 30
		if (domainMetaClass != null && domainMetaClass.eIsProxy()) {
			GenClass oldDomainMetaClass = domainMetaClass;
			domainMetaClass = (GenClass)eResolveProxy((InternalEObject)domainMetaClass);
			if (domainMetaClass != oldDomainMetaClass) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_NODE__DOMAIN_META_CLASS, oldDomainMetaClass, domainMetaClass));
			}
		}
		return domainMetaClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenClass basicGetDomainMetaClass() {
		return domainMetaClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDomainMetaClass(GenClass newDomainMetaClass) {
		GenClass oldDomainMetaClass = domainMetaClass;
		domainMetaClass = newDomainMetaClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__DOMAIN_META_CLASS, oldDomainMetaClass, domainMetaClass));
d296 2
a303 2
				case GMFGenPackage.GEN_NODE__MODEL_FACET:
					return basicSetModelFacet(null, msgs);
d352 2
a353 3
			case GMFGenPackage.GEN_NODE__DOMAIN_META_CLASS:
				if (resolve) return getDomainMetaClass();
				return basicGetDomainMetaClass();
a361 2
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return getModelFacet();
d394 2
a395 2
			case GMFGenPackage.GEN_NODE__DOMAIN_META_CLASS:
				setDomainMetaClass((GenClass)newValue);
a411 3
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)newValue);
				return;
d444 2
a445 2
			case GMFGenPackage.GEN_NODE__DOMAIN_META_CLASS:
				setDomainMetaClass((GenClass)null);
a458 3
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)null);
				return;
d486 2
a487 2
			case GMFGenPackage.GEN_NODE__DOMAIN_META_CLASS:
				return domainMetaClass != null;
a495 2
			case GMFGenPackage.GEN_NODE__MODEL_FACET:
				return modelFacet != null;
@


1.13
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@a11 1
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
d28 1
d30 1
d42 1
d46 1
d64 10
d114 10
d194 12
d251 43
d305 2
d336 2
d342 2
a383 6
			case GMFGenPackage.GEN_NODE__DOMAIN_NAME_FEATURE:
				if (resolve) return getDomainNameFeature();
				return basicGetDomainNameFeature();
			case GMFGenPackage.GEN_NODE__CONTAINMENT_META_FEATURE:
				if (resolve) return getContainmentMetaFeature();
				return basicGetContainmentMetaFeature();
d395 2
d403 2
a427 6
			case GMFGenPackage.GEN_NODE__DOMAIN_NAME_FEATURE:
				setDomainNameFeature((GenFeature)newValue);
				return;
			case GMFGenPackage.GEN_NODE__CONTAINMENT_META_FEATURE:
				setContainmentMetaFeature((GenFeature)newValue);
				return;
d440 4
d455 3
a480 6
			case GMFGenPackage.GEN_NODE__DOMAIN_NAME_FEATURE:
				setDomainNameFeature((GenFeature)null);
				return;
			case GMFGenPackage.GEN_NODE__CONTAINMENT_META_FEATURE:
				setContainmentMetaFeature((GenFeature)null);
				return;
d493 3
d505 3
a526 4
			case GMFGenPackage.GEN_NODE__DOMAIN_NAME_FEATURE:
				return domainNameFeature != null;
			case GMFGenPackage.GEN_NODE__CONTAINMENT_META_FEATURE:
				return containmentMetaFeature != null;
d537 2
d545 2
@


1.12
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d27 1
d219 4
d252 2
d310 2
d358 3
d410 3
d452 2
@


1.11
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d473 5
@


1.10
log
@#111775 cleanup in gmfgen - unused attributes gone
@
text
@d28 1
d245 2
d301 2
d346 3
d395 3
d435 2
@


1.9
log
@#112191 colors as Viewmap's Attributes
@
text
@d288 2
a295 2
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
d329 3
a337 3
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
d375 3
a383 3
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
d416 2
a421 2
			case GMFGenPackage.GEN_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
@


1.8
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@a38 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getBackgroundColor <em>Background Color</em>}</li>
a58 20
	 * The default value of the '{@@link #getBackgroundColor() <em>Background Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getBackgroundColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final String BACKGROUND_COLOR_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getBackgroundColor() <em>Background Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getBackgroundColor()
	 * @@generated
	 * @@ordered
	 */
	protected String backgroundColor = BACKGROUND_COLOR_EDEFAULT;

	/**
a168 21
	public String getBackgroundColor() {
		return backgroundColor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setBackgroundColor(String newBackgroundColor) {
		String oldBackgroundColor = backgroundColor;
		backgroundColor = newBackgroundColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__BACKGROUND_COLOR, oldBackgroundColor, backgroundColor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a290 2
			case GMFGenPackage.GEN_NODE__FOREGROUND_COLOR:
				return getForegroundColor();
a302 2
			case GMFGenPackage.GEN_NODE__BACKGROUND_COLOR:
				return getBackgroundColor();
a331 3
			case GMFGenPackage.GEN_NODE__FOREGROUND_COLOR:
				setForegroundColor((String)newValue);
				return;
a343 3
			case GMFGenPackage.GEN_NODE__BACKGROUND_COLOR:
				setBackgroundColor((String)newValue);
				return;
a377 3
			case GMFGenPackage.GEN_NODE__FOREGROUND_COLOR:
				setForegroundColor(FOREGROUND_COLOR_EDEFAULT);
				return;
a389 3
			case GMFGenPackage.GEN_NODE__BACKGROUND_COLOR:
				setBackgroundColor(BACKGROUND_COLOR_EDEFAULT);
				return;
a417 2
			case GMFGenPackage.GEN_NODE__FOREGROUND_COLOR:
				return FOREGROUND_COLOR_EDEFAULT == null ? foregroundColor != null : !FOREGROUND_COLOR_EDEFAULT.equals(foregroundColor);
a427 2
			case GMFGenPackage.GEN_NODE__BACKGROUND_COLOR:
				return BACKGROUND_COLOR_EDEFAULT == null ? backgroundColor != null : !BACKGROUND_COLOR_EDEFAULT.equals(backgroundColor);
d447 1
a447 3
		result.append(" (backgroundColor: ");
		result.append(backgroundColor);
		result.append(", childContainersPlacement: ");
@


1.7
log
@#111775 stale properties in gmfgen
#111784 GenChildContainer extends GenCommonBase
@
text
@a19 1
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
d213 1
a213 1
			childContainers = new EObjectContainmentEList(GenChildContainer.class, this, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS);
d263 2
@


1.6
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@a328 2
			case GMFGenPackage.GEN_NODE__META_INFO_PROVIDER_CLASS_NAME:
				return getMetaInfoProviderClassName();
a373 3
			case GMFGenPackage.GEN_NODE__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName((String)newValue);
				return;
a425 3
			case GMFGenPackage.GEN_NODE__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName(META_INFO_PROVIDER_CLASS_NAME_EDEFAULT);
				return;
a472 2
			case GMFGenPackage.GEN_NODE__META_INFO_PROVIDER_CLASS_NAME:
				return META_INFO_PROVIDER_CLASS_NAME_EDEFAULT == null ? metaInfoProviderClassName != null : !META_INFO_PROVIDER_CLASS_NAME_EDEFAULT.equals(metaInfoProviderClassName);
@


1.5
log
@removed unused property 'affixedStereotypes'
@
text
@a251 4
	protected String getDefaultNotationViewFactoryClassName() {
		return getDomainMetaClass().getName() + "ViewFactory"; //$NON-NLS-1$
	}

@


1.4
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@a19 1
import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
a39 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getAffixedStereotypes <em>Affixed Stereotypes</em>}</li>
a60 10
	 * The cached value of the '{@@link #getAffixedStereotypes() <em>Affixed Stereotypes</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAffixedStereotypes()
	 * @@generated
	 * @@ordered
	 */
	protected EList affixedStereotypes = null;

	/**
a190 12
	public EList getAffixedStereotypes() {
		if (affixedStereotypes == null) {
			affixedStereotypes = new EDataTypeUniqueEList(String.class, this, GMFGenPackage.GEN_NODE__AFFIXED_STEREOTYPES);
		}
		return affixedStereotypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a351 2
			case GMFGenPackage.GEN_NODE__AFFIXED_STEREOTYPES:
				return getAffixedStereotypes();
a400 4
			case GMFGenPackage.GEN_NODE__AFFIXED_STEREOTYPES:
				getAffixedStereotypes().clear();
				getAffixedStereotypes().addAll((Collection)newValue);
				return;
a455 3
			case GMFGenPackage.GEN_NODE__AFFIXED_STEREOTYPES:
				getAffixedStereotypes().clear();
				return;
a500 2
			case GMFGenPackage.GEN_NODE__AFFIXED_STEREOTYPES:
				return affixedStereotypes != null && !affixedStereotypes.isEmpty();
d522 1
a522 3
		result.append(" (affixedStereotypes: ");
		result.append(affixedStereotypes);
		result.append(", backgroundColor: ");
@


1.3
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d12 1
a15 1
import org.eclipse.emf.ecore.EAttribute;
a16 1
import org.eclipse.emf.ecore.EReference;
a29 1

d60 1
a60 1
	protected EClass domainMetaClass = null;
d165 1
a165 1
	public EClass getDomainMetaClass() {
d167 2
a168 2
			EClass oldDomainMetaClass = domainMetaClass;
			domainMetaClass = (EClass)eResolveProxy((InternalEObject)domainMetaClass);
d182 1
a182 1
	public EClass basicGetDomainMetaClass() {
d191 2
a192 2
	public void setDomainMetaClass(EClass newDomainMetaClass) {
		EClass oldDomainMetaClass = domainMetaClass;
a275 9
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void initialize(EClass eClass) {
		setDomainMetaClass(eClass);
	}

d410 1
a410 1
				setDomainNameFeature((EAttribute)newValue);
d416 1
a416 1
				setContainmentMetaFeature((EReference)newValue);
d425 1
a425 1
				setDomainMetaClass((EClass)newValue);
d469 1
a469 1
				setDomainNameFeature((EAttribute)null);
d475 1
a475 1
				setContainmentMetaFeature((EReference)null);
d484 1
a484 1
				setDomainMetaClass((EClass)null);
@


1.2
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d32 2
a42 3
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getViewmapURI <em>Viewmap URI</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getNodeVisualizationKind <em>Node Visualization Kind</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNodeImpl#getViewmapClass <em>Viewmap Class</em>}</li>
a64 60
	 * The default value of the '{@@link #getViewmapURI() <em>Viewmap URI</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewmapURI()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VIEWMAP_URI_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getViewmapURI() <em>Viewmap URI</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewmapURI()
	 * @@generated
	 * @@ordered
	 */
	protected String viewmapURI = VIEWMAP_URI_EDEFAULT;

	/**
	 * The default value of the '{@@link #getNodeVisualizationKind() <em>Node Visualization Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeVisualizationKind()
	 * @@generated
	 * @@ordered
	 */
	protected static final int NODE_VISUALIZATION_KIND_EDEFAULT = 1;

	/**
	 * The cached value of the '{@@link #getNodeVisualizationKind() <em>Node Visualization Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeVisualizationKind()
	 * @@generated
	 * @@ordered
	 */
	protected int nodeVisualizationKind = NODE_VISUALIZATION_KIND_EDEFAULT;

	/**
	 * The default value of the '{@@link #getViewmapClass() <em>Viewmap Class</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewmapClass()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VIEWMAP_CLASS_EDEFAULT = "org.eclipse.gmf.editor.viewmaps.SVGViewMap";

	/**
	 * The cached value of the '{@@link #getViewmapClass() <em>Viewmap Class</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewmapClass()
	 * @@generated
	 * @@ordered
	 */
	protected String viewmapClass = VIEWMAP_CLASS_EDEFAULT;

	/**
a204 63
	public String getViewmapURI() {
		return viewmapURI;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewmapURI(String newViewmapURI) {
		String oldViewmapURI = viewmapURI;
		viewmapURI = newViewmapURI;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__VIEWMAP_URI, oldViewmapURI, viewmapURI));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getNodeVisualizationKind() {
		return nodeVisualizationKind;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNodeVisualizationKind(int newNodeVisualizationKind) {
		int oldNodeVisualizationKind = nodeVisualizationKind;
		nodeVisualizationKind = newNodeVisualizationKind;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__NODE_VISUALIZATION_KIND, oldNodeVisualizationKind, nodeVisualizationKind));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getViewmapClass() {
		return viewmapClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewmapClass(String newViewmapClass) {
		String oldViewmapClass = viewmapClass;
		viewmapClass = newViewmapClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NODE__VIEWMAP_CLASS, oldViewmapClass, viewmapClass));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d322 2
d380 2
a386 6
			case GMFGenPackage.GEN_NODE__VIEWMAP_URI:
				return getViewmapURI();
			case GMFGenPackage.GEN_NODE__NODE_VISUALIZATION_KIND:
				return new Integer(getNodeVisualizationKind());
			case GMFGenPackage.GEN_NODE__VIEWMAP_CLASS:
				return getViewmapClass();
d432 3
a437 9
			case GMFGenPackage.GEN_NODE__VIEWMAP_URI:
				setViewmapURI((String)newValue);
				return;
			case GMFGenPackage.GEN_NODE__NODE_VISUALIZATION_KIND:
				setNodeVisualizationKind(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_NODE__VIEWMAP_CLASS:
				setViewmapClass((String)newValue);
				return;
d491 3
a496 9
			case GMFGenPackage.GEN_NODE__VIEWMAP_URI:
				setViewmapURI(VIEWMAP_URI_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__NODE_VISUALIZATION_KIND:
				setNodeVisualizationKind(NODE_VISUALIZATION_KIND_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NODE__VIEWMAP_CLASS:
				setViewmapClass(VIEWMAP_CLASS_EDEFAULT);
				return;
d539 2
a544 6
			case GMFGenPackage.GEN_NODE__VIEWMAP_URI:
				return VIEWMAP_URI_EDEFAULT == null ? viewmapURI != null : !VIEWMAP_URI_EDEFAULT.equals(viewmapURI);
			case GMFGenPackage.GEN_NODE__NODE_VISUALIZATION_KIND:
				return nodeVisualizationKind != NODE_VISUALIZATION_KIND_EDEFAULT;
			case GMFGenPackage.GEN_NODE__VIEWMAP_CLASS:
				return VIEWMAP_CLASS_EDEFAULT == null ? viewmapClass != null : !VIEWMAP_CLASS_EDEFAULT.equals(viewmapClass);
d568 1
a568 7
		result.append(" (viewmapURI: ");
		result.append(viewmapURI);
		result.append(", nodeVisualizationKind: ");
		result.append(nodeVisualizationKind);
		result.append(", viewmapClass: ");
		result.append(viewmapClass);
		result.append(", affixedStereotypes: ");
@


1.1
log
@*** empty log message ***
@
text
@d411 4
d500 2
d555 3
d620 3
d675 2
@

