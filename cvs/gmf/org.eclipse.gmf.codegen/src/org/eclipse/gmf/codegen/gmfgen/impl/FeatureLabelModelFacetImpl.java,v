head	1.18;
access;
symbols
	v20081022-1925:1.18
	v20081015-1925:1.18
	v20081008-1925:1.18
	v20081001-1925:1.18
	v20080930-1130:1.18
	v20080926-1245:1.18
	v20080924-1925:1.18
	v20080917-1925:1.18
	v20080911-1728:1.18
	v20080910-1520:1.18
	v20080903-1520:1.18
	v20080827-1520:1.17
	v20080813-1520:1.16
	v20080806-1520:1.15
	v20080722-1827:1.15
	v20080718-1731:1.15
	v20080716-1600:1.15
	v20080716-1642:1.15
	R2_1_maintenance:1.15.0.4
	Root_R2_1_maintenance:1.15
	R2_1_0:1.15
	v20080610-1132:1.15
	v20080603-1553:1.15
	v20080528-1052:1.15
	v20080521:1.15
	v20080516-1543:1.15
	v20080516-1143:1.15
	v20080512-1200:1.15
	v20080508-2000:1.15
	v20080507-1326:1.15
	v20080503-1740:1.15
	v20080501-1739:1.15
	v20080425-1959:1.15
	v20080417-1610:1.15
	v20080411-0411:1.15
	v20080404-1111:1.15
	v20080322-0000:1.15
	v20080222-1200:1.15
	v20080215-1500:1.15
	v20080207-0207:1.15
	v20071222-1111:1.15
	v20071214-1111:1.15
	v20071130-1111:1.15
	v20071124-0000:1.15
	v20071112-0000:1.15
	v20071108-0000:1.15
	v20071003-0000:1.15
	v20070928-0000:1.15
	v20070921-0000:1.15
	v20070915-0000:1.15
	v20070903-0000:1.15
	v20070809-0000:1.15
	R2_0_maintenance:1.15.0.2
	R2_0:1.15
	R4_20:1.15
	v20070621-0000:1.15
	RC3_20:1.15
	v20070614-1400:1.15
	v20070608-1300:1.15
	v20070605-1400:1.15
	v20070601-1400:1.15
	v20070525-1500:1.15
	v20070520-1200:1.15
	v20070518-1300:1.15
	v20070504-1000:1.14
	v20070427-0600:1.12
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.10
	v20070403-1500:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.9
	v20060316-0600:1.9
	v20070307-0700:1.8
	v20070301-1200:1.8
	v20070228-2000:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.4
	v20070103-0300:1.8
	M4_20:1.8
	v20061222-1800:1.8
	v20061218-1200:1.8
	v20061214-0000:1.8
	v20061120-1300:1.8
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060728-0500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	v20060512-1000:1.4
	I20060512-1000:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.18
date	2008.08.29.16.10.04;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	4a1948b81f524567;

1.17
date	2008.08.25.16.53.20;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	21e48b2e3764567;

1.16
date	2008.08.13.13.50.34;	author dstadnik;	state Exp;
branches;
next	1.15;
commitid	440348a2e6584567;

1.15
date	2007.05.10.12.29.18;	author bblajer;	state Exp;
branches;
next	1.14;
commitid	26b74643101e4567;

1.14
date	2007.05.03.09.58.55;	author dstadnik;	state Exp;
branches;
next	1.13;
commitid	518a4639b24f4567;

1.13
date	2007.04.27.11.23.38;	author dstadnik;	state Exp;
branches;
next	1.12;
commitid	10694631dd364567;

1.12
date	2007.04.26.14.11.51;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	4c4f4630b3194567;

1.11
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	725b461c97d64567;

1.10
date	2007.03.30.13.12.15;	author bblajer;	state Exp;
branches;
next	1.9;
commitid	6071460d0cae4567;

1.9
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	444245f8090b4567;

1.8
date	2006.11.17.16.13.15;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	4b15455ddf9b4567;

1.7
date	2006.10.18.14.21.42;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.10.18.09.56.50;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.10.17.13.08.11;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.14.09.19;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.14.20.12.32;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.14.31.00;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.03.12.38.15;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.18
log
@[244419] Support for custom parser - finalize parsers/labelmodelfacet relationship
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.LabelTextAccessMethod;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Feature Label Model Facet</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getMetaFeatures <em>Meta Features</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getEditableMetaFeatures <em>Editable Meta Features</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getViewPattern <em>View Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getEditorPattern <em>Editor Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getEditPattern <em>Edit Pattern</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getViewMethod <em>View Method</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getEditMethod <em>Edit Method</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class FeatureLabelModelFacetImpl extends LabelModelFacetImpl implements FeatureLabelModelFacet {
	/**
	 * The cached value of the '{@@link #getMetaFeatures() <em>Meta Features</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMetaFeatures()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenFeature> metaFeatures;

	/**
	 * The cached value of the '{@@link #getEditableMetaFeatures() <em>Editable Meta Features</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditableMetaFeatures()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenFeature> editableMetaFeatures;

	/**
	 * The default value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VIEW_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getViewPattern() <em>View Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String viewPattern = VIEW_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditorPattern() <em>Editor Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditorPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDITOR_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditorPattern() <em>Editor Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditorPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String editorPattern = EDITOR_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDIT_PATTERN_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditPattern() <em>Edit Pattern</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPattern()
	 * @@generated
	 * @@ordered
	 */
	protected String editPattern = EDIT_PATTERN_EDEFAULT;

	/**
	 * The default value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewMethod()
	 * @@generated
	 * @@ordered
	 */
	protected static final LabelTextAccessMethod VIEW_METHOD_EDEFAULT = LabelTextAccessMethod.MESSAGE_FORMAT;

	/**
	 * The cached value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewMethod()
	 * @@generated
	 * @@ordered
	 */
	protected LabelTextAccessMethod viewMethod = VIEW_METHOD_EDEFAULT;

	/**
	 * The default value of the '{@@link #getEditMethod() <em>Edit Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditMethod()
	 * @@generated
	 * @@ordered
	 */
	protected static final LabelTextAccessMethod EDIT_METHOD_EDEFAULT = LabelTextAccessMethod.MESSAGE_FORMAT;

	/**
	 * The cached value of the '{@@link #getEditMethod() <em>Edit Method</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditMethod()
	 * @@generated
	 * @@ordered
	 */
	protected LabelTextAccessMethod editMethod = EDIT_METHOD_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected FeatureLabelModelFacetImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getFeatureLabelModelFacet();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenFeature> getMetaFeatures() {
		if (metaFeatures == null) {
			metaFeatures = new EObjectResolvingEList<GenFeature>(GenFeature.class, this, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__META_FEATURES);
		}
		return metaFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenFeature> getEditableMetaFeatures() {
		if (editableMetaFeatures == null) {
			editableMetaFeatures = new EObjectResolvingEList<GenFeature>(GenFeature.class, this, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITABLE_META_FEATURES);
		}
		return editableMetaFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getViewPattern() {
		return viewPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewPattern(String newViewPattern) {
		String oldViewPattern = viewPattern;
		viewPattern = newViewPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN, oldViewPattern, viewPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditorPattern() {
		return editorPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditorPattern(String newEditorPattern) {
		String oldEditorPattern = editorPattern;
		editorPattern = newEditorPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITOR_PATTERN, oldEditorPattern, editorPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelTextAccessMethod getViewMethod() {
		return viewMethod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewMethod(LabelTextAccessMethod newViewMethod) {
		LabelTextAccessMethod oldViewMethod = viewMethod;
		viewMethod = newViewMethod == null ? VIEW_METHOD_EDEFAULT : newViewMethod;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD, oldViewMethod, viewMethod));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditPattern() {
		return editPattern;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditPattern(String newEditPattern) {
		String oldEditPattern = editPattern;
		editPattern = newEditPattern;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN, oldEditPattern, editPattern));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelTextAccessMethod getEditMethod() {
		return editMethod;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditMethod(LabelTextAccessMethod newEditMethod) {
		LabelTextAccessMethod oldEditMethod = editMethod;
		editMethod = newEditMethod == null ? EDIT_METHOD_EDEFAULT : newEditMethod;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_METHOD, oldEditMethod, editMethod));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__META_FEATURES:
				return getMetaFeatures();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITABLE_META_FEATURES:
				return getEditableMetaFeatures();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN:
				return getViewPattern();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITOR_PATTERN:
				return getEditorPattern();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
				return getEditPattern();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
				return getViewMethod();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_METHOD:
				return getEditMethod();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__META_FEATURES:
				getMetaFeatures().clear();
				getMetaFeatures().addAll((Collection<? extends GenFeature>)newValue);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITABLE_META_FEATURES:
				getEditableMetaFeatures().clear();
				getEditableMetaFeatures().addAll((Collection<? extends GenFeature>)newValue);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN:
				setViewPattern((String)newValue);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITOR_PATTERN:
				setEditorPattern((String)newValue);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
				setEditPattern((String)newValue);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
				setViewMethod((LabelTextAccessMethod)newValue);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_METHOD:
				setEditMethod((LabelTextAccessMethod)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__META_FEATURES:
				getMetaFeatures().clear();
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITABLE_META_FEATURES:
				getEditableMetaFeatures().clear();
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN:
				setViewPattern(VIEW_PATTERN_EDEFAULT);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITOR_PATTERN:
				setEditorPattern(EDITOR_PATTERN_EDEFAULT);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
				setEditPattern(EDIT_PATTERN_EDEFAULT);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
				setViewMethod(VIEW_METHOD_EDEFAULT);
				return;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_METHOD:
				setEditMethod(EDIT_METHOD_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__META_FEATURES:
				return metaFeatures != null && !metaFeatures.isEmpty();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITABLE_META_FEATURES:
				return editableMetaFeatures != null && !editableMetaFeatures.isEmpty();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_PATTERN:
				return VIEW_PATTERN_EDEFAULT == null ? viewPattern != null : !VIEW_PATTERN_EDEFAULT.equals(viewPattern);
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDITOR_PATTERN:
				return EDITOR_PATTERN_EDEFAULT == null ? editorPattern != null : !EDITOR_PATTERN_EDEFAULT.equals(editorPattern);
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
				return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : !EDIT_PATTERN_EDEFAULT.equals(editPattern);
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
				return viewMethod != VIEW_METHOD_EDEFAULT;
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_METHOD:
				return editMethod != EDIT_METHOD_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (viewPattern: ");
		result.append(viewPattern);
		result.append(", editorPattern: ");
		result.append(editorPattern);
		result.append(", editPattern: ");
		result.append(editPattern);
		result.append(", viewMethod: ");
		result.append(viewMethod);
		result.append(", editMethod: ");
		result.append(editMethod);
		result.append(')');
		return result.toString();
	}

} //FeatureLabelModelFacetImpl
@


1.17
log
@[235113] alternative parser access, step 1: introduce separate entity into genmodel to keep track of attributes related to parsing
@
text
@a14 1
import org.eclipse.emf.ecore.InternalEObject;
a15 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
a18 1
import org.eclipse.gmf.codegen.gmfgen.GenParserImplementation;
a34 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getParser <em>Parser</em>}</li>
d40 1
a40 1
public class FeatureLabelModelFacetImpl extends EObjectImpl implements FeatureLabelModelFacet {
a161 10
	 * The cached value of the '{@@link #getParser() <em>Parser</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getParser()
	 * @@generated
	 * @@ordered
	 */
	protected GenParserImplementation parser;

	/**
a313 38
	public GenParserImplementation getParser() {
		if (parser != null && parser.eIsProxy()) {
			InternalEObject oldParser = (InternalEObject)parser;
			parser = (GenParserImplementation)eResolveProxy(oldParser);
			if (parser != oldParser) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__PARSER, oldParser, parser));
			}
		}
		return parser;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenParserImplementation basicGetParser() {
		return parser;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setParser(GenParserImplementation newParser) {
		GenParserImplementation oldParser = parser;
		parser = newParser;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__PARSER, oldParser, parser));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a330 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__PARSER:
				if (resolve) return getParser();
				return basicGetParser();
a366 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__PARSER:
				setParser((GenParserImplementation)newValue);
				return;
a399 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__PARSER:
				setParser((GenParserImplementation)null);
				return;
a425 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__PARSER:
				return parser != null;
@


1.16
log
@[231322] allow to specify editable features
@
text
@d15 1
d21 1
d38 1
d166 10
d328 38
d383 3
d422 3
d458 3
d487 2
@


1.15
log
@[185782]: Support label text access methods in lite GMF runtime;
FeatureLabelModelFacet: default view pattern is now LabelTextAccessMethod-dependent, thus moved to templates (both in full and lite versions)
@
text
@d30 1
d53 10
d198 12
d320 2
d349 4
d383 3
d415 2
@


1.14
log
@refactor message format parser; introduce editor pattern
@
text
@d187 1
a187 1
	public String getViewPatternGen() {
a190 16
	public String getViewPattern() {
		String result = getViewPatternGen();
		if (result == null || result.length() == 0) {
			result = buildDefaultViewPattern();
		}
		return result;
	}

	private String buildDefaultViewPattern() {
		StringBuilder result = new StringBuilder();
		for(int i = 0, iMax = metaFeatures.size(); i < iMax; i++) {
			result.append("{").append(i).append("} ");
		}
		return result.toString().trim();
	}

@


1.13
log
@combine label text access methods
@
text
@d31 2
a33 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getEditPattern <em>Edit Pattern</em>}</li>
d72 1
a72 1
	 * The default value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
d75 1
a75 1
	 * @@see #getViewMethod()
d79 1
a79 1
	protected static final LabelTextAccessMethod VIEW_METHOD_EDEFAULT = LabelTextAccessMethod.MESSAGE_FORMAT;
d82 1
a82 1
	 * The cached value of the '{@@link #getViewMethod() <em>View Method</em>}' attribute.
d85 1
a85 1
	 * @@see #getViewMethod()
d89 1
a89 1
	protected LabelTextAccessMethod viewMethod = VIEW_METHOD_EDEFAULT;
d112 20
d224 21
d315 4
a320 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
				return getEditPattern();
d343 2
a344 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
				setViewMethod((LabelTextAccessMethod)newValue);
d349 3
d373 2
a374 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__VIEW_METHOD:
				setViewMethod(VIEW_METHOD_EDEFAULT);
d379 3
d401 4
a406 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__EDIT_PATTERN:
				return EDIT_PATTERN_EDEFAULT == null ? editPattern != null : !EDIT_PATTERN_EDEFAULT.equals(editPattern);
d425 4
a430 2
		result.append(", editPattern: ");
		result.append(editPattern);
@


1.12
log
@additional methods to produce label text and parse user input
@
text
@d20 1
a20 2
import org.eclipse.gmf.codegen.gmfgen.LabelEditMethod;
import org.eclipse.gmf.codegen.gmfgen.LabelViewMethod;
d78 1
a78 1
	protected static final LabelViewMethod VIEW_METHOD_EDEFAULT = LabelViewMethod.MESSAGE_FORMAT;
d88 1
a88 1
	protected LabelViewMethod viewMethod = VIEW_METHOD_EDEFAULT;
d118 1
a118 1
	protected static final LabelEditMethod EDIT_METHOD_EDEFAULT = LabelEditMethod.MESSAGE_FORMAT;
d128 1
a128 1
	protected LabelEditMethod editMethod = EDIT_METHOD_EDEFAULT;
d203 1
a203 1
	public LabelViewMethod getViewMethod() {
d212 2
a213 2
	public void setViewMethod(LabelViewMethod newViewMethod) {
		LabelViewMethod oldViewMethod = viewMethod;
d245 1
a245 1
	public LabelEditMethod getEditMethod() {
d254 2
a255 2
	public void setEditMethod(LabelEditMethod newEditMethod) {
		LabelEditMethod oldEditMethod = editMethod;
d300 1
a300 1
				setViewMethod((LabelViewMethod)newValue);
d306 1
a306 1
				setEditMethod((LabelEditMethod)newValue);
@


1.11
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d20 2
d32 1
d34 1
d72 20
d112 20
d204 21
d246 21
d274 2
d278 2
d300 3
d306 3
d327 3
d333 3
d352 2
d356 2
d374 2
d378 2
@


1.10
log
@Provide default value of view pattern (e.g., ) to simplify templates
@
text
@d45 1
a45 1
	protected EList<GenFeature> metaFeatures = null;
@


1.9
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d123 4
d128 13
a140 1
		return viewPattern;
@


1.8
log
@organized imports
@
text
@d45 1
a45 1
	protected EList metaFeatures = null;
d101 1
d111 1
a111 1
	public EList getMetaFeatures() {
d113 1
a113 1
			metaFeatures = new EObjectResolvingEList(GenFeature.class, this, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__META_FEATURES);
d165 1
d183 2
d189 1
a189 1
				getMetaFeatures().addAll((Collection)newValue);
d206 1
d227 1
d245 1
@


1.7
log
@#161380 simplify feature model facets
@
text
@a11 1

a13 1

a16 1

a17 1

a20 2
import org.eclipse.gmf.codegen.gmfgen.LabelModelFacet;

@


1.6
log
@#161380 move readOnly back to GenLabel
@
text
@d9 4
d14 2
d18 4
d34 1
d42 11
a52 1
public class FeatureLabelModelFacetImpl extends FeatureModelFacetImpl implements FeatureLabelModelFacet {
d116 12
d172 2
d189 4
d210 3
d230 2
@


1.5
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@a23 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#isReadOnly <em>Read Only</em>}</li>
a32 20
	 * The default value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean readOnly = READ_ONLY_EDEFAULT;

	/**
a94 21
	public boolean isReadOnly() {
		return readOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setReadOnly(boolean newReadOnly) {
		boolean oldReadOnly = readOnly;
		readOnly = newReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY, oldReadOnly, readOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a138 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY:
				return isReadOnly() ? Boolean.TRUE : Boolean.FALSE;
a153 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY:
				setReadOnly(((Boolean)newValue).booleanValue());
				return;
a170 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY:
				setReadOnly(READ_ONLY_EDEFAULT);
				return;
a187 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY:
				return readOnly != READ_ONLY_EDEFAULT;
a200 30
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == LabelModelFacet.class) {
			switch (derivedFeatureID) {
				case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY: return GMFGenPackage.LABEL_MODEL_FACET__READ_ONLY;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == LabelModelFacet.class) {
			switch (baseFeatureID) {
				case GMFGenPackage.LABEL_MODEL_FACET__READ_ONLY: return GMFGenPackage.FEATURE_LABEL_MODEL_FACET__READ_ONLY;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d205 1
a205 3
		result.append(" (readOnly: ");
		result.append(readOnly);
		result.append(", viewPattern: ");
@


1.4
log
@#130715 Use default label text defined in gmfgraph model
@
text
@d15 2
d24 1
d34 20
d116 21
d181 2
d198 3
d218 3
d238 2
d253 30
d287 3
a289 1
		result.append(" (viewPattern: ");
@


1.3
log
@organized imports
@
text
@a21 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.FeatureLabelModelFacetImpl#getDefaultText <em>Default Text</em>}</li>
a30 20
	 * The default value of the '{@@link #getDefaultText() <em>Default Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDefaultText()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DEFAULT_TEXT_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDefaultText() <em>Default Text</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDefaultText()
	 * @@generated
	 * @@ordered
	 */
	protected String defaultText = DEFAULT_TEXT_EDEFAULT;

	/**
a92 21
	public String getDefaultText() {
		return defaultText;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDefaultText(String newDefaultText) {
		String oldDefaultText = defaultText;
		defaultText = newDefaultText;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.FEATURE_LABEL_MODEL_FACET__DEFAULT_TEXT, oldDefaultText, defaultText));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a136 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__DEFAULT_TEXT:
				return getDefaultText();
a151 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__DEFAULT_TEXT:
				setDefaultText((String)newValue);
				return;
a168 3
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__DEFAULT_TEXT:
				setDefaultText(DEFAULT_TEXT_EDEFAULT);
				return;
a185 2
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET__DEFAULT_TEXT:
				return DEFAULT_TEXT_EDEFAULT == null ? defaultText != null : !DEFAULT_TEXT_EDEFAULT.equals(defaultText);
d203 1
a203 3
		result.append(" (defaultText: ");
		result.append(defaultText);
		result.append(", viewPattern: ");
@


1.2
log
@#111949 Provide a possibility to invoke inplace for inner elements with empty name
@
text
@a9 1

a10 1

a11 1

@


1.1
log
@refactor feature model facet; use distinct feature-based model facets for links and labels
@
text
@d25 1
d35 20
d117 21
d182 2
d199 3
d219 3
d239 2
d258 3
a260 1
		result.append(" (viewPattern: ");
@

