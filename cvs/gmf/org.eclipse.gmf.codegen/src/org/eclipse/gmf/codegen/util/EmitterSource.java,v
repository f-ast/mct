head	1.1;
access;
symbols
	v20081022-1925:1.1
	v20081015-1925:1.1
	v20081008-1925:1.1
	v20081001-1925:1.1
	v20080930-1130:1.1
	v20080926-1245:1.1
	v20080924-1925:1.1
	v20080917-1925:1.1
	v20080911-1728:1.1
	v20080910-1520:1.1
	v20080903-1520:1.1
	v20080827-1520:1.1
	v20080813-1520:1.1
	v20080806-1520:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080603-1553:1.1
	v20080528-1052:1.1
	v20080521:1.1
	v20080516-1543:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080508-2000:1.1
	v20080507-1326:1.1
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080207-0207:1.1
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2006.08.28.17.20.17;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.1
log
@caching behavior extracted to keep separate from *generation iterator* functionality
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.codegen.util;

import java.lang.ref.SoftReference;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;

/**
 * @@author artem
 */
public abstract class EmitterSource<T extends EObject, E> {

	private final Map<URI, SoftReference<E>> myCachedURI2EmitterMap = new HashMap<URI, SoftReference<E>>();

	public E getEmitters(T genModel, boolean isDynamicTemplates) {
		URI resourceURI = genModel.eResource().getURI();
		if (isDynamicTemplates) {
			myCachedURI2EmitterMap.remove(resourceURI);
		}
		E old = myCachedURI2EmitterMap.containsKey(resourceURI) ? myCachedURI2EmitterMap.get(resourceURI).get() : null;
		if (old != null) {
			return old;
		}
		E newEmitters = newEmitters(genModel);
		if (!isDynamicTemplates) {
			myCachedURI2EmitterMap.put(resourceURI, new SoftReference<E>(newEmitters));
		}
		return newEmitters;
	}

	public void dispose() {
		myCachedURI2EmitterMap.clear();
	}

	protected abstract E newEmitters(T genModel);
}
@
