head	1.23;
access;
symbols
	v20081022-1925:1.23
	v20081015-1925:1.23
	v20081008-1925:1.23
	v20081001-1925:1.23
	v20080930-1130:1.23
	v20080926-1245:1.23
	v20080924-1925:1.23
	v20080917-1925:1.23
	v20080911-1728:1.23
	v20080910-1520:1.23
	v20080903-1520:1.23
	v20080827-1520:1.23
	v20080813-1520:1.23
	v20080806-1520:1.23
	v20080722-1827:1.23
	v20080718-1731:1.23
	v20080716-1600:1.23
	v20080716-1642:1.23
	R2_1_maintenance:1.23.0.4
	Root_R2_1_maintenance:1.23
	R2_1_0:1.23
	v20080610-1132:1.23
	v20080603-1553:1.23
	v20080528-1052:1.23
	v20080521:1.23
	v20080516-1543:1.23
	v20080516-1143:1.23
	v20080512-1200:1.23
	v20080508-2000:1.23
	v20080507-1326:1.23
	v20080503-1740:1.23
	v20080501-1739:1.23
	v20080425-1959:1.23
	v20080417-1610:1.23
	v20080411-0411:1.23
	v20080404-1111:1.23
	v20080322-0000:1.23
	v20080222-1200:1.23
	v20080215-1500:1.23
	v20080207-0207:1.23
	v20071222-1111:1.23
	v20071214-1111:1.23
	v20071130-1111:1.23
	v20071124-0000:1.23
	v20071112-0000:1.23
	v20071108-0000:1.23
	v20071003-0000:1.23
	v20070928-0000:1.23
	v20070921-0000:1.23
	v20070915-0000:1.23
	v20070903-0000:1.23
	v20070809-0000:1.23
	R2_0_maintenance:1.23.0.2
	R2_0:1.23
	R4_20:1.23
	v20070621-0000:1.23
	RC3_20:1.23
	v20070614-1400:1.23
	v20070608-1300:1.22
	v20070605-1400:1.22
	v20070601-1400:1.22
	v20070525-1500:1.22
	v20070520-1200:1.22
	v20070518-1300:1.22
	v20070504-1000:1.22
	v20070427-0600:1.21
	v20070420-1000:1.21
	v20070413-1300:1.21
	v20070405-1100:1.20
	v20070403-1500:1.20
	v20070330-1300:1.20
	v20060330-1300:1.20
	v20070322-1100:1.20
	v20060316-0600:1.20
	v20070307-0700:1.19
	v20070301-1200:1.19
	v20070228-2000:1.18
	v20070221-1500:1.18
	v20070208-1800:1.18
	v20070202-0200:1.14
	v20070103-0300:1.17
	M4_20:1.17
	v20061222-1800:1.17
	v20061218-1200:1.17
	v20061214-0000:1.17
	v20061120-1300:1.17
	M3_20:1.17
	v20061117-0800:1.17
	v20061027-1200:1.14
	v20061020-1000:1.14
	v20061013-1330:1.16
	v20060919-0800:1.14
	v20060907-1100:1.14
	M1_20:1.14
	v20060904-1500:1.14
	v20060824-1600:1.14
	v20060817-1500:1.14
	v20060728-0500:1.14
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060620-0400:1.14
	v20060616-1400:1.14
	v20060616-1200:1.14
	v20060609-1400:1.14
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-1300:1.12
	v20060519-0800:1.12
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.11
	I20060424-0300:1.11
	M6_10:1.11
	I20060407-1200:1.11
	I20060331-1000:1.11
	I20060324-0300:1.11
	I20060317-1300:1.11
	I20060317-1200:1.11
	I20060316-1300:1.11
	I20060309-1300:1.11
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.11
	I20060216-1945:1.11
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.10
	M4_10:1.10
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.8
	M3_10:1.7
	I20051118-1245:1.7
	I20051111-1800:1.7
	I20051106-0900:1.6
	v20051030:1.6
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.23
date	2007.06.12.18.05.31;	author dstadnik;	state Exp;
branches;
next	1.22;
commitid	5e91466ee0674567;

1.22
date	2007.05.01.13.28.04;	author ashatalin;	state Exp;
branches;
next	1.21;
commitid	143a463740554567;

1.21
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.20;
commitid	725b461c97d64567;

1.20
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	444245f8090b4567;

1.19
date	2007.03.01.12.51.39;	author ashatalin;	state Exp;
branches;
next	1.18;
commitid	5cf545e6cc594567;

1.18
date	2007.01.29.19.30.15;	author ashatalin;	state Exp;
branches;
next	1.17;
commitid	7ac145be4b464567;

1.17
date	2006.10.27.17.36.35;	author ashatalin;	state Exp;
branches;
next	1.16;

1.16
date	2006.10.06.15.26.31;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2006.10.06.12.15.31;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.07.09.29.00;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.06.10.52.00;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.28.16.09.46;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.08.15.36.53;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.11.16.43.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.23
log
@add method to find modeling assistant child nodes
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.EcoreEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
import org.eclipse.gmf.codegen.gmfgen.GenNode;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Child Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getContainedNodes <em>Contained Nodes</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getCanonicalEditPolicyClassName <em>Canonical Edit Policy Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getChildNodes <em>Child Nodes</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenChildContainerImpl extends GenCommonBaseImpl implements GenChildContainer {
	/**
	 * The default value of the '{@@link #getCanonicalEditPolicyClassName() <em>Canonical Edit Policy Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCanonicalEditPolicyClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getCanonicalEditPolicyClassName() <em>Canonical Edit Policy Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getCanonicalEditPolicyClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String canonicalEditPolicyClassName = CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getChildNodes() <em>Child Nodes</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildNodes()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenChildNode> childNodes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenChildContainerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenChildContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenNode> getContainedNodes() {
		List<GenChildNode> childNodes = getChildNodes();
		return new EcoreEList.UnmodifiableEList<GenNode>(this, GMFGenPackage.eINSTANCE.getGenContainerBase_ContainedNodes(), childNodes.size(), childNodes.toArray());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenChildNode> getChildNodes() {
		if (childNodes == null) {
			childNodes = new EObjectWithInverseResolvingEList.ManyInverse<GenChildNode>(GenChildNode.class, this, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__CONTAINERS);
		}
		return childNodes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenNode> getAssistantNodes() {
		return getContainedNodes();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean needsCanonicalEditPolicy() {
		// mirror logic previously on getSemanticChildrenList.jetinc - genNodes.size() > 0
		// and refreshSemanticNode.jetinc - genClass2Phantom.size() > 0 && phantomLinks.size() > 0
		if (!isSansDomain() && getDiagram().isSynchronized()) {
			return !getContainedNodes().isEmpty() || (getDiagram().getGenClass2PhantomMap().size() > 0 && getDiagram().getPhantomLinks().size() > 0);
		} else {
			return false;
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getCanonicalEditPolicyClassNameGen() {
		return canonicalEditPolicyClassName;
	}

	public String getCanonicalEditPolicyClassName() {
		return getValidClassName(getCanonicalEditPolicyClassNameGen(), this, CANONICAL_EDIT_POLICY_SUFFIX);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCanonicalEditPolicyClassName(String newCanonicalEditPolicyClassName) {
		String oldCanonicalEditPolicyClassName = canonicalEditPolicyClassName;
		canonicalEditPolicyClassName = newCanonicalEditPolicyClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME, oldCanonicalEditPolicyClassName, canonicalEditPolicyClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getCanonicalEditPolicyQualifiedClassName() {
		return getDiagram().getEditPoliciesPackageName() + '.' + getCanonicalEditPolicyClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getChildNodes()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
				return ((InternalEList<?>)getChildNodes()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES:
				return getContainedNodes();
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return getCanonicalEditPolicyClassName();
			case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
				return getChildNodes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection<? extends GenChildNode>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName(CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
				getChildNodes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES:
				return !getContainedNodes().isEmpty();
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : !CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(canonicalEditPolicyClassName);
			case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (canonicalEditPolicyClassName: ");
		result.append(canonicalEditPolicyClassName);
		result.append(')');
		return result.toString();
	}

} //GenChildContainerImpl
@


1.22
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d118 9
@


1.21
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d122 1
a122 1
			return !getChildNodes().isEmpty() || (getDiagram().getGenClass2PhantomMap().size() > 0 && getDiagram().getPhantomLinks().size() > 0);
@


1.20
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d70 1
a70 1
	protected EList<GenChildNode> childNodes = null;
@


1.19
log
@Modifying genmodel to avoid classcast exceptions from CrossReferences.
@
text
@d24 1
d70 1
a70 1
	protected EList childNodes = null;
d86 1
d96 3
a98 3
	public EList getContainedNodes() {
		List childNodes = getChildNodes();
		return new EcoreEList.UnmodifiableEList(this, GMFGenPackage.eINSTANCE.getGenContainerBase_ContainedNodes(), childNodes.size(), childNodes.toArray());
d106 1
a106 1
	public EList getChildNodes() {
d108 1
a108 1
			childNodes = new EObjectWithInverseResolvingEList.ManyInverse(GenChildNode.class, this, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__CONTAINERS);
d167 2
d172 1
a172 1
				return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
d182 1
d186 1
a186 1
				return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
d196 1
d214 2
d223 1
a223 1
				getChildNodes().addAll((Collection)newValue);
d234 1
d252 1
d270 1
@


1.18
log
@[172032] - Do not generate ??CanonicalEditPolicy for pure-design elements
@
text
@a13 1
import org.eclipse.emf.common.util.BasicEList;
d19 1
d96 1
a96 1
		return new BasicEList.UnmodifiableEList(childNodes.size(), childNodes.toArray());
@


1.17
log
@GenContainerBase.containedNodes should be readonly
@
text
@d119 1
a119 1
		if (getDiagram().isSynchronized()) {
@


1.16
log
@do not generate canonical edit policies unless needed
@
text
@d10 1
d14 1
d95 2
a96 1
		return getChildNodes();
a209 4
			case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES:
				getContainedNodes().clear();
				getContainedNodes().addAll((Collection)newValue);
				return;
a227 3
			case GMFGenPackage.GEN_CHILD_CONTAINER__CONTAINED_NODES:
				getContainedNodes().clear();
				return;
@


1.15
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@d114 7
a120 1
		return getDiagram().isSynchronized();
@


1.14
log
@provide Node/Link/Label/Diagram class prefix instead of Unknown for elements without model facet; add extra empty values checks
@
text
@d31 1
a32 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getCanonicalEditPolicyClassName <em>Canonical Edit Policy Class Name</em>}</li>
d40 1
a40 1
	 * The cached value of the '{@@link #getChildNodes() <em>Child Nodes</em>}' reference list.
d43 1
a43 1
	 * @@see #getChildNodes()
d47 1
a47 1
	protected EList childNodes = null;
d50 1
a50 1
	 * The default value of the '{@@link #getCanonicalEditPolicyClassName() <em>Canonical Edit Policy Class Name</em>}' attribute.
d57 1
a57 1
	protected static final String CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;
d60 1
a60 1
	 * The cached value of the '{@@link #getCanonicalEditPolicyClassName() <em>Canonical Edit Policy Class Name</em>}' attribute.
d63 1
a63 1
	 * @@see #getCanonicalEditPolicyClassName()
d67 1
a67 1
	protected String canonicalEditPolicyClassName = CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT;
d111 9
d186 2
a189 2
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return getCanonicalEditPolicyClassName();
d205 3
a211 3
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName((String)newValue);
				return;
d226 3
a231 3
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName(CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
d245 2
a248 2
			case GMFGenPackage.GEN_CHILD_CONTAINER__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : !CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(canonicalEditPolicyClassName);
@


1.13
log
@#145502 deprecate getClassNameSuffix()
@
text
@d118 1
a118 5
		String value = getCanonicalEditPolicyClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePrefix() + CANONICAL_EDIT_POLICY_SUFFIX;
		}
		return value;
@


1.12
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d120 1
a120 1
			value = getClassNamePart() + CANONICAL_EDIT_POLICY_SUFFIX;
@


1.11
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a32 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#isListLayout <em>List Layout</em>}</li>
a69 20
	 * The default value of the '{@@link #isListLayout() <em>List Layout</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isListLayout()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean LIST_LAYOUT_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isListLayout() <em>List Layout</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isListLayout()
	 * @@generated
	 * @@ordered
	 */
	protected boolean listLayout = LIST_LAYOUT_EDEFAULT;

	/**
a139 21
	 * @@generated
	 */
	public boolean isListLayout() {
		return listLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setListLayout(boolean newListLayout) {
		boolean oldListLayout = listLayout;
		listLayout = newListLayout;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__LIST_LAYOUT, oldListLayout, listLayout));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a184 2
			case GMFGenPackage.GEN_CHILD_CONTAINER__LIST_LAYOUT:
				return isListLayout() ? Boolean.TRUE : Boolean.FALSE;
a206 3
			case GMFGenPackage.GEN_CHILD_CONTAINER__LIST_LAYOUT:
				setListLayout(((Boolean)newValue).booleanValue());
				return;
a226 3
			case GMFGenPackage.GEN_CHILD_CONTAINER__LIST_LAYOUT:
				setListLayout(LIST_LAYOUT_EDEFAULT);
				return;
a243 2
			case GMFGenPackage.GEN_CHILD_CONTAINER__LIST_LAYOUT:
				return listLayout != LIST_LAYOUT_EDEFAULT;
a258 2
		result.append(", listLayout: ");
		result.append(listLayout);
@


1.10
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d17 1
a17 1
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
d30 1
d33 1
d41 1
a41 1
	 * The cached value of the '{@@link #getChildNodes() <em>Child Nodes</em>}' containment reference list.
d71 20
d111 9
d124 1
a124 1
			childNodes = new EObjectContainmentWithInverseEList(GenChildNode.class, this, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES, GMFGenPackage.GEN_CHILD_NODE__CONTAINER);
d161 21
d221 2
d227 2
d240 4
d251 3
d265 3
d274 3
d288 2
d294 2
d311 2
@


1.9
log
@#117749 & #118040 generate unique names for the shared elements in mapping model
@
text
@a10 1
import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
a13 1

a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
a16 1

a18 1

a22 2
import org.eclipse.gmf.codegen.gmfgen.Viewmap;

d141 4
a144 8
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d146 1
a146 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d154 4
a157 10
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_CHILD_CONTAINER__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d159 1
a159 1
		return eBasicSetContainer(null, featureID, msgs);
d167 2
a168 15
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_CHILD_CONTAINER__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_CHILD_CONTAINER__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_CHILD_CONTAINER__VIEWMAP:
				return getViewmap();
d174 1
a174 1
		return eDynamicGet(eFeature, resolve);
d182 2
a183 20
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
d192 1
a192 1
		eDynamicSet(eFeature, newValue);
d200 2
a201 20
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
d209 1
a209 1
		eDynamicUnset(eFeature);
d217 2
a218 14
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_CONTAINER__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_CHILD_CONTAINER__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_CONTAINER__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_CHILD_CONTAINER__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_CHILD_CONTAINER__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_CHILD_CONTAINER__VIEWMAP:
				return viewmap != null;
d224 1
a224 1
		return eDynamicIsSet(eFeature);
@


1.8
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d115 3
a117 3
		String name = getCanonicalEditPolicyClassNameGen();
		if (name == null || name.length() == 0) {
			return getClassNamePrefix() + getClassNameSuffux() + "CanonicalEditPolicy"; //$NON-NLS-1$
d119 1
a119 1
		return name;
@


1.7
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d12 1
d19 2
d38 1
d56 20
d110 38
d203 2
d238 3
d273 3
d301 2
d307 15
@


1.6
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d133 2
d161 3
d194 3
d223 2
@


1.5
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d9 2
a11 1
import org.eclipse.emf.common.notify.Notification;
d13 2
d18 3
a20 2
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;
d23 1
a23 2
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
d34 1
a34 7
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getGroupID <em>Group ID</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getTitleKey <em>Title Key</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#isCanCollapse <em>Can Collapse</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#isHideIfEmpty <em>Hide If Empty</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#isNeedsTitle <em>Needs Title</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getLayoutKind <em>Layout Kind</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildContainerImpl#getParentNode <em>Parent Node</em>}</li>
d40 1
a40 21
public class GenChildContainerImpl extends GenCommonBaseImpl implements GenChildContainer {
	/**
	 * The default value of the '{@@link #getGroupID() <em>Group ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupID()
	 * @@generated
	 * @@ordered
	 */
	protected static final String GROUP_ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getGroupID() <em>Group ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupID()
	 * @@generated
	 * @@ordered
	 */
	protected String groupID = GROUP_ID_EDEFAULT;

d42 1
a42 1
	 * The default value of the '{@@link #getTitleKey() <em>Title Key</em>}' attribute.
d45 1
a45 1
	 * @@see #getTitleKey()
d49 1
a49 91
	protected static final String TITLE_KEY_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getTitleKey() <em>Title Key</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTitleKey()
	 * @@generated
	 * @@ordered
	 */
	protected String titleKey = TITLE_KEY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isCanCollapse() <em>Can Collapse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanCollapse()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean CAN_COLLAPSE_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isCanCollapse() <em>Can Collapse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanCollapse()
	 * @@generated
	 * @@ordered
	 */
	protected boolean canCollapse = CAN_COLLAPSE_EDEFAULT;

	/**
	 * The default value of the '{@@link #isHideIfEmpty() <em>Hide If Empty</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isHideIfEmpty()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean HIDE_IF_EMPTY_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isHideIfEmpty() <em>Hide If Empty</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isHideIfEmpty()
	 * @@generated
	 * @@ordered
	 */
	protected boolean hideIfEmpty = HIDE_IF_EMPTY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isNeedsTitle() <em>Needs Title</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isNeedsTitle()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean NEEDS_TITLE_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isNeedsTitle() <em>Needs Title</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isNeedsTitle()
	 * @@generated
	 * @@ordered
	 */
	protected boolean needsTitle = NEEDS_TITLE_EDEFAULT;

	/**
	 * The default value of the '{@@link #getLayoutKind() <em>Layout Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLayoutKind()
	 * @@generated
	 * @@ordered
	 */
	protected static final CompartmentLayoutKind LAYOUT_KIND_EDEFAULT = CompartmentLayoutKind.BORDER_LITERAL;

	/**
	 * The cached value of the '{@@link #getLayoutKind() <em>Layout Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLayoutKind()
	 * @@generated
	 * @@ordered
	 */
	protected CompartmentLayoutKind layoutKind = LAYOUT_KIND_EDEFAULT;
d74 5
a78 129
	public String getGroupID() {
		return groupID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGroupID(String newGroupID) {
		String oldGroupID = groupID;
		groupID = newGroupID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID, oldGroupID, groupID));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getTitleKey() {
		return titleKey;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTitleKey(String newTitleKey) {
		String oldTitleKey = titleKey;
		titleKey = newTitleKey;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY, oldTitleKey, titleKey));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isCanCollapse() {
		return canCollapse;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCanCollapse(boolean newCanCollapse) {
		boolean oldCanCollapse = canCollapse;
		canCollapse = newCanCollapse;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE, oldCanCollapse, canCollapse));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isHideIfEmpty() {
		return hideIfEmpty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setHideIfEmpty(boolean newHideIfEmpty) {
		boolean oldHideIfEmpty = hideIfEmpty;
		hideIfEmpty = newHideIfEmpty;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY, oldHideIfEmpty, hideIfEmpty));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isNeedsTitle() {
		return needsTitle;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNeedsTitle(boolean newNeedsTitle) {
		boolean oldNeedsTitle = needsTitle;
		needsTitle = newNeedsTitle;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE, oldNeedsTitle, needsTitle));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompartmentLayoutKind getLayoutKind() {
		return layoutKind;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLayoutKind(CompartmentLayoutKind newLayoutKind) {
		CompartmentLayoutKind oldLayoutKind = layoutKind;
		layoutKind = newLayoutKind == null ? LAYOUT_KIND_EDEFAULT : newLayoutKind;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND, oldLayoutKind, layoutKind));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNode getParentNode() {
		if (eContainerFeatureID != GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE) return null;
		return (GenNode)eContainer;
d89 2
a90 4
				case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE, msgs);
d110 2
a111 2
				case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE:
					return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE, msgs);
a123 17
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_NODE__CHILD_CONTAINERS, GenNode.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
		}
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d137 2
a138 14
			case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID:
				return getGroupID();
			case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY:
				return getTitleKey();
			case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE:
				return isCanCollapse() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY:
				return isHideIfEmpty() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE:
				return isNeedsTitle() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND:
				return getLayoutKind();
			case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE:
				return getParentNode();
d165 3
a167 17
			case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID:
				setGroupID((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY:
				setTitleKey((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE:
				setCanCollapse(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY:
				setHideIfEmpty(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE:
				setNeedsTitle(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND:
				setLayoutKind((CompartmentLayoutKind)newValue);
d195 2
a196 17
			case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID:
				setGroupID(GROUP_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY:
				setTitleKey(TITLE_KEY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE:
				setCanCollapse(CAN_COLLAPSE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY:
				setHideIfEmpty(HIDE_IF_EMPTY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE:
				setNeedsTitle(NEEDS_TITLE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND:
				setLayoutKind(LAYOUT_KIND_EDEFAULT);
d219 2
a220 14
			case GMFGenPackage.GEN_CHILD_CONTAINER__GROUP_ID:
				return GROUP_ID_EDEFAULT == null ? groupID != null : !GROUP_ID_EDEFAULT.equals(groupID);
			case GMFGenPackage.GEN_CHILD_CONTAINER__TITLE_KEY:
				return TITLE_KEY_EDEFAULT == null ? titleKey != null : !TITLE_KEY_EDEFAULT.equals(titleKey);
			case GMFGenPackage.GEN_CHILD_CONTAINER__CAN_COLLAPSE:
				return canCollapse != CAN_COLLAPSE_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_CONTAINER__HIDE_IF_EMPTY:
				return hideIfEmpty != HIDE_IF_EMPTY_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_CONTAINER__NEEDS_TITLE:
				return needsTitle != NEEDS_TITLE_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_CONTAINER__LAYOUT_KIND:
				return layoutKind != LAYOUT_KIND_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_CONTAINER__PARENT_NODE:
				return getParentNode() != null;
a224 45
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (groupID: ");
		result.append(groupID);
		result.append(", titleKey: ");
		result.append(titleKey);
		result.append(", canCollapse: ");
		result.append(canCollapse);
		result.append(", hideIfEmpty: ");
		result.append(hideIfEmpty);
		result.append(", needsTitle: ");
		result.append(needsTitle);
		result.append(", layoutKind: ");
		result.append(layoutKind);
		result.append(')');
		return result.toString();
	}

	public String getClassNamePrefix() {
		return getGroupID() == null ? "GenContainer$" + hashCode() : getGroupID();
	}

	public String getClassNameSuffux() {
		return "Container";
	}

	public GenDiagram getDiagram() {
		GenNode parentNode = getParentNode();
		if (parentNode == null) {
			return null;
		}
		return parentNode.getDiagram();
	}
	
	public String getUniqueIdentifier() {
		return getGroupID() + "_" + getVisualID();
	}

@


1.4
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d22 2
d347 2
d391 2
d430 3
d474 3
d514 2
@


1.3
log
@#111775 cleanup in gmfgen - unused attributes gone
@
text
@d560 4
@


1.2
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@d385 2
d421 3
d462 3
d500 2
@


1.1
log
@*** empty log message ***
@
text
@d9 1
d11 1
d14 1
a15 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d19 2
d35 1
d41 1
a41 1
public class GenChildContainerImpl extends EObjectImpl implements GenChildContainer {
d311 65
d378 7
d397 2
d410 9
d448 9
d486 6
d504 2
d535 16
@

