head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080930-1130:1.13
	v20080926-1245:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20080722-1827:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080528-1052:1.13
	v20080521:1.13
	v20080516-1543:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080508-2000:1.13
	v20080507-1326:1.13
	v20080503-1740:1.12
	v20080501-1739:1.12
	v20080425-1959:1.12
	v20080417-1610:1.11
	v20080411-0411:1.11
	v20080404-1111:1.11
	v20080322-0000:1.11
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070928-0000:1.9
	v20070921-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070504-1000:1.8
	v20070427-0600:1.7
	v20070420-1000:1.7
	v20070413-1300:1.7
	v20070405-1100:1.6
	v20070403-1500:1.6
	v20070330-1300:1.6
	v20060330-1300:1.6
	v20070322-1100:1.6
	v20060316-0600:1.6
	v20070307-0700:1.5
	v20070301-1200:1.5
	v20070228-2000:1.5
	v20070221-1500:1.5
	v20070208-1800:1.5
	v20070202-0200:1.4
	v20070103-0300:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.4
	v20061020-1000:1.4
	v20061013-1330:1.4
	v20060919-0800:1.4
	v20060907-1100:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060728-0500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060620-0400:1.4
	v20060616-1400:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;


1.13
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	39124821b4de4567;

1.12
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	2e1d4808b3814567;

1.11
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	5e5047cd7dd64567;

1.10
date	2008.02.29.21.19.52;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	45a447c876f24567;

1.9
date	2007.05.22.17.27.35;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	694b465327fe4567;

1.8
date	2007.05.01.13.28.04;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	143a463740554567;

1.7
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	725b461c97d64567;

1.6
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	444245f8090b4567;

1.5
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.4;
commitid	271945b8e1904567;

1.4
date	2006.06.06.16.22.23;	author radvorak;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.24.16.22.38;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.27.12.04.52;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.13
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id: GenExpressionProviderBaseImpl.java,v 1.12 2008/04/18 14:43:22 atikhomirov Exp $
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
import org.eclipse.gmf.codegen.gmfgen.GenLanguage;
import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Expression Provider Base</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionProviderBaseImpl#getExpressions <em>Expressions</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionProviderBaseImpl#getContainer <em>Container</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenExpressionProviderBaseImpl extends EObjectImpl implements GenExpressionProviderBase {
	/**
	 * The cached value of the '{@@link #getExpressions() <em>Expressions</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getExpressions()
	 * @@generated
	 * @@ordered
	 */
	protected EList<ValueExpression> expressions;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenExpressionProviderBaseImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenExpressionProviderBase();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public abstract GenLanguage getLanguage();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<ValueExpression> getExpressions() {
		if (expressions == null) {
			expressions = new EObjectContainmentWithInverseEList<ValueExpression>(ValueExpression.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS, GMFGenPackage.VALUE_EXPRESSION__PROVIDER);
		}
		return expressions;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenExpressionProviderContainer getContainer() {
		if (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER) return null;
		return (GenExpressionProviderContainer)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getExpressions()).basicAdd(otherEnd, msgs);
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
				return ((InternalEList<?>)getExpressions()).basicRemove(otherEnd, msgs);
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				return eBasicSetContainer(null, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GenExpressionProviderContainer.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
				return getExpressions();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				return getContainer();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
				getExpressions().clear();
				getExpressions().addAll((Collection<? extends ValueExpression>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
				getExpressions().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS:
				return expressions != null && !expressions.isEmpty();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				return getContainer() != null;
		}
		return super.eIsSet(featureID);
	}

} //GenExpressionProviderBaseImpl
@


1.12
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.11 2008/03/04 16:50:38 atikhomirov Exp $
d16 2
a17 1
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
d40 1
a40 1
	 * The cached value of the '{@@link #getExpressions() <em>Expressions</em>}' reference list.
d82 1
a82 1
			expressions = new EObjectResolvingEList<ValueExpression>(ValueExpression.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS);
d102 1
d106 2
d124 2
@


1.11
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.10 2008/02/29 21:19:52 atikhomirov Exp $
a10 1
import org.eclipse.emf.common.notify.Notification;
a14 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
a16 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a100 31
	public NotificationChain basicSetContainer(GenExpressionProviderContainer newContainer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newContainer, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContainer(GenExpressionProviderContainer newContainer) {
		if (newContainer != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER && newContainer != null)) {
			if (EcoreUtil.isAncestor(this, newContainer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newContainer != null)
				msgs = ((InternalEObject)newContainer).eInverseAdd(this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GenExpressionProviderContainer.class, msgs);
			msgs = basicSetContainer(newContainer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, newContainer, newContainer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d107 1
a107 1
				return basicSetContainer((GenExpressionProviderContainer)otherEnd, msgs);
d121 1
a121 1
				return basicSetContainer(null, msgs);
a168 3
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				setContainer((GenExpressionProviderContainer)newValue);
				return;
a183 3
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				setContainer((GenExpressionProviderContainer)null);
				return;
@


1.10
log
@[150177] phase IV, fix last use of qualified class names in ElementInitializers (via GMFGen genmodel java methods). Cleaned genmodel of methods no longer in use, few methods moved to ElementInitializer.ext (pending removal/refactoring)
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.9 2007/05/22 17:27:35 atikhomirov Exp $
d11 1
d16 1
d19 1
d104 31
d141 1
a141 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
d155 1
a155 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
d203 3
d221 3
@


1.9
log
@[123240] clean gmfgen uses of required plugins
@
text
@d5 1
a5 1
 * $Id$
a10 4
import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.ecore.genmodel.GenClassifier;
import org.eclipse.emf.codegen.ecore.genmodel.GenDataType;
import org.eclipse.emf.codegen.ecore.genmodel.GenTypedElement;
a16 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a76 31
	 * @@generated NOT
	 */	
	public String getQualifiedInstanceClassName(GenClassifier genClassifier) {
		if(genClassifier instanceof GenClass) {
			return ((GenClass)genClassifier).getQualifiedInterfaceName();
		} else if(genClassifier instanceof GenDataType) {
			Class<?> clazz = genClassifier.getEcoreClassifier().getInstanceClass();
			if(clazz != null && clazz.isPrimitive()) {
				return EcoreUtil.wrapperClassFor(clazz).getName();
			}
			return ((GenDataType)genClassifier).getQualifiedInstanceClassName();
		}
		return "java.lang.Object"; //$NON-NLS-1$
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getQualifiedTypeInstanceClassName(GenTypedElement genTypedElement) {
		if(genTypedElement.isPrimitiveType() && !genTypedElement.isListType()) {
			return getQualifiedInstanceClassName(genTypedElement.getTypeGenClassifier());
		}
		String type = genTypedElement.getType();
		return (type != null) ? type : "java.lang.Object"; //$NON-NLS-1$
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
@


1.8
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.7 2007/04/11 08:10:23 dstadnik Exp $
a134 7
	 * @@generated NOT
	 */
	public abstract EList<String> getRequiredPluginIDs();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
@


1.7
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.6 2007/03/14 14:39:34 atikhomirov Exp $
a14 1
import org.eclipse.emf.common.notify.Notification;
a18 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
a134 31
	 * @@generated
	 */
	public NotificationChain basicSetContainer(GenExpressionProviderContainer newContainer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newContainer, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContainer(GenExpressionProviderContainer newContainer) {
		if (newContainer != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER && newContainer != null)) {
			if (EcoreUtil.isAncestor(this, newContainer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newContainer != null)
				msgs = ((InternalEObject)newContainer).eInverseAdd(this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GenExpressionProviderContainer.class, msgs);
			msgs = basicSetContainer(newContainer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER, newContainer, newContainer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d150 1
a150 1
				return basicSetContainer((GenExpressionProviderContainer)otherEnd, msgs);
d164 1
a164 1
				return basicSetContainer(null, msgs);
a211 3
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				setContainer((GenExpressionProviderContainer)newValue);
				return;
a226 3
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER:
				setContainer((GenExpressionProviderContainer)null);
				return;
@


1.6
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d5 1
a5 1
 * $Id$
d53 1
a53 1
	protected EList<ValueExpression> expressions = null;
@


1.5
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.4 2006/06/06 16:22:23 radvorak Exp $
a12 1

a16 1
import org.eclipse.emf.common.util.BasicEList;
d53 1
a53 1
	protected EList expressions = null;
d69 1
d90 1
a90 1
			Class clazz = genClassifier.getEcoreClassifier().getInstanceClass();
d117 1
a117 1
	public EList getExpressions() {
d119 1
a119 1
			expressions = new EObjectResolvingEList(ValueExpression.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__EXPRESSIONS);
d170 1
a170 3
	public EList getRequiredPluginIDs() {
		return new BasicEList();
	}
d177 1
d193 1
d207 1
d221 1
d237 2
d243 1
a243 1
				getExpressions().addAll((Collection)newValue);
d257 1
d275 1
@


1.4
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.3 2006/05/24 16:22:38 radvorak Exp $
d13 1
d104 2
a105 2
	 */	
	public String getQualifiedInstanceClassName(GenTypedElement genTypedElement) {	
d111 1
a111 1
	}	
@


1.3
log
@#143278 FeatureSequenceInitializer should ensure fault isolation of individual feature value setting
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.2 2006/04/27 12:04:52 radvorak Exp $
d28 1
d79 1
a79 1
	public abstract String getLanguage();
@


1.2
log
@#138884  Expression accessors templates handle GenEnum classifier incorretly
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderBaseImpl.java,v 1.1 2006/04/13 15:41:17 radvorak Exp $
d14 1
d89 4
d101 13
@


1.1
log
@[#134511] common access to expressions of different languages
@
text
@d5 1
a5 1
 * $Id$
d11 3
d82 14
@

