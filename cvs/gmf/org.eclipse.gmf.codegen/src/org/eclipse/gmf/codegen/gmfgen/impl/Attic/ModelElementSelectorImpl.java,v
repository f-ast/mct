head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.7
date	2006.02.14.18.46.22;	author ashatalin;	state dead;
branches;
next	1.6;

1.6
date	2006.01.10.13.49.37;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.05.17.30.29;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.18.13.55.33;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.7
log
@[rdvorak] #127700 Rename genmodel::ModelElementSelector as a generic GenConstraint element
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.ModelElementSelector;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model Element Selector</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @@generated
 */
public class ModelElementSelectorImpl extends ValueExpressionImpl implements ModelElementSelector {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ModelElementSelectorImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getModelElementSelector();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList getRequiredPluginIDs() {
		BasicEList rv = new BasicEList();
		// For now hardcode only the default support for OCL
		// TODO - to be refactored to plugg-in other languages
		if("ocl".equals(getLanguage())) { //$NON-NLS-1$
			rv.add("org.eclipse.emf.query.ocl"); //$NON-NLS-1$
		}
		return rv;		
	}

} //ModelElementSelectorImpl
@


1.6
log
@#123240, part 1 - get rid of StringArray datatype
@
text
@@


1.5
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d9 3
d49 2
a50 1
	public String[] getRequiredPluginIDs() {
d54 1
a54 1
			return new String[] { "org.eclipse.emf.query.ocl" }; //$NON-NLS-1$
d56 1
a56 1
		return new String[0];		
@


1.4
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@a9 1
import org.eclipse.emf.ecore.EStructuralFeature;
a54 64
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				return getBody();
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				return getLanguage();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				setBody((String)newValue);
				return;
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				setLanguage((String)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				setBody(BODY_EDEFAULT);
				return;
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				setLanguage(LANGUAGE_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				return BODY_EDEFAULT == null ? body != null : !BODY_EDEFAULT.equals(body);
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				return LANGUAGE_EDEFAULT == null ? language != null : !LANGUAGE_EDEFAULT.equals(language);
		}
		return eDynamicIsSet(eFeature);
	}

@


1.3
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d56 64
@


1.2
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@a55 64
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				return getBody();
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				return getLanguage();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				setBody((String)newValue);
				return;
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				setLanguage((String)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				setBody(BODY_EDEFAULT);
				return;
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				setLanguage(LANGUAGE_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__BODY:
				return BODY_EDEFAULT == null ? body != null : !BODY_EDEFAULT.equals(body);
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR__LANGUAGE:
				return LANGUAGE_EDEFAULT == null ? language != null : !LANGUAGE_EDEFAULT.equals(language);
		}
		return eDynamicIsSet(eFeature);
	}

@


1.1
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@a10 1

d45 14
@

