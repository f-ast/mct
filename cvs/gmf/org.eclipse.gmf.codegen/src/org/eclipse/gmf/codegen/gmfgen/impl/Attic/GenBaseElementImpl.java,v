head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20081015-1925:1.12
	v20081008-1925:1.12
	v20081001-1925:1.12
	v20080924-1925:1.12
	v20080917-1925:1.12
	v20080911-1728:1.12
	v20080910-1520:1.12
	v20080903-1520:1.12
	v20080827-1520:1.12
	v20080813-1520:1.12
	v20080806-1520:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2005.10.26.18.43.48;	author atikhomirov;	state dead;
branches;
next	1.11;

1.11
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.11.16.43.53;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.11.12.25.35;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.07.13.01.34;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.03.19.09.14;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenBaseElement;
import org.eclipse.gmf.codegen.gmfgen.GenElementInitializer;
import org.eclipse.gmf.codegen.gmfgen.ModelElementSelector;
import org.eclipse.gmf.codegen.gmfgen.Viewmap;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Base Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getModelElementSelector <em>Model Element Selector</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getModelElementInitializer <em>Model Element Initializer</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenBaseElementImpl extends GenCommonBaseImpl implements GenBaseElement {
	/**
	 * The cached value of the '{@@link #getModelElementSelector() <em>Model Element Selector</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getModelElementSelector()
	 * @@generated
	 * @@ordered
	 */
	protected ModelElementSelector modelElementSelector = null;

	/**
	 * The cached value of the '{@@link #getModelElementInitializer() <em>Model Element Initializer</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getModelElementInitializer()
	 * @@generated
	 * @@ordered
	 */
	protected GenElementInitializer modelElementInitializer = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenBaseElementImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenBaseElement();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ModelElementSelector getModelElementSelector() {
		return modelElementSelector;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetModelElementSelector(ModelElementSelector newModelElementSelector, NotificationChain msgs) {
		ModelElementSelector oldModelElementSelector = modelElementSelector;
		modelElementSelector = newModelElementSelector;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR, oldModelElementSelector, newModelElementSelector);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setModelElementSelector(ModelElementSelector newModelElementSelector) {
		if (newModelElementSelector != modelElementSelector) {
			NotificationChain msgs = null;
			if (modelElementSelector != null)
				msgs = ((InternalEObject)modelElementSelector).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR, null, msgs);
			if (newModelElementSelector != null)
				msgs = ((InternalEObject)newModelElementSelector).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR, null, msgs);
			msgs = basicSetModelElementSelector(newModelElementSelector, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR, newModelElementSelector, newModelElementSelector));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenElementInitializer getModelElementInitializer() {
		return modelElementInitializer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetModelElementInitializer(GenElementInitializer newModelElementInitializer, NotificationChain msgs) {
		GenElementInitializer oldModelElementInitializer = modelElementInitializer;
		modelElementInitializer = newModelElementInitializer;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER, oldModelElementInitializer, newModelElementInitializer);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setModelElementInitializer(GenElementInitializer newModelElementInitializer) {
		if (newModelElementInitializer != modelElementInitializer) {
			NotificationChain msgs = null;
			if (modelElementInitializer != null)
				msgs = ((InternalEObject)modelElementInitializer).eInverseRemove(this, GMFGenPackage.GEN_ELEMENT_INITIALIZER__ELEMENT, GenElementInitializer.class, msgs);
			if (newModelElementInitializer != null)
				msgs = ((InternalEObject)newModelElementInitializer).eInverseAdd(this, GMFGenPackage.GEN_ELEMENT_INITIALIZER__ELEMENT, GenElementInitializer.class, msgs);
			msgs = basicSetModelElementInitializer(newModelElementInitializer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER, newModelElementInitializer, newModelElementInitializer));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
					if (modelElementInitializer != null)
						msgs = ((InternalEObject)modelElementInitializer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER, null, msgs);
					return basicSetModelElementInitializer((GenElementInitializer)otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR:
					return basicSetModelElementSelector(null, msgs);
				case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
					return basicSetModelElementInitializer(null, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_BASE_ELEMENT__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_BASE_ELEMENT__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_BASE_ELEMENT__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP:
				return getViewmap();
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR:
				return getModelElementSelector();
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
				return getModelElementInitializer();
		}
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_BASE_ELEMENT__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR:
				setModelElementSelector((ModelElementSelector)newValue);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
				setModelElementInitializer((GenElementInitializer)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_BASE_ELEMENT__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR:
				setModelElementSelector((ModelElementSelector)null);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
				setModelElementInitializer((GenElementInitializer)null);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_BASE_ELEMENT__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_BASE_ELEMENT__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_BASE_ELEMENT__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP:
				return viewmap != null;
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_SELECTOR:
				return modelElementSelector != null;
			case GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER:
				return modelElementInitializer != null;
		}
		return eDynamicIsSet(eFeature);
	}

} //GenBaseElementImpl
@


1.11
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@@


1.10
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@a9 1
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
a28 3
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getDomainNameFeature <em>Domain Name Feature</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getContainmentMetaFeature <em>Containment Meta Feature</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getViewmap <em>Viewmap</em>}</li>
a37 30
	 * The cached value of the '{@@link #getDomainNameFeature() <em>Domain Name Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDomainNameFeature()
	 * @@generated
	 * @@ordered
	 */
	protected GenFeature domainNameFeature = null;

	/**
	 * The cached value of the '{@@link #getContainmentMetaFeature() <em>Containment Meta Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getContainmentMetaFeature()
	 * @@generated
	 * @@ordered
	 */
	protected GenFeature containmentMetaFeature = null;

	/**
	 * The cached value of the '{@@link #getViewmap() <em>Viewmap</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewmap()
	 * @@generated
	 * @@ordered
	 */
	protected Viewmap viewmap = null;

	/**
a79 119
	public GenFeature getDomainNameFeature() {
		if (domainNameFeature != null && domainNameFeature.eIsProxy()) {
			GenFeature oldDomainNameFeature = domainNameFeature;
			domainNameFeature = (GenFeature)eResolveProxy((InternalEObject)domainNameFeature);
			if (domainNameFeature != oldDomainNameFeature) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_BASE_ELEMENT__DOMAIN_NAME_FEATURE, oldDomainNameFeature, domainNameFeature));
			}
		}
		return domainNameFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenFeature basicGetDomainNameFeature() {
		return domainNameFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDomainNameFeature(GenFeature newDomainNameFeature) {
		GenFeature oldDomainNameFeature = domainNameFeature;
		domainNameFeature = newDomainNameFeature;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__DOMAIN_NAME_FEATURE, oldDomainNameFeature, domainNameFeature));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenFeature getContainmentMetaFeature() {
		if (containmentMetaFeature != null && containmentMetaFeature.eIsProxy()) {
			GenFeature oldContainmentMetaFeature = containmentMetaFeature;
			containmentMetaFeature = (GenFeature)eResolveProxy((InternalEObject)containmentMetaFeature);
			if (containmentMetaFeature != oldContainmentMetaFeature) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_BASE_ELEMENT__CONTAINMENT_META_FEATURE, oldContainmentMetaFeature, containmentMetaFeature));
			}
		}
		return containmentMetaFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenFeature basicGetContainmentMetaFeature() {
		return containmentMetaFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setContainmentMetaFeature(GenFeature newContainmentMetaFeature) {
		GenFeature oldContainmentMetaFeature = containmentMetaFeature;
		containmentMetaFeature = newContainmentMetaFeature;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__CONTAINMENT_META_FEATURE, oldContainmentMetaFeature, containmentMetaFeature));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Viewmap getViewmap() {
		return viewmap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetViewmap(Viewmap newViewmap, NotificationChain msgs) {
		Viewmap oldViewmap = viewmap;
		viewmap = newViewmap;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP, oldViewmap, newViewmap);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewmap(Viewmap newViewmap) {
		if (newViewmap != viewmap) {
			NotificationChain msgs = null;
			if (viewmap != null)
				msgs = ((InternalEObject)viewmap).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP, null, msgs);
			if (newViewmap != null)
				msgs = ((InternalEObject)newViewmap).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP, null, msgs);
			msgs = basicSetViewmap(newViewmap, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__VIEWMAP, newViewmap, newViewmap));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a163 9
	 * @@generated NOT
	 */
	public boolean hasNameToEdit() {
		return getDomainNameFeature() != null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a218 6
			case GMFGenPackage.GEN_BASE_ELEMENT__DOMAIN_NAME_FEATURE:
				if (resolve) return getDomainNameFeature();
				return basicGetDomainNameFeature();
			case GMFGenPackage.GEN_BASE_ELEMENT__CONTAINMENT_META_FEATURE:
				if (resolve) return getContainmentMetaFeature();
				return basicGetContainmentMetaFeature();
a247 6
			case GMFGenPackage.GEN_BASE_ELEMENT__DOMAIN_NAME_FEATURE:
				setDomainNameFeature((GenFeature)newValue);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__CONTAINMENT_META_FEATURE:
				setContainmentMetaFeature((GenFeature)newValue);
				return;
a279 6
			case GMFGenPackage.GEN_BASE_ELEMENT__DOMAIN_NAME_FEATURE:
				setDomainNameFeature((GenFeature)null);
				return;
			case GMFGenPackage.GEN_BASE_ELEMENT__CONTAINMENT_META_FEATURE:
				setContainmentMetaFeature((GenFeature)null);
				return;
a307 4
			case GMFGenPackage.GEN_BASE_ELEMENT__DOMAIN_NAME_FEATURE:
				return domainNameFeature != null;
			case GMFGenPackage.GEN_BASE_ELEMENT__CONTAINMENT_META_FEATURE:
				return containmentMetaFeature != null;
@


1.9
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d19 1
d34 1
d82 10
d274 43
d328 21
d356 2
d391 2
d428 3
d466 3
d496 2
@


1.8
log
@#111775 cleanup in gmfgen - unused attributes gone
@
text
@d19 1
d32 1
d70 10
d219 43
d278 2
d311 2
d345 3
d380 3
d408 2
@


1.7
log
@#112191 colors as Viewmap's Attributes
@
text
@a29 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getNotationViewFactoryClassName <em>Notation View Factory Class Name</em>}</li>
a57 20
	 * The default value of the '{@@link #getNotationViewFactoryClassName() <em>Notation View Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNotationViewFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getNotationViewFactoryClassName() <em>Notation View Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNotationViewFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String notationViewFactoryClassName = NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;

	/**
a165 29
	public String getNotationViewFactoryClassNameGen() {
		return notationViewFactoryClassName;
	}

	public String getNotationViewFactoryClassName() {
		String name = getNotationViewFactoryClassNameGen();
		if (name == null || name.trim().length() == 0) {
			name = getClassNamePrefix() + "ViewFactory"; //$NON-NLS-1$
		}
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNotationViewFactoryClassName(String newNotationViewFactoryClassName) {
		String oldNotationViewFactoryClassName = notationViewFactoryClassName;
		notationViewFactoryClassName = newNotationViewFactoryClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME, oldNotationViewFactoryClassName, notationViewFactoryClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d244 2
a251 2
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
d274 3
a282 3
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
d306 3
a314 3
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
d335 2
a340 2
			case GMFGenPackage.GEN_BASE_ELEMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
a346 15
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (notationViewFactoryClassName: ");
		result.append(notationViewFactoryClassName);
		result.append(')');
		return result.toString();
	}

@


1.6
log
@#111775 stale properties in gmfgen
#111784 GenChildContainer extends GenCommonBase
@
text
@a28 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenBaseElementImpl#getForegroundColor <em>Foreground Color</em>}</li>
a48 20
	 * The default value of the '{@@link #getForegroundColor() <em>Foreground Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getForegroundColor()
	 * @@generated
	 * @@ordered
	 */
	protected static final String FOREGROUND_COLOR_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getForegroundColor() <em>Foreground Color</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getForegroundColor()
	 * @@generated
	 * @@ordered
	 */
	protected String foregroundColor = FOREGROUND_COLOR_EDEFAULT;

	/**
a148 21
	public String getForegroundColor() {
		return foregroundColor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setForegroundColor(String newForegroundColor) {
		String oldForegroundColor = foregroundColor;
		foregroundColor = newForegroundColor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_BASE_ELEMENT__FOREGROUND_COLOR, oldForegroundColor, foregroundColor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a296 2
			case GMFGenPackage.GEN_BASE_ELEMENT__FOREGROUND_COLOR:
				return getForegroundColor();
a326 3
			case GMFGenPackage.GEN_BASE_ELEMENT__FOREGROUND_COLOR:
				setForegroundColor((String)newValue);
				return;
a358 3
			case GMFGenPackage.GEN_BASE_ELEMENT__FOREGROUND_COLOR:
				setForegroundColor(FOREGROUND_COLOR_EDEFAULT);
				return;
a386 2
			case GMFGenPackage.GEN_BASE_ELEMENT__FOREGROUND_COLOR:
				return FOREGROUND_COLOR_EDEFAULT == null ? foregroundColor != null : !FOREGROUND_COLOR_EDEFAULT.equals(foregroundColor);
d406 1
a406 3
		result.append(" (foregroundColor: ");
		result.append(foregroundColor);
		result.append(", notationViewFactoryClassName: ");
@


1.5
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@a335 2
			case GMFGenPackage.GEN_BASE_ELEMENT__META_INFO_PROVIDER_CLASS_NAME:
				return getMetaInfoProviderClassName();
a367 3
			case GMFGenPackage.GEN_BASE_ELEMENT__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName((String)newValue);
				return;
a402 3
			case GMFGenPackage.GEN_BASE_ELEMENT__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName(META_INFO_PROVIDER_CLASS_NAME_EDEFAULT);
				return;
a434 2
			case GMFGenPackage.GEN_BASE_ELEMENT__META_INFO_PROVIDER_CLASS_NAME:
				return META_INFO_PROVIDER_CLASS_NAME_EDEFAULT == null ? metaInfoProviderClassName != null : !META_INFO_PROVIDER_CLASS_NAME_EDEFAULT.equals(metaInfoProviderClassName);
@


1.4
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d236 1
a236 1
			name = getDefaultNotationViewFactoryClassName();
a240 2
	protected abstract String getDefaultNotationViewFactoryClassName();

@


1.3
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d10 1
a12 2

import org.eclipse.emf.ecore.EAttribute;
a13 1
import org.eclipse.emf.ecore.EReference;
a18 1

d47 1
a47 1
	protected EAttribute domainNameFeature = null;
d77 1
a77 1
	protected EReference containmentMetaFeature = null;
d132 1
a132 1
	public EAttribute getDomainNameFeature() {
d134 2
a135 2
			EAttribute oldDomainNameFeature = domainNameFeature;
			domainNameFeature = (EAttribute)eResolveProxy((InternalEObject)domainNameFeature);
d149 1
a149 1
	public EAttribute basicGetDomainNameFeature() {
d158 2
a159 2
	public void setDomainNameFeature(EAttribute newDomainNameFeature) {
		EAttribute oldDomainNameFeature = domainNameFeature;
d191 1
a191 1
	public EReference getContainmentMetaFeature() {
d193 2
a194 2
			EReference oldContainmentMetaFeature = containmentMetaFeature;
			containmentMetaFeature = (EReference)eResolveProxy((InternalEObject)containmentMetaFeature);
d208 1
a208 1
	public EReference basicGetContainmentMetaFeature() {
d217 2
a218 2
	public void setContainmentMetaFeature(EReference newContainmentMetaFeature) {
		EReference oldContainmentMetaFeature = containmentMetaFeature;
d376 1
a376 1
				setDomainNameFeature((EAttribute)newValue);
d382 1
a382 1
				setContainmentMetaFeature((EReference)newValue);
d414 1
a414 1
				setDomainNameFeature((EAttribute)null);
d420 1
a420 1
				setContainmentMetaFeature((EReference)null);
@


1.2
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d11 2
d22 2
d35 1
d90 1
a90 1
	protected static final String NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = "";
d103 10
d261 43
d315 17
d353 2
d390 3
d428 3
d458 2
@


1.1
log
@*** empty log message ***
@
text
@d30 1
d78 20
d215 31
d276 2
d310 3
d345 3
d373 2
d390 2
@

