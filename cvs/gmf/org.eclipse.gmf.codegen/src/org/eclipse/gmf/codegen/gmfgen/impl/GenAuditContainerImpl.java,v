head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080930-1130:1.13
	v20080926-1245:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20080722-1827:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080528-1052:1.13
	v20080521:1.13
	v20080516-1543:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080508-2000:1.13
	v20080507-1326:1.13
	v20080503-1740:1.13
	v20080501-1739:1.13
	v20080425-1959:1.13
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080222-1200:1.11
	v20080215-1500:1.11
	v20080207-0207:1.11
	v20071222-1111:1.11
	v20071214-1111:1.11
	v20071130-1111:1.11
	v20071124-0000:1.11
	v20071112-0000:1.11
	v20071108-0000:1.11
	v20071003-0000:1.11
	v20070928-0000:1.11
	v20070921-0000:1.11
	v20070915-0000:1.11
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070614-1400:1.11
	v20070608-1300:1.11
	v20070605-1400:1.11
	v20070601-1400:1.11
	v20070525-1500:1.11
	v20070520-1200:1.11
	v20070518-1300:1.11
	v20070504-1000:1.11
	v20070427-0600:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.10
	v20070403-1500:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070307-0700:1.9
	v20070301-1200:1.9
	v20070228-2000:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.7
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.4
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060202-1415:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2008.04.18.14.43.23;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	2e1d4808b3814567;

1.12
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	5e5047cd7dd64567;

1.11
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	725b461c97d64567;

1.10
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	444245f8090b4567;

1.9
date	2007.02.08.18.06.49;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	56b45cb66aa4567;

1.8
date	2007.02.07.00.37.49;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	c5d45c91f504567;

1.7
date	2006.05.11.18.37.54;	author radvorak;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.25.19.16.05;	author radvorak;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.20.19.36.27;	author radvorak;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.24.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.12.20.53.19;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.10.12.51.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
import org.eclipse.gmf.codegen.gmfgen.GenAuditRoot;
import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Audit Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getRoot <em>Root</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getId <em>Id</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getDescription <em>Description</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getPath <em>Path</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getAudits <em>Audits</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenAuditContainerImpl extends EObjectImpl implements GenAuditContainer {
	/**
	 * The default value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getId() <em>Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getId()
	 * @@generated
	 * @@ordered
	 */
	protected String id = ID_EDEFAULT;

	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DESCRIPTION_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDescription() <em>Description</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDescription()
	 * @@generated
	 * @@ordered
	 */
	protected String description = DESCRIPTION_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getPath() <em>Path</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPath()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenAuditContainer> path;

	/**
	 * The cached value of the '{@@link #getAudits() <em>Audits</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAudits()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenAuditRule> audits;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenAuditContainerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenAuditContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditRoot getRoot() {
		if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT) return null;
		return (GenAuditRoot)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getId() {
		return id;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setId(String newId) {
		String oldId = id;
		id = newId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__ID, oldId, id));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDescription(String newDescription) {
		String oldDescription = description;
		description = newDescription;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__DESCRIPTION, oldDescription, description));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenAuditContainer> getPath() {
		if (path == null) {
			path = new EObjectResolvingEList<GenAuditContainer>(GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__PATH);
		}
		return path;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenAuditRule> getAudits() {
		if (audits == null) {
			audits = new EObjectWithInverseResolvingEList<GenAuditRule>(GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY);
		}
		return audits;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
			case GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getAudits()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
			case GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS:
				return ((InternalEList<?>)getAudits()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES, GenAuditRoot.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				return getRoot();
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ID:
				return getId();
			case GMFGenPackage.GEN_AUDIT_CONTAINER__NAME:
				return getName();
			case GMFGenPackage.GEN_AUDIT_CONTAINER__DESCRIPTION:
				return getDescription();
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
				return getPath();
			case GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS:
				return getAudits();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ID:
				setId((String)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__NAME:
				setName((String)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__DESCRIPTION:
				setDescription((String)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
				getPath().clear();
				getPath().addAll((Collection<? extends GenAuditContainer>)newValue);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS:
				getAudits().clear();
				getAudits().addAll((Collection<? extends GenAuditRule>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ID:
				setId(ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__DESCRIPTION:
				setDescription(DESCRIPTION_EDEFAULT);
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
				getPath().clear();
				return;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS:
				getAudits().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				return getRoot() != null;
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ID:
				return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
			case GMFGenPackage.GEN_AUDIT_CONTAINER__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGenPackage.GEN_AUDIT_CONTAINER__DESCRIPTION:
				return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PATH:
				return path != null && !path.isEmpty();
			case GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS:
				return audits != null && !audits.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (id: ");
		result.append(id);
		result.append(", name: ");
		result.append(name);
		result.append(", description: ");
		result.append(description);
		result.append(')');
		return result.toString();
	}

} //GenAuditContainerImpl
@


1.12
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a17 1

a19 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a20 1

a23 1

a158 31
	public NotificationChain basicSetRoot(GenAuditRoot newRoot, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newRoot, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setRoot(GenAuditRoot newRoot) {
		if (newRoot != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT && newRoot != null)) {
			if (EcoreUtil.isAncestor(this, newRoot))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newRoot != null)
				msgs = ((InternalEObject)newRoot).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_ROOT__CATEGORIES, GenAuditRoot.class, msgs);
			msgs = basicSetRoot(newRoot, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, newRoot, newRoot));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d253 1
a253 1
				return basicSetRoot((GenAuditRoot)otherEnd, msgs);
d269 1
a269 1
				return basicSetRoot(null, msgs);
a322 3
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				setRoot((GenAuditRoot)newValue);
				return;
a351 3
			case GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT:
				setRoot((GenAuditRoot)null);
				return;
@


1.11
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d21 1
d163 31
d288 1
a288 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
d304 1
a304 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_CONTAINER__ROOT, msgs);
d358 3
d390 3
@


1.10
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d116 1
a116 1
	protected EList<GenAuditContainer> path = null;
d126 1
a126 1
	protected EList<GenAuditRule> audits = null;
@


1.9
log
@refactor GenAuditContainer: flatten hierarchy as it fits most for templates we write
@
text
@d116 1
a116 1
	protected EList path = null;
d126 1
a126 1
	protected EList audits = null;
d142 1
d225 1
a225 1
	public EList getPath() {
d227 1
a227 1
			path = new EObjectResolvingEList(GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__PATH);
d237 1
a237 1
	public EList getAudits() {
d239 1
a239 1
			audits = new EObjectWithInverseResolvingEList(GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CATEGORY);
d249 2
d258 1
a258 1
				return ((InternalEList)getAudits()).basicAdd(otherEnd, msgs);
d268 1
d274 1
a274 1
				return ((InternalEList)getAudits()).basicRemove(otherEnd, msgs);
d284 1
d298 1
d322 2
d337 1
a337 1
				getPath().addAll((Collection)newValue);
d341 1
a341 1
				getAudits().addAll((Collection)newValue);
d352 1
d379 1
d403 1
@


1.8
log
@complete migration of plugin.xml template to xpand version - constraint providers rewritten
@
text
@a8 1
import java.util.ArrayList;
a9 6
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
a12 1
import org.eclipse.emf.common.util.BasicEList;
d17 4
a20 2
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
d22 1
d25 2
a27 5
import org.eclipse.gmf.codegen.gmfgen.GenDiagramElementTarget;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;
import org.eclipse.gmf.codegen.gmfgen.GenNotationElementTarget;
import org.eclipse.gmf.codegen.gmfgen.GenRuleTarget;
d36 1
d40 1
a40 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getParentContainer <em>Parent Container</em>}</li>
a41 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenAuditContainerImpl#getChildContainers <em>Child Containers</em>}</li>
d47 1
a47 1
public class GenAuditContainerImpl extends GenRuleContainerBaseImpl implements GenAuditContainer {
d109 1
a109 1
	 * The cached value of the '{@@link #getAudits() <em>Audits</em>}' containment reference list.
d112 1
a112 1
	 * @@see #getAudits()
d116 1
a116 1
	protected EList audits = null;
d119 1
a119 1
	 * The cached value of the '{@@link #getChildContainers() <em>Child Containers</em>}' containment reference list.
d122 1
a122 1
	 * @@see #getChildContainers()
d126 1
a126 1
	protected EList childContainers = null;
d151 3
a153 17
	public EList getAudits() {
		if (audits == null) {
			audits = new EObjectContainmentWithInverseEList(GenAuditRule.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__AUDITS, GMFGenPackage.GEN_AUDIT_RULE__CONTAINER);
		}
		return audits;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList getChildContainers() {
		if (childContainers == null) {
			childContainers = new EObjectContainmentWithInverseEList(GenAuditContainer.class, this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER);
		}
		return childContainers;
a223 61
	public GenAuditContainer getParentContainer() {
		if (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER) return null;
		return (GenAuditContainer)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetParentContainer(GenAuditContainer newParentContainer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newParentContainer, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setParentContainer(GenAuditContainer newParentContainer) {
		if (newParentContainer != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER && newParentContainer != null)) {
			if (EcoreUtil.isAncestor(this, newParentContainer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newParentContainer != null)
				msgs = ((InternalEObject)newParentContainer).eInverseAdd(this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GenAuditContainer.class, msgs);
			msgs = basicSetParentContainer(newParentContainer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, newParentContainer, newParentContainer));
	}

		/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList getAllAuditRules() {
		return getAllRulesInContainer(this, new BasicEList());
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList getAllAuditContainers() {
		EList containerList = new BasicEList();
		containerList.add(this);
		return getAllChildContainers(this, containerList);
	}
		
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
d225 2
a226 5
		GenAuditContainer parent = this;
		EList elements = new BasicEList();
		while(parent != null) {
			elements.add(0, parent);
			parent = parent.getParentContainer();
d228 1
a228 1
		return elements;
d234 1
a234 1
	 * @@generated NOT
d236 3
a238 109
	public Map getAllRulesToTargetContextMap() {
		HashMap ctx2ruleMap = new HashMap();
		EList allRules = getAllAuditRules();
		for (Iterator it = allRules.iterator(); it.hasNext();) {
			GenAuditRule nextRule = (GenAuditRule) it.next();
			String key = (nextRule.getTarget() != null) ? nextRule.getTarget().getClientContextID() : null;
			if(key != null) {
				List rulesInCtx = null;
				if(ctx2ruleMap.containsKey(key)) {
					rulesInCtx = (List)ctx2ruleMap.get(key);
				} else {
					rulesInCtx = new BasicEList();
					ctx2ruleMap.put(key, rulesInCtx);
				}
				rulesInCtx.add(nextRule);
			}
		}
		return ctx2ruleMap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList getAllTargetedModelPackages() {
		Set packages = new HashSet();
		EList allRules = getAllAuditRules();
		for (Iterator it = allRules.iterator(); it.hasNext();) {
			GenAuditRule nextRule = (GenAuditRule) it.next();
			if(nextRule.getTarget() != null && nextRule.getTarget().getTargetClass() != null) {
				packages.add(nextRule.getTarget().getTargetClass().getGenPackage());
			}
		}
		return new BasicEList(packages);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean hasDiagramElementRule() {
		EList rules = getAllAuditRules();
		for (Iterator it = rules.iterator(); it.hasNext();) {
			GenAuditRule nextRule = (GenAuditRule) it.next();
			GenRuleTarget target = nextRule.getTarget(); 
			if(target instanceof GenDiagramElementTarget ||
				target instanceof GenNotationElementTarget) {
				return true; 
			}
		}
		return false;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */	
	public List getAllContextSelectorsLocalClassNames() {
		HashSet<String> classNames = new HashSet<String>();
		EList allRules = getAllAuditRules();
		for (Iterator it = allRules.iterator(); it.hasNext();) {
			String nextClassName = ((GenAuditRule) it.next()).getContextSelectorLocalClassName();
			if(nextClassName != null) {
				classNames.add(nextClassName);
			}			
		}
		return new ArrayList<String>(classNames);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public List getAllRequiredConstraintAdaptersLocalClassNames() {
		HashSet<String> classNames = new HashSet<String>();
		EList allRules = getAllAuditRules();
		for (Iterator it = allRules.iterator(); it.hasNext();) {
			GenAuditRule nextAudit = (GenAuditRule) it.next();
			if(nextAudit.isRequiresConstraintAdapter()) {
				String nextClassName = nextAudit.getConstraintAdapterLocalClassName();
				if(nextClassName != null) {
					classNames.add(nextClassName);
				}
			}
		}
		return new ArrayList<String>(classNames);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */	
	public List getAllJavaLangAudits() {
		List<GenAuditRule> audits = new ArrayList<GenAuditRule>();
		if(getEditor() == null || getEditor().getExpressionProviders() == null) {
			return audits;
		}
		GenExpressionProviderContainer exprProviders = getEditor().getExpressionProviders();
		for (Iterator it = getAllAuditRules().iterator(); it.hasNext();) {
			GenAuditRule nextAudit = (GenAuditRule) it.next();
			if(nextAudit.getRule() != null && 
				exprProviders.getProvider(nextAudit.getRule()) instanceof GenJavaExpressionProvider) {
				audits.add(nextAudit);
			}
d250 1
a250 1
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
d253 1
a253 1
				return basicSetParentContainer((GenAuditContainer)otherEnd, msgs);
a255 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
				return ((InternalEList)getChildContainers()).basicAdd(otherEnd, msgs);
d267 2
a268 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
				return basicSetParentContainer(null, msgs);
a270 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
				return ((InternalEList)getChildContainers()).basicRemove(otherEnd, msgs);
d282 2
a283 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS, GenAuditContainer.class, msgs);
d295 2
d303 2
a304 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
				return getParentContainer();
a306 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
				return getChildContainers();
d327 3
a329 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
				setParentContainer((GenAuditContainer)newValue);
a334 4
			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
				getChildContainers().clear();
				getChildContainers().addAll((Collection)newValue);
				return;
d355 2
a356 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
				setParentContainer((GenAuditContainer)null);
a360 3
			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
				getChildContainers().clear();
				return;
d372 2
d380 2
a381 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER:
				return getParentContainer() != null;
a383 2
			case GMFGenPackage.GEN_AUDIT_CONTAINER__CHILD_CONTAINERS:
				return childContainers != null && !childContainers.isEmpty();
a406 17
	private static EList getAllRulesInContainer(GenAuditContainer container, EList rules) {
		rules.addAll(container.getAudits());
		for (Iterator it = container.getChildContainers().iterator(); it.hasNext();) {
			GenAuditContainer nextContainer = (GenAuditContainer) it.next();
			getAllRulesInContainer(nextContainer, rules);
		}
		return rules;
	}
	
	private static EList getAllChildContainers(GenAuditContainer container, EList containers) {
		containers.addAll(container.getChildContainers());
		for (Iterator it = container.getChildContainers().iterator(); it.hasNext();) {
			GenAuditContainer nextContainer = (GenAuditContainer) it.next();
			getAllChildContainers(nextContainer, containers);
		}
		return containers;
	}
@


1.7
log
@#141340  Audit rule targeted to a metric definition is not registered as valid constraint
@
text
@d383 1
a383 1
		HashSet classNames = new HashSet();
d391 1
a391 1
		return new ArrayList(classNames);
d400 1
a400 1
		HashSet classNames = new HashSet();
d404 1
a404 1
			if(nextAudit.requiresConstraintAdapter()) {
d411 1
a411 1
		return new ArrayList(classNames);
d420 1
a420 1
		List audits = new ArrayList();
@


1.6
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d352 2
a353 3
			GenRuleTarget target = nextRule.getTarget();
			if(target != null) {
				packages.add(target.getContext().getGenPackage());
@


1.5
log
@#136672 use common expression accessor with audits
@
text
@a31 1
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
d428 2
a429 2
			GenExpressionProviderBase provider = exprProviders.getProvider(nextAudit.getRule());
			if(nextAudit.getRule() != null && provider instanceof GenJavaExpressionProvider) {
@


1.4
log
@#126200 register element types in xml
@
text
@d9 1
d32 3
d378 58
@


1.3
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@d253 10
d272 1
a272 1
			msgs = eBasicSetContainer((InternalEObject)newParentContainer, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
d385 1
a385 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
d402 1
a402 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_AUDIT_CONTAINER__PARENT_CONTAINER, msgs);
@


1.2
log
@[rdvorak] #123656 Added message and description to audit rule
@
text
@d10 2
d13 3
a23 1
import org.eclipse.emf.ecore.impl.EObjectImpl;
d30 3
d52 1
a52 1
public class GenAuditContainerImpl extends EObjectImpl implements GenAuditContainer {
d307 61
@


1.1
log
@[rdvorak] #123232 audits (ocl constraints) definition in genmodel
@
text
@d36 1
d87 20
d215 21
d357 2
d382 3
d413 3
d440 2
d465 2
@

