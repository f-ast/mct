head	1.83;
access;
symbols
	v20081022-1925:1.83
	v20081015-1925:1.83
	v20081008-1925:1.82
	v20081001-1925:1.81
	v20080930-1130:1.81
	v20080926-1245:1.81
	v20080924-1925:1.81
	v20080917-1925:1.80
	v20080911-1728:1.80
	v20080910-1520:1.80
	v20080903-1520:1.80
	v20080827-1520:1.79
	v20080813-1520:1.78
	v20080806-1520:1.78
	v20080722-1827:1.78
	v20080718-1731:1.78
	v20080716-1600:1.77
	v20080716-1642:1.78
	R2_1_maintenance:1.77.0.2
	Root_R2_1_maintenance:1.77
	R2_1_0:1.77
	v20080610-1132:1.77
	v20080603-1553:1.77
	v20080528-1052:1.77
	v20080521:1.77
	v20080516-1543:1.76
	v20080516-1143:1.76
	v20080512-1200:1.76
	v20080508-2000:1.76
	v20080507-1326:1.76
	v20080503-1740:1.75
	v20080501-1739:1.75
	v20080425-1959:1.75
	v20080417-1610:1.75
	v20080411-0411:1.74
	v20080404-1111:1.74
	v20080322-0000:1.74
	v20080222-1200:1.73
	v20080215-1500:1.73
	v20080207-0207:1.73
	v20071222-1111:1.73
	v20071214-1111:1.73
	v20071130-1111:1.73
	v20071124-0000:1.73
	v20071112-0000:1.73
	v20071108-0000:1.73
	v20071003-0000:1.73
	v20070928-0000:1.73
	v20070921-0000:1.73
	v20070915-0000:1.73
	v20070903-0000:1.73
	v20070809-0000:1.73
	R2_0_maintenance:1.73.0.2
	R2_0:1.73
	R4_20:1.73
	v20070621-0000:1.73
	RC3_20:1.73
	v20070614-1400:1.73
	v20070608-1300:1.73
	v20070605-1400:1.73
	v20070601-1400:1.73
	v20070525-1500:1.73
	v20070520-1200:1.73
	v20070518-1300:1.72
	v20070504-1000:1.71
	v20070427-0600:1.70
	v20070420-1000:1.69
	v20070413-1300:1.69
	v20070405-1100:1.69
	v20070403-1500:1.69
	v20070330-1300:1.69
	v20060330-1300:1.69
	v20070322-1100:1.69
	v20060316-0600:1.69
	v20070307-0700:1.68
	v20070301-1200:1.68
	v20070228-2000:1.68
	v20070221-1500:1.68
	v20070208-1800:1.68
	v20070202-0200:1.53
	v20070103-0300:1.66
	M4_20:1.66
	v20061222-1800:1.64
	v20061218-1200:1.63
	v20061214-0000:1.63
	v20061120-1300:1.62
	M3_20:1.62
	v20061117-0800:1.62
	v20061027-1200:1.53
	v20061020-1000:1.53
	v20061013-1330:1.61
	v20060919-0800:1.53
	v20060907-1100:1.53
	M1_20:1.55
	v20060904-1500:1.55
	v20060824-1600:1.53
	v20060817-1500:1.53
	v20060728-0500:1.53
	v20060713-1700:1.53
	R1_0_maintenance:1.53.0.2
	R1_0:1.53
	v20060627-1200:1.53
	v20060626-1420:1.53
	v20060620-0400:1.53
	v20060616-1400:1.52
	v20060616-1200:1.52
	v20060609-1400:1.52
	v20060531-1730:1.50
	v20060530-1930:1.50
	v20060526-1200:1.50
	v20060519-1300:1.49
	v20060519-0800:1.49
	v20060512-1000:1.48
	I20060512-1000:1.48
	I20060505-1400:1.47
	I20060428-1300:1.47
	I20060424-0500:1.46
	I20060424-0300:1.46
	M6_10:1.44
	I20060407-1200:1.42
	I20060331-1000:1.42
	I20060324-0300:1.41
	I20060317-1300:1.41
	I20060317-1200:1.41
	I20060316-1300:1.41
	I20060309-1300:1.41
	M5_10:1.40
	S20060303-1600:1.40
	I20060227-1730:1.39
	I20060216-1945:1.38
	I20060210-1715:1.35
	I20060209-1815:1.35
	I20060203-0830:1.32
	I20060202-1415:1.31
	I20060129-1145:1.30
	I20060127-0900:1.30
	I20060120-1530:1.27
	I20060113-1700:1.23
	M4_10:1.23
	I20060107-1100:1.20
	I20060105-1630:1.19
	I20051230-1230:1.18
	I20051223-1100:1.18
	I20051217-0925:1.18
	I20051208-2000:1.18
	I20051201-1800:1.18
	I20051124-2000:1.17
	M3_10:1.16
	I20051118-1245:1.16
	I20051111-1800:1.15
	I20051106-0900:1.15
	v20051030:1.15
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.83
date	2008.10.14.17.29.55;	author atikhomirov;	state Exp;
branches;
next	1.82;
commitid	2c9048f4d70a4567;

1.82
date	2008.10.08.18.51.03;	author atikhomirov;	state Exp;
branches;
next	1.81;
commitid	2d5d448ed010f4567;

1.81
date	2008.09.23.14.54.39;	author atikhomirov;	state Exp;
branches;
next	1.80;
commitid	2569e48d903244567;

1.80
date	2008.08.29.16.10.04;	author atikhomirov;	state Exp;
branches;
next	1.79;
commitid	4a1948b81f524567;

1.79
date	2008.08.25.16.53.20;	author atikhomirov;	state Exp;
branches;
next	1.78;
commitid	21e48b2e3764567;

1.78
date	2008.07.01.11.40.16;	author atikhomirov;	state Exp;
branches;
next	1.77;
commitid	7b70486a179a4567;

1.77
date	2008.05.19.11.02.56;	author dstadnik;	state Exp;
branches;
next	1.76;
commitid	677848315e464567;

1.76
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.75;
commitid	39124821b4de4567;

1.75
date	2008.04.14.08.38.03;	author atikhomirov;	state Exp;
branches;
next	1.74;
commitid	1b0e480317df4567;

1.74
date	2008.02.27.17.30.21;	author atikhomirov;	state Exp;
branches;
next	1.73;
commitid	22cf47c59e244567;

1.73
date	2007.05.18.21.17.19;	author atikhomirov;	state Exp;
branches;
next	1.72;
commitid	2591464e17d14567;

1.72
date	2007.05.11.16.01.30;	author ashatalin;	state Exp;
branches;
next	1.71;
commitid	44f84644934f4567;

1.71
date	2007.04.27.11.23.37;	author dstadnik;	state Exp;
branches;
next	1.70;
commitid	10694631dd364567;

1.70
date	2007.04.26.14.11.51;	author dstadnik;	state Exp;
branches;
next	1.69;
commitid	4c4f4630b3194567;

1.69
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.68;
commitid	444245f8090b4567;

1.68
date	2007.02.08.18.06.49;	author atikhomirov;	state Exp;
branches;
next	1.67;
commitid	56b45cb66aa4567;

1.67
date	2007.01.03.20.34.48;	author dstadnik;	state Exp;
branches;
next	1.66;
commitid	58fc459c135f4567;

1.66
date	2006.12.28.19.45.51;	author ashatalin;	state Exp;
branches;
next	1.65;
commitid	13f545941eec4567;

1.65
date	2006.12.27.12.43.26;	author dstadnik;	state Exp;
branches;
next	1.64;
commitid	5bbc45926a654567;

1.64
date	2006.12.21.17.14.28;	author dstadnik;	state Exp;
branches;
next	1.63;
commitid	710b458ac0ed4567;

1.63
date	2006.11.22.20.09.57;	author atikhomirov;	state Exp;
branches;
next	1.62;
commitid	29594564ae8d4567;

1.62
date	2006.10.18.14.21.42;	author dstadnik;	state Exp;
branches;
next	1.61;

1.61
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.60;

1.60
date	2006.09.27.10.04.42;	author dstadnik;	state Exp;
branches;
next	1.59;

1.59
date	2006.09.22.13.21.24;	author ashatalin;	state Exp;
branches;
next	1.58;

1.58
date	2006.09.15.20.44.31;	author atikhomirov;	state Exp;
branches;
next	1.57;

1.57
date	2006.09.11.18.21.36;	author ashatalin;	state Exp;
branches;
next	1.56;

1.56
date	2006.09.05.23.41.12;	author radvorak;	state Exp;
branches;
next	1.55;

1.55
date	2006.08.25.18.32.55;	author atikhomirov;	state Exp;
branches;
next	1.54;

1.54
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.53;

1.53
date	2006.06.19.12.42.03;	author ashatalin;	state Exp;
branches;
next	1.52;

1.52
date	2006.06.09.12.31.18;	author dstadnik;	state Exp;
branches;
next	1.51;

1.51
date	2006.06.06.16.22.23;	author radvorak;	state Exp;
branches;
next	1.50;

1.50
date	2006.05.24.09.20.16;	author atikhomirov;	state Exp;
branches;
next	1.49;

1.49
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.48;

1.48
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.47;

1.47
date	2006.04.25.19.16.05;	author radvorak;	state Exp;
branches;
next	1.46;

1.46
date	2006.04.20.13.59.44;	author dstadnik;	state Exp;
branches;
next	1.45;

1.45
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.44;

1.44
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	1.43;

1.43
date	2006.04.12.08.48.32;	author dstadnik;	state Exp;
branches;
next	1.42;

1.42
date	2006.03.30.20.42.04;	author atikhomirov;	state Exp;
branches;
next	1.41;

1.41
date	2006.03.07.14.09.19;	author dstadnik;	state Exp;
branches;
next	1.40;

1.40
date	2006.03.03.18.32.30;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.02.24.20.23.26;	author atikhomirov;	state Exp;
branches;
next	1.38;

1.38
date	2006.02.15.15.09.49;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.02.14.20.12.32;	author atikhomirov;	state Exp;
branches;
next	1.36;

1.36
date	2006.02.14.18.46.22;	author ashatalin;	state Exp;
branches;
next	1.35;

1.35
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.34;

1.34
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.33;

1.33
date	2006.02.06.11.00.20;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.02.03.12.38.15;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.26.13.36.43;	author atikhomirov;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.25.19.52.35;	author atikhomirov;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	1.27;

1.27
date	2006.01.19.19.35.31;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.25;

1.25
date	2006.01.19.12.27.51;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.10.13.49.37;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.01.10.12.51.22;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2006.01.06.17.03.34;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.29.18.33.26;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.18.13.55.33;	author ashatalin;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.27.11.41.46;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.13.11.42.21;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.11.12.25.35;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.07.13.01.34;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.03.19.09.14;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.26.15.15.45;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.83
log
@[250772] Support custom preferences
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.eclipse.gmf.codegen.gmfgen.*;


/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @@generated
 */
public class GMFGenFactoryImpl extends EFactoryImpl implements GMFGenFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static GMFGenFactory init() {
		try {
			GMFGenFactory theGMFGenFactory = (GMFGenFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2008/GenModel"); 
			if (theGMFGenFactory != null) {
				return theGMFGenFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new GMFGenFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFGenFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case GMFGenPackage.GEN_EDITOR_GENERATOR: return createGenEditorGenerator();
			case GMFGenPackage.GEN_DIAGRAM: return createGenDiagram();
			case GMFGenPackage.GEN_EDITOR_VIEW: return createGenEditorView();
			case GMFGenPackage.GEN_CUSTOM_PREFERENCE_PAGE: return createGenCustomPreferencePage();
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE: return createGenStandardPreferencePage();
			case GMFGenPackage.GEN_DIAGRAM_PREFERENCES: return createGenDiagramPreferences();
			case GMFGenPackage.GEN_STANDARD_FONT: return createGenStandardFont();
			case GMFGenPackage.GEN_CUSTOM_FONT: return createGenCustomFont();
			case GMFGenPackage.GEN_RGB_COLOR: return createGenRGBColor();
			case GMFGenPackage.GEN_CONSTANT_COLOR: return createGenConstantColor();
			case GMFGenPackage.GEN_PREFERENCE: return createGenPreference();
			case GMFGenPackage.GEN_DIAGRAM_UPDATER: return createGenDiagramUpdater();
			case GMFGenPackage.GEN_PLUGIN: return createGenPlugin();
			case GMFGenPackage.DYNAMIC_MODEL_ACCESS: return createDynamicModelAccess();
			case GMFGenPackage.CUSTOM_BEHAVIOUR: return createCustomBehaviour();
			case GMFGenPackage.SHARED_BEHAVIOUR: return createSharedBehaviour();
			case GMFGenPackage.OPEN_DIAGRAM_BEHAVIOUR: return createOpenDiagramBehaviour();
			case GMFGenPackage.GEN_TOP_LEVEL_NODE: return createGenTopLevelNode();
			case GMFGenPackage.GEN_CHILD_NODE: return createGenChildNode();
			case GMFGenPackage.GEN_CHILD_SIDE_AFFIXED_NODE: return createGenChildSideAffixedNode();
			case GMFGenPackage.GEN_CHILD_LABEL_NODE: return createGenChildLabelNode();
			case GMFGenPackage.GEN_COMPARTMENT: return createGenCompartment();
			case GMFGenPackage.GEN_LINK: return createGenLink();
			case GMFGenPackage.GEN_NODE_LABEL: return createGenNodeLabel();
			case GMFGenPackage.GEN_EXTERNAL_NODE_LABEL: return createGenExternalNodeLabel();
			case GMFGenPackage.GEN_LINK_LABEL: return createGenLinkLabel();
			case GMFGenPackage.METAMODEL_TYPE: return createMetamodelType();
			case GMFGenPackage.SPECIALIZATION_TYPE: return createSpecializationType();
			case GMFGenPackage.NOTATION_TYPE: return createNotationType();
			case GMFGenPackage.LABEL_MODEL_FACET: return createLabelModelFacet();
			case GMFGenPackage.TYPE_MODEL_FACET: return createTypeModelFacet();
			case GMFGenPackage.TYPE_LINK_MODEL_FACET: return createTypeLinkModelFacet();
			case GMFGenPackage.FEATURE_LINK_MODEL_FACET: return createFeatureLinkModelFacet();
			case GMFGenPackage.FEATURE_LABEL_MODEL_FACET: return createFeatureLabelModelFacet();
			case GMFGenPackage.DESIGN_LABEL_MODEL_FACET: return createDesignLabelModelFacet();
			case GMFGenPackage.COLOR_ATTRIBUTES: return createColorAttributes();
			case GMFGenPackage.STYLE_ATTRIBUTES: return createStyleAttributes();
			case GMFGenPackage.RESIZE_CONSTRAINTS: return createResizeConstraints();
			case GMFGenPackage.DEFAULT_SIZE_ATTRIBUTES: return createDefaultSizeAttributes();
			case GMFGenPackage.LABEL_OFFSET_ATTRIBUTES: return createLabelOffsetAttributes();
			case GMFGenPackage.FIGURE_VIEWMAP: return createFigureViewmap();
			case GMFGenPackage.SNIPPET_VIEWMAP: return createSnippetViewmap();
			case GMFGenPackage.INNER_CLASS_VIEWMAP: return createInnerClassViewmap();
			case GMFGenPackage.PARENT_ASSIGNED_VIEWMAP: return createParentAssignedViewmap();
			case GMFGenPackage.VALUE_EXPRESSION: return createValueExpression();
			case GMFGenPackage.GEN_CONSTRAINT: return createGenConstraint();
			case GMFGenPackage.PALETTE: return createPalette();
			case GMFGenPackage.TOOL_ENTRY: return createToolEntry();
			case GMFGenPackage.STANDARD_ENTRY: return createStandardEntry();
			case GMFGenPackage.SEPARATOR: return createSeparator();
			case GMFGenPackage.TOOL_GROUP: return createToolGroup();
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER: return createGenFeatureSeqInitializer();
			case GMFGenPackage.GEN_FEATURE_VALUE_SPEC: return createGenFeatureValueSpec();
			case GMFGenPackage.GEN_REFERENCE_NEW_ELEMENT_SPEC: return createGenReferenceNewElementSpec();
			case GMFGenPackage.GEN_LINK_CONSTRAINTS: return createGenLinkConstraints();
			case GMFGenPackage.GEN_AUDIT_ROOT: return createGenAuditRoot();
			case GMFGenPackage.GEN_AUDIT_CONTAINER: return createGenAuditContainer();
			case GMFGenPackage.GEN_AUDIT_RULE: return createGenAuditRule();
			case GMFGenPackage.GEN_DOMAIN_ELEMENT_TARGET: return createGenDomainElementTarget();
			case GMFGenPackage.GEN_DIAGRAM_ELEMENT_TARGET: return createGenDiagramElementTarget();
			case GMFGenPackage.GEN_DOMAIN_ATTRIBUTE_TARGET: return createGenDomainAttributeTarget();
			case GMFGenPackage.GEN_NOTATION_ELEMENT_TARGET: return createGenNotationElementTarget();
			case GMFGenPackage.GEN_METRIC_CONTAINER: return createGenMetricContainer();
			case GMFGenPackage.GEN_METRIC_RULE: return createGenMetricRule();
			case GMFGenPackage.GEN_AUDITED_METRIC_TARGET: return createGenAuditedMetricTarget();
			case GMFGenPackage.GEN_AUDIT_CONTEXT: return createGenAuditContext();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER: return createGenExpressionProviderContainer();
			case GMFGenPackage.GEN_JAVA_EXPRESSION_PROVIDER: return createGenJavaExpressionProvider();
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER: return createGenExpressionInterpreter();
			case GMFGenPackage.GEN_LITERAL_EXPRESSION_PROVIDER: return createGenLiteralExpressionProvider();
			case GMFGenPackage.GEN_NAVIGATOR: return createGenNavigator();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE: return createGenNavigatorChildReference();
			case GMFGenPackage.GEN_NAVIGATOR_PATH: return createGenNavigatorPath();
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT: return createGenNavigatorPathSegment();
			case GMFGenPackage.GEN_PROPERTY_SHEET: return createGenPropertySheet();
			case GMFGenPackage.GEN_STANDARD_PROPERTY_TAB: return createGenStandardPropertyTab();
			case GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB: return createGenCustomPropertyTab();
			case GMFGenPackage.TYPE_TAB_FILTER: return createTypeTabFilter();
			case GMFGenPackage.CUSTOM_TAB_FILTER: return createCustomTabFilter();
			case GMFGenPackage.GEN_SHARED_CONTRIBUTION_ITEM: return createGenSharedContributionItem();
			case GMFGenPackage.GEN_GROUP_MARKER: return createGenGroupMarker();
			case GMFGenPackage.GEN_SEPARATOR: return createGenSeparator();
			case GMFGenPackage.GEN_CUSTOM_ACTION: return createGenCustomAction();
			case GMFGenPackage.GEN_COMMAND_ACTION: return createGenCommandAction();
			case GMFGenPackage.LOAD_RESOURCE_ACTION: return createLoadResourceAction();
			case GMFGenPackage.INIT_DIAGRAM_ACTION: return createInitDiagramAction();
			case GMFGenPackage.CREATE_SHORTCUT_ACTION: return createCreateShortcutAction();
			case GMFGenPackage.GEN_ACTION_FACTORY_CONTRIBUTION_ITEM: return createGenActionFactoryContributionItem();
			case GMFGenPackage.GEN_MENU_MANAGER: return createGenMenuManager();
			case GMFGenPackage.GEN_TOOL_BAR_MANAGER: return createGenToolBarManager();
			case GMFGenPackage.GEN_CONTEXT_MENU: return createGenContextMenu();
			case GMFGenPackage.GEN_APPLICATION: return createGenApplication();
			case GMFGenPackage.GEN_PARSERS: return createGenParsers();
			case GMFGenPackage.PREDEFINED_PARSER: return createPredefinedParser();
			case GMFGenPackage.CUSTOM_PARSER: return createCustomParser();
			case GMFGenPackage.EXTERNAL_PARSER: return createExternalParser();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
			case GMFGenPackage.STANDARD_PREFERENCE_PAGES:
				return createStandardPreferencePagesFromString(eDataType, initialValue);
			case GMFGenPackage.RULER_UNITS:
				return createRulerUnitsFromString(eDataType, initialValue);
			case GMFGenPackage.ROUTING:
				return createRoutingFromString(eDataType, initialValue);
			case GMFGenPackage.LINE_STYLE:
				return createLineStyleFromString(eDataType, initialValue);
			case GMFGenPackage.JFACE_FONT:
				return createJFaceFontFromString(eDataType, initialValue);
			case GMFGenPackage.FONT_STYLE:
				return createFontStyleFromString(eDataType, initialValue);
			case GMFGenPackage.DIAGRAM_COLORS:
				return createDiagramColorsFromString(eDataType, initialValue);
			case GMFGenPackage.PROVIDER_PRIORITY:
				return createProviderPriorityFromString(eDataType, initialValue);
			case GMFGenPackage.LINK_LABEL_ALIGNMENT:
				return createLinkLabelAlignmentFromString(eDataType, initialValue);
			case GMFGenPackage.LABEL_TEXT_ACCESS_METHOD:
				return createLabelTextAccessMethodFromString(eDataType, initialValue);
			case GMFGenPackage.VIEWMAP_LAYOUT_TYPE:
				return createViewmapLayoutTypeFromString(eDataType, initialValue);
			case GMFGenPackage.STANDARD_ENTRY_KIND:
				return createStandardEntryKindFromString(eDataType, initialValue);
			case GMFGenPackage.GEN_SEVERITY:
				return createGenSeverityFromString(eDataType, initialValue);
			case GMFGenPackage.GEN_LANGUAGE:
				return createGenLanguageFromString(eDataType, initialValue);
			case GMFGenPackage.GEN_NAVIGATOR_REFERENCE_TYPE:
				return createGenNavigatorReferenceTypeFromString(eDataType, initialValue);
			case GMFGenPackage.GENERATED_TYPE:
				return createGeneratedTypeFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
			case GMFGenPackage.STANDARD_PREFERENCE_PAGES:
				return convertStandardPreferencePagesToString(eDataType, instanceValue);
			case GMFGenPackage.RULER_UNITS:
				return convertRulerUnitsToString(eDataType, instanceValue);
			case GMFGenPackage.ROUTING:
				return convertRoutingToString(eDataType, instanceValue);
			case GMFGenPackage.LINE_STYLE:
				return convertLineStyleToString(eDataType, instanceValue);
			case GMFGenPackage.JFACE_FONT:
				return convertJFaceFontToString(eDataType, instanceValue);
			case GMFGenPackage.FONT_STYLE:
				return convertFontStyleToString(eDataType, instanceValue);
			case GMFGenPackage.DIAGRAM_COLORS:
				return convertDiagramColorsToString(eDataType, instanceValue);
			case GMFGenPackage.PROVIDER_PRIORITY:
				return convertProviderPriorityToString(eDataType, instanceValue);
			case GMFGenPackage.LINK_LABEL_ALIGNMENT:
				return convertLinkLabelAlignmentToString(eDataType, instanceValue);
			case GMFGenPackage.LABEL_TEXT_ACCESS_METHOD:
				return convertLabelTextAccessMethodToString(eDataType, instanceValue);
			case GMFGenPackage.VIEWMAP_LAYOUT_TYPE:
				return convertViewmapLayoutTypeToString(eDataType, instanceValue);
			case GMFGenPackage.STANDARD_ENTRY_KIND:
				return convertStandardEntryKindToString(eDataType, instanceValue);
			case GMFGenPackage.GEN_SEVERITY:
				return convertGenSeverityToString(eDataType, instanceValue);
			case GMFGenPackage.GEN_LANGUAGE:
				return convertGenLanguageToString(eDataType, instanceValue);
			case GMFGenPackage.GEN_NAVIGATOR_REFERENCE_TYPE:
				return convertGenNavigatorReferenceTypeToString(eDataType, instanceValue);
			case GMFGenPackage.GENERATED_TYPE:
				return convertGeneratedTypeToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenEditorGenerator createGenEditorGenerator() {
		GenEditorGeneratorImpl genEditorGenerator = new GenEditorGeneratorImpl();
		return genEditorGenerator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagram createGenDiagram() {
		GenDiagramImpl genDiagram = new GenDiagramImpl();
		return genDiagram;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenEditorView createGenEditorView() {
		GenEditorViewImpl genEditorView = new GenEditorViewImpl();
		return genEditorView;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCustomPreferencePage createGenCustomPreferencePage() {
		GenCustomPreferencePageImpl genCustomPreferencePage = new GenCustomPreferencePageImpl();
		return genCustomPreferencePage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenStandardPreferencePage createGenStandardPreferencePage() {
		GenStandardPreferencePageImpl genStandardPreferencePage = new GenStandardPreferencePageImpl();
		return genStandardPreferencePage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagramPreferences createGenDiagramPreferences() {
		GenDiagramPreferencesImpl genDiagramPreferences = new GenDiagramPreferencesImpl();
		return genDiagramPreferences;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenStandardFont createGenStandardFont() {
		GenStandardFontImpl genStandardFont = new GenStandardFontImpl();
		return genStandardFont;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCustomFont createGenCustomFont() {
		GenCustomFontImpl genCustomFont = new GenCustomFontImpl();
		return genCustomFont;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenRGBColor createGenRGBColor() {
		GenRGBColorImpl genRGBColor = new GenRGBColorImpl();
		return genRGBColor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenConstantColor createGenConstantColor() {
		GenConstantColorImpl genConstantColor = new GenConstantColorImpl();
		return genConstantColor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenPreference createGenPreference() {
		GenPreferenceImpl genPreference = new GenPreferenceImpl();
		return genPreference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagramUpdater createGenDiagramUpdater() {
		GenDiagramUpdaterImpl genDiagramUpdater = new GenDiagramUpdaterImpl();
		return genDiagramUpdater;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenPlugin createGenPlugin() {
		GenPluginImpl genPlugin = new GenPluginImpl();
		return genPlugin;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DynamicModelAccess createDynamicModelAccess() {
		DynamicModelAccessImpl dynamicModelAccess = new DynamicModelAccessImpl();
		return dynamicModelAccess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomBehaviour createCustomBehaviour() {
		CustomBehaviourImpl customBehaviour = new CustomBehaviourImpl();
		return customBehaviour;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SharedBehaviour createSharedBehaviour() {
		SharedBehaviourImpl sharedBehaviour = new SharedBehaviourImpl();
		return sharedBehaviour;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public OpenDiagramBehaviour createOpenDiagramBehaviour() {
		OpenDiagramBehaviourImpl openDiagramBehaviour = new OpenDiagramBehaviourImpl();
		return openDiagramBehaviour;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenTopLevelNode createGenTopLevelNode() {
		GenTopLevelNodeImpl genTopLevelNode = new GenTopLevelNodeImpl();
		return genTopLevelNode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenChildNode createGenChildNode() {
		GenChildNodeImpl genChildNode = new GenChildNodeImpl();
		return genChildNode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenChildSideAffixedNode createGenChildSideAffixedNode() {
		GenChildSideAffixedNodeImpl genChildSideAffixedNode = new GenChildSideAffixedNodeImpl();
		return genChildSideAffixedNode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenChildLabelNode createGenChildLabelNode() {
		GenChildLabelNodeImpl genChildLabelNode = new GenChildLabelNodeImpl();
		return genChildLabelNode;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCompartment createGenCompartment() {
		GenCompartmentImpl genCompartment = new GenCompartmentImpl();
		return genCompartment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLink createGenLink() {
		GenLinkImpl genLink = new GenLinkImpl();
		return genLink;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNodeLabel createGenNodeLabel() {
		GenNodeLabelImpl genNodeLabel = new GenNodeLabelImpl();
		return genNodeLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenExternalNodeLabel createGenExternalNodeLabel() {
		GenExternalNodeLabelImpl genExternalNodeLabel = new GenExternalNodeLabelImpl();
		return genExternalNodeLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLinkLabel createGenLinkLabel() {
		GenLinkLabelImpl genLinkLabel = new GenLinkLabelImpl();
		return genLinkLabel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public MetamodelType createMetamodelType() {
		MetamodelTypeImpl metamodelType = new MetamodelTypeImpl();
		return metamodelType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SpecializationType createSpecializationType() {
		SpecializationTypeImpl specializationType = new SpecializationTypeImpl();
		return specializationType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotationType createNotationType() {
		NotationTypeImpl notationType = new NotationTypeImpl();
		return notationType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelModelFacet createLabelModelFacet() {
		LabelModelFacetImpl labelModelFacet = new LabelModelFacetImpl();
		return labelModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TypeModelFacet createTypeModelFacet() {
		TypeModelFacetImpl typeModelFacet = new TypeModelFacetImpl();
		return typeModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureLabelModelFacet createFeatureLabelModelFacet() {
		FeatureLabelModelFacetImpl featureLabelModelFacet = new FeatureLabelModelFacetImpl();
		return featureLabelModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DesignLabelModelFacet createDesignLabelModelFacet() {
		DesignLabelModelFacetImpl designLabelModelFacet = new DesignLabelModelFacetImpl();
		return designLabelModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TypeLinkModelFacet createTypeLinkModelFacet() {
		TypeLinkModelFacetImpl typeLinkModelFacet = new TypeLinkModelFacetImpl();
		return typeLinkModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FeatureLinkModelFacet createFeatureLinkModelFacet() {
		FeatureLinkModelFacetImpl featureLinkModelFacet = new FeatureLinkModelFacetImpl();
		return featureLinkModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ColorAttributes createColorAttributes() {
		ColorAttributesImpl colorAttributes = new ColorAttributesImpl();
		return colorAttributes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StyleAttributes createStyleAttributes() {
		StyleAttributesImpl styleAttributes = new StyleAttributesImpl();
		return styleAttributes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ResizeConstraints createResizeConstraints() {
		ResizeConstraintsImpl resizeConstraints = new ResizeConstraintsImpl();
		return resizeConstraints;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DefaultSizeAttributes createDefaultSizeAttributes() {
		DefaultSizeAttributesImpl defaultSizeAttributes = new DefaultSizeAttributesImpl();
		return defaultSizeAttributes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelOffsetAttributes createLabelOffsetAttributes() {
		LabelOffsetAttributesImpl labelOffsetAttributes = new LabelOffsetAttributesImpl();
		return labelOffsetAttributes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FigureViewmap createFigureViewmap() {
		FigureViewmapImpl figureViewmap = new FigureViewmapImpl();
		return figureViewmap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public SnippetViewmap createSnippetViewmap() {
		SnippetViewmapImpl snippetViewmap = new SnippetViewmapImpl();
		return snippetViewmap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public InnerClassViewmap createInnerClassViewmap() {
		InnerClassViewmapImpl innerClassViewmap = new InnerClassViewmapImpl();
		return innerClassViewmap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ParentAssignedViewmap createParentAssignedViewmap() {
		ParentAssignedViewmapImpl parentAssignedViewmap = new ParentAssignedViewmapImpl();
		return parentAssignedViewmap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ValueExpression createValueExpression() {
		ValueExpressionImpl valueExpression = new ValueExpressionImpl();
		return valueExpression;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenConstraint createGenConstraint() {
		GenConstraintImpl genConstraint = new GenConstraintImpl();
		return genConstraint;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Palette createPalette() {
		PaletteImpl palette = new PaletteImpl();
		return palette;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ToolEntry createToolEntry() {
		ToolEntryImpl toolEntry = new ToolEntryImpl();
		return toolEntry;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StandardEntry createStandardEntry() {
		StandardEntryImpl standardEntry = new StandardEntryImpl();
		return standardEntry;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Separator createSeparator() {
		SeparatorImpl separator = new SeparatorImpl();
		return separator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ToolGroup createToolGroup() {
		ToolGroupImpl toolGroup = new ToolGroupImpl();
		return toolGroup;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenFeatureSeqInitializer createGenFeatureSeqInitializer() {
		GenFeatureSeqInitializerImpl genFeatureSeqInitializer = new GenFeatureSeqInitializerImpl();
		return genFeatureSeqInitializer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenFeatureValueSpec createGenFeatureValueSpec() {
		GenFeatureValueSpecImpl genFeatureValueSpec = new GenFeatureValueSpecImpl();
		return genFeatureValueSpec;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenReferenceNewElementSpec createGenReferenceNewElementSpec() {
		GenReferenceNewElementSpecImpl genReferenceNewElementSpec = new GenReferenceNewElementSpecImpl();
		return genReferenceNewElementSpec;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLinkConstraints createGenLinkConstraints() {
		GenLinkConstraintsImpl genLinkConstraints = new GenLinkConstraintsImpl();
		return genLinkConstraints;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditRoot createGenAuditRoot() {
		GenAuditRootImpl genAuditRoot = new GenAuditRootImpl();
		return genAuditRoot;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditContainer createGenAuditContainer() {
		GenAuditContainerImpl genAuditContainer = new GenAuditContainerImpl();
		return genAuditContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditRule createGenAuditRule() {
		GenAuditRuleImpl genAuditRule = new GenAuditRuleImpl();
		return genAuditRule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDomainElementTarget createGenDomainElementTarget() {
		GenDomainElementTargetImpl genDomainElementTarget = new GenDomainElementTargetImpl();
		return genDomainElementTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagramElementTarget createGenDiagramElementTarget() {
		GenDiagramElementTargetImpl genDiagramElementTarget = new GenDiagramElementTargetImpl();
		return genDiagramElementTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDomainAttributeTarget createGenDomainAttributeTarget() {
		GenDomainAttributeTargetImpl genDomainAttributeTarget = new GenDomainAttributeTargetImpl();
		return genDomainAttributeTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNotationElementTarget createGenNotationElementTarget() {
		GenNotationElementTargetImpl genNotationElementTarget = new GenNotationElementTargetImpl();
		return genNotationElementTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenMetricContainer createGenMetricContainer() {
		GenMetricContainerImpl genMetricContainer = new GenMetricContainerImpl();
		return genMetricContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenMetricRule createGenMetricRule() {
		GenMetricRuleImpl genMetricRule = new GenMetricRuleImpl();
		return genMetricRule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditedMetricTarget createGenAuditedMetricTarget() {
		GenAuditedMetricTargetImpl genAuditedMetricTarget = new GenAuditedMetricTargetImpl();
		return genAuditedMetricTarget;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenAuditContext createGenAuditContext() {
		GenAuditContextImpl genAuditContext = new GenAuditContextImpl();
		return genAuditContext;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenExpressionProviderContainer createGenExpressionProviderContainer() {
		GenExpressionProviderContainerImpl genExpressionProviderContainer = new GenExpressionProviderContainerImpl();
		return genExpressionProviderContainer;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenJavaExpressionProvider createGenJavaExpressionProvider() {
		GenJavaExpressionProviderImpl genJavaExpressionProvider = new GenJavaExpressionProviderImpl();
		return genJavaExpressionProvider;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenExpressionInterpreter createGenExpressionInterpreter() {
		GenExpressionInterpreterImpl genExpressionInterpreter = new GenExpressionInterpreterImpl();
		return genExpressionInterpreter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLiteralExpressionProvider createGenLiteralExpressionProvider() {
		GenLiteralExpressionProviderImpl genLiteralExpressionProvider = new GenLiteralExpressionProviderImpl();
		return genLiteralExpressionProvider;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigator createGenNavigator() {
		GenNavigatorImpl genNavigator = new GenNavigatorImpl();
		return genNavigator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigatorChildReference createGenNavigatorChildReference() {
		GenNavigatorChildReferenceImpl genNavigatorChildReference = new GenNavigatorChildReferenceImpl();
		return genNavigatorChildReference;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigatorPath createGenNavigatorPath() {
		GenNavigatorPathImpl genNavigatorPath = new GenNavigatorPathImpl();
		return genNavigatorPath;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigatorPathSegment createGenNavigatorPathSegment() {
		GenNavigatorPathSegmentImpl genNavigatorPathSegment = new GenNavigatorPathSegmentImpl();
		return genNavigatorPathSegment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenPropertySheet createGenPropertySheet() {
		GenPropertySheetImpl genPropertySheet = new GenPropertySheetImpl();
		return genPropertySheet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenStandardPropertyTab createGenStandardPropertyTab() {
		GenStandardPropertyTabImpl genStandardPropertyTab = new GenStandardPropertyTabImpl();
		return genStandardPropertyTab;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCustomPropertyTab createGenCustomPropertyTab() {
		GenCustomPropertyTabImpl genCustomPropertyTab = new GenCustomPropertyTabImpl();
		return genCustomPropertyTab;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TypeTabFilter createTypeTabFilter() {
		TypeTabFilterImpl typeTabFilter = new TypeTabFilterImpl();
		return typeTabFilter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomTabFilter createCustomTabFilter() {
		CustomTabFilterImpl customTabFilter = new CustomTabFilterImpl();
		return customTabFilter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenSharedContributionItem createGenSharedContributionItem() {
		GenSharedContributionItemImpl genSharedContributionItem = new GenSharedContributionItemImpl();
		return genSharedContributionItem;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenGroupMarker createGenGroupMarker() {
		GenGroupMarkerImpl genGroupMarker = new GenGroupMarkerImpl();
		return genGroupMarker;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenSeparator createGenSeparator() {
		GenSeparatorImpl genSeparator = new GenSeparatorImpl();
		return genSeparator;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCustomAction createGenCustomAction() {
		GenCustomActionImpl genCustomAction = new GenCustomActionImpl();
		return genCustomAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommandAction createGenCommandAction() {
		GenCommandActionImpl genCommandAction = new GenCommandActionImpl();
		return genCommandAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LoadResourceAction createLoadResourceAction() {
		LoadResourceActionImpl loadResourceAction = new LoadResourceActionImpl();
		return loadResourceAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public InitDiagramAction createInitDiagramAction() {
		InitDiagramActionImpl initDiagramAction = new InitDiagramActionImpl();
		return initDiagramAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CreateShortcutAction createCreateShortcutAction() {
		CreateShortcutActionImpl createShortcutAction = new CreateShortcutActionImpl();
		return createShortcutAction;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenActionFactoryContributionItem createGenActionFactoryContributionItem() {
		GenActionFactoryContributionItemImpl genActionFactoryContributionItem = new GenActionFactoryContributionItemImpl();
		return genActionFactoryContributionItem;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenMenuManager createGenMenuManager() {
		GenMenuManagerImpl genMenuManager = new GenMenuManagerImpl();
		return genMenuManager;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenToolBarManager createGenToolBarManager() {
		GenToolBarManagerImpl genToolBarManager = new GenToolBarManagerImpl();
		return genToolBarManager;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenContextMenu createGenContextMenu() {
		GenContextMenuImpl genContextMenu = new GenContextMenuImpl();
		return genContextMenu;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenApplication createGenApplication() {
		GenApplicationImpl genApplication = new GenApplicationImpl();
		return genApplication;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenParsers createGenParsers() {
		GenParsersImpl genParsers = new GenParsersImpl();
		return genParsers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public PredefinedParser createPredefinedParser() {
		PredefinedParserImpl predefinedParser = new PredefinedParserImpl();
		return predefinedParser;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CustomParser createCustomParser() {
		CustomParserImpl customParser = new CustomParserImpl();
		return customParser;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ExternalParser createExternalParser() {
		ExternalParserImpl externalParser = new ExternalParserImpl();
		return externalParser;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StandardPreferencePages createStandardPreferencePagesFromString(EDataType eDataType, String initialValue) {
		StandardPreferencePages result = StandardPreferencePages.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertStandardPreferencePagesToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public RulerUnits createRulerUnitsFromString(EDataType eDataType, String initialValue) {
		RulerUnits result = RulerUnits.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertRulerUnitsToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Routing createRoutingFromString(EDataType eDataType, String initialValue) {
		Routing result = Routing.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertRoutingToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LineStyle createLineStyleFromString(EDataType eDataType, String initialValue) {
		LineStyle result = LineStyle.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLineStyleToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public JFaceFont createJFaceFontFromString(EDataType eDataType, String initialValue) {
		JFaceFont result = JFaceFont.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertJFaceFontToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public FontStyle createFontStyleFromString(EDataType eDataType, String initialValue) {
		FontStyle result = FontStyle.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertFontStyleToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public DiagramColors createDiagramColorsFromString(EDataType eDataType, String initialValue) {
		DiagramColors result = DiagramColors.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertDiagramColorsToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ProviderPriority createProviderPriorityFromString(EDataType eDataType, String initialValue) {
		ProviderPriority result = ProviderPriority.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertProviderPriorityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkLabelAlignment createLinkLabelAlignmentFromString(EDataType eDataType, String initialValue) {
		LinkLabelAlignment result = LinkLabelAlignment.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLinkLabelAlignmentToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelTextAccessMethod createLabelTextAccessMethodFromString(EDataType eDataType, String initialValue) {
		LabelTextAccessMethod result = LabelTextAccessMethod.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLabelTextAccessMethodToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ViewmapLayoutType createViewmapLayoutTypeFromString(EDataType eDataType, String initialValue) {
		ViewmapLayoutType result = ViewmapLayoutType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertViewmapLayoutTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StandardEntryKind createStandardEntryKindFromString(EDataType eDataType, String initialValue) {
		StandardEntryKind result = StandardEntryKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertStandardEntryKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenSeverity createGenSeverityFromString(EDataType eDataType, String initialValue) {
		GenSeverity result = GenSeverity.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertGenSeverityToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLanguage createGenLanguageFromString(EDataType eDataType, String initialValue) {
		GenLanguage result = GenLanguage.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertGenLanguageToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigatorReferenceType createGenNavigatorReferenceTypeFromString(EDataType eDataType, String initialValue) {
		GenNavigatorReferenceType result = GenNavigatorReferenceType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertGenNavigatorReferenceTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GeneratedType createGeneratedTypeFromString(EDataType eDataType, String initialValue) {
		GeneratedType result = GeneratedType.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertGeneratedTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GMFGenPackage getGMFGenPackage() {
		return (GMFGenPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@deprecated
	 * @@generated
	 */
	@@Deprecated
	public static GMFGenPackage getPackage() {
		return GMFGenPackage.eINSTANCE;
	}

} //GMFGenFactoryImpl@


1.82
log
@[174961] Menu actions - refactor previously generated actions to match general approach.
@
text
@d73 1
d359 10
@


1.81
log
@[174961] Code generation support for custom actions
@
text
@d146 3
d1088 30
@


1.80
log
@[244419] Support for custom parser - finalize parsers/labelmodelfacet relationship
@
text
@d144 2
d149 1
d1065 20
d1115 10
@


1.79
log
@[235113] alternative parser access, step 1: introduce separate entity into genmodel to keep track of attributes related to parsing
@
text
@d91 1
d532 10
@


1.78
log
@[227127] support literal values for feature initializers. step 1: models updated to specify new possible values
@
text
@d147 4
d1091 40
@


1.77
log
@[232761] support new diagram prefs
@
text
@d130 1
d917 10
@


1.76
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@d165 2
d210 2
d1136 20
@


1.75
log
@[226149] Refactor Validation/Constraints: explicit context groupings instead of ID matching, unused IClientSelectors implementations are no longer generated, less custom code in the model, odd approach with map (semanticCtxIdMap) replaced with in-place VisualID check.
@
text
@d34 1
a34 1
			GMFGenFactory theGMFGenFactory = (GMFGenFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2006/GenModel"); 
@


1.74
log
@[150177] phase II, generated facility to perform metamodel operations (like instanceof or metaclass accessors) with dynamic models, new gmfgen options to parameterize codegen.
@
text
@d126 1
d872 10
@


1.73
log
@switching to nsURI format which uses year to denote model version (same way EMF does)
@
text
@a17 49
import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;
import org.eclipse.gmf.codegen.gmfgen.DefaultSizeAttributes;
import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;
import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.FigureViewmap;
import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenAuditContainer;
import org.eclipse.gmf.codegen.gmfgen.GenAuditRule;
import org.eclipse.gmf.codegen.gmfgen.GenAuditedMetricTarget;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenConstraint;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenDiagramElementTarget;
import org.eclipse.gmf.codegen.gmfgen.GenDomainElementTarget;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.gmfgen.GenEditorView;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
import org.eclipse.gmf.codegen.gmfgen.GenExternalNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.GenFeatureSeqInitializer;
import org.eclipse.gmf.codegen.gmfgen.GenFeatureValueSpec;
import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenLinkConstraints;
import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;
import org.eclipse.gmf.codegen.gmfgen.GenMetricContainer;
import org.eclipse.gmf.codegen.gmfgen.GenMetricRule;
import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.GenNotationElementTarget;
import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
import org.eclipse.gmf.codegen.gmfgen.GenSeverity;
import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;
import org.eclipse.gmf.codegen.gmfgen.InnerClassViewmap;
import org.eclipse.gmf.codegen.gmfgen.LinkLabelAlignment;
import org.eclipse.gmf.codegen.gmfgen.MetamodelType;
import org.eclipse.gmf.codegen.gmfgen.NotationType;
import org.eclipse.gmf.codegen.gmfgen.Palette;
import org.eclipse.gmf.codegen.gmfgen.ProviderPriority;
import org.eclipse.gmf.codegen.gmfgen.ResizeConstraints;
import org.eclipse.gmf.codegen.gmfgen.Separator;
import org.eclipse.gmf.codegen.gmfgen.SnippetViewmap;
import org.eclipse.gmf.codegen.gmfgen.SpecializationType;
import org.eclipse.gmf.codegen.gmfgen.ToolEntry;
import org.eclipse.gmf.codegen.gmfgen.ToolGroup;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;
import org.eclipse.gmf.codegen.gmfgen.ValueExpression;
d75 1
d361 10
@


1.72
log
@GenDiagramUpdater created in .gmfgen model
@
text
@d83 1
a83 1
			GMFGenFactory theGMFGenFactory = (GMFGenFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/GenModel/2.0"); 
@


1.71
log
@combine label text access methods
@
text
@d122 1
d389 10
@


1.70
log
@additional methods to produce label text and parse user input
@
text
@d221 2
a222 4
			case GMFGenPackage.LABEL_VIEW_METHOD:
				return createLabelViewMethodFromString(eDataType, initialValue);
			case GMFGenPackage.LABEL_EDIT_METHOD:
				return createLabelEditMethodFromString(eDataType, initialValue);
d264 2
a265 4
			case GMFGenPackage.LABEL_VIEW_METHOD:
				return convertLabelViewMethodToString(eDataType, instanceValue);
			case GMFGenPackage.LABEL_EDIT_METHOD:
				return convertLabelEditMethodToString(eDataType, instanceValue);
d1248 2
a1249 2
	public LabelViewMethod createLabelViewMethodFromString(EDataType eDataType, String initialValue) {
		LabelViewMethod result = LabelViewMethod.get(initialValue);
d1259 1
a1259 21
	public String convertLabelViewMethodToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelEditMethod createLabelEditMethodFromString(EDataType eDataType, String initialValue) {
		LabelEditMethod result = LabelEditMethod.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLabelEditMethodToString(EDataType eDataType, Object instanceValue) {
@


1.69
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d221 4
d266 4
d1252 40
@


1.68
log
@refactor GenAuditContainer: flatten hierarchy as it fits most for templates we write
@
text
@d109 1
d202 1
d243 1
d1374 1
@


1.67
log
@[134107] add entities for preference pages
@
text
@d162 1
d791 10
@


1.66
log
@NavigatorContentProvider template reimplemented on xpand
@
text
@d114 2
d202 2
d242 2
d310 20
d1070 20
@


1.65
log
@[134107] Provide preferences for the generated diagram editors
@
text
@d174 2
d904 20
@


1.64
log
@allow to specify ui contributions for rcp application in genmodel
@
text
@d114 5
d198 10
d236 10
d302 50
d1022 100
@


1.63
log
@[164021] allow to choose standard tools
@
text
@d174 6
d877 60
@


1.62
log
@#161380 simplify feature model facets
@
text
@d148 1
d193 2
d221 2
d611 10
d941 20
@


1.61
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@a18 2
import org.eclipse.gmf.codegen.gmfgen.CompositeFeatureLabelModelFacet;
import org.eclipse.gmf.codegen.gmfgen.CompositeFeatureModelFacet;
a21 1
import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;
a130 2
			case GMFGenPackage.FEATURE_MODEL_FACET: return createFeatureModelFacet();
			case GMFGenPackage.COMPOSITE_FEATURE_MODEL_FACET: return createCompositeFeatureModelFacet();
a133 1
			case GMFGenPackage.COMPOSITE_FEATURE_LABEL_MODEL_FACET: return createCompositeFeatureLabelModelFacet();
a435 10
	public FeatureModelFacet createFeatureModelFacet() {
		FeatureModelFacetImpl featureModelFacet = new FeatureModelFacetImpl();
		return featureModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a445 20
	public CompositeFeatureModelFacet createCompositeFeatureModelFacet() {
		CompositeFeatureModelFacetImpl compositeFeatureModelFacet = new CompositeFeatureModelFacetImpl();
		return compositeFeatureModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompositeFeatureLabelModelFacet createCompositeFeatureLabelModelFacet() {
		CompositeFeatureLabelModelFacetImpl compositeFeatureLabelModelFacet = new CompositeFeatureLabelModelFacetImpl();
		return compositeFeatureLabelModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.60
log
@#114200 Provide an option to generate RCP application
@
text
@d119 2
d292 20
@


1.59
log
@Read-only properties provided into the navigator.
@
text
@d177 1
d870 10
@


1.58
log
@Generate PropertySheet pluged into tabbed page framework of Eclipse instead of plug-in as runtime provider.
Eases pages being added/removed/replaced/tuned
@
text
@d201 2
d227 2
d989 20
@


1.57
log
@Model navigator, initial version.
@
text
@d172 5
d815 50
@


1.56
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
- updating gmfgen
@
text
@d170 2
d194 2
d218 2
d790 20
d910 20
d944 1
a944 1
} //GMFGenFactoryImpl
@


1.55
log
@[124826] mgolubev - Support nodes with border items
@
text
@d86 1
a86 1
			GMFGenFactory theGMFGenFactory = (GMFGenFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.eclipse.org/gmf/2005/GenModel"); 
d156 1
d644 10
@


1.54
log
@add custom behaviour
@
text
@d121 1
d293 10
@


1.53
log
@[mgolubev] #145863 Colors defined in the gmfgraph model should be used by the generated polyline connections
@
text
@d118 1
d262 10
@


1.52
log
@#144683 It should be possible to modify label value on pure design diagram
@
text
@d138 1
d461 10
@


1.51
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d136 1
d420 10
@


1.50
log
@heading towards explicit use of parent's figure in children
@
text
@d185 2
d207 2
d809 20
@


1.49
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d143 1
d505 10
@


1.48
log
@#133836 Creating a child node without a label causes error
@
text
@d180 2
d200 2
d754 20
@


1.47
log
@#138464 Support EAttribute based target in AuditRule element
@
text
@d120 1
d270 10
@


1.46
log
@#136877 Provide inital offset from the host link for the link label
@
text
@d155 1
d619 10
@


1.45
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d16 2
d138 1
d448 10
@


1.44
log
@[#134511] common access to expressions of different languages
@
text
@a14 1
import org.eclipse.gmf.codegen.gmfgen.*;
d37 2
d42 1
a53 1
import org.eclipse.gmf.codegen.gmfgen.LinkEntry;
d55 2
a56 1
import org.eclipse.gmf.codegen.gmfgen.NodeEntry;
d60 1
d62 2
d142 2
a143 2
			case GMFGenPackage.NODE_ENTRY: return createNodeEntry();
			case GMFGenPackage.LINK_ENTRY: return createLinkEntry();
d505 3
a507 3
	public NodeEntry createNodeEntry() {
		NodeEntryImpl nodeEntry = new NodeEntryImpl();
		return nodeEntry;
d515 3
a517 3
	public LinkEntry createLinkEntry() {
		LinkEntryImpl linkEntry = new LinkEntryImpl();
		return linkEntry;
@


1.43
log
@#126200 register element types in xml
@
text
@d151 3
d640 30
@


1.42
log
@#114061 Support shape with fixed horizontal/vertical size. First, 'resize' part of the request was covered.
Obsolete ShapeAttributes class was deleted, same attributes should be set in gmfgraph now.
@
text
@d15 2
d118 3
d307 30
@


1.41
log
@#130715 Use default label text defined in gmfgraph model
@
text
@a14 2
import org.eclipse.gmf.codegen.gmfgen.*;

d27 1
d42 2
d55 1
a55 1
import org.eclipse.gmf.codegen.gmfgen.ShapeAttributes;
d124 1
a124 1
			case GMFGenPackage.SHAPE_ATTRIBUTES: return createShapeAttributes();
d382 3
a384 3
	public ShapeAttributes createShapeAttributes() {
		ShapeAttributesImpl shapeAttributes = new ShapeAttributesImpl();
		return shapeAttributes;
@


1.40
log
@[rdvorak] #114196 Allow for the definition of diagram validation rules
@
text
@a55 1
import org.eclipse.gmf.codegen.gmfgen.TextLabelModelFacet;
a114 1
			case GMFGenPackage.TEXT_LABEL_MODEL_FACET: return createTextLabelModelFacet();
a300 10
	public TextLabelModelFacet createTextLabelModelFacet() {
		TextLabelModelFacetImpl textLabelModelFacet = new TextLabelModelFacetImpl();
		return textLabelModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.39
log
@[rdvorak] #127446 Enable audit rules on diagram (notation model) elements in gmfgen model
@
text
@d15 2
d144 3
d583 30
@


1.38
log
@#126245 configurable priorities
@
text
@a14 2
import org.eclipse.gmf.codegen.gmfgen.*;

d31 2
d42 1
d51 1
d139 3
d548 30
@


1.37
log
@organized imports
@
text
@d15 2
d149 2
d167 2
d543 20
@


1.36
log
@[rdvorak] #127700 Rename genmodel::ModelElementSelector as a generic GenConstraint element
@
text
@a14 2
import org.eclipse.gmf.codegen.gmfgen.*;

@


1.35
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d18 2
d21 2
d31 1
d33 2
d42 1
a47 1
import org.eclipse.gmf.codegen.gmfgen.ModelElementSelector;
d52 1
d127 1
a127 1
			case GMFGenPackage.MODEL_ELEMENT_SELECTOR: return createModelElementSelector();
d439 3
a441 3
	public ModelElementSelector createModelElementSelector() {
		ModelElementSelectorImpl modelElementSelector = new ModelElementSelectorImpl();
		return modelElementSelector;
@


1.34
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d95 1
d191 10
@


1.33
log
@#126533 It should be possible to specify a label with fixed text in gmfgen model
@
text
@d93 1
d170 10
@


1.32
log
@refactor feature model facet; use distinct feature-based model facets for links and labels
@
text
@d102 1
d259 10
@


1.31
log
@#125729 Support labels based on multiple structural features
@
text
@d106 3
d278 10
d298 10
d318 10
@


1.30
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d104 1
d275 10
@


1.29
log
@split that eyeball teaser, GenDiagram, into smaller parts, aiming to hack it further later on
@
text
@d15 2
d94 1
d174 10
@


1.28
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@a14 2
import org.eclipse.gmf.codegen.gmfgen.*;

@


1.27
log
@organized imports
@
text
@d15 2
@


1.26
log
@#124413
Cleaning up the gmfgen model
@
text
@a14 3

import org.eclipse.gmf.codegen.gmfgen.*;

@


1.25
log
@remove stale import
@
text
@d16 2
@


1.24
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a14 1
import org.eclipse.gmf.codegen.gmfgen.*;
@


1.23
log
@#122054 support external node labels (partial fix)
@
text
@d17 1
a17 2
import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;
import org.eclipse.gmf.codegen.gmfgen.CompartmentPlacementKind;
d23 2
d28 1
a33 1
import org.eclipse.gmf.codegen.gmfgen.GenNode;
d35 3
d94 2
a95 1
			case GMFGenPackage.GEN_NODE: return createGenNode();
a96 1
			case GMFGenPackage.GEN_CHILD_NODE: return createGenChildNode();
a132 4
			case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND:
				return createCompartmentPlacementKindFromString(eDataType, initialValue);
			case GMFGenPackage.COMPARTMENT_LAYOUT_KIND:
				return createCompartmentLayoutKindFromString(eDataType, initialValue);
a148 4
			case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND:
				return convertCompartmentPlacementKindToString(eDataType, instanceValue);
			case GMFGenPackage.COMPARTMENT_LAYOUT_KIND:
				return convertCompartmentLayoutKindToString(eDataType, instanceValue);
d173 3
a175 3
	public GenNode createGenNode() {
		GenNodeImpl genNode = new GenNodeImpl();
		return genNode;
d183 3
a185 3
	public GenCompartment createGenCompartment() {
		GenCompartmentImpl genCompartment = new GenCompartmentImpl();
		return genCompartment;
d193 3
a195 3
	public GenChildNode createGenChildNode() {
		GenChildNodeImpl genChildNode = new GenChildNodeImpl();
		return genChildNode;
a442 40
	public CompartmentPlacementKind createCompartmentPlacementKindFromString(EDataType eDataType, String initialValue) {
		CompartmentPlacementKind result = CompartmentPlacementKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertCompartmentPlacementKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompartmentLayoutKind createCompartmentLayoutKindFromString(EDataType eDataType, String initialValue) {
		CompartmentLayoutKind result = CompartmentLayoutKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertCompartmentLayoutKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.22
log
@#123240, part 1 - get rid of StringArray datatype
@
text
@d95 1
d227 10
@


1.21
log
@[rdvorak] #123232 audits (ocl constraints) definition in genmodel
@
text
@a135 2
			case GMFGenPackage.STRING_ARRAY:
				return createStringArrayFromString(eDataType, initialValue);
a155 2
			case GMFGenPackage.STRING_ARRAY:
				return convertStringArrayToString(eDataType, instanceValue);
a515 22
	public String[] createStringArrayFromString(EDataType eDataType, String initialValue) {
		// TODO: implement this method
		// Ensure that you remove @@generated or mark it @@generated NOT
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertStringArrayToString(EDataType eDataType, Object instanceValue) {
		// TODO: implement this method
		// Ensure that you remove @@generated or mark it @@generated NOT
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.20
log
@one more flavor of snippet viewmap - inner class
@
text
@d114 2
d134 2
d156 2
d420 20
d500 20
@


1.19
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d104 1
d314 10
@


1.18
log
@[rdvorak] #117743 support for link creation constraints
@
text
@d12 1
d14 1
a16 2
import org.eclipse.gmf.codegen.gmfgen.BasicNodeViewmap;
import org.eclipse.gmf.codegen.gmfgen.ColorAttributes;
a18 1
import org.eclipse.gmf.codegen.gmfgen.DecoratedConnectionViewmap;
d21 1
d30 1
a33 1
import org.eclipse.gmf.codegen.gmfgen.LinkDecoration;
d40 1
d54 19
d102 2
a103 6
			case GMFGenPackage.BASIC_NODE_VIEWMAP: return createBasicNodeViewmap();
			case GMFGenPackage.DECORATED_CONNECTION_VIEWMAP: return createDecoratedConnectionViewmap();
			case GMFGenPackage.LINK_DECORATION: return createLinkDecoration();
			case GMFGenPackage.DIAGRAM_VIEWMAP: return createDiagramViewmap();
			case GMFGenPackage.COMPARTMENT_VIEWMAP: return createCompartmentViewmap();
			case GMFGenPackage.LABEL_VIEWMAP: return createLabelViewmap();
d125 6
a130 15
			case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND: {
				CompartmentPlacementKind result = CompartmentPlacementKind.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
			case GMFGenPackage.COMPARTMENT_LAYOUT_KIND: {
				CompartmentLayoutKind result = CompartmentLayoutKind.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
			case GMFGenPackage.LINK_LABEL_ALIGNMENT: {
				LinkLabelAlignment result = LinkLabelAlignment.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
d146 1
a146 1
				return instanceValue == null ? null : instanceValue.toString();
d148 1
a148 1
				return instanceValue == null ? null : instanceValue.toString();
d150 1
a150 1
				return instanceValue == null ? null : instanceValue.toString();
d293 13
a305 3
	public BasicNodeViewmap createBasicNodeViewmap() {
		BasicNodeViewmapImpl basicNodeViewmap = new BasicNodeViewmapImpl();
		return basicNodeViewmap;
d313 3
a315 3
	public DecoratedConnectionViewmap createDecoratedConnectionViewmap() {
		DecoratedConnectionViewmapImpl decoratedConnectionViewmap = new DecoratedConnectionViewmapImpl();
		return decoratedConnectionViewmap;
d323 3
a325 3
	public LinkDecoration createLinkDecoration() {
		LinkDecorationImpl linkDecoration = new LinkDecorationImpl();
		return linkDecoration;
d333 13
a345 3
	public DiagramViewmap createDiagramViewmap() {
		DiagramViewmapImpl diagramViewmap = new DiagramViewmapImpl();
		return diagramViewmap;
d353 3
a355 3
	public CompartmentViewmap createCompartmentViewmap() {
		CompartmentViewmapImpl compartmentViewmap = new CompartmentViewmapImpl();
		return compartmentViewmap;
d363 3
a365 3
	public LabelViewmap createLabelViewmap() {
		LabelViewmapImpl labelViewmap = new LabelViewmapImpl();
		return labelViewmap;
d373 3
a375 3
	public ValueExpression createValueExpression() {
		ValueExpressionImpl valueExpression = new ValueExpressionImpl();
		return valueExpression;
d383 3
a385 3
	public ModelElementSelector createModelElementSelector() {
		ModelElementSelectorImpl modelElementSelector = new ModelElementSelectorImpl();
		return modelElementSelector;
d393 3
a395 3
	public Palette createPalette() {
		PaletteImpl palette = new PaletteImpl();
		return palette;
d403 4
a406 3
	public NodeEntry createNodeEntry() {
		NodeEntryImpl nodeEntry = new NodeEntryImpl();
		return nodeEntry;
d414 2
a415 3
	public LinkEntry createLinkEntry() {
		LinkEntryImpl linkEntry = new LinkEntryImpl();
		return linkEntry;
d423 4
a426 3
	public ToolGroup createToolGroup() {
		ToolGroupImpl toolGroup = new ToolGroupImpl();
		return toolGroup;
d434 2
a435 3
	public GenFeatureSeqInitializer createGenFeatureSeqInitializer() {
		GenFeatureSeqInitializerImpl genFeatureSeqInitializer = new GenFeatureSeqInitializerImpl();
		return genFeatureSeqInitializer;
d443 4
a446 3
	public GenFeatureValueSpec createGenFeatureValueSpec() {
		GenFeatureValueSpecImpl genFeatureValueSpec = new GenFeatureValueSpecImpl();
		return genFeatureValueSpec;
d454 2
a455 3
	public GenLinkConstraints createGenLinkConstraints() {
		GenLinkConstraintsImpl genLinkConstraints = new GenLinkConstraintsImpl();
		return genLinkConstraints;
@


1.17
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d96 1
d426 10
@


1.16
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d108 15
a122 6
			case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND:
				return createCompartmentPlacementKindFromString(eDataType, initialValue);
			case GMFGenPackage.COMPARTMENT_LAYOUT_KIND:
				return createCompartmentLayoutKindFromString(eDataType, initialValue);
			case GMFGenPackage.LINK_LABEL_ALIGNMENT:
				return createLinkLabelAlignmentFromString(eDataType, initialValue);
d138 1
a138 1
				return convertCompartmentPlacementKindToString(eDataType, instanceValue);
d140 1
a140 1
				return convertCompartmentLayoutKindToString(eDataType, instanceValue);
d142 1
a142 1
				return convertLinkLabelAlignmentToString(eDataType, instanceValue);
a424 60
	public CompartmentPlacementKind createCompartmentPlacementKindFromString(EDataType eDataType, String initialValue) {
		CompartmentPlacementKind result = CompartmentPlacementKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertCompartmentPlacementKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public CompartmentLayoutKind createCompartmentLayoutKindFromString(EDataType eDataType, String initialValue) {
		CompartmentLayoutKind result = CompartmentLayoutKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertCompartmentLayoutKindToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkLabelAlignment createLinkLabelAlignmentFromString(EDataType eDataType, String initialValue) {
		LinkLabelAlignment result = LinkLabelAlignment.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String convertLinkLabelAlignmentToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.15
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d108 6
a113 15
			case GMFGenPackage.COMPARTMENT_PLACEMENT_KIND: {
				CompartmentPlacementKind result = CompartmentPlacementKind.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
			case GMFGenPackage.COMPARTMENT_LAYOUT_KIND: {
				CompartmentLayoutKind result = CompartmentLayoutKind.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
			case GMFGenPackage.LINK_LABEL_ALIGNMENT: {
				LinkLabelAlignment result = LinkLabelAlignment.get(initialValue);
				if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
				return result;
			}
d129 1
a129 1
				return instanceValue == null ? null : instanceValue.toString();
d131 1
a131 1
				return instanceValue == null ? null : instanceValue.toString();
d133 1
a133 1
				return instanceValue == null ? null : instanceValue.toString();
d416 60
@


1.14
log
@[dsadnik] #113824 marker viewmaps for diagram, label and childcontainer
@
text
@d16 1
d21 1
a23 1
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
d25 1
d27 4
d32 1
d35 2
d41 3
d71 1
a71 1
			case GMFGenPackage.GEN_CHILD_CONTAINER: return createGenChildContainer();
d175 3
a177 3
	public GenChildNode createGenChildNode() {
		GenChildNodeImpl genChildNode = new GenChildNodeImpl();
		return genChildNode;
d185 3
a187 3
	public GenLink createGenLink() {
		GenLinkImpl genLink = new GenLinkImpl();
		return genLink;
d195 3
a197 3
	public GenChildContainer createGenChildContainer() {
		GenChildContainerImpl genChildContainer = new GenChildContainerImpl();
		return genChildContainer;
@


1.13
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d73 3
d303 30
@


1.12
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@a24 2
import org.eclipse.gmf.codegen.gmfgen.GenLinkReferenceOnly;
import org.eclipse.gmf.codegen.gmfgen.GenLinkWithClass;
d61 1
a61 2
			case GMFGenPackage.GEN_LINK_WITH_CLASS: return createGenLinkWithClass();
			case GMFGenPackage.GEN_LINK_REFERENCE_ONLY: return createGenLinkReferenceOnly();
d170 3
a172 3
	public GenChildContainer createGenChildContainer() {
		GenChildContainerImpl genChildContainer = new GenChildContainerImpl();
		return genChildContainer;
d180 3
a182 13
	public GenLinkWithClass createGenLinkWithClass() {
		GenLinkWithClassImpl genLinkWithClass = new GenLinkWithClassImpl();
		return genLinkWithClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLinkReferenceOnly createGenLinkReferenceOnly() {
		GenLinkReferenceOnlyImpl genLinkReferenceOnly = new GenLinkReferenceOnlyImpl();
		return genLinkReferenceOnly;
@


1.11
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d65 5
a69 1
			case GMFGenPackage.LINK_LABEL: return createLinkLabel();
d203 43
a245 3
	public LinkLabel createLinkLabel() {
		LinkLabelImpl linkLabel = new LinkLabelImpl();
		return linkLabel;
@


1.10
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d78 2
d329 20
@


1.9
log
@[dstadnik] #112194 Link label should be positioned on the link accordingly to it's weight defined
in gmfgen model
@
text
@d72 2
d267 20
@


1.8
log
@#112191 colors as Viewmap's Attributes
@
text
@d98 5
d121 2
@


1.7
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@d66 1
d198 10
@


1.6
log
@#111775 stale properties in gmfgen
#111784 GenChildContainer extends GenCommonBase
@
text
@d13 2
d65 1
d187 10
@


1.5
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@d59 1
a60 1
			case GMFGenPackage.GEN_CHILD_CONTAINER: return createGenChildContainer();
@


1.4
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d13 1
a13 2
import org.eclipse.gmf.codegen.gmfgen.*;

d16 2
d26 1
d30 1
@


1.3
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d13 2
d60 5
d181 50
@


1.2
log
@[ashatalin] Action to initialize diagram from existing domain model gets generated.
@
text
@a12 2
import org.eclipse.gmf.codegen.gmfgen.*;

@


1.1
log
@*** empty log message ***
@
text
@d13 2
@

