head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081015-1925:1.3
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.3
	v20080910-1520:1.3
	v20080903-1520:1.3
	v20080827-1520:1.3
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080722-1827:1.3
	v20080718-1731:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.2
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080528-1052:1.3
	v20080521:1.3
	v20080516-1543:1.3
	v20080516-1143:1.3
	v20080512-1200:1.3
	v20080508-2000:1.3
	v20080507-1326:1.3
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080207-0207:1.1
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070403-1500:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070202-0200:1.1
	v20070103-0300:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061027-1200:1.1
	v20061020-1000:1.1
	v20061013-1330:1.1
	v20060919-0800:1.1
	v20060907-1100:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060824-1600:1.1
	v20060817-1500:1.1
	v20060728-0500:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060626-1420:1.1
	v20060620-0400:1.1
	v20060616-1400:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	39124821b4de4567;

1.2
date	2008.05.05.21.06.41;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	4186481f76b14567;

1.1
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id: GenJavaExpressionProvider.java,v 1.2 2008/05/05 21:06:41 atikhomirov Exp $
 */
package org.eclipse.gmf.codegen.gmfgen;


/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Gen Java Expression Provider</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider#isThrowException <em>Throw Exception</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider#isInjectExpressionBody <em>Inject Expression Body</em>}</li>
 * </ul>
 * </p>
 *
 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenJavaExpressionProvider()
 * @@model
 * @@generated
 */
public interface GenJavaExpressionProvider extends GenExpressionProviderBase {
	/**
	 * Returns the value of the '<em><b>Throw Exception</b></em>' attribute.
	 * The default value is <code>"true"</code>.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Throw Exception</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Throw Exception</em>' attribute.
	 * @@see #setThrowException(boolean)
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenJavaExpressionProvider_ThrowException()
	 * @@model default="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel documentaion='Whether to generate default implementation that rises RuntimeException to signal unimplemented method'"
	 * @@generated
	 */
	boolean isThrowException();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider#isThrowException <em>Throw Exception</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Throw Exception</em>' attribute.
	 * @@see #isThrowException()
	 * @@generated
	 */
	void setThrowException(boolean value);

	/**
	 * Returns the value of the '<em><b>Inject Expression Body</b></em>' attribute.
	 * The default value is <code>"false"</code>.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Inject Expression Body</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@return the value of the '<em>Inject Expression Body</em>' attribute.
	 * @@see #setInjectExpressionBody(boolean)
	 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getGenJavaExpressionProvider_InjectExpressionBody()
	 * @@model default="false"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel documentaion='When \'true\', body of associated ValueExpression would get injected into Java code as-is, thus allowing to provide method implementations right within the model. Note, if body is empty, default implementation would be generated instead.'"
	 * @@generated
	 */
	boolean isInjectExpressionBody();

	/**
	 * Sets the value of the '{@@link org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider#isInjectExpressionBody <em>Inject Expression Body</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@param value the new value of the '<em>Inject Expression Body</em>' attribute.
	 * @@see #isInjectExpressionBody()
	 * @@generated
	 */
	void setInjectExpressionBody(boolean value);

} // GenJavaExpressionProvider
@


1.2
log
@[228913] cleaned isCopy and java provider's getOperationName that are not in use any more; introduced fine-tuning options: use expressions body for java methods and whether to throw exception or fail silently (using reasonable/appropriate for the context default value), latter change obsoleted NoImplException and respective debug options
@
text
@d5 1
a5 1
 * $Id: GenJavaExpressionProvider.java,v 1.1 2006/04/13 15:41:17 radvorak Exp $
a64 3
	 * <!-- begin-model-doc -->
	 * When 'true', body of associated ValueExpression would get injected into Java code as-is, thus allowing to provide method implementations right within the model. Note, if body is empty, default implementation would be generated instead.
	 * <!-- end-model-doc -->
d69 1
@


1.1
log
@[#134511] common access to expressions of different languages
@
text
@d5 1
a5 1
 * $Id$
d15 7
d29 2
d32 4
d37 5
a41 1
	 * @@model expressionRequired="true"
d44 41
a84 1
	String getOperationName(ValueExpression expression);
@

