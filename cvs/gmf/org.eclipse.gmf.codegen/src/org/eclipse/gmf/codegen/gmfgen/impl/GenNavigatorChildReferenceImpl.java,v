head	1.11;
access;
symbols
	v20081022-1925:1.11
	v20081015-1925:1.11
	v20081008-1925:1.11
	v20081001-1925:1.11
	v20080930-1130:1.11
	v20080926-1245:1.11
	v20080924-1925:1.11
	v20080917-1925:1.11
	v20080911-1728:1.11
	v20080910-1520:1.11
	v20080903-1520:1.11
	v20080827-1520:1.11
	v20080813-1520:1.11
	v20080806-1520:1.11
	v20080722-1827:1.11
	v20080718-1731:1.11
	v20080716-1600:1.11
	v20080716-1642:1.11
	R2_1_maintenance:1.11.0.2
	Root_R2_1_maintenance:1.11
	R2_1_0:1.11
	v20080610-1132:1.11
	v20080603-1553:1.11
	v20080528-1052:1.11
	v20080521:1.11
	v20080516-1543:1.11
	v20080516-1143:1.11
	v20080512-1200:1.11
	v20080508-2000:1.11
	v20080507-1326:1.11
	v20080503-1740:1.11
	v20080501-1739:1.11
	v20080425-1959:1.11
	v20080417-1610:1.10
	v20080411-0411:1.10
	v20080404-1111:1.10
	v20080322-0000:1.10
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071222-1111:1.9
	v20071214-1111:1.9
	v20071130-1111:1.9
	v20071124-0000:1.9
	v20071112-0000:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070928-0000:1.9
	v20070921-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070614-1400:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070525-1500:1.9
	v20070520-1200:1.9
	v20070518-1300:1.9
	v20070504-1000:1.9
	v20070427-0600:1.9
	v20070420-1000:1.9
	v20070413-1300:1.9
	v20070405-1100:1.7
	v20070403-1500:1.7
	v20070330-1300:1.7
	v20060330-1300:1.7
	v20070322-1100:1.7
	v20060316-0600:1.7
	v20070307-0700:1.6
	v20070301-1200:1.6
	v20070228-2000:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070103-0300:1.6
	M4_20:1.6
	v20061222-1800:1.5
	v20061218-1200:1.5
	v20061214-0000:1.5
	v20061120-1300:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061013-1330:1.5;
locks; strict;
comment	@# @;
expand	@k@;


1.11
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	2e1d4808b3814567;

1.10
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	5e5047cd7dd64567;

1.9
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.8;
commitid	725b461c97d64567;

1.8
date	2007.04.06.14.37.41;	author ashatalin;	state Exp;
branches;
next	1.7;
commitid	5df46165b334567;

1.7
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	444245f8090b4567;

1.6
date	2006.12.28.19.45.51;	author ashatalin;	state Exp;
branches;
next	1.5;
commitid	13f545941eec4567;

1.5
date	2006.09.15.21.45.45;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.09.15.11.48.01;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.14.18.08.54;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.12.18.18.19;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.11.18.21.36;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.11
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.BasicEList.UnmodifiableEList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenNavigator;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorChildReference;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPath;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPathSegment;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorReferenceType;
import org.eclipse.gmf.internal.codegen.util.GenModelGraphAnalyzer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Navigator Child Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getNavigator <em>Navigator</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getParent <em>Parent</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getChild <em>Child</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getReferenceType <em>Reference Type</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getGroupName <em>Group Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getGroupIcon <em>Group Icon</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#isHideIfEmpty <em>Hide If Empty</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenNavigatorChildReferenceImpl extends EObjectImpl implements GenNavigatorChildReference {
	/**
	 * The cached value of the '{@@link #getParent() <em>Parent</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getParent()
	 * @@generated
	 * @@ordered
	 */
	protected GenCommonBase parent;

	/**
	 * The cached value of the '{@@link #getChild() <em>Child</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChild()
	 * @@generated
	 * @@ordered
	 */
	protected GenCommonBase child;

	/**
	 * The default value of the '{@@link #getReferenceType() <em>Reference Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getReferenceType()
	 * @@generated
	 * @@ordered
	 */
	protected static final GenNavigatorReferenceType REFERENCE_TYPE_EDEFAULT = GenNavigatorReferenceType.CHILDREN_LITERAL;

	/**
	 * The cached value of the '{@@link #getReferenceType() <em>Reference Type</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getReferenceType()
	 * @@generated
	 * @@ordered
	 */
	protected GenNavigatorReferenceType referenceType = REFERENCE_TYPE_EDEFAULT;

	/**
	 * The default value of the '{@@link #getGroupName() <em>Group Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String GROUP_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getGroupName() <em>Group Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupName()
	 * @@generated
	 * @@ordered
	 */
	protected String groupName = GROUP_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getGroupIcon() <em>Group Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupIcon()
	 * @@generated
	 * @@ordered
	 */
	protected static final String GROUP_ICON_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getGroupIcon() <em>Group Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupIcon()
	 * @@generated
	 * @@ordered
	 */
	protected String groupIcon = GROUP_ICON_EDEFAULT;

	/**
	 * The default value of the '{@@link #isHideIfEmpty() <em>Hide If Empty</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isHideIfEmpty()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean HIDE_IF_EMPTY_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isHideIfEmpty() <em>Hide If Empty</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isHideIfEmpty()
	 * @@generated
	 * @@ordered
	 */
	protected boolean hideIfEmpty = HIDE_IF_EMPTY_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenNavigatorChildReferenceImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenNavigatorChildReference();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigator getNavigator() {
		if (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR) return null;
		return (GenNavigator)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase getParent() {
		if (parent != null && parent.eIsProxy()) {
			InternalEObject oldParent = (InternalEObject)parent;
			parent = (GenCommonBase)eResolveProxy(oldParent);
			if (parent != oldParent) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__PARENT, oldParent, parent));
			}
		}
		return parent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase basicGetParent() {
		return parent;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setParent(GenCommonBase newParent) {
		GenCommonBase oldParent = parent;
		parent = newParent;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__PARENT, oldParent, parent));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase getChild() {
		if (child != null && child.eIsProxy()) {
			InternalEObject oldChild = (InternalEObject)child;
			child = (GenCommonBase)eResolveProxy(oldChild);
			if (child != oldChild) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__CHILD, oldChild, child));
			}
		}
		return child;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase basicGetChild() {
		return child;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setChild(GenCommonBase newChild) {
		GenCommonBase oldChild = child;
		child = newChild;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__CHILD, oldChild, child));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigatorReferenceType getReferenceType() {
		return referenceType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setReferenceType(GenNavigatorReferenceType newReferenceType) {
		GenNavigatorReferenceType oldReferenceType = referenceType;
		referenceType = newReferenceType == null ? REFERENCE_TYPE_EDEFAULT : newReferenceType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__REFERENCE_TYPE, oldReferenceType, referenceType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getGroupName() {
		return groupName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGroupNameGen(String newGroupName) {
		String oldGroupName = groupName;
		groupName = newGroupName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_NAME, oldGroupName, groupName));
	}

	public void setGroupName(String newGroupName) {
		if (newGroupName != null) {
			newGroupName = newGroupName.trim();
		}
		setGroupNameGen(newGroupName);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getGroupIcon() {
		return groupIcon;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGroupIconGen(String newGroupIcon) {
		String oldGroupIcon = groupIcon;
		groupIcon = newGroupIcon;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_ICON, oldGroupIcon, groupIcon));
	}

	public void setGroupIcon(String newGroupIcon) {
		if (newGroupIcon != null) {
			newGroupIcon = newGroupIcon.trim();
		}
		setGroupIconGen(newGroupIcon);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isHideIfEmpty() {
		return hideIfEmpty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setHideIfEmpty(boolean newHideIfEmpty) {
		boolean oldHideIfEmpty = hideIfEmpty;
		hideIfEmpty = newHideIfEmpty;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__HIDE_IF_EMPTY, oldHideIfEmpty, hideIfEmpty));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean isInsideGroup() {
		return getGroupName() != null && getGroupName().length() > 0;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenNavigatorPath> findConnectionPaths() {
		Collection<GenNavigatorPath> result = new ArrayList<GenNavigatorPath>();
		for (List<GenCommonBase> nextPath : GenModelGraphAnalyzer.getConnectionPaths(this)) {
			GenNavigatorPath navigatorPath = GMFGenFactory.eINSTANCE.createGenNavigatorPath();
			for (int i = 0; i < nextPath.size() - 1; ) {
				GenNavigatorPathSegment nextSegment = GMFGenFactory.eINSTANCE.createGenNavigatorPathSegment();
				nextSegment.setFrom(nextPath.get(i));
				nextSegment.setTo(nextPath.get(++i));
				navigatorPath.getSegments().add(nextSegment);
			}
			result.add(navigatorPath);
		}
		return new UnmodifiableEList<GenNavigatorPath>(result.size(), result.toArray());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				return eBasicSetContainer(null, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES, GenNavigator.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				return getNavigator();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__PARENT:
				if (resolve) return getParent();
				return basicGetParent();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__CHILD:
				if (resolve) return getChild();
				return basicGetChild();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__REFERENCE_TYPE:
				return getReferenceType();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_NAME:
				return getGroupName();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_ICON:
				return getGroupIcon();
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__HIDE_IF_EMPTY:
				return isHideIfEmpty() ? Boolean.TRUE : Boolean.FALSE;
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__PARENT:
				setParent((GenCommonBase)newValue);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__CHILD:
				setChild((GenCommonBase)newValue);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__REFERENCE_TYPE:
				setReferenceType((GenNavigatorReferenceType)newValue);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_NAME:
				setGroupName((String)newValue);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_ICON:
				setGroupIcon((String)newValue);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__HIDE_IF_EMPTY:
				setHideIfEmpty(((Boolean)newValue).booleanValue());
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__PARENT:
				setParent((GenCommonBase)null);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__CHILD:
				setChild((GenCommonBase)null);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__REFERENCE_TYPE:
				setReferenceType(REFERENCE_TYPE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_NAME:
				setGroupName(GROUP_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_ICON:
				setGroupIcon(GROUP_ICON_EDEFAULT);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__HIDE_IF_EMPTY:
				setHideIfEmpty(HIDE_IF_EMPTY_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				return getNavigator() != null;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__PARENT:
				return parent != null;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__CHILD:
				return child != null;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__REFERENCE_TYPE:
				return referenceType != REFERENCE_TYPE_EDEFAULT;
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_NAME:
				return GROUP_NAME_EDEFAULT == null ? groupName != null : !GROUP_NAME_EDEFAULT.equals(groupName);
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__GROUP_ICON:
				return GROUP_ICON_EDEFAULT == null ? groupIcon != null : !GROUP_ICON_EDEFAULT.equals(groupIcon);
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__HIDE_IF_EMPTY:
				return hideIfEmpty != HIDE_IF_EMPTY_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (referenceType: ");
		result.append(referenceType);
		result.append(", groupName: ");
		result.append(groupName);
		result.append(", groupIcon: ");
		result.append(groupIcon);
		result.append(", hideIfEmpty: ");
		result.append(hideIfEmpty);
		result.append(')');
		return result.toString();
	}

} //GenNavigatorChildReferenceImpl@


1.10
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a13 1

a14 1

a16 1

a18 1

a20 2

import org.eclipse.emf.ecore.util.EcoreUtil;
a184 31
	public NotificationChain basicSetNavigator(GenNavigator newNavigator, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newNavigator, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNavigator(GenNavigator newNavigator) {
		if (newNavigator != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR && newNavigator != null)) {
			if (EcoreUtil.isAncestor(this, newNavigator))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newNavigator != null)
				msgs = ((InternalEObject)newNavigator).eInverseAdd(this, GMFGenPackage.GEN_NAVIGATOR__CHILD_REFERENCES, GenNavigator.class, msgs);
			msgs = basicSetNavigator(newNavigator, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR, newNavigator, newNavigator));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d394 1
a394 1
				return basicSetNavigator((GenNavigator)otherEnd, msgs);
d408 1
a408 1
				return basicSetNavigator(null, msgs);
a462 3
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				setNavigator((GenNavigator)newValue);
				return;
a492 3
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR:
				setNavigator((GenNavigator)null);
				return;
@


1.9
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d26 1
d191 31
d431 1
a431 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR, msgs);
d445 1
a445 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__NAVIGATOR, msgs);
d500 3
d533 3
@


1.8
log
@Moving non-open API classes from org.eclipse.gmf.codegen.util to org.eclipse.gmf.internal.codegen.util package.
@
text
@d64 1
a64 1
	protected GenCommonBase parent = null;
d74 1
a74 1
	protected GenCommonBase child = null;
@


1.7
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d34 1
a34 1
import org.eclipse.gmf.codegen.util.GenModelGraphAnalyzer;
@


1.6
log
@NavigatorContentProvider template reimplemented on xpand
@
text
@d170 1
d373 1
a373 1
	public EList findConnectionPaths() {
d385 1
a385 1
		return new UnmodifiableEList(result.size(), result.toArray());
d393 1
d409 1
d423 1
d437 1
d465 1
d495 1
d525 1
d551 1
@


1.5
log
@NAvigator Labels are generated based on genmodel information.
@
text
@d9 4
d15 5
d26 1
d29 1
d31 2
d34 1
d43 1
d179 10
d370 61
d435 2
d520 2
@


1.4
log
@Generating group icons only once.
@
text
@a18 1
import org.eclipse.gmf.codegen.gmfgen.GenLabel;
a30 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorChildReferenceImpl#getLabel <em>Label</em>}</li>
a61 10
	 * The cached value of the '{@@link #getLabel() <em>Label</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLabel()
	 * @@generated
	 * @@ordered
	 */
	protected GenLabel label = null;

	/**
a239 38
	public GenLabel getLabel() {
		if (label != null && label.eIsProxy()) {
			InternalEObject oldLabel = (InternalEObject)label;
			label = (GenLabel)eResolveProxy(oldLabel);
			if (label != oldLabel) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__LABEL, oldLabel, label));
			}
		}
		return label;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLabel basicGetLabel() {
		return label;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLabel(GenLabel newLabel) {
		GenLabel oldLabel = label;
		label = newLabel;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__LABEL, oldLabel, label));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d276 1
a276 1
	
d304 1
a304 1
	
a354 3
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__LABEL:
				if (resolve) return getLabel();
				return basicGetLabel();
a379 3
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__LABEL:
				setLabel((GenLabel)newValue);
				return;
a408 3
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__LABEL:
				setLabel((GenLabel)null);
				return;
a435 2
			case GMFGenPackage.GEN_NAVIGATOR_CHILD_REFERENCE__LABEL:
				return label != null;
@


1.3
log
@Icons provided to Navigator
@
text
@d320 1
a320 1
	public void setGroupName(String newGroupName) {
d326 7
d348 1
a348 1
	public void setGroupIcon(String newGroupIcon) {
d354 7
d389 1
a389 1
		return getGroupName() != null && groupName.trim().length() > 0;
@


1.2
log
@- hideIfEmpty property added to the GenNavigatorChildReference
- recursive iteration through connections graph added
@
text
@d375 1
a375 1
		return getGroupName() != null;
@


1.1
log
@Model navigator, initial version.
@
text
@d36 1
d134 20
d351 21
d400 2
d431 3
d463 3
d489 2
d510 2
@

