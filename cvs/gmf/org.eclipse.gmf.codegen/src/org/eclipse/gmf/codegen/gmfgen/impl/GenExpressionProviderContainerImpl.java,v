head	1.9;
access;
symbols
	v20081022-1925:1.9
	v20081015-1925:1.9
	v20081008-1925:1.9
	v20081001-1925:1.9
	v20080930-1130:1.9
	v20080926-1245:1.9
	v20080924-1925:1.9
	v20080917-1925:1.9
	v20080911-1728:1.9
	v20080910-1520:1.9
	v20080903-1520:1.9
	v20080827-1520:1.9
	v20080813-1520:1.9
	v20080806-1520:1.9
	v20080722-1827:1.9
	v20080718-1731:1.9
	v20080716-1600:1.9
	v20080716-1642:1.9
	R2_1_maintenance:1.9.0.2
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080528-1052:1.9
	v20080521:1.9
	v20080516-1543:1.9
	v20080516-1143:1.9
	v20080512-1200:1.9
	v20080508-2000:1.9
	v20080507-1326:1.9
	v20080503-1740:1.7
	v20080501-1739:1.7
	v20080425-1959:1.7
	v20080417-1610:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070928-0000:1.6
	v20070921-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.4
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3
	v20070103-0300:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.3
	v20061020-1000:1.3
	v20061013-1330:1.4
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.4
	v20060904-1500:1.4
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060728-0500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;


1.9
date	2008.05.07.13.56.01;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	39124821b4de4567;

1.8
date	2008.05.05.21.06.41;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	4186481f76b14567;

1.7
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	2e1d4808b3814567;

1.6
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	725b461c97d64567;

1.5
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	444245f8090b4567;

1.4
date	2006.07.20.17.40.06;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.30.15.28.05;	author radvorak;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.30.14.04.16;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[228913] updated ValueExpression use in GMFGen to better accomodate codegen needs (items 1,2,3)
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id: GenExpressionProviderContainerImpl.java,v 1.8 2008/05/05 21:06:41 atikhomirov Exp $
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Expression Provider Container</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionProviderContainerImpl#getExpressionsPackageName <em>Expressions Package Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionProviderContainerImpl#getAbstractExpressionClassName <em>Abstract Expression Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionProviderContainerImpl#getProviders <em>Providers</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionProviderContainerImpl#getEditorGen <em>Editor Gen</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenExpressionProviderContainerImpl extends EObjectImpl implements GenExpressionProviderContainer {
	/**
	 * The default value of the '{@@link #getExpressionsPackageName() <em>Expressions Package Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getExpressionsPackageName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EXPRESSIONS_PACKAGE_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getExpressionsPackageName() <em>Expressions Package Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getExpressionsPackageName()
	 * @@generated
	 * @@ordered
	 */
	protected String expressionsPackageName = EXPRESSIONS_PACKAGE_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getAbstractExpressionClassName() <em>Abstract Expression Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAbstractExpressionClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getAbstractExpressionClassName() <em>Abstract Expression Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAbstractExpressionClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String abstractExpressionClassName = ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getProviders() <em>Providers</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getProviders()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenExpressionProviderBase> providers;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenExpressionProviderContainerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenExpressionProviderContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getExpressionsPackageNameGen() {
		return expressionsPackageName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getExpressionsPackageName() {
		String value = getExpressionsPackageNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			value = getEditorGen().getPackageNamePrefix() + ".expressions"; //$NON-NLS-1$
		}
		return value;
	}	

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setExpressionsPackageName(String newExpressionsPackageName) {
		String oldExpressionsPackageName = expressionsPackageName;
		expressionsPackageName = newExpressionsPackageName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME, oldExpressionsPackageName, expressionsPackageName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getAbstractExpressionClassNameGen() {
		return abstractExpressionClassName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getAbstractExpressionClassName() {
		String value = getAbstractExpressionClassNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			String prefix = ((GenEditorGeneratorImpl) getEditorGen()).getDomainModelCapName();
			value = prefix + "AbstractExpression"; //$NON-NLS-1$
		}
		return value;
	}
	

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAbstractExpressionClassName(String newAbstractExpressionClassName) {
		String oldAbstractExpressionClassName = abstractExpressionClassName;
		abstractExpressionClassName = newAbstractExpressionClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME, oldAbstractExpressionClassName, abstractExpressionClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenExpressionProviderBase> getProviders() {
		if (providers == null) {
			providers = new EObjectContainmentWithInverseEList<GenExpressionProviderBase>(GenExpressionProviderBase.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER);
		}
		return providers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenEditorGenerator getEditorGen() {
		if (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN) return null;
		return (GenEditorGenerator)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getAbstractExpressionQualifiedClassName() {
		return getExpressionsPackageName() + "." + getAbstractExpressionClassName(); //$NON-NLS-1$
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getProviders()).basicAdd(otherEnd, msgs);
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS:
				return ((InternalEList<?>)getProviders()).basicRemove(otherEnd, msgs);
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				return eBasicSetContainer(null, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_EDITOR_GENERATOR__EXPRESSION_PROVIDERS, GenEditorGenerator.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME:
				return getExpressionsPackageName();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME:
				return getAbstractExpressionClassName();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS:
				return getProviders();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				return getEditorGen();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME:
				setExpressionsPackageName((String)newValue);
				return;
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME:
				setAbstractExpressionClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS:
				getProviders().clear();
				getProviders().addAll((Collection<? extends GenExpressionProviderBase>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME:
				setExpressionsPackageName(EXPRESSIONS_PACKAGE_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME:
				setAbstractExpressionClassName(ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS:
				getProviders().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EXPRESSIONS_PACKAGE_NAME:
				return EXPRESSIONS_PACKAGE_NAME_EDEFAULT == null ? expressionsPackageName != null : !EXPRESSIONS_PACKAGE_NAME_EDEFAULT.equals(expressionsPackageName);
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__ABSTRACT_EXPRESSION_CLASS_NAME:
				return ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT == null ? abstractExpressionClassName != null : !ABSTRACT_EXPRESSION_CLASS_NAME_EDEFAULT.equals(abstractExpressionClassName);
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS:
				return providers != null && !providers.isEmpty();
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				return getEditorGen() != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (expressionsPackageName: ");
		result.append(expressionsPackageName);
		result.append(", abstractExpressionClassName: ");
		result.append(abstractExpressionClassName);
		result.append(')');
		return result.toString();
	}

} //GenExpressionProviderContainerImpl
@


1.8
log
@[228913] cleaned isCopy and java provider's getOperationName that are not in use any more; introduced fine-tuning options: use expressions body for java methods and whether to throw exception or fail silently (using reasonable/appropriate for the context default value), latter change obsoleted NoImplException and respective debug options
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderContainerImpl.java,v 1.7 2008/04/18 14:43:22 atikhomirov Exp $
a23 1
import org.eclipse.gmf.codegen.gmfgen.ValueExpression;
a207 23
	public GenExpressionProviderBase getProvider(ValueExpression expression) {
		for (GenExpressionProviderBase nextProvider : getProviders()) {
			if(nextProvider.getExpressions().contains(expression)) {
				return nextProvider;
			}
		}
		// Note: lookup by expression language is performed in order to handle multiple
		// copies of expression coming from single node mapping reuse as only a single instance 
		// of ValueExpression is included in the 'expressions' feature.
		for (GenExpressionProviderBase nextProvider : getProviders()) {
			if(expression != null && expression.getLanguage() != null && 
				expression.getLanguage().equals(nextProvider.getLanguage())) {
				return nextProvider;
			}
		}		
		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
@


1.7
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderContainerImpl.java,v 1.6 2007/04/11 08:10:23 dstadnik Exp $
a207 13
	 */	
	public boolean isCopy(ValueExpression expression) {
		GenExpressionProviderBase provider = getProvider(expression);
		if(provider != null) {
			return !provider.getExpressions().contains(expression); 
		}
		return false;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
@


1.6
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderContainerImpl.java,v 1.5 2007/03/14 14:39:35 atikhomirov Exp $
a18 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a206 31
	 * @@generated
	 */
	public NotificationChain basicSetEditorGen(GenEditorGenerator newEditorGen, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newEditorGen, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditorGen(GenEditorGenerator newEditorGen) {
		if (newEditorGen != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN && newEditorGen != null)) {
			if (EcoreUtil.isAncestor(this, newEditorGen))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newEditorGen != null)
				msgs = ((InternalEObject)newEditorGen).eInverseAdd(this, GMFGenPackage.GEN_EDITOR_GENERATOR__EXPRESSION_PROVIDERS, GenEditorGenerator.class, msgs);
			msgs = basicSetEditorGen(newEditorGen, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN, newEditorGen, newEditorGen));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d263 1
a263 1
				return basicSetEditorGen((GenEditorGenerator)otherEnd, msgs);
d279 1
a279 1
				return basicSetEditorGen(null, msgs);
a336 3
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)newValue);
				return;
a357 3
			case GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)null);
				return;
@


1.5
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d5 1
a5 1
 * $Id$
d92 1
a92 1
	protected EList<GenExpressionProviderBase> providers = null;
@


1.4
log
@GenModel unit-tests added.
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderContainerImpl.java,v 1.3 2006/05/30 15:28:05 radvorak Exp $
a9 1
import java.util.Iterator;
d92 1
a92 1
	protected EList providers = null;
d108 1
d188 1
a188 1
	public EList getProviders() {
d190 1
a190 1
			providers = new EObjectContainmentWithInverseEList(GenExpressionProviderBase.class, this, GMFGenPackage.GEN_EXPRESSION_PROVIDER_CONTAINER__PROVIDERS, GMFGenPackage.GEN_EXPRESSION_PROVIDER_BASE__CONTAINER);
d255 1
a255 2
		for (Iterator it = getProviders().iterator(); it.hasNext();) {
			GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next();
d263 1
a263 2
		for (Iterator it = getProviders().iterator(); it.hasNext();) {
			GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next();
d286 2
d291 1
a291 1
				return ((InternalEList)getProviders()).basicAdd(otherEnd, msgs);
d305 1
d309 1
a309 1
				return ((InternalEList)getProviders()).basicRemove(otherEnd, msgs);
d321 1
d335 1
d355 2
d367 1
a367 1
				getProviders().addAll((Collection)newValue);
d381 1
d405 1
d425 1
@


1.3
log
@#144305 VisualIDRegistry.javajet should check for java expression duplicates in case of reused NodeMapping
1) provide a cleaner detection of expression copies for use in templates
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderContainerImpl.java,v 1.2 2006/05/30 14:04:16 radvorak Exp $
d129 1
a129 1
		if(value == null || value.length() == 0) {
d163 1
a163 1
		if(value == null || value.length() == 0) {
@


1.2
log
@#144305 VisualIDRegistry.javajet should check for java expression duplicates in case of reused NodeMapping
@
text
@d5 1
a5 1
 * $Id: GenExpressionProviderContainerImpl.java,v 1.1 2006/04/13 15:41:17 radvorak Exp $
d240 13
@


1.1
log
@[#134511] common access to expressions of different languages
@
text
@d5 1
a5 1
 * $Id$
d248 10
@

