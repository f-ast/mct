head	1.7;
access;
symbols
	v20081022-1925:1.7
	v20081015-1925:1.7
	v20081008-1925:1.7
	v20081001-1925:1.7
	v20080930-1130:1.7
	v20080926-1245:1.7
	v20080924-1925:1.7
	v20080917-1925:1.7
	v20080911-1728:1.7
	v20080910-1520:1.7
	v20080903-1520:1.7
	v20080827-1520:1.7
	v20080813-1520:1.7
	v20080806-1520:1.7
	v20080722-1827:1.7
	v20080718-1731:1.7
	v20080716-1600:1.7
	v20080716-1642:1.7
	R2_1_maintenance:1.7.0.2
	Root_R2_1_maintenance:1.7
	R2_1_0:1.7
	v20080610-1132:1.7
	v20080603-1553:1.7
	v20080528-1052:1.7
	v20080521:1.7
	v20080516-1543:1.7
	v20080516-1143:1.7
	v20080512-1200:1.7
	v20080508-2000:1.7
	v20080507-1326:1.7
	v20080503-1740:1.7
	v20080501-1739:1.7
	v20080425-1959:1.7
	v20080417-1610:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070928-0000:1.6
	v20070921-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.5
	v20070518-1300:1.5
	v20070504-1000:1.5
	v20070427-0600:1.5
	v20070420-1000:1.5
	v20070413-1300:1.5
	v20070405-1100:1.4
	v20070403-1500:1.4
	v20070330-1300:1.4
	v20060330-1300:1.4
	v20070322-1100:1.4
	v20060316-0600:1.4
	v20070307-0700:1.3
	v20070301-1200:1.3
	v20070228-2000:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.2
	v20070103-0300:1.3
	M4_20:1.3
	v20061222-1800:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	v20061120-1300:1.3
	M3_20:1.3
	v20061117-0800:1.3
	v20061027-1200:1.2
	v20061020-1000:1.2
	v20061013-1330:1.3
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.3
	v20060904-1500:1.3
	v20060824-1600:1.2
	v20060817-1500:1.2
	v20060728-0500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.1
	v20060530-1930:1.1
	v20060526-1200:1.1
	v20060519-1300:1.1
	v20060519-0800:1.1
	v20060512-1000:1.1
	I20060512-1000:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	2e1d4808b3814567;

1.6
date	2007.05.22.17.27.35;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	694b465327fe4567;

1.5
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	725b461c97d64567;

1.4
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	444245f8090b4567;

1.3
date	2006.07.20.17.40.06;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.06.06.16.22.23;	author radvorak;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	;


desc
@@


1.7
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id: GenExpressionInterpreterImpl.java,v 1.6 2007/05/22 17:27:35 atikhomirov Exp $
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
import org.eclipse.gmf.codegen.gmfgen.GenLanguage;
import org.eclipse.gmf.codegen.gmfgen.ValueExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Expression Interpreter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionInterpreterImpl#getLanguage <em>Language</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionInterpreterImpl#getClassName <em>Class Name</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenExpressionInterpreterImpl extends GenExpressionProviderBaseImpl implements GenExpressionInterpreter {
	/**
	 * The default value of the '{@@link #getLanguage() <em>Language</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLanguage()
	 * @@generated
	 * @@ordered
	 */
	protected static final GenLanguage LANGUAGE_EDEFAULT = GenLanguage.OCL_LITERAL;

	/**
	 * The cached value of the '{@@link #getLanguage() <em>Language</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLanguage()
	 * @@generated
	 * @@ordered
	 */
	protected GenLanguage language = LANGUAGE_EDEFAULT;

	/**
	 * The default value of the '{@@link #getClassName() <em>Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getClassName() <em>Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String className = CLASS_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenExpressionInterpreterImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenExpressionInterpreter();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getClassNameGen() {
		return className;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getClassName() {
		String value = getClassNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			String prefix = ((GenEditorGeneratorImpl) getContainer().getEditorGen()).getDomainModelCapName();
			value = prefix + CodeGenUtil.validJavaIdentifier(getLanguage().getName().toUpperCase()) + "Factory"; //$NON-NLS-1$
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setClassName(String newClassName) {
		String oldClassName = className;
		className = newClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME, oldClassName, className));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLanguage getLanguage() {
		return language;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLanguage(GenLanguage newLanguage) {
		GenLanguage oldLanguage = language;
		language = newLanguage == null ? LANGUAGE_EDEFAULT : newLanguage;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE, oldLanguage, language));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getQualifiedClassName() {
		return getContainer().getExpressionsPackageName() + "." + getClassName(); //$NON-NLS-1$
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getExpressionAccessor(ValueExpression expression) {
		return "getExpression"; //$NON-NLS-1$
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE:
				return getLanguage();
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME:
				return getClassName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE:
				setLanguage((GenLanguage)newValue);
				return;
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME:
				setClassName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE:
				setLanguage(LANGUAGE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME:
				setClassName(CLASS_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__LANGUAGE:
				return language != LANGUAGE_EDEFAULT;
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__CLASS_NAME:
				return CLASS_NAME_EDEFAULT == null ? className != null : !CLASS_NAME_EDEFAULT.equals(className);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (language: ");
		result.append(language);
		result.append(", className: ");
		result.append(className);
		result.append(')');
		return result.toString();
	}

} //GenExpressionInterpreterImpl
@


1.6
log
@[123240] clean gmfgen uses of required plugins
@
text
@d5 1
a5 1
 * $Id$
d187 1
a187 2
	@@SuppressWarnings("unchecked")
		@@Override
@


1.5
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d5 1
a5 1
 * $Id: GenExpressionInterpreterImpl.java,v 1.4 2007/03/14 14:39:34 atikhomirov Exp $
a8 2
import java.util.Collection;

a10 1
import org.eclipse.emf.common.util.EList;
a12 1
import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
a26 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenExpressionInterpreterImpl#getRequiredPluginIDs <em>Required Plugin IDs</em>}</li>
a73 10
	 * The cached value of the '{@@link #getRequiredPluginIDs() <em>Required Plugin IDs</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRequiredPluginIDs()
	 * @@generated
	 * @@ordered
	 */
	protected EList<String> requiredPluginIDs;

	/**
a131 12
	public EList<String> getRequiredPluginIDs() {
		if (requiredPluginIDs == null) {
			requiredPluginIDs = new EDataTypeUniqueEList<String>(String.class, this, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS);
		}
		return requiredPluginIDs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a177 2
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS:
				return getRequiredPluginIDs();
a196 4
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS:
				getRequiredPluginIDs().clear();
				getRequiredPluginIDs().addAll((Collection<? extends String>)newValue);
				return;
a214 3
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS:
				getRequiredPluginIDs().clear();
				return;
a230 2
			case GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS:
				return requiredPluginIDs != null && !requiredPluginIDs.isEmpty();
a248 2
		result.append(", requiredPluginIDs: ");
		result.append(requiredPluginIDs);
@


1.4
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d5 1
a5 1
 * $Id$
d86 1
a86 1
	protected EList<String> requiredPluginIDs = null;
@


1.3
log
@GenModel unit-tests added.
@
text
@d5 1
a5 1
 * $Id: GenExpressionInterpreterImpl.java,v 1.2 2006/06/06 16:22:23 radvorak Exp $
d86 1
a86 1
	protected EList requiredPluginIDs = null;
d102 1
d147 1
a147 1
	public EList getRequiredPluginIDs() {
d149 1
a149 1
			requiredPluginIDs = new EDataTypeUniqueEList(String.class, this, GMFGenPackage.GEN_EXPRESSION_INTERPRETER__REQUIRED_PLUGIN_IDS);
d198 1
d216 2
d228 1
a228 1
				getRequiredPluginIDs().addAll((Collection)newValue);
d239 1
d260 1
d278 1
@


1.2
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d5 1
a5 1
 * $Id: GenExpressionInterpreterImpl.java,v 1.1 2006/04/13 15:41:17 radvorak Exp $
d122 1
a122 1
		if(value == null || value.length() == 0) {
@


1.1
log
@[#134511] common access to expressions of different languages
@
text
@d5 1
a5 1
 * $Id$
d19 1
d46 1
a46 1
	protected static final String LANGUAGE_EDEFAULT = null;
d56 1
a56 1
	protected String language = LANGUAGE_EDEFAULT;
d124 1
a124 1
			value = prefix + CodeGenUtil.validJavaIdentifier(getLanguage().toUpperCase()) + "Factory"; //$NON-NLS-1$
d158 1
a158 1
	public String getLanguageGen() {
a164 13
	 * @@generated NOT
	 */
	public String getLanguage() {
		String value = getLanguageGen();
		if(value == null || value.length() == 0) {
			value = "ocl"; //$NON-NLS-1$
		}
		return value;
	}	

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d167 3
a169 3
	public void setLanguage(String newLanguage) {
		String oldLanguage = language;
		language = newLanguage;
d217 1
a217 1
				setLanguage((String)newValue);
d258 1
a258 1
				return LANGUAGE_EDEFAULT == null ? language != null : !LANGUAGE_EDEFAULT.equals(language);
@

