head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080930-1130:1.6
	v20080926-1245:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20080722-1827:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.2
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080516-1543:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080508-2000:1.6
	v20080507-1326:1.6
	v20080503-1740:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080417-1610:1.5
	v20080411-0411:1.5
	v20080404-1111:1.5
	v20080322-0000:1.5
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.4
	v20071222-1111:1.4
	v20071214-1111:1.4
	v20071130-1111:1.4
	v20071124-0000:1.4
	v20071112-0000:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070928-0000:1.4
	v20070921-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070614-1400:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070525-1500:1.4
	v20070520-1200:1.4
	v20070518-1300:1.4
	v20070504-1000:1.4
	v20070427-0600:1.4
	v20070420-1000:1.4
	v20070413-1300:1.4
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	2e1d4808b3814567;

1.5
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	5e5047cd7dd64567;

1.4
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	725b461c97d64567;

1.3
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	444245f8090b4567;

1.2
date	2006.09.22.13.21.24;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.15.20.44.31;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCustomPropertyTab;
import org.eclipse.gmf.codegen.gmfgen.GenNavigator;
import org.eclipse.gmf.codegen.gmfgen.GeneratedType;
import org.eclipse.gmf.codegen.gmfgen.TypeTabFilter;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Type Tab Filter</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.TypeTabFilterImpl#getTab <em>Tab</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.TypeTabFilterImpl#getTypes <em>Types</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.TypeTabFilterImpl#getGeneratedTypes <em>Generated Types</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class TypeTabFilterImpl extends EObjectImpl implements TypeTabFilter {
	/**
	 * The cached value of the '{@@link #getTypes() <em>Types</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTypes()
	 * @@generated
	 * @@ordered
	 */
	protected EList<String> types;

	/**
	 * The cached value of the '{@@link #getGeneratedTypes() <em>Generated Types</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGeneratedTypes()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GeneratedType> generatedTypes;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected TypeTabFilterImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getTypeTabFilter();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCustomPropertyTab getTab() {
		if (eContainerFeatureID != GMFGenPackage.TYPE_TAB_FILTER__TAB) return null;
		return (GenCustomPropertyTab)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<String> getTypes() {
		if (types == null) {
			types = new EDataTypeUniqueEList<String>(String.class, this, GMFGenPackage.TYPE_TAB_FILTER__TYPES);
		}
		return types;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GeneratedType> getGeneratedTypes() {
		if (generatedTypes == null) {
			generatedTypes = new EDataTypeUniqueEList<GeneratedType>(GeneratedType.class, this, GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES);
		}
		return generatedTypes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<String> getAllTypes() {
		ArrayList<String> result = new ArrayList<String>();
		result.addAll(getTypes());
		if (getGeneratedTypes().size() > 0) {
			for (GeneratedType nextGeneratedType : getGeneratedTypes()) {
				if (nextGeneratedType == GeneratedType.ABSTRACT_NAVIGATOR_ITEM_LITERAL) {
					GenNavigator navigator = getTab().getSheet().getEditorGen().getNavigator();
					if (navigator != null) {
						result.add(navigator.getAbstractNavigatorItemQualifiedClassName());	
					}
				}
			}
		}
		return new BasicEList.UnmodifiableEList<String>(result.size(), result.toArray());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.TYPE_TAB_FILTER__TAB, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				return eBasicSetContainer(null, GMFGenPackage.TYPE_TAB_FILTER__TAB, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, GenCustomPropertyTab.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				return getTab();
			case GMFGenPackage.TYPE_TAB_FILTER__TYPES:
				return getTypes();
			case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES:
				return getGeneratedTypes();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TYPES:
				getTypes().clear();
				getTypes().addAll((Collection<? extends String>)newValue);
				return;
			case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES:
				getGeneratedTypes().clear();
				getGeneratedTypes().addAll((Collection<? extends GeneratedType>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TYPES:
				getTypes().clear();
				return;
			case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES:
				getGeneratedTypes().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				return getTab() != null;
			case GMFGenPackage.TYPE_TAB_FILTER__TYPES:
				return types != null && !types.isEmpty();
			case GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES:
				return generatedTypes != null && !generatedTypes.isEmpty();
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (types: ");
		result.append(types);
		result.append(", generatedTypes: ");
		result.append(generatedTypes);
		result.append(')');
		return result.toString();
	}

} //TypeTabFilterImpl@


1.5
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a11 1
import org.eclipse.emf.common.notify.Notification;
a12 1

a14 1

a15 1

a16 2

import org.eclipse.emf.ecore.impl.ENotificationImpl;
a17 1

a18 2

import org.eclipse.emf.ecore.util.EcoreUtil;
a94 31
	public NotificationChain basicSetTab(GenCustomPropertyTab newTab, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newTab, GMFGenPackage.TYPE_TAB_FILTER__TAB, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTab(GenCustomPropertyTab newTab) {
		if (newTab != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.TYPE_TAB_FILTER__TAB && newTab != null)) {
			if (EcoreUtil.isAncestor(this, newTab))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newTab != null)
				msgs = ((InternalEObject)newTab).eInverseAdd(this, GMFGenPackage.GEN_CUSTOM_PROPERTY_TAB__FILTER, GenCustomPropertyTab.class, msgs);
			msgs = basicSetTab(newTab, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TYPE_TAB_FILTER__TAB, newTab, newTab));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d146 1
a146 1
				return basicSetTab((GenCustomPropertyTab)otherEnd, msgs);
d160 1
a160 1
				return basicSetTab(null, msgs);
a205 3
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				setTab((GenCustomPropertyTab)newValue);
				return;
a225 3
			case GMFGenPackage.TYPE_TAB_FILTER__TAB:
				setTab((GenCustomPropertyTab)null);
				return;
@


1.4
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d12 1
d22 1
d27 1
d104 31
d186 1
a186 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.TYPE_TAB_FILTER__TAB, msgs);
d200 1
a200 1
				return eBasicSetContainer(null, GMFGenPackage.TYPE_TAB_FILTER__TAB, msgs);
d246 3
d269 3
@


1.3
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d55 1
a55 1
	protected EList<String> types = null;
d65 1
a65 1
	protected EList<GeneratedType> generatedTypes = null;
@


1.2
log
@Read-only properties provided into the navigator.
@
text
@a10 1
import java.util.Iterator;
d55 1
a55 1
	protected EList types = null;
d65 1
a65 1
	protected EList generatedTypes = null;
d81 1
d101 1
a101 1
	public EList getTypes() {
d103 1
a103 1
			types = new EDataTypeUniqueEList(String.class, this, GMFGenPackage.TYPE_TAB_FILTER__TYPES);
d113 1
a113 1
	public EList getGeneratedTypes() {
d115 1
a115 1
			generatedTypes = new EDataTypeUniqueEList(GeneratedType.class, this, GMFGenPackage.TYPE_TAB_FILTER__GENERATED_TYPES);
d125 2
a126 2
	public EList getAllTypes() {
		Collection result = new ArrayList();
d129 1
a129 2
			for (Iterator it = getGeneratedTypes().iterator(); it.hasNext();) {
				GeneratedType nextGeneratedType = (GeneratedType) it.next();
d138 1
a138 1
		return new BasicEList.UnmodifiableEList(result.size(), result.toArray());
d146 1
d162 1
d176 1
d190 1
d208 2
d214 1
a214 1
				getTypes().addAll((Collection)newValue);
d218 1
a218 1
				getGeneratedTypes().addAll((Collection)newValue);
d229 1
d247 1
d265 1
@


1.1
log
@Generate PropertySheet pluged into tabbed page framework of Eclipse instead of plug-in as runtime provider.
Eases pages being added/removed/replaced/tuned
@
text
@d9 1
d11 1
d15 1
d28 2
d41 1
d59 10
d113 34
d194 2
d211 4
d229 3
d247 2
d264 2
@

