head	1.4;
access;
symbols
	v20081022-1925:1.4
	v20081015-1925:1.4
	v20081008-1925:1.4
	v20081001-1925:1.4
	v20080930-1130:1.4
	v20080926-1245:1.4
	v20080924-1925:1.4
	v20080917-1925:1.4
	v20080911-1728:1.4
	v20080910-1520:1.4
	v20080903-1520:1.4
	v20080827-1520:1.4
	v20080813-1520:1.4
	v20080806-1520:1.4
	v20080722-1827:1.4
	v20080718-1731:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080528-1052:1.4
	v20080521:1.4
	v20080516-1543:1.4
	v20080516-1143:1.4
	v20080512-1200:1.4
	v20080508-2000:1.4
	v20080507-1326:1.4
	v20080503-1740:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080417-1610:1.3
	v20080411-0411:1.3
	v20080404-1111:1.3
	v20080322-0000:1.3
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.1
	v20070518-1300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2008.04.18.14.43.23;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	2e1d4808b3814567;

1.3
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	5e5047cd7dd64567;

1.2
date	2007.05.22.18.18.54;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	5a1d465333ad4567;

1.1
date	2007.05.11.16.01.30;	author ashatalin;	state Exp;
branches;
next	;
commitid	44f84644934f4567;


desc
@@


1.4
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenDiagramUpdater;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Diagram Updater</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenDiagramUpdaterImpl#getEditorGen <em>Editor Gen</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenDiagramUpdaterImpl#getDiagramUpdaterClassName <em>Diagram Updater Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenDiagramUpdaterImpl#getNodeDescriptorClassName <em>Node Descriptor Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenDiagramUpdaterImpl#getLinkDescriptorClassName <em>Link Descriptor Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenDiagramUpdaterImpl#getUpdateCommandClassName <em>Update Command Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenDiagramUpdaterImpl#getUpdateCommandID <em>Update Command ID</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenDiagramUpdaterImpl extends EObjectImpl implements GenDiagramUpdater {
	/**
	 * The default value of the '{@@link #getDiagramUpdaterClassName() <em>Diagram Updater Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDiagramUpdaterClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDiagramUpdaterClassName() <em>Diagram Updater Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDiagramUpdaterClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String diagramUpdaterClassName = DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getNodeDescriptorClassName() <em>Node Descriptor Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeDescriptorClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getNodeDescriptorClassName() <em>Node Descriptor Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeDescriptorClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String nodeDescriptorClassName = NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getLinkDescriptorClassName() <em>Link Descriptor Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLinkDescriptorClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getLinkDescriptorClassName() <em>Link Descriptor Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLinkDescriptorClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String linkDescriptorClassName = LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getUpdateCommandClassName() <em>Update Command Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUpdateCommandClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String UPDATE_COMMAND_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getUpdateCommandClassName() <em>Update Command Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUpdateCommandClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String updateCommandClassName = UPDATE_COMMAND_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getUpdateCommandID() <em>Update Command ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUpdateCommandID()
	 * @@generated
	 * @@ordered
	 */
	protected static final String UPDATE_COMMAND_ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getUpdateCommandID() <em>Update Command ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUpdateCommandID()
	 * @@generated
	 * @@ordered
	 */
	protected String updateCommandID = UPDATE_COMMAND_ID_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenDiagramUpdaterImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenDiagramUpdater();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenEditorGenerator getEditorGen() {
		if (eContainerFeatureID != GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN) return null;
		return (GenEditorGenerator)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getDiagramUpdaterClassNameGen() {
		return diagramUpdaterClassName;
	}
	
	public String getDiagramUpdaterClassName() {
		String value = getDiagramUpdaterClassNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			value = getDomainPackageCapName() + "DiagramUpdater"; //$NON-NLS-1$						
		}
		return value;		
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagramUpdaterClassName(String newDiagramUpdaterClassName) {
		String oldDiagramUpdaterClassName = diagramUpdaterClassName;
		diagramUpdaterClassName = newDiagramUpdaterClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME, oldDiagramUpdaterClassName, diagramUpdaterClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getNodeDescriptorClassNameGen() {
		return nodeDescriptorClassName;
	}
	
	public String getNodeDescriptorClassName() {
		String value = getNodeDescriptorClassNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			value = getDomainPackageCapName() + "NodeDescriptor"; //$NON-NLS-1$						
		}
		return value;		
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNodeDescriptorClassName(String newNodeDescriptorClassName) {
		String oldNodeDescriptorClassName = nodeDescriptorClassName;
		nodeDescriptorClassName = newNodeDescriptorClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME, oldNodeDescriptorClassName, nodeDescriptorClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getLinkDescriptorClassNameGen() {
		return linkDescriptorClassName;
	}
	
	public String getLinkDescriptorClassName() {
		String value = getLinkDescriptorClassNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			value = getDomainPackageCapName() + "LinkDescriptor"; //$NON-NLS-1$						
		}
		return value;		
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLinkDescriptorClassName(String newLinkDescriptorClassName) {
		String oldLinkDescriptorClassName = linkDescriptorClassName;
		linkDescriptorClassName = newLinkDescriptorClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME, oldLinkDescriptorClassName, linkDescriptorClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getUpdateCommandClassNameGen() {
		return updateCommandClassName;
	}
	
	public String getUpdateCommandClassName() {
		String value = getUpdateCommandClassNameGen();
		if(GenCommonBaseImpl.isEmpty(value)) {
			value = getDomainPackageCapName() + "DiagramUpdateCommand"; //$NON-NLS-1$						
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUpdateCommandClassName(String newUpdateCommandClassName) {
		String oldUpdateCommandClassName = updateCommandClassName;
		updateCommandClassName = newUpdateCommandClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME, oldUpdateCommandClassName, updateCommandClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getUpdateCommandIDGen() {
		return updateCommandID;
	}
	
	public String getUpdateCommandID() {
		String value = getUpdateCommandIDGen();
		if (GenCommonBaseImpl.isEmpty(value)) {
			value = getEditorGen().getPackageNamePrefix() + ".updateDiagram"; //$NON-NLS-1$
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUpdateCommandID(String newUpdateCommandID) {
		String oldUpdateCommandID = updateCommandID;
		updateCommandID = newUpdateCommandID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID, oldUpdateCommandID, updateCommandID));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getDiagramUpdaterQualifiedClassName() {
		return getEditorPackageName() + '.' + getDiagramUpdaterClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getNodeDescriptorQualifiedClassName() {
		return getEditorPackageName() + '.' + getNodeDescriptorClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getLinkDescriptorQualifiedClassName() {
		return getEditorPackageName() + '.' + getLinkDescriptorClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getUpdateCommandQualifiedClassName() {
		return getEditorPackageName() + '.' + getUpdateCommandClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				return eBasicSetContainer(null, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_EDITOR_GENERATOR__DIAGRAM_UPDATER, GenEditorGenerator.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				return getEditorGen();
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME:
				return getDiagramUpdaterClassName();
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME:
				return getNodeDescriptorClassName();
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME:
				return getLinkDescriptorClassName();
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME:
				return getUpdateCommandClassName();
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID:
				return getUpdateCommandID();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME:
				setDiagramUpdaterClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME:
				setNodeDescriptorClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME:
				setLinkDescriptorClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME:
				setUpdateCommandClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID:
				setUpdateCommandID((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME:
				setDiagramUpdaterClassName(DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME:
				setNodeDescriptorClassName(NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME:
				setLinkDescriptorClassName(LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME:
				setUpdateCommandClassName(UPDATE_COMMAND_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID:
				setUpdateCommandID(UPDATE_COMMAND_ID_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				return getEditorGen() != null;
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__DIAGRAM_UPDATER_CLASS_NAME:
				return DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT == null ? diagramUpdaterClassName != null : !DIAGRAM_UPDATER_CLASS_NAME_EDEFAULT.equals(diagramUpdaterClassName);
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__NODE_DESCRIPTOR_CLASS_NAME:
				return NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT == null ? nodeDescriptorClassName != null : !NODE_DESCRIPTOR_CLASS_NAME_EDEFAULT.equals(nodeDescriptorClassName);
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__LINK_DESCRIPTOR_CLASS_NAME:
				return LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT == null ? linkDescriptorClassName != null : !LINK_DESCRIPTOR_CLASS_NAME_EDEFAULT.equals(linkDescriptorClassName);
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_CLASS_NAME:
				return UPDATE_COMMAND_CLASS_NAME_EDEFAULT == null ? updateCommandClassName != null : !UPDATE_COMMAND_CLASS_NAME_EDEFAULT.equals(updateCommandClassName);
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__UPDATE_COMMAND_ID:
				return UPDATE_COMMAND_ID_EDEFAULT == null ? updateCommandID != null : !UPDATE_COMMAND_ID_EDEFAULT.equals(updateCommandID);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (diagramUpdaterClassName: ");
		result.append(diagramUpdaterClassName);
		result.append(", nodeDescriptorClassName: ");
		result.append(nodeDescriptorClassName);
		result.append(", linkDescriptorClassName: ");
		result.append(linkDescriptorClassName);
		result.append(", updateCommandClassName: ");
		result.append(updateCommandClassName);
		result.append(", updateCommandID: ");
		result.append(updateCommandID);
		result.append(')');
		return result.toString();
	}
	
	private String getDomainPackageCapName() {
		return ((GenEditorGeneratorImpl) getEditorGen()).getDomainModelCapName();
	}
	
	private String getEditorPackageName() {
		return getEditorGen().getEditor().getPackageName();
	}

} //GenDiagramUpdaterImpl
@


1.3
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a10 1

a12 1

a14 2

import org.eclipse.emf.ecore.util.EcoreUtil;
a171 31
	public NotificationChain basicSetEditorGen(GenEditorGenerator newEditorGen, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newEditorGen, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditorGen(GenEditorGenerator newEditorGen) {
		if (newEditorGen != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN && newEditorGen != null)) {
			if (EcoreUtil.isAncestor(this, newEditorGen))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newEditorGen != null)
				msgs = ((InternalEObject)newEditorGen).eInverseAdd(this, GMFGenPackage.GEN_EDITOR_GENERATOR__DIAGRAM_UPDATER, GenEditorGenerator.class, msgs);
			msgs = basicSetEditorGen(newEditorGen, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, newEditorGen, newEditorGen));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d359 1
a359 1
				return basicSetEditorGen((GenEditorGenerator)otherEnd, msgs);
d373 1
a373 1
				return basicSetEditorGen(null, msgs);
a423 3
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)newValue);
				return;
a450 3
			case GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)null);
				return;
@


1.2
log
@F5 triggering update of selected element added
@
text
@d18 1
d176 31
d394 1
a394 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, msgs);
d408 1
a408 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_DIAGRAM_UPDATER__EDITOR_GEN, msgs);
d459 3
d489 3
@


1.1
log
@GenDiagramUpdater created in .gmfgen model
@
text
@d33 2
d102 40
d260 58
d345 9
d411 4
d436 6
d463 6
d489 4
d513 4
@

