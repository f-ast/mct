head	1.15;
access;
symbols
	v20081022-1925:1.15
	v20081015-1925:1.15
	v20081008-1925:1.15
	v20081001-1925:1.15
	v20080930-1130:1.15
	v20080926-1245:1.15
	v20080924-1925:1.15
	v20080917-1925:1.15
	v20080911-1728:1.15
	v20080910-1520:1.15
	v20080903-1520:1.15
	v20080827-1520:1.15
	v20080813-1520:1.15
	v20080806-1520:1.15
	v20080722-1827:1.15
	v20080718-1731:1.15
	v20080716-1600:1.15
	v20080716-1642:1.15
	R2_1_maintenance:1.15.0.4
	Root_R2_1_maintenance:1.15
	R2_1_0:1.15
	v20080610-1132:1.15
	v20080603-1553:1.15
	v20080528-1052:1.15
	v20080521:1.15
	v20080516-1543:1.15
	v20080516-1143:1.15
	v20080512-1200:1.15
	v20080508-2000:1.15
	v20080507-1326:1.15
	v20080503-1740:1.15
	v20080501-1739:1.15
	v20080425-1959:1.15
	v20080417-1610:1.15
	v20080411-0411:1.15
	v20080404-1111:1.15
	v20080322-0000:1.15
	v20080222-1200:1.15
	v20080215-1500:1.15
	v20080207-0207:1.15
	v20071222-1111:1.15
	v20071214-1111:1.15
	v20071130-1111:1.15
	v20071124-0000:1.15
	v20071112-0000:1.15
	v20071108-0000:1.15
	v20071003-0000:1.15
	v20070928-0000:1.15
	v20070921-0000:1.15
	v20070915-0000:1.15
	v20070903-0000:1.15
	v20070809-0000:1.15
	R2_0_maintenance:1.15.0.2
	R2_0:1.15
	R4_20:1.15
	v20070621-0000:1.15
	RC3_20:1.15
	v20070614-1400:1.15
	v20070608-1300:1.15
	v20070605-1400:1.15
	v20070601-1400:1.15
	v20070525-1500:1.15
	v20070520-1200:1.15
	v20070518-1300:1.15
	v20070504-1000:1.15
	v20070427-0600:1.15
	v20070420-1000:1.15
	v20070413-1300:1.15
	v20070405-1100:1.15
	v20070403-1500:1.15
	v20070330-1300:1.15
	v20060330-1300:1.15
	v20070322-1100:1.15
	v20060316-0600:1.15
	v20070307-0700:1.14
	v20070301-1200:1.14
	v20070228-2000:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.14
	v20070103-0300:1.14
	M4_20:1.14
	v20061222-1800:1.14
	v20061218-1200:1.14
	v20061214-0000:1.14
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.14
	v20061020-1000:1.14
	v20061013-1330:1.14
	v20060919-0800:1.14
	v20060907-1100:1.14
	M1_20:1.14
	v20060904-1500:1.14
	v20060824-1600:1.14
	v20060817-1500:1.14
	v20060728-0500:1.14
	v20060713-1700:1.14
	R1_0_maintenance:1.14.0.2
	R1_0:1.14
	v20060627-1200:1.14
	v20060626-1420:1.14
	v20060620-0400:1.14
	v20060616-1400:1.14
	v20060616-1200:1.14
	v20060609-1400:1.14
	v20060531-1730:1.13
	v20060530-1930:1.13
	v20060526-1200:1.13
	v20060519-1300:1.13
	v20060519-0800:1.13
	v20060512-1000:1.13
	I20060512-1000:1.13
	I20060505-1400:1.13
	I20060428-1300:1.13
	I20060424-0500:1.13
	I20060424-0300:1.13
	M6_10:1.13
	I20060407-1200:1.12
	I20060331-1000:1.12
	I20060324-0300:1.12
	I20060317-1300:1.12
	I20060317-1200:1.12
	I20060316-1300:1.12
	I20060309-1300:1.11
	M5_10:1.11
	S20060303-1600:1.11
	I20060227-1730:1.11
	I20060216-1945:1.11
	I20060210-1715:1.11
	I20060209-1815:1.11
	I20060203-0830:1.11
	I20060202-1415:1.11
	I20060129-1145:1.11
	I20060127-0900:1.11
	I20060120-1530:1.11
	I20060113-1700:1.11
	M4_10:1.11
	I20060107-1100:1.10
	I20060105-1630:1.10
	I20051230-1230:1.9
	I20051223-1100:1.9
	I20051217-0925:1.7
	I20051208-2000:1.7
	I20051201-1800:1.7
	I20051124-2000:1.6
	M3_10:1.5
	I20051118-1245:1.5
	I20051111-1800:1.4
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.15
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	444245f8090b4567;

1.14
date	2006.06.06.10.52.00;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.04.12.08.48.32;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.13.11.02.29;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.01.05.17.30.29;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.8;

1.8
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.28.16.09.46;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.22.11.50.02;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.08.15.36.53;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;
import org.eclipse.gmf.codegen.gmfgen.LinkLabelAlignment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Link Label</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkLabelImpl#getLink <em>Link</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkLabelImpl#getAlignment <em>Alignment</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenLinkLabelImpl extends GenLabelImpl implements GenLinkLabel {
	/**
	 * The default value of the '{@@link #getAlignment() <em>Alignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAlignment()
	 * @@generated
	 * @@ordered
	 */
	protected static final LinkLabelAlignment ALIGNMENT_EDEFAULT = LinkLabelAlignment.MIDDLE_LITERAL;

	/**
	 * The cached value of the '{@@link #getAlignment() <em>Alignment</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getAlignment()
	 * @@generated
	 * @@ordered
	 */
	protected LinkLabelAlignment alignment = ALIGNMENT_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenLinkLabelImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenLinkLabel();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenLink getLink() {
		if (eContainerFeatureID != GMFGenPackage.GEN_LINK_LABEL__LINK) return null;
		return (GenLink)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetLink(GenLink newLink, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newLink, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLink(GenLink newLink) {
		if (newLink != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_LINK_LABEL__LINK && newLink != null)) {
			if (EcoreUtil.isAncestor(this, newLink))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newLink != null)
				msgs = ((InternalEObject)newLink).eInverseAdd(this, GMFGenPackage.GEN_LINK__LABELS, GenLink.class, msgs);
			msgs = basicSetLink(newLink, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LINK_LABEL__LINK, newLink, newLink));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LinkLabelAlignment getAlignment() {
		return alignment;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setAlignment(LinkLabelAlignment newAlignment) {
		LinkLabelAlignment oldAlignment = alignment;
		alignment = newAlignment == null ? ALIGNMENT_EDEFAULT : newAlignment;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT, oldAlignment, alignment));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetLink((GenLink)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				return basicSetLink(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_LINK__LABELS, GenLink.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				return getLink();
			case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT:
				return getAlignment();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				setLink((GenLink)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT:
				setAlignment((LinkLabelAlignment)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				setLink((GenLink)null);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT:
				setAlignment(ALIGNMENT_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_LINK_LABEL__LINK:
				return getLink() != null;
			case GMFGenPackage.GEN_LINK_LABEL__ALIGNMENT:
				return alignment != ALIGNMENT_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (alignment: ");
		result.append(alignment);
		result.append(')');
		return result.toString();
	}

	public GenDiagram getDiagram() {
		return getLink().getDiagram();
	}

	protected String getHostName() {
		return getLink().getClassNamePrefix();
	}

} //GenLinkLabelImpl
@


1.14
log
@#145502 deprecate getClassNameSuffix()
@
text
@d70 1
d142 1
d158 1
d172 1
d186 1
d202 1
d220 1
d238 1
d254 1
@


1.13
log
@#126200 register element types in xml
@
text
@a259 4
	public String getClassNameSuffux() {
		return "LinkLabel";
	}

@


1.12
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d89 10
d108 1
a108 1
			msgs = eBasicSetContainer((InternalEObject)newLink, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
d146 1
a146 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
d159 1
a159 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
@


1.11
log
@#122054 support external node labels (partial fix)
@
text
@a14 1
import org.eclipse.gmf.codegen.gmfgen.ExternalLabel;
a27 2
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkLabelImpl#getTextEditPartClassName <em>Text Edit Part Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkLabelImpl#getTextNotationViewFactoryClassName <em>Text Notation View Factory Class Name</em>}</li>
a36 40
	 * The default value of the '{@@link #getTextEditPartClassName() <em>Text Edit Part Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTextEditPartClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String TEXT_EDIT_PART_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getTextEditPartClassName() <em>Text Edit Part Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTextEditPartClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String textEditPartClassName = TEXT_EDIT_PART_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getTextNotationViewFactoryClassName() <em>Text Notation View Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTextNotationViewFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getTextNotationViewFactoryClassName() <em>Text Notation View Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTextNotationViewFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String textNotationViewFactoryClassName = TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;

	/**
a130 85
	public String getTextEditPartClassNameGen() {
		return textEditPartClassName;
	}

	public String getTextEditPartClassName() {
		String value = getTextEditPartClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePart() + TEXT_EDIT_PART_SUFFIX;
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTextEditPartClassName(String newTextEditPartClassName) {
		String oldTextEditPartClassName = textEditPartClassName;
		textEditPartClassName = newTextEditPartClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME, oldTextEditPartClassName, textEditPartClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getTextNotationViewFactoryClassNameGen() {
		return textNotationViewFactoryClassName;
	}

	public String getTextNotationViewFactoryClassName() {
		String value = getTextNotationViewFactoryClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePart() + TEXT_NOTATION_VIEW_FACTORY_SUFFIX;
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTextNotationViewFactoryClassName(String newTextNotationViewFactoryClassName) {
		String oldTextNotationViewFactoryClassName = textNotationViewFactoryClassName;
		textNotationViewFactoryClassName = newTextNotationViewFactoryClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME, oldTextNotationViewFactoryClassName, textNotationViewFactoryClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getTextEditPartQualifiedClassName() {
		return getDiagram().getEditPartsPackageName() + '.' + getTextEditPartClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getTextNotationViewFactoryQualifiedClassName() {
		return getDiagram().getNotationViewFactoriesPackageName() + '.' + getTextNotationViewFactoryClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getSemanticHintLabelFieldName() {
		return GenCommonBaseImpl.asJavaConstantName(getUniqueIdentifier()) + "_LABEL"; //$NON-NLS-1$
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a173 4
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				return getTextEditPartClassName();
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getTextNotationViewFactoryClassName();
a188 6
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				setTextEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				setTextNotationViewFactoryClassName((String)newValue);
				return;
a205 6
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				setTextEditPartClassName(TEXT_EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				setTextNotationViewFactoryClassName(TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
a222 4
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				return TEXT_EDIT_PART_CLASS_NAME_EDEFAULT == null ? textEditPartClassName != null : !TEXT_EDIT_PART_CLASS_NAME_EDEFAULT.equals(textEditPartClassName);
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				return TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? textNotationViewFactoryClassName != null : !TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(textNotationViewFactoryClassName);
a235 32
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
		if (baseClass == ExternalLabel.class) {
			switch (derivedFeatureID) {
				case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME: return GMFGenPackage.EXTERNAL_LABEL__TEXT_EDIT_PART_CLASS_NAME;
				case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME: return GMFGenPackage.EXTERNAL_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
		if (baseClass == ExternalLabel.class) {
			switch (baseFeatureID) {
				case GMFGenPackage.EXTERNAL_LABEL__TEXT_EDIT_PART_CLASS_NAME: return GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME;
				case GMFGenPackage.EXTERNAL_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME: return GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d240 1
a240 5
		result.append(" (textEditPartClassName: ");
		result.append(textEditPartClassName);
		result.append(", textNotationViewFactoryClassName: ");
		result.append(textNotationViewFactoryClassName);
		result.append(", alignment: ");
@


1.10
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d15 1
d29 2
a32 2
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkLabelImpl#getTextEditPartClassName <em>Text Edit Part Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLinkLabelImpl#getTextNotationViewFactoryClassName <em>Text Notation View Factory Class Name</em>}</li>
d40 1
a40 1
	 * The default value of the '{@@link #getAlignment() <em>Alignment</em>}' attribute.
d43 1
a43 1
	 * @@see #getAlignment()
d47 1
a47 1
	protected static final LinkLabelAlignment ALIGNMENT_EDEFAULT = LinkLabelAlignment.MIDDLE_LITERAL;
d50 1
a50 1
	 * The cached value of the '{@@link #getAlignment() <em>Alignment</em>}' attribute.
d53 1
a53 1
	 * @@see #getAlignment()
d57 1
a57 1
	protected LinkLabelAlignment alignment = ALIGNMENT_EDEFAULT;
d60 1
a60 1
	 * The default value of the '{@@link #getTextEditPartClassName() <em>Text Edit Part Class Name</em>}' attribute.
d63 1
a63 1
	 * @@see #getTextEditPartClassName()
d67 1
a67 1
	protected static final String TEXT_EDIT_PART_CLASS_NAME_EDEFAULT = null;
d70 1
a70 1
	 * The cached value of the '{@@link #getTextEditPartClassName() <em>Text Edit Part Class Name</em>}' attribute.
d73 1
a73 1
	 * @@see #getTextEditPartClassName()
d77 1
a77 1
	protected String textEditPartClassName = TEXT_EDIT_PART_CLASS_NAME_EDEFAULT;
d80 1
a80 1
	 * The default value of the '{@@link #getTextNotationViewFactoryClassName() <em>Text Notation View Factory Class Name</em>}' attribute.
d83 1
a83 1
	 * @@see #getTextNotationViewFactoryClassName()
d87 1
a87 1
	protected static final String TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;
d90 1
a90 1
	 * The cached value of the '{@@link #getTextNotationViewFactoryClassName() <em>Text Notation View Factory Class Name</em>}' attribute.
d93 1
a93 1
	 * @@see #getTextNotationViewFactoryClassName()
d97 1
a97 1
	protected String textNotationViewFactoryClassName = TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;
d302 4
a309 4
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				return getTextEditPartClassName();
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getTextNotationViewFactoryClassName();
d321 6
a332 6
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				setTextEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				setTextNotationViewFactoryClassName((String)newValue);
				return;
d344 6
a355 6
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				setTextEditPartClassName(TEXT_EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				setTextNotationViewFactoryClassName(TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
d367 4
a374 4
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_EDIT_PART_CLASS_NAME:
				return TEXT_EDIT_PART_CLASS_NAME_EDEFAULT == null ? textEditPartClassName != null : !TEXT_EDIT_PART_CLASS_NAME_EDEFAULT.equals(textEditPartClassName);
			case GMFGenPackage.GEN_LINK_LABEL__TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME:
				return TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? textNotationViewFactoryClassName != null : !TEXT_NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(textNotationViewFactoryClassName);
d384 32
d420 1
a420 3
		result.append(" (alignment: ");
		result.append(alignment);
		result.append(", textEditPartClassName: ");
d424 2
@


1.9
log
@#121888
One toolbar tool can create several elements.
@
text
@a8 1
import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
a11 1
import org.eclipse.emf.ecore.EStructuralFeature;
a14 1
import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;
a19 1
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
d123 1
a123 1
		return (GenLink)eContainer;
d132 1
a132 1
		if (newLink != eContainer || (eContainerFeatureID != GMFGenPackage.GEN_LINK_LABEL__LINK && newLink != null)) {
d136 1
a136 1
			if (eContainer != null)
d258 6
a263 10
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_LINK_LABEL__LINK:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d265 1
a265 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d273 4
a276 12
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_LINK_LABEL__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_LINK_LABEL__MODEL_FACET:
					return basicSetModelFacet(null, msgs);
				case GMFGenPackage.GEN_LINK_LABEL__LINK:
					return eBasicSetContainer(null, GMFGenPackage.GEN_LINK_LABEL__LINK, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d278 1
a278 1
		return eBasicSetContainer(null, featureID, msgs);
d286 4
a289 8
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_LINK_LABEL__LINK:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_LINK__LABELS, GenLink.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d291 1
a291 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d299 2
a300 19
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LINK_LABEL__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_LINK_LABEL__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_LINK_LABEL__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_LINK_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_LINK_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_LINK_LABEL__VIEWMAP:
				return getViewmap();
			case GMFGenPackage.GEN_LINK_LABEL__READ_ONLY:
				return isReadOnly() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_LINK_LABEL__MODEL_FACET:
				return getModelFacet();
d310 1
a310 1
		return eDynamicGet(eFeature, resolve);
d318 2
a319 26
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LINK_LABEL__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_LINK_LABEL__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__READ_ONLY:
				setReadOnly(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_LINK_LABEL__MODEL_FACET:
				setModelFacet((FeatureModelFacet)newValue);
				return;
d333 1
a333 1
		eDynamicSet(eFeature, newValue);
d341 2
a342 26
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LINK_LABEL__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__READ_ONLY:
				setReadOnly(READ_ONLY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LINK_LABEL__MODEL_FACET:
				setModelFacet((FeatureModelFacet)null);
				return;
d356 1
a356 1
		eDynamicUnset(eFeature);
d364 2
a365 18
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LINK_LABEL__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_LINK_LABEL__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_LINK_LABEL__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_LINK_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_LINK_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_LINK_LABEL__VIEWMAP:
				return viewmap != null;
			case GMFGenPackage.GEN_LINK_LABEL__READ_ONLY:
				return readOnly != READ_ONLY_EDEFAULT;
			case GMFGenPackage.GEN_LINK_LABEL__MODEL_FACET:
				return modelFacet != null;
d375 1
a375 1
		return eDynamicIsSet(eFeature);
@


1.8
log
@#121581
Fields for the compartments are named unique.
@
text
@d254 1
a254 1
		return asJavaConstantName(getUniqueIdentifier()) + "_LABEL"; //$NON-NLS-1$
@


1.7
log
@#117749 & #118040 generate unique names for the shared elements in mapping model
@
text
@d251 9
@


1.6
log
@#112187 generate separate class for the link label text view
@
text
@d182 3
a184 3
		String name = getTextEditPartClassNameGen();
		if (name == null || name.trim().length() == 0) {
			name = getClassNamePrefix() + "TextEditPart"; //$NON-NLS-1$
d186 1
a186 1
		return name;
d211 3
a213 3
		String name = getTextNotationViewFactoryClassNameGen();
		if (name == null || name.trim().length() == 0) {
			name = getClassNamePrefix() + "TextViewFactory"; //$NON-NLS-1$
d215 1
a215 1
		return name;
d217 1
a217 1
	
@


1.5
log
@#116798 create distinct package for the view factories
@
text
@d34 1
d63 20
d177 29
d235 9
d335 2
d380 3
d427 3
d464 2
d483 2
@


1.4
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d186 1
a186 1
		return getDiagram().getProvidersPackageName() + '.' + getTextNotationViewFactoryClassName();
@


1.3
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d262 2
d298 3
d342 3
d383 2
@


1.2
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d34 1
d62 20
d156 38
d274 2
d314 3
d355 3
d387 2
d404 2
@


1.1
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@a9 1
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
a21 2
import org.eclipse.gmf.codegen.gmfgen.GenLinkReferenceOnly;
import org.eclipse.gmf.codegen.gmfgen.GenLinkWithClass;
d348 1
a348 12
		if (getLink() instanceof GenLinkWithClass) {
			GenClass metaClass = ((GenLinkWithClass) getLink()).getDomainMetaClass();
			if (metaClass != null) {
				return metaClass.getInterfaceName();
			}
		} else if (getLink() instanceof GenLinkReferenceOnly) {
			GenFeature metaFeature = ((GenLinkReferenceOnly) getLink()).getDomainLinkTargetFeature();
			if (metaFeature != null) {
				return metaFeature.getCapName();
			}
		}
		return "Link$" + hashCode();
@

