head	1.6;
access;
symbols
	v20081022-1925:1.6
	v20081015-1925:1.6
	v20081008-1925:1.6
	v20081001-1925:1.6
	v20080930-1130:1.6
	v20080926-1245:1.6
	v20080924-1925:1.6
	v20080917-1925:1.6
	v20080911-1728:1.6
	v20080910-1520:1.6
	v20080903-1520:1.6
	v20080827-1520:1.6
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20080722-1827:1.6
	v20080718-1731:1.6
	v20080716-1600:1.6
	v20080716-1642:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080528-1052:1.6
	v20080521:1.6
	v20080516-1543:1.6
	v20080516-1143:1.6
	v20080512-1200:1.6
	v20080508-2000:1.6
	v20080507-1326:1.6
	v20080503-1740:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080411-0411:1.6
	v20080404-1111:1.6
	v20080322-0000:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071222-1111:1.6
	v20071214-1111:1.6
	v20071130-1111:1.6
	v20071124-0000:1.6
	v20071112-0000:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070928-0000:1.6
	v20070921-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070614-1400:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070525-1500:1.6
	v20070520-1200:1.6
	v20070518-1300:1.6
	v20070504-1000:1.6
	v20070427-0600:1.6
	v20070420-1000:1.6
	v20070413-1300:1.6
	v20070405-1100:1.5
	v20070403-1500:1.5
	v20070330-1300:1.5
	v20060330-1300:1.5
	v20070322-1100:1.5
	v20060316-0600:1.5
	v20070307-0700:1.4
	v20070301-1200:1.4
	v20070228-2000:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.2
	v20070103-0300:1.4
	M4_20:1.4
	v20061222-1800:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	v20061120-1300:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.2
	v20061020-1000:1.2
	v20061013-1330:1.2
	v20060919-0800:1.2
	v20060907-1100:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060824-1600:1.2
	v20060817-1500:1.2
	v20060728-0500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060620-0400:1.2
	v20060616-1400:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.1
	I20060512-1000:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	725b461c97d64567;

1.5
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	444245f8090b4567;

1.4
date	2006.10.18.09.56.50;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2006.10.17.13.08.11;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.17.14.22.47;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.6
log
@[181778] Generate standalone creation commands for reference based links
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenChildLabelNode;
import org.eclipse.gmf.codegen.gmfgen.LabelModelFacet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Child Label Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildLabelNodeImpl#isLabelReadOnly <em>Label Read Only</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildLabelNodeImpl#isLabelElementIcon <em>Label Element Icon</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildLabelNodeImpl#getLabelModelFacet <em>Label Model Facet</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenChildLabelNodeImpl extends GenChildNodeImpl implements GenChildLabelNode {
	/**
	 * The default value of the '{@@link #isLabelReadOnly() <em>Label Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isLabelReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean LABEL_READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isLabelReadOnly() <em>Label Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isLabelReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean labelReadOnly = LABEL_READ_ONLY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isLabelElementIcon() <em>Label Element Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isLabelElementIcon()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean LABEL_ELEMENT_ICON_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isLabelElementIcon() <em>Label Element Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isLabelElementIcon()
	 * @@generated
	 * @@ordered
	 */
	protected boolean labelElementIcon = LABEL_ELEMENT_ICON_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getLabelModelFacet() <em>Label Model Facet</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLabelModelFacet()
	 * @@generated
	 * @@ordered
	 */
	protected LabelModelFacet labelModelFacet;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenChildLabelNodeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenChildLabelNode();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isLabelReadOnly() {
		return labelReadOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLabelReadOnly(boolean newLabelReadOnly) {
		boolean oldLabelReadOnly = labelReadOnly;
		labelReadOnly = newLabelReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY, oldLabelReadOnly, labelReadOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isLabelElementIcon() {
		return labelElementIcon;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLabelElementIcon(boolean newLabelElementIcon) {
		boolean oldLabelElementIcon = labelElementIcon;
		labelElementIcon = newLabelElementIcon;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON, oldLabelElementIcon, labelElementIcon));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelModelFacet getLabelModelFacet() {
		return labelModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetLabelModelFacet(LabelModelFacet newLabelModelFacet, NotificationChain msgs) {
		LabelModelFacet oldLabelModelFacet = labelModelFacet;
		labelModelFacet = newLabelModelFacet;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, oldLabelModelFacet, newLabelModelFacet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLabelModelFacet(LabelModelFacet newLabelModelFacet) {
		if (newLabelModelFacet != labelModelFacet) {
			NotificationChain msgs = null;
			if (labelModelFacet != null)
				msgs = ((InternalEObject)labelModelFacet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, null, msgs);
			if (newLabelModelFacet != null)
				msgs = ((InternalEObject)newLabelModelFacet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, null, msgs);
			msgs = basicSetLabelModelFacet(newLabelModelFacet, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET, newLabelModelFacet, newLabelModelFacet));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenFeature> getLabelMetaFeatures() {
		return GenLabelImpl.getMetaFeatures(getLabelModelFacet());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET:
				return basicSetLabelModelFacet(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				return isLabelReadOnly() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON:
				return isLabelElementIcon() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET:
				return getLabelModelFacet();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				setLabelReadOnly(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON:
				setLabelElementIcon(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET:
				setLabelModelFacet((LabelModelFacet)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				setLabelReadOnly(LABEL_READ_ONLY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON:
				setLabelElementIcon(LABEL_ELEMENT_ICON_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET:
				setLabelModelFacet((LabelModelFacet)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				return labelReadOnly != LABEL_READ_ONLY_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_ELEMENT_ICON:
				return labelElementIcon != LABEL_ELEMENT_ICON_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_MODEL_FACET:
				return labelModelFacet != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (labelReadOnly: ");
		result.append(labelReadOnly);
		result.append(", labelElementIcon: ");
		result.append(labelElementIcon);
		result.append(')');
		return result.toString();
	}

} //GenChildLabelNodeImpl@


1.5
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d84 1
a84 1
	protected LabelModelFacet labelModelFacet = null;
@


1.4
log
@#161380 move readOnly back to GenLabel
@
text
@d9 1
a11 1

a12 1

a14 1

a15 1

d100 1
d195 1
a195 1
	public EList getLabelMetaFeatures() {
d204 1
d218 1
d236 1
d257 1
d278 1
d296 1
@


1.3
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d30 1
d40 20
d112 21
d221 2
d238 3
d258 3
d278 2
d297 3
a299 1
		result.append(" (labelElementIcon: ");
@


1.2
log
@#139127 Provide an option for labels to display node icon
@
text
@a29 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildLabelNodeImpl#isLabelReadOnly <em>Label Read Only</em>}</li>
a38 20
	 * The default value of the '{@@link #isLabelReadOnly() <em>Label Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isLabelReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean LABEL_READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isLabelReadOnly() <em>Label Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isLabelReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean labelReadOnly = LABEL_READ_ONLY_EDEFAULT;

	/**
a90 21
	public boolean isLabelReadOnly() {
		return labelReadOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLabelReadOnly(boolean newLabelReadOnly) {
		boolean oldLabelReadOnly = labelReadOnly;
		labelReadOnly = newLabelReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY, oldLabelReadOnly, labelReadOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a178 2
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				return isLabelReadOnly() ? Boolean.TRUE : Boolean.FALSE;
a193 3
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				setLabelReadOnly(((Boolean)newValue).booleanValue());
				return;
a210 3
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				setLabelReadOnly(LABEL_READ_ONLY_EDEFAULT);
				return;
a227 2
			case GMFGenPackage.GEN_CHILD_LABEL_NODE__LABEL_READ_ONLY:
				return labelReadOnly != LABEL_READ_ONLY_EDEFAULT;
d245 1
a245 3
		result.append(" (labelReadOnly: ");
		result.append(labelReadOnly);
		result.append(", labelElementIcon: ");
@


1.1
log
@#133836 Creating a child node without a label causes error
@
text
@d31 1
d60 20
d133 21
d223 2
d241 3
d261 3
d280 2
d299 2
@

