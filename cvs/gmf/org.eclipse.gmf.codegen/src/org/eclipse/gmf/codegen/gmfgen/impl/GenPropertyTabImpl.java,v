head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080603-1553:1.5
	v20080528-1052:1.5
	v20080521:1.5
	v20080516-1543:1.5
	v20080516-1143:1.5
	v20080512-1200:1.5
	v20080508-2000:1.5
	v20080507-1326:1.5
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080417-1610:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070403-1500:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.3
	v20070307-0700:1.2
	v20070301-1200:1.2
	v20070228-2000:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070103-0300:1.2
	M4_20:1.2
	v20061222-1800:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	v20061120-1300:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2e1d4808b3814567;

1.4
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	5e5047cd7dd64567;

1.3
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	444245f8090b4567;

1.2
date	2006.10.18.11.22.07;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.15.20.44.31;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenPropertySheet;
import org.eclipse.gmf.codegen.gmfgen.GenPropertyTab;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Property Tab</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPropertyTabImpl#getSheet <em>Sheet</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPropertyTabImpl#getID <em>ID</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPropertyTabImpl#getLabel <em>Label</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenPropertyTabImpl extends EObjectImpl implements GenPropertyTab {
	/**
	 * The default value of the '{@@link #getID() <em>ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getID()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getID() <em>ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getID()
	 * @@generated
	 * @@ordered
	 */
	protected String iD = ID_EDEFAULT;

	/**
	 * The default value of the '{@@link #getLabel() <em>Label</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLabel()
	 * @@generated
	 * @@ordered
	 */
	protected static final String LABEL_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getLabel() <em>Label</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLabel()
	 * @@generated
	 * @@ordered
	 */
	protected String label = LABEL_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenPropertyTabImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenPropertyTab();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenPropertySheet getSheet() {
		if (eContainerFeatureID != GMFGenPackage.GEN_PROPERTY_TAB__SHEET) return null;
		return (GenPropertySheet)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getID() {
		return iD;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setID(String newID) {
		String oldID = iD;
		iD = newID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PROPERTY_TAB__ID, oldID, iD));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getLabelGen() {
		return label;
	}

	public String getLabel() {
		String rv = getLabelGen();
		if (rv == null || rv.trim().length() == 0) {
			return getID() == null ? null : CodeGenUtil.capName(getID());
		}
		return rv;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setLabel(String newLabel) {
		String oldLabel = label;
		label = newLabel;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PROPERTY_TAB__LABEL, oldLabel, label));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				return eBasicSetContainer(null, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_PROPERTY_SHEET__TABS, GenPropertySheet.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				return getSheet();
			case GMFGenPackage.GEN_PROPERTY_TAB__ID:
				return getID();
			case GMFGenPackage.GEN_PROPERTY_TAB__LABEL:
				return getLabel();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__ID:
				setID((String)newValue);
				return;
			case GMFGenPackage.GEN_PROPERTY_TAB__LABEL:
				setLabel((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__ID:
				setID(ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_PROPERTY_TAB__LABEL:
				setLabel(LABEL_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				return getSheet() != null;
			case GMFGenPackage.GEN_PROPERTY_TAB__ID:
				return ID_EDEFAULT == null ? iD != null : !ID_EDEFAULT.equals(iD);
			case GMFGenPackage.GEN_PROPERTY_TAB__LABEL:
				return LABEL_EDEFAULT == null ? label != null : !LABEL_EDEFAULT.equals(label);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (iD: ");
		result.append(iD);
		result.append(", label: ");
		result.append(label);
		result.append(')');
		return result.toString();
	}

} //GenPropertyTabImpl@


1.4
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a11 1

a13 1

a15 2

import org.eclipse.emf.ecore.util.EcoreUtil;
a109 31
	public NotificationChain basicSetSheet(GenPropertySheet newSheet, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newSheet, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setSheet(GenPropertySheet newSheet) {
		if (newSheet != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_PROPERTY_TAB__SHEET && newSheet != null)) {
			if (EcoreUtil.isAncestor(this, newSheet))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newSheet != null)
				msgs = ((InternalEObject)newSheet).eInverseAdd(this, GMFGenPackage.GEN_PROPERTY_SHEET__TABS, GenPropertySheet.class, msgs);
			msgs = basicSetSheet(newSheet, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, newSheet, newSheet));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d166 1
a166 1
				return basicSetSheet((GenPropertySheet)otherEnd, msgs);
d180 1
a180 1
				return basicSetSheet(null, msgs);
a224 3
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				setSheet((GenPropertySheet)newValue);
				return;
a242 3
			case GMFGenPackage.GEN_PROPERTY_TAB__SHEET:
				setSheet((GenPropertySheet)null);
				return;
@


1.3
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d19 1
d114 31
d201 1
a201 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, msgs);
d215 1
a215 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_PROPERTY_TAB__SHEET, msgs);
d260 3
d281 3
@


1.2
log
@NPE on tab creation in the tree editor
@
text
@d93 1
d163 1
d179 1
d193 1
d207 1
d225 1
d243 1
d261 1
d279 1
@


1.1
log
@Generate PropertySheet pluged into tabbed page framework of Eclipse instead of plug-in as runtime provider.
Eases pages being added/removed/replaced/tuned
@
text
@d140 1
a140 1
			return CodeGenUtil.capName(getID());
@

