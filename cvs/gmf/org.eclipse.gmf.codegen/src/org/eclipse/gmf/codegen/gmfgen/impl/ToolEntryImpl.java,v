head	1.12;
access;
symbols
	v20081022-1925:1.12
	v20081015-1925:1.12
	v20081008-1925:1.12
	v20081001-1925:1.12
	v20080930-1130:1.12
	v20080926-1245:1.12
	v20080924-1925:1.12
	v20080917-1925:1.12
	v20080911-1728:1.12
	v20080910-1520:1.12
	v20080903-1520:1.12
	v20080827-1520:1.12
	v20080813-1520:1.12
	v20080806-1520:1.12
	v20080722-1827:1.12
	v20080718-1731:1.12
	v20080716-1600:1.12
	v20080716-1642:1.12
	R2_1_maintenance:1.12.0.4
	Root_R2_1_maintenance:1.12
	R2_1_0:1.12
	v20080610-1132:1.12
	v20080603-1553:1.12
	v20080528-1052:1.12
	v20080521:1.12
	v20080516-1543:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080508-2000:1.12
	v20080507-1326:1.12
	v20080503-1740:1.12
	v20080501-1739:1.12
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080222-1200:1.12
	v20080215-1500:1.12
	v20080207-0207:1.12
	v20071222-1111:1.12
	v20071214-1111:1.12
	v20071130-1111:1.12
	v20071124-0000:1.12
	v20071112-0000:1.12
	v20071108-0000:1.12
	v20071003-0000:1.12
	v20070928-0000:1.12
	v20070921-0000:1.12
	v20070915-0000:1.12
	v20070903-0000:1.12
	v20070809-0000:1.12
	R2_0_maintenance:1.12.0.2
	R2_0:1.12
	R4_20:1.12
	v20070621-0000:1.12
	RC3_20:1.12
	v20070614-1400:1.12
	v20070608-1300:1.12
	v20070605-1400:1.12
	v20070601-1400:1.12
	v20070525-1500:1.12
	v20070520-1200:1.12
	v20070518-1300:1.12
	v20070504-1000:1.12
	v20070427-0600:1.12
	v20070420-1000:1.12
	v20070413-1300:1.12
	v20070405-1100:1.11
	v20070403-1500:1.11
	v20070330-1300:1.11
	v20060330-1300:1.11
	v20070322-1100:1.11
	v20060316-0600:1.11
	v20070307-0700:1.9
	v20070301-1200:1.9
	v20070228-2000:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.7
	v20070103-0300:1.9
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.9
	v20061214-0000:1.9
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.5
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	725b461c97d64567;

1.11
date	2007.03.15.13.35.47;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	4fef45f94bb24567;

1.10
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	444245f8090b4567;

1.9
date	2006.11.22.20.09.57;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	29594564ae8d4567;

1.8
date	2006.11.16.18.19.38;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	5260455cabba4567;

1.7
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.23.19.56.15;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.19.14.59.29;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.18.18.35.10;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.13.17.11.22;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@[181778] Generate standalone creation commands for reference based links
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.EcoreEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.ToolEntry;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tool Entry</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getGenNodes <em>Gen Nodes</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getGenLinks <em>Gen Links</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getElements <em>Elements</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class ToolEntryImpl extends AbstractToolEntryImpl implements ToolEntry {
	/**
	 * The cached value of the '{@@link #getGenNodes() <em>Gen Nodes</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGenNodes()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenNode> genNodes;

	/**
	 * The cached value of the '{@@link #getGenLinks() <em>Gen Links</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGenLinks()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenLink> genLinks;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ToolEntryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getToolEntry();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenNode> getGenNodes() {
		if (genNodes == null) {
			genNodes = new EObjectResolvingEList<GenNode>(GenNode.class, this, GMFGenPackage.TOOL_ENTRY__GEN_NODES);
		}
		return genNodes;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenLink> getGenLinks() {
		if (genLinks == null) {
			genLinks = new EObjectResolvingEList<GenLink>(GenLink.class, this, GMFGenPackage.TOOL_ENTRY__GEN_LINKS);
		}
		return genLinks;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenCommonBase> getElements() {
		EList<? extends GenCommonBase> picked;
		if (getGenNodes().isEmpty()) {
			picked = getGenLinks();
		} else {
			picked = getGenNodes();
		}
		return new EcoreEList.UnmodifiableEList<GenCommonBase>(this, GMFGenPackage.eINSTANCE.getToolEntry_Elements(), picked.size(), picked.toArray());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
				return getGenNodes();
			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
				return getGenLinks();
			case GMFGenPackage.TOOL_ENTRY__ELEMENTS:
				return getElements();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
				getGenNodes().clear();
				getGenNodes().addAll((Collection<? extends GenNode>)newValue);
				return;
			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
				getGenLinks().clear();
				getGenLinks().addAll((Collection<? extends GenLink>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
				getGenNodes().clear();
				return;
			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
				getGenLinks().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.TOOL_ENTRY__GEN_NODES:
				return genNodes != null && !genNodes.isEmpty();
			case GMFGenPackage.TOOL_ENTRY__GEN_LINKS:
				return genLinks != null && !genLinks.isEmpty();
			case GMFGenPackage.TOOL_ENTRY__ELEMENTS:
				return !getElements().isEmpty();
		}
		return super.eIsSet(featureID);
	}

	public String getCreateMethodName() {
		if (getCreateMethodNameGen() != null) {
			return getCreateMethodNameGen();
		}
		return CodeGenUtil.validJavaIdentifier("create" + CodeGenUtil.capName(String.valueOf(getTitle())) + getEntryID() + "CreationTool");
	}
} //ToolEntryImpl
@


1.11
log
@CrossReferencer exception fixed
@
text
@d46 1
a46 1
	protected EList<GenNode> genNodes = null;
d56 1
a56 1
	protected EList<GenLink> genLinks = null;
@


1.10
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a11 1
import org.eclipse.emf.common.util.BasicEList;
d15 1
d113 1
a113 1
		return new BasicEList.UnmodifiableEList<GenCommonBase>(picked.size(), picked.toArray());
@


1.9
log
@[164021] allow to choose standard tools
@
text
@d12 1
d17 1
d46 1
a46 1
	protected EList genNodes = null;
d56 1
a56 1
	protected EList genLinks = null;
d72 1
d82 1
a82 1
	public EList getGenNodes() {
d84 1
a84 1
			genNodes = new EObjectResolvingEList(GenNode.class, this, GMFGenPackage.TOOL_ENTRY__GEN_NODES);
d94 1
a94 1
	public EList getGenLinks() {
d96 1
a96 1
			genLinks = new EObjectResolvingEList(GenLink.class, this, GMFGenPackage.TOOL_ENTRY__GEN_LINKS);
d106 2
a107 1
	public EList getElements() {
d109 3
a111 1
			return getGenLinks();
d113 1
a113 1
		return getGenNodes();
d121 1
d139 2
d145 1
a145 1
				getGenNodes().addAll((Collection)newValue);
d149 1
a149 1
				getGenLinks().addAll((Collection)newValue);
d160 1
d178 1
@


1.8
log
@capitalise stem in method name
@
text
@a11 2
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
a12 1
import org.eclipse.emf.common.util.EMap;
a13 5
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EStringToStringMapEntryImpl;
a14 2
import org.eclipse.emf.ecore.util.EcoreEMap;
import org.eclipse.emf.ecore.util.InternalEList;
a26 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#isDefault <em>Default</em>}</li>
a29 2
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getQualifiedToolName <em>Qualified Tool Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolEntryImpl#getProperties <em>Properties</em>}</li>
d35 1
a35 21
public class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
	/**
	 * The default value of the '{@@link #isDefault() <em>Default</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isDefault()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean DEFAULT_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isDefault() <em>Default</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isDefault()
	 * @@generated
	 * @@ordered
	 */
	protected boolean default_ = DEFAULT_EDEFAULT;

a56 30
	 * The default value of the '{@@link #getQualifiedToolName() <em>Qualified Tool Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getQualifiedToolName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String QUALIFIED_TOOL_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getQualifiedToolName() <em>Qualified Tool Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getQualifiedToolName()
	 * @@generated
	 * @@ordered
	 */
	protected String qualifiedToolName = QUALIFIED_TOOL_NAME_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getProperties() <em>Properties</em>}' map.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getProperties()
	 * @@generated
	 * @@ordered
	 */
	protected EMap properties = null;

	/**
a78 21
	public boolean isDefault() {
		return default_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDefault(boolean newDefault) {
		boolean oldDefault = default_;
		default_ = newDefault;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_ENTRY__DEFAULT, oldDefault, default_));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a114 46
	public String getQualifiedToolName() {
		return qualifiedToolName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setQualifiedToolName(String newQualifiedToolName) {
		String oldQualifiedToolName = qualifiedToolName;
		qualifiedToolName = newQualifiedToolName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME, oldQualifiedToolName, qualifiedToolName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EMap getProperties() {
		if (properties == null) {
			properties = new EcoreEMap(EcorePackage.Literals.ESTRING_TO_STRING_MAP_ENTRY, EStringToStringMapEntryImpl.class, this, GMFGenPackage.TOOL_ENTRY__PROPERTIES);
		}
		return properties;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
				return ((InternalEList)getProperties()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a116 2
			case GMFGenPackage.TOOL_ENTRY__DEFAULT:
				return isDefault() ? Boolean.TRUE : Boolean.FALSE;
a122 5
			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
				return getQualifiedToolName();
			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
				if (coreType) return getProperties();
				else return getProperties().map();
a133 3
			case GMFGenPackage.TOOL_ENTRY__DEFAULT:
				setDefault(((Boolean)newValue).booleanValue());
				return;
a141 6
			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
				setQualifiedToolName((String)newValue);
				return;
			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
				((EStructuralFeature.Setting)getProperties()).set(newValue);
				return;
a152 3
			case GMFGenPackage.TOOL_ENTRY__DEFAULT:
				setDefault(DEFAULT_EDEFAULT);
				return;
a158 6
			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
				setQualifiedToolName(QUALIFIED_TOOL_NAME_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
				getProperties().clear();
				return;
a169 2
			case GMFGenPackage.TOOL_ENTRY__DEFAULT:
				return default_ != DEFAULT_EDEFAULT;
a175 4
			case GMFGenPackage.TOOL_ENTRY__QUALIFIED_TOOL_NAME:
				return QUALIFIED_TOOL_NAME_EDEFAULT == null ? qualifiedToolName != null : !QUALIFIED_TOOL_NAME_EDEFAULT.equals(qualifiedToolName);
			case GMFGenPackage.TOOL_ENTRY__PROPERTIES:
				return properties != null && !properties.isEmpty();
a179 17
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (default: ");
		result.append(default_);
		result.append(", qualifiedToolName: ");
		result.append(qualifiedToolName);
		result.append(')');
		return result.toString();
	}

@


1.7
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d362 1
a362 1
		return CodeGenUtil.validJavaIdentifier("create" + getTitle() + getEntryID() + "CreationTool");
@


1.6
log
@Produceing valid method names for all tools
@
text
@d9 2
d13 3
d17 3
d21 4
d26 2
d38 5
d48 1
a48 1
public abstract class ToolEntryImpl extends EntryBaseImpl implements ToolEntry {
d70 50
d163 82
d249 11
d274 14
d302 12
d327 10
d352 2
d362 1
a362 1
		return CodeGenUtil.validJavaIdentifier("create" + getTitleKey() + getEntryID() + "CreationTool");
a363 1

@


1.5
log
@#124466
entryID attribute introduced to avoid duplicate names generation
@
text
@d9 1
d162 1
a162 1
		return "create" + getTitleKey() + getEntryID() + "CreationTool";
@


1.4
log
@simplify naming strategy - it's sufficient to generate method names on the fly
@
text
@d161 1
a161 1
		return "create" + getTitleKey() + "CreationTool";
@


1.3
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d157 7
@


1.2
log
@#120553
- Adding accessors for the palette entries factory methods into genmodel
- Refreshing unit-tests
- Fixing some old problems found by this refreshment.
@
text
@a10 1
import org.eclipse.emf.ecore.EStructuralFeature;
d93 2
a94 14
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_ENTRY__ORDER:
				return new Integer(getOrder());
			case GMFGenPackage.TOOL_ENTRY__TITLE_KEY:
				return getTitleKey();
			case GMFGenPackage.TOOL_ENTRY__DESCRIPTION_KEY:
				return getDescriptionKey();
			case GMFGenPackage.TOOL_ENTRY__LARGE_ICON_PATH:
				return getLargeIconPath();
			case GMFGenPackage.TOOL_ENTRY__SMALL_ICON_PATH:
				return getSmallIconPath();
			case GMFGenPackage.TOOL_ENTRY__CREATE_METHOD_NAME:
				return getCreateMethodName();
d98 1
a98 1
		return eDynamicGet(eFeature, resolve);
d106 2
a107 20
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_ENTRY__ORDER:
				setOrder(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.TOOL_ENTRY__TITLE_KEY:
				setTitleKey((String)newValue);
				return;
			case GMFGenPackage.TOOL_ENTRY__DESCRIPTION_KEY:
				setDescriptionKey((String)newValue);
				return;
			case GMFGenPackage.TOOL_ENTRY__LARGE_ICON_PATH:
				setLargeIconPath((String)newValue);
				return;
			case GMFGenPackage.TOOL_ENTRY__SMALL_ICON_PATH:
				setSmallIconPath((String)newValue);
				return;
			case GMFGenPackage.TOOL_ENTRY__CREATE_METHOD_NAME:
				setCreateMethodName((String)newValue);
				return;
d112 1
a112 1
		eDynamicSet(eFeature, newValue);
d120 2
a121 20
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_ENTRY__ORDER:
				setOrder(ORDER_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_ENTRY__TITLE_KEY:
				setTitleKey(TITLE_KEY_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_ENTRY__DESCRIPTION_KEY:
				setDescriptionKey(DESCRIPTION_KEY_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_ENTRY__LARGE_ICON_PATH:
				setLargeIconPath(LARGE_ICON_PATH_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_ENTRY__SMALL_ICON_PATH:
				setSmallIconPath(SMALL_ICON_PATH_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_ENTRY__CREATE_METHOD_NAME:
				setCreateMethodName(CREATE_METHOD_NAME_EDEFAULT);
				return;
d126 1
a126 1
		eDynamicUnset(eFeature);
d134 2
a135 14
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_ENTRY__ORDER:
				return order != ORDER_EDEFAULT;
			case GMFGenPackage.TOOL_ENTRY__TITLE_KEY:
				return TITLE_KEY_EDEFAULT == null ? titleKey != null : !TITLE_KEY_EDEFAULT.equals(titleKey);
			case GMFGenPackage.TOOL_ENTRY__DESCRIPTION_KEY:
				return DESCRIPTION_KEY_EDEFAULT == null ? descriptionKey != null : !DESCRIPTION_KEY_EDEFAULT.equals(descriptionKey);
			case GMFGenPackage.TOOL_ENTRY__LARGE_ICON_PATH:
				return LARGE_ICON_PATH_EDEFAULT == null ? largeIconPath != null : !LARGE_ICON_PATH_EDEFAULT.equals(largeIconPath);
			case GMFGenPackage.TOOL_ENTRY__SMALL_ICON_PATH:
				return SMALL_ICON_PATH_EDEFAULT == null ? smallIconPath != null : !SMALL_ICON_PATH_EDEFAULT.equals(smallIconPath);
			case GMFGenPackage.TOOL_ENTRY__CREATE_METHOD_NAME:
				return CREATE_METHOD_NAME_EDEFAULT == null ? createMethodName != null : !CREATE_METHOD_NAME_EDEFAULT.equals(createMethodName);
d139 1
a139 1
		return eDynamicIsSet(eFeature);
@


1.1
log
@*** empty log message ***
@
text
@d106 2
d136 3
d168 3
d195 2
@

