head	1.25;
access;
symbols
	v20081022-1925:1.25
	v20081015-1925:1.25
	v20081008-1925:1.25
	v20081001-1925:1.25
	v20080930-1130:1.25
	v20080926-1245:1.25
	v20080924-1925:1.25
	v20080917-1925:1.25
	v20080911-1728:1.25
	v20080910-1520:1.25
	v20080903-1520:1.25
	v20080827-1520:1.25
	v20080813-1520:1.25
	v20080806-1520:1.25
	v20080722-1827:1.25
	v20080718-1731:1.25
	v20080716-1600:1.25
	v20080716-1642:1.25
	R2_1_maintenance:1.25.0.4
	Root_R2_1_maintenance:1.25
	R2_1_0:1.25
	v20080610-1132:1.25
	v20080603-1553:1.25
	v20080528-1052:1.25
	v20080521:1.25
	v20080516-1543:1.25
	v20080516-1143:1.25
	v20080512-1200:1.25
	v20080508-2000:1.25
	v20080507-1326:1.25
	v20080503-1740:1.25
	v20080501-1739:1.25
	v20080425-1959:1.25
	v20080417-1610:1.25
	v20080411-0411:1.25
	v20080404-1111:1.25
	v20080322-0000:1.25
	v20080222-1200:1.25
	v20080215-1500:1.25
	v20080207-0207:1.25
	v20071222-1111:1.25
	v20071214-1111:1.25
	v20071130-1111:1.25
	v20071124-0000:1.25
	v20071112-0000:1.25
	v20071108-0000:1.25
	v20071003-0000:1.25
	v20070928-0000:1.25
	v20070921-0000:1.25
	v20070915-0000:1.25
	v20070903-0000:1.25
	v20070809-0000:1.25
	R2_0_maintenance:1.25.0.2
	R2_0:1.25
	R4_20:1.25
	v20070621-0000:1.25
	RC3_20:1.25
	v20070614-1400:1.25
	v20070608-1300:1.25
	v20070605-1400:1.25
	v20070601-1400:1.25
	v20070525-1500:1.25
	v20070520-1200:1.25
	v20070518-1300:1.25
	v20070504-1000:1.25
	v20070427-0600:1.25
	v20070420-1000:1.25
	v20070413-1300:1.25
	v20070405-1100:1.24
	v20070403-1500:1.24
	v20070330-1300:1.24
	v20060330-1300:1.24
	v20070322-1100:1.24
	v20060316-0600:1.24
	v20070307-0700:1.23
	v20070301-1200:1.23
	v20070228-2000:1.23
	v20070221-1500:1.23
	v20070208-1800:1.23
	v20070202-0200:1.19
	v20070103-0300:1.22
	M4_20:1.22
	v20061222-1800:1.22
	v20061218-1200:1.22
	v20061214-0000:1.22
	v20061120-1300:1.22
	M3_20:1.22
	v20061117-0800:1.22
	v20061027-1200:1.19
	v20061020-1000:1.19
	v20061013-1330:1.19
	v20060919-0800:1.19
	v20060907-1100:1.19
	M1_20:1.19
	v20060904-1500:1.19
	v20060824-1600:1.19
	v20060817-1500:1.19
	v20060728-0500:1.19
	v20060713-1700:1.19
	R1_0_maintenance:1.19.0.2
	R1_0:1.19
	v20060627-1200:1.19
	v20060626-1420:1.19
	v20060620-0400:1.19
	v20060616-1400:1.19
	v20060616-1200:1.19
	v20060609-1400:1.19
	v20060531-1730:1.16
	v20060530-1930:1.16
	v20060526-1200:1.16
	v20060519-1300:1.16
	v20060519-0800:1.16
	v20060512-1000:1.15
	I20060512-1000:1.15
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.14
	I20060407-1200:1.13
	I20060331-1000:1.13
	I20060324-0300:1.13
	I20060317-1300:1.13
	I20060317-1200:1.13
	I20060316-1300:1.13
	I20060309-1300:1.12
	M5_10:1.10
	S20060303-1600:1.10
	I20060227-1730:1.9
	I20060216-1945:1.9
	I20060210-1715:1.8
	I20060209-1815:1.8
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.6
	I20060113-1700:1.6
	M4_10:1.6
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.25
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.24;
commitid	725b461c97d64567;

1.24
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.23;
commitid	444245f8090b4567;

1.23
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.22;
commitid	21cf45be38464567;

1.22
date	2006.10.18.14.21.41;	author dstadnik;	state Exp;
branches;
next	1.21;

1.21
date	2006.10.18.09.56.50;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2006.10.17.13.08.11;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.07.13.52.17;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.07.09.29.00;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.06.12.02.13;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.05.17.14.22.47;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.13.12.39.59;	author ashatalin;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.03.09.13.28.19;	author dstadnik;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.07.14.09.19;	author dstadnik;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.02.14.18.46;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.14.20.12.32;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.03.14.04.47;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.15.36.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.24.14.58.45;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.25
log
@[181778] Generate standalone creation commands for reference based links
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.DesignLabelModelFacet;
import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenLabel;
import org.eclipse.gmf.codegen.gmfgen.LabelModelFacet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Label</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLabelImpl#isReadOnly <em>Read Only</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLabelImpl#isElementIcon <em>Element Icon</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLabelImpl#getModelFacet <em>Model Facet</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenLabelImpl extends GenCommonBaseImpl implements GenLabel {
	/**
	 * The default value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean readOnly = READ_ONLY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isElementIcon() <em>Element Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isElementIcon()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean ELEMENT_ICON_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isElementIcon() <em>Element Icon</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isElementIcon()
	 * @@generated
	 * @@ordered
	 */
	protected boolean elementIcon = ELEMENT_ICON_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getModelFacet() <em>Model Facet</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getModelFacet()
	 * @@generated
	 * @@ordered
	 */
	protected LabelModelFacet modelFacet;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenLabelImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenLabel();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isReadOnly() {
		return readOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setReadOnly(boolean newReadOnly) {
		boolean oldReadOnly = readOnly;
		readOnly = newReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LABEL__READ_ONLY, oldReadOnly, readOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isElementIcon() {
		return elementIcon;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setElementIcon(boolean newElementIcon) {
		boolean oldElementIcon = elementIcon;
		elementIcon = newElementIcon;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LABEL__ELEMENT_ICON, oldElementIcon, elementIcon));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public LabelModelFacet getModelFacet() {
		return modelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetModelFacet(LabelModelFacet newModelFacet, NotificationChain msgs) {
		LabelModelFacet oldModelFacet = modelFacet;
		modelFacet = newModelFacet;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LABEL__MODEL_FACET, oldModelFacet, newModelFacet);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setModelFacet(LabelModelFacet newModelFacet) {
		if (newModelFacet != modelFacet) {
			NotificationChain msgs = null;
			if (modelFacet != null)
				msgs = ((InternalEObject)modelFacet).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LABEL__MODEL_FACET, null, msgs);
			if (newModelFacet != null)
				msgs = ((InternalEObject)newModelFacet).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_LABEL__MODEL_FACET, null, msgs);
			msgs = basicSetModelFacet(newModelFacet, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LABEL__MODEL_FACET, newModelFacet, newModelFacet));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenFeature> getMetaFeatures() {
		return getMetaFeatures(getModelFacet());
	}

	public static EList<GenFeature> getMetaFeatures(LabelModelFacet modelFacet) {
		BasicEList<GenFeature> metaFeatures = new BasicEList<GenFeature>();
		if (modelFacet instanceof FeatureLabelModelFacet) {
			metaFeatures.addAll(((FeatureLabelModelFacet) modelFacet).getMetaFeatures());
		}
		return metaFeatures;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_LABEL__MODEL_FACET:
				return basicSetModelFacet(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				return isReadOnly() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_LABEL__ELEMENT_ICON:
				return isElementIcon() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_LABEL__MODEL_FACET:
				return getModelFacet();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				setReadOnly(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_LABEL__ELEMENT_ICON:
				setElementIcon(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_LABEL__MODEL_FACET:
				setModelFacet((LabelModelFacet)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				setReadOnly(READ_ONLY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LABEL__ELEMENT_ICON:
				setElementIcon(ELEMENT_ICON_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LABEL__MODEL_FACET:
				setModelFacet((LabelModelFacet)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				return readOnly != READ_ONLY_EDEFAULT;
			case GMFGenPackage.GEN_LABEL__ELEMENT_ICON:
				return elementIcon != ELEMENT_ICON_EDEFAULT;
			case GMFGenPackage.GEN_LABEL__MODEL_FACET:
				return modelFacet != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (readOnly: ");
		result.append(readOnly);
		result.append(", elementIcon: ");
		result.append(elementIcon);
		result.append(')');
		return result.toString();
	}

	protected abstract String getHostName();

	public String getClassNamePrefix() {
		// should be consistent with ClassNamingStrategy
		StringBuilder sb = new StringBuilder();
		for (GenFeature metaFeature : getMetaFeatures()) {
			sb.append(metaFeature.getCapName());
		}
		return getHostName() + (sb.length() > 0 ? sb.toString() : CLASS_NAME_PREFIX);
	}
	
	public boolean isSansDomain() {
		return getModelFacet() instanceof DesignLabelModelFacet;
	}
} //GenLabelImpl
@


1.24
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d87 1
a87 1
	protected LabelModelFacet modelFacet = null;
@


1.23
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@a8 2
import java.util.Iterator;

d103 1
d198 1
a198 1
	public EList getMetaFeatures() {
d202 2
a203 2
	public static EList getMetaFeatures(LabelModelFacet modelFacet) {
		EList metaFeatures = new BasicEList();
d215 1
d229 1
d247 1
d268 1
d289 1
d307 1
d324 2
a325 3
		StringBuffer sb = new StringBuffer();
		for (Iterator it = getMetaFeatures().iterator(); it.hasNext();) {
			GenFeature metaFeature = (GenFeature) it.next();
@


1.22
log
@#161380 simplify feature model facets
@
text
@d19 1
d326 4
@


1.21
log
@#161380 move readOnly back to GenLabel
@
text
@d19 1
a19 2
import org.eclipse.gmf.codegen.gmfgen.CompositeFeatureModelFacet;
import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;
d204 2
a205 7
		if (modelFacet instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) modelFacet).getMetaFeature();
			if (metaFeature != null) {
				metaFeatures.add(metaFeature);
			}
		} else if (modelFacet instanceof CompositeFeatureModelFacet) {
			metaFeatures.addAll(((CompositeFeatureModelFacet) modelFacet).getMetaFeatures());
@


1.20
log
@#160894 Move readOnly property from GenLabel to LabelFeatureModelFacet
@
text
@d32 1
d42 20
d114 21
d236 2
d253 3
d273 3
d293 2
d312 3
a314 1
		result.append(" (elementIcon: ");
@


1.19
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@a31 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenLabelImpl#isReadOnly <em>Read Only</em>}</li>
a40 20
	 * The default value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean READ_ONLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isReadOnly() <em>Read Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isReadOnly()
	 * @@generated
	 * @@ordered
	 */
	protected boolean readOnly = READ_ONLY_EDEFAULT;

	/**
a92 21
	public boolean isReadOnly() {
		return readOnly;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setReadOnly(boolean newReadOnly) {
		boolean oldReadOnly = readOnly;
		readOnly = newReadOnly;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_LABEL__READ_ONLY, oldReadOnly, readOnly));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a193 2
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				return isReadOnly() ? Boolean.TRUE : Boolean.FALSE;
a208 3
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				setReadOnly(((Boolean)newValue).booleanValue());
				return;
a225 3
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				setReadOnly(READ_ONLY_EDEFAULT);
				return;
a242 2
			case GMFGenPackage.GEN_LABEL__READ_ONLY:
				return readOnly != READ_ONLY_EDEFAULT;
d260 1
a260 3
		result.append(" (readOnly: ");
		result.append(readOnly);
		result.append(", elementIcon: ");
@


1.18
log
@provide Node/Link/Label/Diagram class prefix instead of Unknown for elements without model facet; add extra empty values checks
@
text
@d322 2
a323 1
	protected String getFeatureCapName() {
d329 1
a329 14
		if (sb.length() > 0) {
			return sb.toString();
		}
		return null;
	}

	public String getClassNamePrefix() {
		String hostName = getHostName();
		String featName = getFeatureCapName();
		if (GenCommonBaseImpl.isEmpty(hostName)) {
			return featName == null ? "Label" : DEFAULT_CLASS_NAME_PREFIX + featName;
		} else {
			return featName == null ? hostName + "Label" : hostName + featName;
		}
@


1.17
log
@refactor getUniqueIdentifier() : all GenCommonBase implementations use the same logic so move it in GenCommonBaseImpl
@
text
@d331 1
a331 1
		return "Unknown";
d335 7
a341 1
		return getHostName() + getFeatureCapName();
@


1.16
log
@#139127 Provide an option for labels to display node icon
@
text
@a336 5

	public String getUniqueIdentifier() {
		return getClassNamePrefix() + "_" + getVisualID();
	}

@


1.15
log
@#133836 Creating a child node without a label causes error
@
text
@d33 1
d62 20
d135 21
d238 2
d256 3
d276 3
d295 2
d314 2
@


1.14
log
@#125900 Redundant annotations added to View in generated view factory

semantic hint class name plroperty removed from the model.
@
text
@d158 4
d163 2
a164 2
		if (getModelFacet() instanceof FeatureModelFacet) {
			GenFeature metaFeature = ((FeatureModelFacet) getModelFacet()).getMetaFeature();
d168 2
a169 2
		} else if (getModelFacet() instanceof CompositeFeatureModelFacet) {
			metaFeatures.addAll(((CompositeFeatureModelFacet) getModelFacet()).getMetaFeatures());
@


1.13
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@a156 9
	public String getSemanticHintFieldName() {
		return GenCommonBaseImpl.asJavaConstantName(getUniqueIdentifier()); //$NON-NLS-1$
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
@


1.12
log
@remove stale imports
@
text
@d158 1
a158 1
		return GenCommonBaseImpl.asJavaConstantName(getUniqueIdentifier()) + "_TEXT"; //$NON-NLS-1$
@


1.11
log
@#130715 Use default label text defined in gmfgraph model
@
text
@a11 1
import org.eclipse.emf.codegen.util.CodeGenUtil;
@


1.10
log
@avoid hashcode in generated names
@
text
@a24 1
import org.eclipse.gmf.codegen.gmfgen.TextLabelModelFacet;
a282 4
		if (getModelFacet() instanceof TextLabelModelFacet) {
			String s = ((TextLabelModelFacet) getModelFacet()).getText();
			return CodeGenUtil.capName(CodeGenUtil.validJavaIdentifier(s));
		}
@


1.9
log
@organized imports
@
text
@d12 1
d25 1
d284 5
a288 1
		return "Label" + hashCode();
@


1.8
log
@do not use '$' in default class names; they are resolved incorrectly (it's an inner class separator)
@
text
@a15 1

a22 1

@


1.7
log
@#125729 Support labels based on multiple structural features
@
text
@d284 1
a284 1
		return "Label$" + hashCode();
@


1.6
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d9 2
d14 3
d20 1
d25 2
d70 1
a70 1
	protected FeatureModelFacet modelFacet = null;
d116 1
a116 1
	public FeatureModelFacet getModelFacet() {
d125 2
a126 2
	public NotificationChain basicSetModelFacet(FeatureModelFacet newModelFacet, NotificationChain msgs) {
		FeatureModelFacet oldModelFacet = modelFacet;
d140 1
a140 1
	public void setModelFacet(FeatureModelFacet newModelFacet) {
d159 2
a160 2
	public GenFeature getMetaFeature() {
		return getModelFacet() == null ? null : getModelFacet().getMetaFeature();
d168 11
a178 2
	public String getSemanticHintFieldName() {
		return GenCommonBaseImpl.asJavaConstantName(getUniqueIdentifier()) + "_TEXT"; //$NON-NLS-1$
d220 1
a220 1
				setModelFacet((FeatureModelFacet)newValue);
d237 1
a237 1
				setModelFacet((FeatureModelFacet)null);
d276 7
a282 3
		GenFeature metaFeature = getMetaFeature();
		if (metaFeature != null) {
			return metaFeature.getCapName();
@


1.5
log
@#121888
One toolbar tool can create several elements.
@
text
@a8 1
import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
a12 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
d169 4
a172 10
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_LABEL__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_LABEL__MODEL_FACET:
					return basicSetModelFacet(null, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d174 1
a174 1
		return eBasicSetContainer(null, featureID, msgs);
d182 2
a183 15
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_LABEL__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_LABEL__VIEWMAP:
				return getViewmap();
d189 1
a189 1
		return eDynamicGet(eFeature, resolve);
d197 2
a198 20
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_LABEL__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_LABEL__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
d206 1
a206 1
		eDynamicSet(eFeature, newValue);
d214 2
a215 20
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_LABEL__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_LABEL__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
d223 1
a223 1
		eDynamicUnset(eFeature);
d231 2
a232 14
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_LABEL__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_LABEL__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_LABEL__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_LABEL__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_LABEL__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_LABEL__VIEWMAP:
				return viewmap != null;
d238 1
a238 1
		return eDynamicIsSet(eFeature);
@


1.4
log
@#121581
Fields for the compartments are named unique.
@
text
@d164 1
a164 1
		return asJavaConstantName(getUniqueIdentifier()) + "_TEXT"; //$NON-NLS-1$
@


1.3
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d161 9
@


1.2
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@d191 2
d221 3
d256 3
d288 2
@


1.1
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d322 1
a322 1
		return getHostName() + getFeatureCapName() + "_" + getVisualID();
@

