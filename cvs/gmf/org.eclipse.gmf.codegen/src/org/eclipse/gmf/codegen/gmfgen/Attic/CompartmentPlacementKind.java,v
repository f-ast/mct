head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.01.19.00.10.44;	author ashatalin;	state dead;
branches;
next	1.4;

1.4
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.AbstractEnumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Compartment Placement Kind</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @@see org.eclipse.gmf.codegen.gmfgen.GMFGenPackage#getCompartmentPlacementKind()
 * @@model
 * @@generated
 */
public final class CompartmentPlacementKind extends AbstractEnumerator {
	/**
	 * The '<em><b>FLOW</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>FLOW</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #FLOW_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int FLOW = 0;

	/**
	 * The '<em><b>TOOLBAR</b></em>' literal value.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of '<em><b>TOOLBAR</b></em>' literal object isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @@see #TOOLBAR_LITERAL
	 * @@model
	 * @@generated
	 * @@ordered
	 */
	public static final int TOOLBAR = 1;

	/**
	 * The '<em><b>FLOW</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #FLOW
	 * @@generated
	 * @@ordered
	 */
	public static final CompartmentPlacementKind FLOW_LITERAL = new CompartmentPlacementKind(FLOW, "FLOW", "FLOW");

	/**
	 * The '<em><b>TOOLBAR</b></em>' literal object.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #TOOLBAR
	 * @@generated
	 * @@ordered
	 */
	public static final CompartmentPlacementKind TOOLBAR_LITERAL = new CompartmentPlacementKind(TOOLBAR, "TOOLBAR", "TOOLBAR");

	/**
	 * An array of all the '<em><b>Compartment Placement Kind</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private static final CompartmentPlacementKind[] VALUES_ARRAY =
		new CompartmentPlacementKind[] {
			FLOW_LITERAL,
			TOOLBAR_LITERAL,
		};

	/**
	 * A public read-only list of all the '<em><b>Compartment Placement Kind</b></em>' enumerators.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

	/**
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static CompartmentPlacementKind get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			CompartmentPlacementKind result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified name.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static CompartmentPlacementKind getByName(String name) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			CompartmentPlacementKind result = VALUES_ARRAY[i];
			if (result.getName().equals(name)) {
				return result;
			}
		}
		return null;
	}

	/**
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified integer value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static CompartmentPlacementKind get(int value) {
		switch (value) {
			case FLOW: return FLOW_LITERAL;
			case TOOLBAR: return TOOLBAR_LITERAL;
		}
		return null;	
	}

	/**
	 * Only this class can construct instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	private CompartmentPlacementKind(int value, String name, String literal) {
		super(value, name, literal);
	}

} //CompartmentPlacementKind
@


1.4
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@@


1.3
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d63 1
a63 1
	public static final CompartmentPlacementKind FLOW_LITERAL = new CompartmentPlacementKind(FLOW, "FLOW");
d73 1
a73 1
	public static final CompartmentPlacementKind TOOLBAR_LITERAL = new CompartmentPlacementKind(TOOLBAR, "TOOLBAR");
d96 16
d117 1
a117 1
	public static CompartmentPlacementKind get(String name) {
d120 1
a120 1
			if (result.toString().equals(name)) {
d128 1
a128 1
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified value.
d147 2
a148 2
	private CompartmentPlacementKind(int value, String name) {
		super(value, name);
@


1.2
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d63 1
a63 1
	public static final CompartmentPlacementKind FLOW_LITERAL = new CompartmentPlacementKind(FLOW, "FLOW", "FLOW");
d73 1
a73 1
	public static final CompartmentPlacementKind TOOLBAR_LITERAL = new CompartmentPlacementKind(TOOLBAR, "TOOLBAR", "TOOLBAR");
a95 16
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified literal value.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public static CompartmentPlacementKind get(String literal) {
		for (int i = 0; i < VALUES_ARRAY.length; ++i) {
			CompartmentPlacementKind result = VALUES_ARRAY[i];
			if (result.toString().equals(literal)) {
				return result;
			}
		}
		return null;
	}

	/**
d101 1
a101 1
	public static CompartmentPlacementKind getByName(String name) {
d104 1
a104 1
			if (result.getName().equals(name)) {
d112 1
a112 1
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified integer value.
d131 2
a132 2
	private CompartmentPlacementKind(int value, String name, String literal) {
		super(value, name, literal);
@


1.1
log
@*** empty log message ***
@
text
@d63 1
a63 1
	public static final CompartmentPlacementKind FLOW_LITERAL = new CompartmentPlacementKind(FLOW, "FLOW");
d73 1
a73 1
	public static final CompartmentPlacementKind TOOLBAR_LITERAL = new CompartmentPlacementKind(TOOLBAR, "TOOLBAR");
d96 16
d117 1
a117 1
	public static CompartmentPlacementKind get(String name) {
d120 1
a120 1
			if (result.toString().equals(name)) {
d128 1
a128 1
	 * Returns the '<em><b>Compartment Placement Kind</b></em>' literal with the specified value.
d147 2
a148 2
	private CompartmentPlacementKind(int value, String name) {
		super(value, name);
@

