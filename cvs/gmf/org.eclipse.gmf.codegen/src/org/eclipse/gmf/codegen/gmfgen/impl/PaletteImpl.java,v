head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080930-1130:1.13
	v20080926-1245:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20080722-1827:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080528-1052:1.13
	v20080521:1.13
	v20080516-1543:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080508-2000:1.13
	v20080507-1326:1.13
	v20080503-1740:1.13
	v20080501-1739:1.13
	v20080425-1959:1.13
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080222-1200:1.11
	v20080215-1500:1.11
	v20080207-0207:1.11
	v20071222-1111:1.11
	v20071214-1111:1.11
	v20071130-1111:1.11
	v20071124-0000:1.11
	v20071112-0000:1.11
	v20071108-0000:1.11
	v20071003-0000:1.11
	v20070928-0000:1.11
	v20070921-0000:1.11
	v20070915-0000:1.11
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070614-1400:1.11
	v20070608-1300:1.11
	v20070605-1400:1.11
	v20070601-1400:1.11
	v20070525-1500:1.11
	v20070520-1200:1.11
	v20070518-1300:1.11
	v20070504-1000:1.11
	v20070427-0600:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.10
	v20070403-1500:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070307-0700:1.9
	v20070301-1200:1.9
	v20070228-2000:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.7
	v20070103-0300:1.9
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.9
	v20061214-0000:1.9
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.4
	I20060202-1415:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	2e1d4808b3814567;

1.12
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	5e5047cd7dd64567;

1.11
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	725b461c97d64567;

1.10
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	444245f8090b4567;

1.9
date	2006.11.28.18.39.23;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	344b456c82534567;

1.8
date	2006.11.22.20.09.57;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	29594564ae8d4567;

1.7
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.28.16.09.46;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;
import java.util.Iterator;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.Palette;
import org.eclipse.gmf.codegen.gmfgen.StandardEntry;
import org.eclipse.gmf.codegen.gmfgen.ToolGroup;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Palette</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#isFlyout <em>Flyout</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#getGroups <em>Groups</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#getPackageName <em>Package Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#getFactoryClassName <em>Factory Class Name</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class PaletteImpl extends EObjectImpl implements Palette {
	/**
	 * The default value of the '{@@link #isFlyout() <em>Flyout</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isFlyout()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean FLYOUT_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isFlyout() <em>Flyout</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isFlyout()
	 * @@generated
	 * @@ordered
	 */
	protected boolean flyout = FLYOUT_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getGroups() <em>Groups</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroups()
	 * @@generated
	 * @@ordered
	 */
	protected EList<ToolGroup> groups;

	/**
	 * The default value of the '{@@link #getPackageName() <em>Package Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPackageName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String PACKAGE_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getPackageName() <em>Package Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getPackageName()
	 * @@generated
	 * @@ordered
	 */
	protected String packageName = PACKAGE_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getFactoryClassName() <em>Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String FACTORY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getFactoryClassName() <em>Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String factoryClassName = FACTORY_CLASS_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected PaletteImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getPalette();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagram getDiagram() {
		if (eContainerFeatureID != GMFGenPackage.PALETTE__DIAGRAM) return null;
		return (GenDiagram)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isFlyout() {
		return flyout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFlyout(boolean newFlyout) {
		boolean oldFlyout = flyout;
		flyout = newFlyout;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.PALETTE__FLYOUT, oldFlyout, flyout));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<ToolGroup> getGroups() {
		if (groups == null) {
			groups = new EObjectContainmentWithInverseEList<ToolGroup>(ToolGroup.class, this, GMFGenPackage.PALETTE__GROUPS, GMFGenPackage.TOOL_GROUP__PALETTE);
		}
		return groups;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getPackageNameGen() {
		return packageName;
	}

	public String getPackageName() {
		String value = getPackageNameGen();
		if (GenCommonBaseImpl.isEmpty(value)) {
			value = getDiagram().getEditorGen().getEditor().getPackageName();
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPackageName(String newPackageName) {
		String oldPackageName = packageName;
		packageName = newPackageName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.PALETTE__PACKAGE_NAME, oldPackageName, packageName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getFactoryClassNameGen() {
		return factoryClassName;
	}

	public String getFactoryClassName() {
		String value = getFactoryClassNameGen();
		if (GenCommonBaseImpl.isEmpty(value)) {
			value = ((GenDiagramImpl) getDiagram()).getDomainPackageCapName() + "PaletteFactory"; //$NON-NLS-1$
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFactoryClassName(String newFactoryClassName) {
		String oldFactoryClassName = factoryClassName;
		factoryClassName = newFactoryClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.PALETTE__FACTORY_CLASS_NAME, oldFactoryClassName, factoryClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getFactoryQualifiedClassName() {
		return getPackageName() + '.' + getFactoryClassName();
	}

	public boolean definesStandardTools() {
		for (Iterator<?> it = eAllContents(); it.hasNext();) {
			if (it.next() instanceof StandardEntry) {
				return true;
			}
		}
		return false;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.PALETTE__DIAGRAM:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.PALETTE__DIAGRAM, msgs);
			case GMFGenPackage.PALETTE__GROUPS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getGroups()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.PALETTE__DIAGRAM:
				return eBasicSetContainer(null, GMFGenPackage.PALETTE__DIAGRAM, msgs);
			case GMFGenPackage.PALETTE__GROUPS:
				return ((InternalEList<?>)getGroups()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.PALETTE__DIAGRAM:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__PALETTE, GenDiagram.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.PALETTE__DIAGRAM:
				return getDiagram();
			case GMFGenPackage.PALETTE__FLYOUT:
				return isFlyout() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.PALETTE__GROUPS:
				return getGroups();
			case GMFGenPackage.PALETTE__PACKAGE_NAME:
				return getPackageName();
			case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME:
				return getFactoryClassName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.PALETTE__FLYOUT:
				setFlyout(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.PALETTE__GROUPS:
				getGroups().clear();
				getGroups().addAll((Collection<? extends ToolGroup>)newValue);
				return;
			case GMFGenPackage.PALETTE__PACKAGE_NAME:
				setPackageName((String)newValue);
				return;
			case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME:
				setFactoryClassName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.PALETTE__FLYOUT:
				setFlyout(FLYOUT_EDEFAULT);
				return;
			case GMFGenPackage.PALETTE__GROUPS:
				getGroups().clear();
				return;
			case GMFGenPackage.PALETTE__PACKAGE_NAME:
				setPackageName(PACKAGE_NAME_EDEFAULT);
				return;
			case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME:
				setFactoryClassName(FACTORY_CLASS_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.PALETTE__DIAGRAM:
				return getDiagram() != null;
			case GMFGenPackage.PALETTE__FLYOUT:
				return flyout != FLYOUT_EDEFAULT;
			case GMFGenPackage.PALETTE__GROUPS:
				return groups != null && !groups.isEmpty();
			case GMFGenPackage.PALETTE__PACKAGE_NAME:
				return PACKAGE_NAME_EDEFAULT == null ? packageName != null : !PACKAGE_NAME_EDEFAULT.equals(packageName);
			case GMFGenPackage.PALETTE__FACTORY_CLASS_NAME:
				return FACTORY_CLASS_NAME_EDEFAULT == null ? factoryClassName != null : !FACTORY_CLASS_NAME_EDEFAULT.equals(factoryClassName);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (flyout: ");
		result.append(flyout);
		result.append(", packageName: ");
		result.append(packageName);
		result.append(", factoryClassName: ");
		result.append(factoryClassName);
		result.append(')');
		return result.toString();
	}

} //PaletteImpl
@


1.12
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a19 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a148 31
	public NotificationChain basicSetDiagram(GenDiagram newDiagram, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newDiagram, GMFGenPackage.PALETTE__DIAGRAM, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagram(GenDiagram newDiagram) {
		if (newDiagram != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.PALETTE__DIAGRAM && newDiagram != null)) {
			if (EcoreUtil.isAncestor(this, newDiagram))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newDiagram != null)
				msgs = ((InternalEObject)newDiagram).eInverseAdd(this, GMFGenPackage.GEN_DIAGRAM__PALETTE, GenDiagram.class, msgs);
			msgs = basicSetDiagram(newDiagram, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.PALETTE__DIAGRAM, newDiagram, newDiagram));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d265 1
a265 1
				return basicSetDiagram((GenDiagram)otherEnd, msgs);
d281 1
a281 1
				return basicSetDiagram(null, msgs);
a332 3
			case GMFGenPackage.PALETTE__DIAGRAM:
				setDiagram((GenDiagram)newValue);
				return;
a357 3
			case GMFGenPackage.PALETTE__DIAGRAM:
				setDiagram((GenDiagram)null);
				return;
@


1.11
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d20 1
d150 31
d297 1
a297 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.PALETTE__DIAGRAM, msgs);
d313 1
a313 1
				return eBasicSetContainer(null, GMFGenPackage.PALETTE__DIAGRAM, msgs);
d365 3
d393 3
@


1.10
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d73 1
a73 1
	protected EList<ToolGroup> groups = null;
@


1.9
log
@heading towards xpand templates - need some attributes to be available in the model
@
text
@d73 1
a73 1
	protected EList groups = null;
d129 1
d170 1
a170 1
	public EList getGroups() {
d172 1
a172 1
			groups = new EObjectContainmentWithInverseEList(ToolGroup.class, this, GMFGenPackage.PALETTE__GROUPS, GMFGenPackage.TOOL_GROUP__PALETTE);
d245 1
a245 1
		for (Iterator it = eAllContents(); it.hasNext();) {
d258 2
d267 1
a267 1
				return ((InternalEList)getGroups()).basicAdd(otherEnd, msgs);
d277 1
d283 1
a283 1
				return ((InternalEList)getGroups()).basicRemove(otherEnd, msgs);
d293 1
d307 1
d329 2
d338 1
a338 1
				getGroups().addAll((Collection)newValue);
d355 1
d379 1
d401 1
@


1.8
log
@[164021] allow to choose standard tools
@
text
@d19 1
a19 1
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
d171 1
a171 1
			groups = new EObjectContainmentEList(ToolGroup.class, this, GMFGenPackage.PALETTE__GROUPS);
d243 9
d263 2
a404 8
	public boolean definesStandardTools() {
		for (Iterator it = eAllContents(); it.hasNext();) {
			if (it.next() instanceof StandardEntry) {
				return true;
			}
		}
		return false;
	}
@


1.7
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d10 1
d24 1
d394 8
@


1.6
log
@#126199 add palette provider
@
text
@d18 1
a18 1
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
d33 1
a34 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#isFlyout <em>Flyout</em>}</li>
d44 1
a44 1
	 * The cached value of the '{@@link #getGroups() <em>Groups</em>}' containment reference list.
d47 1
a47 1
	 * @@see #getGroups()
d51 1
a51 1
	protected EList groups = null;
d54 1
a54 1
	 * The default value of the '{@@link #isFlyout() <em>Flyout</em>}' attribute.
d61 1
a61 1
	protected static final boolean FLYOUT_EDEFAULT = true;
d64 1
a64 1
	 * The cached value of the '{@@link #isFlyout() <em>Flyout</em>}' attribute.
d67 1
a67 1
	 * @@see #isFlyout()
d71 1
a71 1
	protected boolean flyout = FLYOUT_EDEFAULT;
d146 2
a147 5
	public EList getGroups() {
		if (groups == null) {
			groups = new EObjectContainmentWithInverseEList(ToolGroup.class, this, GMFGenPackage.PALETTE__GROUPS, GMFGenPackage.TOOL_GROUP__PALETTE);
		}
		return groups;
d155 5
a159 2
	public boolean isFlyout() {
		return flyout;
d167 5
a171 5
	public void setFlyout(boolean newFlyout) {
		boolean oldFlyout = flyout;
		flyout = newFlyout;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.PALETTE__FLYOUT, oldFlyout, flyout));
a251 2
			case GMFGenPackage.PALETTE__GROUPS:
				return ((InternalEList)getGroups()).basicAdd(otherEnd, msgs);
d293 2
a296 2
			case GMFGenPackage.PALETTE__FLYOUT:
				return isFlyout() ? Boolean.TRUE : Boolean.FALSE;
d312 3
a318 3
			case GMFGenPackage.PALETTE__FLYOUT:
				setFlyout(((Boolean)newValue).booleanValue());
				return;
d336 3
a341 3
			case GMFGenPackage.PALETTE__FLYOUT:
				setFlyout(FLYOUT_EDEFAULT);
				return;
d361 2
a364 2
			case GMFGenPackage.PALETTE__FLYOUT:
				return flyout != FLYOUT_EDEFAULT;
@


1.5
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@a34 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.PaletteImpl#isNeedZoomTools <em>Need Zoom Tools</em>}</li>
d61 1
a61 1
	protected static final boolean FLYOUT_EDEFAULT = false;
a73 20
	 * The default value of the '{@@link #isNeedZoomTools() <em>Need Zoom Tools</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isNeedZoomTools()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean NEED_ZOOM_TOOLS_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isNeedZoomTools() <em>Need Zoom Tools</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isNeedZoomTools()
	 * @@generated
	 * @@ordered
	 */
	protected boolean needZoomTools = NEED_ZOOM_TOOLS_EDEFAULT;

	/**
a178 21
	public boolean isNeedZoomTools() {
		return needZoomTools;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNeedZoomTools(boolean newNeedZoomTools) {
		boolean oldNeedZoomTools = needZoomTools;
		needZoomTools = newNeedZoomTools;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS, oldNeedZoomTools, needZoomTools));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a298 2
			case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS:
				return isNeedZoomTools() ? Boolean.TRUE : Boolean.FALSE;
a320 3
			case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS:
				setNeedZoomTools(((Boolean)newValue).booleanValue());
				return;
a343 3
			case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS:
				setNeedZoomTools(NEED_ZOOM_TOOLS_EDEFAULT);
				return;
a366 2
			case GMFGenPackage.PALETTE__NEED_ZOOM_TOOLS:
				return needZoomTools != NEED_ZOOM_TOOLS_EDEFAULT;
a385 2
		result.append(", needZoomTools: ");
		result.append(needZoomTools);
@


1.4
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d228 1
a228 1
			value = getDiagram().getEditorPackageName();
@


1.3
log
@#117749 & #118040 generate unique names for the shared elements in mapping model
@
text
@a14 1
import org.eclipse.emf.ecore.EStructuralFeature;
d159 1
a159 1
		return (GenDiagram)eContainer;
d288 8
a295 12
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.PALETTE__DIAGRAM:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.PALETTE__DIAGRAM, msgs);
				case GMFGenPackage.PALETTE__GROUPS:
					return ((InternalEList)getGroups()).basicAdd(otherEnd, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d297 1
a297 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d305 6
a310 10
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.PALETTE__DIAGRAM:
					return eBasicSetContainer(null, GMFGenPackage.PALETTE__DIAGRAM, msgs);
				case GMFGenPackage.PALETTE__GROUPS:
					return ((InternalEList)getGroups()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d312 1
a312 1
		return eBasicSetContainer(null, featureID, msgs);
d320 4
a323 8
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.PALETTE__DIAGRAM:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__PALETTE, GenDiagram.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d325 1
a325 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d333 2
a334 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d348 1
a348 1
		return eDynamicGet(eFeature, resolve);
d356 2
a357 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d375 1
a375 1
		eDynamicSet(eFeature, newValue);
d383 2
a384 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d401 1
a401 1
		eDynamicUnset(eFeature);
d409 2
a410 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d424 1
a424 1
		return eDynamicIsSet(eFeature);
@


1.2
log
@#116031 avoid hardcoded class names in templates
@
text
@d228 2
a229 2
		if (value == null || value.length() == 0) {
			return getDiagram().getEditorPackageName();
d256 3
a258 3
		String name = getFactoryClassNameGen();
		if (name == null) {
			return ((GenDiagramImpl) getDiagram()).getDomainPackageCapName() + "PaletteFactory"; //$NON-NLS-1$
d260 1
a260 1
		return name;
@


1.1
log
@*** empty log message ***
@
text
@d123 1
a123 1
	protected static final String FACTORY_CLASS_NAME_EDEFAULT = "PaletteFactory";
d251 4
d256 5
a260 1
		return factoryClassName;
@

