head	1.3;
access;
symbols
	v20081022-1925:1.3
	v20081015-1925:1.3
	v20081008-1925:1.3
	v20081001-1925:1.3
	v20080930-1130:1.3
	v20080926-1245:1.3
	v20080924-1925:1.3
	v20080917-1925:1.3
	v20080911-1728:1.2
	v20080910-1520:1.2
	v20080903-1520:1.2
	v20080827-1520:1.2
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20080722-1827:1.2
	v20080718-1731:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080528-1052:1.2
	v20080521:1.2
	v20080516-1543:1.2
	v20080516-1143:1.2
	v20080512-1200:1.2
	v20080508-2000:1.2
	v20080507-1326:1.2
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080411-0411:1.2
	v20080404-1111:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080207-0207:1.2
	v20071222-1111:1.2
	v20071214-1111:1.2
	v20071130-1111:1.2
	v20071124-0000:1.2
	v20071112-0000:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070921-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070614-1400:1.2
	v20070608-1300:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070520-1200:1.2
	v20070518-1300:1.2
	v20070504-1000:1.2
	v20070427-0600:1.2
	v20070420-1000:1.2
	v20070413-1300:1.2
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2008.09.16.19.20.53;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	13e048d0070f4567;

1.2
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	444245f8090b4567;

1.1
date	2007.01.03.20.34.48;	author dstadnik;	state Exp;
branches;
next	;
commitid	58fc459c135f4567;


desc
@@


1.3
log
@[247311] support boilerplate code generation for custom preference pages
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenStandardPreferencePage;
import org.eclipse.gmf.codegen.gmfgen.StandardPreferencePages;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Standard Preference Page</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenStandardPreferencePageImpl#getKind <em>Kind</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenStandardPreferencePageImpl#getClassName <em>Class Name</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenStandardPreferencePageImpl extends GenPreferencePageImpl implements GenStandardPreferencePage {
	/**
	 * The default value of the '{@@link #getKind() <em>Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getKind()
	 * @@generated
	 * @@ordered
	 */
	protected static final StandardPreferencePages KIND_EDEFAULT = StandardPreferencePages.GENERAL_LITERAL;

	/**
	 * The cached value of the '{@@link #getKind() <em>Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getKind()
	 * @@generated
	 * @@ordered
	 */
	protected StandardPreferencePages kind = KIND_EDEFAULT;

	/**
	 * The default value of the '{@@link #getClassName() <em>Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getClassName() <em>Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String className = CLASS_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenStandardPreferencePageImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenStandardPreferencePage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public StandardPreferencePages getKind() {
		return kind;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setKind(StandardPreferencePages newKind) {
		StandardPreferencePages oldKind = kind;
		kind = newKind == null ? KIND_EDEFAULT : newKind;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND, oldKind, kind));
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.codegen.gmfgen.impl.GenPreferencePageImpl#getQualifiedClassName()
	 */
	@@Override
	public String getQualifiedClassName() {
		if (getDiagram() == null || GenCommonBaseImpl.isEmpty(getDiagram().getPreferencesPackageName())) {
			return getClassName();
		}
		// no custom page for Pathmaps at the moment
		if (getKind() == StandardPreferencePages.PATHMAPS_LITERAL) {
			return "org.eclipse.gmf.runtime.emf.ui.preferences.PathmapsPreferencePage";
		}
		return getDiagram().getPreferencesPackageName() + '.' + getClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getClassNameGen() {
		return className;
	}

	public String getClassName() {
		if (!GenCommonBaseImpl.isEmpty(getClassNameGen())) {
			return getClassNameGen();
		}
		switch (getKind()) {
		case GENERAL_LITERAL : return "DiagramGeneralPreferencePage"; //$NON-NLS-1$
		case APPEARANCE_LITERAL : return "DiagramAppearancePreferencePage"; //$NON-NLS-1$
		case CONNECTIONS_LITERAL : return "DiagramConnectionsPreferencePage"; //$NON-NLS-1$
		case PRINTING_LITERAL : return "DiagramPrintingPreferencePage"; //$NON-NLS-1$
		case RULERS_AND_GRID_LITERAL : return "DiagramRulersAndGridPreferencePage"; //$NON-NLS-1$
		case PATHMAPS_LITERAL : return "PathmapsPreferencePage"; //$NON-NLS-1$
		}
		throw new IllegalStateException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setClassName(String newClassName) {
		String oldClassName = className;
		className = newClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME, oldClassName, className));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND:
				return getKind();
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
				return getClassName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND:
				setKind((StandardPreferencePages)newValue);
				return;
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
				setClassName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND:
				setKind(KIND_EDEFAULT);
				return;
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
				setClassName(CLASS_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__KIND:
				return kind != KIND_EDEFAULT;
			case GMFGenPackage.GEN_STANDARD_PREFERENCE_PAGE__CLASS_NAME:
				return CLASS_NAME_EDEFAULT == null ? className != null : !CLASS_NAME_EDEFAULT.equals(className);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (kind: ");
		result.append(kind);
		result.append(", className: ");
		result.append(className);
		result.append(')');
		return result.toString();
	}

} //GenStandardPreferencePageImpl
@


1.2
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@a9 1

a10 1

a11 1

d24 1
d52 20
d111 51
d172 2
d189 3
d207 3
d224 2
d242 2
@


1.1
log
@[134107] add entities for preference pages
@
text
@d67 1
d98 1
d112 1
d127 1
d142 1
d156 1
@

