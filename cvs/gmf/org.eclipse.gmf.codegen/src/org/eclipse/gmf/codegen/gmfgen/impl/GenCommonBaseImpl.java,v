head	1.27;
access;
symbols
	v20081022-1925:1.27
	v20081015-1925:1.27
	v20081008-1925:1.27
	v20081001-1925:1.27
	v20080930-1130:1.27
	v20080926-1245:1.27
	v20080924-1925:1.27
	v20080917-1925:1.27
	v20080911-1728:1.27
	v20080910-1520:1.27
	v20080903-1520:1.27
	v20080827-1520:1.27
	v20080813-1520:1.27
	v20080806-1520:1.27
	v20080722-1827:1.27
	v20080718-1731:1.27
	v20080716-1600:1.27
	v20080716-1642:1.27
	R2_1_maintenance:1.27.0.4
	Root_R2_1_maintenance:1.27
	R2_1_0:1.27
	v20080610-1132:1.27
	v20080603-1553:1.27
	v20080528-1052:1.27
	v20080521:1.27
	v20080516-1543:1.27
	v20080516-1143:1.27
	v20080512-1200:1.27
	v20080508-2000:1.27
	v20080507-1326:1.27
	v20080503-1740:1.27
	v20080501-1739:1.27
	v20080425-1959:1.27
	v20080417-1610:1.27
	v20080411-0411:1.27
	v20080404-1111:1.27
	v20080322-0000:1.27
	v20080222-1200:1.27
	v20080215-1500:1.27
	v20080207-0207:1.27
	v20071222-1111:1.27
	v20071214-1111:1.27
	v20071130-1111:1.27
	v20071124-0000:1.27
	v20071112-0000:1.27
	v20071108-0000:1.27
	v20071003-0000:1.27
	v20070928-0000:1.27
	v20070921-0000:1.27
	v20070915-0000:1.27
	v20070903-0000:1.27
	v20070809-0000:1.27
	R2_0_maintenance:1.27.0.2
	R2_0:1.27
	R4_20:1.27
	v20070621-0000:1.27
	RC3_20:1.27
	v20070614-1400:1.27
	v20070608-1300:1.27
	v20070605-1400:1.27
	v20070601-1400:1.27
	v20070525-1500:1.27
	v20070520-1200:1.27
	v20070518-1300:1.27
	v20070504-1000:1.26
	v20070427-0600:1.26
	v20070420-1000:1.26
	v20070413-1300:1.26
	v20070405-1100:1.24
	v20070403-1500:1.24
	v20070330-1300:1.24
	v20060330-1300:1.24
	v20070322-1100:1.24
	v20060316-0600:1.24
	v20070307-0700:1.23
	v20070301-1200:1.23
	v20070228-2000:1.23
	v20070221-1500:1.23
	v20070208-1800:1.23
	v20070202-0200:1.19
	v20070103-0300:1.22
	M4_20:1.22
	v20061222-1800:1.22
	v20061218-1200:1.22
	v20061214-0000:1.22
	v20061120-1300:1.22
	M3_20:1.22
	v20061117-0800:1.22
	v20061027-1200:1.19
	v20061020-1000:1.19
	v20061013-1330:1.22
	v20060919-0800:1.19
	v20060907-1100:1.19
	M1_20:1.21
	v20060904-1500:1.21
	v20060824-1600:1.19
	v20060817-1500:1.19
	v20060728-0500:1.19
	v20060713-1700:1.19
	R1_0_maintenance:1.19.0.2
	R1_0:1.19
	v20060627-1200:1.19
	v20060626-1420:1.19
	v20060620-0400:1.19
	v20060616-1400:1.19
	v20060616-1200:1.19
	v20060609-1400:1.19
	v20060531-1730:1.15
	v20060530-1930:1.15
	v20060526-1200:1.15
	v20060519-1300:1.15
	v20060519-0800:1.15
	v20060512-1000:1.14
	I20060512-1000:1.14
	I20060505-1400:1.14
	I20060428-1300:1.14
	I20060424-0500:1.14
	I20060424-0300:1.14
	M6_10:1.14
	I20060407-1200:1.13
	I20060331-1000:1.13
	I20060324-0300:1.13
	I20060317-1300:1.13
	I20060317-1200:1.13
	I20060316-1300:1.13
	I20060309-1300:1.13
	M5_10:1.13
	S20060303-1600:1.13
	I20060227-1730:1.12
	I20060216-1945:1.12
	I20060210-1715:1.12
	I20060209-1815:1.12
	I20060203-0830:1.12
	I20060202-1415:1.12
	I20060129-1145:1.12
	I20060127-0900:1.12
	I20060120-1530:1.12
	I20060113-1700:1.12
	M4_10:1.12
	I20060107-1100:1.12
	I20060105-1630:1.12
	I20051230-1230:1.11
	I20051223-1100:1.11
	I20051217-0925:1.9
	I20051208-2000:1.9
	I20051201-1800:1.9
	I20051124-2000:1.8
	M3_10:1.8
	I20051118-1245:1.8
	I20051111-1800:1.7
	I20051106-0900:1.6
	v20051030:1.6
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.27
date	2007.05.18.13.28.04;	author dstadnik;	state Exp;
branches;
next	1.26;
commitid	8a7464da9df4567;

1.26
date	2007.04.11.11.12.09;	author atikhomirov;	state Exp;
branches;
next	1.25;
commitid	2272461cc2884567;

1.25
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.24;
commitid	725b461c97d64567;

1.24
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.23;
commitid	444245f8090b4567;

1.23
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.22;
commitid	21cf45be38464567;

1.22
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2006.07.20.17.40.06;	author ashatalin;	state Exp;
branches;
next	1.20;

1.20
date	2006.07.07.11.58.56;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2006.06.07.13.52.17;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2006.06.07.09.29.00;	author dstadnik;	state Exp;
branches;
next	1.17;

1.17
date	2006.06.06.12.02.13;	author dstadnik;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.06.10.52.00;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2006.04.12.08.48.32;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.03.02.14.18.46;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.05.17.30.29;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.28.16.09.46;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.17.09.14.15;	author dstadnik;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.08.15.36.53;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.26.11.27.00;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.11.16.43.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.07.13.01.34;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.27
log
@[186339] Allow to specify custom notation styles in view factory
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.gmf.codegen.gmfgen.Behaviour;
import org.eclipse.gmf.codegen.gmfgen.ElementType;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.SharedBehaviour;
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
import org.eclipse.gmf.codegen.gmfgen.ViewmapLayoutType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Common Base</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getDiagramRunTimeClass <em>Diagram Run Time Class</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getVisualID <em>Visual ID</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getElementType <em>Element Type</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getEditPartClassName <em>Edit Part Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getItemSemanticEditPolicyClassName <em>Item Semantic Edit Policy Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getNotationViewFactoryClassName <em>Notation View Factory Class Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getViewmap <em>Viewmap</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getStyles <em>Styles</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getBehaviour <em>Behaviour</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#isSansDomain <em>Sans Domain</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class GenCommonBaseImpl extends EObjectImpl implements GenCommonBase {
	/**
	 * The cached value of the '{@@link #getDiagramRunTimeClass() <em>Diagram Run Time Class</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDiagramRunTimeClass()
	 * @@generated
	 * @@ordered
	 */
	protected GenClass diagramRunTimeClass;

	/**
	 * The default value of the '{@@link #getVisualID() <em>Visual ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getVisualID()
	 * @@generated
	 * @@ordered
	 */
	protected static final int VISUAL_ID_EDEFAULT = 0;

	/**
	 * The cached value of the '{@@link #getVisualID() <em>Visual ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getVisualID()
	 * @@generated
	 * @@ordered
	 */
	protected int visualID = VISUAL_ID_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getElementType() <em>Element Type</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getElementType()
	 * @@generated
	 * @@ordered
	 */
	protected ElementType elementType;

	/**
	 * The default value of the '{@@link #getEditPartClassName() <em>Edit Part Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPartClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String EDIT_PART_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getEditPartClassName() <em>Edit Part Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEditPartClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String editPartClassName = EDIT_PART_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getItemSemanticEditPolicyClassName() <em>Item Semantic Edit Policy Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getItemSemanticEditPolicyClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getItemSemanticEditPolicyClassName() <em>Item Semantic Edit Policy Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getItemSemanticEditPolicyClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String itemSemanticEditPolicyClassName = ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getNotationViewFactoryClassName() <em>Notation View Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNotationViewFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getNotationViewFactoryClassName() <em>Notation View Factory Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNotationViewFactoryClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String notationViewFactoryClassName = NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getViewmap() <em>Viewmap</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getViewmap()
	 * @@generated
	 * @@ordered
	 */
	protected Viewmap viewmap;

	/**
	 * The cached value of the '{@@link #getStyles() <em>Styles</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getStyles()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenClass> styles;

	/**
	 * The cached value of the '{@@link #getBehaviour() <em>Behaviour</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getBehaviour()
	 * @@generated
	 * @@ordered
	 */
	protected EList<Behaviour> behaviour;

	/**
	 * The default value of the '{@@link #isSansDomain() <em>Sans Domain</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isSansDomain()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean SANS_DOMAIN_EDEFAULT = false;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenCommonBaseImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenCommonBase();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenClass getDiagramRunTimeClass() {
		if (diagramRunTimeClass != null && diagramRunTimeClass.eIsProxy()) {
			InternalEObject oldDiagramRunTimeClass = (InternalEObject)diagramRunTimeClass;
			diagramRunTimeClass = (GenClass)eResolveProxy(oldDiagramRunTimeClass);
			if (diagramRunTimeClass != oldDiagramRunTimeClass) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS, oldDiagramRunTimeClass, diagramRunTimeClass));
			}
		}
		return diagramRunTimeClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenClass basicGetDiagramRunTimeClass() {
		return diagramRunTimeClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagramRunTimeClass(GenClass newDiagramRunTimeClass) {
		GenClass oldDiagramRunTimeClass = diagramRunTimeClass;
		diagramRunTimeClass = newDiagramRunTimeClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS, oldDiagramRunTimeClass, diagramRunTimeClass));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public int getVisualID() {
		return visualID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setVisualID(int newVisualID) {
		int oldVisualID = visualID;
		visualID = newVisualID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID, oldVisualID, visualID));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ElementType getElementType() {
		return elementType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetElementType(ElementType newElementType, NotificationChain msgs) {
		ElementType oldElementType = elementType;
		elementType = newElementType;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, oldElementType, newElementType);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setElementType(ElementType newElementType) {
		if (newElementType != elementType) {
			NotificationChain msgs = null;
			if (elementType != null)
				msgs = ((InternalEObject)elementType).eInverseRemove(this, GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT, ElementType.class, msgs);
			if (newElementType != null)
				msgs = ((InternalEObject)newElementType).eInverseAdd(this, GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT, ElementType.class, msgs);
			msgs = basicSetElementType(newElementType, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, newElementType, newElementType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getEditPartClassNameGen() {
		return editPartClassName;
	}

	public String getEditPartClassName() {
		return getValidClassName(getEditPartClassNameGen(), this, EDIT_PART_SUFFIX);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditPartClassName(String newEditPartClassName) {
		String oldEditPartClassName = editPartClassName;
		editPartClassName = newEditPartClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME, oldEditPartClassName, editPartClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getItemSemanticEditPolicyClassNameGen() {
		return itemSemanticEditPolicyClassName;
	}

	public String getItemSemanticEditPolicyClassName() {
		return getValidClassName(getItemSemanticEditPolicyClassNameGen(), this, ITEM_SEMANTIC_EDIT_POLICY_SUFFIX);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setItemSemanticEditPolicyClassName(String newItemSemanticEditPolicyClassName) {
		String oldItemSemanticEditPolicyClassName = itemSemanticEditPolicyClassName;
		itemSemanticEditPolicyClassName = newItemSemanticEditPolicyClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME, oldItemSemanticEditPolicyClassName, itemSemanticEditPolicyClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getNotationViewFactoryClassNameGen() {
		return notationViewFactoryClassName;
	}

	public String getNotationViewFactoryClassName() {
		return getValidClassName(getNotationViewFactoryClassNameGen(), this, NOTATION_VIEW_FACTORY_SUFFIX);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNotationViewFactoryClassName(String newNotationViewFactoryClassName) {
		String oldNotationViewFactoryClassName = notationViewFactoryClassName;
		notationViewFactoryClassName = newNotationViewFactoryClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME, oldNotationViewFactoryClassName, notationViewFactoryClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Viewmap getViewmap() {
		return viewmap;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetViewmap(Viewmap newViewmap, NotificationChain msgs) {
		Viewmap oldViewmap = viewmap;
		viewmap = newViewmap;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, oldViewmap, newViewmap);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setViewmap(Viewmap newViewmap) {
		if (newViewmap != viewmap) {
			NotificationChain msgs = null;
			if (viewmap != null)
				msgs = ((InternalEObject)viewmap).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, null, msgs);
			if (newViewmap != null)
				msgs = ((InternalEObject)newViewmap).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, null, msgs);
			msgs = basicSetViewmap(newViewmap, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__VIEWMAP, newViewmap, newViewmap));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenClass> getStyles() {
		if (styles == null) {
			styles = new EObjectResolvingEList<GenClass>(GenClass.class, this, GMFGenPackage.GEN_COMMON_BASE__STYLES);
		}
		return styles;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<Behaviour> getBehaviour() {
		if (behaviour == null) {
			behaviour = new EObjectContainmentWithInverseEList<Behaviour>(Behaviour.class, this, GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR, GMFGenPackage.BEHAVIOUR__SUBJECT);
		}
		return behaviour;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public abstract boolean isSansDomain();

	static boolean isEmpty(String s) {
		return s == null || s.trim().length() == 0;
	}

	static String getValidClassName(String s) {
		assert !isEmpty(s);
		s = CodeGenUtil.validJavaIdentifier(s);
		return Character.toUpperCase(s.charAt(0)) + s.substring(1);
	}

	static String getValidClassName(String s, GenCommonBase genElement, String suffixPart) {
		assert genElement != null;
		assert suffixPart != null;
		if (isEmpty(s)) {
			String prefixPart = genElement.getClassNamePrefix();
			if (isEmpty(prefixPart)) {
				prefixPart = DEFAULT_CLASS_NAME_PREFIX;
			}
			s = prefixPart + suffixPart;
		}
		return s;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public abstract String getClassNamePrefix();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public final String getClassNameSuffux() {
		return "";
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public final String getUniqueIdentifier() {
		String prefixPart = isEmpty(getClassNamePrefix()) ? DEFAULT_CLASS_NAME_PREFIX : getClassNamePrefix();
		return prefixPart + '_' + getVisualID();
	}

	/**
	 * @@generated NOT
	 */
	public ViewmapLayoutType getLayoutType() {
		Viewmap viewmap = getViewmap();
		return viewmap == null ? ViewmapLayoutType.UNKNOWN_LITERAL : viewmap.getLayoutType();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE:
				if (elementType != null)
					msgs = ((InternalEObject)elementType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, null, msgs);
				return basicSetElementType((ElementType)otherEnd, msgs);
			case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getBehaviour()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE:
				return basicSetElementType(null, msgs);
			case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP:
				return basicSetViewmap(null, msgs);
			case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR:
				return ((InternalEList<?>)getBehaviour()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE:
				return getElementType();
			case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP:
				return getViewmap();
			case GMFGenPackage.GEN_COMMON_BASE__STYLES:
				return getStyles();
			case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR:
				return getBehaviour();
			case GMFGenPackage.GEN_COMMON_BASE__SANS_DOMAIN:
				return isSansDomain() ? Boolean.TRUE : Boolean.FALSE;
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE:
				setElementType((ElementType)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__STYLES:
				getStyles().clear();
				getStyles().addAll((Collection<? extends GenClass>)newValue);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR:
				getBehaviour().clear();
				getBehaviour().addAll((Collection<? extends Behaviour>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE:
				setElementType((ElementType)null);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_COMMON_BASE__STYLES:
				getStyles().clear();
				return;
			case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR:
				getBehaviour().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMMON_BASE__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_COMMON_BASE__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE:
				return elementType != null;
			case GMFGenPackage.GEN_COMMON_BASE__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_COMMON_BASE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_COMMON_BASE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP:
				return viewmap != null;
			case GMFGenPackage.GEN_COMMON_BASE__STYLES:
				return styles != null && !styles.isEmpty();
			case GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR:
				return behaviour != null && !behaviour.isEmpty();
			case GMFGenPackage.GEN_COMMON_BASE__SANS_DOMAIN:
				return isSansDomain() != SANS_DOMAIN_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getEditPartQualifiedClassName() {
		return getDiagram().getEditPartsPackageName() + '.' + getEditPartClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getItemSemanticEditPolicyQualifiedClassName() {
		return getDiagram().getEditPoliciesPackageName() + '.' + getItemSemanticEditPolicyClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getNotationViewFactoryQualifiedClassName() {
		return getDiagram().getNotationViewFactoriesPackageName() + '.' + getNotationViewFactoryClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public abstract GenDiagram getDiagram();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (visualID: ");
		result.append(visualID);
		result.append(", editPartClassName: ");
		result.append(editPartClassName);
		result.append(", itemSemanticEditPolicyClassName: ");
		result.append(itemSemanticEditPolicyClassName);
		result.append(", notationViewFactoryClassName: ");
		result.append(notationViewFactoryClassName);
		result.append(')');
		return result.toString();
	}

	protected static String asJavaConstantName(String name) {
		name = name.toUpperCase();
		return CodeGenUtil.capName(CodeGenUtil.validJavaIdentifier(name));
	}

	public <T extends Behaviour> List<T> getBehaviour(Class<T> behaviourClass) {
		ArrayList<T> rv = new ArrayList<T>(getBehaviour().size());
		for (Iterator<Behaviour> it = getBehaviour().iterator(); it.hasNext(); ) {
			Object next = it.next();
			if (next instanceof SharedBehaviour) {
				next = ((SharedBehaviour) next).getDelegate();
			}
			if (behaviourClass.isInstance(next)) {
				@@SuppressWarnings("unchecked")
				T tt = (T) next;
				rv.add(tt);
			}
		}
		return rv;
	}
} //GenCommonBaseImpl
@


1.26
log
@local suppress
@
text
@d25 1
d51 1
d171 10
d444 12
d587 2
d627 4
d668 3
d700 2
@


1.25
log
@[181778] Generate standalone creation commands for reference based links
@
text
@a735 1
	@@SuppressWarnings("unchecked")
d738 1
a738 1
		for (Iterator it = getBehaviour().iterator(); it.hasNext(); ) {
d744 3
a746 1
				rv.add((T) next);
@


1.24
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d66 1
a66 1
	protected GenClass diagramRunTimeClass = null;
d96 1
a96 1
	protected ElementType elementType = null;
d166 1
a166 1
	protected Viewmap viewmap = null;
d176 1
a176 1
	protected EList<Behaviour> behaviour = null;
@


1.23
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@d176 1
a176 1
	protected EList behaviour = null;
d202 1
d432 1
a432 1
	public EList getBehaviour() {
d434 1
a434 1
			behaviour = new EObjectContainmentWithInverseEList(Behaviour.class, this, GMFGenPackage.GEN_COMMON_BASE__BEHAVIOUR, GMFGenPackage.BEHAVIOUR__SUBJECT);
d508 2
d517 1
a517 1
				return ((InternalEList)getBehaviour()).basicAdd(otherEnd, msgs);
d527 1
d535 1
a535 1
				return ((InternalEList)getBehaviour()).basicRemove(otherEnd, msgs);
d545 1
d576 2
d603 1
a603 1
				getBehaviour().addAll((Collection)newValue);
d614 1
d650 1
d714 1
@


1.22
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d51 1
d179 10
d438 7
d560 2
d660 2
@


1.21
log
@GenModel unit-tests added.
@
text
@d9 1
d11 2
d24 1
a24 1
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
d27 1
a27 1
import org.eclipse.gmf.codegen.gmfgen.CustomBehaviour;
d32 1
d50 1
a50 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getCustomBehaviour <em>Custom Behaviour</em>}</li>
d168 1
a168 1
	 * The cached value of the '{@@link #getCustomBehaviour() <em>Custom Behaviour</em>}' containment reference list.
d171 1
a171 1
	 * @@see #getCustomBehaviour()
d175 1
a175 1
	protected EList customBehaviour = null;
d420 3
a422 3
	public EList getCustomBehaviour() {
		if (customBehaviour == null) {
			customBehaviour = new EObjectContainmentEList(CustomBehaviour.class, this, GMFGenPackage.GEN_COMMON_BASE__CUSTOM_BEHAVIOUR);
d424 1
a424 1
		return customBehaviour;
d495 2
d512 2
a513 2
			case GMFGenPackage.GEN_COMMON_BASE__CUSTOM_BEHAVIOUR:
				return ((InternalEList)getCustomBehaviour()).basicRemove(otherEnd, msgs);
d540 2
a541 2
			case GMFGenPackage.GEN_COMMON_BASE__CUSTOM_BEHAVIOUR:
				return getCustomBehaviour();
d574 3
a576 3
			case GMFGenPackage.GEN_COMMON_BASE__CUSTOM_BEHAVIOUR:
				getCustomBehaviour().clear();
				getCustomBehaviour().addAll((Collection)newValue);
d610 2
a611 2
			case GMFGenPackage.GEN_COMMON_BASE__CUSTOM_BEHAVIOUR:
				getCustomBehaviour().clear();
d638 2
a639 2
			case GMFGenPackage.GEN_COMMON_BASE__CUSTOM_BEHAVIOUR:
				return customBehaviour != null && !customBehaviour.isEmpty();
d703 15
a717 1
	
@


1.20
log
@add custom behaviour
@
text
@d424 1
a424 1
		return s == null || s.length() == 0;
@


1.19
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@d9 2
d15 2
d21 4
d46 1
d164 10
d411 12
d506 2
d534 2
d568 4
d604 3
d632 2
@


1.18
log
@provide Node/Link/Label/Diagram class prefix instead of Unknown for elements without model facet; add extra empty values checks
@
text
@d396 7
a402 1
	static String getValidClassName(String className, GenCommonBase genElement, String suffixPart) {
d405 1
a405 1
		if (isEmpty(className)) {
d410 1
a410 1
			className = prefixPart + suffixPart;
d412 1
a412 1
		return className;
@


1.17
log
@refactor getUniqueIdentifier() : all GenCommonBase implementations use the same logic so move it in GenCommonBaseImpl
@
text
@d284 1
a284 5
		String value = getEditPartClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePrefix() + EDIT_PART_SUFFIX;
		}
		return value;
d309 1
a309 5
		String value = getItemSemanticEditPolicyClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePrefix() + ITEM_SEMANTIC_EDIT_POLICY_SUFFIX;
		}
		return value;
d334 1
a334 5
		String value = getNotationViewFactoryClassNameGen();
		if (isEmpty(value)) {
			value = getClassNamePrefix() + NOTATION_VIEW_FACTORY_SUFFIX;
		}
		return value;
d396 13
d431 2
a432 1
		return getClassNamePrefix() + '_' + getVisualID();
@


1.16
log
@#145502 deprecate getClassNameSuffix()
@
text
@d429 3
a431 1
	public abstract String getUniqueIdentifier();
@


1.15
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@d286 1
a286 1
			value = getClassNamePart() + EDIT_PART_SUFFIX;
d315 1
a315 1
			value = getClassNamePart() + ITEM_SEMANTIC_EDIT_POLICY_SUFFIX;
d344 1
a344 1
			value = getClassNamePart() + NOTATION_VIEW_FACTORY_SUFFIX;
d420 2
a421 9
	public abstract String getClassNameSuffux();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getClassNamePart() {
		return getClassNamePrefix() + getClassNameSuffux();
@


1.14
log
@#126200 register element types in xml
@
text
@d22 1
d439 8
@


1.13
log
@avoid hashcode in generated names
@
text
@d17 1
d32 1
d74 10
d235 43
d442 15
d459 2
d479 2
d506 3
d538 3
d568 2
@


1.12
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d10 1
d557 1
a557 15
		StringBuffer b = new StringBuffer();
		for (int i = 0; i < name.length(); i++) {
			char c = name.charAt(i);
			if (i == 0) {
				if (!Character.isJavaIdentifierStart(c)) {
					c = '_';
				}
			} else {
				if (!Character.isJavaIdentifierPart(c)) {
					c = '_';
				}
			}
			b.append(c);
		}
		return b.toString();
@


1.11
log
@#121888
One toolbar tool can create several elements.
@
text
@a11 1

a12 1
import org.eclipse.emf.ecore.EStructuralFeature;
a18 1

d165 2
a166 2
			GenClass oldDiagramRunTimeClass = diagramRunTimeClass;
			diagramRunTimeClass = (GenClass)eResolveProxy((InternalEObject)diagramRunTimeClass);
d386 4
a389 8
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_COMMON_BASE__VIEWMAP:
					return basicSetViewmap(null, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d391 1
a391 28
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getEditPartQualifiedClassName() {
		return getDiagram().getEditPartsPackageName() + '.' + getEditPartClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getItemSemanticEditPolicyQualifiedClassName() {
		return getDiagram().getEditPoliciesPackageName() + '.' + getItemSemanticEditPolicyClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getNotationViewFactoryQualifiedClassName() {
		return getDiagram().getNotationViewFactoriesPackageName() + '.' + getNotationViewFactoryClassName();
a396 7
	 * @@generated NOT
	 */
	public abstract GenDiagram getDiagram();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d399 2
a400 2
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d415 1
a415 1
		return eDynamicGet(eFeature, resolve);
d423 2
a424 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d444 1
a444 1
		eDynamicSet(eFeature, newValue);
d452 2
a453 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d473 1
a473 1
		eDynamicUnset(eFeature);
d481 2
a482 2
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d496 28
a523 1
		return eDynamicIsSet(eFeature);
d529 7
@


1.10
log
@#121581
Fields for the compartments are named unique.
@
text
@a386 24
	 * @@generated NOT
	 */
	public String asJavaConstantName(String name) {
		name = name.toUpperCase();
		StringBuffer b = new StringBuffer();
		for (int i = 0; i < name.length(); i++) {
			char c = name.charAt(i);
			if (i == 0) {
				if (!Character.isJavaIdentifierStart(c)) {
					c = '_';
				}
			} else {
				if (!Character.isJavaIdentifierPart(c)) {
					c = '_';
				}
			}
			b.append(c);
		}
		return b.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
d561 19
@


1.9
log
@#117749 & #118040 generate unique names for the shared elements in mapping model
@
text
@d387 24
@


1.8
log
@#116798 create distinct package for the view factories
@
text
@d231 2
a232 2
		if (value == null || value.length() == 0) {
			return getClassNamePrefix() + getClassNameSuffux() + "EditPart";
d260 2
a261 2
		if (value == null || value.length() == 0) {
			return getClassNamePrefix() + getClassNameSuffux() + "ItemSemanticEditPolicy";
d288 3
a290 3
		String name = getNotationViewFactoryClassNameGen();
		if (name == null || name.trim().length() == 0) {
			name = getClassNamePrefix() + "ViewFactory"; //$NON-NLS-1$
d292 1
a292 1
		return name;
d350 4
d373 9
@


1.7
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d412 1
a412 1
		return getDiagram().getProvidersPackageName() + '.' + getNotationViewFactoryClassName();
@


1.6
log
@[dstadnik] #113786 visual ID for compartments
greater range for ids, no default generated id
@
text
@d34 1
d94 20
d254 29
d402 9
d436 2
d462 3
d491 3
d517 2
d540 2
@


1.5
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d183 1
a183 1
	public int getVisualIDGen() {
a189 15
	 * @@generated NOT
	 */
	public int getVisualID() {
		int value = getVisualIDGen();
		// eIsSet
		if (value == VISUAL_ID_EDEFAULT) {
			// XXX breaking 'no changes on read' contract
			setVisualID(hashCode());
		}
		return getVisualIDGen();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
@


1.4
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d11 2
d22 2
d35 1
d113 10
d275 43
d339 17
d394 2
d419 3
d445 3
d467 2
@


1.3
log
@#111775 cleanup in gmfgen - unused attributes gone
@
text
@d276 7
@


1.2
log
@#111775 stale properties in gmfgen
#111784 GenChildContainer extends GenCommonBase
@
text
@d30 1
d88 20
d231 29
d285 9
d310 2
d332 3
d355 3
d375 2
d394 2
@


1.1
log
@*** empty log message ***
@
text
@a29 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCommonBaseImpl#getMetaInfoProviderClassName <em>Meta Info Provider Class Name</em>}</li>
a86 20
	 * The default value of the '{@@link #getMetaInfoProviderClassName() <em>Meta Info Provider Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMetaInfoProviderClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String META_INFO_PROVIDER_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getMetaInfoProviderClassName() <em>Meta Info Provider Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getMetaInfoProviderClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String metaInfoProviderClassName = META_INFO_PROVIDER_CLASS_NAME_EDEFAULT;

	/**
a209 38
	 * @@generated
	 */
	public String getMetaInfoProviderClassNameGen() {
		return metaInfoProviderClassName;
	}

	public String getMetaInfoProviderClassName() {
		String value = getMetaInfoProviderClassNameGen();
		if (value == null || value.length() == 0) {
			return getClassNamePrefix() + getClassNameSuffux() + "MetaInfoProvider";
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setMetaInfoProviderClassName(String newMetaInfoProviderClassName) {
		String oldMetaInfoProviderClassName = metaInfoProviderClassName;
		metaInfoProviderClassName = newMetaInfoProviderClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMMON_BASE__META_INFO_PROVIDER_CLASS_NAME, oldMetaInfoProviderClassName, metaInfoProviderClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getMetaInfoProviderQualifiedClassName() {
		return getDiagram().getEditProvidersPackageName() + '.' + getMetaInfoProviderClassName();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a250 2
			case GMFGenPackage.GEN_COMMON_BASE__META_INFO_PROVIDER_CLASS_NAME:
				return getMetaInfoProviderClassName();
a270 3
			case GMFGenPackage.GEN_COMMON_BASE__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName((String)newValue);
				return;
a290 3
			case GMFGenPackage.GEN_COMMON_BASE__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName(META_INFO_PROVIDER_CLASS_NAME_EDEFAULT);
				return;
a307 2
			case GMFGenPackage.GEN_COMMON_BASE__META_INFO_PROVIDER_CLASS_NAME:
				return META_INFO_PROVIDER_CLASS_NAME_EDEFAULT == null ? metaInfoProviderClassName != null : !META_INFO_PROVIDER_CLASS_NAME_EDEFAULT.equals(metaInfoProviderClassName);
a324 2
		result.append(", metaInfoProviderClassName: ");
		result.append(metaInfoProviderClassName);
@

