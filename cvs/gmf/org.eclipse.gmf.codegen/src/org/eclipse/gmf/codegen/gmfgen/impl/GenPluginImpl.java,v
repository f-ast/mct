head	1.20;
access;
symbols
	v20081022-1925:1.20
	v20081015-1925:1.20
	v20081008-1925:1.20
	v20081001-1925:1.20
	v20080930-1130:1.20
	v20080926-1245:1.20
	v20080924-1925:1.20
	v20080917-1925:1.20
	v20080911-1728:1.20
	v20080910-1520:1.20
	v20080903-1520:1.20
	v20080827-1520:1.20
	v20080813-1520:1.20
	v20080806-1520:1.20
	v20080722-1827:1.20
	v20080718-1731:1.20
	v20080716-1600:1.20
	v20080716-1642:1.20
	R2_1_maintenance:1.20.0.2
	Root_R2_1_maintenance:1.20
	R2_1_0:1.20
	v20080610-1132:1.20
	v20080603-1553:1.20
	v20080528-1052:1.20
	v20080521:1.20
	v20080516-1543:1.20
	v20080516-1143:1.20
	v20080512-1200:1.20
	v20080508-2000:1.20
	v20080507-1326:1.20
	v20080503-1740:1.20
	v20080501-1739:1.20
	v20080425-1959:1.20
	v20080417-1610:1.19
	v20080411-0411:1.19
	v20080404-1111:1.19
	v20080322-0000:1.19
	v20080222-1200:1.18
	v20080215-1500:1.18
	v20080207-0207:1.17
	v20071222-1111:1.18
	v20071214-1111:1.18
	v20071130-1111:1.18
	v20071124-0000:1.17
	v20071112-0000:1.18
	v20071108-0000:1.18
	v20071003-0000:1.18
	v20070928-0000:1.17
	v20070921-0000:1.17
	v20070915-0000:1.17
	v20070903-0000:1.18
	v20070809-0000:1.17
	R2_0_maintenance:1.17.0.2
	R2_0:1.17
	R4_20:1.17
	v20070621-0000:1.17
	RC3_20:1.17
	v20070614-1400:1.17
	v20070608-1300:1.17
	v20070605-1400:1.17
	v20070601-1400:1.17
	v20070525-1500:1.17
	v20070520-1200:1.16
	v20070518-1300:1.16
	v20070504-1000:1.16
	v20070427-0600:1.15
	v20070420-1000:1.15
	v20070413-1300:1.15
	v20070405-1100:1.15
	v20070403-1500:1.15
	v20070330-1300:1.15
	v20060330-1300:1.15
	v20070322-1100:1.15
	v20060316-0600:1.15
	v20070307-0700:1.14
	v20070301-1200:1.14
	v20070228-2000:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.12
	v20070103-0300:1.13
	M4_20:1.13
	v20061222-1800:1.13
	v20061218-1200:1.13
	v20061214-0000:1.13
	v20061120-1300:1.13
	M3_20:1.13
	v20061117-0800:1.13
	v20061027-1200:1.12
	v20061020-1000:1.12
	v20061013-1330:1.13
	v20060919-0800:1.12
	v20060907-1100:1.12
	M1_20:1.13
	v20060904-1500:1.13
	v20060824-1600:1.12
	v20060817-1500:1.12
	v20060728-0500:1.12
	v20060713-1700:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	v20060627-1200:1.12
	v20060626-1420:1.12
	v20060620-0400:1.12
	v20060616-1400:1.12
	v20060616-1200:1.12
	v20060609-1400:1.11
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.10
	v20060519-1300:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.7
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.5
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.1
	I20060202-1415:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.20
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	2e1d4808b3814567;

1.19
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.18;
commitid	5e5047cd7dd64567;

1.18
date	2007.08.08.11.08.36;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	45de46b9a4344567;

1.17
date	2007.05.22.17.27.35;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	694b465327fe4567;

1.16
date	2007.05.04.11.34.18;	author dstadnik;	state Exp;
branches;
next	1.15;
commitid	2c60463b1a394567;

1.15
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	444245f8090b4567;

1.14
date	2007.02.08.18.06.49;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	56b45cb66aa4567;

1.13
date	2006.07.20.17.40.06;	author ashatalin;	state Exp;
branches;
next	1.12;

1.12
date	2006.06.15.22.36.46;	author radvorak;	state Exp;
branches;
next	1.11;

1.11
date	2006.06.01.12.44.39;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.26.14.16.24;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.24.19.23.54;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.04.20.16.27.28;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.13.15.41.17;	author radvorak;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.21.12.34.42;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.14.18.46.22;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.08.14.14.20;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.26.13.36.43;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.20
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.Set;

import org.eclipse.emf.codegen.ecore.genmodel.GenModel;
import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EDataTypeUniqueEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
import org.eclipse.gmf.codegen.gmfgen.GenLanguage;
import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
import org.eclipse.gmf.codegen.gmfgen.Viewmap;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Plugin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getEditorGen <em>Editor Gen</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getID <em>ID</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getName <em>Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getProvider <em>Provider</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getVersion <em>Version</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#isPrintingEnabled <em>Printing Enabled</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getRequiredPlugins <em>Required Plugins</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getActivatorClassName <em>Activator Class Name</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenPluginImpl extends EObjectImpl implements GenPlugin {
	/**
	 * The default value of the '{@@link #getID() <em>ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getID()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getID() <em>ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getID()
	 * @@generated
	 * @@ordered
	 */
	protected String iD = ID_EDEFAULT;

	/**
	 * The default value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getName()
	 * @@generated
	 * @@ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #getProvider() <em>Provider</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getProvider()
	 * @@generated
	 * @@ordered
	 */
	protected static final String PROVIDER_EDEFAULT = "Sample Plugin Provider, Inc";

	/**
	 * The cached value of the '{@@link #getProvider() <em>Provider</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getProvider()
	 * @@generated
	 * @@ordered
	 */
	protected String provider = PROVIDER_EDEFAULT;

	/**
	 * The default value of the '{@@link #getVersion() <em>Version</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getVersion()
	 * @@generated
	 * @@ordered
	 */
	protected static final String VERSION_EDEFAULT = "1.0.0.qualifier";

	/**
	 * The cached value of the '{@@link #getVersion() <em>Version</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getVersion()
	 * @@generated
	 * @@ordered
	 */
	protected String version = VERSION_EDEFAULT;

	/**
	 * The default value of the '{@@link #isPrintingEnabled() <em>Printing Enabled</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isPrintingEnabled()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean PRINTING_ENABLED_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isPrintingEnabled() <em>Printing Enabled</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isPrintingEnabled()
	 * @@generated
	 * @@ordered
	 */
	protected boolean printingEnabled = PRINTING_ENABLED_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getRequiredPlugins() <em>Required Plugins</em>}' attribute list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getRequiredPlugins()
	 * @@generated
	 * @@ordered
	 */
	protected EList<String> requiredPlugins;

	/**
	 * The default value of the '{@@link #getActivatorClassName() <em>Activator Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getActivatorClassName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String ACTIVATOR_CLASS_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getActivatorClassName() <em>Activator Class Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getActivatorClassName()
	 * @@generated
	 * @@ordered
	 */
	protected String activatorClassName = ACTIVATOR_CLASS_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenPluginImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenPlugin();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenEditorGenerator getEditorGen() {
		if (eContainerFeatureID != GMFGenPackage.GEN_PLUGIN__EDITOR_GEN) return null;
		return (GenEditorGenerator)eContainer();
	}

	public String getID() {
		String value = getIDGen();
		if (GenCommonBaseImpl.isEmpty(value)) {
			String prefix = "design"; //$NON-NLS-1$
			if (getEditorGen().getDomainGenModel() != null) {
				prefix = getEditorGen().getDomainGenModel().getModelPluginID();
			}
			if (prefix == null) {
				prefix = ""; //$NON-NLS-1$
			} else if (prefix.endsWith(".model")) { //$NON-NLS-1$
				prefix = prefix.substring(0, prefix.length() - ".model".length()); //$NON-NLS-1$
			}
			return prefix + ".diagram"; //$NON-NLS-1$
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getIDGen() {
		return iD;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setID(String newID) {
		String oldID = iD;
		iD = newID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__ID, oldID, iD));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getNameGen() {
		return name;
	}

	/**
	 * @@generated NOT
	 */
	public String getName() {
		String result = getNameGen();
		if (GenCommonBaseImpl.isEmpty(result)){
			GenEditorGenerator generator = getEditorGen();
			if (generator != null){
				String prefix = "Diagram Editor";
				GenModel genModel = generator.getDomainGenModel();
				if (genModel != null){
					prefix = genModel.getModelName();
				}
				result = prefix + " Plugin";
			}
		}
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getProvider() {
		return provider;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setProvider(String newProvider) {
		String oldProvider = provider;
		provider = newProvider;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__PROVIDER, oldProvider, provider));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getVersion() {
		return version;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setVersion(String newVersion) {
		String oldVersion = version;
		version = newVersion;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__VERSION, oldVersion, version));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isPrintingEnabled() {
		return printingEnabled;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPrintingEnabled(boolean newPrintingEnabled) {
		boolean oldPrintingEnabled = printingEnabled;
		printingEnabled = newPrintingEnabled;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED, oldPrintingEnabled, printingEnabled));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<String> getRequiredPlugins() {
		if (requiredPlugins == null) {
			requiredPlugins = new EDataTypeUniqueEList<String>(String.class, this, GMFGenPackage.GEN_PLUGIN__REQUIRED_PLUGINS);
		}
		return requiredPlugins;
	}

	public String getActivatorClassName() {
		String value = getActivatorClassNameGen();
		if (GenCommonBaseImpl.isEmpty(value)) {
			// FIXME is it really required to have domainPackageCapName there?
			value = ((GenDiagramImpl) getDiagram()).getDomainPackageCapName() + "DiagramEditorPlugin";
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getActivatorClassNameGen() {
		return activatorClassName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setActivatorClassName(String newActivatorClassName) {
		String oldActivatorClassName = activatorClassName;
		activatorClassName = newActivatorClassName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME, oldActivatorClassName, activatorClassName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<String> getAllRequiredPlugins() {
		Collection<String> rv = new LinkedHashSet<String>(getRequiredPlugins());
		if (getEditorGen() != null) {
			final GenModel genModel = getEditorGen().getDomainGenModel();
			if (genModel != null) {
				rv.add(genModel.getModelPluginID());
				rv.add(genModel.getEditPluginID());
				for (Iterator<GenPackage> it = genModel.getAllUsedGenPackagesWithClassifiers().iterator(); it.hasNext();) {
					GenModel nextGenModel = it.next().getGenModel();
					if (nextGenModel.hasEditSupport()) {
						rv.add(nextGenModel.getModelPluginID());
						rv.add(nextGenModel.getEditPluginID());
					}
				}
			}
			rv.addAll(getExpressionsRequiredPluginIDs());
			rv.addAll(getValidationRequiredPluginIDs());
			rv.addAll(getMetricsRequiredPluginIDs());
			rv.addAll(getViewmapRequiredPluginIDs());
		}
		for (Iterator<String> it = rv.iterator(); it.hasNext();) {
			if (GenCommonBaseImpl.isEmpty(it.next())) {
				it.remove();
			}
		}
		return new BasicEList<String>(rv);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getActivatorQualifiedClassName() {
		return getEditorGen().getEditor().getPackageName() + '.' + getActivatorClassName();
	}

	private Set<String> getExpressionsRequiredPluginIDs() {
		if(getEditorGen().getExpressionProviders() != null) {
			for (GenExpressionProviderBase nextProvider : getEditorGen().getExpressionProviders().getProviders()) {
				if (nextProvider.getLanguage() == GenLanguage.OCL_LITERAL);
				return Collections.singleton("org.eclipse.ocl.ecore"); //$NON-NLS-1$
			}
		}
		return Collections.emptySet();
	}
	
	private Collection<String> getViewmapRequiredPluginIDs() {
		Collection<String> result = null;
		for (TreeIterator<EObject> contents = EcoreUtil.getAllContents(getDiagram().getAllNodes()); contents.hasNext();){
			EObject next = contents.next();
			if (next instanceof Viewmap && next.eIsSet(GMFGenPackage.eINSTANCE.getViewmap_RequiredPluginIDs())){
				if (result == null){
					result = new HashSet<String>();
				}
				result.addAll(((Viewmap)next).getRequiredPluginIDs());
				contents.prune();
			}
		}
		if (result == null) {
			return Collections.emptyList();
		}
		return result;
	}
	
	private Set<String> getValidationRequiredPluginIDs() {
		if(getDiagram().isValidationEnabled() || getEditorGen().hasAudits()) {
			HashSet<String> pluginIDs = new HashSet<String>();			
			pluginIDs.add("org.eclipse.emf.validation"); //$NON-NLS-1$
			
			if(getEditorGen().getAudits() != null) {
				collectGenPackagesRequiredPluginIDs(getEditorGen().getAudits().getTargetedModelPackages(), pluginIDs);
			}			
			return pluginIDs;
		}
		return Collections.emptySet();
	}
	
	private Set<String> getMetricsRequiredPluginIDs() {
		if(getEditorGen().getMetrics() != null) {
			HashSet<String> pluginIDs = new HashSet<String>();
			collectGenPackagesRequiredPluginIDs(getEditorGen().getMetrics().getAllTargetedModelPackages(), pluginIDs);
			return pluginIDs;
		}
		return Collections.emptySet();
	}	
	
	private void collectGenPackagesRequiredPluginIDs(Collection<GenPackage> genPackages, Set<String> pluginIDs) {
		for (GenPackage nextPackage : genPackages) {
			pluginIDs.add(nextPackage.getGenModel().getModelPluginID());
		}
	}	

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				return eBasicSetContainer(null, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_EDITOR_GENERATOR__PLUGIN, GenEditorGenerator.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				return getEditorGen();
			case GMFGenPackage.GEN_PLUGIN__ID:
				return getID();
			case GMFGenPackage.GEN_PLUGIN__NAME:
				return getName();
			case GMFGenPackage.GEN_PLUGIN__PROVIDER:
				return getProvider();
			case GMFGenPackage.GEN_PLUGIN__VERSION:
				return getVersion();
			case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED:
				return isPrintingEnabled() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_PLUGIN__REQUIRED_PLUGINS:
				return getRequiredPlugins();
			case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME:
				return getActivatorClassName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_PLUGIN__ID:
				setID((String)newValue);
				return;
			case GMFGenPackage.GEN_PLUGIN__NAME:
				setName((String)newValue);
				return;
			case GMFGenPackage.GEN_PLUGIN__PROVIDER:
				setProvider((String)newValue);
				return;
			case GMFGenPackage.GEN_PLUGIN__VERSION:
				setVersion((String)newValue);
				return;
			case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED:
				setPrintingEnabled(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_PLUGIN__REQUIRED_PLUGINS:
				getRequiredPlugins().clear();
				getRequiredPlugins().addAll((Collection<? extends String>)newValue);
				return;
			case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME:
				setActivatorClassName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_PLUGIN__ID:
				setID(ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_PLUGIN__NAME:
				setName(NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_PLUGIN__PROVIDER:
				setProvider(PROVIDER_EDEFAULT);
				return;
			case GMFGenPackage.GEN_PLUGIN__VERSION:
				setVersion(VERSION_EDEFAULT);
				return;
			case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED:
				setPrintingEnabled(PRINTING_ENABLED_EDEFAULT);
				return;
			case GMFGenPackage.GEN_PLUGIN__REQUIRED_PLUGINS:
				getRequiredPlugins().clear();
				return;
			case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME:
				setActivatorClassName(ACTIVATOR_CLASS_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				return getEditorGen() != null;
			case GMFGenPackage.GEN_PLUGIN__ID:
				return ID_EDEFAULT == null ? iD != null : !ID_EDEFAULT.equals(iD);
			case GMFGenPackage.GEN_PLUGIN__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case GMFGenPackage.GEN_PLUGIN__PROVIDER:
				return PROVIDER_EDEFAULT == null ? provider != null : !PROVIDER_EDEFAULT.equals(provider);
			case GMFGenPackage.GEN_PLUGIN__VERSION:
				return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
			case GMFGenPackage.GEN_PLUGIN__PRINTING_ENABLED:
				return printingEnabled != PRINTING_ENABLED_EDEFAULT;
			case GMFGenPackage.GEN_PLUGIN__REQUIRED_PLUGINS:
				return requiredPlugins != null && !requiredPlugins.isEmpty();
			case GMFGenPackage.GEN_PLUGIN__ACTIVATOR_CLASS_NAME:
				return ACTIVATOR_CLASS_NAME_EDEFAULT == null ? activatorClassName != null : !ACTIVATOR_CLASS_NAME_EDEFAULT.equals(activatorClassName);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (iD: ");
		result.append(iD);
		result.append(", name: ");
		result.append(name);
		result.append(", provider: ");
		result.append(provider);
		result.append(", version: ");
		result.append(version);
		result.append(", printingEnabled: ");
		result.append(printingEnabled);
		result.append(", requiredPlugins: ");
		result.append(requiredPlugins);
		result.append(", activatorClassName: ");
		result.append(activatorClassName);
		result.append(')');
		return result.toString();
	}

	private GenDiagram getDiagram() {
		return getEditorGen().getDiagram();
	}
} //GenPluginImpl
@


1.19
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a217 31
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetEditorGen(GenEditorGenerator newEditorGen, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newEditorGen, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setEditorGen(GenEditorGenerator newEditorGen) {
		if (newEditorGen != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_PLUGIN__EDITOR_GEN && newEditorGen != null)) {
			if (EcoreUtil.isAncestor(this, newEditorGen))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newEditorGen != null)
				msgs = ((InternalEObject)newEditorGen).eInverseAdd(this, GMFGenPackage.GEN_EDITOR_GENERATOR__PLUGIN, GenEditorGenerator.class, msgs);
			msgs = basicSetEditorGen(newEditorGen, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, newEditorGen, newEditorGen));
	}

d510 1
a510 1
				return basicSetEditorGen((GenEditorGenerator)otherEnd, msgs);
d524 1
a524 1
				return basicSetEditorGen(null, msgs);
a579 3
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)newValue);
				return;
a613 3
			case GMFGenPackage.GEN_PLUGIN__EDITOR_GEN:
				setEditorGen((GenEditorGenerator)null);
				return;
@


1.18
log
@skip .model suffix for diagram plugin
@
text
@d218 31
d541 1
a541 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
d555 1
a555 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_PLUGIN__EDITOR_GEN, msgs);
d611 3
d648 3
@


1.17
log
@[123240] clean gmfgen uses of required plugins
@
text
@d221 1
a221 1
			String prefix = "design";
d225 6
a230 1
			return prefix + ".diagram";
@


1.16
log
@rewrite manifest.mf in xpand
@
text
@d28 1
d34 1
d51 1
d160 10
d354 12
d401 2
a402 2
	public EList<String> getRequiredPluginIDs() {
		Collection<String> requiredPlugins = new LinkedHashSet<String>();
d406 2
a407 2
				requiredPlugins.add(genModel.getModelPluginID());
				requiredPlugins.add(genModel.getEditPluginID());
d411 2
a412 2
						requiredPlugins.add(nextGenModel.getModelPluginID());
						requiredPlugins.add(nextGenModel.getEditPluginID());
d416 4
d421 1
a421 5
		requiredPlugins.addAll(getExpressionsRequiredPluginIDs());
		requiredPlugins.addAll(getValidationRequiredPluginIDs());
		requiredPlugins.addAll(getMetricsRequiredPluginIDs());
		requiredPlugins.addAll(getViewmapRequiredPluginIDs());
		for (Iterator<String> it = requiredPlugins.iterator(); it.hasNext();) {
d426 1
a426 1
		return new BasicEList<String>(requiredPlugins);
a438 1
		Set<String> requiredIDs = new HashSet<String>();
d441 2
a442 1
				requiredIDs.addAll(nextProvider.getRequiredPluginIDs());
d445 1
a445 1
		return requiredIDs;
a447 3
	/**
	 * @@generated NOT
	 */
d558 2
d571 1
d590 4
d624 3
d654 2
d682 2
@


1.15
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d378 14
a391 1
		
@


1.14
log
@refactor GenAuditContainer: flatten hierarchy as it fits most for templates we write
@
text
@d190 1
d376 1
a376 1
	public EList getRequiredPluginIDs() {
d383 2
a384 3
		for (Iterator it = requiredPlugins.iterator(); it.hasNext();) {
			String next =  (String) it.next();
			if (GenCommonBaseImpl.isEmpty(next)) {
d388 1
a388 1
		return new BasicEList(requiredPlugins);
d403 1
a403 2
			for (Iterator it = getEditorGen().getExpressionProviders().getProviders().iterator(); it.hasNext();) {
				GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next();
d415 2
a416 2
		for (TreeIterator contents = EcoreUtil.getAllContents(getDiagram().getAllNodes()); contents.hasNext();){
			EObject next = (EObject) contents.next();
d464 1
d480 1
d494 1
d508 1
d534 1
d564 1
d594 1
d620 1
@


1.13
log
@GenModel unit-tests added.
@
text
@d376 1
a376 1
		Collection requiredPlugins = new LinkedHashSet();
d400 2
a401 2
	private Set getExpressionsRequiredPluginIDs() {
		Set requiredIDs = new HashSet();
d414 2
a415 2
	private Collection getViewmapRequiredPluginIDs() {
		Collection result = null;
d420 1
a420 1
					result = new HashSet();
d426 4
a429 1
		return result == null ? Collections.EMPTY_LIST : result;
d432 1
a432 1
	private Set getValidationRequiredPluginIDs() {
d434 1
a434 1
			HashSet pluginIDs = new HashSet();			
d438 1
a438 1
				collectGenPackagesRequiredPluginIDs(getEditorGen().getAudits().getAllTargetedModelPackages(), pluginIDs);
d442 1
a442 1
		return Collections.EMPTY_SET;
d445 1
a445 1
	private Set getMetricsRequiredPluginIDs() {
d447 1
a447 1
			HashSet pluginIDs = new HashSet();
d451 1
a451 1
		return Collections.EMPTY_SET;
d454 2
a455 3
	private void collectGenPackagesRequiredPluginIDs(Collection/*GenPackage*/ genPackages, Set/*String*/ pluginIDs) {
		for (Iterator it = genPackages.iterator(); it.hasNext();) {
			GenPackage nextPackage = (GenPackage) it.next();
@


1.12
log
@#147374 Audits and Metrics should collect required plugin IDs for external model packages
@
text
@d206 1
a206 1
		if (value == null || value.length() == 0) {
d251 1
a251 1
		if (result == null){
d342 1
a342 1
		if (value == null || value.trim().length() == 0) {
d384 1
a384 1
			if (next == null || next.trim().length() == 0) {
@


1.11
log
@[mgolubev] #144497 Preserve user-defined values for .gmfgen's dynamicTemplates, templateDirectory, creationWizardIconPath and iconPath options & #144304 Custom plugin name defined in gmfgen model is not retained on regeneration from gmfmap model
@
text
@d17 1
d380 1
d430 8
a437 2
		if(getDiagram().isValidationEnabled() || (getEditorGen().getAudits() != null && !getEditorGen().getAudits().getAllAuditRules().isEmpty())) {
			return Collections.singleton("org.eclipse.emf.validation"); //$NON-NLS-1$ 
d441 16
@


1.10
log
@#114175 allow to create diagram editor without domain model
@
text
@d16 1
d241 7
d249 13
a261 1
		return name;
@


1.9
log
@#142491 Errors in generated MANIFEST.MF
@
text
@d205 5
a209 1
			return getEditorGen().getDomainGenModel().getModelPluginID() + ".diagram";
@


1.8
log
@[mgolubev] #129362 Respect plug-in dependencies imposed on figure code - fix missing support for inner-class case
@
text
@d356 6
@


1.7
log
@[#134511] common access to expressions of different languages
@
text
@d20 1
d22 1
d26 1
d32 1
d355 1
d379 18
@


1.6
log
@plugin version attribute added to genmodel to help those forgeting to set .qualifier when bootstraping our own editors
@
text
@d27 1
a28 1
import org.eclipse.gmf.codegen.gmfgen.ValueExpression;
d365 4
a368 7
		for(Iterator it = getDiagram().eAllContents(); it.hasNext();) {
			Object nextObj = it.next();
			if(nextObj instanceof ValueExpression) {				
				String lang = ((ValueExpression)nextObj).getLanguage();
				if("ocl".equals(lang)) { //$NON-NLS-1$
					requiredIDs.add("org.eclipse.emf.query.ocl"); //$NON-NLS-1$
				}
a370 5
		
		if(getDiagram().hasLinkCreationConstraints()) {
			requiredIDs.add("org.eclipse.emf.ocl"); //$NON-NLS-1$			
			requiredIDs.add("org.eclipse.emf.query.ocl"); //$NON-NLS-1$			
		}
@


1.5
log
@[rdvorak] #127700 Rename genmodel::ModelElementSelector as a generic GenConstraint element
@
text
@d41 1
d111 20
d274 21
d445 2
d471 3
d500 3
d528 2
d553 2
@


1.4
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@a26 2
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
d28 1
a28 3
import org.eclipse.gmf.codegen.gmfgen.LinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;
d323 7
a329 8
		for (Iterator it = getDiagram().getAllNodes().iterator(); it.hasNext();) {
			GenNode nextNode = (GenNode) it.next();
			TypeModelFacet modelFacet = nextNode.getModelFacet();
			if(modelFacet.getModelElementInitializer() != null) {
				requiredIDs.addAll(modelFacet.getModelElementInitializer().getRequiredPluginIDs());
			}
			if(modelFacet.getModelElementSelector() != null) {
				requiredIDs.addAll(modelFacet.getModelElementSelector().getRequiredPluginIDs());				
a332 13
		for (Iterator it = getDiagram().getLinks().iterator(); it.hasNext();) {
			GenLink nextLink = (GenLink) it.next();
			LinkModelFacet modelFacet = nextLink.getModelFacet();
			if(modelFacet instanceof TypeLinkModelFacet) {
				TypeLinkModelFacet  typeModelFacet = (TypeLinkModelFacet)modelFacet;
				if(typeModelFacet.getModelElementInitializer() != null) {
					requiredIDs.addAll(typeModelFacet.getModelElementInitializer().getRequiredPluginIDs());
				}
				if(typeModelFacet.getModelElementSelector() != null) {
					requiredIDs.addAll(typeModelFacet.getModelElementSelector().getRequiredPluginIDs());
				}
			}
		}		
@


1.3
log
@make use of public packageNamePrefix
@
text
@d322 1
a322 1
		return getDiagram().getEditorPackageName() + '.' + getActivatorClassName();
@


1.2
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d184 1
a184 1
			return getEditorGen().getDomainGenModel().getModelPluginID() + '.' + GenDiagramImpl.DIAGRAM_EDITOR_TOKEN;
@


1.1
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@a17 1

a19 1

a21 1

a23 1

d26 1
d41 1
a41 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenPluginImpl#getDiagram <em>Diagram</em>}</li>
d176 3
a178 3
	public GenDiagram getDiagram() {
		if (eContainerFeatureID != GMFGenPackage.GEN_PLUGIN__DIAGRAM) return null;
		return (GenDiagram)eContainer();
d184 1
a184 1
			return getDiagram().getEMFGenModel().getModelPluginID() + '.' + GenDiagramImpl.DIAGRAM_EDITOR_TOKEN;
d276 1
d359 1
a359 1
		if(getDiagram().isValidationEnabled() || (getDiagram().getAudits() != null && !getDiagram().getAudits().getAllAuditRules().isEmpty())) {
d372 1
a372 1
			case GMFGenPackage.GEN_PLUGIN__DIAGRAM:
d375 1
a375 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_PLUGIN__DIAGRAM, msgs);
d387 2
a388 2
			case GMFGenPackage.GEN_PLUGIN__DIAGRAM:
				return eBasicSetContainer(null, GMFGenPackage.GEN_PLUGIN__DIAGRAM, msgs);
d400 2
a401 2
			case GMFGenPackage.GEN_PLUGIN__DIAGRAM:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__PLUGIN, GenDiagram.class, msgs);
d413 2
a414 2
			case GMFGenPackage.GEN_PLUGIN__DIAGRAM:
				return getDiagram();
d488 2
a489 2
			case GMFGenPackage.GEN_PLUGIN__DIAGRAM:
				return getDiagram() != null;
d527 3
@

