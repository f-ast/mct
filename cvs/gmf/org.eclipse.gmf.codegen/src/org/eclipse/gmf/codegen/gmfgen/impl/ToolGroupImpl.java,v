head	1.13;
access;
symbols
	v20081022-1925:1.13
	v20081015-1925:1.13
	v20081008-1925:1.13
	v20081001-1925:1.13
	v20080930-1130:1.13
	v20080926-1245:1.13
	v20080924-1925:1.13
	v20080917-1925:1.13
	v20080911-1728:1.13
	v20080910-1520:1.13
	v20080903-1520:1.13
	v20080827-1520:1.13
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20080722-1827:1.13
	v20080718-1731:1.13
	v20080716-1600:1.13
	v20080716-1642:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080528-1052:1.13
	v20080521:1.13
	v20080516-1543:1.13
	v20080516-1143:1.13
	v20080512-1200:1.13
	v20080508-2000:1.13
	v20080507-1326:1.13
	v20080503-1740:1.13
	v20080501-1739:1.13
	v20080425-1959:1.13
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.12
	v20080322-0000:1.12
	v20080222-1200:1.11
	v20080215-1500:1.11
	v20080207-0207:1.11
	v20071222-1111:1.11
	v20071214-1111:1.11
	v20071130-1111:1.11
	v20071124-0000:1.11
	v20071112-0000:1.11
	v20071108-0000:1.11
	v20071003-0000:1.11
	v20070928-0000:1.11
	v20070921-0000:1.11
	v20070915-0000:1.11
	v20070903-0000:1.11
	v20070809-0000:1.11
	R2_0_maintenance:1.11.0.2
	R2_0:1.11
	R4_20:1.11
	v20070621-0000:1.11
	RC3_20:1.11
	v20070614-1400:1.11
	v20070608-1300:1.11
	v20070605-1400:1.11
	v20070601-1400:1.11
	v20070525-1500:1.11
	v20070520-1200:1.11
	v20070518-1300:1.11
	v20070504-1000:1.11
	v20070427-0600:1.11
	v20070420-1000:1.11
	v20070413-1300:1.11
	v20070405-1100:1.10
	v20070403-1500:1.10
	v20070330-1300:1.10
	v20060330-1300:1.10
	v20070322-1100:1.10
	v20060316-0600:1.10
	v20070307-0700:1.9
	v20070301-1200:1.9
	v20070228-2000:1.9
	v20070221-1500:1.9
	v20070208-1800:1.9
	v20070202-0200:1.7
	v20070103-0300:1.9
	M4_20:1.9
	v20061222-1800:1.9
	v20061218-1200:1.9
	v20061214-0000:1.9
	v20061120-1300:1.8
	M3_20:1.8
	v20061117-0800:1.8
	v20061027-1200:1.7
	v20061020-1000:1.7
	v20061013-1330:1.7
	v20060919-0800:1.7
	v20060907-1100:1.7
	M1_20:1.7
	v20060904-1500:1.7
	v20060824-1600:1.7
	v20060817-1500:1.7
	v20060728-0500:1.7
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060620-0400:1.7
	v20060616-1400:1.7
	v20060616-1200:1.7
	v20060609-1400:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	v20060512-1000:1.7
	I20060512-1000:1.7
	I20060505-1400:1.7
	I20060428-1300:1.7
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.6
	I20060317-1200:1.6
	I20060316-1300:1.6
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.6
	I20060216-1945:1.6
	I20060210-1715:1.6
	I20060209-1815:1.6
	I20060203-0830:1.6
	I20060202-1415:1.6
	I20060129-1145:1.6
	I20060127-0900:1.6
	I20060120-1530:1.5
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.1
	I20051201-1800:1.1
	I20051124-2000:1.1
	M3_10:1.1
	I20051118-1245:1.1
	I20051111-1800:1.1
	I20051106-0900:1.1
	v20051030:1.1
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.12;
commitid	2e1d4808b3814567;

1.12
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.11;
commitid	5e5047cd7dd64567;

1.11
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.10;
commitid	725b461c97d64567;

1.10
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	444245f8090b4567;

1.9
date	2006.11.28.18.39.23;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	344b456c82534567;

1.8
date	2006.11.16.18.19.38;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	5260455cabba4567;

1.7
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.23.19.56.15;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.19.14.59.29;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.18.18.35.10;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.12.13.17.11.22;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.Palette;
import org.eclipse.gmf.codegen.gmfgen.ToolGroup;
import org.eclipse.gmf.codegen.gmfgen.ToolGroupItem;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tool Group</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getGroup <em>Group</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getPalette <em>Palette</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#isStack <em>Stack</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#isCollapse <em>Collapse</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getEntries <em>Entries</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#isToolsOnly <em>Tools Only</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class ToolGroupImpl extends EntryBaseImpl implements ToolGroup {
	/**
	 * The default value of the '{@@link #isStack() <em>Stack</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStack()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean STACK_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isStack() <em>Stack</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isStack()
	 * @@generated
	 * @@ordered
	 */
	protected boolean stack = STACK_EDEFAULT;

	/**
	 * The default value of the '{@@link #isCollapse() <em>Collapse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCollapse()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean COLLAPSE_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isCollapse() <em>Collapse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCollapse()
	 * @@generated
	 * @@ordered
	 */
	protected boolean collapse = COLLAPSE_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getEntries() <em>Entries</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getEntries()
	 * @@generated
	 * @@ordered
	 */
	protected EList<ToolGroupItem> entries;

	/**
	 * The default value of the '{@@link #isToolsOnly() <em>Tools Only</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isToolsOnly()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean TOOLS_ONLY_EDEFAULT = false;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ToolGroupImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getToolGroup();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public ToolGroup getGroup() {
		if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__GROUP) return null;
		return (ToolGroup)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public Palette getPaletteGen() {
		if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE) return null;
		return (Palette)eContainer();
	}

	public Palette getPalette() {
		Palette p = getPaletteGen();
		if (p != null) {
			return p;
		}
		return getGroup() == null ? null : getGroup().getPalette();
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetPalette(Palette newPalette, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newPalette, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPalette(Palette newPalette) {
		if (newPalette != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE && newPalette != null)) {
			if (EcoreUtil.isAncestor(this, newPalette))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newPalette != null)
				msgs = ((InternalEObject)newPalette).eInverseAdd(this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
			msgs = basicSetPalette(newPalette, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_GROUP__PALETTE, newPalette, newPalette));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<ToolGroupItem> getEntries() {
		if (entries == null) {
			entries = new EObjectContainmentWithInverseEList<ToolGroupItem>(ToolGroupItem.class, this, GMFGenPackage.TOOL_GROUP__ENTRIES, GMFGenPackage.TOOL_GROUP_ITEM__GROUP);
		}
		return entries;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean isToolsOnly() {
		for (Object element : getEntries()) {
			if (element instanceof ToolGroup) {
				return false;
			}
		}
		return true;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__GROUP:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetPalette((Palette)otherEnd, msgs);
			case GMFGenPackage.TOOL_GROUP__ENTRIES:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getEntries()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isStack() {
		return stack;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setStack(boolean newStack) {
		boolean oldStack = stack;
		stack = newStack;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_GROUP__STACK, oldStack, stack));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isCollapse() {
		return collapse;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCollapse(boolean newCollapse) {
		boolean oldCollapse = collapse;
		collapse = newCollapse;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_GROUP__COLLAPSE, oldCollapse, collapse));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__GROUP:
				return eBasicSetContainer(null, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return basicSetPalette(null, msgs);
			case GMFGenPackage.TOOL_GROUP__ENTRIES:
				return ((InternalEList<?>)getEntries()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.TOOL_GROUP__GROUP:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.TOOL_GROUP__ENTRIES, ToolGroup.class, msgs);
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__GROUP:
				return getGroup();
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return getPalette();
			case GMFGenPackage.TOOL_GROUP__STACK:
				return isStack() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.TOOL_GROUP__COLLAPSE:
				return isCollapse() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.TOOL_GROUP__ENTRIES:
				return getEntries();
			case GMFGenPackage.TOOL_GROUP__TOOLS_ONLY:
				return isToolsOnly() ? Boolean.TRUE : Boolean.FALSE;
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				setPalette((Palette)newValue);
				return;
			case GMFGenPackage.TOOL_GROUP__STACK:
				setStack(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.TOOL_GROUP__COLLAPSE:
				setCollapse(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.TOOL_GROUP__ENTRIES:
				getEntries().clear();
				getEntries().addAll((Collection<? extends ToolGroupItem>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				setPalette((Palette)null);
				return;
			case GMFGenPackage.TOOL_GROUP__STACK:
				setStack(STACK_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__COLLAPSE:
				setCollapse(COLLAPSE_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__ENTRIES:
				getEntries().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__GROUP:
				return getGroup() != null;
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return getPalette() != null;
			case GMFGenPackage.TOOL_GROUP__STACK:
				return stack != STACK_EDEFAULT;
			case GMFGenPackage.TOOL_GROUP__COLLAPSE:
				return collapse != COLLAPSE_EDEFAULT;
			case GMFGenPackage.TOOL_GROUP__ENTRIES:
				return entries != null && !entries.isEmpty();
			case GMFGenPackage.TOOL_GROUP__TOOLS_ONLY:
				return isToolsOnly() != TOOLS_ONLY_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass) {
		if (baseClass == ToolGroupItem.class) {
			switch (derivedFeatureID) {
				case GMFGenPackage.TOOL_GROUP__GROUP: return GMFGenPackage.TOOL_GROUP_ITEM__GROUP;
				default: return -1;
			}
		}
		return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass) {
		if (baseClass == ToolGroupItem.class) {
			switch (baseFeatureID) {
				case GMFGenPackage.TOOL_GROUP_ITEM__GROUP: return GMFGenPackage.TOOL_GROUP__GROUP;
				default: return -1;
			}
		}
		return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (stack: ");
		result.append(stack);
		result.append(", collapse: ");
		result.append(collapse);
		result.append(')');
		return result.toString();
	}

	public String getCreateMethodName() {
		if (getCreateMethodNameGen() != null) {
			return getCreateMethodNameGen();
		}
		return CodeGenUtil.validJavaIdentifier("create" + CodeGenUtil.capName(String.valueOf(getTitle())) + getEntryID() + "Group");
	}
} //ToolGroupImpl
@


1.12
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a138 31
	public NotificationChain basicSetGroup(ToolGroup newGroup, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newGroup, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGroup(ToolGroup newGroup) {
		if (newGroup != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__GROUP && newGroup != null)) {
			if (EcoreUtil.isAncestor(this, newGroup))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newGroup != null)
				msgs = ((InternalEObject)newGroup).eInverseAdd(this, GMFGenPackage.TOOL_GROUP__ENTRIES, ToolGroup.class, msgs);
			msgs = basicSetGroup(newGroup, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.TOOL_GROUP__GROUP, newGroup, newGroup));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d221 1
a221 1
				return basicSetGroup((ToolGroup)otherEnd, msgs);
d283 1
a283 1
				return basicSetGroup(null, msgs);
a340 3
			case GMFGenPackage.TOOL_GROUP__GROUP:
				setGroup((ToolGroup)newValue);
				return;
a365 3
			case GMFGenPackage.TOOL_GROUP__GROUP:
				setGroup((ToolGroup)null);
				return;
@


1.11
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d19 1
d139 31
d188 31
d252 1
a252 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
d256 1
a256 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
d314 1
a314 1
				return eBasicSetContainer(null, GMFGenPackage.TOOL_GROUP__GROUP, msgs);
d316 1
a316 1
				return eBasicSetContainer(null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
d372 6
d400 6
@


1.10
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d92 1
a92 1
	protected EList<ToolGroupItem> entries = null;
@


1.9
log
@heading towards xpand templates - need some attributes to be available in the model
@
text
@a9 1
import java.util.Iterator;
d92 1
a92 1
	protected EList entries = null;
d118 1
d156 1
a156 1
	public EList getEntries() {
d158 1
a158 1
			entries = new EObjectContainmentWithInverseEList(ToolGroupItem.class, this, GMFGenPackage.TOOL_GROUP__ENTRIES, GMFGenPackage.TOOL_GROUP_ITEM__GROUP);
d169 2
a170 2
		for (Iterator it = getEntries().iterator(); it.hasNext(); ) {
			if (it.next() instanceof ToolGroup) {
d182 2
d195 1
a195 1
				return ((InternalEList)getEntries()).basicAdd(otherEnd, msgs);
d247 1
d255 1
a255 1
				return ((InternalEList)getEntries()).basicRemove(otherEnd, msgs);
d265 1
d281 1
d305 2
d317 1
a317 1
				getEntries().addAll((Collection)newValue);
d328 1
d349 1
d373 2
a374 1
	public int eBaseStructuralFeatureID(int derivedFeatureID, Class baseClass) {
d389 2
a390 1
	public int eDerivedStructuralFeatureID(int baseFeatureID, Class baseClass) {
d405 1
@


1.8
log
@capitalise stem in method name
@
text
@d19 1
a19 1
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
d22 1
d33 2
d128 28
d158 1
a158 1
			entries = new EObjectContainmentEList(ToolGroupItem.class, this, GMFGenPackage.TOOL_GROUP__ENTRIES);
d182 21
d247 4
d262 15
d279 4
d343 4
d364 30
@


1.7
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d301 1
a301 1
		return CodeGenUtil.validJavaIdentifier("create" + getTitle() + getEntryID() + "Group");
@


1.6
log
@Produceing valid method names for all tools
@
text
@d10 1
d13 1
d18 2
a19 1
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
a21 3
import org.eclipse.gmf.codegen.gmfgen.LinkEntry;
import org.eclipse.gmf.codegen.gmfgen.NodeEntry;
import org.eclipse.gmf.codegen.gmfgen.Palette;
d23 1
d32 4
a35 3
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getNodeTools <em>Node Tools</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getLinkTools <em>Link Tools</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ToolGroupImpl#getPalette <em>Palette</em>}</li>
d43 1
a43 1
	 * The cached value of the '{@@link #getNodeTools() <em>Node Tools</em>}' containment reference list.
d46 1
a46 1
	 * @@see #getNodeTools()
d50 1
a50 1
	protected EList nodeTools = null;
d53 1
a53 1
	 * The cached value of the '{@@link #getLinkTools() <em>Link Tools</em>}' containment reference list.
d56 1
a56 1
	 * @@see #getLinkTools()
d60 41
a100 1
	protected EList linkTools = null;
d125 3
a127 3
	public EList getNodeTools() {
		if (nodeTools == null) {
			nodeTools = new EObjectContainmentWithInverseEList(NodeEntry.class, this, GMFGenPackage.TOOL_GROUP__NODE_TOOLS, GMFGenPackage.NODE_ENTRY__GROUP);
d129 15
a143 1
		return nodeTools;
d151 2
a152 5
	public EList getLinkTools() {
		if (linkTools == null) {
			linkTools = new EObjectContainmentWithInverseEList(LinkEntry.class, this, GMFGenPackage.TOOL_GROUP__LINK_TOOLS, GMFGenPackage.LINK_ENTRY__GROUP);
		}
		return linkTools;
d160 5
a164 3
	public Palette getPalette() {
		if (eContainerFeatureID != GMFGenPackage.TOOL_GROUP__PALETTE) return null;
		return (Palette)eContainer();
d172 2
a173 12
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
				return ((InternalEList)getNodeTools()).basicAdd(otherEnd, msgs);
			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
				return ((InternalEList)getLinkTools()).basicAdd(otherEnd, msgs);
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
d181 5
a185 10
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
				return ((InternalEList)getNodeTools()).basicRemove(otherEnd, msgs);
			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
				return ((InternalEList)getLinkTools()).basicRemove(otherEnd, msgs);
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return eBasicSetContainer(null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
d193 4
a196 4
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
d198 1
a198 1
		return super.eBasicRemoveFromContainerFeature(msgs);
d208 8
a215 6
			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
				return getNodeTools();
			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
				return getLinkTools();
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return getPalette();
d227 9
a235 7
			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
				getNodeTools().clear();
				getNodeTools().addAll((Collection)newValue);
				return;
			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
				getLinkTools().clear();
				getLinkTools().addAll((Collection)newValue);
d248 5
a252 2
			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
				getNodeTools().clear();
d254 2
a255 2
			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
				getLinkTools().clear();
d268 8
a275 6
			case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
				return nodeTools != null && !nodeTools.isEmpty();
			case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
				return linkTools != null && !linkTools.isEmpty();
			case GMFGenPackage.TOOL_GROUP__PALETTE:
				return getPalette() != null;
d280 17
d301 1
a301 1
		return CodeGenUtil.validJavaIdentifier("create" + getTitleKey() + getEntryID() + "Group");
@


1.5
log
@#124466
entryID attribute introduced to avoid duplicate names generation
@
text
@d11 1
d235 1
a235 1
		return "create" + getTitleKey() + getEntryID() + "Group";
@


1.4
log
@simplify naming strategy - it's sufficient to generate method names on the fly
@
text
@d234 1
a234 1
		return "create" + getTitleKey() + "Group";
@


1.3
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d230 6
@


1.2
log
@#120553
- Adding accessors for the palette entries factory methods into genmodel
- Refreshing unit-tests
- Fixing some old problems found by this refreshment.
@
text
@a13 1
import org.eclipse.emf.ecore.EStructuralFeature;
d108 1
a108 1
		return (Palette)eContainer;
d116 10
a125 14
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
					return ((InternalEList)getNodeTools()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
					return ((InternalEList)getLinkTools()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.TOOL_GROUP__PALETTE:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d127 1
a127 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d135 8
a142 12
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.TOOL_GROUP__NODE_TOOLS:
					return ((InternalEList)getNodeTools()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.TOOL_GROUP__LINK_TOOLS:
					return ((InternalEList)getLinkTools()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.TOOL_GROUP__PALETTE:
					return eBasicSetContainer(null, GMFGenPackage.TOOL_GROUP__PALETTE, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d144 1
a144 1
		return eBasicSetContainer(null, featureID, msgs);
d152 4
a155 8
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.TOOL_GROUP__PALETTE:
					return eContainer.eInverseRemove(this, GMFGenPackage.PALETTE__GROUPS, Palette.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d157 1
a157 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d165 2
a166 14
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_GROUP__ORDER:
				return new Integer(getOrder());
			case GMFGenPackage.TOOL_GROUP__TITLE_KEY:
				return getTitleKey();
			case GMFGenPackage.TOOL_GROUP__DESCRIPTION_KEY:
				return getDescriptionKey();
			case GMFGenPackage.TOOL_GROUP__LARGE_ICON_PATH:
				return getLargeIconPath();
			case GMFGenPackage.TOOL_GROUP__SMALL_ICON_PATH:
				return getSmallIconPath();
			case GMFGenPackage.TOOL_GROUP__CREATE_METHOD_NAME:
				return getCreateMethodName();
d174 1
a174 1
		return eDynamicGet(eFeature, resolve);
d182 2
a183 20
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_GROUP__ORDER:
				setOrder(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.TOOL_GROUP__TITLE_KEY:
				setTitleKey((String)newValue);
				return;
			case GMFGenPackage.TOOL_GROUP__DESCRIPTION_KEY:
				setDescriptionKey((String)newValue);
				return;
			case GMFGenPackage.TOOL_GROUP__LARGE_ICON_PATH:
				setLargeIconPath((String)newValue);
				return;
			case GMFGenPackage.TOOL_GROUP__SMALL_ICON_PATH:
				setSmallIconPath((String)newValue);
				return;
			case GMFGenPackage.TOOL_GROUP__CREATE_METHOD_NAME:
				setCreateMethodName((String)newValue);
				return;
d193 1
a193 1
		eDynamicSet(eFeature, newValue);
d201 2
a202 20
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_GROUP__ORDER:
				setOrder(ORDER_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__TITLE_KEY:
				setTitleKey(TITLE_KEY_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__DESCRIPTION_KEY:
				setDescriptionKey(DESCRIPTION_KEY_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__LARGE_ICON_PATH:
				setLargeIconPath(LARGE_ICON_PATH_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__SMALL_ICON_PATH:
				setSmallIconPath(SMALL_ICON_PATH_EDEFAULT);
				return;
			case GMFGenPackage.TOOL_GROUP__CREATE_METHOD_NAME:
				setCreateMethodName(CREATE_METHOD_NAME_EDEFAULT);
				return;
d210 1
a210 1
		eDynamicUnset(eFeature);
d218 2
a219 14
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.TOOL_GROUP__ORDER:
				return order != ORDER_EDEFAULT;
			case GMFGenPackage.TOOL_GROUP__TITLE_KEY:
				return TITLE_KEY_EDEFAULT == null ? titleKey != null : !TITLE_KEY_EDEFAULT.equals(titleKey);
			case GMFGenPackage.TOOL_GROUP__DESCRIPTION_KEY:
				return DESCRIPTION_KEY_EDEFAULT == null ? descriptionKey != null : !DESCRIPTION_KEY_EDEFAULT.equals(descriptionKey);
			case GMFGenPackage.TOOL_GROUP__LARGE_ICON_PATH:
				return LARGE_ICON_PATH_EDEFAULT == null ? largeIconPath != null : !LARGE_ICON_PATH_EDEFAULT.equals(largeIconPath);
			case GMFGenPackage.TOOL_GROUP__SMALL_ICON_PATH:
				return SMALL_ICON_PATH_EDEFAULT == null ? smallIconPath != null : !SMALL_ICON_PATH_EDEFAULT.equals(smallIconPath);
			case GMFGenPackage.TOOL_GROUP__CREATE_METHOD_NAME:
				return CREATE_METHOD_NAME_EDEFAULT == null ? createMethodName != null : !CREATE_METHOD_NAME_EDEFAULT.equals(createMethodName);
d227 1
a227 1
		return eDynamicIsSet(eFeature);
@


1.1
log
@*** empty log message ***
@
text
@d192 2
d226 3
d263 3
d293 2
@

