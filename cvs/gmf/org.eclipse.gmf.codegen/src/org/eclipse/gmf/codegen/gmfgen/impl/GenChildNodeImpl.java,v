head	1.33;
access;
symbols
	v20081022-1925:1.33
	v20081015-1925:1.33
	v20081008-1925:1.33
	v20081001-1925:1.33
	v20080930-1130:1.33
	v20080926-1245:1.33
	v20080924-1925:1.33
	v20080917-1925:1.33
	v20080911-1728:1.33
	v20080910-1520:1.33
	v20080903-1520:1.33
	v20080827-1520:1.33
	v20080813-1520:1.33
	v20080806-1520:1.33
	v20080722-1827:1.33
	v20080718-1731:1.33
	v20080716-1600:1.33
	v20080716-1642:1.33
	R2_1_maintenance:1.33.0.2
	Root_R2_1_maintenance:1.33
	R2_1_0:1.33
	v20080610-1132:1.33
	v20080603-1553:1.33
	v20080528-1052:1.33
	v20080521:1.33
	v20080516-1543:1.33
	v20080516-1143:1.33
	v20080512-1200:1.33
	v20080508-2000:1.33
	v20080507-1326:1.33
	v20080503-1740:1.33
	v20080501-1739:1.33
	v20080425-1959:1.33
	v20080417-1610:1.32
	v20080411-0411:1.32
	v20080404-1111:1.32
	v20080322-0000:1.32
	v20080222-1200:1.31
	v20080215-1500:1.31
	v20080207-0207:1.31
	v20071222-1111:1.31
	v20071214-1111:1.31
	v20071130-1111:1.31
	v20071124-0000:1.31
	v20071112-0000:1.31
	v20071108-0000:1.31
	v20071003-0000:1.31
	v20070928-0000:1.31
	v20070921-0000:1.31
	v20070915-0000:1.31
	v20070903-0000:1.31
	v20070809-0000:1.31
	R2_0_maintenance:1.31.0.2
	R2_0:1.31
	R4_20:1.31
	v20070621-0000:1.31
	RC3_20:1.31
	v20070614-1400:1.31
	v20070608-1300:1.31
	v20070605-1400:1.31
	v20070601-1400:1.31
	v20070525-1500:1.31
	v20070520-1200:1.31
	v20070518-1300:1.31
	v20070504-1000:1.31
	v20070427-0600:1.31
	v20070420-1000:1.31
	v20070413-1300:1.31
	v20070405-1100:1.30
	v20070403-1500:1.30
	v20070330-1300:1.30
	v20060330-1300:1.30
	v20070322-1100:1.30
	v20060316-0600:1.30
	v20070307-0700:1.29
	v20070301-1200:1.29
	v20070228-2000:1.29
	v20070221-1500:1.29
	v20070208-1800:1.29
	v20070202-0200:1.29
	v20070103-0300:1.29
	M4_20:1.29
	v20061222-1800:1.29
	v20061218-1200:1.29
	v20061214-0000:1.29
	v20061120-1300:1.29
	M3_20:1.29
	v20061117-0800:1.29
	v20061027-1200:1.29
	v20061020-1000:1.29
	v20061013-1330:1.29
	v20060919-0800:1.29
	v20060907-1100:1.29
	M1_20:1.29
	v20060904-1500:1.29
	v20060824-1600:1.29
	v20060817-1500:1.29
	v20060728-0500:1.29
	v20060713-1700:1.29
	R1_0_maintenance:1.29.0.2
	R1_0:1.29
	v20060627-1200:1.29
	v20060626-1420:1.29
	v20060620-0400:1.29
	v20060616-1400:1.29
	v20060616-1200:1.29
	v20060609-1400:1.29
	v20060531-1730:1.27
	v20060530-1930:1.27
	v20060526-1200:1.27
	v20060519-1300:1.27
	v20060519-0800:1.27
	v20060512-1000:1.27
	I20060512-1000:1.27
	I20060505-1400:1.26
	I20060428-1300:1.26
	I20060424-0500:1.25
	I20060424-0300:1.25
	M6_10:1.25
	I20060407-1200:1.25
	I20060331-1000:1.25
	I20060324-0300:1.25
	I20060317-1300:1.25
	I20060317-1200:1.25
	I20060316-1300:1.25
	I20060309-1300:1.25
	M5_10:1.25
	S20060303-1600:1.25
	I20060227-1730:1.25
	I20060216-1945:1.25
	I20060210-1715:1.24
	I20060209-1815:1.24
	I20060203-0830:1.24
	I20060202-1415:1.24
	I20060129-1145:1.24
	I20060127-0900:1.24
	I20060120-1530:1.24
	I20060113-1700:1.22
	M4_10:1.22
	I20060107-1100:1.22
	I20060105-1630:1.22
	I20051230-1230:1.21
	I20051223-1100:1.21
	I20051217-0925:1.21
	I20051208-2000:1.21
	I20051201-1800:1.21
	I20051124-2000:1.21
	M3_10:1.18
	I20051118-1245:1.18
	I20051111-1800:1.17
	I20051106-0900:1.16
	v20051030:1.16
	v20050828:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.33
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.32;
commitid	2e1d4808b3814567;

1.32
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.31;
commitid	5e5047cd7dd64567;

1.31
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.30;
commitid	725b461c97d64567;

1.30
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.29;
commitid	444245f8090b4567;

1.29
date	2006.06.06.14.43.47;	author radvorak;	state Exp;
branches;
next	1.28;

1.28
date	2006.06.06.10.52.00;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2006.04.26.07.39.20;	author dstadnik;	state Exp;
branches;
next	1.25;

1.25
date	2006.02.14.20.12.32;	author atikhomirov;	state Exp;
branches;
next	1.24;

1.24
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.23;

1.23
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.22;

1.22
date	2006.01.05.17.30.29;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.24.08.51.27;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.18.13.55.33;	author ashatalin;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.08.15.36.53;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.26.17.33.09;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.24.13.32.02;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.11.16.43.53;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.11.12.25.35;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.07.13.01.34;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.04.13.36.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.04.13.18.07;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.03.19.09.14;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.33
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.util.EObjectWithInverseResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Child Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildNodeImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildNodeImpl#getContainers <em>Containers</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenChildNodeImpl extends GenNodeImpl implements GenChildNode {
	/**
	 * The cached value of the '{@@link #getContainers() <em>Containers</em>}' reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getContainers()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenChildContainer> containers;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenChildNodeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenChildNode();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagram getDiagram() {
		if (eContainerFeatureID != GMFGenPackage.GEN_CHILD_NODE__DIAGRAM) return null;
		return (GenDiagram)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenChildContainer> getContainers() {
		if (containers == null) {
			containers = new EObjectWithInverseResolvingEList.ManyInverse<GenChildContainer>(GenChildContainer.class, this, GMFGenPackage.GEN_CHILD_NODE__CONTAINERS, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES);
		}
		return containers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getContainers()).basicAdd(otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS:
				return ((InternalEList<?>)getContainers()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__CHILD_NODES, GenDiagram.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				return getDiagram();
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS:
				return getContainers();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				return getDiagram() != null;
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINERS:
				return containers != null && !containers.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //GenChildNodeImpl
@


1.32
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a8 1
import org.eclipse.emf.common.notify.Notification;
a12 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
a13 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a78 31
	public NotificationChain basicSetDiagram(GenDiagram newDiagram, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newDiagram, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagram(GenDiagram newDiagram) {
		if (newDiagram != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_CHILD_NODE__DIAGRAM && newDiagram != null)) {
			if (EcoreUtil.isAncestor(this, newDiagram))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newDiagram != null)
				msgs = ((InternalEObject)newDiagram).eInverseAdd(this, GMFGenPackage.GEN_DIAGRAM__CHILD_NODES, GenDiagram.class, msgs);
			msgs = basicSetDiagram(newDiagram, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, newDiagram, newDiagram));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d98 1
a98 1
				return basicSetDiagram((GenDiagram)otherEnd, msgs);
d114 1
a114 1
				return basicSetDiagram(null, msgs);
a156 30
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				setDiagram((GenDiagram)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				setDiagram((GenDiagram)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
@


1.31
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d9 1
d14 1
d16 1
d82 31
d132 1
a132 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
d148 1
a148 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
d191 30
@


1.30
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d43 1
a43 1
	protected EList<GenChildContainer> containers = null;
@


1.29
log
@Re-generated with EMF RC6a
@
text
@d43 1
a43 1
	protected EList containers = null;
d59 1
d79 1
a79 1
	public EList getContainers() {
d81 1
a81 1
			containers = new EObjectWithInverseResolvingEList.ManyInverse(GenChildContainer.class, this, GMFGenPackage.GEN_CHILD_NODE__CONTAINERS, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES);
d91 2
d100 1
a100 1
				return ((InternalEList)getContainers()).basicAdd(otherEnd, msgs);
d110 1
d116 1
a116 1
				return ((InternalEList)getContainers()).basicRemove(otherEnd, msgs);
d126 1
d140 1
d156 1
@


1.28
log
@#145502 deprecate getClassNameSuffix()
@
text
@d159 1
@


1.27
log
@#133836 Creating a child node without a label causes error
@
text
@a158 4

	public String getClassNameSuffux() {
		return "ChildNode";
	}
@


1.26
log
@simplify list container entry check
@
text
@a159 12
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public boolean isListContainerEntry() {
		if (getContainers().size() > 0) {
			return ((GenChildContainer) getContainers().get(0)).isListLayout();
		}
		return false;
	}

@


1.25
log
@organized imports
@
text
@d160 12
@


1.24
log
@#124413
Cleaning up the gmfgen model
@
text
@a9 1

a10 1

a11 1

a12 1

a14 1

a17 1

@


1.23
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@a165 7
	public boolean isListContainerEntry() {
		if (getContainers().size() > 0) {
			return ((GenChildContainer) getContainers().get(0)).isListLayout();
		}
		return false;
	}

@


1.22
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d10 3
d14 1
d16 4
a19 2
import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;
import org.eclipse.gmf.codegen.gmfgen.CompartmentPlacementKind;
d23 1
a23 1
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
a24 1
import org.eclipse.gmf.codegen.gmfgen.GenNode;
d33 2
a34 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildNodeImpl#getContainer <em>Container</em>}</li>
d42 10
d74 3
a76 3
	public GenChildContainer getContainer() {
		if (eContainerFeatureID != GMFGenPackage.GEN_CHILD_NODE__CONTAINER) return null;
		return (GenChildContainer)eContainer();
d82 1
a82 1
	 * @@generated NOT
d84 3
a86 6
	public boolean isListContainerEntry() {
		if (getContainer() instanceof GenNode) {
			return ((GenNode) getContainer()).getChildContainersPlacement() == CompartmentPlacementKind.TOOLBAR_LITERAL;
		}
		if (getContainer() instanceof GenCompartment) {
			return ((GenCompartment) getContainer()).getLayoutKind() == CompartmentLayoutKind.TOOLBAR_LITERAL;
d88 1
a88 1
		return false;
d98 1
a98 1
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
d101 3
a103 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_NODE__CONTAINER, msgs);
d115 4
a118 2
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
				return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_NODE__CONTAINER, msgs);
d130 2
a131 2
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES, GenChildContainer.class, msgs);
d143 4
a146 2
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
				return getContainer();
d158 4
a161 2
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
				return getContainer() != null;
d166 5
a170 2
	public GenDiagram getDiagram() {
		return getContainer().getDiagram();
@


1.21
log
@#112318 Do not overwrite paintFigure() method in node edit part when specific figure class is specified
@
text
@a8 3
import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
a10 1
import org.eclipse.emf.ecore.EStructuralFeature;
a11 1
import org.eclipse.emf.ecore.util.InternalEList;
a19 2
import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
d60 1
a60 1
		return (GenChildContainer)eContainer;
d83 6
a88 20
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__LABELS:
					return ((InternalEList)getLabels()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
					return ((InternalEList)getCompartments()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_NODE__CONTAINER, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d90 1
a90 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d98 4
a101 20
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
					return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_NODE__DIAGRAM, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
					return basicSetModelFacet(null, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__LABELS:
					return ((InternalEList)getLabels()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
					return ((InternalEList)getCompartments()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
					return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_NODE__CONTAINER, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d103 1
a103 1
		return eBasicSetContainer(null, featureID, msgs);
d111 4
a114 10
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__NODES, GenDiagram.class, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__CONTAINER:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_CHILD_CONTAINER__CHILD_NODES, GenChildContainer.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d116 1
a116 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d124 2
a125 33
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_CHILD_NODE__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_CHILD_NODE__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_CHILD_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
				return getViewmap();
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				return getChildNodes();
			case GMFGenPackage.GEN_CHILD_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return getCanonicalEditPolicyClassName();
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				return getDiagram();
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				return getModelFacet();
			case GMFGenPackage.GEN_CHILD_NODE__LABELS:
				return getLabels();
			case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
				return getCompartments();
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS_PLACEMENT:
				return getChildContainersPlacement();
			case GMFGenPackage.GEN_CHILD_NODE__EXPLICIT_CONTENT_PANE:
				return isExplicitContentPane() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_CHILD_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				return getGraphicalNodeEditPolicyClassName();
d129 1
a129 110
		return eDynamicGet(eFeature, resolve);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_CHILD_NODE__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__LABELS:
				getLabels().clear();
				getLabels().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
				getCompartments().clear();
				getCompartments().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement((CompartmentPlacementKind)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__EXPLICIT_CONTENT_PANE:
				setExplicitContentPane(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_CHILD_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				setGraphicalNodeEditPolicyClassName((String)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				getChildNodes().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName(CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__LABELS:
				getLabels().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
				getCompartments().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement(CHILD_CONTAINERS_PLACEMENT_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__EXPLICIT_CONTENT_PANE:
				setExplicitContentPane(EXPLICIT_CONTENT_PANE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				setGraphicalNodeEditPolicyClassName(GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
d137 2
a138 32
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_CHILD_NODE__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_NODE__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_CHILD_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
				return viewmap != null;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
			case GMFGenPackage.GEN_CHILD_NODE__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : !CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(canonicalEditPolicyClassName);
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM:
				return getDiagram() != null;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				return modelFacet != null;
			case GMFGenPackage.GEN_CHILD_NODE__LABELS:
				return labels != null && !labels.isEmpty();
			case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
				return compartments != null && !compartments.isEmpty();
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS_PLACEMENT:
				return childContainersPlacement != CHILD_CONTAINERS_PLACEMENT_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_NODE__EXPLICIT_CONTENT_PANE:
				return explicitContentPane != EXPLICIT_CONTENT_PANE_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_NODE__GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME:
				return GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? graphicalNodeEditPolicyClassName != null : !GRAPHICAL_NODE_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(graphicalNodeEditPolicyClassName);
d142 1
a142 1
		return eDynamicIsSet(eFeature);
@


1.20
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d198 2
d254 3
d307 3
d350 2
@


1.19
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d186 2
d235 3
d287 3
d330 2
@


1.18
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d196 2
d209 97
d332 2
@


1.17
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d17 1
d22 1
d24 1
d73 15
a206 91
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_CHILD_NODE__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__LABELS:
				getLabels().clear();
				getLabels().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
				getCompartments().clear();
				getCompartments().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement((CompartmentPlacementKind)newValue);
				return;
		}
		eDynamicSet(eFeature, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_CHILD_NODE__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				getChildNodes().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__LABELS:
				getLabels().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__COMPARTMENTS:
				getCompartments().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS_PLACEMENT:
				setChildContainersPlacement(CHILD_CONTAINERS_PLACEMENT_EDEFAULT);
				return;
		}
		eDynamicUnset(eFeature);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.16
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d160 2
d200 3
d247 3
d288 2
@


1.15
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@a11 1
import org.eclipse.emf.common.notify.Notification;
a15 1
import org.eclipse.emf.ecore.impl.ENotificationImpl;
d19 1
a21 1
import org.eclipse.gmf.codegen.gmfgen.GenNode;
d32 1
a32 2
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildNodeImpl#getGroupID <em>Group ID</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildNodeImpl#getParentNode <em>Parent Node</em>}</li>
a39 20
	 * The default value of the '{@@link #getGroupID() <em>Group ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupID()
	 * @@generated
	 * @@ordered
	 */
	protected static final String GROUP_ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getGroupID() <em>Group ID</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getGroupID()
	 * @@generated
	 * @@ordered
	 */
	protected String groupID = GROUP_ID_EDEFAULT;

	/**
d62 3
a64 24
	public String getGroupID() {
		return groupID;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setGroupID(String newGroupID) {
		String oldGroupID = groupID;
		groupID = newGroupID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_NODE__GROUP_ID, oldGroupID, groupID));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNode getParentNode() {
		if (eContainerFeatureID != GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE) return null;
		return (GenNode)eContainer;
d75 2
d83 3
a85 5
				case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS:
					return ((InternalEList)getChildContainers()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE:
d88 1
a88 1
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE, msgs);
d108 2
d116 4
a119 6
				case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS:
					return ((InternalEList)getChildContainers()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE:
					return eBasicSetContainer(null, GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE, msgs);
d137 2
a138 2
				case GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_NODE__CHILD_NODES, GenNode.class, msgs);
d164 2
d172 2
a173 4
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS:
				return getChildContainers();
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				return getChildNodes();
d176 2
a177 4
			case GMFGenPackage.GEN_CHILD_NODE__GROUP_ID:
				return getGroupID();
			case GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE:
				return getParentNode();
d204 4
d215 3
a217 7
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS:
				getChildContainers().clear();
				getChildContainers().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
a221 3
			case GMFGenPackage.GEN_CHILD_NODE__GROUP_ID:
				setGroupID((String)newValue);
				return;
d248 3
d257 2
a258 5
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS:
				getChildContainers().clear();
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				getChildNodes().clear();
a262 3
			case GMFGenPackage.GEN_CHILD_NODE__GROUP_ID:
				setGroupID(GROUP_ID_EDEFAULT);
				return;
d284 2
d292 2
a293 4
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_CONTAINERS:
				return childContainers != null && !childContainers.isEmpty();
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
d296 2
a297 4
			case GMFGenPackage.GEN_CHILD_NODE__GROUP_ID:
				return GROUP_ID_EDEFAULT == null ? groupID != null : !GROUP_ID_EDEFAULT.equals(groupID);
			case GMFGenPackage.GEN_CHILD_NODE__PARENT_NODE:
				return getParentNode() != null;
a301 15
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (groupID: ");
		result.append(groupID);
		result.append(')');
		return result.toString();
	}

d303 1
a303 1
		return getParentNode().getDiagram();
@


1.14
log
@#113823 childMetaFeature moved to TypeModelFacet
@
text
@a22 1
import org.eclipse.gmf.codegen.gmfgen.GenElementInitializer;
a23 1
import org.eclipse.gmf.codegen.gmfgen.ModelElementSelector;
a118 4
				case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER:
					if (modelElementInitializer != null)
						msgs = ((InternalEObject)modelElementInitializer).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER, null, msgs);
					return basicSetModelElementInitializer((GenElementInitializer)otherEnd, msgs);
a151 4
				case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_SELECTOR:
					return basicSetModelElementSelector(null, msgs);
				case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER:
					return basicSetModelElementInitializer(null, msgs);
a207 4
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_SELECTOR:
				return getModelElementSelector();
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER:
				return getModelElementInitializer();
a249 6
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_SELECTOR:
				setModelElementSelector((ModelElementSelector)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER:
				setModelElementInitializer((GenElementInitializer)newValue);
				return;
a296 6
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_SELECTOR:
				setModelElementSelector((ModelElementSelector)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER:
				setModelElementInitializer((GenElementInitializer)null);
				return;
a335 4
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_SELECTOR:
				return modelElementSelector != null;
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_ELEMENT_INITIALIZER:
				return modelElementInitializer != null;
@


1.13
log
@#112196 model facets in use for GenNode
@
text
@a11 1
import org.eclipse.emf.codegen.ecore.genmodel.GenFeature;
a37 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenChildNodeImpl#getChildMetaFeature <em>Child Meta Feature</em>}</li>
a64 10
	 * The cached value of the '{@@link #getChildMetaFeature() <em>Child Meta Feature</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildMetaFeature()
	 * @@generated
	 * @@ordered
	 */
	protected GenFeature childMetaFeature = null;

	/**
a117 38
	public GenFeature getChildMetaFeature() {
		if (childMetaFeature != null && childMetaFeature.eIsProxy()) {
			GenFeature oldChildMetaFeature = childMetaFeature;
			childMetaFeature = (GenFeature)eResolveProxy((InternalEObject)childMetaFeature);
			if (childMetaFeature != oldChildMetaFeature) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_CHILD_NODE__CHILD_META_FEATURE, oldChildMetaFeature, childMetaFeature));
			}
		}
		return childMetaFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenFeature basicGetChildMetaFeature() {
		return childMetaFeature;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setChildMetaFeature(GenFeature newChildMetaFeature) {
		GenFeature oldChildMetaFeature = childMetaFeature;
		childMetaFeature = newChildMetaFeature;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_CHILD_NODE__CHILD_META_FEATURE, oldChildMetaFeature, childMetaFeature));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a237 3
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_META_FEATURE:
				if (resolve) return getChildMetaFeature();
				return basicGetChildMetaFeature();
a290 3
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_META_FEATURE:
				setChildMetaFeature((GenFeature)newValue);
				return;
a340 3
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_META_FEATURE:
				setChildMetaFeature((GenFeature)null);
				return;
a381 2
			case GMFGenPackage.GEN_CHILD_NODE__CHILD_META_FEATURE:
				return childMetaFeature != null;
@


1.12
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@d214 2
a221 2
				case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
					return basicSetModelFacet(null, msgs);
d274 2
a275 3
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_META_CLASS:
				if (resolve) return getDomainMetaClass();
				return basicGetDomainMetaClass();
a283 2
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				return getModelFacet();
d323 2
a324 2
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_META_CLASS:
				setDomainMetaClass((GenClass)newValue);
a340 3
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)newValue);
				return;
d379 2
a380 2
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_META_CLASS:
				setDomainMetaClass((GenClass)null);
a393 3
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				setModelFacet((TypeModelFacet)null);
				return;
d427 2
a428 2
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_META_CLASS:
				return domainMetaClass != null;
a436 2
			case GMFGenPackage.GEN_CHILD_NODE__MODEL_FACET:
				return modelFacet != null;
@


1.11
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d27 1
d179 2
d214 2
d220 2
a265 6
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_NAME_FEATURE:
				if (resolve) return getDomainNameFeature();
				return basicGetDomainNameFeature();
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINMENT_META_FEATURE:
				if (resolve) return getContainmentMetaFeature();
				return basicGetContainmentMetaFeature();
d277 2
d285 2
a316 6
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_NAME_FEATURE:
				setDomainNameFeature((GenFeature)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINMENT_META_FEATURE:
				setContainmentMetaFeature((GenFeature)newValue);
				return;
d329 4
d344 3
a375 6
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_NAME_FEATURE:
				setDomainNameFeature((GenFeature)null);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINMENT_META_FEATURE:
				setContainmentMetaFeature((GenFeature)null);
				return;
d388 3
d400 3
a427 4
			case GMFGenPackage.GEN_CHILD_NODE__DOMAIN_NAME_FEATURE:
				return domainNameFeature != null;
			case GMFGenPackage.GEN_CHILD_NODE__CONTAINMENT_META_FEATURE:
				return containmentMetaFeature != null;
d438 2
d446 2
@


1.10
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d24 1
d170 4
d207 2
d269 2
d324 3
d382 3
d430 2
@


1.9
log
@#111775 cleanup in gmfgen - unused attributes gone
@
text
@d25 1
d200 2
d260 2
d312 3
d367 3
d413 2
@


1.8
log
@#112191 colors as Viewmap's Attributes
@
text
@d247 2
a254 2
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
d295 3
a303 3
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
d347 3
a355 3
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
d394 2
a399 2
			case GMFGenPackage.GEN_CHILD_NODE__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
@


1.7
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@a249 2
			case GMFGenPackage.GEN_CHILD_NODE__FOREGROUND_COLOR:
				return getForegroundColor();
a261 2
			case GMFGenPackage.GEN_CHILD_NODE__BACKGROUND_COLOR:
				return getBackgroundColor();
a297 3
			case GMFGenPackage.GEN_CHILD_NODE__FOREGROUND_COLOR:
				setForegroundColor((String)newValue);
				return;
a309 3
			case GMFGenPackage.GEN_CHILD_NODE__BACKGROUND_COLOR:
				setBackgroundColor((String)newValue);
				return;
a349 3
			case GMFGenPackage.GEN_CHILD_NODE__FOREGROUND_COLOR:
				setForegroundColor(FOREGROUND_COLOR_EDEFAULT);
				return;
a361 3
			case GMFGenPackage.GEN_CHILD_NODE__BACKGROUND_COLOR:
				setBackgroundColor(BACKGROUND_COLOR_EDEFAULT);
				return;
a395 2
			case GMFGenPackage.GEN_CHILD_NODE__FOREGROUND_COLOR:
				return FOREGROUND_COLOR_EDEFAULT == null ? foregroundColor != null : !FOREGROUND_COLOR_EDEFAULT.equals(foregroundColor);
a405 2
			case GMFGenPackage.GEN_CHILD_NODE__BACKGROUND_COLOR:
				return BACKGROUND_COLOR_EDEFAULT == null ? backgroundColor != null : !BACKGROUND_COLOR_EDEFAULT.equals(backgroundColor);
@


1.6
log
@#111775 stale properties in gmfgen
#111784 GenChildContainer extends GenCommonBase
@
text
@d172 2
@


1.5
log
@removed unused property 'affixedStereotypes'
@
text
@a244 2
			case GMFGenPackage.GEN_CHILD_NODE__META_INFO_PROVIDER_CLASS_NAME:
				return getMetaInfoProviderClassName();
a296 3
			case GMFGenPackage.GEN_CHILD_NODE__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName((String)newValue);
				return;
a354 3
			case GMFGenPackage.GEN_CHILD_NODE__META_INFO_PROVIDER_CLASS_NAME:
				setMetaInfoProviderClassName(META_INFO_PROVIDER_CLASS_NAME_EDEFAULT);
				return;
a407 2
			case GMFGenPackage.GEN_CHILD_NODE__META_INFO_PROVIDER_CLASS_NAME:
				return META_INFO_PROVIDER_CLASS_NAME_EDEFAULT == null ? metaInfoProviderClassName != null : !META_INFO_PROVIDER_CLASS_NAME_EDEFAULT.equals(metaInfoProviderClassName);
@


1.4
log
@gmfgen ECore references were replaced with GenModel references to ease template coding and as alignment with overall "genmodel for GMF" concept
@
text
@a263 2
			case GMFGenPackage.GEN_CHILD_NODE__AFFIXED_STEREOTYPES:
				return getAffixedStereotypes();
a319 4
			case GMFGenPackage.GEN_CHILD_NODE__AFFIXED_STEREOTYPES:
				getAffixedStereotypes().clear();
				getAffixedStereotypes().addAll((Collection)newValue);
				return;
a380 3
			case GMFGenPackage.GEN_CHILD_NODE__AFFIXED_STEREOTYPES:
				getAffixedStereotypes().clear();
				return;
a431 2
			case GMFGenPackage.GEN_CHILD_NODE__AFFIXED_STEREOTYPES:
				return affixedStereotypes != null && !affixedStereotypes.isEmpty();
@


1.3
log
@figure class could be specified in .gmfgen along with dependent attributes. Notion of "Viewmap" captures that (visualization) information
@
text
@d12 1
a14 1
import org.eclipse.emf.ecore.EAttribute;
a15 1
import org.eclipse.emf.ecore.EReference;
a24 1

d71 1
a71 1
	protected EReference childMetaFeature = null;
d127 1
a127 1
	public EReference getChildMetaFeature() {
d129 2
a130 2
			EReference oldChildMetaFeature = childMetaFeature;
			childMetaFeature = (EReference)eResolveProxy((InternalEObject)childMetaFeature);
d144 1
a144 1
	public EReference basicGetChildMetaFeature() {
d153 2
a154 2
	public void setChildMetaFeature(EReference newChildMetaFeature) {
		EReference oldChildMetaFeature = childMetaFeature;
d305 1
a305 1
				setDomainNameFeature((EAttribute)newValue);
d311 1
a311 1
				setContainmentMetaFeature((EReference)newValue);
d320 1
a320 1
				setDomainMetaClass((EClass)newValue);
d344 1
a344 1
				setChildMetaFeature((EReference)newValue);
d370 1
a370 1
				setDomainNameFeature((EAttribute)null);
d376 1
a376 1
				setContainmentMetaFeature((EReference)null);
d385 1
a385 1
				setDomainMetaClass((EClass)null);
d406 1
a406 1
				setChildMetaFeature((EReference)null);
@


1.2
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d27 2
d197 2
d259 2
a265 6
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_URI:
				return getViewmapURI();
			case GMFGenPackage.GEN_CHILD_NODE__NODE_VISUALIZATION_KIND:
				return new Integer(getNodeVisualizationKind());
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_CLASS:
				return getViewmapClass();
d318 3
a323 9
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_URI:
				setViewmapURI((String)newValue);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__NODE_VISUALIZATION_KIND:
				setNodeVisualizationKind(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_CLASS:
				setViewmapClass((String)newValue);
				return;
d383 3
a388 9
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_URI:
				setViewmapURI(VIEWMAP_URI_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__NODE_VISUALIZATION_KIND:
				setNodeVisualizationKind(NODE_VISUALIZATION_KIND_EDEFAULT);
				return;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_CLASS:
				setViewmapClass(VIEWMAP_CLASS_EDEFAULT);
				return;
d437 2
a442 6
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_URI:
				return VIEWMAP_URI_EDEFAULT == null ? viewmapURI != null : !VIEWMAP_URI_EDEFAULT.equals(viewmapURI);
			case GMFGenPackage.GEN_CHILD_NODE__NODE_VISUALIZATION_KIND:
				return nodeVisualizationKind != NODE_VISUALIZATION_KIND_EDEFAULT;
			case GMFGenPackage.GEN_CHILD_NODE__VIEWMAP_CLASS:
				return VIEWMAP_CLASS_EDEFAULT == null ? viewmapClass != null : !VIEWMAP_CLASS_EDEFAULT.equals(viewmapClass);
@


1.1
log
@*** empty log message ***
@
text
@d253 2
d315 3
d386 3
d447 2
@

