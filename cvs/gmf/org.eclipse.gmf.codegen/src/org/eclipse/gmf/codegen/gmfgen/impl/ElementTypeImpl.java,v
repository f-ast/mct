head	1.8;
access;
symbols
	v20081022-1925:1.8
	v20081015-1925:1.8
	v20081008-1925:1.8
	v20081001-1925:1.8
	v20080930-1130:1.8
	v20080926-1245:1.8
	v20080924-1925:1.8
	v20080917-1925:1.8
	v20080911-1728:1.8
	v20080910-1520:1.8
	v20080903-1520:1.8
	v20080827-1520:1.8
	v20080813-1520:1.8
	v20080806-1520:1.8
	v20080722-1827:1.8
	v20080718-1731:1.8
	v20080716-1600:1.8
	v20080716-1642:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080528-1052:1.8
	v20080521:1.8
	v20080516-1543:1.8
	v20080516-1143:1.8
	v20080512-1200:1.8
	v20080508-2000:1.8
	v20080507-1326:1.8
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080411-0411:1.8
	v20080404-1111:1.8
	v20080322-0000:1.8
	v20080222-1200:1.8
	v20080215-1500:1.8
	v20080207-0207:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070928-0000:1.8
	v20070921-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070614-1400:1.8
	v20070608-1300:1.8
	v20070605-1400:1.8
	v20070601-1400:1.8
	v20070525-1500:1.8
	v20070520-1200:1.8
	v20070518-1300:1.8
	v20070504-1000:1.8
	v20070427-0600:1.8
	v20070420-1000:1.8
	v20070413-1300:1.8
	v20070405-1100:1.8
	v20070403-1500:1.8
	v20070330-1300:1.8
	v20060330-1300:1.8
	v20070322-1100:1.8
	v20060316-0600:1.8
	v20070307-0700:1.7
	v20070301-1200:1.7
	v20070228-2000:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.3
	v20070103-0300:1.7
	M4_20:1.7
	v20061222-1800:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	v20061120-1300:1.7
	M3_20:1.7
	v20061117-0800:1.7
	v20061027-1200:1.3
	v20061020-1000:1.3
	v20061013-1330:1.7
	v20060919-0800:1.3
	v20060907-1100:1.3
	M1_20:1.5
	v20060904-1500:1.5
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060728-0500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060620-0400:1.3
	v20060616-1400:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.2
	v20060519-0800:1.2
	v20060512-1000:1.2
	I20060512-1000:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.8
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	444245f8090b4567;

1.7
date	2006.10.03.16.47.11;	author ashatalin;	state Exp;
branches;
next	1.6;

1.6
date	2006.09.26.16.15.10;	author dstadnik;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.28.13.06.03;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.20.17.40.06;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.22.10.02.14;	author dstadnik;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.19.19.42.26;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;

import org.eclipse.emf.ecore.util.EcoreUtil;

import org.eclipse.gmf.codegen.gmfgen.ElementType;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.LinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Element Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ElementTypeImpl#getDiagramElement <em>Diagram Element</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ElementTypeImpl#getUniqueIdentifier <em>Unique Identifier</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ElementTypeImpl#getDisplayName <em>Display Name</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.ElementTypeImpl#isDefinedExternally <em>Defined Externally</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public abstract class ElementTypeImpl extends EObjectImpl implements ElementType {
	/**
	 * The default value of the '{@@link #getUniqueIdentifier() <em>Unique Identifier</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUniqueIdentifier()
	 * @@generated
	 * @@ordered
	 */
	protected static final String UNIQUE_IDENTIFIER_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getUniqueIdentifier() <em>Unique Identifier</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getUniqueIdentifier()
	 * @@generated
	 * @@ordered
	 */
	protected String uniqueIdentifier = UNIQUE_IDENTIFIER_EDEFAULT;

	/**
	 * The default value of the '{@@link #getDisplayName() <em>Display Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDisplayName()
	 * @@generated
	 * @@ordered
	 */
	protected static final String DISPLAY_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getDisplayName() <em>Display Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getDisplayName()
	 * @@generated
	 * @@ordered
	 */
	protected String displayName = DISPLAY_NAME_EDEFAULT;

	/**
	 * The default value of the '{@@link #isDefinedExternally() <em>Defined Externally</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isDefinedExternally()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean DEFINED_EXTERNALLY_EDEFAULT = false;

	/**
	 * The cached value of the '{@@link #isDefinedExternally() <em>Defined Externally</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isDefinedExternally()
	 * @@generated
	 * @@ordered
	 */
	protected boolean definedExternally = DEFINED_EXTERNALLY_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected ElementTypeImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getElementType();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase getDiagramElement() {
		if (eContainerFeatureID != GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT) return null;
		return (GenCommonBase)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetDiagramElement(GenCommonBase newDiagramElement, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newDiagramElement, GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagramElement(GenCommonBase newDiagramElement) {
		if (newDiagramElement != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT && newDiagramElement != null)) {
			if (EcoreUtil.isAncestor(this, newDiagramElement))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newDiagramElement != null)
				msgs = ((InternalEObject)newDiagramElement).eInverseAdd(this, GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, GenCommonBase.class, msgs);
			msgs = basicSetDiagramElement(newDiagramElement, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT, newDiagramElement, newDiagramElement));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getUniqueIdentifierGen() {
		return uniqueIdentifier;
	}

	public String getUniqueIdentifier() {
		String value = getUniqueIdentifierGen();
		if (GenCommonBaseImpl.isEmpty(value)) {
			value = getDiagramElement().getDiagram().getEditorGen().getPlugin().getID() + '.' + getDiagramElement().getUniqueIdentifier();
		}
		return value;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setUniqueIdentifier(String newUniqueIdentifier) {
		String oldUniqueIdentifier = uniqueIdentifier;
		uniqueIdentifier = newUniqueIdentifier;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.ELEMENT_TYPE__UNIQUE_IDENTIFIER, oldUniqueIdentifier, uniqueIdentifier));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getDisplayNameGen() {
		return displayName;
	}

	public String getDisplayName() {
		if (!GenCommonBaseImpl.isEmpty(getDisplayNameGen())) {
			return getDisplayNameGen();
		}
		if (getDiagramElement() instanceof GenNode) {
			GenClass type = ((GenNode) getDiagramElement()).getDomainMetaClass();
			if (type != null) {
				return type.getName();
			}
		} else if (getDiagramElement() instanceof GenLink) {
			LinkModelFacet mf = ((GenLink) getDiagramElement()).getModelFacet();
			if (mf instanceof TypeLinkModelFacet) {
				GenClass type = ((TypeLinkModelFacet) mf).getMetaClass();
				if (type != null) {
					return type.getName();
				}
			}
		}
		return "Undefined";
		// for more details see https://bugs.eclipse.org/bugs/show_bug.cgi?id=157512
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDisplayName(String newDisplayName) {
		String oldDisplayName = displayName;
		displayName = newDisplayName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.ELEMENT_TYPE__DISPLAY_NAME, oldDisplayName, displayName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isDefinedExternally() {
		return definedExternally;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDefinedExternally(boolean newDefinedExternally) {
		boolean oldDefinedExternally = definedExternally;
		definedExternally = newDefinedExternally;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.ELEMENT_TYPE__DEFINED_EXTERNALLY, oldDefinedExternally, definedExternally));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetDiagramElement((GenCommonBase)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				return basicSetDiagramElement(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_COMMON_BASE__ELEMENT_TYPE, GenCommonBase.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				return getDiagramElement();
			case GMFGenPackage.ELEMENT_TYPE__UNIQUE_IDENTIFIER:
				return getUniqueIdentifier();
			case GMFGenPackage.ELEMENT_TYPE__DISPLAY_NAME:
				return getDisplayName();
			case GMFGenPackage.ELEMENT_TYPE__DEFINED_EXTERNALLY:
				return isDefinedExternally() ? Boolean.TRUE : Boolean.FALSE;
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				setDiagramElement((GenCommonBase)newValue);
				return;
			case GMFGenPackage.ELEMENT_TYPE__UNIQUE_IDENTIFIER:
				setUniqueIdentifier((String)newValue);
				return;
			case GMFGenPackage.ELEMENT_TYPE__DISPLAY_NAME:
				setDisplayName((String)newValue);
				return;
			case GMFGenPackage.ELEMENT_TYPE__DEFINED_EXTERNALLY:
				setDefinedExternally(((Boolean)newValue).booleanValue());
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				setDiagramElement((GenCommonBase)null);
				return;
			case GMFGenPackage.ELEMENT_TYPE__UNIQUE_IDENTIFIER:
				setUniqueIdentifier(UNIQUE_IDENTIFIER_EDEFAULT);
				return;
			case GMFGenPackage.ELEMENT_TYPE__DISPLAY_NAME:
				setDisplayName(DISPLAY_NAME_EDEFAULT);
				return;
			case GMFGenPackage.ELEMENT_TYPE__DEFINED_EXTERNALLY:
				setDefinedExternally(DEFINED_EXTERNALLY_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.ELEMENT_TYPE__DIAGRAM_ELEMENT:
				return getDiagramElement() != null;
			case GMFGenPackage.ELEMENT_TYPE__UNIQUE_IDENTIFIER:
				return UNIQUE_IDENTIFIER_EDEFAULT == null ? uniqueIdentifier != null : !UNIQUE_IDENTIFIER_EDEFAULT.equals(uniqueIdentifier);
			case GMFGenPackage.ELEMENT_TYPE__DISPLAY_NAME:
				return DISPLAY_NAME_EDEFAULT == null ? displayName != null : !DISPLAY_NAME_EDEFAULT.equals(displayName);
			case GMFGenPackage.ELEMENT_TYPE__DEFINED_EXTERNALLY:
				return definedExternally != DEFINED_EXTERNALLY_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (uniqueIdentifier: ");
		result.append(uniqueIdentifier);
		result.append(", displayName: ");
		result.append(displayName);
		result.append(", definedExternally: ");
		result.append(definedExternally);
		result.append(')');
		return result.toString();
	}

} //ElementTypeImpl@


1.7
log
@Removing unnecessary imports.
@
text
@d120 1
d264 1
d280 1
d294 1
d308 1
d328 1
d352 1
d376 1
d396 1
@


1.6
log
@#157512 Use distinct labels in popup menu when element is being created by tool defined to create many elements
@
text
@a8 2
import java.util.Iterator;

a26 2
import org.eclipse.gmf.codegen.gmfgen.Palette;
import org.eclipse.gmf.codegen.gmfgen.ToolEntry;
@


1.5
log
@[155258] mgolubev - reconcile attributes of ElementType
@
text
@d11 1
d26 3
d31 1
d211 11
a221 11
		// Let element type label be the name of the corresponding creation tool.
		final Palette palette = getDiagramElement().getDiagram().getPalette();
		if (palette == null) {
			return null;
		}
		for (Iterator elements = palette.eAllContents(); elements.hasNext(); ) {
			Object next = elements.next();
			if (next instanceof ToolEntry) {
				ToolEntry toolEntry = (ToolEntry) next;
				if (toolEntry.getElements().contains(getDiagramElement())) {
					return toolEntry.getTitle();
d225 2
a226 1
		return null;
@


1.4
log
@GenModel unit-tests added.
@
text
@d203 1
a203 1
		if (GenCommonBaseImpl.isEmpty(getDisplayNameGen())) {
@


1.3
log
@#139021 Generated code should register all used element types inside own elementTypeBinding
@
text
@d203 1
a203 1
		if (getDisplayNameGen() != null && getDisplayNameGen().trim().length() > 0) {
@


1.2
log
@#131270 Duplicated tool entries when same tool definition is referenced from gmfmap.
@
text
@d38 1
d86 20
d240 21
d310 2
d332 3
d355 3
d375 2
d394 2
@


1.1
log
@#126200 register element types in xml
@
text
@d9 2
d25 2
d37 1
d65 20
d177 42
d266 2
d285 3
d305 3
d323 2
d340 2
@

