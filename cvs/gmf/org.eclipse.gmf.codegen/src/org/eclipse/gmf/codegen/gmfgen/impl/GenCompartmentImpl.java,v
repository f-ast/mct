head	1.23;
access;
symbols
	v20081022-1925:1.23
	v20081015-1925:1.23
	v20081008-1925:1.23
	v20081001-1925:1.23
	v20080930-1130:1.23
	v20080926-1245:1.23
	v20080924-1925:1.23
	v20080917-1925:1.23
	v20080911-1728:1.23
	v20080910-1520:1.23
	v20080903-1520:1.23
	v20080827-1520:1.23
	v20080813-1520:1.23
	v20080806-1520:1.23
	v20080722-1827:1.23
	v20080718-1731:1.23
	v20080716-1600:1.23
	v20080716-1642:1.23
	R2_1_maintenance:1.23.0.2
	Root_R2_1_maintenance:1.23
	R2_1_0:1.23
	v20080610-1132:1.23
	v20080603-1553:1.23
	v20080528-1052:1.23
	v20080521:1.23
	v20080516-1543:1.23
	v20080516-1143:1.23
	v20080512-1200:1.23
	v20080508-2000:1.23
	v20080507-1326:1.23
	v20080503-1740:1.23
	v20080501-1739:1.23
	v20080425-1959:1.23
	v20080417-1610:1.22
	v20080411-0411:1.22
	v20080404-1111:1.22
	v20080322-0000:1.22
	v20080222-1200:1.21
	v20080215-1500:1.21
	v20080207-0207:1.21
	v20071222-1111:1.21
	v20071214-1111:1.21
	v20071130-1111:1.21
	v20071124-0000:1.21
	v20071112-0000:1.21
	v20071108-0000:1.21
	v20071003-0000:1.21
	v20070928-0000:1.21
	v20070921-0000:1.21
	v20070915-0000:1.21
	v20070903-0000:1.21
	v20070809-0000:1.21
	R2_0_maintenance:1.21.0.2
	R2_0:1.21
	R4_20:1.21
	v20070621-0000:1.21
	RC3_20:1.21
	v20070614-1400:1.21
	v20070608-1300:1.20
	v20070605-1400:1.20
	v20070601-1400:1.20
	v20070525-1500:1.19
	v20070520-1200:1.19
	v20070518-1300:1.19
	v20070504-1000:1.19
	v20070427-0600:1.19
	v20070420-1000:1.19
	v20070413-1300:1.19
	v20070405-1100:1.18
	v20070403-1500:1.18
	v20070330-1300:1.18
	v20060330-1300:1.18
	v20070322-1100:1.18
	v20060316-0600:1.18
	v20070307-0700:1.17
	v20070301-1200:1.17
	v20070228-2000:1.17
	v20070221-1500:1.17
	v20070208-1800:1.17
	v20070202-0200:1.16
	v20070103-0300:1.16
	M4_20:1.16
	v20061222-1800:1.16
	v20061218-1200:1.16
	v20061214-0000:1.16
	v20061120-1300:1.16
	M3_20:1.16
	v20061117-0800:1.16
	v20061027-1200:1.16
	v20061020-1000:1.16
	v20061013-1330:1.16
	v20060919-0800:1.16
	v20060907-1100:1.16
	M1_20:1.16
	v20060904-1500:1.16
	v20060824-1600:1.16
	v20060817-1500:1.16
	v20060728-0500:1.16
	v20060713-1700:1.16
	R1_0_maintenance:1.16.0.2
	R1_0:1.16
	v20060627-1200:1.16
	v20060626-1420:1.16
	v20060620-0400:1.16
	v20060616-1400:1.16
	v20060616-1200:1.16
	v20060609-1400:1.16
	v20060531-1730:1.12
	v20060530-1930:1.12
	v20060526-1200:1.12
	v20060519-1300:1.12
	v20060519-0800:1.12
	v20060512-1000:1.11
	I20060512-1000:1.11
	I20060505-1400:1.11
	I20060428-1300:1.11
	I20060424-0500:1.11
	I20060424-0300:1.11
	M6_10:1.11
	I20060407-1200:1.10
	I20060331-1000:1.10
	I20060324-0300:1.10
	I20060317-1300:1.10
	I20060317-1200:1.10
	I20060316-1300:1.10
	I20060309-1300:1.10
	M5_10:1.10
	S20060303-1600:1.10
	I20060227-1730:1.10
	I20060216-1945:1.9
	I20060210-1715:1.9
	I20060209-1815:1.9
	I20060203-0830:1.8
	I20060202-1415:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.8
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.6
	I20051223-1100:1.6
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.2
	v20051030:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.23
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.22;
commitid	2e1d4808b3814567;

1.22
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	5e5047cd7dd64567;

1.21
date	2007.06.12.18.05.31;	author dstadnik;	state Exp;
branches;
next	1.20;
commitid	5e91466ee0674567;

1.20
date	2007.05.28.14.24.35;	author dstadnik;	state Exp;
branches;
next	1.19;
commitid	27fb465ae6224567;

1.19
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.18;
commitid	725b461c97d64567;

1.18
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	444245f8090b4567;

1.17
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.16;
commitid	21cf45be38464567;

1.16
date	2006.06.07.13.52.17;	author dstadnik;	state Exp;
branches;
next	1.15;

1.15
date	2006.06.07.09.29.00;	author dstadnik;	state Exp;
branches;
next	1.14;

1.14
date	2006.06.06.12.02.13;	author dstadnik;	state Exp;
branches;
next	1.13;

1.13
date	2006.06.06.10.52.00;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.05.17.12.39.16;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.13.12.39.59;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.02.23.12.21.25;	author ashatalin;	state Exp;
branches;
next	1.9;

1.9
date	2006.02.03.14.04.47;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.12.22.16.10.18;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.20.18.00.01;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.15.36.53;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.04.16.46.18;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.23
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenNode;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Compartment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#getTitle <em>Title</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#isCanCollapse <em>Can Collapse</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#isHideIfEmpty <em>Hide If Empty</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#isNeedsTitle <em>Needs Title</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#getDiagram <em>Diagram</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#getNode <em>Node</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#isListLayout <em>List Layout</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenCompartmentImpl extends GenChildContainerImpl implements GenCompartment {
	/**
	 * The default value of the '{@@link #getTitle() <em>Title</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTitle()
	 * @@generated
	 * @@ordered
	 */
	protected static final String TITLE_EDEFAULT = null;

	/**
	 * The cached value of the '{@@link #getTitle() <em>Title</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTitle()
	 * @@generated
	 * @@ordered
	 */
	protected String title = TITLE_EDEFAULT;

	/**
	 * The default value of the '{@@link #isCanCollapse() <em>Can Collapse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanCollapse()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean CAN_COLLAPSE_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isCanCollapse() <em>Can Collapse</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isCanCollapse()
	 * @@generated
	 * @@ordered
	 */
	protected boolean canCollapse = CAN_COLLAPSE_EDEFAULT;

	/**
	 * The default value of the '{@@link #isHideIfEmpty() <em>Hide If Empty</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isHideIfEmpty()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean HIDE_IF_EMPTY_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isHideIfEmpty() <em>Hide If Empty</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isHideIfEmpty()
	 * @@generated
	 * @@ordered
	 */
	protected boolean hideIfEmpty = HIDE_IF_EMPTY_EDEFAULT;

	/**
	 * The default value of the '{@@link #isNeedsTitle() <em>Needs Title</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isNeedsTitle()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean NEEDS_TITLE_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isNeedsTitle() <em>Needs Title</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isNeedsTitle()
	 * @@generated
	 * @@ordered
	 */
	protected boolean needsTitle = NEEDS_TITLE_EDEFAULT;

	/**
	 * The cached value of the '{@@link #getNode() <em>Node</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNode()
	 * @@generated
	 * @@ordered
	 */
	protected GenNode node;

	/**
	 * The default value of the '{@@link #isListLayout() <em>List Layout</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isListLayout()
	 * @@generated
	 * @@ordered
	 */
	protected static final boolean LIST_LAYOUT_EDEFAULT = true;

	/**
	 * The cached value of the '{@@link #isListLayout() <em>List Layout</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #isListLayout()
	 * @@generated
	 * @@ordered
	 */
	protected boolean listLayout = LIST_LAYOUT_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenCompartmentImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenCompartment();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTitle(String newTitle) {
		String oldTitle = title;
		title = newTitle;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__TITLE, oldTitle, title));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isCanCollapse() {
		return canCollapse;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCanCollapse(boolean newCanCollapse) {
		boolean oldCanCollapse = canCollapse;
		canCollapse = newCanCollapse;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE, oldCanCollapse, canCollapse));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isHideIfEmpty() {
		return hideIfEmpty;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setHideIfEmpty(boolean newHideIfEmpty) {
		boolean oldHideIfEmpty = hideIfEmpty;
		hideIfEmpty = newHideIfEmpty;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY, oldHideIfEmpty, hideIfEmpty));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isNeedsTitle() {
		return needsTitle;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNeedsTitle(boolean newNeedsTitle) {
		boolean oldNeedsTitle = needsTitle;
		needsTitle = newNeedsTitle;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE, oldNeedsTitle, needsTitle));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenDiagram getDiagram() {
		if (eContainerFeatureID != GMFGenPackage.GEN_COMPARTMENT__DIAGRAM) return null;
		return (GenDiagram)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNode getNode() {
		if (node != null && node.eIsProxy()) {
			InternalEObject oldNode = (InternalEObject)node;
			node = (GenNode)eResolveProxy(oldNode);
			if (node != oldNode) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_COMPARTMENT__NODE, oldNode, node));
			}
		}
		return node;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNode basicGetNode() {
		return node;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetNode(GenNode newNode, NotificationChain msgs) {
		GenNode oldNode = node;
		node = newNode;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NODE, oldNode, newNode);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setNode(GenNode newNode) {
		if (newNode != node) {
			NotificationChain msgs = null;
			if (node != null)
				msgs = ((InternalEObject)node).eInverseRemove(this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);
			if (newNode != null)
				msgs = ((InternalEObject)newNode).eInverseAdd(this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);
			msgs = basicSetNode(newNode, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__NODE, newNode, newNode));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public boolean isListLayout() {
		return listLayout;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setListLayout(boolean newListLayout) {
		boolean oldListLayout = listLayout;
		listLayout = newListLayout;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT, oldListLayout, listLayout));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				if (node != null)
					msgs = ((InternalEObject)node).eInverseRemove(this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);
				return basicSetNode((GenNode)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				return eBasicSetContainer(null, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				return basicSetNode(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS, GenDiagram.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMPARTMENT__TITLE:
				return getTitle();
			case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE:
				return isCanCollapse() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY:
				return isHideIfEmpty() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE:
				return isNeedsTitle() ? Boolean.TRUE : Boolean.FALSE;
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				return getDiagram();
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				if (resolve) return getNode();
				return basicGetNode();
			case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT:
				return isListLayout() ? Boolean.TRUE : Boolean.FALSE;
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMPARTMENT__TITLE:
				setTitle((String)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE:
				setCanCollapse(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY:
				setHideIfEmpty(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE:
				setNeedsTitle(((Boolean)newValue).booleanValue());
				return;
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				setNode((GenNode)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT:
				setListLayout(((Boolean)newValue).booleanValue());
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMPARTMENT__TITLE:
				setTitle(TITLE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE:
				setCanCollapse(CAN_COLLAPSE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY:
				setHideIfEmpty(HIDE_IF_EMPTY_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE:
				setNeedsTitle(NEEDS_TITLE_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				setNode((GenNode)null);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT:
				setListLayout(LIST_LAYOUT_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_COMPARTMENT__TITLE:
				return TITLE_EDEFAULT == null ? title != null : !TITLE_EDEFAULT.equals(title);
			case GMFGenPackage.GEN_COMPARTMENT__CAN_COLLAPSE:
				return canCollapse != CAN_COLLAPSE_EDEFAULT;
			case GMFGenPackage.GEN_COMPARTMENT__HIDE_IF_EMPTY:
				return hideIfEmpty != HIDE_IF_EMPTY_EDEFAULT;
			case GMFGenPackage.GEN_COMPARTMENT__NEEDS_TITLE:
				return needsTitle != NEEDS_TITLE_EDEFAULT;
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				return getDiagram() != null;
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				return node != null;
			case GMFGenPackage.GEN_COMPARTMENT__LIST_LAYOUT:
				return listLayout != LIST_LAYOUT_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (title: ");
		result.append(title);
		result.append(", canCollapse: ");
		result.append(canCollapse);
		result.append(", hideIfEmpty: ");
		result.append(hideIfEmpty);
		result.append(", needsTitle: ");
		result.append(needsTitle);
		result.append(", listLayout: ");
		result.append(listLayout);
		result.append(')');
		return result.toString();
	}

	@@Override
	public EList<GenNode> getAssistantNodes() {
		if (isListLayout()) {
			return new BasicEList<GenNode>();
		}
		return super.getAssistantNodes();
	}

	public String getClassNamePrefix() {
		if (getNode() == null) {
			return CLASS_NAME_PREFIX;
		}
		// should be consistent with ClassNamingStrategy
		return getNode().getClassNamePrefix() + (isEmpty(getTitle()) ? CLASS_NAME_PREFIX : getValidClassName(getTitle()));
	}
	
	public boolean isSansDomain() {
		return getNode().getModelFacet() == null;
	}
} //GenCompartmentImpl
@


1.22
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a15 1
import org.eclipse.emf.ecore.util.EcoreUtil;
a268 31
	public NotificationChain basicSetDiagram(GenDiagram newDiagram, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newDiagram, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setDiagram(GenDiagram newDiagram) {
		if (newDiagram != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_COMPARTMENT__DIAGRAM && newDiagram != null)) {
			if (EcoreUtil.isAncestor(this, newDiagram))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newDiagram != null)
				msgs = ((InternalEObject)newDiagram).eInverseAdd(this, GMFGenPackage.GEN_DIAGRAM__COMPARTMENTS, GenDiagram.class, msgs);
			msgs = basicSetDiagram(newDiagram, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, newDiagram, newDiagram));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d356 1
a356 1
				return basicSetDiagram((GenDiagram)otherEnd, msgs);
d374 1
a374 1
				return basicSetDiagram(null, msgs);
a441 3
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				setDiagram((GenDiagram)newValue);
				return;
a471 3
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM:
				setDiagram((GenDiagram)null);
				return;
@


1.21
log
@add method to find modeling assistant child nodes
@
text
@d16 1
d270 31
d388 1
a388 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
d406 1
a406 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_COMPARTMENT__DIAGRAM, msgs);
d474 3
d507 3
@


1.20
log
@prevent npe on creation
@
text
@d11 2
d532 8
@


1.19
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d531 3
@


1.18
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d127 1
a127 1
	protected GenNode node = null;
@


1.17
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@d163 1
d348 1
d368 1
d384 1
d398 1
d425 1
d455 1
d485 1
d511 1
@


1.16
log
@#145502 Naming strategy and gmfgen model objects should generate consistent class names
@
text
@d525 4
@


1.15
log
@provide Node/Link/Label/Diagram class prefix instead of Unknown for elements without model facet; add extra empty values checks
@
text
@d522 2
a523 17
		if (GenCommonBaseImpl.isEmpty(getTitle())) {
			return "Compartment";
		}
		char[] chars = getTitle().toCharArray();
		for (int i = 0; i < chars.length; i++) {
			if (i == 0) {
				if (!Character.isJavaIdentifierStart(chars[0])) {
					chars[0] = '_';
				}
				chars[0] = Character.toUpperCase(chars[0]);
			} else {
				if (!Character.isJavaIdentifierPart(chars[i])) {
					chars[i] = '_';
				}
			}
		}
		return new String(chars);
@


1.14
log
@refactor getUniqueIdentifier() : all GenCommonBase implementations use the same logic so move it in GenCommonBaseImpl
@
text
@d522 2
a523 2
		if (getTitle() == null) {
			return "Compartment" + hashCode();
a539 9

	public String getItemSemanticEditPolicyClassName() {
		String value = getItemSemanticEditPolicyClassNameGen();
		if (value == null || value.length() == 0) {
			return "Compartment_" + getClassNamePrefix() + "ItemSemanticEditPolicy";
		}
		return value;
	}

@


1.13
log
@#145502 deprecate getClassNameSuffix()
@
text
@a540 4
	public String getUniqueIdentifier() {
		return getClassNamePrefix() + "_" + getVisualID();
	}

@


1.12
log
@[mgolubev] #140186 XYLayoutEditPolicy should not be installed for editparts that have figure with non-XYLayout in the gmfgraph model
@
text
@a540 4
	public String getClassNameSuffux() {
		return "Container";
	}

d548 1
a548 1
			return "Compartment_" + getClassNamePrefix() + getClassNameSuffux() + "ItemSemanticEditPolicy";
@


1.11
log
@#125900 Redundant annotations added to View in generated view factory

semantic hint class name plroperty removed from the model.
@
text
@d32 1
d130 20
d326 21
d409 2
d437 3
d466 3
d492 2
d515 2
@


1.10
log
@Correcting model to correctly load cross-references in the model.
@
text
@a302 9
	 * @@generated NOT
	 */
	public String getSemanticHintFieldName() {
		return GenCommonBaseImpl.asJavaConstantName(getUniqueIdentifier());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
@


1.9
log
@do not use '$' in default class names; they are resolved incorrectly (it's an inner class separator)
@
text
@d284 19
d399 3
d425 3
@


1.8
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d453 1
a453 1
			return "GenContainer$" + hashCode();
@


1.7
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@a13 1
import org.eclipse.gmf.codegen.gmfgen.CompartmentLayoutKind;
d30 1
a30 1
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenCompartmentImpl#getLayoutKind <em>Layout Kind</em>}</li>
d119 1
a119 1
	 * The default value of the '{@@link #getLayoutKind() <em>Layout Kind</em>}' attribute.
d122 1
a122 1
	 * @@see #getLayoutKind()
d126 1
a126 11
	protected static final CompartmentLayoutKind LAYOUT_KIND_EDEFAULT = CompartmentLayoutKind.BORDER_LITERAL;

	/**
	 * The cached value of the '{@@link #getLayoutKind() <em>Layout Kind</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLayoutKind()
	 * @@generated
	 * @@ordered
	 */
	protected CompartmentLayoutKind layoutKind = LAYOUT_KIND_EDEFAULT;
d235 3
a237 2
	public CompartmentLayoutKind getLayoutKind() {
		return layoutKind;
d245 19
a263 5
	public void setLayoutKind(CompartmentLayoutKind newLayoutKind) {
		CompartmentLayoutKind oldLayoutKind = layoutKind;
		layoutKind = newLayoutKind == null ? LAYOUT_KIND_EDEFAULT : newLayoutKind;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND, oldLayoutKind, layoutKind));
d271 8
a278 3
	public GenNode getNode() {
		if (eContainerFeatureID != GMFGenPackage.GEN_COMPARTMENT__NODE) return null;
		return (GenNode)eContainer();
d297 1
a297 1
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
d300 5
a304 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_COMPARTMENT__NODE, msgs);
d316 2
d319 1
a319 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_COMPARTMENT__NODE, msgs);
d331 2
a332 2
			case GMFGenPackage.GEN_COMPARTMENT__NODE:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);
d352 2
a353 2
			case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND:
				return getLayoutKind();
d355 2
a356 1
				return getNode();
a379 3
			case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND:
				setLayoutKind((CompartmentLayoutKind)newValue);
				return;
a402 3
			case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND:
				setLayoutKind(LAYOUT_KIND_EDEFAULT);
				return;
d422 2
a423 2
			case GMFGenPackage.GEN_COMPARTMENT__LAYOUT_KIND:
				return layoutKind != LAYOUT_KIND_EDEFAULT;
d425 1
a425 1
				return getNode() != null;
a446 2
		result.append(", layoutKind: ");
		result.append(layoutKind);
a474 4
	public GenDiagram getDiagram() {
		return getNode().getDiagram();
	}

@


1.6
log
@#121888
One toolbar tool can create several elements.
@
text
@a8 4
import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;

a10 1

a11 1
import org.eclipse.emf.ecore.EStructuralFeature;
a12 1

a13 3

import org.eclipse.emf.ecore.util.InternalEList;

a18 1
import org.eclipse.gmf.codegen.gmfgen.Viewmap;
d269 1
a269 1
		return (GenNode)eContainer;
d286 6
a291 12
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicAdd(otherEnd, msgs);
				case GMFGenPackage.GEN_COMPARTMENT__NODE:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_COMPARTMENT__NODE, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
d293 1
a293 3
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
d301 4
a304 12
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP:
					return basicSetViewmap(null, msgs);
				case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES:
					return ((InternalEList)getChildNodes()).basicRemove(otherEnd, msgs);
				case GMFGenPackage.GEN_COMPARTMENT__NODE:
					return eBasicSetContainer(null, GMFGenPackage.GEN_COMPARTMENT__NODE, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
d306 1
a306 1
		return eBasicSetContainer(null, featureID, msgs);
d314 4
a317 8
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_COMPARTMENT__NODE:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_NODE__COMPARTMENTS, GenNode.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d319 1
a319 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d327 2
a328 19
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS:
				if (resolve) return getDiagramRunTimeClass();
				return basicGetDiagramRunTimeClass();
			case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID:
				return new Integer(getVisualID());
			case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME:
				return getEditPartClassName();
			case GMFGenPackage.GEN_COMPARTMENT__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return getItemSemanticEditPolicyClassName();
			case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return getNotationViewFactoryClassName();
			case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP:
				return getViewmap();
			case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES:
				return getChildNodes();
			case GMFGenPackage.GEN_COMPARTMENT__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return getCanonicalEditPolicyClassName();
d342 1
a342 1
		return eDynamicGet(eFeature, resolve);
d350 2
a351 27
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID:
				setVisualID(((Integer)newValue).intValue());
				return;
			case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME:
				setEditPartClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName((String)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP:
				setViewmap((Viewmap)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES:
				getChildNodes().clear();
				getChildNodes().addAll((Collection)newValue);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName((String)newValue);
				return;
d368 1
a368 1
		eDynamicSet(eFeature, newValue);
d376 2
a377 26
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS:
				setDiagramRunTimeClass((GenClass)null);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID:
				setVisualID(VISUAL_ID_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME:
				setEditPartClassName(EDIT_PART_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				setItemSemanticEditPolicyClassName(ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				setNotationViewFactoryClassName(NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP:
				setViewmap((Viewmap)null);
				return;
			case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES:
				getChildNodes().clear();
				return;
			case GMFGenPackage.GEN_COMPARTMENT__CANONICAL_EDIT_POLICY_CLASS_NAME:
				setCanonicalEditPolicyClassName(CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT);
				return;
d394 1
a394 1
		eDynamicUnset(eFeature);
d402 2
a403 18
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_COMPARTMENT__DIAGRAM_RUN_TIME_CLASS:
				return diagramRunTimeClass != null;
			case GMFGenPackage.GEN_COMPARTMENT__VISUAL_ID:
				return visualID != VISUAL_ID_EDEFAULT;
			case GMFGenPackage.GEN_COMPARTMENT__EDIT_PART_CLASS_NAME:
				return EDIT_PART_CLASS_NAME_EDEFAULT == null ? editPartClassName != null : !EDIT_PART_CLASS_NAME_EDEFAULT.equals(editPartClassName);
			case GMFGenPackage.GEN_COMPARTMENT__ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME:
				return ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? itemSemanticEditPolicyClassName != null : !ITEM_SEMANTIC_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(itemSemanticEditPolicyClassName);
			case GMFGenPackage.GEN_COMPARTMENT__NOTATION_VIEW_FACTORY_CLASS_NAME:
				return NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT == null ? notationViewFactoryClassName != null : !NOTATION_VIEW_FACTORY_CLASS_NAME_EDEFAULT.equals(notationViewFactoryClassName);
			case GMFGenPackage.GEN_COMPARTMENT__VIEWMAP:
				return viewmap != null;
			case GMFGenPackage.GEN_COMPARTMENT__CHILD_NODES:
				return childNodes != null && !childNodes.isEmpty();
			case GMFGenPackage.GEN_COMPARTMENT__CANONICAL_EDIT_POLICY_CLASS_NAME:
				return CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT == null ? canonicalEditPolicyClassName != null : !CANONICAL_EDIT_POLICY_CLASS_NAME_EDEFAULT.equals(canonicalEditPolicyClassName);
d417 1
a417 1
		return eDynamicIsSet(eFeature);
@


1.5
log
@#121581
Fields for the compartments are named unique.
@
text
@d289 1
a289 1
		return asJavaConstantName(getUniqueIdentifier());
@


1.4
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d286 9
@


1.3
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d366 2
d413 3
d463 3
d506 2
d554 2
a555 2
				if (!Character.isJavaIdentifierStart(chars[i])) {
					chars[i] = '_';
d557 1
@


1.2
log
@[ashatalin] #115089 valid java identifier for compartment class name prefix
@
text
@d358 2
d398 3
d446 3
d490 2
d568 8
@


1.1
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d528 16
a543 1
		return getTitle() == null ? "GenContainer$" + hashCode() : getTitle();
@

