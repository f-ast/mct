head	1.37;
access;
symbols
	v20081022-1925:1.37
	v20081015-1925:1.37
	v20081008-1925:1.37
	v20081001-1925:1.37
	v20080924-1925:1.37
	v20080917-1925:1.37
	v20080911-1728:1.37
	v20080910-1520:1.37
	v20080903-1520:1.37
	v20080827-1520:1.37
	v20080813-1520:1.37
	v20080806-1520:1.37
	R1_0_maintenance:1.37.0.2
	R1_0:1.37
	I20060203-0830:1.34
	I20060202-1415:1.34
	I20060129-1145:1.32
	I20060127-0900:1.31
	I20060120-1530:1.30
	I20060113-1700:1.30
	M4_10:1.30
	I20060107-1100:1.27
	I20060105-1630:1.27
	I20051230-1230:1.27
	I20051223-1100:1.27
	I20051217-0925:1.27
	I20051208-2000:1.27
	I20051201-1800:1.27
	I20051124-2000:1.25
	M3_10:1.22
	I20051118-1245:1.22
	I20051111-1800:1.20
	I20051106-0900:1.19
	v20051030:1.18
	v20050828:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.37
date	2006.02.06.23.22.32;	author atikhomirov;	state dead;
branches;
next	1.36;

1.36
date	2006.02.04.22.30.38;	author atikhomirov;	state Exp;
branches;
next	1.35;

1.35
date	2006.02.04.22.29.48;	author atikhomirov;	state Exp;
branches;
next	1.34;

1.34
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	1.33;

1.33
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2006.01.27.20.54.21;	author ashatalin;	state Exp;
branches;
next	1.31;

1.31
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	1.30;

1.30
date	2006.01.12.11.43.59;	author dstadnik;	state Exp;
branches;
next	1.29;

1.29
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.29.18.49.39;	author atikhomirov;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.29.18.14.04;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.23.10.11.52;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.22.11.50.03;	author dstadnik;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.21;

1.21
date	2005.11.16.13.30.02;	author dstadnik;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.25.18.28.41;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.24.14.58.46;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.20.16.04.35;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.19.15.36.38;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.04.19.20.27;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.30.19.16.09;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.26.15.15.44;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.22.14.25.36;	author rgronback;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.37
log
@EmitterFactory -> CodegenEmitters; got an instance; uses EmitterFactory from oeg.common now. Plus mem leak of one softRef.
@
text
@/*
 * Copyright (c) 2005 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.codegen.util;

import java.lang.reflect.Method;
import java.net.URL;

import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.codegen.jet.JETEmitter;
import org.eclipse.emf.codegen.jet.JETException;
import org.eclipse.gmf.codegen.templates.commands.ReorientConnectionViewCommandGenerator;
import org.eclipse.gmf.codegen.templates.editor.ActionBarContributorGenerator;
import org.eclipse.gmf.codegen.templates.editor.BuildPropertiesGenerator;
import org.eclipse.gmf.codegen.templates.editor.CreateShortcutActionGenerator;
import org.eclipse.gmf.codegen.templates.editor.CreationWizardGenerator;
import org.eclipse.gmf.codegen.templates.editor.CreationWizardPageGenerator;
import org.eclipse.gmf.codegen.templates.editor.DiagramEditorUtilGenerator;
import org.eclipse.gmf.codegen.templates.editor.DiagramFileCreatorGenerator;
import org.eclipse.gmf.codegen.templates.editor.DocumentProviderGenerator;
import org.eclipse.gmf.codegen.templates.editor.EditorGenerator;
import org.eclipse.gmf.codegen.templates.editor.ElementChooserGenerator;
import org.eclipse.gmf.codegen.templates.editor.InitDiagramFileActionGenerator;
import org.eclipse.gmf.codegen.templates.editor.LoadResourceActionGenerator;
import org.eclipse.gmf.codegen.templates.editor.ManifestGenerator;
import org.eclipse.gmf.codegen.templates.editor.MatchingStrategyGenerator;
import org.eclipse.gmf.codegen.templates.editor.PaletteFactoryGenerator;
import org.eclipse.gmf.codegen.templates.editor.PluginGenerator;
import org.eclipse.gmf.codegen.templates.editor.PluginPropertiesGenerator;
import org.eclipse.gmf.codegen.templates.editor.PluginXML;
import org.eclipse.gmf.codegen.templates.editor.PreferencesInitializerGenerator;
import org.eclipse.gmf.codegen.templates.editor.VisualIDRegistryGenerator;
import org.eclipse.gmf.codegen.templates.parts.ChildNodeEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.CompartmentEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.DiagramEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.DiagramExternalNodeLabelEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.EditPartFactoryGenerator;
import org.eclipse.gmf.codegen.templates.parts.ExternalNodeLabelEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.ExternalNodeLabelTextEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.LinkEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.LinkLabelEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.LinkLabelTextEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.NodeEditPartGenerator;
import org.eclipse.gmf.codegen.templates.parts.NodeLabelEditPartGenerator;
import org.eclipse.gmf.codegen.templates.policies.ChildContainerCanonicalEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.CompartmentItemSemanticEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.DiagramCanonicalEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.DiagramItemSemanticEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.GraphicalNodeEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.ItemSemanticEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.LinkItemSemanticEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.NodeGraphicalNodeEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.NodeItemSemanticEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.policies.ReferenceConnectionEditPolicyGenerator;
import org.eclipse.gmf.codegen.templates.providers.AbstractParserGenerator;
import org.eclipse.gmf.codegen.templates.providers.EditPartProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.ElementTypesGenerator;
import org.eclipse.gmf.codegen.templates.providers.IconProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.LabelTextViewFactoryGenerator;
import org.eclipse.gmf.codegen.templates.providers.LabelViewFactoryGenerator;
import org.eclipse.gmf.codegen.templates.providers.MarkerNavigationProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.MetamodelSupportProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.ModelingAssistantProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.ParserProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.PropertyProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.SemanticHintsGenerator;
import org.eclipse.gmf.codegen.templates.providers.StructuralFeatureParserGenerator;
import org.eclipse.gmf.codegen.templates.providers.StructuralFeaturesParserGenerator;
import org.eclipse.gmf.codegen.templates.providers.ValidationProviderGenerator;
import org.eclipse.gmf.codegen.templates.providers.ViewFactoryGenerator;
import org.eclipse.gmf.codegen.templates.providers.ViewProviderGenerator;
import org.osgi.framework.Bundle;

/**
 * Provides JET templates.
 * 
 * @@author artem
 */
public class EmitterFactory {

	private static final String TEMPLATES_PLUGIN_ID = "org.eclipse.gmf.codegen";

	private static Bundle getTemplatesBundle() {
		return Platform.getBundle(TEMPLATES_PLUGIN_ID);
	}

	public static URL getJMergeControlFile() {
		return getTemplatesBundle().getEntry("/templates/emf-merge.xml");
	}

	private static boolean usePrecompiledTemplates() {
		return true;
	}

	// commands

	public static JETEmitter getReorientConnectionViewCommandEmitter() throws JETException {
		return initializeEmitter("/templates/commands/ReorientConnectionViewCommand.javajet", ReorientConnectionViewCommandGenerator.class);
	}

	// parts

	public static JETEmitter getDiagramEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/DiagramEditPart.javajet", DiagramEditPartGenerator.class);
	}

	public static JETEmitter getDiagramExternalNodeLabelEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/DiagramExternalNodeLabelEditPart.javajet", DiagramExternalNodeLabelEditPartGenerator.class);
	}

	public static JETEmitter getNodeEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/NodeEditPart.javajet", NodeEditPartGenerator.class);
	}

	public static JETEmitter getNodeLabelEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/NodeLabelEditPart.javajet", NodeLabelEditPartGenerator.class);
	}

	public static JETEmitter getExternalNodeLabelEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/ExternalNodeLabelEditPart.javajet", ExternalNodeLabelEditPartGenerator.class);
	}

	public static JETEmitter getExternalNodeLabelTextEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/ExternalNodeLabelTextEditPart.javajet", ExternalNodeLabelTextEditPartGenerator.class);
	}

	public static JETEmitter getChildNodeEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/ChildNodeEditPart.javajet", ChildNodeEditPartGenerator.class);
	}

	public static JETEmitter getCompartmentEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/CompartmentEditPart.javajet", CompartmentEditPartGenerator.class);
	}
	
	public static JETEmitter getLinkEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/LinkEditPart.javajet", LinkEditPartGenerator.class);
	}

	public static JETEmitter getLinkLabelEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/LinkLabelEditPart.javajet", LinkLabelEditPartGenerator.class);
	}

	public static JETEmitter getLinkLabelTextEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/LinkLabelTextEditPart.javajet", LinkLabelTextEditPartGenerator.class);
	}

	public static JETEmitter getEditPartFactoryEmitter() throws JETException {
		return initializeEmitter("/templates/parts/EditPartFactory.javajet", EditPartFactoryGenerator.class);
	}
	
	// policies

	public static JETEmitter getBaseItemSemanticEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/ItemSemanticEditPolicy.javajet", ItemSemanticEditPolicyGenerator.class);
	}

	public static JETEmitter getBaseGraphicalNodeEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/GraphicalNodeEditPolicy.javajet", GraphicalNodeEditPolicyGenerator.class);
	}

	public static JETEmitter getReferenceConnectionEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/ReferenceConnectionEditPolicy.javajet", ReferenceConnectionEditPolicyGenerator.class);
	}

	public static JETEmitter getDiagramCanonicalEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/DiagramCanonicalEditPolicy.javajet", DiagramCanonicalEditPolicyGenerator.class);
	}

	public static JETEmitter getChildContainerCanonicalEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/ChildContainerCanonicalEditPolicy.javajet", ChildContainerCanonicalEditPolicyGenerator.class);
	}

	public static JETEmitter getDiagramItemSemanticEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/DiagramItemSemanticEditPolicy.javajet", DiagramItemSemanticEditPolicyGenerator.class);
	}

	public static JETEmitter getCompartmentItemSemanticEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/CompartmentItemSemanticEditPolicy.javajet", CompartmentItemSemanticEditPolicyGenerator.class);
	}

	public static JETEmitter getNodeGraphicalNodeEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/NodeGraphicalNodeEditPolicy.javajet", NodeGraphicalNodeEditPolicyGenerator.class);
	}

	public static JETEmitter getNodeItemSemanticEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/NodeItemSemanticEditPolicy.javajet", NodeItemSemanticEditPolicyGenerator.class);
	}

	public static JETEmitter getLinkItemSemanticEditPolicyEmitter() throws JETException {
		return initializeEmitter("/templates/policies/LinkItemSemanticEditPolicy.javajet", LinkItemSemanticEditPolicyGenerator.class);
	}
	
	// providers

	public static JETEmitter getAbstractParserEmitter() throws JETException {
		return initializeEmitter("/templates/providers/AbstractParser.javajet", AbstractParserGenerator.class);
	}

	public static JETEmitter getStructuralFeatureParserEmitter() throws JETException {
		return initializeEmitter("/templates/providers/StructuralFeatureParser.javajet", StructuralFeatureParserGenerator.class);
	}

	public static JETEmitter getStructuralFeaturesParserEmitter() throws JETException {
		return initializeEmitter("/templates/providers/StructuralFeaturesParser.javajet", StructuralFeaturesParserGenerator.class);
	}

	public static JETEmitter getSemanticHintsEmitter() throws JETException {
		return initializeEmitter("/templates/providers/SemanticHints.javajet", SemanticHintsGenerator.class);
	}

	public static JETEmitter getViewFactoryEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ViewFactory.javajet", ViewFactoryGenerator.class);
	}

	public static JETEmitter getLabelViewFactoryEmitter() throws JETException {
		return initializeEmitter("/templates/providers/LabelViewFactory.javajet", LabelViewFactoryGenerator.class);
	}

	public static JETEmitter getLabelTextViewFactoryEmitter() throws JETException {
		return initializeEmitter("/templates/providers/LabelTextViewFactory.javajet", LabelTextViewFactoryGenerator.class);
	}
	
	public static JETEmitter getElementTypesEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ElementTypes.javajet", ElementTypesGenerator.class);
	}

	public static JETEmitter getViewProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ViewProvider.javajet", ViewProviderGenerator.class);
	}

	public static JETEmitter getEditPartProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/EditPartProvider.javajet", EditPartProviderGenerator.class);
	}

	public static JETEmitter getMetamodelSupportProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/MetamodelSupportProvider.javajet", MetamodelSupportProviderGenerator.class);
	}

	public static JETEmitter getModelingAssistantProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ModelingAssistantProvider.javajet", ModelingAssistantProviderGenerator.class);
	}

	public static JETEmitter getPropertyProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/PropertyProvider.javajet", PropertyProviderGenerator.class);
	}

	public static JETEmitter getIconProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/IconProvider.javajet", IconProviderGenerator.class);
	}

	public static JETEmitter getParserProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ParserProvider.javajet", ParserProviderGenerator.class);
	}

	public static JETEmitter getValidationProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ValidationProvider.javajet", ValidationProviderGenerator.class); //$NON-NLS-1$
	}
	
	public static JETEmitter getMarkerNavigationProviderEmitter() throws JETException {
		return initializeEmitter("/templates/providers/MarkerNavigationProvider.javajet", MarkerNavigationProviderGenerator.class); //$NON-NLS-1$
	}	

	// editor

	public static JETEmitter getInitDiagramFileActionEmitter() throws JETException {
		return initializeEmitter("/templates/editor/InitDiagramFileAction.javajet", InitDiagramFileActionGenerator.class);
	}

	public static JETEmitter getPaletteEmitter() throws JETException {
		return initializeEmitter("/templates/editor/PaletteFactory.javajet", PaletteFactoryGenerator.class);
	}

	public static JETEmitter getDiagramEditorUtilEmitter() throws JETException {
		return initializeEmitter("/templates/editor/DiagramEditorUtil.javajet", DiagramEditorUtilGenerator.class);
	}

	public static JETEmitter getDiagramFileCreatorEmitter() throws JETException {
		return initializeEmitter("/templates/editor/DiagramFileCreator.javajet", DiagramFileCreatorGenerator.class);
	}
	
	public static JETEmitter getVisualIDRegistryEmitter() throws JETException {
		return initializeEmitter("/templates/editor/VisualIDRegistry.javajet", VisualIDRegistryGenerator.class);
	}

	public static JETEmitter getCreationWizardEmitter() throws JETException {
		return initializeEmitter("/templates/editor/CreationWizard.javajet", CreationWizardGenerator.class);
	}

	public static JETEmitter getCreationWizardPageEmitter() throws JETException {
		return initializeEmitter("/templates/editor/CreationWizardPage.javajet", CreationWizardPageGenerator.class);
	}

	public static JETEmitter getEditorEmitter() throws JETException {
		return initializeEmitter("/templates/editor/Editor.javajet", EditorGenerator.class);
	}
	
	public static JETEmitter getCreateShortcutActionEmitter() throws JETException {
		return initializeEmitter("/templates/editor/CreateShortcutAction.javajet", CreateShortcutActionGenerator.class);
	}

	public static JETEmitter getLoadResourceActionEmitter() throws JETException {
		return initializeEmitter("/templates/editor/LoadResourceAction.javajet", LoadResourceActionGenerator.class);
	}
	
	public static JETEmitter getElementChooserEmitter() throws JETException {
		return initializeEmitter("/templates/editor/ElementChooser.javajet", ElementChooserGenerator.class);
	}
	
	public static JETEmitter getDocumentProviderEmitter() throws JETException {
		return initializeEmitter("/templates/editor/DocumentProvider.javajet", DocumentProviderGenerator.class);
	}
	
	public static JETEmitter getActionBarContributorEmitter() throws JETException {
		return initializeEmitter("/templates/editor/ActionBarContributor.javajet", ActionBarContributorGenerator.class);
	}

	public static JETEmitter getMatchingStrategyEmitter() throws JETException {
		return initializeEmitter("/templates/editor/MatchingStrategy.javajet", MatchingStrategyGenerator.class);
	}

	public static JETEmitter getPreferencesInitializerEmitter() throws JETException {
		return initializeEmitter("/templates/editor/PreferenceInitializer.javajet", PreferencesInitializerGenerator.class);
	}

	public static JETEmitter getPluginClassEmitter() throws JETException {
		return initializeEmitter("/templates/editor/Plugin.javajet", PluginGenerator.class);
	}

	public static JETEmitter getPluginXmlEmitter() throws JETException {
		return initializeEmitter("/templates/editor/plugin.xmljet", PluginXML.class);
	}

	public static JETEmitter getPluginPropertiesEmitter() throws JETException {
		return initializeEmitter("/templates/editor/plugin.propertiesjet", PluginPropertiesGenerator.class);
	}

	public static JETEmitter getBundleManifestEmitter() throws JETException {
		return initializeEmitter("/templates/editor/manifest.mfjet", ManifestGenerator.class);
	}

	public static JETEmitter getBuildPropertiesEmitter() throws JETException {
		return initializeEmitter("/templates/editor/build.propertiesjet", BuildPropertiesGenerator.class);
	}
	
	public static GIFEmitter getShortcutImageEmitter() {
		return new GIFEmitter("/templates/editor/shortcut.gif", getTemplatesBundle());
	}

	private static JETEmitter initializeEmitter(String relativeTemplatePath, Class precompiledTemplate) throws JETException {
		String path = relativeTemplatePath;
		URL url = getTemplatesBundle().getEntry(relativeTemplatePath);
		if (url != null) {
			path = url.toString();
		} else {
			if (!usePrecompiledTemplates()) {
				throw new JETException("Template " + relativeTemplatePath + " unavailable.");
			}
		}
		JETEmitter emitter = new JETEmitter(path, EmitterFactory.class.getClassLoader());
		try {
	        emitter.addVariable("EMF_CODEGEN", "org.eclipse.emf.codegen");
			emitter.addVariable("EMF_CODEGEN_ECORE", "org.eclipse.emf.codegen.ecore");
			emitter.addVariable("EMF_COMMON", "org.eclipse.emf.common");
			emitter.addVariable("EMF_ECORE", "org.eclipse.emf.ecore");
			emitter.addVariable("GMF_COMMON", "org.eclipse.gmf.common");
			emitter.addVariable("GMF_CODEGEN", "org.eclipse.gmf.codegen");

			if (usePrecompiledTemplates()) {
				Method m = precompiledTemplate.getMethod("generate", new Class[] {Object.class});
				emitter.setMethod(m);
			}
		} catch (NoSuchMethodException ex) {
			ex.printStackTrace();
			// FALL-THROUGH. Ignore, rely on template file use
		}
		return emitter;
	}
}
@


1.36
log
@still, need ref to codegen
@
text
@@


1.35
log
@include ref to oeg.common when not using precompiled templates
@
text
@d374 1
@


1.34
log
@#125828 Generated code is bypassing parser service...
@
text
@d373 1
a373 1
			emitter.addVariable("DGMM", "org.eclipse.gmf.codegen");
@


1.33
log
@#125729 Support labels based on multiple structural features
@
text
@d72 1
d259 4
@


1.32
log
@#124806
Loading Resource action added into the Diagram Editor popup menu.
@
text
@d63 1
d75 1
d202 4
d210 4
@


1.31
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@d32 1
d294 4
@


1.30
log
@#122054 support external node labels
@
text
@d67 1
d73 1
d247 8
@


1.29
log
@#122054 support external node labels (partial fix)
@
text
@d43 1
d109 4
@


1.28
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d44 2
d64 2
a65 1
import org.eclipse.gmf.codegen.templates.providers.LinkLabelViewFactoryGenerator;
a70 1
import org.eclipse.gmf.codegen.templates.providers.TextLabelViewFactoryGenerator;
d116 8
d204 2
a205 2
	public static JETEmitter getLinkLabelViewFactoryEmitter() throws JETException {
		return initializeEmitter("/templates/providers/LinkLabelViewFactory.javajet", LinkLabelViewFactoryGenerator.class);
d208 2
a209 2
	public static JETEmitter getTextLabelViewFactoryEmitter() throws JETException {
		return initializeEmitter("/templates/providers/TextLabelViewFactory.javajet", TextLabelViewFactoryGenerator.class);
@


1.27
log
@as part of #118447, basic build.properties is generated as part of the process to address possible plugin deployment
@
text
@d23 1
d30 1
d263 4
d268 4
d307 4
@


1.26
log
@#118447 new-style bundle manifest (manifest.mf)
@
text
@d22 1
d294 4
@


1.25
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d29 1
d33 1
d285 8
@


1.24
log
@#112187 generate separate class for the link label text view
@
text
@d44 1
d46 1
d147 8
@


1.23
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d40 2
d119 8
@


1.22
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d20 1
d44 1
d47 1
d85 6
d127 4
d140 5
a144 1
		return initializeEmitter("/templates/providers/CompartmentItemSemanticEditPolicy.javajet", CompartmentItemSemanticEditPolicyGenerator.class);
@


1.21
log
@#116399 Expose user-defined features of domain elements in property sheet
@
text
@d115 1
a115 1
		return initializeEmitter("/templates/providers/ItemSemanticEditPolicy.javajet", ItemSemanticEditPolicyGenerator.class);
d119 1
a119 1
		return initializeEmitter("/templates/providers/ReferenceConnectionEditPolicy.javajet", ReferenceConnectionEditPolicyGenerator.class);
d123 1
a123 1
		return initializeEmitter("/templates/providers/DiagramItemSemanticEditPolicy.javajet", DiagramItemSemanticEditPolicyGenerator.class);
d131 1
a131 1
		return initializeEmitter("/templates/providers/NodeItemSemanticEditPolicy.javajet", NodeItemSemanticEditPolicyGenerator.class);
d135 1
a135 1
		return initializeEmitter("/templates/providers/LinkItemSemanticEditPolicy.javajet", LinkItemSemanticEditPolicyGenerator.class);
d195 1
a195 1
		return initializeEmitter("/templates/editor/Palette.javajet", PaletteFactoryGenerator.class);
d235 1
a235 1
		return initializeEmitter("/templates/editor/PreferencesInitializer.javajet", PreferencesInitializerGenerator.class);
@


1.20
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d53 1
d180 4
@


1.19
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d41 6
d111 26
@


1.18
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@d35 1
d49 1
d93 4
d123 4
@


1.17
log
@[dstadnik] #113525 Get rid of LinkWithClass/LinkWithReference, use parallel hierarchy of modelFacet instead
@
text
@a39 1
import org.eclipse.gmf.codegen.templates.parts.PartSelectorsGenerator;
a40 1
import org.eclipse.gmf.codegen.templates.providers.ElementInitializersGenerator;
a97 4

	public static JETEmitter getEditPartSelectorsEmitter() throws JETException {
		return initializeEmitter("/templates/editor/PartSelectors.xmljet", PartSelectorsGenerator.class);
	}		
a127 4
	
	public static JETEmitter getElementInitializersEmitter() throws JETException {
		return initializeEmitter("/templates/providers/ElementInitializers.javajet", ElementInitializersGenerator.class);
	}	
@


1.16
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d27 1
a27 1
import org.eclipse.gmf.codegen.templates.editor.InitDiagramFileActionGen;
d33 1
a33 1
import org.eclipse.gmf.codegen.templates.editor.VisualIDRegistry;
d154 1
a154 1
		return initializeEmitter("/templates/editor/InitDiagramFileAction.javajet", InitDiagramFileActionGen.class);
d170 1
a170 1
		return initializeEmitter("/templates/editor/VisualIDRegistry.javajet", VisualIDRegistry.class);
@


1.15
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d42 1
d134 4
@


1.14
log
@[dstadnik] #113074  diagram action bar contributor
@
text
@d25 1
d180 4
@


1.13
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d20 1
a25 1
import org.eclipse.gmf.codegen.templates.editor.EditorMatchingStrategyGenerator;
d27 1
d179 6
a184 2
	public static JETEmitter getEditorMatchingStrategyEmitter() throws JETException {
		return initializeEmitter("/templates/editor/EditorMatchingStrategy.javajet", EditorMatchingStrategyGenerator.class);
@


1.12
log
@[dstadnik] #112900 metamodel support
@
text
@d41 1
d44 1
d136 8
@


1.11
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@d42 1
d130 4
d135 1
a135 1
	
@


1.10
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d31 1
d146 4
@


1.9
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d37 1
d94 4
@


1.8
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@a19 5
import org.eclipse.gmf.codegen.templates.diacanvas.InitDiagramFileActionGen;
import org.eclipse.gmf.codegen.templates.edit.LinkLabelViewFactoryGenerator;
import org.eclipse.gmf.codegen.templates.edit.SemanticHintsGenerator;
import org.eclipse.gmf.codegen.templates.edit.StructuralFeatureParserGenerator;
import org.eclipse.gmf.codegen.templates.edit.ViewFactoryGenerator;
d26 1
d39 4
d93 1
a93 1
	// edit
d96 1
a96 1
		return initializeEmitter("/templates/edit/StructuralFeatureParser.javajet", StructuralFeatureParserGenerator.class);
d100 1
a100 1
		return initializeEmitter("/templates/edit/SemanticHints.javajet", SemanticHintsGenerator.class);
d104 1
a104 1
		return initializeEmitter("/templates/edit/ViewFactory.javajet", ViewFactoryGenerator.class);
d108 1
a108 1
		return initializeEmitter("/templates/edit/LinkLabelViewFactory.javajet", LinkLabelViewFactoryGenerator.class);
a110 2
	// providers

@


1.7
log
@get rid of old diagramrt, use o.e.gmf.diagram.notation instead
@
text
@d21 1
d107 4
@


1.6
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@a105 22
	/*
	public static JETEmitter getNodeMetaInfoProviderEmitter() throws JETException {
		return initializeEmitter("/templates/edit/NodeMetaInfoProvider.javajet", NodeMetaInfoProviderGenerator.class);
	}

	public static JETEmitter getLinkMetaInfoProviderEmitter() throws JETException {
		return initializeEmitter("/templates/edit/LinkMetaInfoProvider.javajet", LinkMetaInfoProviderGenerator.class);
	}

	public static JETEmitter getCanvasMetaInfoProviderEmitter() throws JETException {
		return initializeEmitter("/templates/edit/CanvasMetaInfoProvider.javajet", CanvasMetaInfoProviderGenerator.class);
	}

	public static JETEmitter getMetaInfoProviderAF1Emitter() throws JETException {
		return initializeEmitter("/templates/edit/MetaInfoProviderAdapterFactory1.javajet", MetaInfoProviderAdapterFactory1Generator.class);
	}

	public static JETEmitter getMetaInfoProviderAF2Emitter() throws JETException {
		return initializeEmitter("/templates/edit/MetaInfoProviderAdapterFactory2.javajet", MetaInfoProviderAdapterFactory2Generator.class);
	}
	*/

@


1.5
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d39 1
d76 4
@


1.4
log
@[dstadnik] Use Notation Model as runtime model
@
text
@a19 1
import org.eclipse.gmf.codegen.templates.diacanvas.CanvasEditPartGen;
a20 1
import org.eclipse.gmf.codegen.templates.diacanvas.LinkEditPartGen;
d34 2
d37 1
d67 4
d75 2
a76 2
	public static JETEmitter getLinkEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/LinkEditPart.javajet", LinkEditPartGen.class);
d79 2
a80 2
	public static JETEmitter getCanvasEditPartEmitter() throws JETException {
		return initializeEmitter("/templates/parts/CanvasEditPart.javajet", CanvasEditPartGen.class);
@


1.3
log
@[ashatalin] Action to initialize diagram from existing domain model gets generated.
@
text
@a20 2
import org.eclipse.gmf.codegen.templates.diacanvas.EditPartFactoryGen;
import org.eclipse.gmf.codegen.templates.diacanvas.EditorGen;
d23 18
a40 9
import org.eclipse.gmf.codegen.templates.diacanvas.NodeEditPartGen;
import org.eclipse.gmf.codegen.templates.diacanvas.PaletteGen;
import org.eclipse.gmf.codegen.templates.diacanvas.PluginGen;
import org.eclipse.gmf.codegen.templates.diacanvas.PluginXML;
import org.eclipse.gmf.codegen.templates.edit.CanvasMetaInfoProviderGenerator;
import org.eclipse.gmf.codegen.templates.edit.LinkMetaInfoProviderGenerator;
import org.eclipse.gmf.codegen.templates.edit.MetaInfoProviderAdapterFactory1Generator;
import org.eclipse.gmf.codegen.templates.edit.MetaInfoProviderAdapterFactory2Generator;
import org.eclipse.gmf.codegen.templates.edit.NodeMetaInfoProviderGenerator;
d44 2
a45 1
 * Provides JET templates
d49 1
d52 2
a53 2
	private static boolean usePrecompiledTemplates() {
		return true;
d60 2
a61 2
	public static JETEmitter getPaletteEmitter() throws JETException {
		return initializeEmitter("/templates/editor/Palette.javajet", PaletteGen.class);
d64 2
d67 1
a67 1
		return initializeEmitter("/templates/parts/NodeEditPart.javajet", NodeEditPartGen.class);
d79 1
a79 1
		return initializeEmitter("/templates/parts/EditPartFactory.javajet", EditPartFactoryGen.class);
d82 4
a85 2
	public static JETEmitter getEditorEmitter() throws JETException {
		return initializeEmitter("/templates/editor/Editor.javajet", EditorGen.class);
d88 2
a89 6
	public static JETEmitter getPluginXmlEmitter() throws JETException {
		return initializeEmitter("/templates/editor/plugin.xmljet", PluginXML.class);
	}
	
	public static JETEmitter getInitDiagramFileActionEmitter() throws JETException {
		return initializeEmitter("/templates/editor/InitDiagramFileAction.javajet", InitDiagramFileActionGen.class);
d92 2
a93 2
	public static JETEmitter getPluginClassEmitter() throws JETException {
		return initializeEmitter("/templates/editor/Plugin.javajet", PluginGen.class);
d96 1
d116 61
a205 4

	private static Bundle getTemplatesBundle() {
		return Platform.getBundle(TEMPLATES_PLUGIN_ID);
	}
@


1.2
log
@NPE occurs on toString() if bundle fails to find the templates (returns null by design).  So, check return for null and if not using precompiled templates, throw JETException.  Otherwise, simply pass on relative template path as it appears to be unused if using precompiled templates anyway.
@
text
@d23 1
d78 4
@


1.1
log
@*** empty log message ***
@
text
@d103 10
a112 2
		String uri = getTemplatesBundle().getEntry(relativeTemplatePath).toString();
		JETEmitter emitter = new JETEmitter(uri, EmitterFactory.class.getClassLoader());
@

