head	1.22;
access;
symbols
	v20081022-1925:1.22
	v20081015-1925:1.22
	v20081008-1925:1.22
	v20081001-1925:1.22
	v20080930-1130:1.22
	v20080926-1245:1.22
	v20080924-1925:1.22
	v20080917-1925:1.22
	v20080911-1728:1.22
	v20080910-1520:1.22
	v20080903-1520:1.22
	v20080827-1520:1.22
	v20080813-1520:1.22
	v20080806-1520:1.22
	v20080722-1827:1.22
	v20080718-1731:1.22
	v20080716-1600:1.22
	v20080716-1642:1.22
	R2_1_maintenance:1.22.0.2
	Root_R2_1_maintenance:1.22
	R2_1_0:1.22
	v20080610-1132:1.22
	v20080603-1553:1.22
	v20080528-1052:1.22
	v20080521:1.22
	v20080516-1543:1.22
	v20080516-1143:1.22
	v20080512-1200:1.22
	v20080508-2000:1.22
	v20080507-1326:1.22
	v20080503-1740:1.22
	v20080501-1739:1.22
	v20080425-1959:1.22
	v20080417-1610:1.21
	v20080411-0411:1.21
	v20080404-1111:1.21
	v20080322-0000:1.21
	v20080222-1200:1.18
	v20080215-1500:1.18
	v20080207-0207:1.16.2.2
	v20071222-1111:1.18
	v20071214-1111:1.18
	v20071130-1111:1.18
	v20071124-0000:1.16.2.2
	v20071112-0000:1.18
	v20071108-0000:1.18
	v20071003-0000:1.18
	v20070928-0000:1.16.2.2
	v20070921-0000:1.16.2.2
	v20070915-0000:1.16.2.2
	v20070903-0000:1.16
	v20070809-0000:1.16
	R2_0_maintenance:1.16.0.2
	R2_0:1.16
	R4_20:1.16
	v20070621-0000:1.16
	RC3_20:1.16
	v20070614-1400:1.16
	v20070608-1300:1.16
	v20070605-1400:1.16
	v20070601-1400:1.16
	v20070525-1500:1.16
	v20070520-1200:1.16
	v20070518-1300:1.16
	v20070504-1000:1.16
	v20070427-0600:1.16
	v20070420-1000:1.16
	v20070413-1300:1.16
	v20070405-1100:1.15
	v20070403-1500:1.15
	v20070330-1300:1.15
	v20060330-1300:1.15
	v20070322-1100:1.15
	v20060316-0600:1.15
	v20070307-0700:1.14
	v20070301-1200:1.14
	v20070228-2000:1.14
	v20070221-1500:1.14
	v20070208-1800:1.14
	v20070202-0200:1.10
	v20070103-0300:1.14
	M4_20:1.14
	v20061222-1800:1.14
	v20061218-1200:1.14
	v20061214-0000:1.14
	v20061120-1300:1.14
	M3_20:1.14
	v20061117-0800:1.14
	v20061027-1200:1.10
	v20061020-1000:1.10
	v20061013-1330:1.14
	v20060919-0800:1.10
	v20060907-1100:1.10
	M1_20:1.10
	v20060904-1500:1.10
	v20060824-1600:1.10
	v20060817-1500:1.10
	v20060728-0500:1.10
	v20060713-1700:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	v20060627-1200:1.10
	v20060626-1420:1.10
	v20060620-0400:1.10
	v20060616-1400:1.10
	v20060616-1200:1.10
	v20060609-1400:1.10
	v20060531-1730:1.10
	v20060530-1930:1.10
	v20060526-1200:1.9
	v20060519-1300:1.8
	v20060519-0800:1.8
	v20060512-1000:1.8
	I20060512-1000:1.8
	I20060505-1400:1.8
	I20060428-1300:1.8
	I20060424-0500:1.8
	I20060424-0300:1.8
	M6_10:1.8
	I20060407-1200:1.8
	I20060331-1000:1.8
	I20060324-0300:1.8
	I20060317-1300:1.8
	I20060317-1200:1.8
	I20060316-1300:1.8
	I20060309-1300:1.8
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060202-1415:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.6
	I20060105-1630:1.6
	I20051230-1230:1.5
	I20051223-1100:1.5
	I20051217-0925:1.5
	I20051208-2000:1.5
	I20051201-1800:1.5
	I20051124-2000:1.5
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.22
date	2008.04.18.14.43.23;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	2e1d4808b3814567;

1.21
date	2008.03.05.14.50.44;	author atikhomirov;	state Exp;
branches;
next	1.20;
commitid	57747ceb33e4567;

1.20
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	5e5047cd7dd64567;

1.19
date	2008.02.29.21.19.52;	author atikhomirov;	state Exp;
branches;
next	1.18;
commitid	45a447c876f24567;

1.18
date	2007.09.10.18.42.05;	author dstadnik;	state Exp;
branches;
next	1.17;
commitid	32ee46e58ff84567;

1.17
date	2007.09.07.18.16.50;	author dstadnik;	state Exp;
branches;
next	1.16;
commitid	5d1f46e195874567;

1.16
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches
	1.16.2.1;
next	1.15;
commitid	725b461c97d64567;

1.15
date	2007.03.14.14.39.34;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	444245f8090b4567;

1.14
date	2006.09.28.18.20.49;	author radvorak;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.27.10.04.42;	author dstadnik;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.26.17.55.56;	author radvorak;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.05.23.41.12;	author radvorak;	state Exp;
branches;
next	1.10;

1.10
date	2006.05.29.12.45.39;	author dstadnik;	state Exp;
branches;
next	1.9;

1.9
date	2006.05.25.15.36.26;	author radvorak;	state Exp;
branches;
next	1.8;

1.8
date	2006.02.14.18.46.22;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.10.13.49.37;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.05.17.30.30;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.18.13.55.33;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.25.11.31.55;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.20.16.04.34;	author atikhomirov;	state Exp;
branches;
next	;

1.16.2.1
date	2007.09.07.18.10.38;	author dstadnik;	state Exp;
branches;
next	1.16.2.2;
commitid	58d446e194134567;

1.16.2.2
date	2007.09.10.18.19.22;	author dstadnik;	state Exp;
branches;
next	;
commitid	6c5946e58aa74567;


desc
@@


1.22
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import java.util.Collection;

import org.eclipse.emf.codegen.ecore.genmodel.GenClass;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenFeatureInitializer;
import org.eclipse.gmf.codegen.gmfgen.GenFeatureSeqInitializer;
import org.eclipse.gmf.codegen.gmfgen.GenReferenceNewElementSpec;
import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;


/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Feature Seq Initializer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenFeatureSeqInitializerImpl#getTypeModelFacet <em>Type Model Facet</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenFeatureSeqInitializerImpl#getInitializers <em>Initializers</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenFeatureSeqInitializerImpl#getElementClass <em>Element Class</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenFeatureSeqInitializerImpl#getCreatingInitializer <em>Creating Initializer</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenFeatureSeqInitializerImpl extends EObjectImpl implements GenFeatureSeqInitializer {
	/**
	 * The cached value of the '{@@link #getInitializers() <em>Initializers</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getInitializers()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenFeatureInitializer> initializers;

	/**
	 * The cached value of the '{@@link #getElementClass() <em>Element Class</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getElementClass()
	 * @@generated
	 * @@ordered
	 */
	protected GenClass elementClass;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenFeatureSeqInitializerImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenFeatureSeqInitializer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public TypeModelFacet getTypeModelFacet() {
		TypeModelFacet typeModelFacet = basicGetTypeModelFacet();
		return typeModelFacet != null && typeModelFacet.eIsProxy() ? (TypeModelFacet)eResolveProxy((InternalEObject)typeModelFacet) : typeModelFacet;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenFeatureInitializer> getInitializers() {
		if (initializers == null) {
			initializers = new EObjectContainmentWithInverseEList<GenFeatureInitializer>(GenFeatureInitializer.class, this, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFGenPackage.GEN_FEATURE_INITIALIZER__FEATURE_SEQ_INITIALIZER);
		}
		return initializers;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public GenClass getElementClass() {
		if(getCreatingInitializer() == null) {
			return (getTypeModelFacet() != null) ? getTypeModelFacet().getMetaClass() : null;
		}
		GenClass genClass = getElementClassGen();
		if(genClass != null) {
			return genClass;
		}
		return (getCreatingInitializer().getFeature() != null) ? getCreatingInitializer().getFeature().getTypeGenClass() : null;
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenClass getElementClassGen() {
		if (elementClass != null && elementClass.eIsProxy()) {
			InternalEObject oldElementClass = (InternalEObject)elementClass;
			elementClass = (GenClass)eResolveProxy(oldElementClass);
			if (elementClass != oldElementClass) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS, oldElementClass, elementClass));
			}
		}
		return elementClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public TypeModelFacet basicGetTypeModelFacet() {
		EObject container = eContainer();
		while(container != null && !(container instanceof TypeModelFacet)) {
			container = container.eContainer();
		}
		return (container != null) ? (TypeModelFacet)container : null;
	}	
		
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getInitializers()).basicAdd(otherEnd, msgs);
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return ((InternalEList<?>)getInitializers()).basicRemove(otherEnd, msgs);
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return eBasicSetContainer(null, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_REFERENCE_NEW_ELEMENT_SPEC__NEW_ELEMENT_INITIALIZERS, GenReferenceNewElementSpec.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
				if (resolve) return getTypeModelFacet();
				return basicGetTypeModelFacet();
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return getInitializers();
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				if (resolve) return getElementClass();
				return basicGetElementClass();
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return getCreatingInitializer();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				getInitializers().clear();
				getInitializers().addAll((Collection<? extends GenFeatureInitializer>)newValue);
				return;
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				setElementClass((GenClass)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				getInitializers().clear();
				return;
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				setElementClass((GenClass)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
				return basicGetTypeModelFacet() != null;
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
				return initializers != null && !initializers.isEmpty();
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS:
				return elementClass != null;
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				return getCreatingInitializer() != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenClass basicGetElementClass() {
		return elementClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setElementClass(GenClass newElementClass) {
		if(getCreatingInitializer() == null && eContainer() != null) {
			return;
		}
		setElementClassGen(newElementClass);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setElementClassGen(GenClass newElementClass) {
		GenClass oldElementClass = elementClass;
		elementClass = newElementClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT_CLASS, oldElementClass, elementClass));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenReferenceNewElementSpec getCreatingInitializer() {
		if (eContainerFeatureID != GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER) return null;
		return (GenReferenceNewElementSpec)eContainer();
	}
} //GenFeatureSeqInitializerImpl
@


1.21
log
@[221347] refactor/simplify ElementInitializers - op that is no longer in use was removed
@
text
@a20 1
import org.eclipse.emf.ecore.util.EcoreUtil;
d167 1
a167 1
				return basicSetCreatingInitializer((GenReferenceNewElementSpec)otherEnd, msgs);
d183 1
a183 1
				return basicSetCreatingInitializer(null, msgs);
a239 3
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				setCreatingInitializer((GenReferenceNewElementSpec)newValue);
				return;
a257 3
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER:
				setCreatingInitializer((GenReferenceNewElementSpec)null);
				return;
a323 31

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain basicSetCreatingInitializer(GenReferenceNewElementSpec newCreatingInitializer, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newCreatingInitializer, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setCreatingInitializer(GenReferenceNewElementSpec newCreatingInitializer) {
		if (newCreatingInitializer != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER && newCreatingInitializer != null)) {
			if (EcoreUtil.isAncestor(this, newCreatingInitializer))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newCreatingInitializer != null)
				msgs = ((InternalEObject)newCreatingInitializer).eInverseAdd(this, GMFGenPackage.GEN_REFERENCE_NEW_ELEMENT_SPEC__NEW_ELEMENT_INITIALIZERS, GenReferenceNewElementSpec.class, msgs);
			msgs = basicSetCreatingInitializer(newCreatingInitializer, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, newCreatingInitializer, newCreatingInitializer));
	}
@


1.20
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a154 25
	 * @@generated NOT
	 */
	public String getInitializerFieldName(String elementID) {
		StringBuffer buf = new StringBuffer();
		if (getCreatingInitializer() != null && getCreatingInitializer().getFeatureSeqInitializer() != null) {
			GenFeatureSeqInitializer parentFSeqInitializer = getCreatingInitializer().getFeatureSeqInitializer();
			if(parentFSeqInitializer.getCreatingInitializer() != null) {
				buf.append(parentFSeqInitializer.getInitializerFieldName(elementID)).append('_');
			}
			if(getCreatingInitializer().getFeature() != null) {
				buf.append(getCreatingInitializer().getFeature().getName());
				EList<GenFeatureSeqInitializer> siblingInitalizers = getCreatingInitializer().getNewElementInitializers();		
				if(siblingInitalizers.size() > 1) {
					int pos = siblingInitalizers.indexOf(this);
					buf.append('_').append(pos + 1);
				}				
			}
		} else {
			buf.append(elementID);
		}
		return buf.toString();
	}

		
	/**
@


1.19
log
@[150177] phase IV, fix last use of qualified class names in ElementInitializers (via GMFGen genmodel java methods). Cleaned genmodel of methods no longer in use, few methods moved to ElementInitializer.ext (pending removal/refactoring)
@
text
@d21 1
d193 1
a193 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
d209 1
a209 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__CREATING_INITIALIZER, msgs);
d266 3
d287 3
d356 31
@


1.18
log
@expose more ops in gmfgen
@
text
@a8 1
import java.util.ArrayList;
a9 3
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
a13 1
import org.eclipse.emf.common.util.BasicEList;
a22 1
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
a24 2
import org.eclipse.gmf.codegen.gmfgen.GenFeatureValueSpec;
import org.eclipse.gmf.codegen.gmfgen.GenJavaExpressionProvider;
a26 1
import org.eclipse.gmf.common.codegen.ImportAssistant;
a176 31
	/**
	 * @@generated NOT
	 */	
	public List<GenFeatureSeqInitializer> getAllFeatureSeqInitializers() {
		List<GenFeatureSeqInitializer> result = new ArrayList<GenFeatureSeqInitializer>();
		result.add(this);
		for (GenFeatureInitializer nextFeatureInit : getInitializers()) {
			result.addAll(nextFeatureInit.getAllFeatureSeqInitializers());
		}
		return Collections.unmodifiableList(result);
	}
	
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getElementClassAccessorName() {
		GenClass genClass = getElementClass();
		return (genClass != null) ? genClass.getClassifierAccessorName() : null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getElementQualifiedPackageInterfaceName() {
		GenClass genClass = getElementClass();
		return (genClass != null) ? genClass.getGenPackage().getQualifiedPackageInterfaceName() : null;		
	}
a180 27
	 * @@generated NOT
	 */
	public String getElementClassAccessor() {
		return getElementClassAccessor(null);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getFeatureAccessor(GenFeatureInitializer ftInitializer) {
		return getFeatureAccessor(ftInitializer, null);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<GenFeatureValueSpec> getJavaExpressionFeatureInitializersList(GenExpressionProviderContainer expressionProviders) {
		return new BasicEList<GenFeatureValueSpec>(getJavaExpressionFeatureInitializers(expressionProviders));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
a348 49

	public String getElementClassAccessor(ImportAssistant importAssistant) {
		if(getElementClass() == null) {
			return ""; //$NON-NLS-1$
		}
		StringBuffer buf = new StringBuffer();
		buf.append(getElementQualifiedPackageInterfaceName())
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(getElementClass().getClassifierAccessorName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	}
	
	public String getFeatureAccessor(GenFeatureInitializer featureInitializer, ImportAssistant importAssistant) {
		if(featureInitializer.getFeature() == null) {
			return ""; //$NON-NLS-1$
		}
		StringBuffer buf = new StringBuffer();
		String fqn = featureInitializer.getFeatureQualifiedPackageInterfaceName();
		if (importAssistant != null) {
			fqn = importAssistant.getImportedName(fqn);
		}
		buf.append(fqn)
			.append(".eINSTANCE.get") //$NON-NLS-1$
			.append(featureInitializer.getFeature().getFeatureAccessorName())
			.append("()"); //$NON-NLS-1$
		return buf.toString();
	}
	
	public LinkedHashSet<GenFeatureValueSpec> getJavaExpressionFeatureInitializers(GenExpressionProviderContainer expressionProviders) {
		LinkedHashSet<GenFeatureValueSpec> result = new LinkedHashSet<GenFeatureValueSpec>();
		if(expressionProviders != null) {
			for (GenFeatureInitializer next : getInitializers()) {
				if(next instanceof GenFeatureValueSpec) {
					GenFeatureValueSpec featureValueSpec = (GenFeatureValueSpec) next;				
					if(expressionProviders.getProvider(featureValueSpec) instanceof GenJavaExpressionProvider && 
						!expressionProviders.isCopy(featureValueSpec)) {
						result.add(featureValueSpec);
					}
				} else {					
					for (GenFeatureSeqInitializer ftSeqInitializer : next.getAllFeatureSeqInitializers()) {
						result.addAll(ftSeqInitializer.getJavaExpressionFeatureInitializers(expressionProviders));
					}					
				}
			}
		}
		return result;
	}

@


1.17
log
@regenerate; add java expr accessor to the model
@
text
@d223 18
d434 5
a438 1
		buf.append(importAssistant.getImportedName(featureInitializer.getFeatureQualifiedPackageInterfaceName()))
@


1.16
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d18 1
d221 9
@


1.16.2.1
log
@regenerate; add java expr getter to model
@
text
@a17 1
import org.eclipse.emf.common.util.BasicEList;
a219 9
	 * @@generated NOT
	 */
	public EList<GenFeatureValueSpec> getJavaExpressionFeatureInitializersList(GenExpressionProviderContainer expressionProviders) {
		return new BasicEList<GenFeatureValueSpec>(getJavaExpressionFeatureInitializers(expressionProviders));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
@


1.16.2.2
log
@expose more ops in gmfgen
@
text
@a222 18
	public String getElementClassAccessor() {
		return getElementClassAccessor(null);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public String getFeatureAccessor(GenFeatureInitializer ftInitializer) {
		return getFeatureAccessor(ftInitializer, null);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
d416 1
a416 5
		String fqn = featureInitializer.getFeatureQualifiedPackageInterfaceName();
		if (importAssistant != null) {
			fqn = importAssistant.getImportedName(fqn);
		}
		buf.append(fqn)
@


1.15
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d62 1
a62 1
	protected EList<GenFeatureInitializer> initializers = null;
d72 1
a72 1
	protected GenClass elementClass = null;
@


1.14
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
@
text
@a11 1
import java.util.Iterator;
d62 1
a62 1
	protected EList initializers = null;
d88 1
d108 1
a108 1
	public EList getInitializers() {
d110 1
a110 1
			initializers = new EObjectContainmentWithInverseEList(GenFeatureInitializer.class, this, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFGenPackage.GEN_FEATURE_INITIALIZER__FEATURE_SEQ_INITIALIZER);
d173 1
a173 1
				EList siblingInitalizers = getCreatingInitializer().getNewElementInitializers();		
d191 1
a191 2
		for (Iterator it = getInitializers().iterator(); it.hasNext();) {
			GenFeatureInitializer nextFeatureInit = (GenFeatureInitializer)it.next();
d222 2
d227 1
a227 1
				return ((InternalEList)getInitializers()).basicAdd(otherEnd, msgs);
d241 1
d245 1
a245 1
				return ((InternalEList)getInitializers()).basicRemove(otherEnd, msgs);
d257 1
d271 1
d293 2
d299 1
a299 1
				getInitializers().addAll((Collection)newValue);
d313 1
d331 1
d416 1
a416 2
			for (Iterator it = getInitializers().iterator(); it.hasNext();) {
				GenFeatureInitializer next = (GenFeatureInitializer) it.next();
@


1.13
log
@#114200 Provide an option to generate RCP application
@
text
@d353 1
a353 1
		if(getCreatingInitializer() == null) {
@


1.12
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
- updating ElementTypes template
@
text
@d380 1
a380 1
	
@


1.11
log
@#138440 Modify Feature Sequence initializer to support containment references to model elements
- updating gmfgen
@
text
@d13 1
d28 1
d31 2
d35 1
d168 3
a170 1
			buf.append(parentFSeqInitializer.getInitializerFieldName(elementID)).append('_');			
d173 5
d217 1
a217 1

d380 45
@


1.10
log
@ensure that obligatory icons are specified; provide reasonable defaults for design diagrams
@
text
@d9 1
d11 3
d16 1
d20 1
d22 2
d27 1
d29 1
a29 1
import org.eclipse.gmf.codegen.gmfgen.GenFeatureValueSpec;
d40 1
d42 2
d49 1
a49 1
public class GenFeatureSeqInitializerImpl extends GenElementInitializerImpl implements GenFeatureSeqInitializer {
d61 10
d93 10
d105 1
a105 1
			initializers = new EObjectContainmentWithInverseEList(GenFeatureValueSpec.class, this, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS, GMFGenPackage.GEN_FEATURE_VALUE_SPEC__FEATURE_SEQ_INITIALIZER);
d115 76
d215 4
d232 2
d243 13
d258 3
d263 5
d283 3
d300 3
d314 2
d318 4
d326 17
a342 4
	private GenClass getElementClass() {
		TypeModelFacet typeModelFacet = getTypeModelFacet();
		if(typeModelFacet == null) {
			return null;
d344 23
a366 1
		return typeModelFacet.getMetaClass();
@


1.9
log
@#143716 Validation should check gmfgen::GenFeatureSeqInitializer for initialized feature duplicates
@
text
@a16 1
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
@


1.8
log
@[rdvorak] #127700 Rename genmodel::ModelElementSelector as a generic GenConstraint element
@
text
@d16 1
d74 1
a74 1
			initializers = new EObjectContainmentEList(GenFeatureValueSpec.class, this, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS);
d104 13
@


1.7
log
@#123240, part 1 - get rid of StringArray datatype
@
text
@a9 2
import java.util.HashSet;
import java.util.Iterator;
a12 1
import org.eclipse.emf.common.util.BasicEList;
a82 18
	public EList getRequiredPluginIDs() {
		HashSet ids = new HashSet();
		for (Iterator it = getInitializers().iterator(); it.hasNext();) {
			GenFeatureValueSpec valueSpec = (GenFeatureValueSpec) it.next();
			// For now hardcode only the default support for OCL
			// TODO - to be refactored to plugg-in other languages
			if("ocl".equals(valueSpec.getLanguage())) { //$NON-NLS-1$
				ids.add("org.eclipse.emf.query.ocl"); //$NON-NLS-1$
			}
		}
		return new BasicEList(ids);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
@


1.6
log
@With #114177 in mind, viewmaps in genmodel should be simplistic as much as possible, no need to duplicate figure descriptions available in gmfgraph (and/or code generated from it)
@
text
@d15 1
d86 1
a86 1
	public String[] getRequiredPluginIDs() {
d96 1
a96 1
		return (String[]) ids.toArray(new String[ids.size()]);
@


1.5
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@a14 1

a15 1

a16 1
import org.eclipse.emf.ecore.EStructuralFeature;
a17 1

a19 1

d123 4
a126 48
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
					return eBasicSetContainer(null, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET, msgs);
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__INITIALIZERS:
					return ((InternalEList)getInitializers()).basicRemove(otherEnd, msgs);
				default:
					return eDynamicInverseRemove(otherEnd, featureID, baseClass, msgs);
			}
		}
		return eBasicSetContainer(null, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
					return eContainer.eInverseRemove(this, GMFGenPackage.TYPE_MODEL_FACET__MODEL_ELEMENT_INITIALIZER, TypeModelFacet.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
d128 1
a128 1
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
d136 2
a137 4
	public Object eGet(EStructuralFeature eFeature, boolean resolve) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
				return getTypeModelFacet();
d141 1
a141 1
		return eDynamicGet(eFeature, resolve);
d149 2
a150 2
	public void eSet(EStructuralFeature eFeature, Object newValue) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d156 1
a156 1
		eDynamicSet(eFeature, newValue);
d164 2
a165 2
	public void eUnset(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
d170 1
a170 1
		eDynamicUnset(eFeature);
d178 2
a179 4
	public boolean eIsSet(EStructuralFeature eFeature) {
		switch (eDerivedStructuralFeatureID(eFeature)) {
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
				return getTypeModelFacet() != null;
d183 1
a183 1
		return eDynamicIsSet(eFeature);
@


1.4
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d128 21
d168 17
@


1.3
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@a127 21
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, Class baseClass, NotificationChain msgs) {
		if (featureID >= 0) {
			switch (eDerivedStructuralFeatureID(featureID, baseClass)) {
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
					if (eContainer != null)
						msgs = eBasicRemoveFromContainer(msgs);
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET, msgs);
				default:
					return eDynamicInverseAdd(otherEnd, featureID, baseClass, msgs);
			}
		}
		if (eContainer != null)
			msgs = eBasicRemoveFromContainer(msgs);
		return eBasicSetContainer(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
a146 17
	public NotificationChain eBasicRemoveFromContainer(NotificationChain msgs) {
		if (eContainerFeatureID >= 0) {
			switch (eContainerFeatureID) {
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__TYPE_MODEL_FACET:
					return eContainer.eInverseRemove(this, GMFGenPackage.TYPE_MODEL_FACET__MODEL_ELEMENT_INITIALIZER, TypeModelFacet.class, msgs);
				default:
					return eDynamicBasicRemoveFromContainer(msgs);
			}
		}
		return eContainer.eInverseRemove(this, EOPPOSITE_FEATURE_BASE - eContainerFeatureID, null, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
@


1.2
log
@[rdvorak] #113522 correct context for initializers
@
text
@a25 1
import org.eclipse.gmf.codegen.gmfgen.GenBaseElement;
d28 2
a29 4
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.ModelFacet;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
d131 1
a131 1
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT:
d134 1
a134 1
					return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT, msgs);
d152 2
a153 2
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT:
					return eBasicSetContainer(null, GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT, msgs);
d171 2
a172 2
				case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT:
					return eContainer.eInverseRemove(this, GMFGenPackage.GEN_BASE_ELEMENT__MODEL_ELEMENT_INITIALIZER, GenBaseElement.class, msgs);
d187 2
a188 2
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT:
				return getElement();
d231 2
a232 2
			case GMFGenPackage.GEN_FEATURE_SEQ_INITIALIZER__ELEMENT:
				return getElement() != null;
d240 2
a241 2
		GenBaseElement baseElement = getElement();
		if(baseElement == null) {
d244 1
a244 8
		GenClass contextEClass = null;
		if(baseElement instanceof GenNode) {
			contextEClass = ((GenNode)baseElement).getDomainMetaClass();
		} else if(baseElement instanceof GenLink) {
			ModelFacet facet = ((GenLink)baseElement).getModelFacet(); 
			contextEClass = (facet instanceof TypeLinkModelFacet) ? ((TypeLinkModelFacet)facet).getMetaClass() : null;		
		}
		return contextEClass;
@


1.1
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d13 1
d29 4
d109 20
d242 15
@

