head	1.260;
access;
symbols
	v20081022-1925:1.260
	v20081015-1925:1.260
	v20081008-1925:1.259
	v20081001-1925:1.259
	v20080930-1130:1.258
	v20080926-1245:1.258
	v20080924-1925:1.258
	v20080917-1925:1.257
	v20080911-1728:1.256
	v20080910-1520:1.256
	v20080903-1520:1.256
	v20080827-1520:1.251
	v20080813-1520:1.250
	v20080806-1520:1.250
	v20080722-1827:1.250
	v20080718-1731:1.250
	v20080716-1600:1.249
	v20080716-1642:1.250
	R2_1_maintenance:1.249.0.2
	Root_R2_1_maintenance:1.249
	R2_1_0:1.249
	v20080610-1132:1.249
	v20080603-1553:1.248
	v20080528-1052:1.248
	v20080521:1.247
	v20080516-1543:1.247
	v20080516-1143:1.247
	v20080512-1200:1.247
	v20080508-2000:1.247
	v20080507-1326:1.247
	v20080503-1740:1.247
	v20080501-1739:1.247
	v20080425-1959:1.247
	v20080417-1610:1.247
	v20080411-0411:1.247
	v20080404-1111:1.247
	v20080322-0000:1.247
	v20080222-1200:1.245
	v20080215-1500:1.245
	v20080207-0207:1.240.2.5
	v20071222-1111:1.245
	v20071214-1111:1.245
	v20071130-1111:1.245
	v20071124-0000:1.240.2.5
	v20071112-0000:1.245
	v20071108-0000:1.245
	v20071003-0000:1.245
	v20070928-0000:1.240.2.5
	v20070921-0000:1.240.2.5
	v20070915-0000:1.240.2.5
	v20070903-0000:1.240
	v20070809-0000:1.240
	R2_0_maintenance:1.240.0.2
	R2_0:1.240
	R4_20:1.240
	v20070621-0000:1.240
	RC3_20:1.237
	v20070614-1400:1.237
	v20070608-1300:1.220
	v20070605-1400:1.217
	v20070601-1400:1.209
	v20070525-1500:1.208
	v20070520-1200:1.207
	v20070518-1300:1.207
	v20070504-1000:1.198
	v20070427-0600:1.189
	v20070420-1000:1.185
	v20070413-1300:1.181
	v20070405-1100:1.180
	v20070403-1500:1.179
	v20070330-1300:1.179
	v20060330-1300:1.179
	v20070322-1100:1.175
	v20060316-0600:1.170
	v20070307-0700:1.168
	v20070301-1200:1.168
	v20070228-2000:1.167
	v20070221-1500:1.166
	v20070208-1800:1.166
	v20070202-0200:1.100.2.1
	v20070103-0300:1.154
	M4_20:1.154
	v20061222-1800:1.148
	v20061218-1200:1.146
	v20061214-0000:1.141
	v20061120-1300:1.129
	M3_20:1.129
	v20061117-0800:1.129
	v20061027-1200:1.100.2.1
	v20061020-1000:1.100.2.1
	v20061013-1330:1.122
	v20060919-0800:1.100.2.1
	v20060907-1100:1.100
	M1_20:1.105
	v20060904-1500:1.105
	v20060824-1600:1.100
	v20060817-1500:1.100
	v20060728-0500:1.100
	v20060713-1700:1.100
	R1_0_maintenance:1.100.0.2
	R1_0:1.100
	v20060627-1200:1.100
	v20060626-1420:1.100
	v20060620-0400:1.99
	v20060616-1400:1.98
	v20060616-1200:1.98
	v20060609-1400:1.96
	v20060531-1730:1.94
	v20060530-1930:1.93
	v20060526-1200:1.91
	v20060519-1300:1.88
	v20060519-0800:1.87
	v20060512-1000:1.82
	I20060512-1000:1.82
	I20060505-1400:1.79
	I20060428-1300:1.79
	I20060424-0500:1.78
	I20060424-0300:1.78
	M6_10:1.77
	I20060407-1200:1.70
	I20060331-1000:1.69
	I20060324-0300:1.68
	I20060317-1300:1.68
	I20060317-1200:1.68
	I20060316-1300:1.68
	I20060309-1300:1.62
	M5_10:1.62
	S20060303-1600:1.62
	I20060227-1730:1.61
	I20060216-1945:1.60
	I20060210-1715:1.56
	I20060209-1815:1.56
	I20060203-0830:1.50
	I20060202-1415:1.50
	I20060129-1145:1.48
	I20060127-0900:1.47
	I20060120-1530:1.43
	I20060113-1700:1.40
	M4_10:1.40
	I20060107-1100:1.36
	I20060105-1630:1.36
	I20051230-1230:1.36
	I20051223-1100:1.36
	I20051217-0925:1.36
	I20051208-2000:1.36
	I20051201-1800:1.36
	I20051124-2000:1.34
	M3_10:1.30
	I20051118-1245:1.30
	I20051111-1800:1.25
	I20051106-0900:1.22
	v20051030:1.21
	v20050828:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.260
date	2008.10.14.12.53.49;	author atikhomirov;	state Exp;
branches;
next	1.259;
commitid	2e35d48f496534567;

1.259
date	2008.10.01.14.43.09;	author atikhomirov;	state Exp;
branches;
next	1.258;
commitid	3462648e38c794567;

1.258
date	2008.09.23.14.54.39;	author atikhomirov;	state Exp;
branches;
next	1.257;
commitid	2569e48d903244567;

1.257
date	2008.09.16.19.22.28;	author atikhomirov;	state Exp;
branches;
next	1.256;
commitid	18fb48d007744567;

1.256
date	2008.08.29.18.54.10;	author atikhomirov;	state Exp;
branches;
next	1.255;
commitid	48f948b845d14567;

1.255
date	2008.08.29.16.48.17;	author atikhomirov;	state Exp;
branches;
next	1.254;
commitid	626748b828504567;

1.254
date	2008.08.29.16.10.05;	author atikhomirov;	state Exp;
branches;
next	1.253;
commitid	4a1948b81f524567;

1.253
date	2008.08.29.11.42.44;	author dstadnik;	state Exp;
branches;
next	1.252;
commitid	693e48b7e0ae4567;

1.252
date	2008.08.28.21.22.12;	author atikhomirov;	state Exp;
branches;
next	1.251;
commitid	3cb348b717024567;

1.251
date	2008.08.26.20.52.27;	author atikhomirov;	state Exp;
branches;
next	1.250;
commitid	3a7648b46d064567;

1.250
date	2008.07.02.17.23.50;	author atikhomirov;	state Exp;
branches;
next	1.249;
commitid	2083486bb9a54567;

1.249
date	2008.06.05.11.42.19;	author atikhomirov;	state Exp;
branches;
next	1.248;
commitid	242b4847d11a4567;

1.248
date	2008.05.26.18.44.22;	author dstadnik;	state Exp;
branches;
next	1.247;
commitid	3a58483b04fe4567;

1.247
date	2008.02.28.20.25.43;	author atikhomirov;	state Exp;
branches;
next	1.246;
commitid	4dd847c718c64567;

1.246
date	2008.02.27.17.30.20;	author atikhomirov;	state Exp;
branches;
next	1.245;
commitid	22cf47c59e244567;

1.245
date	2007.09.14.18.23.24;	author dstadnik;	state Exp;
branches;
next	1.244;
commitid	153b46ead19a4567;

1.244
date	2007.09.14.14.53.25;	author dstadnik;	state Exp;
branches;
next	1.243;
commitid	40c546eaa0634567;

1.243
date	2007.09.13.18.19.02;	author dstadnik;	state Exp;
branches;
next	1.242;
commitid	51ec46e97f104567;

1.242
date	2007.09.12.12.22.30;	author dstadnik;	state Exp;
branches;
next	1.241;
commitid	164a46e7da054567;

1.241
date	2007.09.10.21.17.30;	author dstadnik;	state Exp;
branches;
next	1.240;
commitid	153446e5b4694567;

1.240
date	2007.06.20.15.50.09;	author dstadnik;	state Exp;
branches
	1.240.2.1;
next	1.239;
commitid	3ba446794caf4567;

1.239
date	2007.06.19.19.26.18;	author dstadnik;	state Exp;
branches;
next	1.238;
commitid	611446782dd84567;

1.238
date	2007.06.15.14.58.04;	author dstadnik;	state Exp;
branches;
next	1.237;
commitid	6d674672a8f74567;

1.237
date	2007.06.13.17.27.14;	author dstadnik;	state Exp;
branches;
next	1.236;
commitid	7428467028f04567;

1.236
date	2007.06.13.16.02.40;	author ashatalin;	state Exp;
branches;
next	1.235;
commitid	314d4670151f4567;

1.235
date	2007.06.13.15.54.59;	author dstadnik;	state Exp;
branches;
next	1.234;
commitid	3f1d467013514567;

1.234
date	2007.06.13.15.14.23;	author dstadnik;	state Exp;
branches;
next	1.233;
commitid	78d4467009cd4567;

1.233
date	2007.06.13.14.48.18;	author ashatalin;	state Exp;
branches;
next	1.232;
commitid	3455467003af4567;

1.232
date	2007.06.13.14.02.28;	author ashatalin;	state Exp;
branches;
next	1.231;
commitid	3d5e466ff8ed4567;

1.231
date	2007.06.13.12.49.09;	author ashatalin;	state Exp;
branches;
next	1.230;
commitid	55a1466fe7bb4567;

1.230
date	2007.06.13.12.27.25;	author dstadnik;	state Exp;
branches;
next	1.229;
commitid	4af4466fe2ac4567;

1.229
date	2007.06.12.23.41.58;	author dstadnik;	state Exp;
branches;
next	1.228;
commitid	2e6e466f2f424567;

1.228
date	2007.06.12.14.18.39;	author ashatalin;	state Exp;
branches;
next	1.227;
commitid	6fec466eab3f4567;

1.227
date	2007.06.12.11.56.29;	author dstadnik;	state Exp;
branches;
next	1.226;
commitid	7fc6466e89e84567;

1.226
date	2007.06.12.11.36.12;	author dstadnik;	state Exp;
branches;
next	1.225;
commitid	31a3466e852b4567;

1.225
date	2007.06.11.17.15.57;	author ashatalin;	state Exp;
branches;
next	1.224;
commitid	73b5466d834a4567;

1.224
date	2007.06.11.16.40.53;	author ashatalin;	state Exp;
branches;
next	1.223;
commitid	4fdb466d7b0f4567;

1.223
date	2007.06.11.14.58.50;	author ashatalin;	state Exp;
branches;
next	1.222;
commitid	317d466d63264567;

1.222
date	2007.06.11.13.36.23;	author ashatalin;	state Exp;
branches;
next	1.221;
commitid	4172466d4fd34567;

1.221
date	2007.06.11.10.45.38;	author ashatalin;	state Exp;
branches;
next	1.220;
commitid	2581466d27cc4567;

1.220
date	2007.06.07.17.32.55;	author dstadnik;	state Exp;
branches;
next	1.219;
commitid	5505466841464567;

1.219
date	2007.06.07.11.35.20;	author dstadnik;	state Exp;
branches;
next	1.218;
commitid	251b4667ed774567;

1.218
date	2007.06.07.10.59.13;	author dstadnik;	state Exp;
branches;
next	1.217;
commitid	535f4667e5014567;

1.217
date	2007.06.05.17.01.07;	author dstadnik;	state Exp;
branches;
next	1.216;
commitid	7adc466596d24567;

1.216
date	2007.06.05.15.38.46;	author dstadnik;	state Exp;
branches;
next	1.215;
commitid	6d90466583854567;

1.215
date	2007.06.05.15.35.47;	author dstadnik;	state Exp;
branches;
next	1.214;
commitid	6ce3466582d24567;

1.214
date	2007.06.04.17.14.38;	author dstadnik;	state Exp;
branches;
next	1.213;
commitid	54d4664487d4567;

1.213
date	2007.06.04.16.40.24;	author dstadnik;	state Exp;
branches;
next	1.212;
commitid	33fc466440784567;

1.212
date	2007.06.04.15.56.46;	author dstadnik;	state Exp;
branches;
next	1.211;
commitid	20bf4664363d4567;

1.211
date	2007.06.04.15.13.45;	author dstadnik;	state Exp;
branches;
next	1.210;
commitid	27ac46642c284567;

1.210
date	2007.06.04.12.58.12;	author dstadnik;	state Exp;
branches;
next	1.209;
commitid	6a8946640c624567;

1.209
date	2007.05.28.16.52.23;	author ashatalin;	state Exp;
branches;
next	1.208;
commitid	51cb465b08c54567;

1.208
date	2007.05.22.18.18.54;	author ashatalin;	state Exp;
branches;
next	1.207;
commitid	5a1d465333ad4567;

1.207
date	2007.05.18.14.56.13;	author dstadnik;	state Exp;
branches;
next	1.206;
commitid	36ed464dbe8c4567;

1.206
date	2007.05.15.18.34.13;	author ashatalin;	state Exp;
branches;
next	1.205;
commitid	25434649fd1f4567;

1.205
date	2007.05.14.14.27.04;	author dstadnik;	state Exp;
branches;
next	1.204;
commitid	38ba464871b24567;

1.204
date	2007.05.11.16.01.30;	author ashatalin;	state Exp;
branches;
next	1.203;
commitid	44f84644934f4567;

1.203
date	2007.05.11.13.50.53;	author ashatalin;	state Exp;
branches;
next	1.202;
commitid	6340464474b24567;

1.202
date	2007.05.11.12.26.16;	author dstadnik;	state Exp;
branches;
next	1.201;
commitid	398e464460e54567;

1.201
date	2007.05.10.13.12.15;	author dstadnik;	state Exp;
branches;
next	1.200;
commitid	52b46431a2d4567;

1.200
date	2007.05.10.09.23.22;	author dstadnik;	state Exp;
branches;
next	1.199;
commitid	59a14642e4894567;

1.199
date	2007.05.04.15.27.49;	author ashatalin;	state Exp;
branches;
next	1.198;
commitid	6ef6463b50ec4567;

1.198
date	2007.05.04.11.55.25;	author dstadnik;	state Exp;
branches;
next	1.197;
commitid	64c2463b1f274567;

1.197
date	2007.05.04.09.57.57;	author dstadnik;	state Exp;
branches;
next	1.196;
commitid	74c2463b03a54567;

1.196
date	2007.05.04.09.37.16;	author dstadnik;	state Exp;
branches;
next	1.195;
commitid	5e76463afecb4567;

1.195
date	2007.05.04.09.16.10;	author dstadnik;	state Exp;
branches;
next	1.194;
commitid	2a14463af9d94567;

1.194
date	2007.05.03.11.03.11;	author dstadnik;	state Exp;
branches;
next	1.193;
commitid	f824639c16d4567;

1.193
date	2007.05.03.09.58.55;	author dstadnik;	state Exp;
branches;
next	1.192;
commitid	518a4639b24f4567;

1.192
date	2007.05.01.17.56.31;	author ashatalin;	state Exp;
branches;
next	1.191;
commitid	58c746377f464567;

1.191
date	2007.05.01.13.28.04;	author ashatalin;	state Exp;
branches;
next	1.190;
commitid	143a463740554567;

1.190
date	2007.04.27.11.00.33;	author dstadnik;	state Exp;
branches;
next	1.189;
commitid	23d34631d7d04567;

1.189
date	2007.04.27.09.26.27;	author dstadnik;	state Exp;
branches;
next	1.188;
commitid	4a7d4631c1c24567;

1.188
date	2007.04.27.08.33.37;	author dstadnik;	state Exp;
branches;
next	1.187;
commitid	15c64631b5604567;

1.187
date	2007.04.24.18.22.42;	author ashatalin;	state Exp;
branches;
next	1.186;
commitid	1456462e4af04567;

1.186
date	2007.04.23.14.04.58;	author dstadnik;	state Exp;
branches;
next	1.185;
commitid	4a11462cbd094567;

1.185
date	2007.04.18.17.34.28;	author ashatalin;	state Exp;
branches;
next	1.184;
commitid	2e44462656a24567;

1.184
date	2007.04.18.17.03.13;	author atikhomirov;	state Exp;
branches;
next	1.183;
commitid	581546264f514567;

1.183
date	2007.04.17.12.46.11;	author dstadnik;	state Exp;
branches;
next	1.182;
commitid	46154624c1914567;

1.182
date	2007.04.16.16.48.15;	author atikhomirov;	state Exp;
branches;
next	1.181;
commitid	7d784623a8ce4567;

1.181
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.180;
commitid	725b461c97d64567;

1.180
date	2007.04.03.19.28.21;	author ashatalin;	state Exp;
branches;
next	1.179;
commitid	24744612aad14567;

1.179
date	2007.03.28.19.33.36;	author ashatalin;	state Exp;
branches;
next	1.178;
commitid	6e6d460ac2e04567;

1.178
date	2007.03.28.08.49.38;	author dstadnik;	state Exp;
branches;
next	1.177;
commitid	2240460a2c174567;

1.177
date	2007.03.23.09.27.29;	author dstadnik;	state Exp;
branches;
next	1.176;
commitid	6f4346039d7f4567;

1.176
date	2007.03.22.20.48.50;	author ashatalin;	state Exp;
branches;
next	1.175;
commitid	14974602ebb14567;

1.175
date	2007.03.20.20.15.02;	author ashatalin;	state Exp;
branches;
next	1.174;
commitid	1c03460040bd4567;

1.174
date	2007.03.20.14.49.13;	author ashatalin;	state Exp;
branches;
next	1.173;
commitid	761245fff4684567;

1.173
date	2007.03.16.16.40.13;	author dstadnik;	state Exp;
branches;
next	1.172;
commitid	5ac345fac86b4567;

1.172
date	2007.03.16.16.09.53;	author ashatalin;	state Exp;
branches;
next	1.171;
commitid	565445fac1444567;

1.171
date	2007.03.16.14.45.34;	author dstadnik;	state Exp;
branches;
next	1.170;
commitid	2a5045faad8d4567;

1.170
date	2007.03.15.16.11.54;	author dstadnik;	state Exp;
branches;
next	1.169;
commitid	620045f9703f4567;

1.169
date	2007.03.14.14.39.36;	author atikhomirov;	state Exp;
branches;
next	1.168;
commitid	444245f8090b4567;

1.168
date	2007.03.01.13.05.36;	author dstadnik;	state Exp;
branches;
next	1.167;
commitid	1a6045e6cf9e4567;

1.167
date	2007.02.22.19.49.50;	author ashatalin;	state Exp;
branches;
next	1.166;
commitid	299645ddf3da4567;

1.166
date	2007.02.07.12.05.15;	author ashatalin;	state Exp;
branches;
next	1.165;
commitid	37da45c9c07a4567;

1.165
date	2007.02.07.00.37.48;	author atikhomirov;	state Exp;
branches;
next	1.164;
commitid	c5d45c91f504567;

1.164
date	2007.02.06.20.39.22;	author atikhomirov;	state Exp;
branches;
next	1.163;
commitid	68a045c8e7794567;

1.163
date	2007.02.02.10.49.59;	author ashatalin;	state Exp;
branches;
next	1.162;
commitid	527745c317554567;

1.162
date	2007.02.01.13.33.34;	author atikhomirov;	state Exp;
branches;
next	1.161;
commitid	18e445c1ec2e4567;

1.161
date	2007.02.01.11.26.41;	author dstadnik;	state Exp;
branches;
next	1.160;
commitid	69af45c1ce6e4567;

1.160
date	2007.01.29.18.09.13;	author ashatalin;	state Exp;
branches;
next	1.159;
commitid	21cf45be38464567;

1.159
date	2007.01.29.14.20.31;	author dstadnik;	state Exp;
branches;
next	1.158;
commitid	69ed45be02ac4567;

1.158
date	2007.01.25.16.57.54;	author ashatalin;	state Exp;
branches;
next	1.157;
commitid	271945b8e1904567;

1.157
date	2007.01.17.13.12.34;	author ashatalin;	state Exp;
branches;
next	1.156;
commitid	3d0045ae20c04567;

1.156
date	2007.01.11.15.30.00;	author dstadnik;	state Exp;
branches;
next	1.155;
commitid	3f6d45a657f64567;

1.155
date	2007.01.08.18.09.51;	author dstadnik;	state Exp;
branches;
next	1.154;
commitid	78dd45a288ee4567;

1.154
date	2006.12.28.19.45.50;	author ashatalin;	state Exp;
branches;
next	1.153;
commitid	13f545941eec4567;

1.153
date	2006.12.28.18.09.44;	author dstadnik;	state Exp;
branches;
next	1.152;
commitid	4971459408674567;

1.152
date	2006.12.28.13.40.13;	author dstadnik;	state Exp;
branches;
next	1.151;
commitid	422a4593c9344567;

1.151
date	2006.12.27.18.38.46;	author dstadnik;	state Exp;
branches;
next	1.150;
commitid	64234592bdb54567;

1.150
date	2006.12.27.17.37.09;	author dstadnik;	state Exp;
branches;
next	1.149;
commitid	45374592af3d4567;

1.149
date	2006.12.27.13.40.49;	author atikhomirov;	state Exp;
branches;
next	1.148;
commitid	5b47459277e04567;

1.148
date	2006.12.20.02.16.53;	author dstadnik;	state Exp;
branches;
next	1.147;
commitid	1ea745889d114567;

1.147
date	2006.12.18.18.20.51;	author dstadnik;	state Exp;
branches;
next	1.146;
commitid	7d774586dbfa4567;

1.146
date	2006.12.18.13.23.18;	author dstadnik;	state Exp;
branches;
next	1.145;
commitid	113e4586960e4567;

1.145
date	2006.12.15.19.25.23;	author dstadnik;	state Exp;
branches;
next	1.144;
commitid	54dd4582f6a24567;

1.144
date	2006.12.15.17.46.19;	author dstadnik;	state Exp;
branches;
next	1.143;
commitid	3a134582df6a4567;

1.143
date	2006.12.15.16.43.58;	author dstadnik;	state Exp;
branches;
next	1.142;
commitid	6a0d4582d0cd4567;

1.142
date	2006.12.14.19.02.23;	author dstadnik;	state Exp;
branches;
next	1.141;
commitid	408e45819fb94567;

1.141
date	2006.12.13.19.37.35;	author dstadnik;	state Exp;
branches;
next	1.140;
commitid	753f458056514567;

1.140
date	2006.12.13.18.57.26;	author dstadnik;	state Exp;
branches;
next	1.139;
commitid	68a45804d154567;

1.139
date	2006.12.12.12.00.00;	author dstadnik;	state Exp;
branches;
next	1.138;
commitid	2d28457e99bb4567;

1.138
date	2006.12.11.18.42.43;	author ashatalin;	state Exp;
branches;
next	1.137;
commitid	34a457da6a14567;

1.137
date	2006.12.11.17.01.34;	author dstadnik;	state Exp;
branches;
next	1.136;
commitid	30fa457d8eeb4567;

1.136
date	2006.12.08.19.20.41;	author dstadnik;	state Exp;
branches;
next	1.135;
commitid	49124579bb084567;

1.135
date	2006.12.08.14.39.39;	author dstadnik;	state Exp;
branches;
next	1.134;
commitid	75d4457979294567;

1.134
date	2006.12.07.17.33.50;	author dstadnik;	state Exp;
branches;
next	1.133;
commitid	23d0457850794567;

1.133
date	2006.11.29.19.57.57;	author atikhomirov;	state Exp;
branches;
next	1.132;
commitid	5235456de6434567;

1.132
date	2006.11.24.22.25.21;	author ashatalin;	state Exp;
branches;
next	1.131;
commitid	5f734567714f4567;

1.131
date	2006.11.22.15.30.35;	author dstadnik;	state Exp;
branches;
next	1.130;
commitid	2b2545646d1a4567;

1.130
date	2006.11.22.10.21.49;	author ashatalin;	state Exp;
branches;
next	1.129;
commitid	7860456424b04567;

1.129
date	2006.11.16.19.24.51;	author atikhomirov;	state Exp;
branches;
next	1.128;
commitid	1423455cbb014567;

1.128
date	2006.11.03.20.43.48;	author ashatalin;	state Exp;
branches;
next	1.127;

1.127
date	2006.10.24.17.25.11;	author dstadnik;	state Exp;
branches;
next	1.126;

1.126
date	2006.10.24.14.49.09;	author ashatalin;	state Exp;
branches;
next	1.125;

1.125
date	2006.10.19.11.01.24;	author bblajer;	state Exp;
branches;
next	1.124;

1.124
date	2006.10.17.19.19.54;	author ashatalin;	state Exp;
branches;
next	1.123;

1.123
date	2006.10.16.17.43.03;	author dstadnik;	state Exp;
branches;
next	1.122;

1.122
date	2006.10.13.16.30.03;	author ashatalin;	state Exp;
branches;
next	1.121;

1.121
date	2006.10.09.17.30.47;	author dstadnik;	state Exp;
branches;
next	1.120;

1.120
date	2006.10.06.15.26.31;	author atikhomirov;	state Exp;
branches;
next	1.119;

1.119
date	2006.10.06.12.15.31;	author atikhomirov;	state Exp;
branches;
next	1.118;

1.118
date	2006.10.06.11.47.59;	author ashatalin;	state Exp;
branches;
next	1.117;

1.117
date	2006.10.03.08.05.55;	author dstadnik;	state Exp;
branches;
next	1.116;

1.116
date	2006.09.29.21.26.45;	author atikhomirov;	state Exp;
branches;
next	1.115;

1.115
date	2006.09.29.12.15.04;	author dstadnik;	state Exp;
branches;
next	1.114;

1.114
date	2006.09.27.20.39.06;	author atikhomirov;	state Exp;
branches;
next	1.113;

1.113
date	2006.09.26.15.41.04;	author atikhomirov;	state Exp;
branches;
next	1.112;

1.112
date	2006.09.22.13.21.23;	author ashatalin;	state Exp;
branches;
next	1.111;

1.111
date	2006.09.18.19.08.54;	author atikhomirov;	state Exp;
branches;
next	1.110;

1.110
date	2006.09.15.20.44.31;	author atikhomirov;	state Exp;
branches;
next	1.109;

1.109
date	2006.09.15.11.48.01;	author ashatalin;	state Exp;
branches;
next	1.108;

1.108
date	2006.09.14.18.08.54;	author ashatalin;	state Exp;
branches;
next	1.107;

1.107
date	2006.09.12.12.08.03;	author ashatalin;	state Exp;
branches;
next	1.106;

1.106
date	2006.09.11.18.21.36;	author ashatalin;	state Exp;
branches;
next	1.105;

1.105
date	2006.09.01.16.03.20;	author atikhomirov;	state Exp;
branches;
next	1.104;

1.104
date	2006.08.30.17.55.31;	author atikhomirov;	state Exp;
branches;
next	1.103;

1.103
date	2006.08.30.17.36.37;	author atikhomirov;	state Exp;
branches;
next	1.102;

1.102
date	2006.08.29.21.22.01;	author atikhomirov;	state Exp;
branches;
next	1.101;

1.101
date	2006.08.28.17.20.17;	author atikhomirov;	state Exp;
branches;
next	1.100;

1.100
date	2006.06.23.12.26.15;	author dstadnik;	state Exp;
branches
	1.100.2.1;
next	1.99;

1.99
date	2006.06.19.14.02.19;	author ashatalin;	state Exp;
branches;
next	1.98;

1.98
date	2006.06.13.15.10.43;	author ashatalin;	state Exp;
branches;
next	1.97;

1.97
date	2006.06.09.19.39.00;	author radvorak;	state Exp;
branches;
next	1.96;

1.96
date	2006.06.08.14.32.25;	author ashatalin;	state Exp;
branches;
next	1.95;

1.95
date	2006.06.06.16.22.23;	author radvorak;	state Exp;
branches;
next	1.94;

1.94
date	2006.05.31.19.53.02;	author ashatalin;	state Exp;
branches;
next	1.93;

1.93
date	2006.05.30.19.09.09;	author radvorak;	state Exp;
branches;
next	1.92;

1.92
date	2006.05.29.17.17.18;	author atikhomirov;	state Exp;
branches;
next	1.91;

1.91
date	2006.05.26.14.16.24;	author dstadnik;	state Exp;
branches;
next	1.90;

1.90
date	2006.05.23.14.55.52;	author dstadnik;	state Exp;
branches;
next	1.89;

1.89
date	2006.05.22.10.02.14;	author dstadnik;	state Exp;
branches;
next	1.88;

1.88
date	2006.05.19.14.30.17;	author atikhomirov;	state Exp;
branches;
next	1.87;

1.87
date	2006.05.18.19.12.38;	author atikhomirov;	state Exp;
branches;
next	1.86;

1.86
date	2006.05.18.12.38.57;	author dstadnik;	state Exp;
branches;
next	1.85;

1.85
date	2006.05.18.12.18.10;	author atikhomirov;	state Exp;
branches;
next	1.84;

1.84
date	2006.05.17.16.19.00;	author atikhomirov;	state Exp;
branches;
next	1.83;

1.83
date	2006.05.12.18.35.12;	author atikhomirov;	state Exp;
branches;
next	1.82;

1.82
date	2006.05.11.12.21.32;	author ashatalin;	state Exp;
branches;
next	1.81;

1.81
date	2006.05.10.11.13.14;	author dstadnik;	state Exp;
branches;
next	1.80;

1.80
date	2006.05.09.12.41.31;	author radvorak;	state Exp;
branches;
next	1.79;

1.79
date	2006.04.26.17.48.40;	author radvorak;	state Exp;
branches;
next	1.78;

1.78
date	2006.04.18.12.19.27;	author dstadnik;	state Exp;
branches;
next	1.77;

1.77
date	2006.04.14.07.36.06;	author dstadnik;	state Exp;
branches;
next	1.76;

1.76
date	2006.04.14.07.21.22;	author dstadnik;	state Exp;
branches;
next	1.75;

1.75
date	2006.04.13.15.41.18;	author radvorak;	state Exp;
branches;
next	1.74;

1.74
date	2006.04.12.16.28.45;	author dstadnik;	state Exp;
branches;
next	1.73;

1.73
date	2006.04.12.08.48.33;	author dstadnik;	state Exp;
branches;
next	1.72;

1.72
date	2006.04.12.01.16.49;	author ashatalin;	state Exp;
branches;
next	1.71;

1.71
date	2006.04.11.19.16.44;	author atikhomirov;	state Exp;
branches;
next	1.70;

1.70
date	2006.04.03.12.52.47;	author dstadnik;	state Exp;
branches;
next	1.69;

1.69
date	2006.03.29.12.12.26;	author ashatalin;	state Exp;
branches;
next	1.68;

1.68
date	2006.03.14.15.31.58;	author dstadnik;	state Exp;
branches;
next	1.67;

1.67
date	2006.03.14.14.18.23;	author ashatalin;	state Exp;
branches;
next	1.66;

1.66
date	2006.03.14.14.01.58;	author dstadnik;	state Exp;
branches;
next	1.65;

1.65
date	2006.03.14.13.14.55;	author dstadnik;	state Exp;
branches;
next	1.64;

1.64
date	2006.03.13.11.02.30;	author dstadnik;	state Exp;
branches;
next	1.63;

1.63
date	2006.03.10.12.49.06;	author dstadnik;	state Exp;
branches;
next	1.62;

1.62
date	2006.03.03.13.22.36;	author dstadnik;	state Exp;
branches;
next	1.61;

1.61
date	2006.02.20.12.18.35;	author ashatalin;	state Exp;
branches;
next	1.60;

1.60
date	2006.02.16.19.09.40;	author ashatalin;	state Exp;
branches;
next	1.59;

1.59
date	2006.02.16.10.30.35;	author ashatalin;	state Exp;
branches;
next	1.58;

1.58
date	2006.02.15.18.59.31;	author ashatalin;	state Exp;
branches;
next	1.57;

1.57
date	2006.02.15.18.11.24;	author dstadnik;	state Exp;
branches;
next	1.56;

1.56
date	2006.02.08.17.15.50;	author atikhomirov;	state Exp;
branches;
next	1.55;

1.55
date	2006.02.08.16.06.19;	author atikhomirov;	state Exp;
branches;
next	1.54;

1.54
date	2006.02.08.13.09.29;	author ashatalin;	state Exp;
branches;
next	1.53;

1.53
date	2006.02.08.00.17.46;	author atikhomirov;	state Exp;
branches;
next	1.52;

1.52
date	2006.02.06.23.22.32;	author atikhomirov;	state Exp;
branches;
next	1.51;

1.51
date	2006.02.05.22.57.54;	author atikhomirov;	state Exp;
branches;
next	1.50;

1.50
date	2006.02.02.15.58.54;	author dstadnik;	state Exp;
branches;
next	1.49;

1.49
date	2006.01.30.18.26.46;	author dstadnik;	state Exp;
branches;
next	1.48;

1.48
date	2006.01.27.20.54.21;	author ashatalin;	state Exp;
branches;
next	1.47;

1.47
date	2006.01.26.13.36.42;	author atikhomirov;	state Exp;
branches;
next	1.46;

1.46
date	2006.01.25.14.27.29;	author atikhomirov;	state Exp;
branches;
next	1.45;

1.45
date	2006.01.24.13.42.02;	author atikhomirov;	state Exp;
branches;
next	1.44;

1.44
date	2006.01.24.13.41.13;	author atikhomirov;	state Exp;
branches;
next	1.43;

1.43
date	2006.01.19.17.33.05;	author ashatalin;	state Exp;
branches;
next	1.42;

1.42
date	2006.01.19.00.10.43;	author ashatalin;	state Exp;
branches;
next	1.41;

1.41
date	2006.01.17.10.55.00;	author atikhomirov;	state Exp;
branches;
next	1.40;

1.40
date	2006.01.12.17.19.23;	author ashatalin;	state Exp;
branches;
next	1.39;

1.39
date	2006.01.12.11.43.59;	author dstadnik;	state Exp;
branches;
next	1.38;

1.38
date	2006.01.12.10.41.33;	author dstadnik;	state Exp;
branches;
next	1.37;

1.37
date	2006.01.10.16.16.58;	author ashatalin;	state Exp;
branches;
next	1.36;

1.36
date	2005.11.29.18.49.39;	author atikhomirov;	state Exp;
branches;
next	1.35;

1.35
date	2005.11.29.18.14.04;	author atikhomirov;	state Exp;
branches;
next	1.34;

1.34
date	2005.11.25.00.49.59;	author rgronback;	state Exp;
branches;
next	1.33;

1.33
date	2005.11.23.10.11.53;	author dstadnik;	state Exp;
branches;
next	1.32;

1.32
date	2005.11.22.11.50.03;	author dstadnik;	state Exp;
branches;
next	1.31;

1.31
date	2005.11.21.09.35.37;	author dstadnik;	state Exp;
branches;
next	1.30;

1.30
date	2005.11.18.13.55.34;	author ashatalin;	state Exp;
branches;
next	1.29;

1.29
date	2005.11.17.09.14.16;	author dstadnik;	state Exp;
branches;
next	1.28;

1.28
date	2005.11.16.13.30.02;	author dstadnik;	state Exp;
branches;
next	1.27;

1.27
date	2005.11.16.07.42.24;	author dstadnik;	state Exp;
branches;
next	1.26;

1.26
date	2005.11.15.00.13.01;	author atikhomirov;	state Exp;
branches;
next	1.25;

1.25
date	2005.11.11.13.47.42;	author dstadnik;	state Exp;
branches;
next	1.24;

1.24
date	2005.11.09.20.58.28;	author atikhomirov;	state Exp;
branches;
next	1.23;

1.23
date	2005.11.08.15.36.54;	author atikhomirov;	state Exp;
branches;
next	1.22;

1.22
date	2005.11.02.17.53.03;	author atikhomirov;	state Exp;
branches;
next	1.21;

1.21
date	2005.10.27.16.12.20;	author atikhomirov;	state Exp;
branches;
next	1.20;

1.20
date	2005.10.26.18.43.48;	author atikhomirov;	state Exp;
branches;
next	1.19;

1.19
date	2005.10.25.18.28.41;	author atikhomirov;	state Exp;
branches;
next	1.18;

1.18
date	2005.10.21.13.31.56;	author atikhomirov;	state Exp;
branches;
next	1.17;

1.17
date	2005.10.20.16.04.35;	author atikhomirov;	state Exp;
branches;
next	1.16;

1.16
date	2005.10.19.17.56.08;	author atikhomirov;	state Exp;
branches;
next	1.15;

1.15
date	2005.10.19.15.36.38;	author atikhomirov;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.19.13.51.49;	author atikhomirov;	state Exp;
branches;
next	1.13;

1.13
date	2005.10.19.13.19.22;	author atikhomirov;	state Exp;
branches;
next	1.12;

1.12
date	2005.10.14.12.17.18;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2005.10.13.14.21.40;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.13.12.45.56;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.11.12.50.57;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.10.12.57.39;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2005.10.04.15.40.37;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.30.19.16.09;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.29.09.49.40;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.26.15.15.44;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2005.08.11.16.38.13;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.09.22.49.30;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.03.22.20.29;	author atikhomirov;	state Exp;
branches;
next	;

1.100.2.1
date	2006.09.13.23.07.15;	author rgronback;	state Exp;
branches;
next	;

1.240.2.1
date	2007.09.10.20.58.22;	author dstadnik;	state Exp;
branches;
next	1.240.2.2;
commitid	f4446e5afed4567;

1.240.2.2
date	2007.09.12.12.20.49;	author dstadnik;	state Exp;
branches;
next	1.240.2.3;
commitid	42c246e7d99f4567;

1.240.2.3
date	2007.09.13.18.16.19;	author dstadnik;	state Exp;
branches;
next	1.240.2.4;
commitid	485346e97e6f4567;

1.240.2.4
date	2007.09.14.15.11.12;	author dstadnik;	state Exp;
branches;
next	1.240.2.5;
commitid	18546eaa48f4567;

1.240.2.5
date	2007.09.14.18.46.29;	author dstadnik;	state Exp;
branches;
next	;
commitid	622c46ead7044567;


desc
@@


1.260
log
@[174961] Menu actions - refactor LoadResource and CreateShortcut actions to use generic genmodel action infrastructure
@
text
@/*
 * Copyright (c) 2005, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.codegen.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import org.eclipse.gmf.codegen.gmfgen.ElementType;
import org.eclipse.gmf.codegen.gmfgen.ExternalParser;
import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.GMFGenFactory;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenAction;
import org.eclipse.gmf.codegen.gmfgen.GenApplication;
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenChildLabelNode;
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenCompartment;
import org.eclipse.gmf.codegen.gmfgen.GenContributionItem;
import org.eclipse.gmf.codegen.gmfgen.GenContributionManager;
import org.eclipse.gmf.codegen.gmfgen.GenCustomAction;
import org.eclipse.gmf.codegen.gmfgen.GenCustomPreferencePage;
import org.eclipse.gmf.codegen.gmfgen.GenCustomPropertyTab;
import org.eclipse.gmf.codegen.gmfgen.GenDiagram;
import org.eclipse.gmf.codegen.gmfgen.GenEditorGenerator;
import org.eclipse.gmf.codegen.gmfgen.GenEditorView;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionInterpreter;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderBase;
import org.eclipse.gmf.codegen.gmfgen.GenExpressionProviderContainer;
import org.eclipse.gmf.codegen.gmfgen.GenExternalNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.GenLanguage;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.GenLinkLabel;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorChildReference;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
import org.eclipse.gmf.codegen.gmfgen.GenNodeLabel;
import org.eclipse.gmf.codegen.gmfgen.GenParserImplementation;
import org.eclipse.gmf.codegen.gmfgen.GenPreferencePage;
import org.eclipse.gmf.codegen.gmfgen.GenPropertyTab;
import org.eclipse.gmf.codegen.gmfgen.GenSharedContributionItem;
import org.eclipse.gmf.codegen.gmfgen.GenStandardPreferencePage;
import org.eclipse.gmf.codegen.gmfgen.GenTopLevelNode;
import org.eclipse.gmf.codegen.gmfgen.InitDiagramAction;
import org.eclipse.gmf.codegen.gmfgen.MetamodelType;
import org.eclipse.gmf.codegen.gmfgen.OpenDiagramBehaviour;
import org.eclipse.gmf.codegen.gmfgen.PredefinedParser;
import org.eclipse.gmf.codegen.gmfgen.SpecializationType;
import org.eclipse.gmf.codegen.gmfgen.StandardPreferencePages;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
import org.eclipse.gmf.common.UnexpectedBehaviourException;
import org.eclipse.gmf.internal.common.codegen.GeneratorBase;
import org.eclipse.gmf.internal.common.codegen.ImportUtil;
import org.eclipse.gmf.internal.common.codegen.TextEmitter;
import org.eclipse.gmf.internal.common.codegen.TextMerger;

/**
 * Invokes templates to populate diagram editor project.
 * 
 * @@author artem
 */
public class Generator extends GeneratorBase implements Runnable {

	private final GenEditorGenerator myEditorGen; 

	private final GenDiagram myDiagram;

	private final CodegenEmitters myEmitters;

	public Generator(GenEditorGenerator genModel, CodegenEmitters emitters) {
		assert genModel != null && emitters != null;
		myEditorGen = genModel;
		myDiagram = genModel.getDiagram();
		myEmitters = emitters;
	}
	
	@@Override
	protected TextMerger createMergeService() {
		TextMerger service = myEmitters.createMergeService();
		if (service != null) {
			return service;
		}
		return super.createMergeService();
	}

	protected void customRun() throws InterruptedException, UnexpectedBehaviourException {
		final String pluginID = myEditorGen.getPlugin().getID();
		initializeEditorProject(pluginID, guessProjectLocation(pluginID));

		if (myEditorGen.getModelAccess() != null) {
			myEmitters.setGlobals(Collections.<String, Object>singletonMap("DynamicModelAccess", myEditorGen.getModelAccess()));
			generateModelAccessFacility();
		}

        // draft for messages
        generateExternalizationSupport();
        
		// commands
		generateReorientLinkViewCommand();

		// edit helpers
		generateBaseEditHelper();

		// parsers
		generateAbstractParser();
		generateParsers();

		// edit parts, edit policies and providers
		generateBaseItemSemanticEditPolicy();
		generateBehaviours(myDiagram);
		if (myDiagram.needsCanonicalEditPolicy()) {
			generateDiagramCanonicalEditPolicy();	
		}
		generateDiagramItemSemanticEditPolicy();
		generateTextSelectionEditPolicy();
		generateTextNonResizableEditPolicy();
		for (GenTopLevelNode node : myDiagram.getTopLevelNodes()) {
			generateNode(node);
		}
		for (GenChildNode node : myDiagram.getChildNodes()) {
			if (node instanceof GenChildLabelNode) {
				generateChildLabelNode((GenChildLabelNode) node);
			} else {
				generateNode(node);
			}
		}
		for (GenCompartment compartment : myDiagram.getCompartments()) {
			generateCompartmentEditPart(compartment);
			generateCompartmentItemSemanticEditPolicy(compartment);
			generateCompartmentViewFactory(compartment);
			if (compartment.needsCanonicalEditPolicy()) {
				generateChildContainerCanonicalEditPolicy(compartment);
			}
		}
		for (GenLink next: myDiagram.getLinks()) {
			generateLinkViewFactory(next);
			generateEditSupport(next);
			generateLinkEditPart(next);
			generateBehaviours(next);
			generateLinkItemSemanticEditPolicy(next);
			if (next.getModelFacet() instanceof TypeLinkModelFacet) {
				if (next.isIncomingCreationAllowed() || next.isOutgoingCreationAllowed()) {
					generateCreateLinkCommand(next);
				}
				if (next.isTargetReorientingAllowed() || next.isSourceReorientingAllowed()) {
					generateReorientLinkCommand(next);
				}
			} else if (next.getModelFacet() instanceof FeatureLinkModelFacet) {
				if (next.isIncomingCreationAllowed() || next.isOutgoingCreationAllowed()) {
					generateCreateRefLinkCommand(next);
				}
				if (next.isTargetReorientingAllowed() || next.isSourceReorientingAllowed()) {
					generateReorientRefLinkCommand(next);
				}
			}
			for (GenLinkLabel label : next.getLabels()) {
				generateLinkLabelEditPart(label);
				generateLinkLabelViewFactory(label);
			}
		}
		generateEditSupport(myDiagram);
		generateDiagramViewFactory();
		generateDiagramEditPart();
		generateEditPartFactory();
		generateElementInitializers();
		generateElementTypes();
		generateViewProvider();
		generateEditPartProvider();
		generateModelingAssistantProvider();
		generateIconProvider();
		generateParserProvider();
		if (myDiagram.isValidationEnabled() || myEditorGen.hasAudits()) {
			generateValidationProvider();
			generateValidateAction();
			if (myEditorGen.getApplication() != null) {
				generateValidationMarker();
			}
			if (myDiagram.isValidationDecorators()) {
				generateValidationDecoratorProvider();
			}
			if (myEditorGen.getApplication() == null) {
				generateMarkerNavigationProvider();
			}
		}
		if (myEditorGen.getMetrics() != null) {
			generateMetricProvider();
		}
		if (myEditorGen.getExpressionProviders() != null) {
			generateExpressionProviders();
		}

		// preferences
		generatePreferenceInitializer();
		generatePreferencePages(myDiagram.getPreferencePages());

		// editor
		generatePalette();
		generateDiagramEditorUtil();
		generateVisualIDRegistry();
		generateCreationWizard();
		generateCreationWizardPage();
		generateDeleteElementAction();
		generateDiagramEditorContextMenuProvider();
		generateEditor();
		generateDocumentProvider();
		if (myDiagram.generateInitDiagramAction() || myDiagram.generateCreateShortcutAction() /*FIXME use another condition here*/) {
			generateModelElementSelectionPage();
		}
		if (myDiagram.generateInitDiagramAction() /*FIXME use another condition here*/) {
			// FIXME HACK!!! until I decide how to contribute action against IFile
			InitDiagramAction fakeAction = GMFGenFactory.eINSTANCE.createInitDiagramAction();
			fakeAction.setQualifiedClassName(myDiagram.getInitDiagramFileActionQualifiedClassName());
			doGenerateJavaClass(myEmitters.getPredefinedActionEmitter(), fakeAction.getQualifiedClassName(), fakeAction, myEditorGen);
			generateNewDiagramFileWizard();
		}
		if (myDiagram.generateCreateShortcutAction() /*FIXME use another condition here*/) {
			generateCreateShortcutDecorationsCommand();
			if (myEditorGen.getApplication() == null) {
				generateElementChooser();
			} else {
				generateShortcutCreationWizard();
			}
		}
		generateDiagramUpdater();
		generateUpdateCommand();
		generateNodeDescriptor();
		generateLinkDescriptor();
		generateActionBarContributor();
		generateMatchingStrategy();
		if (myEditorGen.getNavigator() != null) {
			generateNavigatorContentProvider();
			generateNavigatorLabelProvider();
			generateNavigatorLinkHelper();
			generateNavigatorSorter();
			generateNavigatorActionProvider();
			generateAbstractNavigatorItem();
			generateNavigatorGroup();
			generateNavigatorItem();
			generateNavigatorGroupIcons();
			if (myEditorGen.getDomainGenModel() != null && myEditorGen.getNavigator().isGenerateDomainModelNavigator()) {
				generateDomainNavigatorContentProvider();
				generateDomainNavigatorLabelProvider();
				generateDomainNavigatorItem();
				generateDomainModelElementTester();
				generateURIEditorInputTester();
			}
		}
		if (myEditorGen.getPropertySheet() != null) {
			generatePropertySheetSections();
		}
		if (myDiagram.generateShortcutIcon()) {
			generateShortcutIcon();
			generateShortcutsDecoratorProvider();
			generateShortcutPropertyTester();
		}
		if (isPathInsideGenerationTarget(myDiagram.getCreationWizardIconPathX())) {
			// at the moment this may produce path that reference generated icon file, thus
			// skip generation if the path is relative
			generateDiagramIcon(myDiagram.getCreationWizardIconPathX());
		}
		if (isPathInsideGenerationTarget(myEditorGen.getEditor().getIconPathX())) {
			// at the moment this may produce path that reference generated icon file, thus
			// skip generation if the path is relative
			generateDiagramIcon(myEditorGen.getEditor().getIconPathX());
		}
		generateWizardBanner();
		generatePlugin();
		generateApplication();
		generateActions();
	}

	private static boolean isPathInsideGenerationTarget(String path) {
		assert path != null;
		Path p = new Path(path);
		return !p.isAbsolute() && !p.segment(0).equals(".."); //$NON-NLS-1$
	}

	private void generateNode(GenNode node) throws UnexpectedBehaviourException, InterruptedException {
		generateNodeViewFactory(node);
		generateNodeItemSemanticEditPolicy(node);
		if (node.getModelFacet() != null) {
			generateCreateNodeCommand(node);
		}
		generateEditSupport(node);
		generateNodeEditPart(node);
		generateBehaviours(node);
		if (node.needsCanonicalEditPolicy()) {
			generateChildContainerCanonicalEditPolicy(node);
		}
		if (node.getModelFacet() != null && !node.getReorientedIncomingLinks().isEmpty()) {
			generateGraphicalNodeEditPolicy(node);
		}
		for (GenNodeLabel label : node.getLabels()) {
			if (label instanceof GenExternalNodeLabel) {
				GenExternalNodeLabel extLabel = (GenExternalNodeLabel) label;
				generateExternalNodeLabelEditPart(extLabel);
				generateExternalNodeLabelViewFactory(extLabel);
			} else {
				generateNodeLabelEditPart(label);
				generateNodeLabelViewFactory(label);
			}
		}
	}
 
	private void generateChildLabelNode(GenChildLabelNode child) throws UnexpectedBehaviourException, InterruptedException {
		generateLabelNodeViewFactory(child);
		generateNodeItemSemanticEditPolicy(child);
		if (child.getModelFacet() != null) {
			generateCreateNodeCommand(child);
		}
		generateEditSupport(child);
		generateBehaviours(child);
		generateChildNodeLabelEditPart(child);
	}

	// commands

	private void generateReorientLinkViewCommand() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getReorientLinkViewCommandEmitter(), myDiagram.getReorientConnectionViewCommandQualifiedClassName(), myDiagram);
	}

	private void generateCreateNodeCommand(GenNode node) throws InterruptedException, UnexpectedBehaviourException {
		doGenerateJavaClass(myEmitters.getCreateNodeCommandEmitter(), node.getCreateCommandQualifiedClassName(), node);
	}

	private void generateCreateLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCreateLinkCommandEmitter(), link.getCreateCommandQualifiedClassName(), link);
	}

	private void generateCreateRefLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCreateRefLinkCommandEmitter(), link.getCreateCommandQualifiedClassName(), link);
	}

	private void generateReorientLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getReorientLinkCommandEmitter(), link.getReorientCommandQualifiedClassName(), link);
	}

	private void generateReorientRefLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getReorientRefLinkCommandEmitter(), link.getReorientCommandQualifiedClassName(), link);
	}

	private void generateCreateShortcutDecorationsCommand() throws InterruptedException, UnexpectedBehaviourException {
		doGenerateJavaClass(myEmitters.getCreateShortcutDecorationsCommandEmitter(), myDiagram.getCreateShortcutDecorationsCommandQualifiedClassName(), myDiagram);
	}

	// helpers

	private void generateBaseEditHelper() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getBaseEditHelperEmitter(), myDiagram.getBaseEditHelperQualifiedClassName(), myDiagram);
	}

	private void generateEditSupport(GenCommonBase diagramElement) throws UnexpectedBehaviourException, InterruptedException {
		ElementType genType = diagramElement.getElementType();
		if (genType.isDefinedExternally()) {
			return;
		}
		if (genType instanceof SpecializationType) {
			generateEditHelperAdvice((SpecializationType) genType);
		} else if (genType instanceof MetamodelType) {
			generateEditHelper((MetamodelType) genType);
		}
	}

	private void generateEditHelper(MetamodelType genType) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getEditHelperEmitter(), genType.getEditHelperQualifiedClassName(), genType);
	}

	private void generateEditHelperAdvice(SpecializationType genType) throws UnexpectedBehaviourException, InterruptedException {
		if (!genType.eIsSet(GMFGenPackage.eINSTANCE.getSpecializationType_EditHelperAdviceClassName())) {
			return;
		}
		doGenerateJavaClass(myEmitters.getEditHelperAdviceEmitter(), genType.getEditHelperAdviceQualifiedClassName(), genType);
	}

	// parts

	private void generateDiagramEditPart() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getDiagramEditPartEmitter(), myDiagram.getEditPartQualifiedClassName(), myDiagram);
	}

	private void generateNodeEditPart(GenNode node) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getNodeEditPartEmitter(), node.getEditPartQualifiedClassName(), node);
	}

	private void generateNodeLabelEditPart(GenNodeLabel label) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getNodeLabelEditPartEmitter(), label.getEditPartQualifiedClassName(), label);
	}

	private void generateExternalNodeLabelEditPart(GenExternalNodeLabel label) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getExternalNodeLabelEditPartEmitter(), label.getEditPartQualifiedClassName(), label);
	}

	private void generateChildNodeLabelEditPart(GenChildLabelNode node) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getChildNodeLabelEditPartEmitter(), node.getEditPartQualifiedClassName(), node);
	}
	
	private void generateCompartmentEditPart(GenCompartment compartment) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCompartmentEditPartEmitter(), compartment.getEditPartQualifiedClassName(), compartment);
	}

	private void generateLinkEditPart(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getLinkEditPartEmitter(), link.getEditPartQualifiedClassName(), link);
	}

	private void generateLinkLabelEditPart(GenLinkLabel label) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getLinkLabelEditPartEmitter(), label.getEditPartQualifiedClassName(), label);
	}

	private void generateEditPartFactory() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getEditPartFactoryEmitter(), myDiagram.getEditPartFactoryQualifiedClassName(), myDiagram);
	}

	// edit policies

	private void generateBaseItemSemanticEditPolicy() throws InterruptedException {
		Collection<GenCommonBase> allSemanticElements = new ArrayList<GenCommonBase>(myDiagram.getAllContainers());
		allSemanticElements.addAll(myDiagram.getLinks());
		boolean isSansDomainModel = true;
		for (Iterator<GenCommonBase> it = allSemanticElements.iterator(); it.hasNext() && isSansDomainModel;) {
			GenCommonBase nextCommonBase = it.next();
			if (!nextCommonBase.isSansDomain()) {
				isSansDomainModel = false;
			}
		}
		if (isSansDomainModel) {
			return;
		}
		doGenerateJavaClass(myEmitters.getBaseItemSemanticEditPolicyEmitter(), myDiagram.getBaseItemSemanticEditPolicyQualifiedClassName(), myDiagram);
	}

	/**
	 * Generate classes for behaviours specified for the diagram element. 
	 * As part of its job, this method tries not to generate shared policies more than once.
	 */
	private void generateBehaviours(GenCommonBase commonBase) throws UnexpectedBehaviourException, InterruptedException {
		for (OpenDiagramBehaviour behaviour : commonBase.getBehaviour(OpenDiagramBehaviour.class)) {
			if (behaviour.getSubject() == commonBase) { // extravagant way to check whether this behaviour is shared or not
				generateOpenDiagramEditPolicy(behaviour);
			}
		}
	}

	private void generateOpenDiagramEditPolicy(OpenDiagramBehaviour behaviour) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(myEmitters.getOpenDiagramEditPolicyEmitter(), behaviour.getEditPolicyQualifiedClassName(), behaviour);
	}

	private void generateDiagramCanonicalEditPolicy() throws InterruptedException {
		internalGenerateJavaClass(myEmitters.getDiagramCanonicalEditPolicyEmitter(), myDiagram.getCanonicalEditPolicyQualifiedClassName(), myDiagram);
	}

	private void generateChildContainerCanonicalEditPolicy(GenChildContainer genContainer) throws InterruptedException {
		doGenerateJavaClass(myEmitters.getChildContainerCanonicalEditPolicyEmitter(), genContainer.getCanonicalEditPolicyQualifiedClassName(), genContainer);
	}

	private void generateDiagramItemSemanticEditPolicy() throws InterruptedException {
		if (myDiagram.isSansDomain()) {
			return;
		}
		doGenerateJavaClass(myEmitters.getDiagramItemSemanticEditPolicyEmitter(), myDiagram.getItemSemanticEditPolicyQualifiedClassName(), myDiagram);
	}

	private void generateCompartmentItemSemanticEditPolicy(GenCompartment genCompartment) throws InterruptedException {
		if (genCompartment.isSansDomain()) {
			return;
		}
		doGenerateJavaClass(myEmitters.getCompartmentItemSemanticEditPolicyEmitter(), genCompartment.getItemSemanticEditPolicyQualifiedClassName(), genCompartment);
	}

	private void generateGraphicalNodeEditPolicy(GenNode genNode) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getGraphicalNodeEditPolicyEmitter(), genNode.getGraphicalNodeEditPolicyQualifiedClassName(), genNode);
	}

	private void generateNodeItemSemanticEditPolicy(GenNode genNode) throws InterruptedException {
		if (genNode.isSansDomain()) {
			return;
		}
		doGenerateJavaClass(myEmitters.getNodeItemSemanticEditPolicyEmitter(), genNode.getItemSemanticEditPolicyQualifiedClassName(), genNode);
	}

	private void generateLinkItemSemanticEditPolicy(GenLink genLink) throws InterruptedException {
		if (genLink.isSansDomain()) {
			return;
		}
		doGenerateJavaClass(myEmitters.getLinkItemSemanticEditPolicyEmitter(), genLink.getItemSemanticEditPolicyQualifiedClassName(), genLink);
	}

	private void generateTextSelectionEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getTextSelectionEditPolicyEmitter(), myDiagram.getTextSelectionEditPolicyQualifiedClassName(), myDiagram);
	}

	private void generateTextNonResizableEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getTextNonResizableEditPolicyEmitter(), myDiagram.getTextNonResizableEditPolicyQualifiedClassName(), myDiagram);
	}

	// preferences

	private void generatePreferenceInitializer() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getPreferenceInitializerEmitter(), myEmitters.getPreferenceInitializerName(myDiagram), myDiagram);
	}

	private void generatePreferencePages(List<GenPreferencePage> pages) throws UnexpectedBehaviourException, InterruptedException {
		for (GenPreferencePage p : pages) {
			if (p instanceof GenCustomPreferencePage) {
				if (((GenCustomPreferencePage) p).isGenerateBoilerplate()) {
					doGenerateJavaClass(myEmitters.getCustomPreferencePageEmitter(), p.getQualifiedClassName(), p);
				}
			} else if (p instanceof GenStandardPreferencePage) {
				if (((GenStandardPreferencePage) p).getKind() != StandardPreferencePages.PATHMAPS_LITERAL) {
					doGenerateJavaClass(myEmitters.getStandardPreferencePageEmitter(), p.getQualifiedClassName(), p);
				}
			} else {
				throw new UnexpectedBehaviourException("No idea how to handle GenPreferencePage subclass:" + p);
			}
			generatePreferencePages(p.getChildren());
		}
	}

	// parsers

	private void generateAbstractParser() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getAbstractParserEmitter(), myEmitters.getAbstractParserName(myDiagram), myDiagram);
	}

	private void generateParsers() throws UnexpectedBehaviourException, InterruptedException {
		if (myEditorGen.getLabelParsers() == null) {
			return;
		}
		for (GenParserImplementation pi : myEditorGen.getLabelParsers().getImplementations()) {
			if (pi instanceof PredefinedParser) {
				doGenerateJavaClass(myEmitters.getPredefinedParserEmitter(), myEmitters.getPredefinedParserName(pi), pi);
			}
		}
	}

	// providers

	private void generateParserProvider() throws UnexpectedBehaviourException, InterruptedException {
		if (myEditorGen.getLabelParsers() != null && (myEditorGen.getLabelParsers().isExtensibleViaService() || existsNonExternalParser())) {
			doGenerateJavaClass(myEmitters.getParserProviderEmitter(), myEditorGen.getLabelParsers().getQualifiedClassName(), myEditorGen.getLabelParsers());
		}
	}
	// if there's no other parser than external, and provider is not contributed as a Service - 
	// no need to generate class (only get() method would be there)
	// XXX although adopters might want to change the logic - what if they generate smth reasonable?
	// or if I add sort of getDescriptionParser common access method there?
	private boolean existsNonExternalParser() {
		for (GenParserImplementation pi : myEditorGen.getLabelParsers().getImplementations()) {
			if (false == pi instanceof ExternalParser) {
				return true;
			}
		}
		return false;
	}

	private void generateElementInitializers() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getElementInitializersEmitter(), myDiagram.getProvidersPackageName() + ".ElementInitializers", myDiagram); //$NON-NLS-1$
	}

	private void generateElementTypes() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getElementTypesEmitter(), myDiagram.getElementTypesQualifiedClassName(), myDiagram);
	}

	private void generateViewProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getViewProviderEmitter(), myDiagram.getNotationViewProviderQualifiedClassName(), myDiagram);
	}

	private void generateEditPartProvider() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getEditPartProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getEditPartProviderClassName(),
			myDiagram
		);
	}

	private void generateModelingAssistantProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getModelingAssistantProviderEmitter(), myDiagram.getModelingAssistantProviderQualifiedClassName(), myDiagram);
	}

	private void generateIconProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getIconProviderEmitter(), myDiagram.getIconProviderQualifiedClassName(), myDiagram);
	}

	private void generateValidationProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getValidationProviderEmitter(), myDiagram.getValidationProviderQualifiedClassName(), myDiagram);
	}

	private void generateValidationDecoratorProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getValidationDecoratorProviderEmitter(), myDiagram.getValidationDecoratorProviderQualifiedClassName(), myDiagram);
	}

	private void generateShortcutsDecoratorProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getShortcutsDecoratorProviderEmitter(), myDiagram.getShortcutsDecoratorProviderQualifiedClassName(), myDiagram);
	}
	
	private void generateShortcutPropertyTester() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getShortcutPropertyTesterEmitter(), myDiagram.getShortcutPropertyTesterQualifiedClassName(), myDiagram);
	}

	private void generateMetricProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getMetricProviderEmitter(), myDiagram.getMetricProviderQualifiedClassName(), myDiagram);
	}	

	private void generateMarkerNavigationProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getMarkerNavigationProviderEmitter(), myDiagram.getMarkerNavigationProviderQualifiedClassName(), myDiagram);
	}

	// notation view factories

	private void generateDiagramViewFactory() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getDiagramViewFactoryEmitter(), myDiagram.getNotationViewFactoryQualifiedClassName(), myDiagram);
	}

	private void generateNodeViewFactory(GenNode node) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getNodeViewFactoryEmitter(), node.getNotationViewFactoryQualifiedClassName(), node);
	}

	private void generateLabelNodeViewFactory(GenChildLabelNode node) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getLabelNodeViewFactoryEmitter(), node.getNotationViewFactoryQualifiedClassName(), node);
	}

	private void generateCompartmentViewFactory(GenCompartment compartment) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCompartmentViewFactoryEmitter(), compartment.getNotationViewFactoryQualifiedClassName(), compartment);
	}

	private void generateLinkViewFactory(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getLinkViewFactoryEmitter(), link.getNotationViewFactoryQualifiedClassName(), link);
	}

	private void generateNodeLabelViewFactory(GenNodeLabel label) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getLabelViewFactoryEmitter(), label.getNotationViewFactoryQualifiedClassName(), label);
	}

	private void generateExternalNodeLabelViewFactory(GenExternalNodeLabel label) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getFloatingLabelViewFactoryEmitter(), label.getNotationViewFactoryQualifiedClassName(), label);
	}

	private void generateLinkLabelViewFactory(GenLinkLabel label) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getFloatingLabelViewFactoryEmitter(), label.getNotationViewFactoryQualifiedClassName(), label);
	}

	// editor

	private void generateValidateAction() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getValidateActionEmitter(), myEmitters.getValidateActionName(myDiagram), myDiagram);
	}

	private void generateValidationMarker() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getValidationMarkerEmitter(), myEmitters.getValidationMarkerName(myDiagram), myDiagram);
	}

	private void generateModelElementSelectionPage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getModelElementSelectionPageEmitter(), myEmitters.getModelElementSelectionPageName(myDiagram), myDiagram);
	}

	private void generateNewDiagramFileWizard() throws UnexpectedBehaviourException, InterruptedException {
		if (!myDiagram.isSynchronized()) {
			doGenerateJavaClass(myEmitters.getDiagramContentInitializerEmitter(), myDiagram.getDiagramContentInitializerQualifiedClassName(), myDiagram);
		}
		doGenerateJavaClass(myEmitters.getNewDiagramFileWizardEmitter(), myEmitters.getNewDiagramFileWizardName(myDiagram), myDiagram);
	}

	private void generatePalette() throws UnexpectedBehaviourException, InterruptedException {
		if (myDiagram.getPalette() == null) {
			return;
		}
		doGenerateJavaClass(myEmitters.getPaletteEmitter(), myDiagram.getPalette().getFactoryQualifiedClassName(), myDiagram.getPalette());
	}

	private void generateDiagramEditorUtil() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getDiagramEditorUtilEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getDiagramEditorUtilClassName(),
			myDiagram
		);
	}
	
	private void generateVisualIDRegistry() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getVisualIDRegistryEmitter(), myDiagram.getVisualIDRegistryQualifiedClassName(), myDiagram);
	}

	private void generateCreationWizard() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCreationWizardEmitter(), myDiagram.getCreationWizardQualifiedClassName(), myDiagram);
	}

	private void generateCreationWizardPage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCreationWizardPageEmitter(), myDiagram.getCreationWizardPageQualifiedClassName(), myDiagram);
	}

	private void generateDeleteElementAction() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getDeleteElementActionEmitter(), myEmitters.getDeleteElementActionName(myDiagram), myDiagram);
	}

	private void generateDiagramEditorContextMenuProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getDiagramEditorContextMenuProviderEmitter(), myEmitters.getDiagramEditorContextMenuProviderName(myDiagram), myDiagram);
	}

	private void generateEditor() throws InterruptedException {
		final GenEditorView editor = myEditorGen.getEditor();
		doGenerateJavaClass(myEmitters.getEditorEmitter(), editor.getQualifiedClassName(), editor);
	}
	
	private void generateElementChooser() throws InterruptedException {
		if (!myDiagram.generateCreateShortcutAction()) {
			return;
		}
		doGenerateJavaClass(myEmitters.getElementChooserEmitter(), myDiagram.getElementChooserQualifiedClassName(), myDiagram);
	}

	private void generateShortcutCreationWizard() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getShortcutCreationWizardEmitter(), myEmitters.getShortcutCreationWizardName(myDiagram), myDiagram);
	}

	private void generateDocumentProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getDocumentProviderEmitter(), myDiagram.getDocumentProviderQualifiedClassName(), myDiagram);
	}
	
	private void generateDiagramUpdater() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getDiagramUpdaterEmitter(), myEditorGen.getDiagramUpdater().getDiagramUpdaterQualifiedClassName(), myEditorGen.getDiagramUpdater());
	}
	
	private void generateUpdateCommand() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getUpdateCommandEmitter(), myEditorGen.getDiagramUpdater().getUpdateCommandQualifiedClassName(), myEditorGen.getDiagramUpdater());
	}
	
	private void generateNodeDescriptor() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNodeDescriptorEmitter(), myEditorGen.getDiagramUpdater().getNodeDescriptorQualifiedClassName(), myEditorGen.getDiagramUpdater());
	}
	
	private void generateLinkDescriptor() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getLinkDescriptorEmitter(), myEditorGen.getDiagramUpdater().getLinkDescriptorQualifiedClassName(), myEditorGen.getDiagramUpdater());
	}

	private void generateActionBarContributor() throws UnexpectedBehaviourException, InterruptedException {
		final GenEditorView editor = myEditorGen.getEditor();
		doGenerateJavaClass(myEmitters.getActionBarContributorEmitter(), editor.getActionBarContributorQualifiedClassName(), editor);
	}

	private void generateMatchingStrategy() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getMatchingStrategyEmitter(), myDiagram.getMatchingStrategyQualifiedClassName(), myDiagram);
	}
	
	private void generateNavigatorContentProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorContentProviderEmitter(), myEditorGen.getNavigator().getContentProviderQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateDomainNavigatorContentProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getDomainNavigatorContentProviderEmitter(), myEditorGen.getNavigator().getDomainContentProviderQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateDomainNavigatorLabelProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getDomainNavigatorLabelProviderEmitter(), myEditorGen.getNavigator().getDomainLabelProviderQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateDomainNavigatorItem() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getDomainNavigatorItemEmitter(), myEditorGen.getNavigator().getDomainNavigatorItemQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateDomainModelElementTester() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getDomainModelElementTesterEmitter(), myEditorGen.getNavigator().getDomainModelElementTesterQualifiedClassName(), myEditorGen.getNavigator());
	}

	private void generateURIEditorInputTester() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getURIEditorInputTesterEmitter(), myEditorGen.getNavigator().getUriInputTesterQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorLabelProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorLabelProviderEmitter(), myEditorGen.getNavigator().getLabelProviderQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorLinkHelper() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorLinkHelperEmitter(), myEditorGen.getNavigator().getLinkHelperQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorSorter() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorSorterEmitter(), myEditorGen.getNavigator().getSorterQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorActionProvider() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorActionProviderEmitter(), myEditorGen.getNavigator().getActionProviderQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateAbstractNavigatorItem() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getAbstractNavigatorItemEmitter(), myEditorGen.getNavigator().getAbstractNavigatorItemQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorGroup() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorGroupEmitter(), myEditorGen.getNavigator().getNavigatorGroupQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorItem() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getNavigatorItemEmitter(), myEditorGen.getNavigator().getNavigatorItemQualifiedClassName(), myEditorGen.getNavigator());
	}
	
	private void generateNavigatorGroupIcons() throws InterruptedException, UnexpectedBehaviourException {
		Set<String> groupIcons = new HashSet<String>(); 
		for (GenNavigatorChildReference nextReference : myEditorGen.getNavigator().getChildReferences()) {
			if (nextReference.getGroupIcon() != null && nextReference.getGroupIcon().length() > 0) {
				groupIcons.add(nextReference.getGroupIcon());
			}
		}
		for (String iconPath : groupIcons) {
			generateGroupIcon(new Path(iconPath));
		}
	}

	// property sheet 

	protected void generatePropertySheetSections() throws UnexpectedBehaviourException, InterruptedException {
		if (myEditorGen.getPropertySheet().isNeedsCaption()) {
			internalGenerateJavaClass(
				myEmitters.getPropertySheetLabelProviderEmitter(), 
				myEditorGen.getPropertySheet().getLabelProviderQualifiedClassName(), 
				myEditorGen.getPropertySheet());
		}
		for (GenPropertyTab tab : myEditorGen.getPropertySheet().getTabs()) {
			if (tab instanceof GenCustomPropertyTab) {
				internalGenerateJavaClass(
					myEmitters.getPropertySectionEmitter(),
					((GenCustomPropertyTab) tab).getQualifiedClassName(),
					tab);
			}
		}
	}

	// expressions

	private void generateExpressionProviders() throws UnexpectedBehaviourException, InterruptedException {
		GenExpressionProviderContainer providerContainer = myEditorGen.getExpressionProviders();
		boolean needAbstractExpression = false;
		for (GenExpressionProviderBase nextProvider : providerContainer.getProviders()) {
			if (nextProvider instanceof GenExpressionInterpreter) {
				TextEmitter providerEmitter = null;
				if (GenLanguage.OCL_LITERAL.equals(nextProvider.getLanguage())) {
					providerEmitter = myEmitters.getOCLExpressionFactoryEmitter();
					needAbstractExpression = true;
				} else if (GenLanguage.REGEXP_LITERAL.equals(nextProvider.getLanguage())
						|| GenLanguage.NREGEXP_LITERAL.equals(nextProvider.getLanguage())) {
					providerEmitter = myEmitters.getRegexpExpressionFactoryEmitter();
					needAbstractExpression = true;
				}
				GenExpressionInterpreter interpreter = (GenExpressionInterpreter) nextProvider;
				if (providerEmitter != null) {
					doGenerateJavaClass(providerEmitter, interpreter.getQualifiedClassName(), interpreter);
				}
			}
		}
		if (needAbstractExpression) {
			// so that if there are only literal initializers, do not generate any extra class
			doGenerateJavaClass(myEmitters.getAbstractExpressionEmitter(), providerContainer.getAbstractExpressionQualifiedClassName(), myDiagram);
		}
	}

	private void generateModelAccessFacility() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getModelAccessFacilityEmitter(), myEditorGen.getModelAccess().getQualifiedClassName(), myEditorGen.getModelAccess());
	}

	private void generateShortcutIcon() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateBinaryFile(myEmitters.getShortcutImageEmitter(), new Path("icons/shortcut.gif"), null); //$NON-NLS-1$
	}

	private void generateGroupIcon(Path groupIconPath) throws InterruptedException, UnexpectedBehaviourException {
		doGenerateBinaryFile(myEmitters.getGroupIconEmitter(), groupIconPath, null);	
	}

	private void generateDiagramIcon(String path) throws UnexpectedBehaviourException, InterruptedException {
		// use genModel.prefix if available to match colors of model icons and diagram icons
		// @@see GenPackageImpl#generateEditor - it passes prefix to ModelGIFEmitter 
		Object[] args = new Object[] {myDiagram.getDomainDiagramElement() == null ? myEditorGen.getDiagramFileExtension() : myDiagram.getDomainDiagramElement().getGenPackage().getPrefix() };
		doGenerateBinaryFile(myEmitters.getDiagramIconEmitter(), new Path(path), args);
	}

	private void generateWizardBanner() throws UnexpectedBehaviourException, InterruptedException {
		String stem = myDiagram.getDomainDiagramElement() == null ? "" : myDiagram.getDomainDiagramElement().getGenPackage().getPrefix(); //$NON-NLS-1$
		// @@see GenPackageImpl#generateEditor - it passes prefix to ModelWizardGIFEmitter
		Object[] args = new Object[] {stem.length() == 0 ? myEditorGen.getDiagramFileExtension() : stem };
		doGenerateBinaryFile(myEmitters.getWizardBannerImageEmitter(), new Path("icons/wizban/New" + stem + "Wizard.gif"), args); //$NON-NLS-1$ //$NON-NLS-2$
	}

    private void generateExternalizationSupport() throws UnexpectedBehaviourException, InterruptedException {
        String packageName = myEditorGen.getEditor().getPackageName();
        String messagesClassName = "Messages"; //$NON-NLS-1$
        doGenerateJavaClass(myEmitters.getExternalizeEmitter(),
        		packageName, messagesClassName, new Object[] { myEditorGen });
        doGenerateFile(myEmitters.getMessagesEmitter(),
        		new Path(messagesClassName.toLowerCase() + ".properties"), new Object[] { myEditorGen }); //$NON-NLS-1$
    }

    // plugin

    private void generatePlugin() throws UnexpectedBehaviourException, InterruptedException {
    	generateActivator();
    	generateBundleManifest();
    	generatePluginXml();
    	generatePluginProperties();
    	generateBuildProperties();
    	generateOptionsFile();
    }

	private void generateActivator() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getActivatorEmitter(), myEditorGen.getPlugin().getActivatorQualifiedClassName(), myEditorGen.getPlugin());
	}

	private void generateBundleManifest() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"), new Object[] { myDiagram.getEditorGen().getPlugin() }); //$NON-NLS-1$
	}

	private void generatePluginXml() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getPluginXmlEmitter(), new Path("plugin.xml"), new Object[] { myDiagram.getEditorGen().getPlugin() }); //$NON-NLS-1$
	}

	private void generatePluginProperties() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getPluginPropertiesEmitter(), new Path("plugin.properties"), new Object[] { myDiagram.getEditorGen().getPlugin() }); //$NON-NLS-1$
	}

	private void generateBuildProperties() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getBuildPropertiesEmitter(), new Path("build.properties"), new Object[] { myEditorGen.getPlugin() }); //$NON-NLS-1$
	}

	private void generateOptionsFile() throws InterruptedException, UnexpectedBehaviourException {
		doGenerateFile(myEmitters.getOptionsFileEmitter(), new Path(".options"), new Object[] { myEditorGen.getPlugin() }); //$NON-NLS-1$
	}

	// application

	private void generateApplication() throws UnexpectedBehaviourException, InterruptedException {
		GenApplication application = myEditorGen.getApplication();
		if (application != null) {
			generateApplication(application);
			generateActionBarAdvisor(application);
			generatePerspective(application);
			generateWorkbenchAdvisor(application);
			generateWorkbenchWindowAdvisor(application);
			generateWizardNewFileCreationPage(application);
		}
	}

	private void generateApplication(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getApplicationEmitter(), application.getQualifiedClassName(), application);
	}

	private void generateActionBarAdvisor(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getActionBarAdvisorEmitter(), application.getActionBarAdvisorQualifiedClassName(), application);
	}

	private void generatePerspective(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getPerspectiveEmitter(), application.getPerspectiveQualifiedClassName(), application);
	}

	private void generateWorkbenchAdvisor(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getWorkbenchAdvisorEmitter(), application.getWorkbenchAdvisorQualifiedClassName(), application);
	}

	private void generateWorkbenchWindowAdvisor(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getWorkbenchWindowAdvisorEmitter(), application.getWorkbenchWindowAdvisorQualifiedClassName(), application);
	}

	private void generateWizardNewFileCreationPage(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getWizardNewFileCreationPageEmitter(), application.getPackageName(), "WizardNewFileCreationPage", application); //$NON-NLS-1$
	}

	// actions
	private void generateActions() throws UnexpectedBehaviourException, InterruptedException {
		HashSet<GenContributionItem> processedItems = new HashSet<GenContributionItem>();
		for (GenContributionManager m : myEditorGen.getContextMenus()) {
			LinkedList<GenContributionItem> items = new LinkedList<GenContributionItem>(m.getItems());
			while (!items.isEmpty()) {
				GenContributionItem ci = items.removeFirst();
				if (ci instanceof GenCustomAction && ((GenCustomAction) ci).isGenerateBoilerplate() && !processedItems.contains(ci)) {
					doGenerateJavaClass(myEmitters.getCustomActionEmitter(), ((GenCustomAction) ci).getQualifiedClassName(), ci);
					processedItems.add(ci);
				} else if (ci instanceof GenContributionManager) {
					items.addAll(((GenContributionManager) ci).getItems());
				} else if (ci instanceof GenSharedContributionItem) {
					items.addLast(((GenSharedContributionItem) ci).getActualItem());
				} else if (ci instanceof GenAction) {
					doGenerateJavaClass(myEmitters.getPredefinedActionEmitter(), ((GenAction) ci).getQualifiedClassName(), ci);
					processedItems.add(ci);
				}
			}
		}
	}

	// util

	/**
	 * Passes initialized ImportManager as second template argument
	 */
	private void internalGenerateJavaClass(TextEmitter emitter, String packageName, String className, Object argument) throws InterruptedException {
		ImportUtil importUtil = new ImportUtil(packageName, className);
		doGenerateJavaClass(emitter, packageName, className, argument, importUtil);
	}

	private void internalGenerateJavaClass(TextEmitter emitter, String qualifiedName, Object argument) throws InterruptedException {
		internalGenerateJavaClass(emitter, CodeGenUtil.getPackageName(qualifiedName), CodeGenUtil.getSimpleClassName(qualifiedName), argument);
	}

	private IPath guessProjectLocation(String projectName) {
		if (myEditorGen.getDomainGenModel() == null) {
			return null;
		}
		Path modelProjectPath = new Path(myEditorGen.getDomainGenModel().getModelDirectory());
		return guessNewProjectLocation(modelProjectPath, projectName);
	}

	protected void setupProgressMonitor() {
		Counter c = new Counter();
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenNode(), 7);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenChildLabelNode(), 5);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenLink(), 6);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenLinkLabel(), 2);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenCompartment(), 4);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenDiagram(), 40);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenEditorGenerator(), 2); // i18n=2
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenPlugin(), 6);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenNavigator(), 3);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenNavigatorChildReference(), 1);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenCustomPropertyTab(), 1);
		c.registerFactor(GMFGenPackage.eINSTANCE.getBehaviour(), 1);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenMetricContainer(), 1);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenExpressionProviderContainer(), 1);
		c.registerFactor(GMFGenPackage.eINSTANCE.getPalette(), 1);
		setupProgressMonitor(null, c.getTotal(myEditorGen));
	}
}@


1.259
log
@[174961] Menu actions - do not generate provider when the same can be achieved with straightforward Java coding.
Note, along with the move of action contribution, printintEnabled attribute now controls presence of Page Setup action as well. GMF Runtime always contributes this action, while there might be a need not to.
@
text
@d29 1
d31 1
d62 1
d224 1
a224 2
		generateLoadResourceAction();
		if (myDiagram.generateInitDiagramAction() || myDiagram.generateCreateShortcutAction()) {
d227 5
a231 2
		if (myDiagram.generateInitDiagramAction()) {
			generateInitDiagramFileAction();
d234 1
a234 2
		if (myDiagram.generateCreateShortcutAction()) {
			generateCreateShortcutAction();
a673 4
	private void generateInitDiagramFileAction() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getInitDiagramFileActionEmitter(), myEmitters.getInitDiagramFileActionName(myDiagram), myDiagram);
	}

a721 11
	private void generateCreateShortcutAction() throws InterruptedException {
		if (!myDiagram.generateCreateShortcutAction()) {
			return;
		}
		doGenerateJavaClass(myEmitters.getCreateShortcutActionEmitter(), myDiagram.getCreateShortcutActionQualifiedClassName(), myDiagram);
	}
	
	private void generateLoadResourceAction() throws InterruptedException {
		doGenerateJavaClass(myEmitters.getLoadResourceActionEmitter(), myDiagram.getLoadResourceActionQualifiedClassName(), myDiagram);
	}
	
d995 3
@


1.258
log
@[174961] Code generation support for custom actions
@
text
@a183 3
		if (myEditorGen.getPlugin().isPrintingEnabled()) {
			generateContributionItemProvider();
		}
a589 4
	private void generateContributionItemProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getContributionItemProviderEmitter(), myDiagram.getContributionItemProviderQualifiedClassName(), myDiagram);
	}

@


1.257
log
@[247311] support boilerplate code generation for custom preference pages
[247542] generate only actually used preference pages
@
text
@d19 1
d36 3
d57 1
d107 1
d109 1
a109 1
        
a122 3
		if (myEditorGen.getModelAccess() != null) {
			generateMetaModelFacility();
		}
a208 3
		if (myEditorGen.getModelAccess() != null) {
			generateModelAccessFacility();
		}
d286 1
d999 17
a1015 2
	private void generateMetaModelFacility() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getMetaModelFacilityEmitter(), myEditorGen.getModelAccess().getQualifiedClassName(), myEditorGen.getModelAccess());
@


1.256
log
@[235113] alternative parser access
@
text
@d19 1
d35 1
d51 1
d53 1
d59 1
d212 1
a212 5
		generateAppearancePreferencePage();
		generateConnectionsPreferencePage();
		generateGeneralPreferencePage();
		generatePrintingPreferencePage();
		generateRulersAndGridPreferencePage();
d517 15
a531 18
	private void generateAppearancePreferencePage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getAppearancePreferencePageEmitter(), myEmitters.getAppearancePreferencePageName(myDiagram), myDiagram);
	}

	private void generateConnectionsPreferencePage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getConnectionsPreferencePageEmitter(), myEmitters.getConnectionsPreferencePageName(myDiagram), myDiagram);
	}

	private void generateGeneralPreferencePage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getGeneralPreferencePageEmitter(), myEmitters.getGeneralPreferencePageName(myDiagram), myDiagram);
	}

	private void generatePrintingPreferencePage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getPrintingPreferencePageEmitter(), myEmitters.getPrintingPreferencePageName(myDiagram), myDiagram);
	}

	private void generateRulersAndGridPreferencePage() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getRulersAndGridPreferencePageEmitter(), myEmitters.getRulersAndGridPreferencePageName(myDiagram), myDiagram);
@


1.255
log
@[235113] alternative parser access, handle cases with simplistic diagrams, with no labels
@
text
@d25 1
d556 1
a556 1
		if (myEditorGen.getLabelParsers() != null) {
d560 12
@


1.254
log
@[244419] Support for custom parser - finalize parsers/labelmodelfacet relationship
@
text
@d542 3
d555 3
a557 1
		doGenerateJavaClass(myEmitters.getParserProviderEmitter(), myEditorGen.getLabelParsers().getQualifiedClassName(), myEditorGen.getLabelParsers());
@


1.253
log
@[245681] allow to specify whether link is reroutable
@
text
@a49 1
import org.eclipse.gmf.codegen.gmfgen.LabelTextAccessMethod;
a536 5
	// FIXME remove together with GenDiagram#requiresParser() method
	private boolean shouldGenerateParser(LabelTextAccessMethod method) {
		return myDiagram.getEditorGen().requiresParser(method);
	}

@


1.252
log
@Refactoring to address [235113] alternative parser access and [244419] Support for custom parser:
no separate Parser implementations, rather tailored to specific view and edit methods used.
@
text
@d149 6
a154 2
				generateCreateLinkCommand(next);
				generateReorientLinkCommand(next);
d156 6
a161 2
				generateCreateRefLinkCommand(next);
				generateReorientRefLinkCommand(next);
@


1.251
log
@[235113] alternative parser access, step 2: use dedicated GenParsers entry, along with exposing parts of template as API
@
text
@d47 1
d53 1
d110 1
a110 5
		generateCompositeParser();
		generateMessageFormatParser();
		generateNativeParser();
		generatePrintfParser();
		generateRegexpParser();
d530 1
d539 5
a543 25
	private void generateCompositeParser() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCompositeParserEmitter(), myEmitters.getCompositeParserName(myDiagram), myDiagram);
	}

	private void generateMessageFormatParser() throws UnexpectedBehaviourException, InterruptedException {
		if (shouldGenerateParser(LabelTextAccessMethod.MESSAGE_FORMAT)) {
			doGenerateJavaClass(myEmitters.getMessageFormatParserEmitter(), myEmitters.getMessageFormatParserName(myDiagram), myDiagram);
		}
	}

	private void generateNativeParser() throws UnexpectedBehaviourException, InterruptedException {
		if (shouldGenerateParser(LabelTextAccessMethod.NATIVE)) {
			doGenerateJavaClass(myEmitters.getNativeParserEmitter(), myEmitters.getNativeParserName(myDiagram), myDiagram);
		}
	}

	private void generatePrintfParser() throws UnexpectedBehaviourException, InterruptedException {
		if (shouldGenerateParser(LabelTextAccessMethod.PRINTF)) {
			doGenerateJavaClass(myEmitters.getPrintfParserEmitter(), myEmitters.getPrintfParserName(myDiagram), myDiagram);
		}
	}

	private void generateRegexpParser() throws UnexpectedBehaviourException, InterruptedException {
		if (shouldGenerateParser(LabelTextAccessMethod.REGEXP)) {
			doGenerateJavaClass(myEmitters.getRegexpParserEmitter(), myEmitters.getRegexpParserName(myDiagram), myDiagram);
@


1.250
log
@[227127] support literal values for feature initializers. step 4: do not generate abstract expression unless needed
@
text
@d571 1
a571 1
		doGenerateJavaClass(myEmitters.getParserProviderEmitter(), myDiagram.getParserProviderQualifiedClassName(), myDiagram);
@


1.249
log
@[150177] Use dynamic EMF model instead of generated code - tests.
@
text
@d869 1
a869 1
		doGenerateJavaClass(myEmitters.getAbstractExpressionEmitter(), providerContainer.getAbstractExpressionQualifiedClassName(), myDiagram);
d875 1
d879 1
d887 4
@


1.248
log
@[178225] Allow to delete ref-based links from the context menu
@
text
@d16 1
d92 4
d114 3
d995 4
@


1.247
log
@[150177] phase III, bring dynamic access facility into the game.
@
text
@d205 2
d710 8
@


1.246
log
@[150177] phase II, generated facility to perform metamodel operations (like instanceof or metaclass accessors) with dynamic models, new gmfgen options to parameterize codegen.
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2007 Borland Software Corporation
@


1.245
log
@get rid of jet
@
text
@d187 3
d869 4
@


1.244
log
@rewrite abs expr in xpand
@
text
@d845 1
a845 1
	
a848 1

d850 1
a850 1
			if(nextProvider instanceof GenExpressionInterpreter) {
d852 1
a852 1
				if(GenLanguage.OCL_LITERAL.equals(nextProvider.getLanguage())) {
d854 2
a855 1
				} else if(GenLanguage.REGEXP_LITERAL.equals(nextProvider.getLanguage()) || GenLanguage.NREGEXP_LITERAL.equals(nextProvider.getLanguage())) {
d859 2
a860 6
				if(providerEmitter != null) {
					internalGenerateJavaClass(
							providerEmitter,
							providerContainer.getExpressionsPackageName(),
							interpreter.getClassName(),
							interpreter);
d865 1
a865 1
	
d869 1
a869 1
	
@


1.243
log
@rewrite validation prov in xpand
@
text
@d848 1
a848 6
		internalGenerateJavaClass(
			myEmitters.getAbstractExpressionEmitter(),
			providerContainer.getExpressionsPackageName(), 
			providerContainer.getAbstractExpressionClassName(),
			myDiagram
		);
@


1.242
log
@rewrite metric provider in xpand
@
text
@d595 1
a595 5
		internalGenerateJavaClass(
			myEmitters.getValidationProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getValidationProviderClassName(),
			myDiagram);
@


1.241
log
@rewrite element initializer in xpand
@
text
@d615 1
a615 5
		internalGenerateJavaClass(
			myEmitters.getMetricProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getMetricProviderClassName(),
			myDiagram);
@


1.240
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@d562 1
a562 6
		internalGenerateJavaClass(
			myEmitters.getElementInitializersEmitter(),
			myDiagram.getProvidersPackageName(),
			"ElementInitializers", //$NON-NLS-1$
			myDiagram
		);
@


1.240.2.1
log
@rewrite element initializers in xpand
@
text
@d562 6
a567 1
		doGenerateJavaClass(myEmitters.getElementInitializersEmitter(), myDiagram.getProvidersPackageName() + ".ElementInitializers", myDiagram); //$NON-NLS-1$
@


1.240.2.2
log
@rewrite metric provider in xpand
@
text
@d615 5
a619 1
		doGenerateJavaClass(myEmitters.getMetricProviderEmitter(), myDiagram.getMetricProviderQualifiedClassName(), myDiagram);
@


1.240.2.3
log
@rewrite validation prov in xpand
@
text
@d595 5
a599 1
		doGenerateJavaClass(myEmitters.getValidationProviderEmitter(), myDiagram.getValidationProviderQualifiedClassName(), myDiagram);
@


1.240.2.4
log
@rewrite abs expr in xpand
@
text
@d848 6
a853 1
		doGenerateJavaClass(myEmitters.getAbstractExpressionEmitter(), providerContainer.getAbstractExpressionQualifiedClassName(), myDiagram);
@


1.240.2.5
log
@get rid of jet
@
text
@d845 1
a845 1

d849 1
d851 1
a851 1
			if (nextProvider instanceof GenExpressionInterpreter) {
d853 1
a853 1
				if (GenLanguage.OCL_LITERAL.equals(nextProvider.getLanguage())) {
d855 1
a855 2
				} else if (GenLanguage.REGEXP_LITERAL.equals(nextProvider.getLanguage())
						|| GenLanguage.NREGEXP_LITERAL.equals(nextProvider.getLanguage())) {
d859 6
a864 2
				if (providerEmitter != null) {
					doGenerateJavaClass(providerEmitter, interpreter.getQualifiedClassName(), interpreter);
d869 1
a869 1

d873 1
a873 1

@


1.239
log
@[192848] Rewrite creation wizard and ui contributors in xpand
@
text
@d588 1
a588 6
		internalGenerateJavaClass(
				myEmitters.getContributionItemProviderEmitter(),
				myDiagram.getProvidersPackageName(),
				myDiagram.getContributionItemProviderClassName(),
				myDiagram
			);
d590 1
a590 1
	
@


1.238
log
@[192850] Rewrite GraphicalNodeEditPolicy.javajet template in xpand
@
text
@d716 1
a716 6
		internalGenerateJavaClass(
			myEmitters.getCreationWizardEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getCreationWizardClassName(),
			myDiagram
		);
d720 1
a720 6
		internalGenerateJavaClass(
			myEmitters.getCreationWizardPageEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getCreationWizardPageClassName(),
			myDiagram
		);
d772 1
a772 6
		internalGenerateJavaClass(
			myEmitters.getActionBarContributorEmitter(),
			editor.getPackageName(),
			editor.getActionBarContributorClassName(),
			editor
		);
@


1.237
log
@group plugin templates in one folder
@
text
@d287 1
a287 1
			generateNodeGraphicalNodeEditPolicy(node);
d465 2
a466 7
	private void generateNodeGraphicalNodeEditPolicy(GenNode genNode) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getGraphicalNodeEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			genNode.getGraphicalNodeEditPolicyClassName(),
			genNode
		);
@


1.236
log
@[192464] - Convert /policies/CompartmentItemSemapticEditPolicy and DiagramItemSemanticEditPolicy .javajet template to xpand
@
text
@a247 7
		// plug-in
		generatePluginClass();
		generateBundleManifest();
		generatePluginProperties();
		generateOptionsFile();
		generatePluginXml();
		generateBuildProperties();
d264 1
a861 4
	
	private void generatePluginClass() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getPluginClassEmitter(), myEditorGen.getPlugin().getActivatorQualifiedClassName(), myEditorGen.getPlugin());
	}
a912 21

	private void generatePluginXml() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getPluginXmlEmitter(), new Path("plugin.xml"), new Object[] { myDiagram.getEditorGen().getPlugin() }); //$NON-NLS-1$
	}

	private void generatePluginProperties() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getPluginPropertiesEmitter(), new Path("plugin.properties"), new Object[] { myDiagram.getEditorGen().getPlugin() }); //$NON-NLS-1$
	}
	
	private void generateOptionsFile() throws InterruptedException, UnexpectedBehaviourException {
		doGenerateFile(myEmitters.getOptionsFileEmitter(), new Path(".options"), new Object[] { myEditorGen.getPlugin() }); //$NON-NLS-1$
	}

	private void generateBundleManifest() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"), new Object[] { myDiagram.getEditorGen().getPlugin() }); //$NON-NLS-1$
	}

	private void generateBuildProperties() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateFile(myEmitters.getBuildPropertiesEmitter(), new Path("build.properties"), new Object[] { myEditorGen.getPlugin() }); //$NON-NLS-1$
	}
	
d944 35
@


1.235
log
@rewrite in xpand
@
text
@d457 1
a457 1
	private void generateDiagramItemSemanticEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
d461 1
a461 6
		internalGenerateJavaClass(
			myEmitters.getDiagramItemSemanticEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getItemSemanticEditPolicyClassName(),
			myDiagram
		);
d464 1
a464 1
	private void generateCompartmentItemSemanticEditPolicy(GenCompartment genCompartment) throws UnexpectedBehaviourException, InterruptedException {
d468 1
a468 6
		internalGenerateJavaClass(
			myEmitters.getCompartmentItemSemanticEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			genCompartment.getItemSemanticEditPolicyClassName(),
			genCompartment
		);
@


1.234
log
@[192422] Rewrite Plugin.javajet template in xpand
@
text
@d943 1
a943 1
		doGenerateFile(myEmitters.getOptionsFileEmitter(), new Path(".options"), new Object[] { myDiagram.getEditorGen().getPlugin()  }); //$NON-NLS-1$
d951 1
a951 1
		doGenerateFile(myEmitters.getBuildPropertiesEmitter(), new Path("build.properties"), new Object[] { myDiagram }); //$NON-NLS-1$
@


1.233
log
@[191858] - Convert /providers/ShortcutsDecoratorProvider.javajet template to xpand
@
text
@d880 1
a880 6
		internalGenerateJavaClass(
			myEmitters.getPluginClassEmitter(),
			myEditorGen.getEditor().getPackageName(), 
			myEditorGen.getPlugin().getActivatorClassName(),
			myEditorGen.getPlugin()
		);
@


1.232
log
@[191855] - Convert /editor/CreateShortcutAction.javajet template to xpand
@
text
@d637 2
a638 6
	private void generateShortcutsDecoratorProvider() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getShortcutsDecoratorProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getShortcutsDecoratorProviderClassName(),
			myDiagram);
@


1.231
log
@[191853] - Convert /editor/ElementChooser.javajet template to xpand
@
text
@d763 1
a763 1
	private void generateCreateShortcutAction() throws UnexpectedBehaviourException, InterruptedException {
d767 1
a767 6
		internalGenerateJavaClass(
				myEmitters.getCreateShortcutActionEmitter(),
				myEditorGen.getEditor().getPackageName(), 
				myDiagram.getCreateShortcutActionClassName(),
				myDiagram
			);
@


1.230
log
@[192026] Rewrite edit helper templates in xpand
@
text
@d779 1
a779 1
	private void generateElementChooser() throws UnexpectedBehaviourException, InterruptedException {
d783 1
a783 6
		internalGenerateJavaClass(
				myEmitters.getElementChooserEmitter(),
				myEditorGen.getEditor().getPackageName(), 
				myDiagram.getElementChooserClassName(),
				myDiagram
			);
@


1.229
log
@[192029] Rewrite modeling assistant provider in xpand
@
text
@d351 1
a351 6
		internalGenerateJavaClass(
			myEmitters.getBaseEditHelperEmitter(),
			myDiagram.getEditHelpersPackageName(),
			myDiagram.getBaseEditHelperClassName(),
			myDiagram
		);
d367 1
a367 6
		internalGenerateJavaClass(
			myEmitters.getEditHelperEmitter(),
			myDiagram.getEditHelpersPackageName(),
			genType.getEditHelperClassName(),
			genType
		);
d374 1
a374 6
		internalGenerateJavaClass(
			myEmitters.getEditHelperAdviceEmitter(),
			myDiagram.getEditHelpersPackageName(),
			genType.getEditHelperAdviceClassName(),
			genType
		);
@


1.228
log
@[191856] - Convert /editor/Editor.javajet template to xpand
[192134] - NPE while regenerating TaiPan diagram (in editor template)
@
text
@d633 1
a633 5
		internalGenerateJavaClass(
			myEmitters.getModelingAssistantProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getModelingAssistantProviderClassName(),
			myDiagram);
@


1.227
log
@fix provider qname accessor name
@
text
@d777 1
a777 1
	private void generateEditor() throws UnexpectedBehaviourException, InterruptedException {
d779 1
a779 6
		internalGenerateJavaClass(
			myEmitters.getEditorEmitter(),
			editor.getPackageName(),
			editor.getClassName(),
			editor
		);
@


1.226
log
@[192027] Rewrite IconProvider template in xpand
@
text
@d653 1
a653 1
		doGenerateJavaClass(myEmitters.getValidationDecoratorProviderEmitter(), myDiagram.getValidationDecoratorProviderQualifedClassName(), myDiagram);
@


1.225
log
@[191857] - Convert /editor/ShortcutPropertyTester.javajet template to xpand
@
text
@d641 1
a641 5
		internalGenerateJavaClass(
			myEmitters.getIconProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getIconProviderClassName(),
			myDiagram);
@


1.224
log
@[191854] - Convert /editor/LoadResourceAction.javajet template to xpand
@
text
@d668 2
a669 6
	private void generateShortcutPropertyTester() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getShortcutPropertyTesterEmitter(),
				myEditorGen.getEditor().getPackageName(),
				myDiagram.getShortcutPropertyTesterClassName(),
				myDiagram);
@


1.223
log
@[191851] - Convert /navigator/NavigatorSorter.javajet template to xpand
@
text
@d807 2
a808 7
	private void generateLoadResourceAction() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
				myEmitters.getLoadResourceActionEmitter(),
				myEditorGen.getEditor().getPackageName(), 
				myDiagram.getLoadResourceActionClassName(),
				myDiagram
			);
@


1.222
log
@[191850] - Convert /navigator/NavigatorActionProvider.javajet template to xpand
@
text
@d898 2
a899 7
	private void generateNavigatorSorter() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getNavigatorSorterEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getSorterClassName(), 
				myEditorGen.getNavigator()
			);
@


1.221
log
@[191852] - Convert /navigator/NavigatorLabelProvider.javajet template to xpand
@
text
@d890 1
a890 1
	private void generateNavigatorLabelProvider() throws InterruptedException, UnexpectedBehaviourException {
d907 2
a908 7
	private void generateNavigatorActionProvider() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getNavigatorActionProviderEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getActionProviderClassName(), 
				myEditorGen.getNavigator()
			);
@


1.220
log
@rewrite create node command in xpand
@
text
@d891 1
a891 6
		internalGenerateJavaClass(
				myEmitters.getNavigatorLabelProviderEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getLabelProviderClassName(),
				myEditorGen.getNavigator()
			);
@


1.219
log
@rewrite command to create shortcut annotation in xpand
@
text
@d283 3
a285 1
		generateNodeCreateCommand(node);
d310 3
a312 1
		generateNodeCreateCommand(child);
d324 4
a510 12
	
	private void generateNodeCreateCommand(GenNode genNode) throws InterruptedException, UnexpectedBehaviourException {
		if (genNode.getModelFacet() == null) {
			return;
		}
		internalGenerateJavaClass(
				myEmitters.getNodeCreateCommandEmitter(),
				myDiagram.getEditCommandsPackageName(),
				genNode.getCreateCommandClassName(),
				genNode
			);
	}
@


1.218
log
@rewrite command in xpand
@
text
@d214 1
a214 1
			generateCreateShortcutDecorationCommand();
d336 4
a810 12
	private void generateCreateShortcutDecorationCommand() throws InterruptedException, UnexpectedBehaviourException {
		if (!myDiagram.generateCreateShortcutAction()) {
			return;
		}
		internalGenerateJavaClass(
				myEmitters.getCreateShortcutDecorationCommandEmitter(),
				myDiagram.getEditCommandsPackageName(), 
				myDiagram.getCreateShortcutDecorationsCommandClassName(),
				myDiagram
			);
	}
	
@


1.217
log
@rewrite new file wizard page in xpand
@
text
@d96 1
a96 1
		generateReorientConnectionViewCommand();
d316 18
a333 7
	private void generateReorientConnectionViewCommand() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getReorientConnectionViewCommandEmitter(),
			myDiagram.getEditCommandsPackageName(),
			myDiagram.getReorientConnectionViewCommandClassName(),
			myDiagram
		);
a518 16
	private void generateCreateLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCreateLinkCommandEmitter(), link.getCreateCommandQualifiedClassName(), link);
	}

	private void generateCreateRefLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getCreateRefLinkCommandEmitter(), link.getCreateCommandQualifiedClassName(), link);
	}

	private void generateReorientLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getReorientLinkCommandEmitter(), link.getReorientCommandQualifiedClassName(), link);
	}

	private void generateReorientRefLinkCommand(GenLink link) throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getReorientRefLinkCommandEmitter(), link.getReorientCommandQualifiedClassName(), link);
	}

@


1.216
log
@rename label text view factory to label view factory
@
text
@d1064 9
d1108 1
a1108 6
		internalGenerateJavaClass(
			myEmitters.getWizardNewFileCreationPageEmitter(),
			application.getPackageName(),
			"WizardNewFileCreationPage", //$NON-NLS-1$
			application
		);
a1110 9
    private void generateExternalizationSupport() throws UnexpectedBehaviourException, InterruptedException {
        String packageName = myEditorGen.getEditor().getPackageName();
        String messagesClassName = "Messages"; //$NON-NLS-1$
        doGenerateJavaClass(myEmitters.getExternalizeEmitter(),
        		packageName, messagesClassName, new Object[] { myEditorGen });
        doGenerateFile(myEmitters.getMessagesEmitter(),
        		new Path(messagesClassName.toLowerCase() + ".properties"), new Object[] { myEditorGen }); //$NON-NLS-1$
    }

@


1.215
log
@rename label view factory to floating label view factory
@
text
@d716 1
a716 1
		doGenerateJavaClass(myEmitters.getLabelTextViewFactoryEmitter(), label.getNotationViewFactoryQualifiedClassName(), label);
@


1.214
log
@rewrite node view factory generator in xpand
@
text
@d720 1
a720 1
		doGenerateJavaClass(myEmitters.getLabelViewFactoryEmitter(), label.getNotationViewFactoryQualifiedClassName(), label);
d724 1
a724 1
		doGenerateJavaClass(myEmitters.getLabelViewFactoryEmitter(), label.getNotationViewFactoryQualifiedClassName(), label);
@


1.213
log
@rewrite label node view factory generator in xpand
@
text
@d281 1
a281 1
		generateViewFactory(node);
a284 1

a286 1

a310 1

d699 2
a700 7
	private void generateViewFactory(GenCommonBase genElement) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getViewFactoryEmitter(),
			myDiagram.getNotationViewFactoriesPackageName(),
			genElement.getNotationViewFactoryClassName(),
			genElement
		);
@


1.212
log
@rewrite link view factory generator in xpand
@
text
@d308 1
a308 1
		generateViewFactory(child);
d711 4
@


1.211
log
@rewrite compartment view factory generator in xpand
@
text
@d137 1
a137 1
			generateViewFactory(next);
d715 4
@


1.210
log
@rewrite label view factories in xpand
@
text
@d131 1
a131 1
			generateViewFactory(compartment);
d711 4
@


1.209
log
@- ViewProvider is in xpand now.
- Separating semantic part of VisualIDRegistry from pure-notation.
@
text
@d711 2
a712 7
	private void generateLinkLabelViewFactory(GenLinkLabel label) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getLabelViewFactoryEmitter(),
			myDiagram.getNotationViewFactoriesPackageName(),
			label.getNotationViewFactoryClassName(),
			label
		);
d716 1
a716 6
		internalGenerateJavaClass(
			myEmitters.getLabelViewFactoryEmitter(),
			myDiagram.getNotationViewFactoriesPackageName(),
			label.getNotationViewFactoryClassName(),
			label
		);
d719 2
a720 7
	private void generateNodeLabelViewFactory(GenNodeLabel label) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getLabelTextViewFactoryEmitter(),
			myDiagram.getNotationViewFactoriesPackageName(),
			label.getNotationViewFactoryClassName(),
			label
		);
@


1.208
log
@F5 triggering update of selected element added
@
text
@d618 2
a619 7
	private void generateViewProvider() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getViewProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getNotationViewProviderClassName(),
			myDiagram
		);
@


1.207
log
@rewrite diagram view factory in xpand
@
text
@d222 1
d873 4
@


1.206
log
@Generating VisualIDRegistry using XPAND.
@
text
@d155 1
a155 1
		generateViewFactory(myDiagram);
d702 4
@


1.205
log
@[178958] Provide validation decorations in RCP diagram editors
@
text
@d779 2
a780 7
	private void generateVisualIDRegistry() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getVisualIDRegistryEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getVisualIDRegistryClassName(),
			myDiagram
		);
@


1.204
log
@GenDiagramUpdater created in .gmfgen model
@
text
@d171 7
a177 1
			if (myDiagram.getEditorGen().getApplication() == null) {
a178 3
				if (myDiagram.isValidationDecorators()) {
					generateValidationDecoratorProvider();
				}
d744 4
@


1.203
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d863 1
a863 1
		doGenerateJavaClass(myEmitters.getDiagramUpdaterEmitter(), myDiagram.getDiagramUpdaterQualifiedClassName(), myDiagram);
d867 1
a867 1
		doGenerateJavaClass(myEmitters.getNodeDescriptorEmitter(), myDiagram.getNodeDescriptorQualifiedClassName(), myDiagram);
d871 1
a871 1
		doGenerateJavaClass(myEmitters.getLinkDescriptorEmitter(), myDiagram.getLinkDescriptorQualifiedClassName(), myDiagram);
@


1.202
log
@rewrite in xpand
@
text
@d751 1
a751 5
			internalGenerateJavaClass(
					myEmitters.getDiagramContentsInitializerEmitter(),
					myEditorGen.getEditor().getPackageName(),
					"DiagramContentsInitializer", //$NON-NLS-1$
					myDiagram);
@


1.201
log
@extract validate action from provider
@
text
@d666 2
a667 6
		internalGenerateJavaClass(
			myEmitters.getValidationDecoratorProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getValidationDecoratorProviderClassName(),
			myDiagram);
	}	
@


1.200
log
@rewrite marker navigation provider in xpand
@
text
@d170 1
d741 4
@


1.199
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d695 1
a695 1
	
d697 2
a698 6
		internalGenerateJavaClass(
			myEmitters.getMarkerNavigationProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getMarkerNavigationProviderClassName(),
			myDiagram);
	}	
@


1.198
log
@use java 5 if printf parser is used
@
text
@a23 1
import org.eclipse.gmf.codegen.gmfgen.FeatureLabelModelFacet;
d219 1
d876 4
@


1.197
log
@[156412] Support printf syntax to produce label text
@
text
@d558 2
a559 11
	private boolean shouldGenerateParser(LabelTextAccessMethod type) {
		for (Iterator it = myDiagram.eAllContents(); it.hasNext(); ) {
			Object next = it.next();
			if (next instanceof FeatureLabelModelFacet) {
				FeatureLabelModelFacet facet = (FeatureLabelModelFacet) next;
				if (facet.getViewMethod() == type || facet.getEditMethod() == type) {
					return true;
				}
			}
		}
		return false;
@


1.196
log
@generate only appropriate parsers
@
text
@d107 1
d591 6
@


1.195
log
@[156411] Support regular expressions in label mappings to extract feature values from user input
@
text
@d24 1
d49 1
d557 13
d579 3
a581 1
		doGenerateJavaClass(myEmitters.getMessageFormatParserEmitter(), myEmitters.getMessageFormatParserName(myDiagram), myDiagram);
d585 3
a587 1
		doGenerateJavaClass(myEmitters.getNativeParserEmitter(), myEmitters.getNativeParserName(myDiagram), myDiagram);
d591 3
a593 1
		doGenerateJavaClass(myEmitters.getRegexpParserEmitter(), myEmitters.getRegexpParserName(myDiagram), myDiagram);
@


1.194
log
@[158420] Using factory methods for converting to/from Strings and EDataType values in label editor parser
@
text
@d105 1
d571 4
@


1.193
log
@refactor message format parser; introduce editor pattern
@
text
@d99 2
a100 2
		
		// edit parts, edit policies and providers
d102 1
d104 3
d558 4
d566 4
@


1.192
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d102 1
a102 2
		generateStructuralFeatureParser();
		generateStructuralFeaturesParser();
d548 1
a548 1
	// providers
d551 1
a551 1
		doGenerateJavaClass(myEmitters.getAbstractParserEmitter(), myDiagram.getAbstractParserQualifiedClassName(), myDiagram);
d554 2
a555 2
	private void generateStructuralFeatureParser() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getStructuralFeatureParserEmitter(), myDiagram.getStructuralFeatureParserQualifiedClassName(), myDiagram);
d558 1
a558 3
	private void generateStructuralFeaturesParser() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getStructuralFeaturesParserEmitter(), myDiagram.getStructuralFeaturesParserQualifiedClassName(), myDiagram);
	}
@


1.191
log
@[181167] - Separate sycnhronization logic from CanonicalEditPolicy / DiagramContentsInitializer
@
text
@d212 1
d839 4
@


1.190
log
@rewrite ParserProvider in xpand
@
text
@d211 1
d834 4
@


1.189
log
@rewrite StructuralFeaturesParser in xpand
@
text
@d561 4
a620 8
	private void generateParserProvider() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getParserProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getParserProviderClassName(),
			myDiagram);
	}

@


1.188
log
@rewrite AbstractParser in xpand
@
text
@d554 1
a554 6
		internalGenerateJavaClass(
			myEmitters.getStructuralFeatureParserEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getStructuralFeatureParserClassName(),
			myDiagram
		);
d558 1
a558 6
		internalGenerateJavaClass(
			myEmitters.getStructuralFeaturesParserEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getStructuralFeaturesParserClassName(),
			myDiagram
		);
d565 1
a565 1
			"ElementInitializers",
d726 1
a726 1
					"DiagramContentsInitializer",
d1078 5
a1082 3
        String messagesClassName = "Messages";
        doGenerateJavaClass(myEmitters.getExternalizeEmitter(), packageName, messagesClassName, new Object[] { myEditorGen });
        doGenerateFile(myEmitters.getMessagesEmitter(), new Path(messagesClassName.toLowerCase()+".properties"), new Object[] { myEditorGen });
d1084 1
a1084 1
    
@


1.187
log
@DiagramCanonicalEditpolicy template is in XPAND now.
[182556] - getSemanticChildrenList.jetinc generates empty switch statement causing generation to fail
@
text
@d550 1
a550 6
		internalGenerateJavaClass(
			myEmitters.getAbstractParserEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getAbstractParserClassName(),
			myDiagram
		);
@


1.186
log
@[180702] Move logic from semantic edit policy into creation commands
@
text
@d430 2
a431 7
	private void generateDiagramCanonicalEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getDiagramCanonicalEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getCanonicalEditPolicyClassName(),
			myDiagram
		);
@


1.185
log
@Rewriting template to xpt

[170079] - Do not generate unnecessary CanonicalEditPolicies in case if phantoms are allowed for diagram
@
text
@d137 1
a137 1
				generateLinkCreateCommand(next);
d501 3
a503 8
	
	private void generateLinkCreateCommand(GenLink genLink) throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getCreateTypeLinkCommandEmitter(),
				myDiagram.getEditCommandsPackageName(),
				genLink.getCreateCommandClassName(),
				genLink
			);
@


1.184
log
@no reason to generate empty edithelper advices unless we do generate some meaningful code within. Those willing to get empty classes generated can specify advice class name in the model
@
text
@d439 2
a440 7
	private void generateChildContainerCanonicalEditPolicy(GenChildContainer genContainer) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getChildContainerCanonicalEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			genContainer.getCanonicalEditPolicyClassName(),
			genContainer
		);
@


1.183
log
@[181778] Generate standalone creation commands for ref links
@
text
@d347 3
@


1.182
log
@[177109] OpenDiagramBehaviour not generated for child label nodes
@
text
@a135 1
			generateLinkCreateCommand(next);
d137 1
d140 1
a504 3
		if (false == genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			return;
		}
d513 4
@


1.181
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d297 1
@


1.180
log
@[177758] - Link from a node to a link is not possible
@
text
@a505 1
		TypeLinkModelFacet modelFacet = (TypeLinkModelFacet) genLink.getModelFacet();
d509 1
a509 1
				modelFacet.getCreateCommandClassName(),
@


1.179
log
@Implementing "link with editor" for URI editor input
@
text
@d495 1
a495 1
	private void generateLinkItemSemanticEditPolicy(GenLink genLink) throws UnexpectedBehaviourException, InterruptedException {
d499 1
a499 6
		internalGenerateJavaClass(
			myEmitters.getLinkItemSemanticEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			genLink.getItemSemanticEditPolicyClassName(),
			genLink
		);
@


1.178
log
@[168660] Support shortcuts in RCP applications
@
text
@d227 1
d902 4
@


1.177
log
@[114348] add command to reorient ref based links
@
text
@d194 3
d201 1
a201 1
		if (myDiagram.getEditorGen().getApplication() == null) {
d204 5
a208 1
			generateElementChooser();
d742 4
d858 5
a862 1
	
@


1.176
log
@Fixing problems with NavigatorLinkHelper.
@
text
@d24 1
d139 2
d516 4
@


1.175
log
@NavigatorReference type constant name corrected.
Generating wrapper for domain model navigator nodes to preserve navigator tree selection/expansion on model files reload.
@
text
@d855 2
a856 7
	private void generateMatchingStrategy() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getMatchingStrategyEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getMatchingStrategyClassName(),
			myDiagram
		);
d888 2
a889 7
	private void generateNavigatorLinkHelper() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getNavigatorLinkHelperEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getLinkHelperClassName(), 
				myEditorGen.getNavigator()
			);
@


1.174
log
@Generating diagram file navigator updating code.
@
text
@d215 1
d876 4
@


1.173
log
@[168661] Support init fiagram in RCP
@
text
@d915 2
a916 7
	private void generateAbstractNavigatorItem() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getAbstractNavigatorItemEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getAbstractNavigatorItemClassName(),
				myEditorGen.getNavigator()
			);
d919 2
a920 7
	private void generateNavigatorGroup() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getNavigatorGroupEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getNavigatorGroupClassName(),
				myEditorGen.getNavigator()
			);
d923 2
a924 7
	private void generateNavigatorItem() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getNavigatorItemEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getNavigatorItemClassName(),
				myEditorGen.getNavigator()
			);
@


1.172
log
@Generating generic navigator providers for domain model.
@
text
@d191 4
a198 4
			if (myDiagram.generateInitDiagramAction()) {
				generateInitDiagramFileAction();
				generateNewDiagramFileWizard();
			}
@


1.171
log
@rewrite init diagram file action in xpand
@
text
@a41 1
import org.eclipse.gmf.codegen.gmfgen.GenNavigator;
d203 1
a203 1
			generateNavigatorContentProvider(myEditorGen.getNavigator());
d212 5
d381 1
a381 1
	private void generateBaseItemSemanticEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
d464 1
a464 1
	private void generateNodeItemSemanticEditPolicy(GenNode genNode) throws UnexpectedBehaviourException, InterruptedException {
d840 1
a840 1
	private void generateDocumentProvider() throws UnexpectedBehaviourException, InterruptedException {
d863 14
a876 2
	private void generateNavigatorContentProvider(GenNavigator navigator) throws InterruptedException, UnexpectedBehaviourException {
		doGenerateJavaClass(myEmitters.getNavigatorContentProviderEmitter(), navigator.getContentProviderQualifiedClassName(), navigator);
@


1.170
log
@[114348] Generate command to reorient link
@
text
@d724 1
a724 5
		internalGenerateJavaClass(
			myEmitters.getInitDiagramFileActionEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getInitDiagramFileActionClassName(),
			myDiagram);
d726 1
a726 1
	
@


1.169
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d137 3
d504 4
@


1.168
log
@rewrite NewDiagramFileWizard in xpand
@
text
@d112 1
a112 2
		for (Iterator nodes = myDiagram.getTopLevelNodes().iterator(); nodes.hasNext();) {
			GenTopLevelNode node = (GenTopLevelNode) nodes.next();
d115 1
a115 2
		for (Iterator nodes = myDiagram.getChildNodes().iterator(); nodes.hasNext();) {
			GenChildNode node = (GenChildNode) nodes.next();
d122 1
a122 2
		for (Iterator compartments = myDiagram.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment compartment = (GenCompartment) compartments.next();
d130 1
a130 2
		for (Iterator it = myDiagram.getLinks().iterator(); it.hasNext();) {
			final GenLink next = (GenLink) it.next();
d137 1
a137 2
			for (Iterator labels = next.getLabels().iterator(); labels.hasNext();) {
				GenLinkLabel label = (GenLinkLabel) labels.next();
d261 1
a261 2
		for (Iterator labels = node.getLabels().iterator(); labels.hasNext();) {
			GenNodeLabel label = (GenNodeLabel) labels.next();
d925 1
a925 2
		for (Iterator it = myEditorGen.getNavigator().getChildReferences().iterator(); it.hasNext();) {
			GenNavigatorChildReference nextReference = (GenNavigatorChildReference) it.next();
d953 1
a953 2
		for (Iterator it = myEditorGen.getPropertySheet().getTabs().iterator(); it.hasNext(); ) {
			GenPropertyTab tab = (GenPropertyTab) it.next();
d974 1
a974 2
		for (Iterator it = providerContainer.getProviders().iterator(); it.hasNext();) {
			GenExpressionProviderBase nextProvider = (GenExpressionProviderBase) it.next();
d982 1
a982 1
				GenExpressionInterpreter interpreter = (GenExpressionInterpreter)nextProvider;
@


1.167
log
@[175169] - Double-click on diagram in Project Explorer should open corresponding diagram editor as before
@
text
@d731 8
a738 5
		internalGenerateJavaClass(
				myEmitters.getNewDiagramFileWizardEmitter(),
				myEditorGen.getEditor().getPackageName(),
				myDiagram.getNewDiagramFileWizardClassName(),
				myDiagram);	
@


1.166
log
@Removing *EditorInputProxies - only EditorInputs are used in generated code from now.
@
text
@d192 1
a192 1
		generateURIDiagramDocumentProvider();
a194 1
			generateDocumentProvider();
a1076 4
	private void generateURIDiagramDocumentProvider() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getURIDiagramDocumentProviderEmitter(), myEmitters.getURIDiagramDocumentProviderName(myDiagram), myDiagram.getEditorGen().getEditor());
	}

@


1.165
log
@complete migration of plugin.xml template to xpand version - constraint providers rewritten
@
text
@a192 1
		generateURIEditorInputProxy();
a1081 4
	private void generateURIEditorInputProxy() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(myEmitters.getURIEditorInputProxyEmitter(), myEmitters.getURIEditorInputProxyName(myDiagram), myDiagram.getEditorGen().getEditor());
	}

@


1.164
log
@updated progress monitor count
@
text
@a13 1
import java.lang.reflect.InvocationTargetException;
a20 1
import org.eclipse.core.runtime.NullProgressMonitor;
a45 1
import org.eclipse.gmf.codegen.gmfgen.GenPlugin;
a51 1
import org.eclipse.gmf.codegen.templates.editor.PluginXML;
a1006 6
	public static String getConstraintProviders(Object plugin) throws UnexpectedBehaviourException, InvocationTargetException, InterruptedException {
		GenEditorGenerator gen = ((GenPlugin) plugin).getEditorGen();
		CodegenEmitters emitters = new CodegenEmitters(!gen.isDynamicTemplates(), gen.getTemplateDirectory());
		return emitters.retrieve(PluginXML.class).generate(new NullProgressMonitor(), new Object[] { plugin });
	}

@


1.163
log
@Document Provider generated using xpand templates.
@
text
@d174 1
a174 1
		if (myDiagram.getEditorGen().getMetrics() != null) {
d177 1
a177 1
		if (myDiagram.getEditorGen().getExpressionProviders() != null) {
d1137 2
a1138 2
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenNode(), 8);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenChildLabelNode(), 4);
d1140 1
d1142 3
a1144 2
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenDiagram(), 50);
		c.registerFactor(GMFGenPackage.eINSTANCE.getGenPlugin(), 8);
d1149 3
@


1.162
log
@move implementation-specific parameter wrapping logic to appropriate emitter
@
text
@d843 1
a843 6
		internalGenerateJavaClass(
			myEmitters.getDocumentProviderEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getDocumentProviderClassName(),
			myDiagram
		);
@


1.161
log
@[172460] Allow to generate open diagram editpolicy
@
text
@d415 1
a415 1
		doGenerateJavaClass(myEmitters.getOpenDiagramEditPolicyEmitter(), behaviour.getEditPolicyQualifiedClassName(), behaviour);
d1125 1
a1125 1
		doGenerateJavaClass(emitter, packageName, className, new Object[] {new Object[] {argument, importUtil}});
@


1.160
log
@[167466] - Do not generate ??ItemSemanticEditPolicy for pure-design elements
@
text
@a411 1

d415 1
a415 1
		internalGenerateJavaClass(myEmitters.getOpenDiagramEditPolicyEmitter(), behaviour.getEditPolicyQualifiedClassName(), behaviour);
@


1.159
log
@[171528] use URIEditorInput to open diagrams
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
d15 2
d387 12
d438 3
d450 3
d471 3
d490 3
@


1.158
log
@Revriting BaseItemSemanticEditPolicy to xpand
@
text
@d194 2
a1044 2
			generateURIDiagramDocumentProvider(application);
			generateURIEditorInputProxy(application);
d1069 2
a1070 7
	private void generateURIDiagramDocumentProvider(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getURIDiagramDocumentProviderEmitter(),
			application.getPackageName(),
			"URIDiagramDocumentProvider", //$NON-NLS-1$
			application
		);
d1073 2
a1074 7
	private void generateURIEditorInputProxy(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getURIEditorInputProxyEmitter(),
			application.getPackageName(),
			"URIEditorInputProxy", //$NON-NLS-1$
			application
		);
@


1.157
log
@NodeItemSemanticEditPolicy template reimplemented using xpand.
@
text
@d383 1
a383 6
		internalGenerateJavaClass(
			myEmitters.getBaseItemSemanticEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getBaseItemSemanticEditPolicyClassName(),
			myDiagram
		);
@


1.156
log
@[169964] Missing dependency on generating RCP app with validation
@
text
@d454 1
a454 6
		internalGenerateJavaClass(
			myEmitters.getNodeItemSemanticEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			genNode.getItemSemanticEditPolicyClassName(),
			genNode
		);
@


1.155
log
@rewrite plugin.xml template in xpand
@
text
@d163 1
a163 1
		if(myDiagram.isValidationEnabled() || myEditorGen.hasAudits()) {
d165 5
a169 3
			generateMarkerNavigationProvider();				
			if(myDiagram.isValidationDecorators()) {
				generateValidationDecoratorProvider();
d172 1
a172 1
		if(myDiagram.getEditorGen().getMetrics() != null) {
d175 1
a175 1
		if(myDiagram.getEditorGen().getExpressionProviders() != null) {
@


1.154
log
@NavigatorContentProvider template reimplemented on xpand
@
text
@d14 1
d20 1
d46 1
d53 1
d997 6
@


1.153
log
@specify class names in templates
@
text
@d40 1
d202 1
a202 1
			generateNavigatorContentProvider();
d847 2
a848 7
	private void generateNavigatorContentProvider() throws InterruptedException, UnexpectedBehaviourException {
		internalGenerateJavaClass(
				myEmitters.getNavigatorContentProviderEmitter(),
				myEditorGen.getNavigator().getPackageName(),
				myEditorGen.getNavigator().getContentProviderClassName(),
				myEditorGen.getNavigator()
			);
@


1.152
log
@define pref initializer class name and qualified class name in template
@
text
@d504 1
a504 1
		doGenerateJavaClass(myEmitters.getAppearancePreferencePageEmitter(), myDiagram.getPreferencesPackageName() + ".DiagramAppearancePreferencePage", myDiagram);
d508 1
a508 1
		doGenerateJavaClass(myEmitters.getConnectionsPreferencePageEmitter(), myDiagram.getPreferencesPackageName() + ".DiagramConnectionsPreferencePage", myDiagram);
d512 1
a512 1
		doGenerateJavaClass(myEmitters.getGeneralPreferencePageEmitter(), myDiagram.getPreferencesPackageName() + ".DiagramGeneralPreferencePage", myDiagram);
d516 1
a516 1
		doGenerateJavaClass(myEmitters.getPrintingPreferencePageEmitter(), myDiagram.getPreferencesPackageName() + ".DiagramPrintingPreferencePage", myDiagram);
d520 1
a520 1
		doGenerateJavaClass(myEmitters.getRulersAndGridPreferencePageEmitter(), myDiagram.getPreferencesPackageName() + ".DiagramRulersAndGridPreferencePage", myDiagram);
@


1.151
log
@[134107] Provide preferences for the generated diagram editors
@
text
@d500 1
a500 1
		doGenerateJavaClass(myEmitters.getPreferenceInitializerEmitter(), myDiagram.getPreferenceInitializerQualifiedClassName(), myDiagram);
@


1.150
log
@[134107] Provide preferences for the generated diagram editors
@
text
@d173 1
a199 1
		generatePreferencesInitializer();
d499 4
a844 9

	private void generatePreferencesInitializer() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getPreferencesInitializerEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getPreferenceInitializerClassName(),
			myEditorGen
		);
	}
@


1.149
log
@[139733] akarjakina - i18n support, step 1 - generate environment for externalized messages
@
text
@d172 7
d497 22
@


1.148
log
@rewrite element types in xpand
@
text
@d87 4
d1074 7
@


1.147
log
@rewrite application templates in xpand; simplify genmodel
@
text
@d144 1
d515 1
a515 1
	private void generateElementTypes() throws UnexpectedBehaviourException, InterruptedException {
d517 1
a517 1
			myEmitters.getElementTypesEmitter(),
d519 1
a519 1
			myDiagram.getElementTypesClassName(),
d524 4
@


1.146
log
@rewrite text feedback edit policies in xpand
@
text
@d1007 1
a1008 1
			generateApplication(application);
d1018 2
a1019 7
	private void generateActionBarAdvisor(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getActionBarAdvisorEmitter(),
			application.getApplicationPackageName(),
			application.getActionBarAdvisorClassName(),
			application
		);
d1022 2
a1023 7
	private void generateApplication(GenApplication application) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getApplicationEmitter(),
			application.getApplicationPackageName(),
			application.getApplicationClassName(),
			application
		);
d1027 1
a1027 6
		internalGenerateJavaClass(
			myEmitters.getPerspectiveEmitter(),
			application.getApplicationPackageName(),
			application.getPerspectiveClassName(),
			application
		);
d1031 1
a1031 6
		internalGenerateJavaClass(
			myEmitters.getWorkbenchAdvisorEmitter(),
			application.getApplicationPackageName(),
			application.getWorkbenchAdvisorClassName(),
			application
		);
d1035 1
a1035 6
		internalGenerateJavaClass(
			myEmitters.getWorkbenchWindowAdvisorEmitter(),
			application.getApplicationPackageName(),
			application.getWorkbenchWindowAdvisorClassName(),
			application
		);
d1041 1
a1041 1
			application.getApplicationPackageName(),
d1050 1
a1050 1
			application.getApplicationPackageName(),
d1059 1
a1059 1
			application.getApplicationPackageName(),
@


1.145
log
@rewrite edit part factory template in xpand
@
text
@d478 1
a478 6
		internalGenerateJavaClass(
			myEmitters.getTextSelectionEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getTextSelectionEditPolicyClassName(),
			myDiagram
		);
d482 1
a482 6
		internalGenerateJavaClass(
			myEmitters.getTextNonResizableEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getTextNonResizableEditPolicyClassName(),
			myDiagram
		);
@


1.144
log
@rewrite compartment edit part template in xpand
@
text
@d358 1
a358 6
		internalGenerateJavaClass(
			myEmitters.getEditPartFactoryEmitter(),
			myDiagram.getEditPartsPackageName(),
			myDiagram.getEditPartFactoryClassName(),
			myDiagram
		);
@


1.143
log
@rewrite diagram edit part template in xpand
@
text
@d345 2
a346 7
	private void generateCompartmentEditPart(GenCompartment genCompartment) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getCompartmentEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			genCompartment.getEditPartClassName(),
			genCompartment
		);
@


1.142
log
@[164935] Use border items infrastructure to support external labels
@
text
@d326 1
a326 6
		internalGenerateJavaClass(
			myEmitters.getDiagramEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			myDiagram.getEditPartClassName(),
			myDiagram
		);
@


1.141
log
@use xpand template to generate link edit part
@
text
@a104 1
		generateExternalNodeLabelHostLayoutEditPolicy();
a142 1
		generateDiagramExternalNodeLabelEditPart();
a333 9
	private void generateDiagramExternalNodeLabelEditPart() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getDiagramExternalNodeLabelEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			myDiagram.getBaseExternalNodeLabelEditPartClassName(),
			myDiagram
		);
	}

a509 9
	private void generateExternalNodeLabelHostLayoutEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getExternalNodeLabelHostLayoutEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getExternalNodeLabelHostLayoutEditPolicyClassName(),
			myDiagram
		);
	}

@


1.140
log
@use xpand template to generate node edit part
@
text
@d370 2
a371 7
	private void generateLinkEditPart(GenLink genLink) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getLinkEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			genLink.getEditPartClassName(),
			genLink
		);
@


1.139
log
@change getRevertedIncomingLinks() method to property for xpand templates
@
text
@d345 2
a346 7
	private void generateNodeEditPart(GenNode genNode) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getNodeEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			genNode.getEditPartClassName(),
			genNode
		);
@


1.138
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d248 1
a248 1
		if (node.needsGraphicalNodeEditPolicy()) {
@


1.137
log
@rewrite child node label edit part template in xpand
@
text
@d239 1
d267 1
d478 12
@


1.136
log
@migrate node label edit part to xpand templates
@
text
@d268 1
a268 1
		generateChildLabelNodeEditPart(child);
d360 2
a361 7
	private void generateChildLabelNodeEditPart(GenChildLabelNode genChildNode) throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getChildNodeEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			genChildNode.getEditPartClassName(),
			genChildNode
		);
@


1.135
log
@rewrite link label edit part template in xpand
@
text
@d353 1
a353 6
		internalGenerateJavaClass(
			myEmitters.getNodeLabelEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			label.getEditPartClassName(),
			label
		);
@


1.134
log
@rewrite ext node label edit part template in xpand
@
text
@d393 1
a393 6
		internalGenerateJavaClass(
			myEmitters.getLinkLabelEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			label.getEditPartClassName(),
			label
		);
@


1.133
log
@get started using xpand templates. PaletteFactory template replaced with xpand version
@
text
@d362 1
a362 6
		internalGenerateJavaClass(
			myEmitters.getExternalNodeLabelEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			label.getEditPartClassName(),
			label
		);
@


1.132
log
@[157683] - Generate link creation/initialization command in single separate classes instead of duplication of the code in different SemanticEditPolicy'ies
@
text
@d743 1
a743 6
		internalGenerateJavaClass(
			myEmitters.getPaletteEmitter(),
			myDiagram.getPalette().getPackageName(),
			myDiagram.getPalette().getFactoryClassName(),
			myDiagram
		);
@


1.131
log
@generate wizard page that allows to select file
@
text
@d48 1
d134 1
d505 13
@


1.130
log
@[152717] - Do not generate *ReferenceConnectionEditPolicy
@
text
@d1065 1
d1132 9
@


1.129
log
@heading towards full palette specification in tooldef model - no reason to invoke palette factory indirectly through services
@
text
@a96 1
		generateReferenceConnectionEditPolicy();
a423 9
	private void generateReferenceConnectionEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getReferenceConnectionEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getReferenceConnectionEditPolicyClassName(),
			myDiagram
		);
	}

@


1.128
log
@Refactoring navigator to support cross-diagram shortcuts.
@
text
@a147 1
		generatePaletteProvider();
a596 9
	private void generatePaletteProvider() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getPaletteProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getPaletteProviderClassName(),
			myDiagram
		);
	}
	
@


1.127
log
@remove file creator template
@
text
@d214 1
d663 8
@


1.126
log
@D&D from diagram content navigator to Diagram surface.
@
text
@a171 1
		generateDiagramFileCreator();
a754 9

	private void generateDiagramFileCreator() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getDiagramFileCreatorEmitter(),
			myEditorGen.getEditor().getPackageName(),
			myDiagram.getDiagramFileCreatorClassName(),
			myDiagram
		);
	}
@


1.125
log
@Generate 2 icons if myDiagram.getCreationWizardIconPathX() and myEditorGen.getEditor().getIconPathX() specify different absolute paths
@
text
@d181 1
d815 12
@


1.124
log
@Open action for diagram nodes in Navigator added.
@
text
@d215 9
a223 4
		if (isPathInsideGenerationTarget(myDiagram.getCreationWizardIconPathX()) || isPathInsideGenerationTarget(myEditorGen.getEditor().getIconPathX())) {
			// only these two at the moment may produce path that reference generated icon file, thus
			// skip generation if neither path specifies relative path
			generateDiagramIcon(isPathInsideGenerationTarget(myDiagram.getCreationWizardIconPathX()) ? myDiagram.getCreationWizardIconPathX() : myEditorGen.getEditor().getIconPathX());
@


1.123
log
@#114200 temp disable init/shortcuts actions for rcp - use resource api (((
@
text
@d195 1
d903 9
@


1.122
log
@Navigator Sorter added.
@
text
@a169 4
		if (myDiagram.generateInitDiagramAction()) {
			generateInitDiagramFileAction();
			generateNewDiagramFileWizard();
		}
a176 1
		generateCreateShortcutAction();
a177 1
		generateElementChooser();
d180 6
@


1.121
log
@#114200 use uri editor input for diagram editor
@
text
@d194 1
d893 9
@


1.120
log
@do not generate canonical edit policies unless needed
@
text
@d225 1
a225 1
		return !p.isAbsolute() && !p.segment(0).equals("..");
d995 1
a995 1
		doGenerateFile(myEmitters.getPluginXmlEmitter(), new Path("plugin.xml"), new Object[] { myDiagram.getEditorGen().getPlugin() });
d999 1
a999 1
		doGenerateFile(myEmitters.getPluginPropertiesEmitter(), new Path("plugin.properties"), new Object[] { myDiagram.getEditorGen().getPlugin() });
d1003 1
a1003 1
		doGenerateFile(myEmitters.getOptionsFileEmitter(), new Path(".options"), new Object[] { myDiagram.getEditorGen().getPlugin()  });
d1007 1
a1007 1
		doGenerateFile(myEmitters.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"), new Object[] { myDiagram.getEditorGen().getPlugin() });
d1011 1
a1011 1
		doGenerateFile(myEmitters.getBuildPropertiesEmitter(), new Path("build.properties"), new Object[] { myDiagram });
d1015 1
a1015 1
		doGenerateBinaryFile(myEmitters.getShortcutImageEmitter(), new Path("icons/shortcut.gif"), null);
d1030 1
a1030 1
		String stem = myDiagram.getDomainDiagramElement() == null ? "" : myDiagram.getDomainDiagramElement().getGenPackage().getPrefix();
d1033 1
a1033 1
		doGenerateBinaryFile(myEmitters.getWizardBannerImageEmitter(), new Path("icons/wizban/New" + stem + "Wizard.gif"), args);
d1046 2
d1096 18
@


1.119
log
@refactor common attribute (canonical ep name) into shared superclass, get ready to avoid generation of useless canonicalep classes
@
text
@d123 1
a123 1
			if (myDiagram.isSynchronized()) {
@


1.118
log
@LinkHelper generated for Project Explorer view.
@
text
@d99 1
a99 1
		if (myDiagram.isSynchronized()) {
d236 1
a236 1
		if (myDiagram.isSynchronized()) {
@


1.117
log
@#114200 generate RCP specific classes
@
text
@d193 1
d883 9
@


1.116
log
@[119465] support for diagram partitioning - started to reorganize the way we store behaviours in the genmodel - let them be reused. OpenDiagram as an example of new way to add behaviours.
@
text
@d23 1
d218 1
d1026 60
@


1.115
log
@#114200 remove editor.ide dep for rcp configuration
@
text
@d45 1
d97 1
a97 1
		//generateOpenDiagramEditPolicy(); disable until all subtleties are fixed 
d131 1
d231 1
d424 15
a438 2
	private void generateOpenDiagramEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(myEmitters.getOpenDiagramEditPolicyEmitter(), myDiagram.getEditPoliciesPackageName(), "OpenDiagramEditPolicy", myDiagram);
d1055 1
@


1.114
log
@[119465] support for diagram partitioning - use annotations to keep references to diagrams and to pass information about editors to be open.
Still a lot of subtle issues to resolve, do not turn editpolicy generation on for a while
@
text
@d181 3
a183 1
		generateDocumentProvider();
@


1.113
log
@do not generate GraphicalNodeEditPolicy unless there's smth for it to do
@
text
@d96 1
d419 4
@


1.112
log
@Read-only properties provided into the navigator.
@
text
@a94 1
		generateBaseGraphicalNodeEditPolicy();
d230 3
a232 1
		generateNodeGraphicalNodeEditPolicy(node);
a408 9
	private void generateBaseGraphicalNodeEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getBaseGraphicalNodeEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getBaseGraphicalNodeEditPolicyClassName(),
			myDiagram
		);
	}
	
d456 1
a456 1
			myEmitters.getNodeGraphicalNodeEditPolicyEmitter(),
@


1.111
log
@optionally generate label provider for caption of property sheet
@
text
@d188 1
d190 1
d850 1
a850 1
				myEditorGen.getEditor().getPackageName(),
d859 1
a859 1
				myEditorGen.getEditor().getPackageName(),
d865 9
d877 11
a887 2
				myEditorGen.getEditor().getPackageName(),
				myEditorGen.getNavigator().getGroupWrapperClassName(),
@


1.110
log
@Generate PropertySheet pluged into tabbed page framework of Eclipse instead of plug-in as runtime provider.
Eases pages being added/removed/replaced/tuned
@
text
@d897 6
@


1.109
log
@Generating group icons only once.
@
text
@d20 1
d28 1
d42 1
a149 1
		generatePropertyProvider();
d191 3
a595 8
	private void generatePropertyProvider() throws UnexpectedBehaviourException, InterruptedException {
		internalGenerateJavaClass(
			myEmitters.getPropertyProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getPropertyProviderClassName(),
			myDiagram);
	}

d893 15
a907 1
	
d991 4
d1011 3
@


1.108
log
@Icons provided to Navigator
@
text
@d14 1
d16 1
d187 1
a187 3
			for (Iterator it = myEditorGen.getNavigator().getChildReferences().iterator(); it.hasNext(); ) {
				generateGroupIcon((GenNavigatorChildReference) it.next());
			}
d875 13
d954 2
a955 4
	private void generateGroupIcon(GenNavigatorChildReference reference) throws InterruptedException, UnexpectedBehaviourException {
		if (reference.getGroupIcon() != null) {
			doGenerateBinaryFile(myEmitters.getGroupIconEmitter(), new Path(reference.getGroupIcon()), new Object[] {String.valueOf(reference.getChild().getVisualID()), reference.getGroupIcon()});	
		}
@


1.107
log
@GenNavigator is optional.
@
text
@d35 1
d185 3
d940 6
@


1.106
log
@Model navigator, initial version.
@
text
@d180 5
a184 3
		generateNavigatorContentProvider();
		generateNavigatorLabelProvider();
		generateNavigatorGroup();
@


1.105
log
@refactoring: abstract use of JMerge for merging away from generator services (GeneratorBase)
@
text
@d180 3
d841 9
d851 18
@


1.104
log
@use same counter code to estimate amount of work
@
text
@a13 1
import java.net.URL;
d44 1
d66 7
a72 2
	protected URL getJMergeControlFile() {
		return myEmitters.getJMergeControlFile();
@


1.103
log
@properties reorganized
@
text
@d2 1
a2 1
 * Copyright (c) 2005 Borland Software Corporation
a14 1
import java.util.HashMap;
a15 1
import java.util.LinkedList;
a18 2
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
d932 6
a937 6
		c.registerValue(GMFGenPackage.eINSTANCE.getGenNode(), 8);
		c.registerValue(GMFGenPackage.eINSTANCE.getGenChildLabelNode(), 4);
		c.registerValue(GMFGenPackage.eINSTANCE.getGenLink(), 6);
		c.registerValue(GMFGenPackage.eINSTANCE.getGenCompartment(), 4);
		c.registerValue(GMFGenPackage.eINSTANCE.getGenDiagram(), 50);
		c.registerValue(GMFGenPackage.eINSTANCE.getGenPlugin(), 8);
a939 54
	
	
	private static final class Counter {
		private final HashMap<EClass, Integer> myCounters = new HashMap<EClass, Integer>();
		private final HashMap<EClass, Integer> myCache = new HashMap<EClass, Integer>();
		private final Integer CACHE_MISS = new Integer(0);

		public Counter() {
		}

		public void registerValue(EClass eClass, int count) {
			myCounters.put(eClass, new Integer(count));
		}

		public int getTotal(EObject from) {
			int total = process(from);
			for (Iterator it = from.eAllContents(); it.hasNext();) {
				total += process((EObject) it.next());
			}
			return total;
		}

		@@SuppressWarnings("unchecked")
		protected int process(EObject next) {
			final EClass nextKey = next.eClass();
			Integer cachedValue = checkCached(nextKey);
			if (cachedValue != null) {
				return cachedValue.intValue(); 
			}
			LinkedList<EClass> checkQueue = new LinkedList<EClass>();
			checkQueue.add(nextKey);
			do {
				EClass key = checkQueue.removeFirst();
				if (myCounters.containsKey(key)) {
					final Integer value = myCounters.get(key);
					cache(nextKey, value);
					return value.intValue();
				} else {
					// add immeditate superclasses to check first
					checkQueue.addAll(key.getESuperTypes());
				}
			} while (!checkQueue.isEmpty());
			cache(nextKey, CACHE_MISS);
			return 0;
		}

		private Integer checkCached(EClass nextKey) {
			return myCache.get(nextKey);
		}

		private void cache(EClass nextKey, Integer value) {
			myCache.put(nextKey, value);
		}
	}
@


1.102
log
@hide jet nature of emitters far behind - moving towards support for different template engines
@
text
@d942 1
a942 1
		setupProgressMonitor(Messages.start, c.getTotal(myEditorGen));
@


1.101
log
@caching behavior extracted to keep separate from *generation iterator* functionality
@
text
@a20 1
import org.eclipse.emf.codegen.jet.JETEmitter;
d48 1
a48 1
import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
d51 1
a51 1
 * Invokes JET templates to populate diagram editor project.
d861 1
a861 1
				JETEmitter providerEmitter = null;
d921 1
a921 1
	private void internalGenerateJavaClass(JETEmitter emitter, String packageName, String className, Object argument) throws InterruptedException {
d923 1
a923 1
		doGenerateJavaClass(new JETEmitterAdapter(emitter), packageName, className, new Object[] {new Object[] {argument, importUtil}});
@


1.100
log
@#144885 CCE while moving external node label on diagram
@
text
@a13 1
import java.lang.ref.SoftReference;
a17 1
import java.util.Map;
a21 1
import org.eclipse.emf.common.util.URI;
d62 1
a62 1
	private CodegenEmitters myEmitters;
d64 2
a65 3
	private static Map/*<URI, SoftReference>*/ myCachedURI2EmitterMap = new HashMap();

	public Generator(GenEditorGenerator genModel) {
d68 1
a68 13
		URI resourceURI = myEditorGen.eResource().getURI();
		if (myEditorGen.isDynamicTemplates()) {
			myCachedURI2EmitterMap.remove(resourceURI);
		}
		CodegenEmitters old = myCachedURI2EmitterMap.containsKey(resourceURI) ? (CodegenEmitters) ((SoftReference) myCachedURI2EmitterMap.get(resourceURI)).get() : null;
		if (old == null) {
			myEmitters = new CodegenEmitters(!myEditorGen.isDynamicTemplates(), myEditorGen.getTemplateDirectory());
			if (!myEditorGen.isDynamicTemplates()) {
				myCachedURI2EmitterMap.put(resourceURI, new SoftReference(myEmitters));
			}
		} else {
			myEmitters = old;
		}
d948 2
a949 2
		private final HashMap/*<EClass, Integer>*/ myCounters = new HashMap();
		private final HashMap/*<EClass, Integer>*/ myCache = new HashMap();
d967 1
d974 1
a974 1
			LinkedList/*<EClass>*/ checkQueue = new LinkedList();
d977 1
a977 1
				Object key = checkQueue.removeFirst();
d979 1
a979 1
					final Integer value = (Integer) myCounters.get(key);
d984 1
a984 1
					checkQueue.addAll(((EClass) key).getESuperTypes());
d992 1
a992 1
			return (Integer) myCache.get(nextKey);
@


1.100.2.1
log
@[153901] Updated copyright date from 2005 to 2005, 2006 for those changed in CVS in 2006 (based on Tom/Anthony's script).
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 Borland Software Corporation
@


1.99
log
@#145734 Generate "delete from view" popup menu action for not-synchronized diagrams
@
text
@d113 1
d507 9
@


1.98
log
@#144884 Suppress InitDiagramFileAction generation if canvas mapping has no domain model element
@
text
@d107 3
a109 1
		generateDiagramCanonicalEditPolicy();
d130 3
a132 1
			generateChildContainerCanonicalEditPolicy(compartment);
d227 3
a229 1
		generateChildContainerCanonicalEditPolicy(node);
@


1.97
log
@#144485 Do not generate "o.e.e.v.constraintBindings" extension in plugin.xml if !genDiagram.isValidationEnabled
@
text
@d173 4
a176 2
		generateInitDiagramFileAction();
		generateNewDiagramFileWizard();
@


1.96
log
@#126249 Generate PrintPreview action for the diagram
@
text
@d158 1
a158 1
		if(myDiagram.isValidationEnabled()) {
@


1.95
log
@#145042 Introduce expression Language enumeration into gmfmap, gfmgen models  instead of plain text attribute
@
text
@d151 3
d563 9
@


1.94
log
@#144251 Example ecore diagram editor creates invalid ecore file

Should be possible to remove reference-only links.
@
text
@d41 1
d849 1
a849 1
				if("ocl".equals(nextProvider.getLanguage())) { //$NON-NLS-1$
d851 1
a851 1
				} else if("regexp".equals(nextProvider.getLanguage()) || "nregexp".equals(nextProvider.getLanguage())) { //$NON-NLS-1$ //$NON-NLS-2$
@


1.93
log
@#144518 Support negation of 'regexp' in gmf models expressions
@
text
@d105 1
d403 9
@


1.92
log
@#141865 Icon not displayed for the wizard banner
Wizard banner image and wizard/editor icon are generated now with EMF facility for coloured .gifs
Keyword added to iconPath values to allow reference icons from EMF editor
@
text
@d840 1
a840 1
				} else if("regexp".equals(nextProvider.getLanguage())) { //$NON-NLS-1$
@


1.91
log
@#114175 allow to create diagram editor without domain model
@
text
@a13 1
import java.io.ByteArrayInputStream;
a14 1
import java.lang.reflect.InvocationTargetException;
a20 3
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
a21 1
import org.eclipse.core.runtime.IProgressMonitor;
a22 1
import org.eclipse.core.runtime.SubProgressMonitor;
a23 1
import org.eclipse.emf.codegen.util.CodeGenUtil.EclipseUtil;
d195 12
d877 15
a891 25
		Path iconPath = new Path("icons/shortcut.gif");
		IProgressMonitor pm = getNextStepMonitor();
		try {
			pm.beginTask(iconPath.lastSegment(), 4);
			IPath containerPath = getDestProject().getFullPath().append(iconPath.removeLastSegments(1));
			EclipseUtil.findOrCreateContainer(containerPath, false, (IPath) null, new SubProgressMonitor(pm, 1));
			IFile f = getDestProject().getFile(iconPath);
			byte[] contents = myEmitters.getShortcutImageEmitter().generate(new SubProgressMonitor(pm, 1), null);
			if (f.exists()) {
				if (!contains(f, new ByteArrayInputStream(contents))) {
					f.setContents(new ByteArrayInputStream(contents), true, true, new SubProgressMonitor(pm, 1));
				} else {
					pm.worked(1);
				}
			} else {
				f.create(new ByteArrayInputStream(contents), true, new SubProgressMonitor(pm, 1));
			}
			f.getParent().refreshLocal(IResource.DEPTH_ONE, new SubProgressMonitor(pm, 1));
		} catch (InvocationTargetException ex) {
			handleException(ex.getCause());
		} catch (CoreException ex) {
			handleException(ex);
		} finally {
			pm.done();
		}
d917 1
a917 1
		c.registerValue(GMFGenPackage.eINSTANCE.getGenPlugin(), 6);
@


1.90
log
@do not use NonSemanticEditPolicy
@
text
@d909 3
@


1.89
log
@#139021 Generated code should register all used element types inside own elementTypeBinding
@
text
@d141 1
a141 3
			if (next.getModelFacet() != null) {
				generateLinkItemSemanticEditPolicy(next);
			}
@


1.88
log
@#125964 match location of generated project with other EMF projects
@
text
@d261 3
@


1.87
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@a17 1
import java.util.Collections;
a20 1
import java.util.List;
d99 2
a100 1
		initializeEditorProject(myEditorGen.getPlugin().getID(), createReferencedProjectsList());
d907 5
a923 4
	protected final List createReferencedProjectsList() {
		return Collections.EMPTY_LIST;
	}

@


1.86
log
@#114175 Allow a diagram definition to be mapped to zero or more domain models.
@
text
@d16 1
a32 1
import org.eclipse.emf.codegen.jet.JETException;
d59 3
a61 1
import org.eclipse.gmf.common.codegen.GeneratorBase;
d241 1
a241 1
		doGenerateJavaClass(
d252 1
a252 1
		doGenerateJavaClass(
d270 1
a270 1
		doGenerateJavaClass(
d279 1
a279 1
		doGenerateJavaClass(
d290 1
a290 1
		doGenerateJavaClass(
d299 1
a299 1
		doGenerateJavaClass(
d308 1
a308 1
		doGenerateJavaClass(
d317 1
a317 1
		doGenerateJavaClass(
d326 1
a326 1
		doGenerateJavaClass(
d335 1
a335 1
		doGenerateJavaClass(
d344 1
a344 1
		doGenerateJavaClass(
d353 1
a353 1
		doGenerateJavaClass(
d362 1
a362 1
		doGenerateJavaClass(
d371 1
a371 1
		doGenerateJavaClass(
d382 1
a382 1
		doGenerateJavaClass(
d391 1
a391 1
		doGenerateJavaClass(
d400 1
a400 1
		doGenerateJavaClass(
d409 1
a409 1
		doGenerateJavaClass(
d418 1
a418 1
		doGenerateJavaClass(
d427 1
a427 1
		doGenerateJavaClass(
d436 1
a436 1
		doGenerateJavaClass(
d445 1
a445 1
		doGenerateJavaClass(
d454 1
a454 1
		doGenerateJavaClass(
d463 1
a463 1
		doGenerateJavaClass(
d472 1
a472 1
		doGenerateJavaClass(
d483 1
a483 1
		doGenerateJavaClass(
d492 1
a492 1
		doGenerateJavaClass(
d501 1
a501 1
		doGenerateJavaClass(
d510 1
a510 1
		doGenerateJavaClass(
d519 1
a519 1
		doGenerateJavaClass(
d528 1
a528 1
		doGenerateJavaClass(
d537 1
a537 1
		doGenerateJavaClass(
d546 1
a546 1
		doGenerateJavaClass(
d554 1
a554 1
		doGenerateJavaClass(
d562 1
a562 1
		doGenerateJavaClass(
d570 1
a570 1
		doGenerateJavaClass(
d578 1
a578 1
		doGenerateJavaClass(
d586 1
a586 1
		doGenerateJavaClass(
d594 1
a594 1
		doGenerateJavaClass(
d602 1
a602 1
		doGenerateJavaClass(
d610 1
a610 1
		doGenerateJavaClass(
d620 1
a620 1
		doGenerateJavaClass(
d629 1
a629 1
		doGenerateJavaClass(
d638 1
a638 1
		doGenerateJavaClass(
d647 1
a647 1
		doGenerateJavaClass(
d658 1
a658 1
		doGenerateJavaClass(
d666 1
a666 1
		doGenerateJavaClass(
d677 1
a677 1
		doGenerateJavaClass(
d686 1
a686 1
		doGenerateJavaClass(
d695 1
a695 1
		doGenerateJavaClass(
d704 1
a704 1
		doGenerateJavaClass(
d713 1
a713 1
		doGenerateJavaClass(
d722 1
a722 1
		doGenerateJavaClass(
d732 1
a732 1
		doGenerateJavaClass(
d744 1
a744 1
		doGenerateJavaClass(
d753 1
a753 1
		doGenerateJavaClass(
d765 1
a765 1
		doGenerateJavaClass(
d774 1
a774 1
		doGenerateJavaClass(
d784 1
a784 1
		doGenerateJavaClass(
d793 1
a793 1
		doGenerateJavaClass(
d802 1
a802 1
		doGenerateJavaClass(
d811 1
a811 1
		doGenerateJavaClass(
d823 1
a823 1
		doGenerateJavaClass(
d841 1
a841 1
					doGenerateJavaClass(
d853 1
a853 1
		doGenerateFile(myEmitters.getPluginXmlEmitter(), new Path("plugin.xml"), myDiagram.getEditorGen().getPlugin());
d857 1
a857 1
		doGenerateFile(myEmitters.getPluginPropertiesEmitter(), new Path("plugin.properties"), myDiagram.getEditorGen().getPlugin());
d861 1
a861 1
		doGenerateFile(myEmitters.getOptionsFileEmitter(), new Path(".options"), myDiagram.getEditorGen().getPlugin());
d865 1
a865 1
		doGenerateFile(myEmitters.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"), myDiagram.getEditorGen().getPlugin());
d869 1
a869 1
		doGenerateFile(myEmitters.getBuildPropertiesEmitter(), new Path("build.properties"), myDiagram);
d876 1
a876 1
			pm.beginTask(iconPath.lastSegment(), 3);
d880 1
a880 1
			byte[] contents = myEmitters.getShortcutImageEmitter().generateGif();
d891 2
a892 2
		} catch (JETException ex) {
			handleException(ex.getStatus());
d900 8
@


1.85
log
@better progress reporting during codegen
@
text
@d262 1
a262 1
		} else {
@


1.84
log
@remove old cons
@
text
@a16 1
import java.util.Collection;
d20 1
d35 2
d38 1
d99 1
a99 1
		initializeEditorProject(myDiagram.getEditorGen().getPlugin().getID(), createReferencedProjectsList());
d193 1
d899 8
a906 6
		Counter c = new Counter(myDiagram);
		c.setAdditionalOperations(8); // init, palette, editor, plugin.xml, etc
		c.setOperationsPerNode(2);
		c.setOperationsPerListContainerNode(1);
		c.setOperationsPerLink(2);
		setupProgressMonitor(Messages.start, c.getTotal());
d915 33
a947 41
		private final GenDiagram myDiagram;
		private int myOpsPerNode = 1;
		private int myOpsPerLink = 1;
		private int myOpsPerListContainerNode = 1;
		private int myAdditionalOps = 0;
		private int myOpsPerCompartment = 1;

		Counter(GenDiagram diagram) {
			myDiagram = diagram;
		}

		public void setOperationsPerNode(int opsPerNode) {
			 myOpsPerNode = opsPerNode;
		}
		public void setOperationsPerLink(int opsPerLink) {
			myOpsPerLink = opsPerLink;
		}
		public void setOperationsPerListContainerNode(int opsPerChild) {
			myOpsPerListContainerNode = opsPerChild;
		}
		public void setOperationsPerCompartment(int opsPerCompartment) {
			myOpsPerCompartment = opsPerCompartment;
		}
		public void setAdditionalOperations(int additionalOps) {
			myAdditionalOps = additionalOps;
		}
		public int getTotal() {
			int rv = myAdditionalOps;
			rv += myDiagram.getTopLevelNodes().size() * myOpsPerNode;
			rv += getChildNodesCount(myDiagram.getChildNodes());
			rv += myDiagram.getCompartments().size() * myOpsPerCompartment;
			rv += myDiagram.getLinks().size() * myOpsPerLink;
			return rv;  
		}

		private int getChildNodesCount(Collection nodes) {
			int counter = 0;
			for (Iterator it = nodes.iterator(); it.hasNext();) {
				GenChildNode nextNode = (GenChildNode) it.next();
				if (nextNode instanceof GenChildLabelNode) {
					counter += myOpsPerNode;
d949 2
a950 1
					counter += myOpsPerListContainerNode;
d952 11
a962 2
			}
			return counter;
@


1.83
log
@deprecated code removed
@
text
@d74 2
a75 9
		this(genModel.getDiagram());
	}

	/**
	 * @@deprecated use {@@link #Generator(GenEditorGenerator) } instead
	 */
	public Generator(GenDiagram diagram) {
		myDiagram = diagram;
		myEditorGen = myDiagram.getEditorGen();
@


1.82
log
@#139843
- VisualIdRegistry corrected
- .option file generated so in future we would be able to switch off info messages by default.
@
text
@d33 1
a33 1
import org.eclipse.emf.codegen.util.CodeGenUtil;
d879 1
a879 1
			CodeGenUtil.findOrCreateContainer(containerPath, false, (IPath) null, new SubProgressMonitor(pm, 1));
@


1.81
log
@#133836 Creating a child node without a label causes error
@
text
@d200 1
d860 4
d964 1
a964 1
}
@


1.80
log
@#136803 Support decorator provider for validated elements in generated diagram editors
@
text
@d37 1
d126 2
a127 2
			if (node.isListContainerEntry()) {
				generateListContainerNode(node);
d134 4
a137 1
			generateCompartment(compartment);
d209 2
d212 1
d214 3
a227 3
		generateChildContainer(node);
		generateNodeGraphicalNodeEditPolicy(node);
		generateNodeItemSemanticEditPolicy(node);
d229 5
d235 1
a235 16
	private void generateListContainerNode(GenNode child) throws UnexpectedBehaviourException, InterruptedException {
		generateEditSupport(child);
		generateListContainerNodeEditPart(child);
		generateNodeItemSemanticEditPolicy(child);
		generateViewFactory(child);
	}
	
	private void generateCompartment(GenCompartment compartment) throws UnexpectedBehaviourException, InterruptedException {
		generateCompartmentEditPart(compartment);
		generateCompartmentItemSemanticEditPolicy(compartment);
		generateChildContainer(compartment);
	}
	
	private void generateChildContainer(GenChildContainer childContainer) throws UnexpectedBehaviourException, InterruptedException {
		generateViewFactory(childContainer);
		generateChildContainerCanonicalEditPolicy(childContainer);
d334 1
a334 1
	private void generateListContainerNodeEditPart(GenNode genChildNode) throws UnexpectedBehaviourException, InterruptedException {
d950 1
a950 1
				if (nextNode.isListContainerEntry()) {
@


1.79
log
@#138687 Add RegExpExpressionFactory JET template to the editor generation step
@
text
@d165 3
d588 8
@


1.78
log
@remove ref connection edit policy - not required anymore
@
text
@d828 2
@


1.77
log
@remove temporary label direct edit policy
@
text
@a114 1
		generateReferenceConnectionEditPolicy();
a398 9
	private void generateReferenceConnectionEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getReferenceConnectionEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			myDiagram.getReferenceConnectionEditPolicyClassName(),
			myDiagram
		);
	}

@


1.76
log
@#135693 Use decoration service to provide shortcut image
@
text
@a100 9
	private void generateLabelDirectEditPolicy() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getLabelDirectEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			"LabelDirectEditPolicy",
			myDiagram
		);
	}

a107 3

		// temp
		generateLabelDirectEditPolicy();
@


1.75
log
@[#134511] common access to expressions of different languages
@
text
@d208 4
a211 1
		generateShortcutIcon();
d598 1
a598 1
	
d606 9
a614 1
	
a880 3
		if (!myDiagram.generateShortcutIcon()) {
			return;
		}
@


1.74
log
@#135694 remove temporary code
@
text
@d31 1
d43 3
d182 3
d821 31
@


1.73
log
@#126200 register element types in xml
@
text
@a96 18
	private void generateITextAwareEditPart() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getITextAwareEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			"ITextAwareEditPart",
			myDiagram
		);
	}

	private void generateTextDirectEditManager() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getTextDirectEditManagerEmitter(),
			myDiagram.getEditPartsPackageName(),
			"TextDirectEditManager",
			myDiagram
		);
	}

a114 2
		generateITextAwareEditPart();
		generateTextDirectEditManager();
@


1.72
log
@#125900 Redundant annotations added to View in generated view factory

Visual ID used as a semantic hint for creation of all the diagram elements.
@
text
@d48 2
a49 1
import org.eclipse.gmf.codegen.gmfgen.TypeModelFacet;
d129 3
d167 1
a167 5
			if (next.getModelFacet() instanceof TypeModelFacet) {
				generateEditHelper(next);
			} else {
				generateEditHelperAdvice(next);
			}
d178 1
a178 1
		generateEditHelper(myDiagram);
d225 1
a225 1
		generateEditHelper(node);
d244 1
a244 1
		generateEditHelper(child);
d274 19
a292 1
	private void generateEditHelper(ElementType genType) throws UnexpectedBehaviourException, InterruptedException {
d301 1
a301 1
	private void generateEditHelperAdvice(ElementType genType) throws UnexpectedBehaviourException, InterruptedException {
d305 1
a305 1
			genType.getEditHelperClassName(),
@


1.71
log
@refactor exception thrown during generation. There's nothing we could do about JETException, so why treat it differently from Unexpected
@
text
@a133 1
		generateSemanticHints();
a522 9
	private void generateSemanticHints() throws UnexpectedBehaviourException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getSemanticHintsEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getSemanticHintsClassName(),
			myDiagram
		);
	}

@


1.70
log
@#126200 register element types in xml
@
text
@d96 1
a96 1
	private void generateITextAwareEditPart() throws JETException, InterruptedException {
d105 1
a105 1
	private void generateTextDirectEditManager() throws JETException, InterruptedException {
d114 1
a114 1
	private void generateLabelDirectEditPolicy() throws JETException, InterruptedException {
d123 1
a123 1
	protected void customRun() throws InterruptedException, JETException, UnexpectedBehaviourException {
d225 1
a225 1
	private void generateNode(GenNode node) throws JETException, InterruptedException {
d244 1
a244 1
	private void generateListContainerNode(GenNode child) throws JETException, InterruptedException {
d251 1
a251 1
	private void generateCompartment(GenCompartment compartment) throws JETException, InterruptedException {
d257 1
a257 1
	private void generateChildContainer(GenChildContainer childContainer) throws JETException, InterruptedException {
d264 1
a264 1
	private void generateReorientConnectionViewCommand() throws JETException, InterruptedException {
d275 1
a275 1
	private void generateEditHelper(ElementType genType) throws JETException, InterruptedException {
d284 1
a284 1
	private void generateEditHelperAdvice(ElementType genType) throws JETException, InterruptedException {
d295 1
a295 1
	private void generateDiagramEditPart() throws JETException, InterruptedException {
d304 1
a304 1
	private void generateDiagramExternalNodeLabelEditPart() throws JETException, InterruptedException {
d313 1
a313 1
	private void generateNodeEditPart(GenNode genNode) throws JETException, InterruptedException {
d322 1
a322 1
	private void generateNodeLabelEditPart(GenNodeLabel label) throws JETException, InterruptedException {
d331 1
a331 1
	private void generateExternalNodeLabelEditPart(GenExternalNodeLabel label) throws JETException, InterruptedException {
d340 1
a340 1
	private void generateListContainerNodeEditPart(GenNode genChildNode) throws JETException, InterruptedException {
d349 1
a349 1
	private void generateCompartmentEditPart(GenCompartment genCompartment) throws JETException, InterruptedException {
d358 1
a358 1
	private void generateLinkEditPart(GenLink genLink) throws JETException, InterruptedException {
d367 1
a367 1
	private void generateLinkLabelEditPart(GenLinkLabel label) throws JETException, InterruptedException {
d376 1
a376 1
	private void generateEditPartFactory() throws JETException, InterruptedException {
d387 1
a387 1
	private void generateBaseItemSemanticEditPolicy() throws JETException, InterruptedException {
d396 1
a396 1
	private void generateBaseGraphicalNodeEditPolicy() throws JETException, InterruptedException {
d405 1
a405 1
	private void generateReferenceConnectionEditPolicy() throws JETException, InterruptedException {
d414 1
a414 1
	private void generateDiagramCanonicalEditPolicy() throws JETException, InterruptedException {
d423 1
a423 1
	private void generateChildContainerCanonicalEditPolicy(GenChildContainer genContainer) throws JETException, InterruptedException {
d432 1
a432 1
	private void generateDiagramItemSemanticEditPolicy() throws JETException, InterruptedException {
d441 1
a441 1
	private void generateCompartmentItemSemanticEditPolicy(GenCompartment genCompartment) throws JETException, InterruptedException {
d450 1
a450 1
	private void generateNodeGraphicalNodeEditPolicy(GenNode genNode) throws JETException, InterruptedException {
d459 1
a459 1
	private void generateNodeItemSemanticEditPolicy(GenNode genNode) throws JETException, InterruptedException {
d468 1
a468 1
	private void generateLinkItemSemanticEditPolicy(GenLink genLink) throws JETException, InterruptedException {
d477 1
a477 1
	private void generateTextSelectionEditPolicy() throws JETException, InterruptedException {
d486 1
a486 1
	private void generateTextNonResizableEditPolicy() throws JETException, InterruptedException {
d497 1
a497 1
	private void generateAbstractParser() throws JETException, InterruptedException {
d506 1
a506 1
	private void generateStructuralFeatureParser() throws JETException, InterruptedException {
d515 1
a515 1
	private void generateStructuralFeaturesParser() throws JETException, InterruptedException {
d524 1
a524 1
	private void generateSemanticHints() throws JETException, InterruptedException {
d533 1
a533 1
	private void generateElementTypes() throws JETException, InterruptedException {
d542 1
a542 1
	private void generateViewProvider() throws JETException, InterruptedException {
d551 1
a551 1
	private void generateEditPartProvider() throws JETException, InterruptedException {
d560 1
a560 1
	private void generatePaletteProvider() throws JETException, InterruptedException {
d569 1
a569 1
	private void generateModelingAssistantProvider() throws JETException, InterruptedException {
d577 1
a577 1
	private void generatePropertyProvider() throws JETException, InterruptedException {
d585 1
a585 1
	private void generateIconProvider() throws JETException, InterruptedException {
d593 1
a593 1
	private void generateParserProvider() throws JETException, InterruptedException {
d601 1
a601 1
	private void generateValidationProvider() throws JETException, InterruptedException {
d609 1
a609 1
	private void generateMetricProvider() throws JETException, InterruptedException {
d617 1
a617 1
	private void generateMarkerNavigationProvider() throws JETException, InterruptedException {
d627 1
a627 1
	private void generateViewFactory(GenCommonBase genElement) throws JETException, InterruptedException {
d636 1
a636 1
	private void generateLinkLabelViewFactory(GenLinkLabel label) throws JETException, InterruptedException {
d645 1
a645 1
	private void generateExternalNodeLabelViewFactory(GenExternalNodeLabel label) throws JETException, InterruptedException {
d654 1
a654 1
	private void generateNodeLabelViewFactory(GenNodeLabel label) throws JETException, InterruptedException {
d665 1
a665 1
	private void generateInitDiagramFileAction() throws JETException, InterruptedException {
d673 1
a673 1
	private void generateNewDiagramFileWizard() throws JETException, InterruptedException {
d681 1
a681 1
	private void generatePalette() throws JETException, InterruptedException {
d693 1
a693 1
	private void generateDiagramEditorUtil() throws JETException, InterruptedException {
d702 1
a702 1
	private void generateDiagramFileCreator() throws JETException, InterruptedException {
d711 1
a711 1
	private void generateVisualIDRegistry() throws JETException, InterruptedException {
d720 1
a720 1
	private void generateCreationWizard() throws JETException, InterruptedException {
d729 1
a729 1
	private void generateCreationWizardPage() throws JETException, InterruptedException {
d738 1
a738 1
	private void generateEditor() throws JETException, InterruptedException {
d748 1
a748 1
	private void generateCreateShortcutAction() throws JETException, InterruptedException {
d760 1
a760 1
	private void generateLoadResourceAction() throws JETException, InterruptedException {
d769 1
a769 1
	private void generateElementChooser() throws JETException, InterruptedException {
d781 1
a781 1
	private void generateDocumentProvider() throws JETException, InterruptedException {
d790 1
a790 1
	private void generateActionBarContributor() throws JETException, InterruptedException {
d800 1
a800 1
	private void generateMatchingStrategy() throws JETException, InterruptedException {
d809 1
a809 1
	private void generatePreferencesInitializer() throws JETException, InterruptedException {
d818 1
a818 1
	private void generatePluginClass() throws JETException, InterruptedException {
d827 1
a827 1
	private void generatePluginXml() throws JETException, InterruptedException {
d831 1
a831 1
	private void generatePluginProperties() throws JETException, InterruptedException {
d835 1
a835 1
	private void generateBundleManifest() throws JETException, InterruptedException {
d839 1
a839 1
	private void generateBuildProperties() throws JETException, InterruptedException {
d843 1
a843 1
	private void generateShortcutIcon() throws InterruptedException, JETException {
d865 2
@


1.69
log
@[rdvorak] #133369 Generate code for metric evaluation and result visualization
@
text
@d34 1
d48 1
d164 5
d179 1
d226 1
d245 1
d273 20
@


1.68
log
@provide selection for the child nodes
@
text
@d188 3
d579 8
@


1.67
log
@#131543 Code reconstructing the diagram contents separated from the init diagram file action.
@
text
@a120 9
	private void generateNonResizableTextEditPolicy() throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getNonResizableTextEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			"NonResizableTextEditPolicy",
			myDiagram
		);
	}

a129 1
		generateNonResizableTextEditPolicy();
d142 1
d453 9
@


1.66
log
@skip CTLEP generation
@
text
@d200 1
d631 8
@


1.65
log
@provide custom text selection edit policy
@
text
@a111 9
	private void generateConstrainedToolbarLayoutEditPolicy() throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getConstrainedToolbarLayoutEditPolicyEmitter(),
			myDiagram.getEditPoliciesPackageName(),
			"ConstrainedToolbarLayoutEditPolicy",
			myDiagram
		);
	}

a137 1
		generateConstrainedToolbarLayoutEditPolicy();
@


1.64
log
@#129145 do not use intermediate TextCompartmentEditParts
@
text
@d161 1
d462 9
@


1.63
log
@do not modify files with the same content
@
text
@d93 46
a138 1
	
d144 7
a186 1
				generateLinkLabelTextEditPart(label);
a187 1
				generateLinkLabelTextViewFactory(label);
a238 2
				generateExternalNodeLabelTextEditPart(extLabel);
				generateExternalNodeLabelTextViewFactory(extLabel);
d241 1
a241 1
				generateNodeLabelTextViewFactory(label);
a323 9
	private void generateExternalNodeLabelTextEditPart(GenExternalNodeLabel label) throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getExternalNodeLabelTextEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			label.getTextEditPartClassName(),
			label
		);
	}

a359 9
	private void generateLinkLabelTextEditPart(GenLinkLabel label) throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getLinkLabelTextEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			label.getTextEditPartClassName(),
			label
		);
	}

a602 9
	private void generateLinkLabelTextViewFactory(GenLinkLabel label) throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getLabelTextViewFactoryEmitter(),
			myDiagram.getNotationViewFactoriesPackageName(),
			label.getTextNotationViewFactoryClassName(),
			label
		);
	}

d612 1
a612 10
	private void generateExternalNodeLabelTextViewFactory(GenExternalNodeLabel label) throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getLabelTextViewFactoryEmitter(),
			myDiagram.getNotationViewFactoriesPackageName(),
			label.getTextNotationViewFactoryClassName(),
			label
		);
	}

	private void generateNodeLabelTextViewFactory(GenNodeLabel label) throws JETException, InterruptedException {
@


1.62
log
@#114175 for links
@
text
@d792 1
d794 5
a798 1
				f.setContents(new ByteArrayInputStream(myEmitters.getShortcutImageEmitter().generateGif()), true, true, new SubProgressMonitor(pm, 1));
d800 1
a800 1
				f.create(new ByteArrayInputStream(myEmitters.getShortcutImageEmitter().generateGif()), true, new SubProgressMonitor(pm, 1));
@


1.61
log
@[michael.golubev] #128620 Split org.eclipse.gmf.codegen.util.Generator
@
text
@d129 3
a131 1
			generateLinkItemSemanticEditPolicy(next);
@


1.60
log
@#125175
- Do not cache templates if dynamicTemplates == true
- template classLoader could be specified if using dynamicTemplates
@
text
@d16 1
a20 1
import java.util.LinkedList;
a24 1
import org.eclipse.core.resources.IProject;
a25 1
import org.eclipse.core.resources.ResourcesPlugin;
a28 3
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.MultiStatus;
import org.eclipse.core.runtime.NullProgressMonitor;
a29 1
import org.eclipse.core.runtime.Status;
a30 1
import org.eclipse.emf.codegen.jet.JETEmitter;
a31 2
import org.eclipse.emf.codegen.jmerge.JControlModel;
import org.eclipse.emf.codegen.jmerge.JMerger;
d48 1
a48 11
import org.eclipse.gmf.common.codegen.ImportUtil;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.core.ToolFactory;
import org.eclipse.jdt.core.formatter.CodeFormatter;
import org.eclipse.jface.text.Document;
import org.eclipse.jface.text.IDocument;
import org.eclipse.text.edits.TextEdit;
d55 1
a55 1
public class Generator implements Runnable {
a60 14
	// myDestRoot.getJavaProject().getElementName() == myDestProject.getName()
	private IPackageFragmentRoot myDestRoot;

	private IProject myDestProject;

	private JControlModel myJControlModel;

	private CodeFormatter myCodeFormatter;

	private IProgressMonitor myProgress;

	private IStatus myRunStatus = Status.CANCEL_STATUS;
	private List/*<IStatus>*/ myExceptions;

d89 3
a91 4

	public void run(IProgressMonitor progress) throws InterruptedException {
		setProgressMonitor(progress);
		doRun();
d93 25
a117 30

	public void run() {
		try {
			doRun();
		} catch (InterruptedException ex) {
			myRunStatus = new Status(IStatus.CANCEL, "org.eclipse.gmf.codegen", 0, Messages.interrupted, ex);
		}
	}

	private void doRun() throws InterruptedException {
		try {
			setupProgressMonitor();
			myExceptions = new LinkedList/*<IStatus>*/();
			initializeEditorProject();

			// commands
			generateReorientConnectionViewCommand();

			// edit parts, edit policies and providers
			generateSemanticHints();
			generateAbstractParser();
			generateStructuralFeatureParser();
			generateStructuralFeaturesParser();
			generateBaseItemSemanticEditPolicy();
			generateBaseGraphicalNodeEditPolicy();
			generateReferenceConnectionEditPolicy();
			generateDiagramCanonicalEditPolicy();
			generateDiagramItemSemanticEditPolicy();
			for (Iterator nodes = myDiagram.getTopLevelNodes().iterator(); nodes.hasNext();) {
				GenTopLevelNode node = (GenTopLevelNode) nodes.next();
a119 80
			for (Iterator nodes = myDiagram.getChildNodes().iterator(); nodes.hasNext();) {
				GenChildNode node = (GenChildNode) nodes.next();
				if (node.isListContainerEntry()) {
					generateListContainerNode(node);
				} else {
					generateNode(node);
				}
			}
			for (Iterator compartments = myDiagram.getCompartments().iterator(); compartments.hasNext();) {
				GenCompartment compartment = (GenCompartment) compartments.next();
				generateCompartment(compartment);
			}
			for (Iterator it = myDiagram.getLinks().iterator(); it.hasNext();) {
				final GenLink next = (GenLink) it.next();
				generateViewFactory(next);
				generateLinkEditPart(next);
				generateLinkItemSemanticEditPolicy(next);
				for (Iterator labels = next.getLabels().iterator(); labels.hasNext();) {
					GenLinkLabel label = (GenLinkLabel) labels.next();
					generateLinkLabelEditPart(label);
					generateLinkLabelTextEditPart(label);
					generateLinkLabelViewFactory(label);
					generateLinkLabelTextViewFactory(label);
				}
			}
			generateViewFactory(myDiagram);
			generateDiagramEditPart();
			generateDiagramExternalNodeLabelEditPart();
			generateEditPartFactory();
			generateElementTypes();
			generateViewProvider();
			generateEditPartProvider();
			generatePaletteProvider();
			generateModelingAssistantProvider();
			generatePropertyProvider();
			generateIconProvider();
			generateParserProvider();
			if(myDiagram.isValidationEnabled()) {
				generateValidationProvider();
				generateMarkerNavigationProvider();				
			}

			// editor
			generateInitDiagramFileAction();
			generatePalette();
			generateDiagramEditorUtil();
			generateDiagramFileCreator();
			generateVisualIDRegistry();
			generateCreationWizard();
			generateCreationWizardPage();
			generateEditor();
			generateCreateShortcutAction();
			generateLoadResourceAction();
			generateElementChooser();
			generateDocumentProvider();
			generateActionBarContributor();
			generateMatchingStrategy();
			generatePreferencesInitializer();
			generatePluginClass();
			generateBundleManifest();
			generatePluginProperties();
			generatePluginXml();
			generateBuildProperties();
			generateShortcutIcon();

			if (myExceptions.isEmpty()) {
				myRunStatus = Status.OK_STATUS;
			} else {
				IStatus[] s = (IStatus[]) myExceptions.toArray(new IStatus[myExceptions.size()]);
				myRunStatus = new MultiStatus("org.eclipse.gmf.codegen", 0, s, Messages.problems, null);
			}
		} catch (NullPointerException ex) {
			myRunStatus = new Status(IStatus.ERROR, "org.eclipse.gmf.codegen", 0, NullPointerException.class.getName(), ex);
		} catch (JETException ex) {
			myRunStatus = ex.getStatus();
		} catch (UnexpectedBehaviourException ex) {
			myRunStatus = new Status(Status.ERROR, "org.eclipse.gmf.codegen", 0, Messages.unexpected, ex);
		} finally {
			myProgress.done();
			myExceptions = null;
d121 56
a176 8
	}

	/**
	 * Provides information about success/failures during {@@link #run()}
	 * @@return state of the generator run, or CANCEL if generator was not yet run.
	 */
	public IStatus getRunStatus() {
		return myRunStatus;
d787 1
a787 1
			IPath containerPath = myDestProject.getFullPath().append(iconPath.removeLastSegments(1));
d789 1
a789 1
			IFile f = myDestProject.getFile(iconPath);
d797 1
a797 33
			myExceptions.add(ex.getStatus());
		} finally {
			pm.done();
		}

	}
	
	/**
	 * Generate ordinary file. No merge is performed at the moment.
	 * @@param emitter template to use
	 * @@param filePath - project-relative path to file, e.g. META-INF/MANIFEST.MF
	 * @@param param TODO
	 * @@throws JETException
	 * @@throws InterruptedException
	 */
	private void doGenerateFile(JETEmitter emitter, IPath filePath, Object param) throws JETException, InterruptedException {
		assert !myDestProject.getName().equals(filePath.segment(0));
		IProgressMonitor pm = getNextStepMonitor();
		try {
			pm.beginTask(filePath.lastSegment(), 4);
			IPath containerPath = myDestProject.getFullPath().append(filePath.removeLastSegments(1));
			CodeGenUtil.findOrCreateContainer(containerPath, false, (IPath) null, new SubProgressMonitor(pm, 1));
			String genText = emitter.generate(new SubProgressMonitor(pm, 1), new Object[] { param });
			IFile f = myDestProject.getFile(filePath);
			// FIXME merge!
			if (f.exists()) {
				f.setContents(new ByteArrayInputStream(genText.getBytes()), true, true, new SubProgressMonitor(pm, 1));
			} else {
				f.create(new ByteArrayInputStream(genText.getBytes()), true, new SubProgressMonitor(pm, 1));
			}
			f.getParent().refreshLocal(IResource.DEPTH_ONE, new SubProgressMonitor(pm, 1));
		} catch (CoreException ex) {
			myExceptions.add(ex.getStatus());
d803 1
a803 14
	/**
	 * Optionally, specify progressMonitor to use. Should be called prior to {@@link #run()}
	 * @@param progress
	 */
	public void setProgressMonitor(IProgressMonitor progress) {
		myProgress = progress;
	}

	private void setupProgressMonitor() {
		if (myProgress == null) {
			myProgress = new NullProgressMonitor();
			return;
			// no need to set it up
		}
d809 1
a809 1
		myProgress.beginTask(Messages.start, c.getTotal());
d811 3
a813 31

	private IProgressMonitor getNextStepMonitor() throws InterruptedException {
		if (myProgress.isCanceled()) {
			throw new InterruptedException();
		}
		return new SubProgressMonitor(myProgress, 1);
	}

	private void initializeEditorProject() throws UnexpectedBehaviourException, InterruptedException {
		myDestProject = ResourcesPlugin.getWorkspace().getRoot().getProject(myDiagram.getEditorGen().getPlugin().getID());
		final Path srcPath = new Path('/' + myDestProject.getName() + "/src"); //$NON-NLS-1$
		final Path projectLocation = null; // use default
		final List referencedProjects = createReferencedProjectsList();
		final int style = org.eclipse.emf.codegen.ecore.Generator.EMF_PLUGIN_PROJECT_STYLE;
		// pluginVariables is NOT used when style is EMF_PLUGIN_PROJECT_STYLE
		final List pluginVariables = null;
		final IProgressMonitor pm = getNextStepMonitor();

		org.eclipse.emf.codegen.ecore.Generator.createEMFProject(srcPath, projectLocation, referencedProjects, pm, style, pluginVariables);

		try {
			myDestRoot = JavaCore.create(myDestProject).findPackageFragmentRoot(srcPath);
		} catch (JavaModelException ex) {
			throw new UnexpectedBehaviourException(ex.getMessage());
		}
		if (myDestRoot == null) {
			throw new UnexpectedBehaviourException("no source root can be found");
		}
	}

	private List createReferencedProjectsList() {
a816 71
	/**
	 * NOTE: potential problem - packageName and className should match those specified in 
	 * the template. Besides, getQualifiedXXX helpers in diagram GenModel should also correctly
	 * return qualified class names.  
	 */
	private void doGenerateJavaClass(JETEmitter emitter, String packageName, String className, Object input) throws InterruptedException {
		IProgressMonitor pm = getNextStepMonitor();
		try {
			pm.beginTask(className, 4);
			final Object emitterArg = new Object[] {input, new ImportUtil(packageName)};
			String genText = emitter.generate(new SubProgressMonitor(pm, 1), new Object[] { emitterArg });
			IPackageFragment pf = myDestRoot.createPackageFragment(packageName, true, new SubProgressMonitor(pm, 1));
			ICompilationUnit cu = pf.getCompilationUnit(className + ".java"); //$NON-NLS-1$
			if (cu.exists()) {
				genText = merge(genText, cu.getSource(), new SubProgressMonitor(pm, 1));
			} else {
				pm.worked(1);
			}
			pf.createCompilationUnit(cu.getElementName(), formatCode(genText), true, new SubProgressMonitor(pm, 1));
		} catch (NullPointerException ex) {
			myExceptions.add(new Status(IStatus.ERROR, "org.eclipse.gmf.codegen", 0, ex.getMessage(), ex));
		} catch (JETException ex) {
			myExceptions.add(ex.getStatus());
		} catch (CoreException ex) {
			myExceptions.add(ex.getStatus());		
		} finally {
			pm.done();
		}
	}

	private String merge(String generatedText, String oldContents, IProgressMonitor pm) {
		pm.beginTask(Messages.merge, 1);
		JMerger jMerge = new JMerger();
		jMerge.setControlModel(getJControlModel());
		jMerge.setSourceCompilationUnit(jMerge.createCompilationUnitForContents(generatedText));
		jMerge.setTargetCompilationUnit(jMerge.createCompilationUnitForContents(oldContents));
		jMerge.merge();
		pm.done();
		return jMerge.getTargetCompilationUnitContents();
	}

	private String formatCode(String text) {
		IDocument doc = new Document(text);
		TextEdit edit = getCodeFormatter().format(CodeFormatter.K_COMPILATION_UNIT, doc.get(), 0, doc.get().length(), 0, null);

		try {
			// check if text formatted successfully 
			if(edit != null) {
				edit.apply(doc);
				text = doc.get();				
			}		
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return text;
	}

	private CodeFormatter getCodeFormatter() {
		if (myCodeFormatter == null) {
			myCodeFormatter = ToolFactory.createCodeFormatter(null);
		}
		return myCodeFormatter;
	}

	private JControlModel getJControlModel() {
		if (myJControlModel == null) {
			myJControlModel = new JControlModel(myEmitters.getJMergeControlFile().toString());
		}
		return myJControlModel;
	}

@


1.59
log
@#127696
Templates should use new transaction API
(not finished)
@
text
@d18 1
d22 1
d42 1
d96 1
a96 1
	private static SoftReference/*<CodegenEmitters>*/ myCachedEmitters;
d108 5
a112 1
		CodegenEmitters old = myCachedEmitters == null ? null : (CodegenEmitters) myCachedEmitters.get();
d115 3
a117 1
			myCachedEmitters = new SoftReference(myEmitters);
@


1.58
log
@#125175 Allow toolsmith to use different (sub)set of templates for editor code generation
@
text
@a182 1
			generateMetamodelSupportProvider();
a564 8
	private void generateMetamodelSupportProvider() throws JETException, InterruptedException {
		doGenerateJavaClass(
			myEmitters.getMetamodelSupportProviderEmitter(),
			myDiagram.getProvidersPackageName(),
			myDiagram.getMetamodelSupportProviderClassName(),
			myDiagram);
	}

@


1.57
log
@#126199 add palette provider
@
text
@d107 1
a107 1
			myEmitters = new CodegenEmitters(true);
d850 1
a850 1
	private void generateShortcutIcon() throws InterruptedException {
@


1.56
log
@ImportManager has to know its package anyway, so why not use it to emit appropriate statement?
Besides, package fragment is external to template, template has no control over file placement, thus we'd better pass package name as an argument
@
text
@d182 1
d556 9
@


1.55
log
@GenEditorViewer incapsulates all Eclipse's IEditorPart-related info
@
text
@d54 1
d960 2
a961 1
			String genText = emitter.generate(new SubProgressMonitor(pm, 1), new Object[] { input });
@


1.54
log
@#126896
generating CanonicalEditPolicy for visualizing containment reference as diagram link.
@
text
@d46 1
d72 2
d92 1
a92 1
	private static SoftReference/*<CodegenEmitters>*/ myCachedEmitters; 
d103 1
d672 1
a672 1
			myDiagram.getEditorPackageName(),
d692 1
a692 1
			myDiagram.getEditorPackageName(),
d701 1
a701 1
			myDiagram.getEditorPackageName(),
d710 1
a710 1
			myDiagram.getEditorPackageName(),
d719 1
a719 1
			myDiagram.getEditorPackageName(),
d728 1
a728 1
			myDiagram.getEditorPackageName(),
d735 1
d738 3
a740 3
			myDiagram.getEditorPackageName(),
			myDiagram.getEditorClassName(),
			myDiagram
d750 1
a750 1
				myDiagram.getEditorPackageName(), 
d759 1
a759 1
				myDiagram.getEditorPackageName(), 
d771 1
a771 1
				myDiagram.getEditorPackageName(), 
d780 1
a780 1
			myDiagram.getEditorPackageName(),
d787 1
d790 3
a792 3
			myDiagram.getEditorPackageName(),
			myDiagram.getActionBarContributorClassName(),
			myDiagram
d799 1
a799 1
			myDiagram.getEditorPackageName(),
d808 1
a808 1
			myDiagram.getEditorPackageName(),
d810 1
a810 1
			myDiagram
d817 3
a819 3
			myDiagram.getEditorPackageName(), 
			myDiagram.getEditorGen().getPlugin().getActivatorClassName(),
			myDiagram.getEditorGen().getPlugin()
@


1.53
log
@major refactoring of .gmfgen - new top-level entity introduced,  erroneous domainMetaModel feature removed (was deprecated for a while)
moving towards support of domain models defined in different packages - each GenElement uses it's own genPackage.packageInterfaceName
@
text
@d270 1
a270 3
		if (!childContainer.getChildNodes().isEmpty()) {
			generateChildContainerCanonicalEditPolicy(childContainer);
		}
@


1.52
log
@EmitterFactory -> CodegenEmitters; got an instance; uses EmitterFactory from oeg.common now. Plus mem leak of one softRef.
@
text
@d45 1
d91 7
d814 2
a815 2
			myDiagram.getPlugin().getActivatorClassName(),
			myDiagram.getPlugin()
d820 1
a820 1
		doGenerateFile(myEmitters.getPluginXmlEmitter(), new Path("plugin.xml"), myDiagram.getPlugin());
d824 1
a824 1
		doGenerateFile(myEmitters.getPluginPropertiesEmitter(), new Path("plugin.properties"), myDiagram.getPlugin());
d828 1
a828 1
		doGenerateFile(myEmitters.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"), myDiagram.getPlugin());
d921 1
a921 1
		myDestProject = ResourcesPlugin.getWorkspace().getRoot().getProject(myDiagram.getPlugin().getID());
@


1.51
log
@ImportManager moved to oeg.common
@
text
@d15 1
d86 4
d92 7
d271 1
a271 1
			EmitterFactory.getReorientConnectionViewCommandEmitter(),
d282 1
a282 1
			EmitterFactory.getDiagramEditPartEmitter(),
d291 1
a291 1
			EmitterFactory.getDiagramExternalNodeLabelEditPartEmitter(),
d300 1
a300 1
			EmitterFactory.getNodeEditPartEmitter(),
d309 1
a309 1
			EmitterFactory.getNodeLabelEditPartEmitter(),
d318 1
a318 1
			EmitterFactory.getExternalNodeLabelEditPartEmitter(),
d327 1
a327 1
			EmitterFactory.getExternalNodeLabelTextEditPartEmitter(),
d336 1
a336 1
			EmitterFactory.getChildNodeEditPartEmitter(),
d345 1
a345 1
			EmitterFactory.getCompartmentEditPartEmitter(),
d354 1
a354 1
			EmitterFactory.getLinkEditPartEmitter(),
d363 1
a363 1
			EmitterFactory.getLinkLabelEditPartEmitter(),
d372 1
a372 1
			EmitterFactory.getLinkLabelTextEditPartEmitter(),
d381 1
a381 1
			EmitterFactory.getEditPartFactoryEmitter(),
d392 1
a392 1
			EmitterFactory.getBaseItemSemanticEditPolicyEmitter(),
d401 1
a401 1
			EmitterFactory.getBaseGraphicalNodeEditPolicyEmitter(),
d410 1
a410 1
			EmitterFactory.getReferenceConnectionEditPolicyEmitter(),
d419 1
a419 1
			EmitterFactory.getDiagramCanonicalEditPolicyEmitter(),
d428 1
a428 1
			EmitterFactory.getChildContainerCanonicalEditPolicyEmitter(),
d437 1
a437 1
			EmitterFactory.getDiagramItemSemanticEditPolicyEmitter(),
d446 1
a446 1
			EmitterFactory.getCompartmentItemSemanticEditPolicyEmitter(),
d455 1
a455 1
			EmitterFactory.getNodeGraphicalNodeEditPolicyEmitter(),
d464 1
a464 1
			EmitterFactory.getNodeItemSemanticEditPolicyEmitter(),
d473 1
a473 1
			EmitterFactory.getLinkItemSemanticEditPolicyEmitter(),
d484 1
a484 1
			EmitterFactory.getAbstractParserEmitter(),
d493 1
a493 1
			EmitterFactory.getStructuralFeatureParserEmitter(),
d502 1
a502 1
			EmitterFactory.getStructuralFeaturesParserEmitter(),
d511 1
a511 1
			EmitterFactory.getSemanticHintsEmitter(),
d520 1
a520 1
			EmitterFactory.getElementTypesEmitter(),
d529 1
a529 1
			EmitterFactory.getViewProviderEmitter(),
d538 1
a538 1
			EmitterFactory.getEditPartProviderEmitter(),
d547 1
a547 1
			EmitterFactory.getMetamodelSupportProviderEmitter(),
d555 1
a555 1
			EmitterFactory.getModelingAssistantProviderEmitter(),
d563 1
a563 1
			EmitterFactory.getPropertyProviderEmitter(),
d571 1
a571 1
			EmitterFactory.getIconProviderEmitter(),
d579 1
a579 1
			EmitterFactory.getParserProviderEmitter(),
d587 1
a587 1
			EmitterFactory.getValidationProviderEmitter(),
d595 1
a595 1
			EmitterFactory.getMarkerNavigationProviderEmitter(),
d605 1
a605 1
			EmitterFactory.getViewFactoryEmitter(),
d614 1
a614 1
			EmitterFactory.getLabelViewFactoryEmitter(),
d623 1
a623 1
			EmitterFactory.getLabelTextViewFactoryEmitter(),
d632 1
a632 1
			EmitterFactory.getLabelViewFactoryEmitter(),
d641 1
a641 1
			EmitterFactory.getLabelTextViewFactoryEmitter(),
d650 1
a650 1
			EmitterFactory.getLabelTextViewFactoryEmitter(),
d661 1
a661 1
			EmitterFactory.getInitDiagramFileActionEmitter(),
d672 1
a672 1
			EmitterFactory.getPaletteEmitter(),
d681 1
a681 1
			EmitterFactory.getDiagramEditorUtilEmitter(),
d690 1
a690 1
			EmitterFactory.getDiagramFileCreatorEmitter(),
d699 1
a699 1
			EmitterFactory.getVisualIDRegistryEmitter(),
d708 1
a708 1
			EmitterFactory.getCreationWizardEmitter(),
d717 1
a717 1
			EmitterFactory.getCreationWizardPageEmitter(),
d726 1
a726 1
			EmitterFactory.getEditorEmitter(),
d738 1
a738 1
				EmitterFactory.getCreateShortcutActionEmitter(),
d747 1
a747 1
				EmitterFactory.getLoadResourceActionEmitter(),
d759 1
a759 1
				EmitterFactory.getElementChooserEmitter(),
d768 1
a768 1
			EmitterFactory.getDocumentProviderEmitter(),
d777 1
a777 1
			EmitterFactory.getActionBarContributorEmitter(),
d786 1
a786 1
			EmitterFactory.getMatchingStrategyEmitter(),
d795 1
a795 1
			EmitterFactory.getPreferencesInitializerEmitter(),
d804 1
a804 1
			EmitterFactory.getPluginClassEmitter(),
d812 1
a812 1
		doGenerateFile(EmitterFactory.getPluginXmlEmitter(), new Path("plugin.xml"), myDiagram.getPlugin());
d816 1
a816 1
		doGenerateFile(EmitterFactory.getPluginPropertiesEmitter(), new Path("plugin.properties"), myDiagram.getPlugin());
d820 1
a820 1
		doGenerateFile(EmitterFactory.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"), myDiagram.getPlugin());
d824 1
a824 1
		doGenerateFile(EmitterFactory.getBuildPropertiesEmitter(), new Path("build.properties"), myDiagram);
d839 1
a839 1
				f.setContents(new ByteArrayInputStream(EmitterFactory.getShortcutImageEmitter().generateGif()), true, true, new SubProgressMonitor(pm, 1));
d841 1
a841 1
				f.create(new ByteArrayInputStream(EmitterFactory.getShortcutImageEmitter().generateGif()), true, new SubProgressMonitor(pm, 1));
d1003 1
a1003 1
			myJControlModel = new JControlModel(EmitterFactory.getJMergeControlFile().toString());
@


1.50
log
@#125828 Generated code is bypassing parser service...
@
text
@d50 1
@


1.49
log
@#125729 Support labels based on multiple structural features
@
text
@d160 1
d563 8
@


1.48
log
@#124806
Loading Resource action added into the Diagram Editor popup menu.
@
text
@d112 1
d114 1
d468 9
d486 9
@


1.47
log
@GenDiagram "slicing" goes on and this time attributes related to plugin activator class were moved into separate entity
@
text
@d173 1
a203 1

d703 9
@


1.46
log
@[rdvorak] #114189 Provide support for batch validation
@
text
@d755 2
a756 2
			myDiagram.getPluginClassName(),
			myDiagram
d761 1
a761 1
		doGenerateFile(EmitterFactory.getPluginXmlEmitter(), new Path("plugin.xml"));
d765 1
a765 1
		doGenerateFile(EmitterFactory.getPluginPropertiesEmitter(), new Path("plugin.properties"));
d769 1
a769 1
		doGenerateFile(EmitterFactory.getBundleManifestEmitter(), new Path("META-INF/MANIFEST.MF"));
d773 1
a773 1
		doGenerateFile(EmitterFactory.getBuildPropertiesEmitter(), new Path("build.properties"));
d805 1
d809 1
a809 1
	private void doGenerateFile(JETEmitter emitter, IPath filePath) throws JETException, InterruptedException {
d816 1
a816 1
			String genText = emitter.generate(new SubProgressMonitor(pm, 1), new Object[] { myDiagram });
d862 1
a862 1
		myDestProject = ResourcesPlugin.getWorkspace().getRoot().getProject(myDiagram.getPluginID());
@


1.45
log
@better wording
@
text
@d158 4
d542 16
@


1.44
log
@minor piece of knowledge captured
@
text
@d846 1
a846 1
		// pluginVariables is NOT used unless style is no EMF_PLUGIN_PROJECT_STYLE
@


1.43
log
@#124413
Cleaning up the gmfgen model
@
text
@d846 2
a847 1
		final List pluginVariables = createPluginVariablesList();
a861 4
	private List createPluginVariablesList() {
		return Collections.EMPTY_LIST;
	}

@


1.42
log
@#124413
Allowing infinite hierarchy of GenChildNodes
@
text
@d40 1
d49 1
d118 6
a123 2
			for (Iterator nodes = myDiagram.getAllNodes().iterator(); nodes.hasNext();) {
				GenNode node = (GenNode) nodes.next();
d968 2
a969 1
			rv += getNodesCound(myDiagram.getAllNodes());
d975 1
a975 1
		private int getNodesCound(Collection nodes) {
d978 1
a978 1
				GenNode nextNode = (GenNode) it.next();
@


1.41
log
@#123411 Support diagram without palette
cleanup (deprecated attribute removed, as well as incorrect javadoc)
@
text
@d15 1
a39 1
import org.eclipse.gmf.codegen.gmfgen.GenChildNode;
d116 1
a116 1
			for (Iterator nodes = myDiagram.getNodes().iterator(); nodes.hasNext();) {
d118 9
a126 1
				generateNode(node);
a216 4
		for (Iterator compartments = node.getCompartments().iterator(); compartments.hasNext();) {
			GenCompartment compartment = (GenCompartment) compartments.next();
			generateCompartment(compartment);
		}
d222 2
a223 2
	private void generateListContainerNode(GenChildNode child) throws JETException, InterruptedException {
		generateChildNodeEditPart(child);
a238 8
		for (Iterator childNodes = childContainer.getChildNodes().iterator(); childNodes.hasNext();) {
			GenChildNode childNode = (GenChildNode) childNodes.next();
			if (childNode.isListContainerEntry()) {
				generateListContainerNode(childNode);
			} else {
				generateNode(childNode);
			}
		}
d308 1
a308 1
	private void generateChildNodeEditPart(GenChildNode genChildNode) throws JETException, InterruptedException {
d822 1
a822 1
		c.setOperationsPerChildNode(1);
d937 1
a937 1
		private int myOpsPerChildNode = 1;
d939 1
d951 5
a955 2
		public void setOperationsPerChildNode(int opsPerChild) {
			myOpsPerChildNode = opsPerChild;
d962 2
a963 1
			rv += myDiagram.getNodes().size() * myOpsPerNode;
a964 1
			rv += getChildNodeCount() * myOpsPerChildNode;
d968 9
a976 4
		private int getChildNodeCount() {
			int rv = 0;
			for (Iterator it = myDiagram.getNodes().iterator(); it.hasNext();) {
				rv += AccessUtil.getAllChildNodes((GenNode) it.next()).size();
d978 1
a978 1
			return rv;
@


1.40
log
@#114178
Create shortcut functionality added
@
text
@d604 3
@


1.39
log
@#122054 support external node labels
@
text
@d667 3
d679 3
d752 3
@


1.38
log
@#122054 support external node labels (partial fix)
@
text
@d135 1
d267 9
@


1.37
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d43 1
d130 1
a130 1
					generateTextLinkLabelViewFactory(label);
d197 10
a206 2
			generateNodeLabelEditPart(label);
			generateTextLabelViewFactory(label);
d284 18
d540 19
a558 1
			EmitterFactory.getLinkLabelViewFactoryEmitter(),
d565 1
a565 1
	private void generateTextLinkLabelViewFactory(GenLinkLabel label) throws JETException, InterruptedException {
d567 1
a567 1
			EmitterFactory.getTextLabelViewFactoryEmitter(),
d574 1
a574 1
	private void generateTextLabelViewFactory(GenNodeLabel label) throws JETException, InterruptedException {
d576 1
a576 1
			EmitterFactory.getTextLabelViewFactoryEmitter(),
@


1.36
log
@as part of #118447, basic build.properties is generated as part of the process to address possible plugin deployment
@
text
@d152 2
d163 1
d611 18
d689 20
d710 2
@


1.35
log
@#118447 new-style bundle manifest (manifest.mf)
@
text
@d160 1
d665 4
@


1.34
log
@Fixed compilation error for integration build.
@
text
@d25 1
d37 1
d157 2
d179 1
d234 1
a234 1
		generate(
d245 1
a245 1
		generate(
d254 1
a254 1
		generate(
d263 1
a263 1
		generate(
d272 1
a272 1
		generate(
d281 1
a281 1
		generate(
d290 1
a290 1
		generate(
d299 1
a299 1
		generate(
d308 1
a308 1
		generate(
d317 1
a317 1
		generate(
d328 1
a328 1
		generate(
d337 1
a337 1
		generate(
d346 1
a346 1
		generate(
d355 1
a355 1
		generate(
d364 1
a364 1
		generate(
d373 1
a373 1
		generate(
d382 1
a382 1
		generate(
d391 1
a391 1
		generate(
d400 1
a400 1
		generate(
d409 1
a409 1
		generate(
d420 1
a420 1
		generate(
d429 1
a429 1
		generate(
d438 1
a438 1
		generate(
d447 1
a447 1
		generate(
d456 1
a456 1
		generate(
d465 1
a465 1
		generate(
d473 1
a473 1
		generate(
d481 1
a481 1
		generate(
d489 1
a489 1
		generate(
d499 1
a499 1
		generate(
d508 1
a508 1
		generate(
d517 1
a517 1
		generate(
d526 1
a526 1
		generate(
d537 1
a537 1
		generate(
d545 1
a545 1
		generate(
d554 1
a554 1
		generate(
d563 1
a563 1
		generate(
d572 1
a572 1
		generate(
d581 1
a581 1
		generate(
d590 1
a590 1
		generate(
d599 1
a599 1
		generate(
d608 1
a608 1
		generate(
d617 1
a617 1
		generate(
d626 1
a626 1
		generate(
d635 1
a635 1
		generate(
d644 1
a644 1
		generate(
d653 20
d675 3
a677 2
			pm.beginTask(Messages.pluginxml, 3);
			JETEmitter emitter = EmitterFactory.getPluginXmlEmitter();
d679 1
a679 1
			IFile f = myDestProject.getFile("plugin.xml"); //$NON-NLS-1$
d757 1
a757 1
	private void generate(JETEmitter emitter, String packageName, String className, Object input) throws InterruptedException {
@


1.33
log
@#117660 move canonical edit policy into separate class to shorten it's file name
@
text
@d746 2
d749 1
a749 1
			myExceptions.add(ex.getStatus());
@


1.32
log
@#112187 generate separate class for the link label text view
@
text
@d111 1
d213 3
d349 18
@


1.31
log
@#116797 provide option in gmfgen model for the links to align direction in view with direction in model
@
text
@d123 2
d289 18
@


1.30
log
@#117026
Generating Shape edit parts for inner elements if necessary.
@
text
@d102 3
d109 1
d191 2
a193 1
		generateChildContainer(node);
d220 11
d307 9
d343 9
@


1.29
log
@#116798 create distinct package for the view factories
@
text
@a177 9
		generateCommonNode(node);
	}

	private void generateChildnode(GenChildNode child) throws JETException, InterruptedException {
		generateChildNodeEditPart(child);
		generateCommonNode(child);
	}
	
	private void generateCommonNode(GenNode node) throws JETException, InterruptedException {
d187 1
d189 6
a194 1
		generateNodeItemSemanticEditPolicy(node);
d207 5
a211 1
			generateChildnode(childNode);
@


1.28
log
@#116399 Expose user-defined features of domain elements in property sheet
@
text
@a354 36
	private void generateViewFactory(GenCommonBase genElement) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getViewFactoryEmitter(),
			myDiagram.getProvidersPackageName(),
			genElement.getNotationViewFactoryClassName(),
			genElement
		);
	}

	private void generateLinkLabelViewFactory(GenLinkLabel label) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getLinkLabelViewFactoryEmitter(),
			myDiagram.getProvidersPackageName(),
			label.getNotationViewFactoryClassName(),
			label
		);
	}
	
	private void generateTextLinkLabelViewFactory(GenLinkLabel label) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getTextLabelViewFactoryEmitter(),
			myDiagram.getProvidersPackageName(),
			label.getTextNotationViewFactoryClassName(),
			label
		);
	}
	
	private void generateTextLabelViewFactory(GenNodeLabel label) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getTextLabelViewFactoryEmitter(),
			myDiagram.getProvidersPackageName(),
			label.getNotationViewFactoryClassName(),
			label
		);
	}

d368 1
a368 1
			myDiagram.getViewProviderClassName(),
d414 38
@


1.27
log
@#116031 avoid hardcoded class names in templates
@
text
@d131 1
d434 8
@


1.26
log
@catch up with recent API changes in the runtime
@
text
@d253 4
a256 4
				EmitterFactory.getCompartmentEditPartEmitter(),
				myDiagram.getEditPartsPackageName(),
				genCompartment.getEditPartClassName(),
				genCompartment
a280 1
		String fqn = myDiagram.getBaseItemSemanticEditPolicyQualifiedClassName();
d284 1
a284 1
			fqn.substring(fqn.lastIndexOf('.') + 1),
a289 1
		String fqn = myDiagram.getReferenceConnectionEditPolicyQualifiedClassName();
d293 1
a293 1
			fqn.substring(fqn.lastIndexOf('.') + 1),
d340 1
a340 1
			"StructuralFeatureParser", //$NON-NLS-1$
a345 1
		String fqn = myDiagram.getSemanticHintsQualifiedClassName();
d349 1
a349 1
			fqn.substring(fqn.lastIndexOf('.') + 1),
d374 4
a377 4
				EmitterFactory.getTextLabelViewFactoryEmitter(),
				myDiagram.getProvidersPackageName(),
				label.getTextNotationViewFactoryClassName(),
				label
d383 4
a386 4
				EmitterFactory.getTextLabelViewFactoryEmitter(),
				myDiagram.getProvidersPackageName(),
				label.getNotationViewFactoryClassName(),
				label
d394 1
a394 1
			"ElementTypes", //$NON-NLS-1$
d464 1
a464 1
			"DiagramEditorUtil", //$NON-NLS-1$
d473 1
a473 1
			"DiagramFileCreatorBis", //$NON-NLS-1$
d480 5
a484 5
				EmitterFactory.getVisualIDRegistryEmitter(),
				myDiagram.getEditorPackageName(),
				"VisualIDRegistry", //$NON-NLS-1$
				myDiagram
			);
d491 1
a491 1
			"CreationWizard", //$NON-NLS-1$
d500 1
a500 1
			"CreationWizardPage", //$NON-NLS-1$
d516 5
a520 5
				EmitterFactory.getDocumentProviderEmitter(),
				myDiagram.getEditorPackageName(),
				myDiagram.getDocumentProviderClassName(),
				myDiagram
			);
d545 1
a545 1
			"PreferencesInitializer", //$NON-NLS-1$
@


1.25
log
@#115972 generate single class with semantic hints
@
text
@d476 1
a476 1
			"DiagramFileCreator", //$NON-NLS-1$
@


1.24
log
@#115474 notify user if errors occured during code generation
@
text
@d103 1
a114 1
				generateSemanticHints(next);
a194 1
		generateSemanticHints(node);
d347 2
a348 1
	private void generateSemanticHints(GenCommonBase genElement) throws JETException, InterruptedException {
d352 2
a353 2
			AccessUtil.getSemanticHintsClassName(genElement),
			genElement
@


1.23
log
@[dstadnik] #115466 custom semantic edit policies to control link creation
@
text
@d17 1
d26 2
d30 1
d49 1
d76 3
d92 1
d99 1
d149 8
d158 1
a158 3
			ex.printStackTrace();
		} catch (CoreException ex) {
			ex.printStackTrace();
d160 1
a160 1
			ex.printStackTrace();
d163 1
d167 8
d577 1
a577 1
			ex.printStackTrace();
d612 1
a612 1
	private void initializeEditorProject() throws CoreException, UnexpectedBehaviourException, InterruptedException {
d623 5
a627 1
		myDestRoot = JavaCore.create(myDestProject).findPackageFragmentRoot(srcPath);
d646 1
a646 1
	private void generate(JETEmitter emitter, String packageName, String className, Object input) throws JETException, InterruptedException {
d659 2
d662 1
a662 1
			ex.printStackTrace();
@


1.22
log
@[ashatalin] #114750 annotate diagram runtime model elements with visual id to tell one from another during EP decision making
@
text
@d92 1
a92 1
			// parts and providers
d94 3
d106 1
d172 1
d177 1
d253 59
a311 1
		
@


1.21
log
@[ashatalin] #113892 flexible compartment hierarchy
@
text
@d32 1
d35 1
d94 3
a96 14
			for (Iterator it = myDiagram.getNodes().iterator(); it.hasNext();) {
				final GenNode next = (GenNode) it.next();
				generateNodeEditPart(next);
				for (Iterator labels = next.getLabels().iterator(); labels.hasNext();) {
					GenNodeLabel label = (GenNodeLabel) labels.next();
					generateNodeLabelEditPart(label);
				}
				generateSemanticHints(next);
				generateViewFactory(next);
				for (Iterator it2 = AccessUtil.getAllChildNodes(next).iterator(); it2.hasNext();) {
					GenChildNode child = (GenChildNode) it2.next();
					generateChildNodeEditPart(child);
					generateViewFactory(child);
				}
d106 1
d109 1
d146 37
d220 9
d285 18
@


1.20
log
@[rdvorak] #113856 refactor features left in GenBaseElement to TypeModelFacet
@
text
@d101 1
a101 1
				for (Iterator it2 = next.getChildNodes().iterator(); it2.hasNext();) {
d591 1
a591 1
				rv += ((GenNode) it.next()).getChildNodes().size();
@


1.19
log
@[rdvorak] #113647 refactoring selectors and initializers
@
text
@a31 1
import org.eclipse.gmf.codegen.gmfgen.GenBaseElement;
d33 1
d220 1
a220 1
	private void generateSemanticHints(GenBaseElement genElement) throws JETException, InterruptedException {
d229 1
a229 1
	private void generateViewFactory(GenBaseElement genElement) throws JETException, InterruptedException {
@


1.18
log
@[dstadnik] #112195 multiple labels for the node, facets introduced, genmodel cleaned and refactored
@
text
@a118 1
			generatePartSelectors();			
a124 1
			generateElementInitializers();			
a207 9
	
	private void generatePartSelectors() throws JETException, InterruptedException {	
		generate(
				EmitterFactory.getEditPartSelectorsEmitter(),
				myDiagram.getEditPartsPackageName(),
				PartSelectorUtil.getPartSelectorsClassName(myDiagram),
				myDiagram
		);
	}
a272 9

	private void generateElementInitializers() throws JETException, InterruptedException {
		generate(
			EmitterFactory.getElementInitializersEmitter(),
			myDiagram.getElementInitializersPackageName(),
			myDiagram.getElementInitializersClassName(),
			myDiagram
		);
	}
@


1.17
log
@[rdvorak] #113224 Generate custom initialization code for domain model elements
@
text
@d36 1
d38 1
a38 1
import org.eclipse.gmf.codegen.gmfgen.LinkLabel;
d95 3
a97 2
				if (next.hasNameToEdit()) {
					generateNodeLabelEditPart(next);
d113 1
a113 1
					LinkLabel label = (LinkLabel) labels.next();
d175 1
a175 1
	private void generateNodeLabelEditPart(GenNode genNode) throws JETException, InterruptedException {
d179 2
a180 2
			AccessUtil.getNodeLabelEditPartClassName(genNode),
			genNode
d249 1
a249 1
	private void generateLinkLabelViewFactory(LinkLabel label) throws JETException, InterruptedException {
d253 1
a253 1
			AccessUtil.getLinkLabelViewFactoryClassName(label),
@


1.16
log
@[ashatalin] #112988 use either same as diagram or separate file to persist domain model
@
text
@d124 1
d283 9
@


1.15
log
@[dstadnik] #113074  diagram action bar contributor
@
text
@d134 1
d378 9
@


1.14
log
@[dstadnik] #112901 modeling assistant provider
@
text
@d134 2
a135 1
			generateEditorMatchingStrategy();
d378 1
a378 1
	private void generateEditorMatchingStrategy() throws JETException, InterruptedException {
d380 1
a380 1
			EmitterFactory.getEditorMatchingStrategyEmitter(),
d382 10
a391 1
			"MDiagramEditorMatchingStrategy", //$NON-NLS-1$
@


1.13
log
@[dstadnik] #112900 metamodel support
@
text
@d122 2
d288 16
@


1.12
log
@[dstadnik] #112176 support references w/o domain class
@
text
@d121 1
d264 1
a264 1
			"ViewProvider", //$NON-NLS-1$
d273 1
a273 1
			"EditPartProvider", //$NON-NLS-1$
d278 8
@


1.11
log
@[ashatalin] #112122 Action to initialize diagram for domain model.
 unique id introduced, refactoring to use it throughout the code
@
text
@a35 1
import org.eclipse.gmf.codegen.gmfgen.GenLinkWithClass;
d107 2
a108 4
				if (next instanceof GenLinkWithClass) {
					generateSemanticHints(next);
					generateViewFactory(next);
				}
@


1.10
log
@[rdvorak] #112097 genmodel support to use expression evaluation to choose editpart (visual representation)
@
text
@d126 1
a126 1
			//generateInitDiagramFileAction(); update action template to use notation model
d130 1
d316 9
@


1.9
log
@[dstadnik] #112189 remove editProviders package attribute from genmodel
@
text
@d120 1
d204 10
a213 1

d486 5
a490 2
			edit.apply(doc);
			text = doc.get();
@


1.8
log
@[dstadnik]
#111780 Link labels with read-only flag and relative positioning
@
text
@d90 1
a119 2

			// providers
d204 1
a204 1
	// edit
d209 1
a209 1
			myDiagram.getEditProvidersPackageName(),
d218 1
a218 1
			myDiagram.getEditProvidersPackageName(),
d227 1
a227 1
			myDiagram.getEditProvidersPackageName(),
d236 1
a236 1
			myDiagram.getEditProvidersPackageName(),
a241 2
	// providers

@


1.7
log
@[dstadnik]
#111455 Generate consistent names for notation view factories
#111461 Do not use 'final' keyword in method parameters
#111460 Generate dedicated edit part for the node label
#111457 Use model labels in palette factory
@
text
@d38 1
a98 1
				//generateNodeMetaInfoProvider(next);
d112 4
a115 1
				//generateLinkMetaInfoProvider(next);
a119 6
			/*
			generateCanvasMetaInfoProvider();
			boolean isBasicRT = DiagramRTPackage.eNS_URI.equals(myDiagram.getDiagramRunTimeClass().getGenPackage().getEcorePackage().getNsURI());
			generateMetaInfoProviderAdapterFactory(isBasicRT);
			*/

d234 1
a234 2
	/*
	private void generateCanvasMetaInfoProvider() throws JETException, InterruptedException {
d236 1
a236 1
			EmitterFactory.getCanvasMetaInfoProviderEmitter(),
d238 2
a239 29
			myDiagram.getMetaInfoProviderClassName(),
			myDiagram
		);
	}

	private void generateNodeMetaInfoProvider(GenNode genNode) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getNodeMetaInfoProviderEmitter(),
			myDiagram.getEditProvidersPackageName(),
			genNode.getMetaInfoProviderClassName(),
			genNode
		);
	}

	private void generateLinkMetaInfoProvider(GenLink genLink) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getLinkMetaInfoProviderEmitter(),
			myDiagram.getEditProvidersPackageName(),
			genLink.getMetaInfoProviderClassName(),
			genLink
		);
	}

	private void generateMetaInfoProviderAdapterFactory(boolean isBasicRT) throws JETException, InterruptedException {
		generate(
			isBasicRT ? EmitterFactory.getMetaInfoProviderAF1Emitter() : EmitterFactory.getMetaInfoProviderAF2Emitter(), 
			myDiagram.getEditProvidersPackageName(),
			myDiagram.getMetaInfoFactoryClassName(),  //$NON-NLS-1$
			myDiagram
a241 1
	*/
@


1.6
log
@[dstadnik] support for (a) connections (with associated domain class) and (b) compartments
@
text
@d93 3
d172 9
@


1.5
log
@[dstadnik] Use Notation Model as runtime model
@
text
@d88 1
a88 2
			generateCanvasEditPart();
			generateEditPartFactory();
d98 2
a99 1
					generateNodeEditPart(child);
d106 1
d111 3
d126 1
a126 1
			//generateInitDiagramFileAction();
d151 1
a151 1
	private void generateCanvasEditPart() throws JETException, InterruptedException {
d153 1
a153 1
			EmitterFactory.getCanvasEditPartEmitter(),
d169 9
@


1.4
log
@[ashatalin] Action to initialize diagram from existing domain model gets generated.
@
text
@a14 1
import java.text.MessageFormat;
d32 1
d36 1
a37 1
import org.eclipse.gmf.diagramrt.DiagramRTPackage;
d50 1
d54 1
a87 1
			generatePalette();
d90 1
a90 1
			generateEditor();
d94 3
a96 1
				generateNodeMetaInfoProvider(next);
d104 3
d108 1
a108 1
				generateLinkMetaInfoProvider(next);
d110 1
d112 19
d133 1
a133 3
			generateInitDiagramFileAction();
			boolean isBasicRT = DiagramRTPackage.eNS_URI.equals(myDiagram.getDiagramRunTimeClass().getGenPackage().getEcorePackage().getNsURI());
			generateMetaInfoProviderAdapterFactory(isBasicRT);
d145 69
a213 1
	private void generateInitDiagramFileAction() throws JETException, InterruptedException {
d215 5
a219 4
			EmitterFactory.getInitDiagramFileActionEmitter(),
			myDiagram.getEditorPackageName(),
			myDiagram.getInitDiagramFileActionClassName(),
			myDiagram);
d222 7
a228 6
	/**
	 * Optionally, specify progressMonitor to use. Should be called prior to {@@link #run()}
	 * @@param progress
	 */
	public void setProgressMonitor(IProgressMonitor progress) {
		myProgress = progress;
d231 7
a237 12
	private void setupProgressMonitor() {
		if (myProgress == null) {
			myProgress = new NullProgressMonitor();
			return;
			// no need to set it up
		}
		Counter c = new Counter(myDiagram);
		c.setAdditionalOperations(9); // init, palette, editor, plugin.xml, etc
		c.setOperationsPerNode(2);
		c.setOperationsPerChildNode(1);
		c.setOperationsPerLink(2);
		myProgress.beginTask(Messages.start, c.getTotal());
d240 7
a246 5
	private IProgressMonitor getNextStepMonitor() throws InterruptedException {
		if (myProgress.isCanceled()) {
			throw new InterruptedException();
		}
		return new SubProgressMonitor(myProgress, 1);
d248 1
d250 1
a250 8
	private void initializeEditorProject() throws CoreException, UnexpectedBehaviourException, InterruptedException {
		myDestProject = ResourcesPlugin.getWorkspace().getRoot().getProject(myDiagram.getPluginID());
		final Path srcPath = new Path('/' + myDestProject.getName() + "/src"); //$NON-NLS-1$
		final Path projectLocation = null; // use default
		final List referencedProjects = createReferencedProjectsList();
		final int style = org.eclipse.emf.codegen.ecore.Generator.EMF_PLUGIN_PROJECT_STYLE;
		final List pluginVariables = createPluginVariablesList();
		final IProgressMonitor pm = getNextStepMonitor();
d252 8
a259 1
		org.eclipse.emf.codegen.ecore.Generator.createEMFProject(srcPath, projectLocation, referencedProjects, pm, style, pluginVariables);
d261 7
a267 4
		myDestRoot = JavaCore.create(myDestProject).findPackageFragmentRoot(srcPath);
		if (myDestRoot == null) {
			throw new UnexpectedBehaviourException("no source root can be found");
		}
d270 7
a276 2
	private List createPluginVariablesList() {
		return Collections.EMPTY_LIST;
d279 8
a286 2
	private List createReferencedProjectsList() {
		return Collections.EMPTY_LIST;
d298 1
a298 1
	private void generateCanvasEditPart() throws JETException, InterruptedException {
d300 3
a302 3
			EmitterFactory.getCanvasEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			myDiagram.getEditPartClassName(),
d307 1
a307 1
	private void generateEditPartFactory() throws JETException, InterruptedException {
d309 3
a311 3
			EmitterFactory.getEditPartFactoryEmitter(),
			myDiagram.getEditPartsPackageName(),
			myDiagram.getEditPartFactoryClassName(),
d316 1
a316 1
	private void generateNodeEditPart(GenNode genNode) throws JETException, InterruptedException {
d318 4
a321 4
			EmitterFactory.getNodeEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			genNode.getEditPartClassName(),
			genNode
d325 1
a325 1
	private void generateLinkEditPart(GenLink genLink) throws JETException, InterruptedException {
d327 4
a330 4
			EmitterFactory.getLinkEditPartEmitter(),
			myDiagram.getEditPartsPackageName(),
			genLink.getEditPartClassName(),
			genLink
d338 19
a356 1
			myDiagram.getEditorClassName(), //$NON-NLS-1$
d391 27
a417 7
	private void generateNodeMetaInfoProvider(GenNode genNode) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getNodeMetaInfoProviderEmitter(),
			myDiagram.getEditProvidersPackageName(),
			genNode.getMetaInfoProviderClassName(),
			genNode
		);
d420 15
a434 7
	private void generateLinkMetaInfoProvider(GenLink genLink) throws JETException, InterruptedException {
		generate(
			EmitterFactory.getLinkMetaInfoProviderEmitter(),
			myDiagram.getEditProvidersPackageName(),
			genLink.getMetaInfoProviderClassName(),
			genLink
		);
d437 2
a438 7
	private void generateCanvasMetaInfoProvider() throws JETException, InterruptedException {
		generate(
			EmitterFactory.getCanvasMetaInfoProviderEmitter(),
			myDiagram.getEditProvidersPackageName(),
			myDiagram.getMetaInfoProviderClassName(),
			myDiagram
		);
d441 2
a442 7
	private void generateMetaInfoProviderAdapterFactory(boolean isBasicRT) throws JETException, InterruptedException {
		generate(
			isBasicRT ? EmitterFactory.getMetaInfoProviderAF1Emitter() : EmitterFactory.getMetaInfoProviderAF2Emitter(), 
			myDiagram.getEditProvidersPackageName(),
			myDiagram.getMetaInfoFactoryClassName(),  //$NON-NLS-1$
			myDiagram
		);
@


1.3
log
@reuse project generation utils from EMF
@
text
@d15 1
d107 1
d121 8
d144 1
a144 1
		c.setAdditionalOperations(8); // init, palette, editor, plugin.xml, etc
@


1.2
log
@missing JRE_CONTAINER entry
@
text
@d15 1
a15 2
import java.util.ArrayList;
import java.util.Arrays;
d17 1
a17 1
import java.util.LinkedHashSet;
a19 1
import org.eclipse.core.resources.IFolder;
a20 1
import org.eclipse.core.resources.IProjectDescription;
a36 1
import org.eclipse.jdt.core.IClasspathEntry;
a37 1
import org.eclipse.jdt.core.IJavaProject;
d149 6
a155 81
		pm.beginTask(Messages.initproject, 7);
		myDestProject = ResourcesPlugin.getWorkspace().getRoot().getProject(myDiagram.getPluginID());
		if (!myDestProject.exists()) {
			myDestProject.create(new SubProgressMonitor(pm, 1));
		} else {
			pm.worked(1);
		}
		if (!myDestProject.isOpen()) {
			myDestProject.open(new SubProgressMonitor(pm, 1));
		} else {
			pm.worked(1);
		}
		IProjectDescription projectDesc = myDestProject.getDescription();
		LinkedHashSet natures = new LinkedHashSet(Arrays.asList(projectDesc.getNatureIds()));
		if (!natures.contains(JavaCore.NATURE_ID)) {
			natures.add(JavaCore.NATURE_ID);
		}
		if (!natures.contains("org.eclipse.pde.PluginNature")) { //$NON-NLS-1$
			natures.add("org.eclipse.pde.PluginNature"); //$NON-NLS-1$
		}
		if (natures.size() != projectDesc.getNatureIds().length) {
			projectDesc.setNatureIds((String[]) natures.toArray(new String[natures.size()]));
			myDestProject.setDescription(projectDesc, new SubProgressMonitor(pm, 1));
		} else {
			pm.worked(1);
		}

		IJavaProject jp = JavaCore.create(myDestProject);
		if (!jp.exists()) {
			throw new UnexpectedBehaviourException("Can't create java project for ");
		}
		ArrayList classpathEntries = new ArrayList(Arrays.asList(jp.getRawClasspath()));
		boolean needsRequiredPlugins = true;
		boolean needsSourceLocation = true;
		boolean needsJREContainer = true;
		final Path srcPath = new Path('/' + jp.getElementName() + "/src"); //$NON-NLS-1$
		final Path pdeReqPluginPath = new Path("org.eclipse.pde.core.requiredPlugins"); //$NON-NLS-1$
		final Path jreContainerPath = new Path("org.eclipse.jdt.launching.JRE_CONTAINER"); //$NON-NLS-1$

		for (Iterator it = classpathEntries.iterator(); it.hasNext();) {
			IClasspathEntry cpe = (IClasspathEntry) it.next();
			if (cpe.getEntryKind() == IClasspathEntry.CPE_CONTAINER) {
				if (needsRequiredPlugins && pdeReqPluginPath.equals(cpe.getPath())) {
					needsRequiredPlugins = false;
				}
				if (needsJREContainer && jreContainerPath.equals(cpe.getPath())) {
					needsJREContainer = false;
				}
			} else if (cpe.getEntryKind() == IClasspathEntry.CPE_SOURCE) {
				if (needsSourceLocation && srcPath.equals(cpe.getPath())) {
					needsSourceLocation = false;
				}
				if (cpe.getPath().segmentCount() == 1) {
					// project-level source root
					it.remove();
				}
			}
		}
		if (needsRequiredPlugins) {
			classpathEntries.add(JavaCore.newContainerEntry(pdeReqPluginPath));
		}
		if (needsJREContainer) {
			classpathEntries.add(JavaCore.newContainerEntry(jreContainerPath));
		}
		if (needsSourceLocation) {
			IFolder srcFolder = ResourcesPlugin.getWorkspace().getRoot().getFolder(srcPath);
			if (!srcFolder.exists()) {
				srcFolder.create(true, true, new SubProgressMonitor(pm, 1));
			} else {
				pm.worked(1);
			}
			classpathEntries.add(JavaCore.newSourceEntry(srcPath));
		} else {
			pm.worked(1);
		}
		if (needsRequiredPlugins || needsSourceLocation) {
			// i.e. there's change in classpath
			jp.setRawClasspath((IClasspathEntry[]) classpathEntries.toArray(new IClasspathEntry[classpathEntries.size()]), new SubProgressMonitor(pm, 1));
		} else {
			pm.worked(1);
		}
d157 3
a159 1
		myDestRoot = jp.findPackageFragmentRoot(srcPath);
d163 1
d165 3
a167 12
		Path outputPath = new Path('/' + jp.getElementName() + "/runtime"); //$NON-NLS-1$
		if (!outputPath.equals(jp.getOutputLocation())) {
			IFolder outputFolder = ResourcesPlugin.getWorkspace().getRoot().getFolder(outputPath);
			if (!outputFolder.exists()) {
				outputFolder.create(true, true, new SubProgressMonitor(pm, 1));
			} else {
				pm.worked(1);
			}
			jp.setOutputLocation(outputPath, new SubProgressMonitor(pm, 1));
		} else {
			pm.worked(2);
		}
d169 2
a170 1
		pm.done();
@


1.1
log
@*** empty log message ***
@
text
@d216 3
@

