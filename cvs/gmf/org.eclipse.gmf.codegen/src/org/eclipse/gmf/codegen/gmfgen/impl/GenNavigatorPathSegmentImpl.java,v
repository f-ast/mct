head	1.5;
access;
symbols
	v20081022-1925:1.5
	v20081015-1925:1.5
	v20081008-1925:1.5
	v20081001-1925:1.5
	v20080930-1130:1.5
	v20080926-1245:1.5
	v20080924-1925:1.5
	v20080917-1925:1.5
	v20080911-1728:1.5
	v20080910-1520:1.5
	v20080903-1520:1.5
	v20080827-1520:1.5
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080722-1827:1.5
	v20080718-1731:1.5
	v20080716-1600:1.5
	v20080716-1642:1.5
	R2_1_maintenance:1.5.0.2
	Root_R2_1_maintenance:1.5
	R2_1_0:1.5
	v20080610-1132:1.5
	v20080603-1553:1.5
	v20080528-1052:1.5
	v20080521:1.5
	v20080516-1543:1.5
	v20080516-1143:1.5
	v20080512-1200:1.5
	v20080508-2000:1.5
	v20080507-1326:1.5
	v20080503-1740:1.5
	v20080501-1739:1.5
	v20080425-1959:1.5
	v20080417-1610:1.4
	v20080411-0411:1.4
	v20080404-1111:1.4
	v20080322-0000:1.4
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080207-0207:1.3
	v20071222-1111:1.3
	v20071214-1111:1.3
	v20071130-1111:1.3
	v20071124-0000:1.3
	v20071112-0000:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070921-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070614-1400:1.3
	v20070608-1300:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070520-1200:1.3
	v20070518-1300:1.3
	v20070504-1000:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.2
	v20070403-1500:1.2
	v20070330-1300:1.2
	v20060330-1300:1.2
	v20070322-1100:1.2
	v20060316-0600:1.2
	v20070307-0700:1.1
	v20070301-1200:1.1
	v20070228-2000:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20070103-0300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2008.04.18.14.43.22;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	2e1d4808b3814567;

1.4
date	2008.03.04.16.50.38;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	5e5047cd7dd64567;

1.3
date	2007.04.11.08.10.23;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	725b461c97d64567;

1.2
date	2007.03.14.14.39.35;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	444245f8090b4567;

1.1
date	2006.12.28.19.45.51;	author ashatalin;	state Exp;
branches;
next	;
commitid	13f545941eec4567;


desc
@@


1.5
log
@with [221352] resolved, we are safe to use readonly backreferences again, without suppressSetVisibility hack
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.codegen.gmfgen.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPath;
import org.eclipse.gmf.codegen.gmfgen.GenNavigatorPathSegment;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Navigator Path Segment</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorPathSegmentImpl#getPath <em>Path</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorPathSegmentImpl#getFrom <em>From</em>}</li>
 *   <li>{@@link org.eclipse.gmf.codegen.gmfgen.impl.GenNavigatorPathSegmentImpl#getTo <em>To</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenNavigatorPathSegmentImpl extends EObjectImpl implements GenNavigatorPathSegment {
	/**
	 * The cached value of the '{@@link #getFrom() <em>From</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getFrom()
	 * @@generated
	 * @@ordered
	 */
	protected GenCommonBase from;

	/**
	 * The cached value of the '{@@link #getTo() <em>To</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getTo()
	 * @@generated
	 * @@ordered
	 */
	protected GenCommonBase to;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenNavigatorPathSegmentImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return GMFGenPackage.eINSTANCE.getGenNavigatorPathSegment();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenNavigatorPath getPath() {
		if (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH) return null;
		return (GenNavigatorPath)eContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase getFrom() {
		if (from != null && from.eIsProxy()) {
			InternalEObject oldFrom = (InternalEObject)from;
			from = (GenCommonBase)eResolveProxy(oldFrom);
			if (from != oldFrom) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM, oldFrom, from));
			}
		}
		return from;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase basicGetFrom() {
		return from;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setFrom(GenCommonBase newFrom) {
		GenCommonBase oldFrom = from;
		from = newFrom;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM, oldFrom, from));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase getTo() {
		if (to != null && to.eIsProxy()) {
			InternalEObject oldTo = (InternalEObject)to;
			to = (GenCommonBase)eResolveProxy(oldTo);
			if (to != oldTo) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO, oldTo, to));
			}
		}
		return to;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public GenCommonBase basicGetTo() {
		return to;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setTo(GenCommonBase newTo) {
		GenCommonBase oldTo = to;
		to = newTo;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO, oldTo, to));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				return eBasicSetContainer(null, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				return eInternalContainer().eInverseRemove(this, GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS, GenNavigatorPath.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				return getPath();
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM:
				if (resolve) return getFrom();
				return basicGetFrom();
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO:
				if (resolve) return getTo();
				return basicGetTo();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM:
				setFrom((GenCommonBase)newValue);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO:
				setTo((GenCommonBase)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM:
				setFrom((GenCommonBase)null);
				return;
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO:
				setTo((GenCommonBase)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				return getPath() != null;
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__FROM:
				return from != null;
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__TO:
				return to != null;
		}
		return super.eIsSet(featureID);
	}

} //GenNavigatorPathSegmentImpl@


1.4
log
@with EMF 2.4M5, it's no longer possible to use read-only opposite for containments (due to changes in SetCommand), regenerated to use different approach
@
text
@a10 1

a12 1

a14 2

import org.eclipse.emf.ecore.util.EcoreUtil;
a89 31
	public NotificationChain basicSetPath(GenNavigatorPath newPath, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newPath, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public void setPath(GenNavigatorPath newPath) {
		if (newPath != eInternalContainer() || (eContainerFeatureID != GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH && newPath != null)) {
			if (EcoreUtil.isAncestor(this, newPath))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newPath != null)
				msgs = ((InternalEObject)newPath).eInverseAdd(this, GMFGenPackage.GEN_NAVIGATOR_PATH__SEGMENTS, GenNavigatorPath.class, msgs);
			msgs = basicSetPath(newPath, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, newPath, newPath));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
d172 1
a172 1
				return basicSetPath((GenNavigatorPath)otherEnd, msgs);
d186 1
a186 1
				return basicSetPath(null, msgs);
a232 3
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				setPath((GenNavigatorPath)newValue);
				return;
a250 3
			case GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH:
				setPath((GenNavigatorPath)null);
				return;
@


1.3
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d18 1
d94 31
d207 1
a207 1
				return eBasicSetContainer(otherEnd, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, msgs);
d221 1
a221 1
				return eBasicSetContainer(null, GMFGenPackage.GEN_NAVIGATOR_PATH_SEGMENT__PATH, msgs);
d268 3
d289 3
@


1.2
log
@Regenerated gmfgen model with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d47 1
a47 1
	protected GenCommonBase from = null;
d57 1
a57 1
	protected GenCommonBase to = null;
@


1.1
log
@NavigatorContentProvider template reimplemented on xpand
@
text
@d73 1
d169 1
d185 1
d199 1
d213 1
d233 1
d251 1
d269 1
@

