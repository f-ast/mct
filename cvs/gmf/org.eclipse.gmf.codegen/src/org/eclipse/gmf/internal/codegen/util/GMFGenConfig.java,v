head	1.25;
access;
symbols
	v20081022-1925:1.25
	v20081015-1925:1.25
	v20081008-1925:1.22
	v20081001-1925:1.22
	v20080930-1130:1.22
	v20080926-1245:1.21
	v20080924-1925:1.20
	v20080917-1925:1.17
	v20080911-1728:1.16
	v20080910-1520:1.16
	v20080903-1520:1.16
	v20080827-1520:1.16
	v20080813-1520:1.16
	v20080806-1520:1.16
	v20080722-1827:1.16
	v20080718-1731:1.16
	v20080716-1600:1.13.2.1
	v20080716-1642:1.16
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.12
	v20080528-1052:1.12
	v20080521:1.12
	v20080516-1543:1.12
	v20080516-1143:1.12
	v20080512-1200:1.12
	v20080508-2000:1.12
	v20080507-1326:1.12
	v20080503-1740:1.12
	v20080501-1739:1.12
	v20080425-1959:1.12
	v20080417-1610:1.12
	v20080411-0411:1.12
	v20080404-1111:1.11
	v20080322-0000:1.11
	v20080222-1200:1.8
	v20080215-1500:1.8
	v20080207-0207:1.8
	v20071222-1111:1.8
	v20071214-1111:1.8
	v20071130-1111:1.8
	v20071124-0000:1.8
	v20071112-0000:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070928-0000:1.8
	v20070921-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.7
	v20070614-1400:1.7
	v20070608-1300:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070525-1500:1.7
	v20070520-1200:1.7
	v20070518-1300:1.7
	v20070504-1000:1.7
	v20070427-0600:1.7
	v20070420-1000:1.6
	v20070413-1300:1.6;
locks; strict;
comment	@# @;
expand	@k@;


1.25
date	2008.10.14.18.04.41;	author atikhomirov;	state Exp;
branches;
next	1.24;
commitid	4eff48f4df384567;

1.24
date	2008.10.14.17.48.28;	author atikhomirov;	state Exp;
branches;
next	1.23;
commitid	3e2f48f4db6c4567;

1.23
date	2008.10.14.17.43.38;	author atikhomirov;	state Exp;
branches;
next	1.22;
commitid	394348f4da4a4567;

1.22
date	2008.09.26.16.51.17;	author atikhomirov;	state Exp;
branches;
next	1.21;
commitid	13dbd48dd13054567;

1.21
date	2008.09.26.12.57.55;	author atikhomirov;	state Exp;
branches;
next	1.20;
commitid	71e848dcdc534567;

1.20
date	2008.09.23.17.27.56;	author atikhomirov;	state Exp;
branches;
next	1.19;
commitid	3447f48d9271c4567;

1.19
date	2008.09.23.15.36.17;	author atikhomirov;	state Exp;
branches;
next	1.18;
commitid	2988748d90cf04567;

1.18
date	2008.09.23.15.25.48;	author atikhomirov;	state Exp;
branches;
next	1.17;
commitid	280ab48d90a7c4567;

1.17
date	2008.09.12.14.44.28;	author atikhomirov;	state Exp;
branches;
next	1.16;
commitid	349ef48ca804c4567;

1.16
date	2008.06.28.15.38.29;	author ashatalin;	state Exp;
branches;
next	1.15;
commitid	13eb48665af54567;

1.15
date	2008.06.27.16.19.41;	author atikhomirov;	state Exp;
branches;
next	1.14;
commitid	70514865131d4567;

1.14
date	2008.06.27.16.17.33;	author atikhomirov;	state Exp;
branches;
next	1.13;
commitid	6f7f4865129d4567;

1.13
date	2008.06.04.12.42.02;	author dstadnik;	state Exp;
branches
	1.13.2.1;
next	1.12;
commitid	2f0948468d9a4567;

1.12
date	2008.04.11.11.28.49;	author dstadnik;	state Exp;
branches;
next	1.11;
commitid	55ca47ff4b6b4567;

1.11
date	2008.03.05.19.00.04;	author atikhomirov;	state Exp;
branches;
next	1.10;
commitid	6cb747ceedb44567;

1.10
date	2008.03.05.18.59.38;	author atikhomirov;	state Exp;
branches;
next	1.9;
commitid	6bcf47ceed994567;

1.9
date	2008.03.05.18.27.26;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	172747cee60d4567;

1.8
date	2007.06.19.15.36.25;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	727b4677f7f94567;

1.7
date	2007.04.24.12.40.00;	author dstadnik;	state Exp;
branches;
next	1.6;
commitid	59dc462dfaa04567;

1.6
date	2007.04.12.15.06.49;	author dstadnik;	state Exp;
branches;
next	1.5;
commitid	20aa461e4b094567;

1.5
date	2007.04.11.08.10.24;	author dstadnik;	state Exp;
branches;
next	1.4;
commitid	725b461c97d64567;

1.4
date	2007.04.10.15.31.47;	author dstadnik;	state Exp;
branches;
next	1.3;
commitid	c3c461bade24567;

1.3
date	2007.04.10.14.00.36;	author dstadnik;	state Exp;
branches;
next	1.2;
commitid	24f8461b98844567;

1.2
date	2007.04.10.07.59.07;	author dstadnik;	state Exp;
branches;
next	1.1;
commitid	13b2461b43ca4567;

1.1
date	2007.04.06.12.38.07;	author ashatalin;	state Exp;
branches;
next	;
commitid	8c646163f2e4567;

1.13.2.1
date	2008.06.28.15.49.13;	author ashatalin;	state Exp;
branches;
next	;
commitid	199c48665d794567;


desc
@@


1.25
log
@refactoring - use handy shortcut methods from superclass
@
text
@/*
 * Copyright (c) 2006, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.codegen.util;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenStandardPreferencePage;
import org.eclipse.gmf.internal.common.reconcile.Copier;
import org.eclipse.gmf.internal.common.reconcile.Decision;
import org.eclipse.gmf.internal.common.reconcile.DefaultDecision;
import org.eclipse.gmf.internal.common.reconcile.Matcher;
import org.eclipse.gmf.internal.common.reconcile.ReconcilerConfigBase;
import org.eclipse.gmf.internal.common.reconcile.ReflectiveMatcher;
import org.eclipse.gmf.internal.common.reconcile.StringPatternDecision;

public class GMFGenConfig extends ReconcilerConfigBase {

	public GMFGenConfig() {
		final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;
		
		setMatcher(GMFGEN.getGenEditorGenerator(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenEditorGenerator_CopyrightText());
		preserveIfSet(GMFGEN.getGenEditorGenerator_PackageNamePrefix());
		preserveIfSet(GMFGEN.getGenEditorGenerator_DomainFileExtension());
		preserveIfSet(GMFGEN.getGenEditorGenerator_DiagramFileExtension());
		preserveIfSet(GMFGEN.getGenEditorGenerator_SameFileForDiagramAndModel());
		preserveIfSet(GMFGEN.getGenEditorGenerator_ModelID());
		preserveIfSet(GMFGEN.getGenEditorGenerator_DynamicTemplates());
		preserveIfSet(GMFGEN.getGenEditorGenerator_TemplateDirectory());

		setMatcher(GMFGEN.getGenPlugin(), ALWAYS_MATCH); // exactly one feature for ALWAYS_MATCH GenEditorGenerator
		preserveIfSet(GMFGEN.getGenPlugin_ID());
		preserveIfSet(GMFGEN.getGenPlugin_Name());
		preserveIfSet(GMFGEN.getGenPlugin_Provider());
		preserveIfSet(GMFGEN.getGenPlugin_Version());
		preserveIfSet(GMFGEN.getGenPlugin_ActivatorClassName());
		preserveIfSet(GMFGEN.getGenPlugin_PrintingEnabled());

		setMatcher(GMFGEN.getGenEditorView(), ALWAYS_MATCH); //exactly one 
		preserveIfSet(GMFGEN.getGenEditorView_IconPath());
		preserveIfSet(GMFGEN.getGenEditorView_ClassName());
		preserveIfSet(GMFGEN.getGenEditorView_ID());

		setMatcher(GMFGEN.getGenDiagram(), ALWAYS_MATCH);
		restoreOld(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
		restoreOld(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_EditPartClassName());
		restoreOld(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		restoreOld(GMFGEN.getGenDiagram(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getGenDiagram_Synchronized());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getMeasurementUnit_Units());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getShortcuts_ContainsShortcutsTo());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getShortcuts_ShortcutsProvidedFor());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getEditorCandies_CreationWizardIconPath());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getEditorCandies_CreationWizardCategoryID());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getEditorCandies_EditingDomainID());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationEnabled());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_LiveValidationUIFeedback());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecorators());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderClassName());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderPriority());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderClassName());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderPriority());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderPriority());
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderClassName());

		for (EClass node : new EClass[] { GMFGEN.getGenTopLevelNode(), GMFGEN.getGenChildNode(), GMFGEN.getGenChildLabelNode(), GMFGEN.getGenChildSideAffixedNode() }) {
			setMatcher(node, new VisualIDMatcher());
			restoreOld(node, GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
			restoreOld(node, GMFGEN.getGenCommonBase_EditPartClassName());
			restoreOld(node, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
			restoreOld(node, GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName());
			restoreOld(node, GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
			restoreOld(node, GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName());
			restoreOld(node, GMFGEN.getGenNode_CreateCommandClassName());
		}

		setMatcher(GMFGEN.getGenCompartment(), new VisualIDMatcher());
		restoreOld(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
		restoreOld(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_EditPartClassName());
		restoreOld(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		restoreOld(GMFGEN.getGenCompartment(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName());
		restoreOld(GMFGEN.getGenCompartment_ListLayout());
		preserveIfSet(GMFGEN.getGenCompartment_CanCollapse());
		preserveIfSet(GMFGEN.getGenCompartment_HideIfEmpty());
		preserveIfSet(GMFGEN.getGenCompartment_NeedsTitle());

		setMatcher(GMFGEN.getGenLink(), new VisualIDMatcher());
		restoreOld(GMFGEN.getGenLink(), GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
		restoreOld(GMFGEN.getGenLink(), GMFGEN.getGenCommonBase_EditPartClassName());
		restoreOld(GMFGEN.getGenLink(), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		restoreOld(GMFGEN.getGenLink_CreateCommandClassName());
		restoreOld(GMFGEN.getGenLink_ReorientCommandClassName());
		preserveIfSet(GMFGEN.getGenLink_IncomingCreationAllowed());
		preserveIfSet(GMFGEN.getGenLink_OutgoingCreationAllowed());
		preserveIfSet(GMFGEN.getGenLink_ViewDirectionAlignedWithModel());
		preserveIfSet(GMFGEN.getGenLink_TreeBranch());

		for (EClass label : new EClass[] { GMFGEN.getGenLinkLabel(), GMFGEN.getGenNodeLabel(), GMFGEN.getGenExternalNodeLabel() }) {
			setMatcher(label, new VisualIDMatcher());
			restoreOld(label, GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
			restoreOld(label, GMFGEN.getGenCommonBase_EditPartClassName());
			restoreOld(label, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		}

		//if parent node is matched, then viemap is matched automatically because it is [1] feature.
		//there are nothing to reconcile for viewmaps, all their properties are derived
		//we need this only to dig into viewmap attributes
		setMatcherForAllSubclasses(GMFGEN.getViewmap(), ALWAYS_MATCH);

		setMatcher(GMFGEN.getDefaultSizeAttributes(), ALWAYS_MATCH);
		setCopier(GMFGEN.getDefaultSizeAttributes(), Copier.COMPLETE_COPY_NO_CROSSREF);
		preserveIfSet(GMFGEN.getDefaultSizeAttributes_Height());
		preserveIfSet(GMFGEN.getDefaultSizeAttributes_Width());
		
		setMatcherForAllSubclasses(GMFGEN.getAttributes(), ALWAYS_MATCH);
		setCopierForAllSubclasses(GMFGEN.getAttributes(), Copier.COMPLETE_COPY_NO_CROSSREF);

		// provided GenCommonBase matched, custom behaviour should be kept as is
		setMatcher(GMFGEN.getCustomBehaviour(), ALWAYS_MATCH);
		setCopier(GMFGEN.getCustomBehaviour(), Copier.COMPLETE_COPY_NO_CROSSREF);

		// We assume there's only one OpenDiagramBehaviour per GenCommonBase, hence do not attempt to match anything but metaclass
		setMatcher(GMFGEN.getOpenDiagramBehaviour(), ALWAYS_MATCH);
		class KeepOldIfNewIsByPatternOrNotSet extends StringPatternDecision {

			KeepOldIfNewIsByPatternOrNotSet(EAttribute feature, String pattern) {
				super(pattern, feature);
			}

			@@Override
			public void apply(EObject current, EObject old) {
				String newValue = (String) current.eGet(getFeature());
				if (isValueSet(old) && (newValue == null || myPattern.matcher(newValue).matches())) {
					preserveOld(current, old);
				} else {
					acceptNew(current, old);
				}
			}
		}
		// XXX not sure whether to keep old value on newValue == null is right, as null value is perfectly
		// legal and sensible (meaning this very diagram). Keeping old for now because it seems easier to reset 
		// value to null rather than to type once again.
		addDecision(GMFGEN.getOpenDiagramBehaviour(), new KeepOldIfNewIsByPatternOrNotSet(GMFGEN.getOpenDiagramBehaviour_DiagramKind(), "^FIXME.*")); //$NON-NLS-1$
		addDecision(GMFGEN.getOpenDiagramBehaviour(), new KeepOldIfNewIsByPatternOrNotSet(GMFGEN.getOpenDiagramBehaviour_EditorID(), "^FIXME.*")); //$NON-NLS-1$
		preserveIfSet(GMFGEN.getOpenDiagramBehaviour_EditPolicyClassName());
		preserveIfSet(GMFGEN.getOpenDiagramBehaviour_OpenAsEclipseEditor());

		// if there's a need to keep manually written openDiagramBehavior, uncomment next line 
		// for Reconciler#handleNotMatchedOld to perform a copy
		// setCopier(GMFGEN.getOpenDiagramBehaviour(), Copier.COMPLETE_COPY);

		setMatcher(GMFGEN.getMetamodelType(), ALWAYS_MATCH);
		restoreOld(GMFGEN.getMetamodelType_EditHelperClassName());
		preserveIfSet(GMFGEN.getMetamodelType(), GMFGEN.getElementType_DisplayName());
		preserveIfSet(GMFGEN.getMetamodelType(), GMFGEN.getElementType_DefinedExternally());

		setMatcher(GMFGEN.getSpecializationType(), ALWAYS_MATCH);
		restoreOld(GMFGEN.getSpecializationType_EditHelperAdviceClassName());
		preserveIfSet(GMFGEN.getSpecializationType(), GMFGEN.getElementType_DisplayName());
		preserveIfSet(GMFGEN.getSpecializationType(), GMFGEN.getElementType_DefinedExternally());

		setMatcher(GMFGEN.getGenPropertySheet(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenPropertySheet_ReadOnly());
		preserveIfSet(GMFGEN.getGenPropertySheet_NeedsCaption());
		preserveIfSet(GMFGEN.getGenPropertySheet_PackageName());
		preserveIfSet(GMFGEN.getGenPropertySheet_LabelProviderClassName());

		setMatcherForAllSubclasses(GMFGEN.getGenPropertyTab(), new ReflectiveMatcher(GMFGEN.getGenPropertyTab_ID()));
		preserveIfSet(GMFGEN.getGenStandardPropertyTab(), GMFGEN.getGenPropertyTab_Label());

		addDecision(GMFGEN.getGenCustomPropertyTab(), new KeepOldIfNewIsByPatternOrNotSet(GMFGEN.getGenPropertyTab_Label(), "^Core$")); //$NON-NLS-1$
		preserveIfSet(GMFGEN.getGenCustomPropertyTab_ClassName());
		setCopier(GMFGEN.getGenCustomPropertyTab(), Copier.COMPLETE_COPY_NO_CROSSREF);

		setMatcher(GMFGEN.getGenNavigator(), ALWAYS_MATCH);
		preserveIfRemoved(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_Navigator());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_GenerateDomainModelNavigator());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainContentExtensionPriority());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainContentProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainLabelProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainModelElementTesterClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenDomainModelNavigator_DomainNavigatorItemClassName());
		preserveIfSet(GMFGEN.getGenNavigator_ContentExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator_ContentExtensionName());
		preserveIfSet(GMFGEN.getGenNavigator_ContentExtensionPriority());
		preserveIfSet(GMFGEN.getGenNavigator_LinkHelperExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator_SorterExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator_ActionProviderID());
		preserveIfSet(GMFGEN.getGenNavigator_ContentProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator_LabelProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator_LinkHelperClassName());
		preserveIfSet(GMFGEN.getGenNavigator_SorterClassName());
		preserveIfSet(GMFGEN.getGenNavigator_ActionProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator_AbstractNavigatorItemClassName());
		preserveIfSet(GMFGEN.getGenNavigator_NavigatorGroupClassName());
		preserveIfSet(GMFGEN.getGenNavigator_NavigatorItemClassName());
		preserveIfSet(GMFGEN.getGenNavigator_UriInputTesterClassName());
		preserveIfSet(GMFGEN.getGenNavigator_PackageName());

		setMatcher(GMFGEN.getGenDiagramPreferences(), ALWAYS_MATCH);
		setCopier(GMFGEN.getGenDiagramPreferences(), Copier.COMPLETE_COPY_NO_CROSSREF);

		setMatcher(GMFGEN.getGenApplication(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenApplication_ID());
		preserveIfSet(GMFGEN.getGenApplication_Title());
		preserveIfSet(GMFGEN.getGenApplication_PackageName());
		preserveIfSet(GMFGEN.getGenApplication_ClassName());
		preserveIfSet(GMFGEN.getGenApplication_PerspectiveId());
		preserveIfSet(GMFGEN.getGenApplication_SupportFiles());

		// XXX ReflectiveMatcher(Kind) instead?
		setMatcher(GMFGEN.getGenStandardPreferencePage(), new Matcher() {

			public boolean match(EObject current, EObject old) {
				assert current instanceof GenStandardPreferencePage;
				assert old instanceof GenStandardPreferencePage;
				GenStandardPreferencePage curPage = (GenStandardPreferencePage) current;
				GenStandardPreferencePage oldPage = (GenStandardPreferencePage) old;
				if (curPage.getParent() == null) {
					//single root page, just match it with other root
					return oldPage.getParent() == null;
				}
				return curPage.getKind() == oldPage.getKind();
			}
		});
		restoreOld(GMFGEN.getGenStandardPreferencePage(), GMFGEN.getGenPreferencePage_ID());
		restoreOld(GMFGEN.getGenStandardPreferencePage(), GMFGEN.getGenPreferencePage_Name());

		setMatcher(GMFGEN.getGenCustomPreferencePage(), GMFGEN.getGenCustomPreferencePage_QualifiedClassName());
		restoreOld(GMFGEN.getGenCustomPreferencePage_GenerateBoilerplate());
		setCopier(GMFGEN.getGenCustomPreferencePage(), Copier.COMPLETE_COPY_NO_CROSSREF);
		setMatcher(GMFGEN.getGenPreference(), GMFGEN.getGenPreference_Name()); // XXX or KEY, perhaps, if persistence format is more important?
		preserveIfSet(GMFGEN.getGenPreference_Key());
		preserveIfSet(GMFGEN.getGenPreference_DefaultValue());
		setCopier(GMFGEN.getGenPreference(), Copier.COMPLETE_COPY_NO_CROSSREF);
		//
		// preserve model access attributes, or completely copy old if none in the new model found.
		setMatcher(GMFGEN.getDynamicModelAccess(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getDynamicModelAccess_ClassName());
		preserveIfSet(GMFGEN.getDynamicModelAccess_PackageName());
		setCopier(GMFGEN.getDynamicModelAccess(), Copier.COMPLETE_COPY_NO_CROSSREF);
		
		setMatcher(GMFGEN.getGenExpressionProviderContainer(), ALWAYS_MATCH);
		setMatcher(GMFGEN.getGenJavaExpressionProvider(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenJavaExpressionProvider_InjectExpressionBody());

		setMatcher(GMFGEN.getGenParsers(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenParsers_ClassName());
		preserveIfSet(GMFGEN.getGenParsers_PackageName());
		preserveIfSet(GMFGEN.getGenParsers_ProviderPriority());
		preserveIfSet(GMFGEN.getGenParsers_ExtensibleViaService());

		// next three matchers are pure "record match and do nothing" matchers
		// we need them for CustomParser's copy to update crossreferences afterwards correctly
		// this approach, with only matcher and no further decisions, seems not bad, as GenLabel
		// references only single labelModelFacet, hence we could alsways assume they are matching.
		setMatcher(GMFGEN.getFeatureLabelModelFacet(), ALWAYS_MATCH);
		setMatcher(GMFGEN.getDesignLabelModelFacet(), ALWAYS_MATCH);
		setMatcher(GMFGEN.getLabelModelFacet(), ALWAYS_MATCH);
		setMatcher(GMFGEN.getCustomParser(), GMFGEN.getCustomParser_QualifiedName());
		setCopier(GMFGEN.getCustomParser(), Copier.COMPLETE_COPY_WITH_CROSSREF);

		setMatcher(GMFGEN.getGenContextMenu(), new VisualIDMatcher(GMFGEN.getGenContextMenu_Context()));
		setCopier(GMFGEN.getGenContextMenu(), Copier.COMPLETE_COPY_WITH_CROSSREF);
		setMatcher(GMFGEN.getGenCustomAction(), GMFGEN.getGenCustomAction_QualifiedClassName());
		preserveIfSet(GMFGEN.getGenCustomAction_GenerateBoilerplate());
		preserveIfSet(GMFGEN.getGenCustomAction_Name());
		setCopier(GMFGEN.getGenCustomAction(), Copier.COMPLETE_COPY_NO_CROSSREF);
		setMatcher(GMFGEN.getGenCommandAction(), GMFGEN.getGenCommandAction_CommandIdentifier());
		preserveIfSet(GMFGEN.getGenCommandAction_Name());
		setCopier(GMFGEN.getGenCommandAction(), Copier.COMPLETE_COPY_NO_CROSSREF); // copy then, if none found
		setMatcher(GMFGEN.getGenSeparator(), GMFGEN.getGenSeparator_GroupName());
		setMatcher(GMFGEN.getGenGroupMarker(), GMFGEN.getGenGroupMarker_GroupName());
	}

	private void restoreOld(EClass eClass, EAttribute feature) {
		addDecision(eClass, new Decision.ALWAYS_OLD(feature));
	}

	private void restoreOld(EAttribute feature) {
		assert !feature.getEContainingClass().isAbstract();
		restoreOld(feature.getEContainingClass(), feature);
	}

	private void preserveIfSet(EAttribute feature) {
		assert !feature.getEContainingClass().isAbstract();
		addDecision(feature.getEContainingClass(), new DefaultDecision(feature));
	}
	private void preserveIfSet(EClass eClass, EAttribute feature) {
		//FIXME: only attributes for now, allow references
		addDecision(eClass, new DefaultDecision(feature));
	}

	private void preserveIfRemoved(EClass eClass, EStructuralFeature feature) {
		addDecision(eClass, new DefaultDecision(feature, true));
	}
}
@


1.24
log
@refactoring
@
text
@d274 1
a274 1
		setMatcher(GMFGEN.getCustomParser(), new ReflectiveMatcher(GMFGEN.getCustomParser_QualifiedName()));
d279 1
a279 1
		setMatcher(GMFGEN.getGenCustomAction(), new ReflectiveMatcher(GMFGEN.getGenCustomAction_QualifiedClassName()));
d283 1
a283 1
		setMatcher(GMFGEN.getGenCommandAction(), new ReflectiveMatcher(GMFGEN.getGenCommandAction_CommandIdentifier()));
d286 2
a287 2
		setMatcher(GMFGEN.getGenSeparator(), new ReflectiveMatcher(GMFGEN.getGenSeparator_GroupName()));
		setMatcher(GMFGEN.getGenGroupMarker(), new ReflectiveMatcher(GMFGEN.getGenGroupMarker_GroupName()));
@


1.23
log
@[250772] Support custom preferences - reconcile GenPreferences based on visible java constant name.
Besides, allow matching of custom preference pages, in case someone uses other means to produce gmfgen than DGMT.
@
text
@d57 4
a60 4
		restore(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
		restore(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_EditPartClassName());
		restore(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		restore(GMFGEN.getGenDiagram(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName());
d80 7
a86 7
			restore(node, GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
			restore(node, GMFGEN.getGenCommonBase_EditPartClassName());
			restore(node, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
			restore(node, GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName());
			restore(node, GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
			restore(node, GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName());
			restore(node, GMFGEN.getGenNode_CreateCommandClassName());
d90 5
a94 5
		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_EditPartClassName());
		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName());
		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_ListLayout());
d100 5
a104 5
		restore(GMFGEN.getGenLink(), GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
		restore(GMFGEN.getGenLink(), GMFGEN.getGenCommonBase_EditPartClassName());
		restore(GMFGEN.getGenLink(), GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
		restore(GMFGEN.getGenLink(), GMFGEN.getGenLink_CreateCommandClassName());
		restore(GMFGEN.getGenLink(), GMFGEN.getGenLink_ReorientCommandClassName());
d112 3
a114 3
			restore(label, GMFGEN.getGenCommonBase_NotationViewFactoryClassName());
			restore(label, GMFGEN.getGenCommonBase_EditPartClassName());
			restore(label, GMFGEN.getGenCommonBase_ItemSemanticEditPolicyClassName());
d165 1
a165 1
		restore(GMFGEN.getMetamodelType(), GMFGEN.getMetamodelType_EditHelperClassName());
d170 1
a170 1
		restore(GMFGEN.getSpecializationType(), GMFGEN.getSpecializationType_EditHelperAdviceClassName());
d240 2
a241 2
		restore(GMFGEN.getGenStandardPreferencePage(), GMFGEN.getGenPreferencePage_ID());
		restore(GMFGEN.getGenStandardPreferencePage(), GMFGEN.getGenPreferencePage_Name());
d244 1
a244 1
		restore(GMFGEN.getGenCustomPreferencePage(), GMFGEN.getGenCustomPreferencePage_GenerateBoilerplate());
d290 1
a290 3
	// XXX rename?: preserveOld
	// TODO single attr param version
	private void restore(EClass eClass, EAttribute feature) {
d294 5
@


1.22
log
@[174961] Code generation support for custom actions, reconcile context menus and their contents
@
text
@d240 5
a244 2
		addDecision(GMFGEN.getGenStandardPreferencePage(), new Decision.ALWAYS_OLD(GMFGEN.getGenPreferencePage_ID()));
		addDecision(GMFGEN.getGenStandardPreferencePage(), new Decision.ALWAYS_OLD(GMFGEN.getGenPreferencePage_Name()));
d246 4
d291 1
@


1.21
log
@[248327] Reconcile should respect cross-references
@
text
@d270 1
a270 1
		// FIXME setMatcher(GMFGEN.getGenContextMenu(), based on contexts);
d272 3
d279 2
@


1.20
log
@[244419] Support for custom parser - preserve custom parsers declared in the gmfgen model, if any.
@
text
@d123 1
a123 1
		setCopier(GMFGEN.getDefaultSizeAttributes(), Copier.COMPLETE_COPY);
d128 1
a128 1
		setCopierForAllSubclasses(GMFGEN.getAttributes(), Copier.COMPLETE_COPY);
d132 1
a132 1
		setCopier(GMFGEN.getCustomBehaviour(), Copier.COMPLETE_COPY);
d185 1
a185 1
		setCopier(GMFGEN.getGenCustomPropertyTab(), Copier.COMPLETE_COPY);
d215 1
a215 1
		setCopier(GMFGEN.getGenDiagramPreferences(), Copier.COMPLETE_COPY);
d242 1
a242 1
		setCopier(GMFGEN.getGenCustomPreferencePage(), Copier.COMPLETE_COPY);
d248 1
a248 1
		setCopier(GMFGEN.getDynamicModelAccess(), Copier.COMPLETE_COPY);
d260 7
d268 1
a268 1
		setCopier(GMFGEN.getCustomParser(), Copier.COMPLETE_COPY);
d271 2
a272 1
		setCopier(GMFGEN.getGenCustomAction(), Copier.COMPLETE_COPY);
d275 1
a275 1
		setCopier(GMFGEN.getGenCommandAction(), Copier.COMPLETE_COPY); // copy then, if none found
@


1.19
log
@don't do what computer could do for you
@
text
@d260 3
@


1.18
log
@[174961] Code generation support for custom actions, reconcile CustomAction and CommandAction
@
text
@d34 8
a41 8
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_CopyrightText());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_PackageNamePrefix());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_DomainFileExtension());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_DiagramFileExtension());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_SameFileForDiagramAndModel());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_ModelID());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_DynamicTemplates());
		preserveIfSet(GMFGEN.getGenEditorGenerator(), GMFGEN.getGenEditorGenerator_TemplateDirectory());
d44 6
a49 6
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_ID());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_Name());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_Provider());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_Version());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_ActivatorClassName());
		preserveIfSet(GMFGEN.getGenPlugin(), GMFGEN.getGenPlugin_PrintingEnabled());
d52 3
a54 3
		preserveIfSet(GMFGEN.getGenEditorView(), GMFGEN.getGenEditorView_IconPath());
		preserveIfSet(GMFGEN.getGenEditorView(), GMFGEN.getGenEditorView_ClassName());
		preserveIfSet(GMFGEN.getGenEditorView(), GMFGEN.getGenEditorView_ID());
d95 3
a97 3
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_CanCollapse());
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_HideIfEmpty());
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_NeedsTitle());
d105 4
a108 4
		preserveIfSet(GMFGEN.getGenLink(), GMFGEN.getGenLink_IncomingCreationAllowed());
		preserveIfSet(GMFGEN.getGenLink(), GMFGEN.getGenLink_OutgoingCreationAllowed());
		preserveIfSet(GMFGEN.getGenLink(), GMFGEN.getGenLink_ViewDirectionAlignedWithModel());
		preserveIfSet(GMFGEN.getGenLink(), GMFGEN.getGenLink_TreeBranch());
d124 2
a125 2
		preserveIfSet(GMFGEN.getDefaultSizeAttributes(), GMFGEN.getDefaultSizeAttributes_Height());
		preserveIfSet(GMFGEN.getDefaultSizeAttributes(), GMFGEN.getDefaultSizeAttributes_Width());
d157 2
a158 2
		preserveIfSet(GMFGEN.getOpenDiagramBehaviour(), GMFGEN.getOpenDiagramBehaviour_EditPolicyClassName());
		preserveIfSet(GMFGEN.getOpenDiagramBehaviour(), GMFGEN.getOpenDiagramBehaviour_OpenAsEclipseEditor());
d175 4
a178 4
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_ReadOnly());
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_NeedsCaption());
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_PackageName());
		preserveIfSet(GMFGEN.getGenPropertySheet(), GMFGEN.getGenPropertySheet_LabelProviderClassName());
d184 1
a184 1
		preserveIfSet(GMFGEN.getGenCustomPropertyTab(), GMFGEN.getGenCustomPropertyTab_ClassName());
d197 16
a212 16
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_ContentExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_ContentExtensionName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_ContentExtensionPriority());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_LinkHelperExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_SorterExtensionID());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_ActionProviderID());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_ContentProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_LabelProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_LinkHelperClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_SorterClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_ActionProviderClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_AbstractNavigatorItemClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_NavigatorGroupClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_NavigatorItemClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_UriInputTesterClassName());
		preserveIfSet(GMFGEN.getGenNavigator(), GMFGEN.getGenNavigator_PackageName());
d218 6
a223 6
		preserveIfSet(GMFGEN.getGenApplication(), GMFGEN.getGenApplication_ID());
		preserveIfSet(GMFGEN.getGenApplication(), GMFGEN.getGenApplication_Title());
		preserveIfSet(GMFGEN.getGenApplication(), GMFGEN.getGenApplication_PackageName());
		preserveIfSet(GMFGEN.getGenApplication(), GMFGEN.getGenApplication_ClassName());
		preserveIfSet(GMFGEN.getGenApplication(), GMFGEN.getGenApplication_PerspectiveId());
		preserveIfSet(GMFGEN.getGenApplication(), GMFGEN.getGenApplication_SupportFiles());
d246 2
a247 2
		preserveIfSet(GMFGEN.getDynamicModelAccess(), GMFGEN.getDynamicModelAccess_ClassName());
		preserveIfSet(GMFGEN.getDynamicModelAccess(), GMFGEN.getDynamicModelAccess_PackageName());
d252 1
a252 1
		preserveIfSet(GMFGEN.getGenJavaExpressionProvider(), GMFGEN.getGenJavaExpressionProvider_InjectExpressionBody());
d255 4
a258 4
		preserveIfSet(GMFGEN.getGenParsers(), GMFGEN.getGenParsers_ClassName());
		preserveIfSet(GMFGEN.getGenParsers(), GMFGEN.getGenParsers_PackageName());
		preserveIfSet(GMFGEN.getGenParsers(), GMFGEN.getGenParsers_ProviderPriority());
		preserveIfSet(GMFGEN.getGenParsers(), GMFGEN.getGenParsers_ExtensibleViaService());
d263 1
a263 1
		preserveIfSet(GMFGEN.getGenCommandAction(), GMFGEN.getGenCommandAction_Name());
d272 4
a276 3
		if (feature.getEContainingClass() != eClass) {
			throw new IllegalStateException();
		}
@


1.17
log
@[244419] Support for custom parser - reconciler
@
text
@d259 6
d273 3
@


1.16
log
@[238876] - Reconcile GenJavaExpressionProvider.injectExpressionBody property on gmfmap->gmfgen transformation
@
text
@d253 6
@


1.15
log
@[231133] reconcile viewmap attributes
@
text
@a18 1
import org.eclipse.gmf.codegen.gmfgen.GenLink;
d249 4
@


1.14
log
@[183775] reconcile names of property tabs;
reconcile DynamicModelAccess;
refactoring/cleanup
@
text
@d127 3
@


1.13
log
@[206348] enable tree by default
@
text
@a30 2
	private final GMFGenPackage GMFGEN = GMFGenPackage.eINSTANCE;

d32 2
d95 1
a95 1
		preserveIfSet(GMFGEN.getGenCompartment(), GMFGEN.getGenCompartment_ListLayout());
d109 1
a109 9
		addDecision(GMFGEN.getGenLink(), new Decision(GMFGEN.getGenLink_TreeBranch()) {

			@@Override
			public void apply(EObject current, EObject old) {
				if (!((GenLink) old).isTreeBranch()) {
					((GenLink) current).setTreeBranch(false);
				}
			}
		});
d181 1
a181 1
		preserveIfSet(GMFGEN.getGenCustomPropertyTab(), GMFGEN.getGenPropertyTab_Label());
d223 1
d227 2
a228 6
				if (false == current instanceof GenStandardPreferencePage) {
					return false;
				}
				if (false == old instanceof GenStandardPreferencePage) {
					return false;
				}
d241 6
d249 1
@


1.13.2.1
log
@[238876] - Reconcile GenJavaExpressionProvider.injectExpressionBody property on gmfmap->gmfgen transformation
@
text
@a251 4
		
		setMatcher(GMFGEN.getGenExpressionProviderContainer(), ALWAYS_MATCH);
		setMatcher(GMFGEN.getGenJavaExpressionProvider(), ALWAYS_MATCH);
		preserveIfSet(GMFGEN.getGenJavaExpressionProvider(), GMFGEN.getGenJavaExpressionProvider_InjectExpressionBody());
@


1.12
log
@mgolubev: reconcile prefs
@
text
@d19 1
d109 9
@


1.11
log
@corrected copyright year
@
text
@d19 1
d23 1
d220 22
@


1.10
log
@[209231] "Units" setting in gmfgen is always reverted to Pixel
@
text
@d2 1
a2 1
 * Copyright (c) 2006, 2007 Borland Software Corporation
@


1.9
log
@[221073] keep editing domain ID
@
text
@d60 1
@


1.8
log
@one xxx less - the class moved to the suggested location
@
text
@d64 1
@


1.7
log
@[183774] Reconcile link creation flags
@
text
@a25 3
/**
 * XXX Perhaps, org.eclipse.gmf.codegen/oeg.internal.util would be better place for this class. 
 */
@


1.6
log
@reconcile application
@
text
@d104 3
@


1.5
log
@[181778] Generate standalone creation commands for reference based links
@
text
@d208 8
@


1.4
log
@[155332] Reconcile edit part class names
@
text
@d102 1
@


1.3
log
@[155332] Reconcile edit part class names
@
text
@a18 2
import org.eclipse.gmf.codegen.gmfgen.GenChildContainer;
import org.eclipse.gmf.codegen.gmfgen.GenNode;
a21 1
import org.eclipse.gmf.internal.common.reconcile.Matcher;
d44 1
a44 1
		setMatcher(GMFGEN.getGenPlugin(), ALWAYS_MATCH); //exactly one feature for ALWAYS_MATCH GenEditorGenerator
d58 5
a66 1
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getGenDiagram_Synchronized());
a75 1
		restore(GMFGEN.getGenDiagram(), GMFGEN.getGenCommonBase_EditPartClassName());
d77 10
a86 11
		setMatcher(GMFGEN.getGenTopLevelNode(), getGenNodeMatcher());
		preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName(), ".*" + GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX); //$NON-NLS-1$
		preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName(), ".*" + GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX); //$NON-NLS-1$
		restore(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenCommonBase_EditPartClassName());
		preserveIfSet(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());

		setMatcher(GMFGEN.getGenChildNode(), getGenNodeMatcher());
		preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenContainerBase_CanonicalEditPolicyClassName(), ".*" + GenChildContainer.CANONICAL_EDIT_POLICY_SUFFIX); //$NON-NLS-1$
		preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenNode_GraphicalNodeEditPolicyClassName(), ".*" + GenNode.GRAPHICAL_NODE_EDIT_POLICY_SUFFIX); //$NON-NLS-1$
		restore(GMFGEN.getGenChildNode(), GMFGEN.getGenCommonBase_EditPartClassName());
		preserveIfSet(GMFGEN.getGenChildNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());
d88 5
a92 7
		setMatcher(GMFGEN.getGenChildLabelNode(), getGenNodeMatcher());
		preserveIfSet(GMFGEN.getGenChildLabelNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());

		setMatcher(GMFGEN.getGenChildSideAffixedNode(), getGenNodeMatcher());
		preserveIfSet(GMFGEN.getGenChildSideAffixedNode(), GMFGEN.getGenNode_PrimaryDragEditPolicyQualifiedClassName());

		setMatcher(GMFGEN.getGenCompartment(), new ReflectiveMatcher(GMFGEN.getGenCompartment_Title()));
a96 1
		restore(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_EditPartClassName());
d102 8
d156 1
d161 1
a203 1
	}
d205 2
a206 9
	private Matcher getGenNodeMatcher() {
		//FIXME: use new AttributeMatcher("domainMetaClass")
		return new ReflectiveMatcher(GMFGEN.getGenNode(), new ReflectiveMatcher.Reflector() {

			public Object reflect(EObject target) {
				GenNode genNode = (GenNode) target;
				return genNode.getDomainMetaClass();
			}
		});
a220 4

	private void preserveIfNotByPattern(EClass eClass, EAttribute feature, String pattern) {
		addDecision(eClass, new StringPatternDecision(pattern, feature));
	}
@


1.2
log
@format
@
text
@d22 1
d75 1
d80 1
a80 1
		//[155332]preserveIfNotByPattern(GMFGEN.getGenTopLevelNode(), GMFGEN.getGenCommonBase_EditPartClassName(), ".*" + GenCommonBase.EDIT_PART_SUFFIX);
d86 1
a86 1
		//[155332]preserveIfNotByPattern(GMFGEN.getGenChildNode(), GMFGEN.getGenCommonBase_EditPartClassName(), ".*" + GenCommonBase.EDIT_PART_SUFFIX);
d100 6
a105 1
		//[155332]preserveIfNotByPattern(GMFGEN.getGenCompartment(), GMFGEN.getGenCommonBase_EditPartClassName(), ".*" + GenCommonBase.EDIT_PART_SUFFIX);
d211 4
@


1.1
log
@Moving org.eclipse.gmf.internal.util.GMFGenConfig to org.eclipse.gmf.internal.codegen.util.GMFGenConfig.
@
text
@d32 1
d34 2
a35 2
	
	public GMFGenConfig(){
d45 1
a45 1
		
d53 1
a53 1
		
d58 2
a59 2
		
		setMatcher(GMFGEN.getGenDiagram(), ALWAYS_MATCH);  
d66 1
a66 1
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_LiveValidationUIFeedback());		
d68 3
a70 3
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderClassName());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationDecoratorProviderPriority());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_ValidationProviderClassName());		
d72 3
a74 3
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderPriority());		
		preserveIfSet(GMFGEN.getGenDiagram(), GMFGEN.getBatchValidation_MetricProviderClassName());		
		
d80 1
a80 1
		
d86 1
a86 1
		 
d89 1
a89 1
		
d92 1
a92 1
		
d99 1
a99 1
		
d104 1
a104 1
		
d117 1
d121 1
d125 1
a125 1
				if (isValueSet(old) && (newValue == null || myPattern.matcher(newValue).matches())){
d131 1
a131 1
		};
d164 1
a164 1
		
d193 1
a193 1
	private Matcher getGenNodeMatcher(){
d195 2
a196 1
		return new ReflectiveMatcher(GMFGEN.getGenNode(), new ReflectiveMatcher.Reflector(){
d198 1
a198 1
				GenNode genNode = (GenNode)target;
d203 2
a204 2
	
	private void preserveIfSet(EClass eClass, EAttribute feature){
d208 1
a208 1
	
d212 2
a213 2
	
	private void preserveIfNotByPattern(EClass eClass, EAttribute feature, String pattern){
a215 1
	
@

