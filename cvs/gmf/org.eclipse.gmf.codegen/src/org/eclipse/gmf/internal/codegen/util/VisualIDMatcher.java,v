head	1.2;
access;
symbols
	v20081022-1925:1.2
	v20081015-1925:1.2
	v20081008-1925:1.2
	v20081001-1925:1.2
	v20080930-1130:1.2
	v20080926-1245:1.1
	v20080924-1925:1.1
	v20080917-1925:1.1
	v20080911-1728:1.1
	v20080910-1520:1.1
	v20080903-1520:1.1
	v20080827-1520:1.1
	v20080813-1520:1.1
	v20080806-1520:1.1
	v20080722-1827:1.1
	v20080718-1731:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080603-1553:1.1
	v20080528-1052:1.1
	v20080521:1.1
	v20080516-1543:1.1
	v20080516-1143:1.1
	v20080512-1200:1.1
	v20080508-2000:1.1
	v20080507-1326:1.1
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080411-0411:1.1
	v20080404-1111:1.1
	v20080322-0000:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080207-0207:1.1
	v20071222-1111:1.1
	v20071214-1111:1.1
	v20071130-1111:1.1
	v20071124-0000:1.1
	v20071112-0000:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070921-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070614-1400:1.1
	v20070608-1300:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070520-1200:1.1
	v20070518-1300:1.1
	v20070504-1000:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2008.09.26.16.51.17;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	13dbd48dd13054567;

1.1
date	2007.04.10.14.00.36;	author dstadnik;	state Exp;
branches;
next	;
commitid	24f8461b98844567;


desc
@@


1.2
log
@[174961] Code generation support for custom actions, reconcile context menus and their contents
@
text
@/*
 * Copyright (c) 2007, 2008 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Dmitry Stadnik (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - match referenced elements
 */
package org.eclipse.gmf.internal.codegen.util;

import java.util.HashSet;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenCommonBase;
import org.eclipse.gmf.internal.common.reconcile.Matcher;

/**
 * @@author dstadnik
 */
public class VisualIDMatcher implements Matcher {
	private final EReference myCommonBaseReference; 

	public VisualIDMatcher() {
		myCommonBaseReference = null;
	}

	/**
	 * Matches not the elements passed by reconciler, but values they reference with the supplied feature.
	 * Feature's type should be subclass of GenCommonBase. If feature is multiple, element ordering is ignored.
	 */
	public VisualIDMatcher(EReference commonBaseReference) {
		assert commonBaseReference != null; // use another cons instead
		assert GMFGenPackage.eINSTANCE.getGenCommonBase().isSuperTypeOf(commonBaseReference.getEReferenceType());
		myCommonBaseReference = commonBaseReference;
	}

	public boolean match(EObject current, EObject old) {
		if (myCommonBaseReference == null) {
			if (current instanceof GenCommonBase && old instanceof GenCommonBase) {
				int oldID = ((GenCommonBase) old).getVisualID();
				int newID = ((GenCommonBase) current).getVisualID();
				return oldID == newID;
			}
			return false;
		}
		assert myCommonBaseReference.getEContainingClass().isInstance(current);
		if (myCommonBaseReference.isMany()) {
			@@SuppressWarnings("unchecked")
			List<GenCommonBase> lcb_old = (List<GenCommonBase>) old.eGet(myCommonBaseReference);
			@@SuppressWarnings("unchecked")
			List<GenCommonBase> lcb_new = (List<GenCommonBase>) current.eGet(myCommonBaseReference);
			if (lcb_new.size() != lcb_old.size()) {
				return false;
			}
			HashSet<Integer> oldVisualIDs = new HashSet<Integer>();
			for (GenCommonBase cb : lcb_old) {
				oldVisualIDs.add(cb.getVisualID());
			}
			for (GenCommonBase cb : lcb_new) {
				if (!oldVisualIDs.remove(cb.getVisualID())) {
					return false;
				}
			}
			assert oldVisualIDs.isEmpty(); // sanity
			return true;
		} else {
			GenCommonBase oldCB = (GenCommonBase) old.eGet(myCommonBaseReference);
			GenCommonBase newCB = (GenCommonBase) current.eGet(myCommonBaseReference);
			return oldCB.getVisualID() == newCB.getVisualID();
		}
	}
}
@


1.1
log
@[155332] Reconcile edit part class names
@
text
@d2 1
a2 1
 * Copyright (c) 2007 Borland Software Corporation
d11 1
d15 3
d19 2
d28 15
d45 32
a76 4
		if (current instanceof GenCommonBase && old instanceof GenCommonBase) {
			int oldID = ((GenCommonBase) old).getVisualID();
			int newID = ((GenCommonBase) current).getVisualID();
			return oldID == newID;
a77 1
		return false;
@

