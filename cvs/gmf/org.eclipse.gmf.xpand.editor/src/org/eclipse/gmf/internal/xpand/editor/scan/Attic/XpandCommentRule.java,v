head	1.2;
access;
symbols
	v20080813-1520:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.11.08.19.49.46;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@the rule is not used
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.editor.scan;

import org.eclipse.gmf.internal.xpand.codeassist.XpandTokens;
import org.eclipse.jface.text.rules.ICharacterScanner;
import org.eclipse.jface.text.rules.IRule;
import org.eclipse.jface.text.rules.IToken;
import org.eclipse.jface.text.rules.Token;

/**
 * @@author Sven Efftinge
 * 
 * 
 */
public class XpandCommentRule implements IRule {

    private IToken token;

    /**
     * 
     */
    public XpandCommentRule(final IToken token) {
        this.token = token;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.jface.text.rules.IRule#evaluate(org.eclipse.jface.text.rules.ICharacterScanner)
     */
    public IToken evaluate(final ICharacterScanner scanner) {
        final StringBuffer buff = new StringBuffer();
        boolean stopReading = false;
        int reads = 0;
        final String keyword = XpandTokens.REM + " ";
        while (!stopReading) {
            reads++;
            final char c = (char) scanner.read();
            if ((buff.length() > 0) && (XpandTokens.RT_CHAR == c)) {
                if (buff.toString().startsWith(keyword)) {
                    scanner.unread();
                    return token;
                }
            }
            buff.append(c);
            stopReading = !(keyword.startsWith(buff.toString()) || buff.toString().startsWith(keyword));

        }

        for (int i = 0; i < reads; i++) {
            scanner.unread();
        }
        return Token.UNDEFINED;
    }

}
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@@

