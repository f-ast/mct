head	1.2;
access;
symbols
	v20080813-1520:1.2
	v20080812-2100:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20071108-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070330-1300:1.2
	v20070228-2000:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.23.13.35.03;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@refactor access to color preferences
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.editor;

import org.eclipse.gmf.internal.xpand.editor.scan.CommentScanner;
import org.eclipse.gmf.internal.xpand.editor.scan.ContentScanner;
import org.eclipse.gmf.internal.xpand.editor.scan.TemplateTagScanner;
import org.eclipse.gmf.internal.xpand.editor.scan.XpandPartitionScanner;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.ITextHover;
import org.eclipse.jface.text.contentassist.ContentAssistant;
import org.eclipse.jface.text.contentassist.IContentAssistProcessor;
import org.eclipse.jface.text.contentassist.IContentAssistant;
import org.eclipse.jface.text.presentation.IPresentationReconciler;
import org.eclipse.jface.text.presentation.PresentationReconciler;
import org.eclipse.jface.text.rules.DefaultDamagerRepairer;
import org.eclipse.jface.text.rules.ITokenScanner;
import org.eclipse.jface.text.source.IAnnotationHover;
import org.eclipse.jface.text.source.ISourceViewer;
import org.eclipse.jface.text.source.SourceViewerConfiguration;

/**
 * Example configuration for an <code>SourceViewer</code> which shows Template
 * code.
 */
public class XpandSourceViewerConfiguration extends SourceViewerConfiguration {
    private final XpandEditor editor;

    private ContentScanner contentScanner;

    private CommentScanner commentScanner;

    private TemplateTagScanner tagScanner;

    /**
     * Default constructor.
     */
    public XpandSourceViewerConfiguration(XpandEditor editor) {
        this.editor = editor;
    }

    /**
     * Returns all configured content types for the given source viewer.
     * 
     * @@param sourceViewer
     *            the source viewer to be configured by this configuration
     * @@return all configured content types
     */
    @@Override
    public String[] getConfiguredContentTypes(final ISourceViewer aSourceViewer) {
        return new String[] { IDocument.DEFAULT_CONTENT_TYPE, XpandPartitionScanner.TAG, XpandPartitionScanner.COMMENT };
    }

    /**
     * Returns the content assistant ready to be used with the given source
     * viewer.
     * 
     * @@param sourceViewer
     *            the source viewer to be configured by this configuration
     * @@return a content assistant or null if content assist should not be
     *         supported
     */
    @@Override
    public IContentAssistant getContentAssistant(final ISourceViewer aSourceViewer) {
        ContentAssistant contentAssistant;
        contentAssistant = new ContentAssistant();
        final IContentAssistProcessor processor = new XpandContentAssistProcessor(editor);
        contentAssistant.setContentAssistProcessor(processor, IDocument.DEFAULT_CONTENT_TYPE);
        contentAssistant.setContentAssistProcessor(processor, XpandPartitionScanner.TAG);
        contentAssistant.setContentAssistProcessor(processor, XpandPartitionScanner.COMMENT);
        contentAssistant.enableAutoActivation(true);
        contentAssistant.setAutoActivationDelay(500);
        contentAssistant.setProposalPopupOrientation(IContentAssistant.PROPOSAL_OVERLAY);
        contentAssistant.setContextInformationPopupOrientation(IContentAssistant.CONTEXT_INFO_ABOVE);
        return contentAssistant;
    }

    /**
     * Returns the prefixes to be used by the line-shift operation. This
     * implementation always returns new String[] { "\t", " " }.
     * 
     * @@param sourceViewer
     *            the source viewer to be configured by this configuration
     * @@param contentType
     *            the content type for which the strategy is applicable
     * @@return the prefixes or null if the prefix operation should not be
     *         supported
     */
    @@Override
    public String[] getIndentPrefixes(final ISourceViewer aSourceViewer, final String aContentType) {
        return new String[] { "\t", "    " }; // see also 'getTabWidth' ...
    }

    /**
     * Returns the presentation reconciler ready to be used with the given
     * source viewer.
     * 
     * @@param sourceViewer
     *            the source viewer to be configured by this configuration
     * @@return the presentation reconciler or null if presentation reconciling
     *         should not be supported
     */
    @@Override
    public IPresentationReconciler getPresentationReconciler(final ISourceViewer aSourceViewer) {
        final PresentationReconciler reconciler = new PresentationReconciler();
        DefaultDamagerRepairer dr = new DefaultDamagerRepairer(getTemplateTagScanner());
        reconciler.setDamager(dr, XpandPartitionScanner.TAG);
        reconciler.setRepairer(dr, XpandPartitionScanner.TAG);

        dr = new DefaultDamagerRepairer(getCommentScanner());
        reconciler.setDamager(dr, XpandPartitionScanner.COMMENT);
        reconciler.setRepairer(dr, XpandPartitionScanner.COMMENT);

        dr = new DefaultDamagerRepairer(getContentScanner());
        reconciler.setDamager(dr, IDocument.DEFAULT_CONTENT_TYPE);
        reconciler.setRepairer(dr, IDocument.DEFAULT_CONTENT_TYPE);
        return reconciler;
    }

    /**
     * @@return
     */
    private CommentScanner getCommentScanner() {
        if (commentScanner == null) {
            commentScanner = new CommentScanner(editor.getColorProvider());
        }
        return commentScanner;
    }

    /**
     * @@return
     */
    protected ITokenScanner getTemplateTagScanner() {
        if (tagScanner == null) {
            tagScanner = new TemplateTagScanner(editor.getColorProvider());
        }
        return tagScanner;
    }

    /**
     * @@return
     */
    protected ITokenScanner getContentScanner() {
        if (contentScanner == null) {
            contentScanner = new ContentScanner(editor.getColorProvider());
        }
        return contentScanner;
    }

    @@Override
    public IAnnotationHover getAnnotationHover(final ISourceViewer sourceViewer) {
        return new OawProblemHover(sourceViewer);
    }

    @@Override
    public ITextHover getTextHover(final ISourceViewer sourceViewer, final String contentType) {
        return new OawProblemHover(sourceViewer);
    }
}@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@a32 1
import org.eclipse.ui.IEditorPart;
d39 1
a39 1
    private IEditorPart editor;
a46 2
    // private ColorProvider colorProvider;

d50 1
a50 2
    public XpandSourceViewerConfiguration(IEditorPart editor, ColorProvider colorProvider) {
        // this.colorProvider = colorProvider;
d137 1
a137 1
            commentScanner = new CommentScanner();
d147 1
a147 1
            tagScanner = new TemplateTagScanner();
d157 1
a157 1
            contentScanner = new ContentScanner();
@

