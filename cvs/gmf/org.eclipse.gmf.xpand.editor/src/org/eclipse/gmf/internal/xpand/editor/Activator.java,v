head	1.2;
access;
symbols
	v20080813-1520:1.2
	v20080812-2100:1.2
	ocl_qvt:1.2.0.6
	Root_ocl_qvt:1.2
	v20080722-1827:1.2
	v20080716-1600:1.2
	v20080716-1642:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20071108-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070330-1300:1.2
	v20070228-2000:1.2
	M4_20:1.2
	M3_20:1.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.23.13.35.04;	author atikhomirov;	state Exp;
branches
	1.2.6.1;
next	1.1;

1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches;
next	;

1.2.6.1
date	2008.08.15.20.21.27;	author atikhomirov;	state Exp;
branches;
next	;
commitid	4a1648a5e5474567;


desc
@@


1.2
log
@refactor access to color preferences
@
text
@/*******************************************************************************
 * Copyright (c) 2006 Eclipse.org
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.editor;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.osgi.framework.BundleContext;

public class Activator extends AbstractUIPlugin {

	private static Activator plugin;

	/**
	 * The constructor
	 */
	public Activator() {
		plugin = this;
	}

	@@Override
	public void stop(BundleContext context) throws Exception {
		plugin = null;
		super.stop(context);
	}

	/**
	 * Returns the shared instance
	 *
	 * @@return the shared instance
	 */
	public static Activator getDefault() {
		return plugin;
	}

	public static String getPluginID() {
		return getDefault().getBundle().getSymbolicName();
	}

	public static void logError(Exception e) {
		if (e instanceof CoreException) {
			log(((CoreException) e).getStatus());
		} else {
			log(new Status(IStatus.ERROR, getPluginID(), 0, e.getClass().getName(), e));
		}
	}

	public static void log(IStatus status) {
		getDefault().getLog().log(status);
	}
}
@


1.2.6.1
log
@refactored to allow dispose-ready behavior
@
text
@d1 2
a2 2
/*
 * Copyright (c) 2006 Borland Software Corporation
d8 1
a8 1
 */
a57 25

	/*
	private final HashMap<Class<?>, SoftReference<?>> myState = new HashMap<Class<?>, SoftReference<?>>();
	private final ReferenceQueue<Object> myRefQueue = new ReferenceQueue<Object>();

	// State management
	public static <T> T findState(Class<T> kind) {
		@@SuppressWarnings("unchecked")
		SoftReference<T> ref = (SoftReference<T>) getDefault().myState.get(kind);
		if (ref == null) {
			return null;
		}
		if (ref.get() == null) {
			getDefault().myState.remove(kind);
			return null;
		}
		return ref.get();
	}

	// for now, decided to allow replace old value (reason: why not)?
	public static <T> void putState(Class<T> kind, T instance) {
		assert instance != null; // XXX or allow any value?
		getDefault().myState.put(kind, new SoftReference<Object>((Object) instance, getDefault().myRefQueue));
	}
*/
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@a18 4
	// The plug-in ID
	public static final String PLUGIN_ID = "org.eclipse.xpand.editor";

	// The shared instance
a20 2
	private ColorProvider colorProvider;
	
a28 7
	public void start(BundleContext context) throws Exception {
		super.start(context);
		PreferencesConstants.initializeDefaultValues(getPreferenceStore());
		colorProvider = new ColorProvider();
	}

	@@Override
a29 2
		colorProvider.dispose();
		colorProvider = null;
a33 4
	public static ColorProvider getColorProvider() {
        return getDefault().colorProvider;
    }

d43 4
d51 1
a51 1
			log(new Status(IStatus.ERROR, PLUGIN_ID, 0, e.getClass().getName(), e));
@

