head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080812-2100:1.4
	ocl_qvt:1.4.0.4
	Root_ocl_qvt:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20071108-0000:1.4
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070330-1300:1.3
	v20070228-2000:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.4
date	2007.10.29.16.58.18;	author atikhomirov;	state Exp;
branches
	1.4.4.1;
next	1.3;
commitid	5b564726112a4567;

1.3
date	2006.10.23.15.00.21;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.13.35.04;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches;
next	;

1.4.4.1
date	2008.08.19.15.56.03;	author atikhomirov;	state Exp;
branches;
next	;
commitid	746548aaed124567;


desc
@@


1.4
log
@[207437] Resources to be composed from several sources
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2007 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.editor;

import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.ResourceBundle;

import org.eclipse.core.resources.IFile;
import org.eclipse.gmf.internal.xpand.ResourceManager;
import org.eclipse.gmf.internal.xpand.codeassist.XpandTokens;
import org.eclipse.gmf.internal.xpand.editor.ui.InsertTextAction;
import org.eclipse.gmf.internal.xpand.model.XpandExecutionContext;
import org.eclipse.gmf.internal.xpand.util.ContextFactory;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.source.ISourceViewer;
import org.eclipse.ui.editors.text.TextEditor;
import org.eclipse.ui.texteditor.ITextEditorActionDefinitionIds;
import org.eclipse.ui.texteditor.TextOperationAction;
import org.eclipse.ui.views.contentoutline.IContentOutlinePage;

/**
 * Template specific text editor.
 */
public class XpandEditor extends TextEditor {

	private final ColorProvider colorProvider;

    private final XpandContentOutlinePage ivOutlinePage = null;

	private XpandExecutionContext context;

    public XpandEditor() {
        super();
        colorProvider = new ColorProvider(Activator.getDefault().getPreferenceStore());
        colorProvider.initializeDefaults();
        setSourceViewerConfiguration(new XpandSourceViewerConfiguration(this));
        setDocumentProvider(new XpandDocumentProvider());
    }

    /*package*/ XpandExecutionContext getContext() {
    	if (context == null) {
    		assert getEditorInput().getAdapter(IFile.class) != null;
    		IFile aFile = (IFile) getEditorInput().getAdapter(IFile.class);
	    	final ResourceManager resourceManager = org.eclipse.gmf.internal.xpand.Activator.getResourceManager(aFile);
	    	context = ContextFactory.createXpandContext(resourceManager);
    	}
    	return context;
    }

    @@Override
    public void dispose() {
        colorProvider.dispose();
        super.dispose();
    }

    /*package*/ ColorProvider getColorProvider() {
		return colorProvider;
	}

    @@Override
    public void editorContextMenuAboutToShow(IMenuManager aMenu) {
        super.editorContextMenuAboutToShow(aMenu);
        addAction(aMenu, "ContentAssistProposal");
        addAction(aMenu, "ContentAssistTip");
    }

    @@Override
    public Object getAdapter(final Class aRequired) {
        if (IContentOutlinePage.class.equals(aRequired)) {
			// if (ivOutlinePage == null) {
            // ivOutlinePage = new
            // XPandContentOutlinePage(getDocumentProvider(), this);
            // if (getEditorInput() != null) {
            // ivOutlinePage.setInput(getEditorInput());
            // }
            // }
            return ivOutlinePage;
		}
        return super.getAdapter(aRequired);
    }

    /**
     * Forces the document to be redraw
     */
    public void redraw() {
        final ISourceViewer sourceViewer = getSourceViewer();
        if (sourceViewer != null) {
            final IDocument document = sourceViewer.getDocument();

            if (document != null) {
                document.set(document.get());
            }
        }
    }

    /**
     * The <code>TemplateEditor</code> implementation of this
     * <code>AbstractTextEditor</code> method extends the actions and connects
     * them with the global workbench actions.
     */
    @@Override
    protected void createActions() {
        super.createActions();
        final ResourceBundle rb = new ResourceBundle() {

            @@Override
            public Enumeration<String> getKeys() {
            	List<String> s = Collections.emptyList();
                return Collections.enumeration(s);
            }

            @@Override
            protected Object handleGetObject(String key) {
                return null;
            }
        };
        IAction a = new TextOperationAction(rb, "ContentAssistProposal.", this, ISourceViewer.CONTENTASSIST_PROPOSALS);
        a.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_PROPOSALS);
        setAction("ContentAssistProposal", a);

        a = new TextOperationAction(rb, "ContentAssistTip.", this, ISourceViewer.CONTENTASSIST_CONTEXT_INFORMATION);
        a.setActionDefinitionId(ITextEditorActionDefinitionIds.CONTENT_ASSIST_CONTEXT_INFORMATION);
        setAction("ContentAssistTip", a);

        a = new InsertTextAction(rb, this, getSourceViewer(), XpandTokens.LT);
        a.setActionDefinitionId(Activator.getPluginID() + ".insertLT");
        setAction("InsertLT", a);

        a = new InsertTextAction(rb, this, getSourceViewer(), XpandTokens.RT);
        a.setActionDefinitionId(Activator.getPluginID() + ".insertRT");
        setAction("InsertRT", a);

    }
}
@


1.4.4.1
log
@[243154] Use OCL instead of home-grown expression language - editor and its tests made compilable
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
d26 1
a26 1
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
d46 1
a46 1
	private ExecutionContext context;
d56 1
a56 1
    /*package*/ ExecutionContext getContext() {
@


1.3
log
@no reason for content assist to parse file and to care about context creation
@
text
@d4 1
a4 1
 * Copyright (c) 2005-2006 Sven Efftinge and others.
d60 1
a60 1
	    	final ResourceManager resourceManager = org.eclipse.gmf.internal.xpand.Activator.getResourceManager(aFile.getProject());
@


1.2
log
@refactor access to color preferences
@
text
@d22 2
d26 2
d46 2
d56 10
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d44 3
a46 2
        colorProvider = new ColorProvider();
        setSourceViewerConfiguration(new XpandSourceViewerConfiguration(this, colorProvider));
d56 3
d126 1
a126 1
        a.setActionDefinitionId(Activator.PLUGIN_ID + ".insertLT");
d130 1
a130 1
        a.setActionDefinitionId(Activator.PLUGIN_ID + ".insertRT");
@

