head	1.1;
access;
symbols
	v20080813-1520:1.1
	v20080812-2100:1.1
	ocl_qvt:1.1.0.6
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070330-1300:1.1
	v20070228-2000:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2008.08.15.20.20.56;	author atikhomirov;	state Exp;
branches;
next	;
commitid	493f48a5e5274567;


desc
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@/*******************************************************************************
 * Copyright (c) 2005, 2006 committers of openArchitectureWare and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     committers of openArchitectureWare - initial API and implementation
 *******************************************************************************/
package org.eclipse.gmf.internal.xpand.editor;

import java.net.MalformedURLException;
import java.net.URL;

import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.resource.ImageRegistry;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.widgets.Display;

public class EditorImages {

    public final static String EXTENSION = "extension.gif";

    public final static String OPERATION = "operation.gif";

    public final static String PROPERTY = "property.gif";

    public final static String VARIABLE = "variable.gif";

    public static final String TYPE = "type.gif";

    public static final String STATEMENT = "statement.gif";

    /**
     * The image registry containing <code>Image</code>s and
     * <code>ImageDescriptor</code>s.
     */
    private static ImageRegistry imageRegistry;

    /* Declare Common paths */
    private static URL ICON_BASE_URL = null;

    static {
        final String pathSuffix = "icons/"; //$NON-NLS-1$
        ICON_BASE_URL = Activator.getDefault().getBundle().getEntry(pathSuffix);
        initializeImageRegistry();
    }

    /**
     * Declare all images
     */
    private static void declareImages() {
        declareRegistryImage(EXTENSION, EXTENSION);
        declareRegistryImage(OPERATION, OPERATION);
        declareRegistryImage(PROPERTY, PROPERTY);
        declareRegistryImage(VARIABLE, VARIABLE);
        declareRegistryImage(STATEMENT, STATEMENT);
        declareRegistryImage(TYPE, TYPE);

    }

    /**
     * Declare an Image in the registry table.
     * 
     * @@param key
     *            The key to use when registering the image
     * @@param path
     *            The path where the image can be found. This path is relative
     *            to where this plugin class is found (i.e. typically the
     *            packages directory)
     */
    private final static void declareRegistryImage(final String key, final String path) {
        ImageDescriptor desc = ImageDescriptor.getMissingImageDescriptor();
        try {
            desc = ImageDescriptor.createFromURL(makeIconFileURL(path));
        } catch (final MalformedURLException me) {
            Activator.logError(me);
        }
        imageRegistry.put(key, desc);
    }

    /**
     * Returns the ImageRegistry.
     */
    public static ImageRegistry getImageRegistry() {
        if (imageRegistry == null) {
            initializeImageRegistry();
        }
        return imageRegistry;
    }

    /**
     * Initialize the image registry by declaring all of the required graphics.
     * This involves creating JFace image descriptors describing how to
     * create/find the image should it be needed. The image is not actually
     * allocated until requested.
     * 
     * Prefix conventions Wizard Banners WIZBAN_ Preference Banners PREF_BAN_
     * Property Page Banners PROPBAN_ Color toolbar CTOOL_ Enable toolbar ETOOL_
     * Disable toolbar DTOOL_ Local enabled toolbar ELCL_ Local Disable toolbar
     * DLCL_ Object large OBJL_ Object small OBJS_ View VIEW_ Product images
     * PROD_ Misc images MISC_
     * 
     * Where are the images? The images (typically gifs) are found in the same
     * location as this plugin class. This may mean the same package directory
     * as the package holding this class. The images are declared using
     * this.getClass() to ensure they are looked up via this plugin class.
     * 
     * @@see org.eclipse.jface.resource.ImageRegistry
     */
    public static ImageRegistry initializeImageRegistry() {
        imageRegistry = new ImageRegistry(Display.getCurrent() == null ? Display.getDefault() : Display.getCurrent());
        declareImages();
        return imageRegistry;
    }

    /**
     * Returns the <code>Image</code> identified by the given key, or
     * <code>null</code> if it does not exist.
     */
    public static Image getImage(final String key) {
        return getImageRegistry().get(key);
    }

    /**
     * Returns the <code>ImageDescriptor</code> identified by the given key,
     * or <code>null</code> if it does not exist.
     */
    public static ImageDescriptor getImageDescriptor(final String key) {
        return getImageRegistry().getDescriptor(key);
    }

    private static URL makeIconFileURL(final String iconPath) throws MalformedURLException {
        if (ICON_BASE_URL == null) {
			throw new MalformedURLException();
		}

        return new URL(ICON_BASE_URL, iconPath);
    }
}
@


1.1.6.1
log
@refactored to allow dispose-ready behavior
@
text
@d1 2
a2 3
/*
 * Copyright (c) 2008 Borland Software Corporation
 *
d9 2
a10 2
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
a12 1
import java.lang.ref.SoftReference;
a19 1
import org.eclipse.ui.services.IDisposable;
d21 13
a33 2
// would be better to have more generic Disposable interface than one from ui.services.
public class EditorImages implements IDisposable {
d35 27
a61 1
	private final ImageRegistry myRegistry;
d63 69
a131 50
	private static SoftReference<EditorImages> ourState;
	
	protected EditorImages() {
		myRegistry = new ImageRegistry(Display.getCurrent() == null ? Display.getDefault() : Display.getCurrent());
		// though, since creation happens at the moment someone requested image, getCurrent() shouldn't be null, ever.
	}

	public static EditorImages get() {
		EditorImages inst = ourState == null ? null : ourState.get();
		if (inst == null) {
			ourState = new SoftReference<EditorImages>(inst = new EditorImages());
		}
		return inst;
//		EditorImages inst = Activator.findState(EditorImages.class);
//		if (inst == null) {
//			Activator.putState(EditorImages.class, inst = new EditorImages());
//		}
//		return inst;
	}

	public Image getExtension() {
	    return imageFromPath("extension.gif"); //$NON-NLS-1$
	}
	public Image getOperation() {
	    return imageFromPath("operation.gif"); //$NON-NLS-1$
	}
	public Image getProperty() {
	    return imageFromPath("property.gif"); //$NON-NLS-1$
	}
	public Image getVariable() {
	    return imageFromPath("variable.gif"); //$NON-NLS-1$
	}
	public Image getType() {
	    return imageFromPath("type.gif"); //$NON-NLS-1$
	}
	public Image getStatement() {
	    return imageFromPath("statement.gif"); //$NON-NLS-1$
	}

    protected Image imageFromPath(final String path) {
    	if (myRegistry.getDescriptor(path) == null) {
	        ImageDescriptor desc = ImageDescriptor.getMissingImageDescriptor();
	        try {
	            desc = ImageDescriptor.createFromURL(makeIconFileURL(path));
	        } catch (final MalformedURLException me) {
	            Activator.logError(me);
	        }
	        myRegistry.put(path, desc);
    	}
    	return myRegistry.get(path);
d135 5
a139 2
        final String pathSuffix = "/icons/"; //$NON-NLS-1$
        return Activator.getDefault().getBundle().getEntry(pathSuffix + iconPath);
a140 4

	public void dispose() {
		myRegistry.dispose();
	}
@

