head	1.3;
access;
symbols
	v20080813-1520:1.3
	v20080812-2100:1.3
	ocl_qvt:1.3.0.6
	Root_ocl_qvt:1.3
	v20080722-1827:1.3
	v20080716-1600:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20071108-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070330-1300:1.3
	v20070228-2000:1.3
	M4_20:1.3
	M3_20:1.3;
locks; strict;
comment	@# @;


1.3
date	2006.11.08.19.49.31;	author atikhomirov;	state Exp;
branches
	1.3.6.1;
next	1.2;

1.2
date	2006.10.23.13.35.04;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches;
next	;

1.3.6.1
date	2008.08.19.15.56.03;	author atikhomirov;	state Exp;
branches;
next	;
commitid	746548aaed124567;


desc
@@


1.3
log
@no need to narrow character to byte
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.editor.scan;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.gmf.internal.xpand.codeassist.XpandTokens;
import org.eclipse.gmf.internal.xpand.editor.ColorProvider;
import org.eclipse.jface.text.rules.ICharacterScanner;
import org.eclipse.jface.text.rules.IRule;
import org.eclipse.jface.text.rules.IToken;
import org.eclipse.jface.text.rules.MultiLineRule;
import org.eclipse.jface.text.rules.RuleBasedScanner;
import org.eclipse.jface.text.rules.Token;
import org.eclipse.jface.text.rules.WhitespaceRule;

/**
 * 
 */
public class TemplateTagScanner extends RuleBasedScanner {

    public TemplateTagScanner(ColorProvider colorProvider) {
        final List<IRule> rules = new ArrayList<IRule>();
        // Add rule for strings
        final Token string = XpandTokenFactory.newStringToken(colorProvider);
        final Token terminals = XpandTokenFactory.newTerminalsToken(colorProvider);
        final Token define = XpandTokenFactory.newDefineToken(colorProvider);
        final Token keyword = XpandTokenFactory.newKeywordsToken(colorProvider);
        final Token others = XpandTokenFactory.newOtherToken(colorProvider);

        rules.add(new MultiLineRule("\"", "\"", string,'\\',true));
        rules.add(new MultiLineRule("'", "'", string,'\\',true));
        // Add rule for brackets
        rules.add(new IRule() {
            public IToken evaluate(final ICharacterScanner scanner) {
                final int c = scanner.read();
                if ((XpandTokens.LT_CHAR == c) || (XpandTokens.RT_CHAR == c)) {
					return terminals;
				} else {
                    scanner.unread();
                    return Token.UNDEFINED;
                }
            }
        });

        // Add rule for define
        rules.add(new XpandKeywordRule(define, new String[] { XpandTokens.DEFINE, XpandTokens.ENDDEFINE, XpandTokens.AROUND, XpandTokens.ENDAROUND }));
        // Add rule for keywords
        rules.add(new XpandKeywordRule(keyword, XpandTokens.allKeywords()));
        // Add generic whitespace rule.
        rules.add(new WhitespaceRule(new WhitespaceDetector()));

        setRules(rules.toArray(new IRule[rules.size()]));
        setDefaultReturnToken(others);
    }

}@


1.3.6.1
log
@[243154] Use OCL instead of home-grown expression language - editor and its tests made compilable
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
d37 1
a37 1

a42 1
        // FIXME add separate highlight for varaibles/parameters?
d44 2
a45 2
        // Add rule for strings
        rules.add(new MultiLineRule("'", "'", string, (char) 0,true)); // no escape char in OCL, I guess.
@


1.2
log
@refactor access to color preferences
@
text
@d49 1
a49 1
                final byte c = (byte) scanner.read();
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d21 1
d26 1
d33 1
a33 1
public class TemplateTagScanner extends AbstractXpandRuleBasedScanner {
d35 1
a35 1
    public TemplateTagScanner() {
d38 6
d67 1
@

