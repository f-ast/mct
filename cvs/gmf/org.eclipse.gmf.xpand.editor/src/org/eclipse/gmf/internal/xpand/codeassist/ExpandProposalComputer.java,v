head	1.1;
access;
symbols
	v20080813-1520:1.1
	v20080812-2100:1.1
	ocl_qvt:1.1.0.6
	Root_ocl_qvt:1.1
	v20080722-1827:1.1
	v20080716-1600:1.1
	v20080716-1642:1.1
	R2_1_maintenance:1.1.0.4
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070330-1300:1.1
	v20070228-2000:1.1
	M4_20:1.1
	M3_20:1.1;
locks; strict;
comment	@# @;


1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches
	1.1.6.1;
next	;

1.1.6.1
date	2008.08.19.15.56.03;	author atikhomirov;	state Exp;
branches;
next	;
commitid	746548aaed124567;


desc
@@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.codeassist;

import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.codeassist.ProposalComputer;
import org.eclipse.gmf.internal.xpand.expression.codeassist.ProposalFactory;
import org.eclipse.jface.text.contentassist.ICompletionProposal;

public class ExpandProposalComputer implements ProposalComputer {
	private final static Pattern p = Pattern.compile("EXPAND\\s+(.*)\\z");

	public List<ICompletionProposal> computeProposals(final String txt, final ExecutionContext ctx, final ProposalFactory factory) {
		Matcher m = p.matcher(txt);
		m.group(1).trim();
		// final List<ICompletionProposal> result = new
		// ArrayList<ICompletionProposal>();
        
		// TODO find respective templates
        
		// return result;
    	return Collections.emptyList();
    }
}
@


1.1.6.1
log
@[243154] Use OCL instead of home-grown expression language - editor and its tests made compilable
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
d22 1
a24 1
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
a28 1
	private final ProposalFactory proposalFactory;
d30 1
a30 5
	public ExpandProposalComputer(ProposalFactory factory) {
		assert factory != null;
		proposalFactory = factory;
	}
	public List<ICompletionProposal> computeProposals(final String txt, final ExecutionContext ctx) {
@

