head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080812-2100:1.4
	ocl_qvt:1.4.0.6
	Root_ocl_qvt:1.4
	v20080722-1827:1.4
	v20080716-1600:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20071108-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070330-1300:1.4
	v20070228-2000:1.4
	M4_20:1.4
	M3_20:1.4;
locks; strict;
comment	@# @;


1.4
date	2006.11.09.18.59.06;	author atikhomirov;	state Exp;
branches
	1.4.6.1;
next	1.3;

1.3
date	2006.10.30.13.34.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.10.23.16.47.58;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.10.18.20.33.08;	author atikhomirov;	state Exp;
branches;
next	;

1.4.6.1
date	2008.08.19.15.56.03;	author atikhomirov;	state Exp;
branches;
next	;
commitid	746548aaed124567;


desc
@@


1.4
log
@sort respecting case;
use chars past insertion point to decide whether RT should be added
@
text
@/*
 * <copyright>
 *
 * Copyright (c) 2005-2006 Sven Efftinge and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sven Efftinge - Initial API and implementation
 *
 * </copyright>
 */
package org.eclipse.gmf.internal.xpand.codeassist;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.gmf.internal.xpand.expression.ExecutionContext;
import org.eclipse.gmf.internal.xpand.expression.codeassist.ProposalComputer;
import org.eclipse.gmf.internal.xpand.expression.codeassist.ProposalFactory;
import org.eclipse.jface.text.contentassist.ICompletionProposal;

public class KeywordProposalComputer implements ProposalComputer {

	private final String textPastInsertionPoint;

	public KeywordProposalComputer(String textPastInsertionPoint) {
		this.textPastInsertionPoint = textPastInsertionPoint;
	}

    public List<ICompletionProposal> computeProposals(final String txt, final ExecutionContext ctx, final ProposalFactory factory) {
        final String prefix = getPrefix(txt);
        final List<ICompletionProposal> result = new ArrayList<ICompletionProposal>();
        if (prefix.length() > 0 || txt.endsWith(XpandTokens.LT)) {
        	final boolean needsRT = !textPastInsertionPoint.trim().startsWith(XpandTokens.RT);
	        final String[] kw = XpandTokens.allKeywords();
	        for (final String string : kw) {
	            if (string.toLowerCase().startsWith(prefix.toLowerCase())) {
	            	String insertString = string;
	            	if (!string.startsWith("END")) {
	            		insertString += " ";
	            	} else if (needsRT) {
	            		insertString += XpandTokens.RT;
	            	}
	                result.add(factory.createKeywordProposal(insertString, string, prefix));
	            }
	        }
        }
        return result;
    }

    private final static Pattern PREFIX = Pattern.compile("([A-Z]+)\\z");

    private String getPrefix(final String txt) {
        final Matcher m = PREFIX.matcher(txt);
        if (m.find()) {
			return m.group(1);
		}
        return "";
    }

}
@


1.4.6.1
log
@[243154] Use OCL instead of home-grown expression language - editor and its tests made compilable
@
text
@d2 3
a4 1
 * Copyright (c) 2005, 2008 Sven Efftinge and others.
d12 2
d22 1
a24 1
import org.eclipse.gmf.internal.xpand.model.ExecutionContext;
a29 1
	private final ProposalFactory proposalFactory;
d31 1
a31 1
	public KeywordProposalComputer(String textPastInsertionPoint, ProposalFactory factory) {
a32 2
		assert factory != null;
		proposalFactory = factory;
d35 1
a35 1
    public List<ICompletionProposal> computeProposals(final String txt, final ExecutionContext ctx) {
d49 1
a49 1
	                result.add(proposalFactory.createKeywordProposal(insertString, string, prefix));
@


1.3
log
@hack not to add space to end tags and to close them automatically
@
text
@d29 6
d39 1
d43 7
a49 1
	                result.add(factory.createKeywordProposal(string + (string.startsWith("END") ? XpandTokens.RT : " "), string, prefix));
@


1.2
log
@add condition to show keyword proposals right afrer LT char
@
text
@d36 1
a36 1
	                result.add(factory.createKeywordProposal(string + " ", string, prefix));
@


1.1
log
@Initial contribution of the reworked XPand template engine from eclipse.org/gmt/oaw to be used until M2T deliveries are available.
The contribution (including LPG 1.1 runtime) was approved by Eclipse Legal at the very end of September, 2006.
@
text
@d32 7
a38 7
        if (prefix.length() > 0) {
            final String[] kw = XpandTokens.allKeywords();
            for (final String string : kw) {
                if (string.toLowerCase().startsWith(prefix.toLowerCase())) {
                    result.add(factory.createKeywordProposal(string + " ", string, prefix));
                }
            }
@

