head	1.2;
access;
symbols
	v20081020-0700:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20080322-0000:1.2
	v20080222-1200:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070330-1300:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060810-1700:1.1.2.1
	v20060721-1130:1.1.2.1
	v20060713-1700:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;


1.2
date	2006.10.03.14.52.57;	author ahunter;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.13.20.25.17;	author ldamus;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.13.20.25.17;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.2
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action.actions.global;

/**
 * Locking mechanism used by {@@link GlobalUndoAction} and {@@link GlobalRedoAction}
 * to prevent nested undo / redo actions from occuring.
 */
final class GlobalUndoRedoLock {

	/**
	 * Lock instance.
	 */
	public static final GlobalUndoRedoLock INSTANCE = new GlobalUndoRedoLock();

	/**
	 * The locking object.
	 */
	private Object owner = null;
	
	/**
	 * Private constructor.
	 */
	private GlobalUndoRedoLock() {
		// private
	}

	/**
	 * Acquires the lock if the lock is free and returns true, otherwise false.
	 * 
	 * @@param key the key Object which can release the lock.
	 * @@return <code>true</code> if lock acquired, otherwise <code>false</code>
	 */
	synchronized boolean acquire(Object key) {
		if (owner == null) {
			owner = key;
			return true;
		}
		return false;
	}
	
	/**
	 * Releases the lock if the key is correct. If the key is incorrect,
	 * then an IllegalArgumentException is thrown.
	 * 
	 * @@param key the key which acquired the lock
	 */
	synchronized void release(Object key) {
		if (owner == key) {
			owner = null;
			return;
		}
		if (owner == null) {
			return;
		}
		throw new IllegalArgumentException("Unable to release lock, incorrect key."); //$NON-NLS-1$
	}
}
@


1.1
log
@file GlobalUndoRedoLock.java was initially added on branch R1_0_maintenance.
@
text
@d1 67
@


1.1.2.1
log
@[149315 gmf_R1_0_maintenance cvogt 060713 prevent global Undo / Redo actions from nested execution
@
text
@a0 67
/******************************************************************************
 * Copyright (c) 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action.actions.global;

/**
 * Locking mechanism used by {@@link GlobalUndoAction} and {@@link GlobalRedoAction}
 * to prevent nested undo / redo actions from occuring.
 */
final class GlobalUndoRedoLock {

	/**
	 * Lock instance.
	 */
	public static final GlobalUndoRedoLock INSTANCE = new GlobalUndoRedoLock();

	/**
	 * The locking object.
	 */
	private Object owner = null;
	
	/**
	 * Private constructor.
	 */
	private GlobalUndoRedoLock() {
		// private
	}

	/**
	 * Acquires the lock if the lock is free and returns true, otherwise false.
	 * 
	 * @@param key the key Object which can release the lock.
	 * @@return <code>true</code> if lock acquired, otherwise <code>false</code>
	 */
	synchronized boolean acquire(Object key) {
		if (owner == null) {
			owner = key;
			return true;
		}
		return false;
	}
	
	/**
	 * Releases the lock if the key is correct. If the key is incorrect,
	 * then an IllegalArgumentException is thrown.
	 * 
	 * @@param key the key which acquired the lock
	 */
	synchronized void release(Object key) {
		if (owner == key) {
			owner = null;
			return;
		}
		if (owner == null) {
			return;
		}
		throw new IllegalArgumentException("Unable to release lock, incorrect key."); //$NON-NLS-1$
	}
}
@

