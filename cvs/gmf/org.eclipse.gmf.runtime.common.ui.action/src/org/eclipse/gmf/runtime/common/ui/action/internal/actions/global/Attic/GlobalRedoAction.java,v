head	1.9;
access;
symbols
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	M5_10:1.8
	S20060303-1600:1.8
	I20060227-1730:1.8
	I20060216-1945:1.8
	I20060210-1715:1.7
	I20060209-1815:1.7
	I20060203-0830:1.7
	I20060129-1145:1.7
	I20060127-0900:1.7
	I20060120-1530:1.7
	I20060113-1700:1.7
	M4_10:1.7
	I20060107-1100:1.7
	I20060105-1630:1.7
	I20051230-1230:1.7
	I20051223-1100:1.7
	I20051217-0925:1.7
	I20051124-2000:1.7
	M3_10:1.6
	I20051118-1245:1.6
	I20051111-1800:1.6
	I20051106-0900:1.5
	v20051030:1.5;
locks; strict;
comment	@# @;


1.9
date	2006.03.06.23.23.14;	author ldamus;	state dead;
branches;
next	1.8;

1.8
date	2006.02.13.19.11.01;	author ldamus;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.22.04.15.46;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.08.21.41.40;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2005.10.28.19.59.04;	author ahunter;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.06.20.26.08;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.05.17.13.33;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.25.30;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.14;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[130642] gmf_head ldamus 060306 GlobalUndoAction and GlobalRedoAction need to be public
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action.internal.actions.global;

import org.eclipse.core.commands.operations.IUndoContext;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.gmf.runtime.common.ui.action.global.GlobalAction;
import org.eclipse.gmf.runtime.common.ui.action.global.GlobalActionId;
import org.eclipse.jface.action.IAction;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jface.util.IPropertyChangeListener;
import org.eclipse.jface.util.PropertyChangeEvent;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;
import org.eclipse.ui.operations.RedoActionHandler;

/**
 * Global Redo Action.
 * <P>
 * Extension of the GMF {@@link GlobalAction} class that delegates redo behaviour
 * to the undoable operation framework's {@@link RedoActionHandler}.
 * <P>
 * The undo context can be set through {@@link #setUndoContext(IUndoContext)}.
 * If it is not explicitly set, the undo context will be derived by adapting the
 * workbench part to {@@link IUndoContext}.
 * 
 * @@author vramaswa
 */
public final class GlobalRedoAction extends GlobalAction {

	/**
	 * My operation framework action handler delegate.
	 */
	private RedoActionHandler delegate;
    
    /**
     * My undo context.
     */
    private IUndoContext undoContext;

	/**
	 * Property change listener to listen for changes in my delegate.
	 */
	private IPropertyChangeListener listener;

	/**
	 * Initializes me with a workbench page.
	 * 
	 * @@param workbenchPage
	 *            the page
	 */
	public GlobalRedoAction(IWorkbenchPage workbenchPage) {
		super(workbenchPage);
	}

	/**
	 * Initializes me with a workbench part.
	 * 
	 * @@param workbenchPart
	 *            the part
	 */
	public GlobalRedoAction(IWorkbenchPart workbenchPart) {
		super(workbenchPart);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.global.GlobalAction#getActionId()
	 */
	public String getActionId() {
		return GlobalActionId.REDO;
	}

	/**
	 * Extends the superclass implementation to update the operation history
	 * undo action handler to which I delegate.
	 */
	protected void setWorkbenchPart(IWorkbenchPart workbenchPart) {
		super.setWorkbenchPart(workbenchPart);

        IUndoContext context = getUndoContext();

		if (context != null) {
			if (delegate != null) {
				delegate.removePropertyChangeListener(getDelegateListener());
				delegate.dispose();
			}

			delegate = new RedoActionHandler(workbenchPart.getSite(), context);
			delegate.addPropertyChangeListener(getDelegateListener());

			// force enablement update in UI
			boolean enabled = isEnabled();
			firePropertyChange(IAction.ENABLED, Boolean.valueOf(!enabled),
					Boolean.valueOf(enabled));
		}
	}
    
    /**
     * Gets my property change listener to listen for changes in my delegate.
     */
    private IPropertyChangeListener getDelegateListener() {
        if (listener == null) {
            listener = new IPropertyChangeListener() {

                public void propertyChange(PropertyChangeEvent event) {
                    // propagate to my own listeners
                    firePropertyChange(event.getProperty(),
                        event.getOldValue(), event.getNewValue());
                }
            };
        }
        return listener;
    }

	/**
	 * Delegates to the operation framework action handler.
	 */
	public ImageDescriptor getImageDescriptor() {
		if (delegate != null) {
			return delegate.getImageDescriptor();
		} else {
			return null;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public ImageDescriptor getDisabledImageDescriptor() {
		if (delegate != null) {
			return delegate.getDisabledImageDescriptor();
		} else {
			return null;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public ImageDescriptor getHoverImageDescriptor() {
		if (delegate != null) {
			return delegate.getHoverImageDescriptor();
		} else {
			return null;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public String getText() {
		if (delegate != null) {
			return delegate.getText();
		} else {
			return null;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public String getToolTipText() {
		if (delegate != null) {
			return delegate.getToolTipText();
		} else {
			return null;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public String getDescription() {
		if (delegate != null) {
			return delegate.getDescription();
		} else {
			return null;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public boolean isEnabled() {
		if (delegate != null) {
			return delegate.isEnabled();
		} else {
			return false;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public boolean isHandled() {
		if (delegate != null) {
			return delegate.isHandled();
		} else {
			return false;
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public void setChecked(boolean checked) {
		if (delegate != null) {
			delegate.setChecked(checked);
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	protected void doRun(IProgressMonitor progressMonitor) {
		if (delegate != null) {
			delegate.run();
		}
	}

	/**
	 * Delegates to the operation framework action handler.
	 */
	public void refresh() {
		if (delegate != null) {
			delegate.update();
		}
        setText(getText());
	}
    
    /**
     * Sets my undo context.
     * 
     * @@param undoContext
     *            my undo context
     */
    public final void setUndoContext(IUndoContext undoContext) {
        this.undoContext = undoContext;
    }
    
    /**
     * Gets my undo context. If it has not been explicitly set, derives the undo
     * context from my workbench part.
     * 
     * @@return my undo context. May be <code>null</code> if no one has set my
     *         undo context and my workbench part does not adapt to
     *         {@@link IUndoContext}.
     */
    public final IUndoContext getUndoContext() {

        if (undoContext == null) {
            IWorkbenchPart part = getWorkbenchPart();

            if (part != null) {
                return (IUndoContext) part.getAdapter(IUndoContext.class);
            }
        }
        return undoContext;
    }
    
    /**
     * Listens to the operation history events.
     */
    protected boolean isOperationHistoryListener() {
        return true;
    }

}
@


1.8
log
@[112826] gmf_head ldamus 060213 Adopt Eclipse 3.1 Operation History Framework
@
text
@@


1.7
log
@[114587] gmf_head etworkow 051121 Migrate GMF plug-ins to conform with Eclipse standard way of managing Images and Fonts
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2005 IBM Corporation and others.
d14 1
a14 2
import java.text.MessageFormat;

d16 6
a21 1
import org.eclipse.ui.ISharedImages;
d24 1
a24 6
import org.eclipse.ui.PlatformUI;

import org.eclipse.gmf.runtime.common.ui.action.global.GlobalAction;
import org.eclipse.gmf.runtime.common.ui.action.global.GlobalActionId;
import org.eclipse.gmf.runtime.common.ui.action.internal.IHelpContextIds;
import org.eclipse.gmf.runtime.common.ui.action.internal.l10n.CommonUIActionMessages;
d27 8
a34 2
 * Global Redo Action
 * This class simply delegates all the calls to the <code>RedoActionHandler</code>
d39 5
d46 1
a46 1
     * Action definition id of the redo action.
d48 6
a53 1
    private static final String REDO = "org.eclipse.gmf.runtime.common.ui.actions.global.redo"; //$NON-NLS-1$
d56 2
d59 1
d65 44
d110 1
a110 1
     * @@param workbenchPart
d112 12
a123 2
    public GlobalRedoAction(IWorkbenchPart workbenchPart) {
        super(workbenchPart);
d126 99
a224 2
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.IDisposableAction#init()
d226 5
a230 21
	public void init() {
        /* Set the id */
        setId(
            getWorkbenchActionConstant() != null
                ? getWorkbenchActionConstant()
                : REDO);

        /* Set the label */
        setText(CommonUIActionMessages.GlobalRedoAction_label);

        /* Set the image */
        ISharedImages sharedImages = PlatformUI.getWorkbench().getSharedImages();
        setImageDescriptor(sharedImages.getImageDescriptor(ISharedImages.IMG_TOOL_REDO));
        setHoverImageDescriptor(sharedImages.getImageDescriptor(ISharedImages.IMG_TOOL_REDO));
        setDisabledImageDescriptor(sharedImages.getImageDescriptor(ISharedImages.IMG_TOOL_REDO_DISABLED));

        /* Set the context sensitive help */
        PlatformUI.getWorkbench().getHelpSystem().setHelp(this, IHelpContextIds.PX_U_DEFAULT_CS_HELP);
		
		super.init();
    }
d232 15
a246 2
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.ui.action.internal.global.GlobalAction#getActionId()
d248 2
a249 2
    public String getActionId() {
        return GlobalActionId.REDO;
d251 10
d262 8
a269 11
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#doRun(org.eclipse.core.runtime.IProgressMonitor)
     */
    protected void doRun(IProgressMonitor progressMonitor) {
    	try {
    		// RATLC00138974 - prevents the user trying to redo while redo is in progress.
    		setEnabled(false);
    		getCommandManager().redo();
    	} finally {
    		refresh();
    	}
d271 3
a273 3

    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.ui.action.IRepeatableAction#refresh()
d275 2
a276 9
    public void refresh() {
		setEnabled(getCommandManager().canRedo());
		String label = CommonUIActionMessages.GlobalRedoAction_label;
		String commandLabel = getCommandManager().getRedoLabel();
		if (commandLabel != null) {
			label = MessageFormat.format(CommonUIActionMessages.GlobalRedoAction_formattedLabel,
				new Object[] {removeMnemonics(commandLabel)});
		}
		setText(label);
a278 6
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.AbstractActionHandler#isCommandStackListener()
	 */
	protected boolean isCommandStackListener() {
		return true;
	}
@


1.6
log
@Bugzilla Bug 114587 gmf_head etworkow 051109 Migrate GMF plug-ins to conform with Eclipse standard way of managing Images and Fonts
@
text
@d17 1
a17 1
import org.eclipse.jface.resource.ImageDescriptor;
a23 1
import org.eclipse.gmf.runtime.common.ui.action.internal.CommonUIActionPlugin;
a25 1
import org.eclipse.gmf.runtime.common.ui.action.internal.l10n.CommonUIActionPluginImages;
a39 18
    /**
     * Imagedescriptor for the redo action
     */
    private static final ImageDescriptor REDO_IMAGE = CommonUIActionPlugin.imageDescriptorFromPlugin
    	(CommonUIActionPlugin.getPluginId(), CommonUIActionPluginImages.IMG_REDO_EDIT_ETOOL16);
    	
    /**
     * Imagedescriptor for the redo action
     */
    private static final ImageDescriptor DISABLED_REDO_IMAGE = CommonUIActionPlugin.imageDescriptorFromPlugin
    	(CommonUIActionPlugin.getPluginId(), CommonUIActionPluginImages.IMG_REDO_EDIT_DTOOL16);
    
    /**
     * Imagedescriptor for the redo action
     */
    private static final ImageDescriptor HOVER_REDO_IMAGE = CommonUIActionPlugin.imageDescriptorFromPlugin
    	(CommonUIActionPlugin.getPluginId(), CommonUIActionPluginImages.IMG_REDO_EDIT_CTOOL16);
    
d68 4
a71 3
        setImageDescriptor(REDO_IMAGE);
        setHoverImageDescriptor(HOVER_REDO_IMAGE);
        setDisabledImageDescriptor(DISABLED_REDO_IMAGE);
@


1.5
log
@Bugzilla Bug 109445 gmf_head etworkow 051028 New Eclipse Resources Bundles Should Be Used
@
text
@d24 1
d27 1
a27 1
import org.eclipse.gmf.runtime.common.ui.action.internal.l10n.ResourceManager;
d45 3
a47 2
    private static final ImageDescriptor REDO_IMAGE = ResourceManager.getInstance().getImageDescriptor("full/etool16/redo_edit.gif"); //$NON-NLS-1$

d51 3
a53 2
    private static final ImageDescriptor DISABLED_REDO_IMAGE = ResourceManager.getInstance().getImageDescriptor("full/dtool16/redo_edit.gif"); //$NON-NLS-1$

d57 3
a59 2
    private static final ImageDescriptor HOVER_REDO_IMAGE = ResourceManager.getInstance().getImageDescriptor("full/ctool16/redo_edit.gif"); //$NON-NLS-1$

@


1.4
log
@Bugzilla 110317 gmf_head etworkow 051006 Compiler warning count should be 0 - runtime foundation layer components
@
text
@d25 1
a35 12
	/**
	 * The stand-alone Redo label. 
	 */
	private static final String REDO_LABEL = ResourceManager
		.getI18NString("GlobalRedoAction.label"); //$NON-NLS-1$

	/**
	 * The Redo label to be used with a command label.
	 */
	private static final String REDO_LABEL_FORMATTED = ResourceManager
		.getI18NString("GlobalRedoAction.formattedLabel"); //$NON-NLS-1$

d81 1
a81 1
        setText(REDO_LABEL);
d119 1
a119 1
		String label = REDO_LABEL;
d122 1
a122 1
			label = MessageFormat.format(REDO_LABEL_FORMATTED,
@


1.3
log
@Bugzilla 111637 gmf_head ldamus 051005 IRepeatableAction should be deprecated
@
text
@d20 1
a20 1
import org.eclipse.ui.help.WorkbenchHelp;
d100 2
a101 1
        WorkbenchHelp.setHelp(this, IHelpContextIds.PX_U_DEFAULT_CS_HELP);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a137 7
    /* (non-Javadoc)
     * @@see org.eclipse.gmf.runtime.common.ui.action.IRepeatableAction#isRepeatable()
     */
    public boolean isRepeatable() {
        return false;
    }

@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

