head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20071124-0000:1.3
	v20071108-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.3
date	2005.10.28.20.00.02;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.26.40;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.18;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bugzilla Bug 109445 gmf_head etworkow 051028 New Eclipse Resources Bundles Should Be Used
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.properties.extended;

import org.eclipse.gmf.runtime.common.ui.services.properties.internal.l10n.CommonUIServicesPropertiesMessages;
import org.eclipse.ui.views.properties.IPropertyDescriptor;
import org.eclipse.ui.views.properties.IPropertySource;
import org.eclipse.ui.views.properties.PropertyDescriptor;

/**
 * @@author Tauseef A. Israr Created on: Sep 9, 2002
 */
public class ExtendedPropertyDescriptor
	extends PropertyDescriptor
	implements IExtendedPropertyDescriptor {

	private IPropertySource propertySource;

	private boolean dirty = false;

	private boolean readOnly = false;

	/**
	 * The property display name
	 */
	private String displayName;

	/**
	 * @@param id
	 * @@param displayName
	 */
	public ExtendedPropertyDescriptor(Object id, String displayName) {
		super(id, displayName);
		this.displayName = displayName;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.extended.IExtendedPropertyDescriptor#getPropertySource()
	 */
	public IPropertySource getPropertySource() {
		return propertySource;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.extended.IExtendedPropertyDescriptor#isDirty()
	 */
	public boolean isDirty() {
		return dirty;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.extended.IExtendedPropertyDescriptor#setDirtyFlag(boolean)
	 */
	public void setDirtyFlag(boolean dirty) {
		this.dirty = dirty;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.extended.IExtendedPropertyDescriptor#setPropertySource(org.eclipse.ui.views.properties.IPropertySource)
	 */
	public void setPropertySource(IPropertySource propertySource) {
		this.propertySource = propertySource;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.extended.IExtendedPropertyDescriptor#getBlank()
	 */
	public Object getBlank() {
		return CommonUIServicesPropertiesMessages.ExtendedPropertyDescriptor_blank;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor#isReadOnly()
	 */
	public boolean isReadOnly() {
		return this.readOnly;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor#setReadOnly(boolean)
	 */
	public void setReadOnly(boolean read) {
		this.readOnly = read;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor#setPropertyValue(java.lang.Object)
	 */
	public void setPropertyValue(Object value) {
		/* method not implemented */
	}

	/**
	 * @@see org.eclipse.ui.views.properties.IPropertyDescriptor#isCompatibleWith(org.eclipse.ui.views.properties.IPropertyDescriptor)
	 */
	public boolean isCompatibleWith(IPropertyDescriptor anotherProperty) {
		assert null != anotherProperty;

		if (!(anotherProperty instanceof ExtendedPropertyDescriptor))
			return false;

		IExtendedPropertyDescriptor xdePropertyDescriptor = (IExtendedPropertyDescriptor) anotherProperty;

		if ((getPropertySource() == null)
			|| (xdePropertyDescriptor.getPropertySource() == null))
			return false;

		IPropertySource propertySource1 = getPropertySource();
		IPropertySource propertySource2 = xdePropertyDescriptor
			.getPropertySource();

		Object value1 = propertySource1.getPropertyValue(getId());
		Object value2 = propertySource2.getPropertyValue(getId());

		if ((value1 == null) && (value2 == null))
			return true;

		if ((value1 != null) && (value2 != null)) {
			if (!value1.equals(value2)) {
				setDirtyFlag(true);
			}
		} else {
			setDirtyFlag(true);
		}
		return true;
	}

	/**
	 * @@see org.eclipse.ui.views.properties.IPropertyDescriptor#getDisplayName()
	 */
	public String getDisplayName() {
		return displayName;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.extended.IExtendedPropertyDescriptor#setDisplayName(java.lang.String)
	 */
	public void setDisplayName(String displayName) {
		this.displayName = displayName;
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor#getPropertyValue()
	 */
	public Object getPropertyValue() {
		return getPropertySource().getPropertyValue(getId());
	}

	/**
	 * @@see org.eclipse.gmf.runtime.common.ui.services.properties.descriptors.ICompositeSourcePropertyDescriptor#resetPropertyValue()
	 */
	public void resetPropertyValue() {
		// do nothing by default

	}

}@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d14 1
a18 2
import org.eclipse.gmf.runtime.common.ui.services.properties.internal.l10n.PSFResourceManager;

a25 4
	/** Blank extended property descriptor. */
	public static final String BLANK = PSFResourceManager
		.getI18NString("ExtendedPropertyDescriptor.blank"); //$NON-NLS-1$

d78 1
a78 1
		return BLANK;
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

