head	1.4;
access;
symbols
	v20081020-0700:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20080222-1200:1.4
	v20071124-0000:1.4
	v20071108-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070601-1400:1.4
	v20070330-1300:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060526-1200:1.3
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.01.54;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.23.17.05.46;	author ldamus;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.26.40;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.16.20;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.09.13.16.41.27;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2004, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.properties.descriptors;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.ui.views.properties.IPropertyDescriptor;

import org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource;

/**
 * A concrete implementation of the <code>ICompositePropertySource</code>
 * interface. A composite property source - is a <code>IPropertySource</code>
 * object, which allows link <code>ICompositePropertySource</code> object into
 * a linked list structure. The underlaying linked list is transparent to a
 * client - from outside it is a <code>IPropertySource</code> object.
 */
public class CompositePropertySource implements ICompositePropertySource {

    // the source of the properties
    private Object object = null;

    // child source
    private ICompositePropertySource enclosed = null;

    // category of the source - each descriptor inherits that
    private String category = null;

    // a local cache of the local to this source object property descriptors vs
    // their ids
    private Map propertyDescriptors = new HashMap();

    /**
     * Create an instance of the <code>ICompositePropertySource</code> for the
     * given object. This creates a single link object, ready to be appended to
     * an existing linked list, or become a head of a new one.
     * 
     * @@param object -
     *            the target of the properties
     */
    public CompositePropertySource(Object object) {
        super();
        this.object = object;
    }

    /**
     * Create an instance of the <code>ICompositePropertySource</code> for the
     * given object. This creates a single link object, ready to be appended to
     * an existing linked list, or become a head of a new one.
     * 
     * The descriptors in the scope of this link by default will be assigned the
     * given category
     * 
     * @@param object -
     *            the target of the properties
     * @@param category -
     *            the property category to be assigned to all descrtiptors in
     *            the scope of this link
     */
    public CompositePropertySource(Object object, String category) {
        this(object);
        this.category = category;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource#addPropertySource(org.eclipse.gmf.runtime.common.ui.services.properties.ICompositePropertySource)
     */
    public void addPropertySource(ICompositePropertySource source) {
        assert this != source : "self is not allowed - this will result in stack overflows"; //$NON-NLS-1$

        if (this.enclosed == null)
            enclosed = source;

        else
            enclosed.addPropertySource(source);

    }

    /**
     * Adds a new property descriptor to the property source. If there is
     * a property with that id already, nothing will happen
     * 
     * @@param descriptor -
     *            a new property descriptor to add to the property source
     */
    public void addPropertyDescriptor(
            ICompositeSourcePropertyDescriptor descriptor) {

        if (!isPropertySet(descriptor.getId())) {
            if (descriptor.getCategory() == null)
                descriptor.setCategory(getCategory());

            getLocalDescriptors().put(descriptor.getId(), descriptor);
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.ui.views.properties.IPropertySource#getEditableValue()
     */
    public Object getEditableValue() {
        if (getObject() == null && enclosed != null)
            return enclosed.getEditableValue();

        return getObject();
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.ui.views.properties.IPropertySource#getPropertyDescriptors()
     */
    public IPropertyDescriptor[] getPropertyDescriptors() {
        List list = new ArrayList(getLocalDescriptors().values());
        IPropertyDescriptor[] descriptors = new IPropertyDescriptor[list.size()];
        System.arraycopy(list.toArray(), 0, descriptors, 0, list.size());

        if (enclosed != null) {
            IPropertyDescriptor[] enclosedDecriptors = enclosed
                    .getPropertyDescriptors();
            IPropertyDescriptor[] all = new IPropertyDescriptor[descriptors.length
                    + enclosedDecriptors.length];
            System.arraycopy(enclosedDecriptors, 0, all, 0,
                    enclosedDecriptors.length);
            System.arraycopy(descriptors, 0, all, enclosedDecriptors.length,
                    descriptors.length);

            return all;

        }

        return descriptors;
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.ui.views.properties.IPropertySource#getPropertyValue(java.lang.Object)
     */
    public Object getPropertyValue(Object id) {
        ICompositeSourcePropertyDescriptor descriptor = (ICompositeSourcePropertyDescriptor) getLocalDescriptors()
                .get(id);
        return descriptor != null ? descriptor.getPropertyValue()
                : ((enclosed != null) ? enclosed.getPropertyValue(id) : null);
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.ui.views.properties.IPropertySource#isPropertySet(java.lang.Object)
     */
    public boolean isPropertySet(Object id) {

        return getLocalDescriptors().containsKey(id) ? true
                : (enclosed != null ? enclosed.isPropertySet(id) : false);
    }

    /*
     * (non-Javadoc)
     * 
     * @@see org.eclipse.ui.views.properties.IPropertySource#resetPropertyValue(java.lang.Object)
     */
    public void resetPropertyValue(Object id) {

        ICompositeSourcePropertyDescriptor descriptor = (ICompositeSourcePropertyDescriptor) getLocalDescriptors()
                .get(id);

        if (descriptor != null) {
            descriptor.resetPropertyValue();
        } else if (enclosed != null)
            enclosed.resetPropertyValue(id);
    }

    /**
     * This delegates to IItemPropertyDescriptor.setPropertyValue().
     */
    public void setPropertyValue(Object propertyId, Object value) {

    	ICompositeSourcePropertyDescriptor descriptor = (ICompositeSourcePropertyDescriptor) getLocalDescriptors()
                .get(propertyId);

        if (descriptor != null) {
            descriptor.setPropertyValue(value);
        } else if (enclosed != null)
            enclosed.setPropertyValue(propertyId, value);
    }

    /**
     * Returns the category, if one is set for this link.
     * @@return - the category, if one is set for this link. 
     */
    public String getCategory() {
        return category;
    }

    /**
     * Returns the target of the properties.
     * @@return - the target of the properties. 
     */
    public Object getObject() {
        return object;
    }

    /**
     * Returns the descriptors local to this link.
     * @@return - the descriptors local to this link.
     */
    protected Map getLocalDescriptors() {
        return propertyDescriptors;
    }

    /**
     * Returns the next link on the linked list.
     * @@return - the next link on the linked list.
     */
    protected ICompositePropertySource getEnclosed() {
        return enclosed;
    }

}@


1.3
log
@[129194] gmf_head ldamus 060523 Typo in CompositePropertySource?
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2005 IBM Corporation and others.
@


1.3.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2004, 2006 IBM Corporation and others.
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d194 1
a194 1
        CompositeSourcePropertyDescriptor descriptor = (CompositeSourcePropertyDescriptor) getLocalDescriptors()
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004, 2005.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

