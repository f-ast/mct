head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060925-1700:1.2.2.1
	M1_20:1.2
	v20060721-1130:1.2.2.1
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2006.10.03.15.02.09;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.32;	author sshaw;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.08.30.03.16.14;	author sshaw;	state Exp;
branches;
next	;

1.2.2.1
date	2006.07.19.20.47.26;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.services.dnd.ide.drop;

import java.util.Iterator;
import java.util.List;

import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.jface.util.LocalSelectionTransfer;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.StructuredViewer;
import org.eclipse.swt.dnd.DND;
import org.eclipse.swt.dnd.DropTargetEvent;
import org.eclipse.swt.dnd.FileTransfer;
import org.eclipse.swt.dnd.TransferData;
import org.eclipse.ui.views.navigator.NavigatorDropAdapter;

import org.eclipse.gmf.runtime.common.core.command.ICommand;
import org.eclipse.gmf.runtime.common.ui.services.dnd.core.ITransferAgent;
import org.eclipse.gmf.runtime.common.ui.services.dnd.core.TransferId;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetContext;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetEvent;
import org.eclipse.gmf.runtime.common.ui.services.dnd.drop.IDropTargetListener;
import org.eclipse.gmf.runtime.common.ui.services.dnd.ide.core.IDETransferId;

/**
 * Concrete class that implements the IDropTargetListener. This class handles
 * dropping resource elements.
 * 
 * @@author ldamus
 */
public class ResourceDropTargetListener
	extends NavigatorDropAdapter
	implements IDropTargetListener {

	/**
	 * Constructs a new drop listener for the given viewer.
	 * 
	 * @@param viewer
	 *            the viewer
	 */
	public ResourceDropTargetListener(StructuredViewer viewer) {
		super(viewer);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.IDropTargetListener#getExecutableContext(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public ICommand getExecutableContext(DropTargetEvent event) {
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.IDropTargetListener#canSupport(org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.IDropTargetContext,
	 *      org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.IDropTargetEvent,
	 *      org.eclipse.gmf.runtime.common.ui.internal.dnd.ITransferAgent)
	 */
	public boolean canSupport(IDropTargetContext context,
			IDropTargetEvent currentEvent, ITransferAgent currentAgent) {

		Object target = context.getCurrentTarget();
		return (target instanceof IResource)
			|| ((target instanceof IAdaptable) && ((IAdaptable) target)
				.getAdapter(IResource.class) != null);

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.IDropTargetListener#setFeedback(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void setFeedback(DropTargetEvent event) {

		if (FileTransfer.getInstance().isSupportedType(event.currentDataType))
			// if dropping a file, make a copy gesture instead of move
			if ((event.operations & DND.DROP_COPY) != 0) {
				event.detail = DND.DROP_COPY;
			} else {
				event.detail = DND.DROP_NONE;
			}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.gmf.runtime.common.ui.internal.dnd.drop.IDropTargetListener#getSupportingTransferIds()
	 */
	public String[] getSupportingTransferIds() {
		return new String[] {IDETransferId.NAV_SELECTION_TRANSFER,
			TransferId.FILE_TRANSFER};
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.swt.dnd.DropTargetListener#dropAccept(org.eclipse.swt.dnd.DropTargetEvent)
	 */
	public void dropAccept(DropTargetEvent event) {
		Object target = getCurrentTarget();
		if (!(target instanceof IResource)) {
			if (target instanceof IAdaptable) {
				target = ((IAdaptable) target).getAdapter(IResource.class);
			}
		}
		if (!validateDrop(target, event.detail, event.currentDataType)) {
			event.detail = DND.DROP_NONE;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.ui.views.navigator.NavigatorDropAdapter#validateDrop(java.lang.Object,
	 *      int, org.eclipse.swt.dnd.TransferData)
	 */
	public boolean validateDrop(Object target, int dragOperation,
			TransferData transferType) {
		// adapt the target to IResource if necessary
		Object adaptedTarget = target;
		if (!(adaptedTarget instanceof IResource)) {
			if (adaptedTarget instanceof IAdaptable) {
				adaptedTarget = ((IAdaptable) target)
					.getAdapter(IResource.class);
			}
		}

		if (LocalSelectionTransfer.getTransfer().isSupportedType(transferType)) {
			// validate that the source is IResource, otherwise superclass's
			// call fails
			ISelection selection = LocalSelectionTransfer.getTransfer()
				.getSelection();
			if (selection instanceof IStructuredSelection) {
				List selectionList = ((IStructuredSelection) selection)
					.toList();
				Iterator i = selectionList.iterator();
				while (i.hasNext()) {
					if (!(i.next() instanceof IResource)) {
						return false;
					}
				}
			}
		}

		return super.validateDrop(adaptedTarget, dragOperation, transferType);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @@see org.eclipse.jface.viewers.ViewerDropAdapter#getCurrentTarget()
	 */
	protected Object getCurrentTarget() {
		Object target = super.getCurrentTarget();
		if (!(target instanceof IResource)) {
			if (target instanceof IAdaptable) {
				target = ((IAdaptable) target).getAdapter(IResource.class);
			}
		}
		return target;
	}

}@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d19 1
a26 1
import org.eclipse.ui.views.navigator.LocalSelectionTransfer;
d143 1
a143 1
		if (LocalSelectionTransfer.getInstance().isSupportedType(transferType)) {
d146 1
a146 1
			ISelection selection = LocalSelectionTransfer.getInstance()
@


1.2.2.1
log
@[135637] gmf_R1_0_maintenance ahunter 060719 Update IDETransferAdapterProvider to use org.eclipse.jface.util.LocalSelectionTransfer
@
text
@a18 1
import org.eclipse.jface.util.LocalSelectionTransfer;
d26 1
d143 1
a143 1
		if (LocalSelectionTransfer.getTransfer().isSupportedType(transferType)) {
d146 1
a146 1
			ISelection selection = LocalSelectionTransfer.getTransfer()
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

