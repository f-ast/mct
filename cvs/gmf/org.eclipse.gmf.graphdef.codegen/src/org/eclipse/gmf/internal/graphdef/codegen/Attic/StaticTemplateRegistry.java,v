head	1.2;
access;
symbols
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20080731-1520:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.02.06.22.21.41;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2006.02.05.23.00.50;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.graphdef.codegen;

import java.util.HashMap;
import java.util.Map;

/**
 * @@author artem
 */
public class StaticTemplateRegistry implements TemplateRegistry {
	private final Map pathMap = new HashMap/*<Object, String>*/();
	private final Map classMap = new HashMap/*<Object,Class>*/();

	public void put(Object key, String templatePath, Class generatorClass) {
		assert key != null && templatePath != null;
		pathMap.put(key, templatePath);
		if (generatorClass != null) {
			classMap.put(key, generatorClass);
		}
	}

	public String getTemplatePath(Object key) {
		return (String) pathMap.get(key);
	}

	public boolean hasGeneratorClass(Object key) {
		return classMap.containsKey(key);
	}

	public Class getGeneratorClass(Object key) {
		return (Class) classMap.get(key);
	}

	public void clean() {
		pathMap.clear();
		classMap.clear();
	}
}
@


1.1
log
@provisional framework that supports (double-)dispatch from templates to
a) avoid lengthy if instanceof elseif checks,
b) solve scope and name visibility issues when extracting common code into jetinc
@
text
@@

