head	1.2;
access;
symbols
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20080731-1520:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.02.06.22.21.41;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2006.02.05.23.00.50;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.graphdef.codegen;

import java.text.MessageFormat;

/**
 * Treat key as (part of) template path to allow <%=dispatcher.dispatch("../AnotherTemplate.javajet")%> use
 * Note, braces (<em>{</em> or <em>}</em>) within keys should be escaped, see {@@link MessageFormat} class for details  
 * @@author artem
 */
public class DynamicTemplateRegistry implements TemplateRegistry {
	private final String myPattern;

	/**
	 * Uses simple pattern <code>"{0}"</code> (i.e. leave key as is) to initialize instance. 
	 */
	public DynamicTemplateRegistry() {
		this("{0}");
	}

	/**
	 * Allows to add some prefix/suffix to the value of passed key. E.g. <code>"/templates-new/{0}.javajet"</code>
	 * @@param pattern string to pass to {@@link MessageFormat}
	 */
	public DynamicTemplateRegistry(String pattern) {
		myPattern = pattern;
	}

	/**
	 * Treats key as (part of) template path
	 */
	public String getTemplatePath(Object key) {
		return MessageFormat.format(myPattern, new Object[] { key });
	}

	/**
	 * @@return always false
	 */
	public boolean hasGeneratorClass(Object key) {
		return false;
	}

	/**
	 * @@return always <code>null</code>
	 */
	public Class getGeneratorClass(Object key) {
		return null;
	}

	/**
	 * NO-OP
	 */
	public void clean() {
	}
}
@


1.1
log
@provisional framework that supports (double-)dispatch from templates to
a) avoid lengthy if instanceof elseif checks,
b) solve scope and name visibility issues when extracting common code into jetinc
@
text
@@

