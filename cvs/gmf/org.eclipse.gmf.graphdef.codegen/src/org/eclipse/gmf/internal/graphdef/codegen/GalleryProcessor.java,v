head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080807-1333:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080528-1052:1.6
	v20080417-1610:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080207-0207:1.6
	v20071214-1111:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070608-1300:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070518-1300:1.5
	v20070330-1300:1.4
	v20060316-0600:1.4
	v20070307-0700:1.3
	v20070228-2000:1.3
	v20070208-1800:1.3
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061027-1200:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2007.05.28.13.33.47;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	3e69465ada3a4567;

1.5
date	2007.05.17.22.14.20;	author atikhomirov;	state Exp;
branches;
next	1.4;
commitid	640b464cd3bb4567;

1.4
date	2007.03.14.12.59.52;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	123445f7f1c74567;

1.3
date	2007.02.01.13.38.44;	author atikhomirov;	state Exp;
branches;
next	1.2;
commitid	25aa45c1ed644567;

1.2
date	2006.05.24.14.57.46;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.05.23.21.09.44;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.graphdef.codegen;

import java.util.Arrays;
import java.util.HashSet;

import org.eclipse.gmf.gmfgraph.FigureDescriptor;
import org.eclipse.gmf.gmfgraph.FigureGallery;
import org.eclipse.gmf.gmfgraph.util.FigureQualifiedNameSwitch;
import org.eclipse.gmf.graphdef.codegen.StandaloneGenerator.Config;
import org.eclipse.gmf.graphdef.codegen.StandaloneGenerator.Processor;
import org.eclipse.gmf.graphdef.codegen.StandaloneGenerator.ProcessorCallback;

/**
 * Straighforwardly transforms all top-level figures from supplied galleries
 * @@author artem
 */
public class GalleryProcessor extends Processor {
	private final FigureGallery[] myInput;

	public GalleryProcessor(FigureGallery input) {
		this(new FigureGallery[] { input });
	}

	public GalleryProcessor(FigureGallery[] input) {
		assert !Arrays.asList(input).contains(null);
		myInput = input;
	}
	
	public void go(ProcessorCallback callback, Config config) throws InterruptedException {
		for (int i = 0; i < myInput.length; i++) {
			for (FigureDescriptor next : myInput[i].getDescriptors()) {
				String fqn = callback.visitFigure(next);
				handle(next, fqn);
			}
		}
	}

	/**
	 * does nothing by default, override to do smth usable
	 */
	protected void handle(FigureDescriptor next, String fqn) {
	}

	public String[] getRequiredBundles(FigureQualifiedNameSwitch fqnSwitch) {
		HashSet<String> rv = new HashSet<String>();
		for (int i = 0; i < myInput.length; i++) {
			if (myInput[i].getImplementationBundle() != null && myInput[i].getImplementationBundle().trim().length() > 0) {
				rv.add(myInput[i].getImplementationBundle());
			}
			if (fqnSwitch != null) {
				rv.addAll(Arrays.asList(fqnSwitch.getDependencies(myInput[i])));
			}
		}
		return rv.toArray(new String[rv.size()]);
	}
}
@


1.5
log
@moving towards not using fqnswitch and java to tell draw2d figure names; let toolsmith to control what draw2d classes are being used; fqnSwitch argument replaced with simple token indicator
@
text
@d17 1
a17 1
import org.eclipse.gmf.gmfgraph.Figure;
d42 1
a42 1
			for (Figure next : myInput[i].getFigures()) {
d52 1
a52 1
	protected void handle(Figure next, String fqn) {
@


1.4
log
@Regenerated graphdef, tooldef and gmfmap models with EMF 2.3 M5 Generics, updated code to be "generified"
@
text
@d61 3
a63 2
			String[] additional = fqnSwitch.getDependencies(myInput[i]);
			rv.addAll(Arrays.asList(additional));
@


1.3
log
@use generics wherever possible
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
a15 1
import java.util.Iterator;
d42 1
a42 2
			for (Iterator it = myInput[i].getFigures().iterator(); it.hasNext();) {
				Figure next = (Figure) it.next();
@


1.2
log
@get rid of bogus config passing into ConverterOutcome
@
text
@d58 1
a58 1
		HashSet rv = new HashSet();
d66 1
a66 1
		return (String[]) rv.toArray(new String[rv.size()]);
@


1.1
log
@#140887 Remove Child interface from GMFGraph.
Although the need to reference child figures persist, thus FigureHandle was introduced, to allow diagramElements to reference either *generateable* figures (Figure subclasses) or *just-use* figures (like CustomFigure and FigureAccessor).
Refactoring performed with #131365 "Mirror GMFGraph model when generating standalone figure plugin" in mind
@
text
@d21 1
d41 1
a41 1
	public void go(ProcessorCallback callback) throws InterruptedException {
@

