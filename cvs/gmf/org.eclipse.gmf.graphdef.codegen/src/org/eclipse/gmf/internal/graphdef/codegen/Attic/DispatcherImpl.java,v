head	1.3;
access;
symbols
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080731-1520:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.02.06.22.21.41;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.05.23.00.50;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.internal.graphdef.codegen;

import org.eclipse.core.runtime.ILog;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Platform;
import org.eclipse.core.runtime.Status;
import org.eclipse.emf.codegen.jet.JETEmitter;
import org.eclipse.emf.codegen.jet.JETException;
import org.eclipse.gmf.common.UnexpectedBehaviourException;
import org.eclipse.gmf.graphdef.codegen.Dispatcher;

/**
 * @@author artem
 */
public class DispatcherImpl extends Dispatcher {

	private final YAEmitterFactory myFactory;

	private final KeyMap myKeyMap;

	public DispatcherImpl(YAEmitterFactory factory, KeyMap keyMap) {
		myFactory = factory;
		myKeyMap = keyMap;
	}

	public String dispatch(Object key, Object argument) {
		final String pluginID = "org.eclipse.gmf.graphdef.codegen";
		final ILog traceFacility = Platform.getLog(Platform.getBundle(pluginID));
		try {
			StringBuffer errors = new StringBuffer();
			for (KeyChain it = myKeyMap.map(key); it.hasNext();) {
				Object nextKey = it.next();
				if (myFactory.checkEmitter(nextKey)) {
					try {
						JETEmitter em = myFactory.acquireEmitter(nextKey);
						return em.generate(new NullProgressMonitor(), new Object[] {argument});
					} catch (NoSuchTemplateException ex) {
						traceFacility.log(new Status(Status.ERROR, pluginID, 0, "Template for key '" + nextKey + "' failed", ex));
						errors.append(formatError(ex));
						errors.append("\n");
					} catch (UnexpectedBehaviourException ex) {
						traceFacility.log(new Status(Status.ERROR, pluginID, 0, "Template for key '" + nextKey + "' failed", ex));
						errors.append(formatError(ex));
						errors.append("\n");
					}
				}
			}
			if (errors.length() == 0) {
				// TODO option silent?
				return "// no suitable template found for '" + key + "'";
			} else {
				return errors.toString();
			}
		} catch (JETException ex) {
			traceFacility.log(new Status(Status.ERROR, pluginID, 0, ex.getMessage(), ex));
			return "ERROR: " + formatError(ex);
		}
	}

	public String dispatch(Object key, Args args) {
		return dispatch(key, (Object) args);
	}

	private static String formatError(Exception ex) {
		return ex.getClass().getSimpleName() + ": " + ex.getMessage();
	}
}
@


1.2
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@@


1.1
log
@provisional framework that supports (double-)dispatch from templates to
a) avoid lengthy if instanceof elseif checks,
b) solve scope and name visibility issues when extracting common code into jetinc
@
text
@d14 1
d16 2
d19 2
d30 3
a32 1
	public DispatcherImpl(YAEmitterFactory factory) {
d34 1
d37 32
a68 2
	public String dispatch(Object arg, Object[] orginalArgs) {
		return "asdasdasd";
d72 5
a76 6
		try {
			JETEmitter em = myFactory.acquireEmitter(key);
			return em.generate(new NullProgressMonitor(), new Object[] {args});
		} catch (Exception ex) {
			return "// " + ex.getClass().getSimpleName() + ": " + ex.getMessage();
		}
@

