head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	v20061027-1200:1.3
	v20061013-1330:1.4
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.2
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.11.02.21.58.36;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.08.24.13.13.37;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.30.22.39.09;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.13.17.36.17;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import java.util.*;

public class CustomClassAttributesGenerator
{
  protected static String nl;
  public static synchronized CustomClassAttributesGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    CustomClassAttributesGenerator result = new CustomClassAttributesGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\t\t{";
  protected final String TEXT_2 = NL + "\t\t\t";
  protected final String TEXT_3 = ";";
  protected final String TEXT_4 = NL + "\t\t\t";
  protected final String TEXT_5 = ".";
  protected final String TEXT_6 = " = ";
  protected final String TEXT_7 = ";\t\t";
  protected final String TEXT_8 = NL + "\t\t\t";
  protected final String TEXT_9 = ".set";
  protected final String TEXT_10 = "(";
  protected final String TEXT_11 = ");";
  protected final String TEXT_12 = "\t";
  protected final String TEXT_13 = NL + "\t\t}";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final CustomClass instance = (CustomClass) ((Object[]) argument)[0];
//final GraphDefDispatcher dispatcher = (GraphDefDispatcher) ((Object[]) argument)[1];
final String varName = (String) ((Object[]) argument)[2];
boolean insertingArbitraryCode = false;
for (Iterator attributes = instance.getAttributes().iterator(); !insertingArbitraryCode && attributes.hasNext();){
	insertingArbitraryCode = ((CustomAttribute)attributes.next()).isMultiStatementValue();
}

    	if (insertingArbitraryCode) {
    stringBuffer.append(TEXT_1);
    	}
    
int attrIndex = 0;
for (Iterator attrs = instance.getAttributes().iterator(); attrs.hasNext(); attrIndex++){
	CustomAttribute next = (CustomAttribute) attrs.next(); 
	String varValue;
	if (next.isMultiStatementValue()){
		varValue = "attr" + attrIndex;

    stringBuffer.append(TEXT_2);
    stringBuffer.append(java.text.MessageFormat.format(next.getValue(), new Object[] {varValue}));
    stringBuffer.append(TEXT_3);
    	} else {
	 	varValue = next.getValue();
}
	if (next.isDirectAccess()) { 

    stringBuffer.append(TEXT_4);
    stringBuffer.append(varName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_6);
    stringBuffer.append(varValue);
    stringBuffer.append(TEXT_7);
    			
	} else {

    stringBuffer.append(TEXT_8);
    stringBuffer.append(varName);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(CodeGenUtil.capName(next.getName()));
    stringBuffer.append(TEXT_10);
    stringBuffer.append(varValue);
    stringBuffer.append(TEXT_11);
    	
	}

    stringBuffer.append(TEXT_12);
    
} //for 

    	if (insertingArbitraryCode) {
    stringBuffer.append(TEXT_13);
    	}
    stringBuffer.append(TEXT_14);
    stringBuffer.append(TEXT_15);
    return stringBuffer.toString();
  }
}
@


1.4
log
@[154683] mgolubev - Handle custom borders.
@
text
@@


1.3
log
@Switching to eclipse M6.
@
text
@d42 4
a45 1
final boolean hasAttributes = !instance.getAttributes().isEmpty();
d47 1
a47 1
    	if (hasAttributes) {
d90 1
a90 1
    	if (hasAttributes) {
@


1.2
log
@[mgolubev] #134097 Invalid code is generated for the node figure with XYLayout
@
text
@d37 1
a37 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.1
log
@[mgolubev] #127252 layout support
@
text
@d19 1
a19 1
  protected final String TEXT_1 = NL + "\t\t{";
d31 1
a31 1
  protected final String TEXT_13 = NL + "\t\t}" + NL;
d33 1
d42 1
d44 1
d46 1
d87 1
d89 1
d91 1
@

