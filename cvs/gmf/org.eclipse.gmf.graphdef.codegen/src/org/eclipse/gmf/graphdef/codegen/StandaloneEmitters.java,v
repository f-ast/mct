head	1.9;
access;
symbols
	v20080813-1520:1.9
	v20080807-1333:1.9
	v20080806-1520:1.9
	v20080731-1520:1.9
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.4
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080528-1052:1.9
	v20080417-1610:1.9
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080207-0207:1.9
	v20071214-1111:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070608-1300:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070518-1300:1.9
	v20070330-1300:1.8
	v20060316-0600:1.8
	v20070307-0700:1.8
	v20070228-2000:1.7
	v20070208-1800:1.6
	M4_20:1.5
	v20061214-0000:1.5
	M3_20:1.5
	v20061117-0800:1.5
	v20061027-1200:1.3
	v20061013-1330:1.4
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.9
date	2007.05.17.22.14.20;	author atikhomirov;	state Exp;
branches;
next	1.8;
commitid	640b464cd3bb4567;

1.8
date	2007.03.02.16.51.13;	author atikhomirov;	state Exp;
branches;
next	1.7;
commitid	160d45e856004567;

1.7
date	2007.02.27.15.16.34;	author atikhomirov;	state Exp;
branches;
next	1.6;
commitid	222145e44b514567;

1.6
date	2007.02.01.13.39.01;	author atikhomirov;	state Exp;
branches;
next	1.5;
commitid	26c345c1ed754567;

1.5
date	2006.11.02.21.58.37;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.08.30.15.12.12;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.18.19.12.40;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.11.19.16.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.02.13.16.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.9
log
@moving towards not using fqnswitch and java to tell draw2d figure names; let toolsmith to control what draw2d classes are being used; fqnSwitch argument replaced with simple token indicator
@
text
@/*
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - migrating JET-Xpand
 */
package org.eclipse.gmf.graphdef.codegen;

import java.net.URL;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.gmf.common.UnexpectedBehaviourException;
import org.eclipse.gmf.graphdef.codegen.StandaloneGenerator.Config;
import org.eclipse.gmf.internal.common.codegen.TextEmitter;
import org.eclipse.gmf.internal.common.codegen.XpandTextEmitter;
import org.eclipse.gmf.internal.graphdef.codegen.Activator;
import org.eclipse.gmf.internal.xpand.ResourceManager;

class StandaloneEmitters {
	private final ResourceManager myResourceManager;

	StandaloneEmitters(MapModeCodeGenStrategy mapModeStrategy, URL[] dynamicTemplates) {
		assert mapModeStrategy != null;
		myResourceManager = Activator.createResourceEngine(mapModeStrategy, dynamicTemplates);
	}
	
	public TextEmitter getBuildPropertiesEmitter() throws UnexpectedBehaviourException {
		return new XpandTextEmitter(myResourceManager, "plugin::BuildProperties::Init", getClass().getClassLoader());
	}
	
	public TextEmitter getPluginPropertiesEmitter() throws UnexpectedBehaviourException {
		return new XpandTextEmitter(myResourceManager, "plugin::PluginProperties::Init", getClass().getClassLoader()) {
			@@Override
			protected Object[] extractArguments(Object[] arguments) {
				assert arguments != null && arguments.length > 0 && arguments[0] instanceof Config;
				Config config = (Config) arguments[0];
				return new Object[] {
					config.getPluginFriendlyName(),
					config.getPluginProviderName()
				};
			}
		};
	}
	
	public TextEmitter getManifestMFEmitter() throws UnexpectedBehaviourException {
		return new XpandTextEmitter(myResourceManager, "plugin::Manifest::Init", getClass().getClassLoader()) {
			@@Override
			protected Object[] extractArguments(Object[] arguments) {
				assert arguments != null && arguments.length > 1 && arguments[0] instanceof Config && arguments[1] instanceof String[];
				Config config = (Config) arguments[0];
				List<String> exportedPackages = (config.getMainPackageName() == null || config.getMainPackageName().trim().length() == 0) ? Collections.singletonList(config.getPluginActivatorPackageName()) : Arrays.asList(config.getPluginActivatorPackageName(), config.getMainPackageName());
				List<String> referencedBundles = Arrays.asList((String[]) arguments[1]);
				return new Object[] {
					config.getPluginID(),
					config.getPluginActivatorPackageName() + '.' + config.getPluginActivatorClassName(),
					exportedPackages,
					referencedBundles
				};
			}
		};
	}
	
	public TextEmitter getPluginActivatorEmitter() throws UnexpectedBehaviourException {
		return new XpandTextEmitter(myResourceManager, "plugin::Activator::Init", getClass().getClassLoader()) {
			@@Override
			protected Object extractTarget(Object[] arguments) {
				assert arguments != null && arguments.length >= 2;
				assert arguments[2] instanceof List;
				return arguments[2];
			}
			@@Override
			protected Object[] extractArguments(Object[] arguments) {
				assert arguments != null && arguments.length > 0 && arguments[0] instanceof Config;
				Config config = (Config) arguments[0];
				return new Object[] {
					config.getPluginActivatorPackageName(),
					config.getPluginActivatorClassName(),
					config.getPluginID(),
				};
			}
		};
	}
}
@


1.8
log
@pass list of generated figures qualified names in case activator needs to reference them
@
text
@a17 1
import java.util.LinkedList;
a58 5
				List<String> requiredBundles = new LinkedList<String>();
				if (config.needsMapMode()) {
					requiredBundles.add("org.eclipse.gmf.runtime.draw2d.ui");
				}
				requiredBundles.addAll(Arrays.asList((String[]) arguments[1]));
d60 1
d65 1
a65 1
					requiredBundles,
@


1.7
log
@[170686] support dynamic templates for gmfgraph
@
text
@d79 6
d86 2
a87 2
				assert arguments != null && arguments.length > 0 && arguments[0] instanceof Object[];
				Config config = (Config) ((Object[]) arguments[0])[0];
@


1.6
log
@use common XpandTextEmitter
@
text
@d15 1
d31 1
a31 1
	StandaloneEmitters(MapModeCodeGenStrategy mapModeStrategy) {
d33 1
a33 1
		myResourceManager = Activator.createResourceEngine(mapModeStrategy);
@


1.5
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
a14 1
import java.lang.reflect.InvocationTargetException;
a18 1
import java.util.Map;
a19 1
import org.eclipse.core.runtime.IProgressMonitor;
d23 1
d25 1
a25 3
import org.eclipse.gmf.internal.xpand.BufferOutput;
import org.eclipse.gmf.internal.xpand.XpandFacade;
import org.eclipse.gmf.internal.xpand.expression.Variable;
d28 1
a28 1
	private final MapModeCodeGenStrategy myMapModeStrategy;
d31 2
a32 1
		myMapModeStrategy = mapModeStrategy;
d36 1
a36 7
		return new XpandTextEmitter(myMapModeStrategy) {
			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
				StringBuilder result = new StringBuilder();
				createEngine(result).evaluate("plugin::BuildProperties::Init", new Object(), null);
				return result.toString();
			}
		};
d40 3
a42 2
		return new XpandTextEmitter(myMapModeStrategy) {
			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
d45 1
a45 2
				StringBuilder result = new StringBuilder();
				Object[] params = new Object[] {
a48 2
				createEngine(result).evaluate("plugin::PluginProperties::Init", new Object(), params);
				return result.toString();
d54 5
a58 6
		return new XpandTextEmitter(myMapModeStrategy) {
			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
				assert arguments != null && arguments.length > 0 && arguments[0] instanceof Object[];
				Object[] actualArgs = (Object[]) arguments[0];
				assert actualArgs.length > 1 && actualArgs[0] instanceof Config && actualArgs[1] instanceof String[];
				Config config = (Config) actualArgs[0];
d63 1
a63 1
				requiredBundles.addAll(Arrays.asList((String[]) actualArgs[1]));
d65 1
a65 2
				StringBuilder result = new StringBuilder();
				Object[] params = new Object[] {
a70 2
				createEngine(result).evaluate("plugin::Manifest::Init", new Object(), params);
				return result.toString();
d76 3
a78 3
		return new XpandTextEmitter(myMapModeStrategy) {
			public String generate(IProgressMonitor monitor, Object[] arguments) throws InterruptedException, InvocationTargetException, UnexpectedBehaviourException {
				// we do not use ImportAssistant argument
d81 1
a81 2
				StringBuilder result = new StringBuilder();
				Object[] params = new Object[] {
a85 2
				createEngine(result).evaluate("plugin::Activator::Init", new Object(), params);
				return result.toString();
a88 14

	private static abstract class XpandTextEmitter implements TextEmitter {
		protected final MapModeCodeGenStrategy myMapModeStrategy;

		protected XpandTextEmitter(MapModeCodeGenStrategy mapModeStrategy) {
			myMapModeStrategy = mapModeStrategy;
		}

		protected XpandFacade createEngine(StringBuilder result) {
			final Map<String, StringBuilder> slots = Collections.emptyMap();
			final List<Variable> globals = Collections.emptyList();
			return Activator.createTemplateEngine(myMapModeStrategy, new BufferOutput(result, slots), globals);
		}
	}
@


1.4
log
@extracted caching behaviour outside from the factory - moving towards support for different template engines, #114207
@
text
@d11 1
d15 8
a22 1
import org.eclipse.core.runtime.Platform;
d24 1
a24 11
import org.eclipse.gmf.graphdef.codegen.standalone.templates.BuildPropertiesGenerator;
import org.eclipse.gmf.graphdef.codegen.standalone.templates.ManifestMFGenerator;
import org.eclipse.gmf.graphdef.codegen.standalone.templates.PluginActivatorGenerator;
import org.eclipse.gmf.graphdef.codegen.standalone.templates.PluginPropertiesGenerator;
import org.eclipse.gmf.internal.codegen.dispatch.CachingEmitterFactory;
import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactory;
import org.eclipse.gmf.internal.codegen.dispatch.EmitterFactoryImpl;
import org.eclipse.gmf.internal.codegen.dispatch.NoSuchTemplateException;
import org.eclipse.gmf.internal.codegen.dispatch.StaticTemplateRegistry;
import org.eclipse.gmf.internal.codegen.dispatch.TemplateRegistry;
import org.eclipse.gmf.internal.common.codegen.JETEmitterAdapter;
d26 4
d31 2
a32 2
public class StandaloneEmitters {
	private final EmitterFactory myFactory;
d34 2
a35 2
	public StandaloneEmitters(){
		myFactory = new CachingEmitterFactory(new EmitterFactoryImpl(getTemplatePath(), createTemplateRegistry()));
d39 7
a45 1
		return getRegistered(BuildPropertiesGenerator.class);
d49 13
a61 1
		return getRegistered(PluginPropertiesGenerator.class);
d65 23
a87 1
		return getRegistered(ManifestMFGenerator.class);
d91 15
a105 1
		return getRegistered(PluginActivatorGenerator.class);
d108 5
a112 5
	private TextEmitter getRegistered(Class key) throws UnexpectedBehaviourException {
		try {
			return new JETEmitterAdapter(myFactory.acquireEmitter(key));
		} catch (NoSuchTemplateException ex) {
			throw new UnexpectedBehaviourException(ex.getMessage(), ex);
a113 1
	}
d115 5
a119 3
	private static String[] getTemplatePath() {
		// XXX for precompiled templates we use at the moment, there's no much value 
		return new String[] { Platform.getBundle("org.eclipse.gmf.graphdef.codegen").getEntry("/templates").toString() };
a120 14

	private static TemplateRegistry createTemplateRegistry() {
		StaticTemplateRegistry result = new StaticTemplateRegistry(StandaloneEmitters.class.getClassLoader());
		registerTemplate(result, BuildPropertiesGenerator.class, "/plugin/build.propertiesjet");
		registerTemplate(result, ManifestMFGenerator.class, "/plugin/manifest.mfjet");
		registerTemplate(result, PluginPropertiesGenerator.class, "/plugin/plugin.propertiesjet");
		registerTemplate(result, PluginActivatorGenerator.class, "/plugin/plugin.javajet");
		return result;
	}
	
	private static void registerTemplate(StaticTemplateRegistry registry, Class compiled, String path){
		registry.put(compiled, path, compiled);
	}
	
@


1.3
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@d20 1
d22 1
d29 3
a31 2
public class StandaloneEmitters extends EmitterFactory {
	
d33 1
a33 1
		super(getTemplatePath(), createTemplateRegistry());
d54 1
a54 1
			return new JETEmitterAdapter(acquireEmitter(key));
@


1.2
log
@refactor exception thrown during generation. There's nothing we could do about JETException, so why treat it differently from Unexpected
@
text
@a14 1
import org.eclipse.emf.codegen.jet.JETEmitter;
d24 2
d33 1
a33 1
	public JETEmitter getBuildPropertiesEmitter() throws UnexpectedBehaviourException {
d37 1
a37 1
	public JETEmitter getPluginPropertiesEmitter() throws UnexpectedBehaviourException {
d41 1
a41 1
	public JETEmitter getManifestMFEmitter() throws UnexpectedBehaviourException {
d45 1
a45 1
	public JETEmitter getPluginActivatorEmitter() throws UnexpectedBehaviourException {
d49 1
a49 1
	private JETEmitter getRegistered(Class key) throws UnexpectedBehaviourException {
d51 1
a51 1
			return acquireEmitter(key);
@


1.1
log
@[mgolubev] #128779 generate figures as standalone plugin
#129362 - respect plug-in dependencies imposed by figure fqn switch
@
text
@a15 1
import org.eclipse.emf.codegen.jet.JETException;
d32 1
a32 1
	public JETEmitter getBuildPropertiesEmitter() throws JETException {
d36 1
a36 1
	public JETEmitter getPluginPropertiesEmitter() throws JETException {
d40 1
a40 1
	public JETEmitter getManifestMFEmitter() throws JETException {
d44 1
a44 1
	public JETEmitter getPluginActivatorEmitter() throws JETException {
d48 1
a48 1
	private JETEmitter getRegistered(Class key) throws JETException {
d52 1
a52 3
			throw new JETException(ex.getClass().getName(), ex);
		} catch (UnexpectedBehaviourException ex) {
			throw new JETException(ex.getClass().getName(), ex);
@

