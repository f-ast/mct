head	1.3;
access;
symbols
	v20080813-1520:1.3
	v20080806-1520:1.3
	v20080731-1520:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2006.02.06.22.21.42;	author atikhomirov;	state dead;
branches;
next	1.2;

1.2
date	2006.02.06.18.10.23;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.05.23.00.50;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.3
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */
package org.eclipse.gmf.graphdef.codegen;

import org.eclipse.gmf.common.codegen.ImportAssistant;
import org.eclipse.gmf.gmfgraph.Figure;
import org.eclipse.gmf.gmfgraph.util.GMFGraphSwitch;

/**
 * @@author artem
 */
public abstract class Dispatcher {

	public abstract String dispatch(Object key, Object argument);

	public abstract String dispatch(Object key, Args args);

	// TODO just keep importManager+fqnSwitch in the dispatcher (pure interface + subclass?) and shorten the list of args then
	public Args create(Figure figure, String figureVarName, ImportAssistant importManager, GMFGraphSwitch fqnSwitch) {
		return new Args(this, figure, figureVarName, importManager, fqnSwitch);
	}

	public class Args {
		private final String myFigureVarName;
		private final ImportAssistant myImportManager;
		private final GMFGraphSwitch myFqnSwitch;
		private final Dispatcher myOwner;
		private final Figure myFigure;

		public Args(Dispatcher owner, Figure figure, String figureVarName, ImportAssistant importManager, GMFGraphSwitch fqnSwitch) {
			myOwner = owner;
			myFigure = figure;
			myFigureVarName = figureVarName;
			myImportManager = importManager;
			myFqnSwitch = fqnSwitch;
		}

		public Figure getFigure() {
			return myFigure;
		}

		public String getVariableName() {
			return myFigureVarName;
		}

		public ImportAssistant getImportManager() {
			return myImportManager;
		}

		public GMFGraphSwitch getFQNSwitch() {
			return myFqnSwitch;
		}

		public Dispatcher getDispatcher() {
			return myOwner;
		}
	}
}
@


1.2
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@@


1.1
log
@provisional framework that supports (double-)dispatch from templates to
a) avoid lengthy if instanceof elseif checks,
b) solve scope and name visibility issues when extracting common code into jetinc
@
text
@d23 1
a23 1
	public abstract String dispatch(Object arg, Object[] orginalArgs);
@

