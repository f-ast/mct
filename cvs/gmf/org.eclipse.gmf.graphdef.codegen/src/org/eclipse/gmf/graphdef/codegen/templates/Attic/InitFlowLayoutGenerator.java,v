head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	v20061027-1200:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.11.02.21.58.36;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.13.17.53.19;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.16.17.23.51;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.15.14.44.35;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.graphdef.codegen.*;

public class InitFlowLayoutGenerator
{
  protected static String nl;
  public static synchronized InitFlowLayoutGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    InitFlowLayoutGenerator result = new InitFlowLayoutGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\t\t";
  protected final String TEXT_2 = ".setStretchMinorAxis(";
  protected final String TEXT_3 = ");" + NL + "\t\t";
  protected final String TEXT_4 = ".setMinorAlignment(";
  protected final String TEXT_5 = ".";
  protected final String TEXT_6 = ");";
  protected final String TEXT_7 = "\t\t" + NL + "\t\t";
  protected final String TEXT_8 = ".setSpacing(";
  protected final String TEXT_9 = ");" + NL + "\t\t";
  protected final String TEXT_10 = ".setVertical(";
  protected final String TEXT_11 = ");";
  protected final String TEXT_12 = NL + "\t\t";
  protected final String TEXT_13 = ".setMajorAlignment(";
  protected final String TEXT_14 = ".";
  protected final String TEXT_15 = ");" + NL + "\t\t";
  protected final String TEXT_16 = ".setMajorSpacing(";
  protected final String TEXT_17 = ");" + NL + "\t\t";
  protected final String TEXT_18 = ".setMinorSpacing(";
  protected final String TEXT_19 = ");" + NL + "\t\t";
  protected final String TEXT_20 = ".setHorizontal(";
  protected final String TEXT_21 = ");";
  protected final String TEXT_22 = NL + NL;
  protected final String TEXT_23 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GraphDefDispatcher.LayoutArgs argsBundle = (GraphDefDispatcher.LayoutArgs) argument;
final FlowLayout gmfLayout = (FlowLayout) argsBundle.getLayout();
final String layouterVarName = argsBundle.getManagerVariableName();
final GraphDefDispatcher dispatcher = argsBundle.getDispatcher();
final String layouterClassName = dispatcher.getFQNSwitch().get(gmfLayout, dispatcher.getImportManager());

class AlignmentConverter {
	private final String myBegin;
	private final String myCenter;
	private final String myEnd;
	
	public AlignmentConverter(String begin, String center, String end){
		myBegin = begin;
		myCenter = center;
		myEnd = end;
	}
	
	public String convert(Alignment alignment){
		if (alignment == null){
			alignment = Alignment.BEGINNING_LITERAL;
		}
		switch (alignment.getValue()){
			case Alignment.BEGINNING : 
				return myBegin;
			case Alignment.END :
				return myEnd;
			case Alignment.FILL:
			case Alignment.CENTER:
				return myCenter;
			default:
				throw new IllegalArgumentException("Unknown alignment: " + alignment);
		}
	}
}

class AlignmentFacade {
	public String convert(FlowLayout layout, Alignment alignment){
		return getConverter(layout).convert(alignment);
	}
	
	private AlignmentConverter getConverter(FlowLayout layout){
		return layout.isForceSingleLine() ? 
			new AlignmentConverter("ALIGN_TOPLEFT", "ALIGN_CENTER", "ALIGN_BOTTOMRIGHT") : 
			new AlignmentConverter("ALIGN_LEFTTOP", "ALIGN_CENTER", "ALIGN_RIGHTBOTTOM");
	}
}

final AlignmentFacade alignmentFacade = new AlignmentFacade();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(gmfLayout.isMatchMinorSize());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_4);
    stringBuffer.append(layouterClassName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(alignmentFacade.convert(gmfLayout, gmfLayout.getMinorAlignment()));
    stringBuffer.append(TEXT_6);
    
if (gmfLayout.isForceSingleLine()){

    stringBuffer.append(TEXT_7);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(gmfLayout.getMajorSpacing());
    stringBuffer.append(TEXT_9);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(gmfLayout.isVertical());
    stringBuffer.append(TEXT_11);
    
} else {

    stringBuffer.append(TEXT_12);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(layouterClassName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(alignmentFacade.convert(gmfLayout, gmfLayout.getMajorAlignment()));
    stringBuffer.append(TEXT_15);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(gmfLayout.getMajorSpacing());
    stringBuffer.append(TEXT_17);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(gmfLayout.getMinorSpacing());
    stringBuffer.append(TEXT_19);
    stringBuffer.append(layouterVarName);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(!gmfLayout.isVertical());
    stringBuffer.append(TEXT_21);
    
} 

    stringBuffer.append(TEXT_22);
    stringBuffer.append(TEXT_23);
    return stringBuffer.toString();
  }
}
@


1.4
log
@Switching to eclipse M6.
@
text
@@


1.3
log
@explicit method names for fqn switch to better reflect it's intention
@
text
@d44 1
a44 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.2
log
@[mgolubev] uncompilable code using ToolbarLayout
@
text
@d50 1
a50 1
final String layouterClassName = dispatcher.getImportManager().getImportedName((String) dispatcher.getFQNSwitch().doSwitch(gmfLayout));
@


1.1
log
@[mgolubev] #127252 layout support
@
text
@d22 10
a31 10
  protected final String TEXT_5 = ");";
  protected final String TEXT_6 = "\t\t" + NL + "\t\t";
  protected final String TEXT_7 = ".setSpacing(";
  protected final String TEXT_8 = ");" + NL + "\t\t";
  protected final String TEXT_9 = ".setVertical(";
  protected final String TEXT_10 = ");";
  protected final String TEXT_11 = NL + "\t\t";
  protected final String TEXT_12 = ".setMajorAlignment(";
  protected final String TEXT_13 = ");" + NL + "\t\t";
  protected final String TEXT_14 = ".setMajorSpacing(";
d33 1
a33 1
  protected final String TEXT_16 = ".setMinorSpacing(";
d35 6
a40 4
  protected final String TEXT_18 = ".setHorizontal(";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + NL;
  protected final String TEXT_21 = NL;
d49 2
d53 10
d69 1
a69 1
				return "ALIGN_LEFTTOP";
d71 1
a71 1
				return "ALIGN_RIGHTBOTTOM";
d74 1
a74 1
				return "ALIGN_CENTER";
d81 13
a93 1
final AlignmentConverter alignmentConverter = new AlignmentConverter();
d102 1
a102 1
    stringBuffer.append(alignmentConverter.convert(gmfLayout.getMinorAlignment()));
d104 2
d109 1
a109 1
    stringBuffer.append(TEXT_6);
d111 1
a111 1
    stringBuffer.append(TEXT_7);
d113 1
a113 1
    stringBuffer.append(TEXT_8);
d115 1
a115 1
    stringBuffer.append(TEXT_9);
d117 1
a117 1
    stringBuffer.append(TEXT_10);
d121 1
a121 1
    stringBuffer.append(TEXT_11);
a122 2
    stringBuffer.append(TEXT_12);
    stringBuffer.append(alignmentConverter.convert(gmfLayout.getMajorAlignment()));
d124 1
a124 1
    stringBuffer.append(layouterVarName);
d126 1
a126 1
    stringBuffer.append(gmfLayout.getMajorSpacing());
d130 1
a130 1
    stringBuffer.append(gmfLayout.getMinorSpacing());
d134 4
d139 1
a139 1
    stringBuffer.append(TEXT_19);
d143 2
a144 2
    stringBuffer.append(TEXT_20);
    stringBuffer.append(TEXT_21);
@

