head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	v20061027-1200:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	I20060505-1400:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.24.15.11.34;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;
import java.util.*;

public class PolylineDecorationAttrGenerator
{
  protected static String nl;
  public static synchronized PolylineDecorationAttrGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    PolylineDecorationAttrGenerator result = new PolylineDecorationAttrGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "// dispatchNext?";
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = NL + "\t\t";
  protected final String TEXT_4 = " pl = new ";
  protected final String TEXT_5 = "();";
  protected final String TEXT_6 = NL + "\t\tpl.addPoint(";
  protected final String TEXT_7 = ", ";
  protected final String TEXT_8 = ");";
  protected final String TEXT_9 = NL + "\t\t";
  protected final String TEXT_10 = ".setTemplate(pl);" + NL + "\t\t";
  protected final String TEXT_11 = ".setScale(";
  protected final String TEXT_12 = ", ";
  protected final String TEXT_13 = ");";
  protected final String TEXT_14 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GraphDefDispatcher.Args args = (GraphDefDispatcher.Args) argument;
// not PolylineDecoration, as we use same template from PolygonDecoration
final Polyline figureInstance = (Polyline) args.getFigure();
final String figureVarName = args.getVariableName();
final GraphDefDispatcher dispatcher = args.getDispatcher();
final ImportAssistant importManager = dispatcher.getImportManager();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(dispatcher.dispatch("Shape", args));
    if (!figureInstance.getTemplate().isEmpty()) {
    stringBuffer.append(TEXT_3);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.PointList"));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.PointList"));
    stringBuffer.append(TEXT_5);
    		for (Iterator pointIt = figureInstance.getTemplate().iterator(); pointIt.hasNext(); ) {
		Point p = (Point) pointIt.next();
    stringBuffer.append(TEXT_6);
    stringBuffer.append(p.getX());
    stringBuffer.append(TEXT_7);
    stringBuffer.append(p.getY());
    stringBuffer.append(TEXT_8);
    		} /*for*/ 
    stringBuffer.append(TEXT_9);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(dispatcher.DPtoLP(7));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(dispatcher.DPtoLP(3));
    stringBuffer.append(TEXT_13);
    	} /*!if getTemplate().isEmpty()*/ 
    stringBuffer.append(TEXT_14);
    return stringBuffer.toString();
  }
}
@


1.4
log
@Switching to eclipse M6.
@
text
@@


1.3
log
@[mgolubev] #129328 handle MapMode access in a variety of ways
@
text
@d37 1
a37 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d30 4
a33 2
  protected final String TEXT_11 = ".setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));";
  protected final String TEXT_12 = NL;
d68 4
d73 1
a73 1
    stringBuffer.append(TEXT_12);
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d5 1
a5 1
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d37 1
a37 1
Dispatcher.Args args = (Dispatcher.Args) argument;
d41 2
a42 2
final ImportAssistant importManager = args.getImportManager();
final Dispatcher dispatcher = args.getDispatcher();
@

