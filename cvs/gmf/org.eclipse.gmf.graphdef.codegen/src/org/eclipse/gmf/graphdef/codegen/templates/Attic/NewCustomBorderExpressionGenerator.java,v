head	1.2;
access;
symbols
	v20080813-1520:1.2
	v20080806-1520:1.2
	v20080731-1520:1.2
	v20061013-1330:1.1
	M1_20:1.1
	v20060904-1500:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.2
date	2006.11.02.21.58.36;	author atikhomirov;	state dead;
branches;
next	1.1;

1.1
date	2006.08.24.13.13.37;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.2
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.graphdef.codegen.*;

public class NewCustomBorderExpressionGenerator
{
  protected static String nl;
  public static synchronized NewCustomBorderExpressionGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NewCustomBorderExpressionGenerator result = new NewCustomBorderExpressionGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "()";
  protected final String TEXT_2 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
Object[] args = (Object[]) argument;
final CustomBorder border = (CustomBorder)args[0];
final GraphDefDispatcher dispatcher = (GraphDefDispatcher)args[1];
//final ImportAssistant importManager = dispatcher.getImportManager();

//We want NEITHER insert any names into the scope NOR produce statement. We need expression instead.
//@@see customBorderFactoryMethod.jetinc

    stringBuffer.append(dispatcher.getAuxiliaryDataStorage().getRegisteredData(border));
    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    return stringBuffer.toString();
  }
}
@


1.1
log
@[154683] mgolubev - Handle custom borders.
@
text
@@

