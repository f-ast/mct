head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20080731-1520:1.10
	R1_0_maintenance:1.10.0.2
	R1_0:1.10
	I20060203-0830:1.8
	I20060129-1145:1.8
	I20060127-0900:1.8
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.02.06.18.10.22;	author atikhomirov;	state dead;
branches;
next	1.9;

1.9
date	2006.02.04.22.34.49;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.26.12.23.29;	author ashatalin;	state Exp;
branches;
next	1.7;

1.7
date	2006.01.25.19.16.56;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.01.25.14.02.29;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.01.23.20.00.49;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.01.10.16.46.00;	author ashatalin;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.10.16.16.54;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.07.16.50.43;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.06.19.17.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.gmfgraph.util.*;
import org.eclipse.gmf.common.codegen.*;
import java.util.*;

public class DecorationFigureGenerator
{
  protected static String nl;
  public static synchronized DecorationFigureGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    DecorationFigureGenerator result = new DecorationFigureGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "class ";
  protected final String TEXT_3 = " extends ";
  protected final String TEXT_4 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "() {";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = "\t\t";
  protected final String TEXT_8 = " ";
  protected final String TEXT_9 = " = new ";
  protected final String TEXT_10 = "();";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t\t";
  protected final String TEXT_13 = ".setForegroundColor(";
  protected final String TEXT_14 = "new org.eclipse.swt.graphics.Color(null, ";
  protected final String TEXT_15 = ", ";
  protected final String TEXT_16 = ", ";
  protected final String TEXT_17 = ")";
  protected final String TEXT_18 = "org.eclipse.draw2d.ColorConstants.";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = ".setBackgroundColor(";
  protected final String TEXT_22 = "new org.eclipse.swt.graphics.Color(null, ";
  protected final String TEXT_23 = ", ";
  protected final String TEXT_24 = ", ";
  protected final String TEXT_25 = ")";
  protected final String TEXT_26 = "org.eclipse.draw2d.ColorConstants.";
  protected final String TEXT_27 = ");";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = ".setPreferredSize(getMapMode().DPtoLP(";
  protected final String TEXT_30 = "), getMapMode().DPtoLP(";
  protected final String TEXT_31 = "));";
  protected final String TEXT_32 = NL + "\t\torg.eclipse.draw2d.geometry.PointList pl = new org.eclipse.draw2d.geometry.PointList();";
  protected final String TEXT_33 = NL + "\t\tpl.addPoint(";
  protected final String TEXT_34 = ", ";
  protected final String TEXT_35 = ");";
  protected final String TEXT_36 = NL + "\t\t";
  protected final String TEXT_37 = ".setTemplate(pl);";
  protected final String TEXT_38 = NL + "\t\t";
  protected final String TEXT_39 = ".setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));";
  protected final String TEXT_40 = NL + "\t\tsetScale(";
  protected final String TEXT_41 = ", ";
  protected final String TEXT_42 = ");";
  protected final String TEXT_43 = NL + "\t}" + NL + "}";

  public String generate(Object argument)
  {
    StringBuffer stringBuffer = new StringBuffer();
    
Object[] args = (Object[]) argument;
DecorationFigure figure = (DecorationFigure) args[0];
final ImportAssistant importManager = (ImportAssistant) args[1];
assert false == figure instanceof CustomFigure;
final Point scale;
scale = null; //XXX
final GMFGraphSwitch fqnSwitch = new FigureQualifiedNameSwitch();

    stringBuffer.append(TEXT_1);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(figure.getName());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(importManager.getImportedName((String) fqnSwitch.doSwitch(figure)));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(figure.getName());
    stringBuffer.append(TEXT_5);
    
DecorationFigure df = figure;
String decFigVarName = "this";
    stringBuffer.append(TEXT_6);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(fqnSwitch.doSwitch(df));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(decFigVarName);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(fqnSwitch.doSwitch(df));
    stringBuffer.append(TEXT_10);
      { // scope
Figure figureInstance = df;
String figureVarName = decFigVarName;

    stringBuffer.append(TEXT_11);
    Color colorVal;
if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor())) {
		colorVal = figureInstance.getForegroundColor();
    stringBuffer.append(TEXT_12);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_13);
    if (colorVal instanceof RGBColor) {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(((RGBColor) colorVal).getRed());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(((RGBColor) colorVal).getGreen());
    stringBuffer.append(TEXT_16);
    stringBuffer.append(((RGBColor) colorVal).getBlue());
    stringBuffer.append(TEXT_17);
    } else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(TEXT_18);
    stringBuffer.append(((ConstantColor) colorVal).getValue().getLiteral());
    }
    stringBuffer.append(TEXT_19);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor())) {
		colorVal = figureInstance.getBackgroundColor();
    stringBuffer.append(TEXT_20);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_21);
    if (colorVal instanceof RGBColor) {
    stringBuffer.append(TEXT_22);
    stringBuffer.append(((RGBColor) colorVal).getRed());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(((RGBColor) colorVal).getGreen());
    stringBuffer.append(TEXT_24);
    stringBuffer.append(((RGBColor) colorVal).getBlue());
    stringBuffer.append(TEXT_25);
    } else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(TEXT_26);
    stringBuffer.append(((ConstantColor) colorVal).getValue().getLiteral());
    }
    stringBuffer.append(TEXT_27);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize())) {
		Dimension d = figureInstance.getPreferredSize();
    stringBuffer.append(TEXT_28);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(d.getDx());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(d.getDy());
    stringBuffer.append(TEXT_31);
    }
    } // scope 
     /*include FigureChildren*/ 
    
if ((df instanceof PolylineDecoration || df instanceof PolygonDecoration)) {
	if (!((Polyline) df).getTemplate().isEmpty()) {

    stringBuffer.append(TEXT_32);
    		for (Iterator pointIt = ((Polyline) df).getTemplate().iterator(); pointIt.hasNext(); ) {
		Point p = (Point) pointIt.next();
    stringBuffer.append(TEXT_33);
    stringBuffer.append(p.getX());
    stringBuffer.append(TEXT_34);
    stringBuffer.append(p.getY());
    stringBuffer.append(TEXT_35);
    		} /*for*/ 
    stringBuffer.append(TEXT_36);
    stringBuffer.append(decFigVarName);
    stringBuffer.append(TEXT_37);
    	} /*!if getTemplate().isEmpty()*/ 
    stringBuffer.append(TEXT_38);
    stringBuffer.append(decFigVarName);
    stringBuffer.append(TEXT_39);
    } /*if instanceof */ 
    if (scale != null) {
    stringBuffer.append(TEXT_40);
    stringBuffer.append(scale.getX());
    stringBuffer.append(TEXT_41);
    stringBuffer.append(scale.getY());
    stringBuffer.append(TEXT_42);
    }
    stringBuffer.append(TEXT_43);
    importManager.emitSortedImports();
    return stringBuffer.toString();
  }
}
@


1.9
log
@provide option to use importManager
@
text
@@


1.8
log
@Correcting color-relative file names
@
text
@d5 1
d20 14
a33 14
  protected final String TEXT_1 = NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "class ";
  protected final String TEXT_2 = " extends ";
  protected final String TEXT_3 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_4 = "() {";
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = "\t\t";
  protected final String TEXT_7 = " ";
  protected final String TEXT_8 = " = new ";
  protected final String TEXT_9 = "();";
  protected final String TEXT_10 = NL;
  protected final String TEXT_11 = NL + "\t\t";
  protected final String TEXT_12 = ".setForegroundColor(";
  protected final String TEXT_13 = "new org.eclipse.swt.graphics.Color(null, ";
  protected final String TEXT_14 = ", ";
d35 7
a41 7
  protected final String TEXT_16 = ")";
  protected final String TEXT_17 = "org.eclipse.draw2d.ColorConstants.";
  protected final String TEXT_18 = ");";
  protected final String TEXT_19 = NL + "\t\t";
  protected final String TEXT_20 = ".setBackgroundColor(";
  protected final String TEXT_21 = "new org.eclipse.swt.graphics.Color(null, ";
  protected final String TEXT_22 = ", ";
d43 20
a62 20
  protected final String TEXT_24 = ")";
  protected final String TEXT_25 = "org.eclipse.draw2d.ColorConstants.";
  protected final String TEXT_26 = ");";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = ".setPreferredSize(getMapMode().DPtoLP(";
  protected final String TEXT_29 = "), getMapMode().DPtoLP(";
  protected final String TEXT_30 = "));";
  protected final String TEXT_31 = NL + "\t\torg.eclipse.draw2d.geometry.PointList pl = new org.eclipse.draw2d.geometry.PointList();";
  protected final String TEXT_32 = NL + "\t\tpl.addPoint(";
  protected final String TEXT_33 = ", ";
  protected final String TEXT_34 = ");";
  protected final String TEXT_35 = NL + "\t\t";
  protected final String TEXT_36 = ".setTemplate(pl);";
  protected final String TEXT_37 = NL + "\t\t";
  protected final String TEXT_38 = ".setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));";
  protected final String TEXT_39 = NL + "\t\tsetScale(";
  protected final String TEXT_40 = ", ";
  protected final String TEXT_41 = ");";
  protected final String TEXT_42 = NL + "\t}" + NL + "}";
  protected final String TEXT_43 = NL;
d68 3
a70 1
DecorationFigure figure = (DecorationFigure) argument;
d77 2
a79 2
    stringBuffer.append(TEXT_2);
    stringBuffer.append(fqnSwitch.doSwitch(figure));
d81 2
d84 1
a84 1
    stringBuffer.append(TEXT_4);
a87 1
    stringBuffer.append(TEXT_5);
d89 1
d91 1
a91 1
    stringBuffer.append(TEXT_7);
d93 1
a93 1
    stringBuffer.append(TEXT_8);
d95 1
a95 1
    stringBuffer.append(TEXT_9);
d100 1
a100 1
    stringBuffer.append(TEXT_10);
d104 1
a104 1
    stringBuffer.append(TEXT_11);
d106 1
a106 1
    stringBuffer.append(TEXT_12);
d108 1
a108 1
    stringBuffer.append(TEXT_13);
d110 1
a110 1
    stringBuffer.append(TEXT_14);
d112 1
a112 1
    stringBuffer.append(TEXT_15);
d114 1
a114 1
    stringBuffer.append(TEXT_16);
d116 1
a116 1
    stringBuffer.append(TEXT_17);
d119 1
a119 1
    stringBuffer.append(TEXT_18);
d122 1
a122 1
    stringBuffer.append(TEXT_19);
d124 1
a124 1
    stringBuffer.append(TEXT_20);
d126 1
a126 1
    stringBuffer.append(TEXT_21);
d128 1
a128 1
    stringBuffer.append(TEXT_22);
d130 1
a130 1
    stringBuffer.append(TEXT_23);
d132 1
a132 1
    stringBuffer.append(TEXT_24);
d134 1
a134 1
    stringBuffer.append(TEXT_25);
d137 1
a137 1
    stringBuffer.append(TEXT_26);
d140 1
a140 1
    stringBuffer.append(TEXT_27);
d142 1
a142 1
    stringBuffer.append(TEXT_28);
d144 1
a144 1
    stringBuffer.append(TEXT_29);
d146 1
a146 1
    stringBuffer.append(TEXT_30);
d154 1
a154 1
    stringBuffer.append(TEXT_31);
d157 1
a157 1
    stringBuffer.append(TEXT_32);
d159 1
a159 1
    stringBuffer.append(TEXT_33);
d161 1
a161 1
    stringBuffer.append(TEXT_34);
d163 1
a163 1
    stringBuffer.append(TEXT_35);
d165 1
a165 1
    stringBuffer.append(TEXT_36);
d167 1
a167 1
    stringBuffer.append(TEXT_37);
d169 1
a169 1
    stringBuffer.append(TEXT_38);
d172 1
a172 1
    stringBuffer.append(TEXT_39);
d174 1
a174 1
    stringBuffer.append(TEXT_40);
d176 1
a176 1
    stringBuffer.append(TEXT_41);
a177 1
    stringBuffer.append(TEXT_42);
d179 1
@


1.7
log
@support figure's preferred size
@
text
@d31 1
a31 1
  protected final String TEXT_13 = "new Color(null, ";
d35 1
a35 1
  protected final String TEXT_17 = "ColorConstants.";
d39 1
a39 1
  protected final String TEXT_21 = "new Color(null, ";
d43 1
a43 1
  protected final String TEXT_25 = "ColorConstants.";
@


1.6
log
@support Figure.color attributes
@
text
@d45 17
a61 13
  protected final String TEXT_27 = NL + "\t\torg.eclipse.draw2d.geometry.PointList pl = new org.eclipse.draw2d.geometry.PointList();";
  protected final String TEXT_28 = NL + "\t\tpl.addPoint(";
  protected final String TEXT_29 = ", ";
  protected final String TEXT_30 = ");";
  protected final String TEXT_31 = NL + "\t\t";
  protected final String TEXT_32 = ".setTemplate(pl);";
  protected final String TEXT_33 = NL + "\t\t";
  protected final String TEXT_34 = ".setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));";
  protected final String TEXT_35 = NL + "\t\tsetScale(";
  protected final String TEXT_36 = ", ";
  protected final String TEXT_37 = ");";
  protected final String TEXT_38 = NL + "\t}" + NL + "}";
  protected final String TEXT_39 = NL;
d133 9
d149 1
a149 1
    stringBuffer.append(TEXT_27);
d152 1
a152 1
    stringBuffer.append(TEXT_28);
d154 1
a154 1
    stringBuffer.append(TEXT_29);
d156 1
a156 1
    stringBuffer.append(TEXT_30);
d158 1
a158 1
    stringBuffer.append(TEXT_31);
d160 1
a160 1
    stringBuffer.append(TEXT_32);
d162 1
a162 1
    stringBuffer.append(TEXT_33);
d164 1
a164 1
    stringBuffer.append(TEXT_34);
d167 1
a167 1
    stringBuffer.append(TEXT_35);
d169 1
a169 1
    stringBuffer.append(TEXT_36);
d171 1
a171 1
    stringBuffer.append(TEXT_37);
d173 2
a174 2
    stringBuffer.append(TEXT_38);
    stringBuffer.append(TEXT_39);
@


1.5
log
@- Generating figures for Child node
- Transforming coordinates for rounded rectangles
@
text
@d29 26
a54 26
  protected final String TEXT_11 = NL + "\t\torg.eclipse.draw2d.geometry.PointList pl = new org.eclipse.draw2d.geometry.PointList();";
  protected final String TEXT_12 = NL + "\t\tpl.addPoint(";
  protected final String TEXT_13 = ", ";
  protected final String TEXT_14 = ");";
  protected final String TEXT_15 = NL + "\t\t";
  protected final String TEXT_16 = ".setTemplate(pl);";
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = ".setScale(getMapMode().DPtoLP(7), getMapMode().DPtoLP(3));";
  protected final String TEXT_19 = NL + "\t\tsetScale(";
  protected final String TEXT_20 = ", ";
  protected final String TEXT_21 = ");";
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = ".setFill(";
  protected final String TEXT_25 = ");";
  protected final String TEXT_26 = NL + "\t\t";
  protected final String TEXT_27 = ".setOutline(";
  protected final String TEXT_28 = ");";
  protected final String TEXT_29 = NL + "\t\t";
  protected final String TEXT_30 = ".setLineWidth(";
  protected final String TEXT_31 = ");";
  protected final String TEXT_32 = NL + "\t\t";
  protected final String TEXT_33 = ".setLineStyle(org.eclipse.draw2d.Graphics.";
  protected final String TEXT_34 = ");";
  protected final String TEXT_35 = NL + "\t\t";
  protected final String TEXT_36 = ".setFillXOR(";
d56 2
a57 13
  protected final String TEXT_38 = NL + "\t\t";
  protected final String TEXT_39 = ".setOutlineXOR(";
  protected final String TEXT_40 = ");";
  protected final String TEXT_41 = NL + "\t\t";
  protected final String TEXT_42 = ".addPoint(new org.eclipse.draw2d.geometry.Point(";
  protected final String TEXT_43 = ", ";
  protected final String TEXT_44 = "));";
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = ".setCornerDimensions(new org.eclipse.draw2d.geometry.Dimension(getMapMode().DPtoLP(";
  protected final String TEXT_47 = "), getMapMode().DPtoLP(";
  protected final String TEXT_48 = ")));";
  protected final String TEXT_49 = NL + "\t}" + NL + "}";
  protected final String TEXT_50 = NL;
d87 4
d92 3
a94 5
     /*include FigureChildren*/ 
    
if ((df instanceof PolylineDecoration || df instanceof PolygonDecoration)) {
	if (!((Polyline) df).getTemplate().isEmpty()) {

d96 1
a96 2
    		for (Iterator pointIt = ((Polyline) df).getTemplate().iterator(); pointIt.hasNext(); ) {
		Point p = (Point) pointIt.next();
d98 1
a98 1
    stringBuffer.append(p.getX());
d100 1
a100 1
    stringBuffer.append(p.getY());
d102 1
a102 1
    		} /*for*/ 
d104 1
a104 1
    stringBuffer.append(decFigVarName);
d106 1
a106 1
    	} /*!if getTemplate().isEmpty()*/ 
d108 2
a109 1
    stringBuffer.append(decFigVarName);
d111 2
a112 2
    } /*if instanceof */ 
    if (scale != null) {
d114 1
a114 1
    stringBuffer.append(scale.getX());
d116 1
a116 1
    stringBuffer.append(scale.getY());
d118 1
a118 5
    }
    
Shape shapeFigure = (Shape) figure;
String shapeVarName = "this";

d120 1
a120 4
    
// PERHAPS, do this with reflection?

    if (shapeFigure.eIsSet(GMFGraphPackage.eINSTANCE.getShape_Fill())) {
d122 1
a122 1
    stringBuffer.append(shapeVarName);
d124 1
a124 1
    stringBuffer.append(shapeFigure.isFill());
d126 2
a127 1
    } if (shapeFigure.eIsSet(GMFGraphPackage.eINSTANCE.getShape_Outline())) {
d129 7
a135 1
    stringBuffer.append(shapeVarName);
d137 2
a138 1
    stringBuffer.append(shapeFigure.isOutline());
d140 1
a140 1
    } if (shapeFigure.eIsSet(GMFGraphPackage.eINSTANCE.getShape_LineWidth())) {
d142 1
a142 1
    stringBuffer.append(shapeVarName);
d144 1
a144 1
    stringBuffer.append(shapeFigure.getLineWidth());
d146 1
a146 1
    } if (shapeFigure.eIsSet(GMFGraphPackage.eINSTANCE.getShape_LineKind())) {
d148 1
a148 1
    stringBuffer.append(shapeVarName);
d150 1
a150 1
    stringBuffer.append(shapeFigure.getLineKind().getName());
d152 2
a153 1
    } if (shapeFigure.eIsSet(GMFGraphPackage.eINSTANCE.getShape_XorFill())) {
d155 1
a155 1
    stringBuffer.append(shapeVarName);
d157 1
a157 1
    stringBuffer.append(shapeFigure.isXorFill());
d159 1
a159 1
    } if (shapeFigure.eIsSet(GMFGraphPackage.eINSTANCE.getShape_XorOutline())) {
a160 1
    stringBuffer.append(shapeVarName);
a161 25
    stringBuffer.append(shapeFigure.isXorOutline());
    stringBuffer.append(TEXT_40);
    } if (shapeFigure instanceof Polyline && !((Polyline) shapeFigure).getTemplate().isEmpty()) {
	for (Iterator pointIt = ((Polyline) shapeFigure).getTemplate().iterator(); pointIt.hasNext(); ) {
		Point p = (Point) pointIt.next();
    stringBuffer.append(TEXT_41);
    stringBuffer.append(shapeVarName);
    stringBuffer.append(TEXT_42);
    stringBuffer.append(p.getX());
    stringBuffer.append(TEXT_43);
    stringBuffer.append(p.getY());
    stringBuffer.append(TEXT_44);
    }
    } else if (shapeFigure instanceof RoundedRectangle) {
		RoundedRectangle rrFigure = (RoundedRectangle) shapeFigure;
    stringBuffer.append(TEXT_45);
    stringBuffer.append(shapeVarName);
    stringBuffer.append(TEXT_46);
    stringBuffer.append(rrFigure.getCornerWidth());
    stringBuffer.append(TEXT_47);
    stringBuffer.append(rrFigure.getCornerHeight());
    stringBuffer.append(TEXT_48);
    }
    stringBuffer.append(TEXT_49);
    stringBuffer.append(TEXT_50);
@


1.4
log
@Setting scale only for Polyline & Polygon decorations.
@
text
@d64 3
a66 3
  protected final String TEXT_46 = ".setCornerDimensions(new org.eclipse.draw2d.geometry.Dimension(";
  protected final String TEXT_47 = ", ";
  protected final String TEXT_48 = "));";
@


1.3
log
@As a part of implementstion
#114178,114179
"Shortcutting" diagram elements.
@
text
@d100 4
a103 1
    if ((df instanceof PolylineDecoration || df instanceof PolygonDecoration) && !((Polyline) df).getTemplate().isEmpty()) {
d105 1
a105 1
    	for (Iterator pointIt = ((Polyline) df).getTemplate().iterator(); pointIt.hasNext(); ) {
d112 1
a112 1
    } /*for*/ 
d116 1
a116 1
    } /*if instanceof */ 
d120 1
@


1.2
log
@@@generated comments ws added
@
text
@d35 34
a68 32
  protected final String TEXT_17 = NL + "\t\tsetScale(";
  protected final String TEXT_18 = ", ";
  protected final String TEXT_19 = ");";
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = NL + "\t\t";
  protected final String TEXT_22 = ".setFill(";
  protected final String TEXT_23 = ");";
  protected final String TEXT_24 = NL + "\t\t";
  protected final String TEXT_25 = ".setOutline(";
  protected final String TEXT_26 = ");";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = ".setLineWidth(";
  protected final String TEXT_29 = ");";
  protected final String TEXT_30 = NL + "\t\t";
  protected final String TEXT_31 = ".setLineStyle(org.eclipse.draw2d.Graphics.";
  protected final String TEXT_32 = ");";
  protected final String TEXT_33 = NL + "\t\t";
  protected final String TEXT_34 = ".setFillXOR(";
  protected final String TEXT_35 = ");";
  protected final String TEXT_36 = NL + "\t\t";
  protected final String TEXT_37 = ".setOutlineXOR(";
  protected final String TEXT_38 = ");";
  protected final String TEXT_39 = NL + "\t\t";
  protected final String TEXT_40 = ".addPoint(new org.eclipse.draw2d.geometry.Point(";
  protected final String TEXT_41 = ", ";
  protected final String TEXT_42 = "));";
  protected final String TEXT_43 = NL + "\t\t";
  protected final String TEXT_44 = ".setCornerDimensions(new org.eclipse.draw2d.geometry.Dimension(";
  protected final String TEXT_45 = ", ";
  protected final String TEXT_46 = "));";
  protected final String TEXT_47 = NL + "\t}" + NL + "}";
  protected final String TEXT_48 = NL;
d114 3
d118 1
a118 1
    stringBuffer.append(TEXT_17);
d120 1
a120 1
    stringBuffer.append(TEXT_18);
d122 1
a122 1
    stringBuffer.append(TEXT_19);
d128 1
a128 1
    stringBuffer.append(TEXT_20);
d133 1
a133 1
    stringBuffer.append(TEXT_21);
d135 1
a135 1
    stringBuffer.append(TEXT_22);
d137 1
a137 1
    stringBuffer.append(TEXT_23);
d139 1
a139 1
    stringBuffer.append(TEXT_24);
d141 1
a141 1
    stringBuffer.append(TEXT_25);
d143 1
a143 1
    stringBuffer.append(TEXT_26);
d145 1
a145 1
    stringBuffer.append(TEXT_27);
d147 1
a147 1
    stringBuffer.append(TEXT_28);
d149 1
a149 1
    stringBuffer.append(TEXT_29);
d151 1
a151 1
    stringBuffer.append(TEXT_30);
d153 1
a153 1
    stringBuffer.append(TEXT_31);
d155 1
a155 1
    stringBuffer.append(TEXT_32);
d157 1
a157 1
    stringBuffer.append(TEXT_33);
d159 1
a159 1
    stringBuffer.append(TEXT_34);
d161 1
a161 1
    stringBuffer.append(TEXT_35);
d163 1
a163 1
    stringBuffer.append(TEXT_36);
d165 1
a165 1
    stringBuffer.append(TEXT_37);
d167 1
a167 1
    stringBuffer.append(TEXT_38);
d171 1
a171 1
    stringBuffer.append(TEXT_39);
d173 1
a173 1
    stringBuffer.append(TEXT_40);
d175 1
a175 1
    stringBuffer.append(TEXT_41);
d177 1
a177 1
    stringBuffer.append(TEXT_42);
d181 1
a181 1
    stringBuffer.append(TEXT_43);
d183 1
a183 1
    stringBuffer.append(TEXT_44);
d185 1
a185 1
    stringBuffer.append(TEXT_45);
d187 1
a187 1
    stringBuffer.append(TEXT_46);
d189 2
a190 2
    stringBuffer.append(TEXT_47);
    stringBuffer.append(TEXT_48);
@


1.1
log
@ some templates to support #114177 (graphical definition model) - with GEF IFigure code as an outcome
@
text
@d19 1
a19 1
  protected final String TEXT_1 = NL + "class ";
d21 1
a21 1
  protected final String TEXT_3 = " {" + NL + "" + NL + "\tpublic ";
@

