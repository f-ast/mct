head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	v20061027-1200:1.3
	v20061013-1330:1.4
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	I20060505-1400:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.07.24.17.38.38;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.06.26.16.49.27;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.31.18.08.35;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.5
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.graphdef.codegen.*;
import org.eclipse.gmf.common.codegen.ImportAssistant;

public class NewLineBorderExpressionGenerator
{
  protected static String nl;
  public static synchronized NewLineBorderExpressionGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    NewLineBorderExpressionGenerator result = new NewLineBorderExpressionGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "new ";
  protected final String TEXT_2 = "(";
  protected final String TEXT_3 = NL + ", ";
  protected final String TEXT_4 = ")";
  protected final String TEXT_5 = NL + "new ";
  protected final String TEXT_6 = "(";
  protected final String TEXT_7 = NL + ")";
  protected final String TEXT_8 = NL + "new ";
  protected final String TEXT_9 = "(";
  protected final String TEXT_10 = ")";
  protected final String TEXT_11 = NL + "new ";
  protected final String TEXT_12 = "()";
  protected final String TEXT_13 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
Object[] args = (Object[]) argument;
final LineBorder border = (LineBorder)args[0];
final GraphDefDispatcher dispatcher = (GraphDefDispatcher)args[1];
final ImportAssistant importManager = dispatcher.getImportManager();

//We do not want to insert any names into the scope. 
//We want to provide EXPRESSION instead of statement

    
	String borderClazz = importManager.getImportedName("org.eclipse.draw2d.LineBorder");
	boolean hasColor = border.eIsSet(GMFGraphPackage.eINSTANCE.getLineBorder_Color());
	boolean hasWidth = border.eIsSet(GMFGraphPackage.eINSTANCE.getLineBorder_Width());
	Color colorVal = (hasColor) ? border.getColor() : null;
	String colorName = (hasColor) ? "BORDER" : null;
	if (hasColor && hasWidth){

    stringBuffer.append(TEXT_1);
    stringBuffer.append(borderClazz);
    stringBuffer.append(TEXT_2);
    
//input: [oeg].gmfgraph.Color colorVal
//input: String colorName
//input: [oeg].common.codegen.ImportAssistant importManager 
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher

	if (colorVal instanceof RGBColor) {
		String staticFieldType = importManager.getImportedName("org.eclipse.swt.graphics.Color");
		String staticFieldName = (colorName == null) ? "COLOR" : colorName;
		String staticFieldValue = "new " + staticFieldType + "(null, " + ((RGBColor)colorVal).getRed() + ", " + ((RGBColor)colorVal).getGreen() + ", " + ((RGBColor)colorVal).getBlue() + ")";

    stringBuffer.append(dispatcher.getStaticFieldsManager().addStaticField(staticFieldType, staticFieldName, staticFieldValue));
    	} else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants") + "." + ((ConstantColor) colorVal).getValue().getLiteral());
    	} else {
		throw new IllegalStateException("Unknown color: " + colorVal);
	}

    stringBuffer.append(TEXT_3);
    stringBuffer.append(dispatcher.DPtoLP(border.getWidth()));
    stringBuffer.append(TEXT_4);
    
	} else if (hasColor && !hasWidth) {

    stringBuffer.append(TEXT_5);
    stringBuffer.append(borderClazz);
    stringBuffer.append(TEXT_6);
    
//input: [oeg].gmfgraph.Color colorVal
//input: String colorName
//input: [oeg].common.codegen.ImportAssistant importManager 
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher

	if (colorVal instanceof RGBColor) {
		String staticFieldType = importManager.getImportedName("org.eclipse.swt.graphics.Color");
		String staticFieldName = (colorName == null) ? "COLOR" : colorName;
		String staticFieldValue = "new " + staticFieldType + "(null, " + ((RGBColor)colorVal).getRed() + ", " + ((RGBColor)colorVal).getGreen() + ", " + ((RGBColor)colorVal).getBlue() + ")";

    stringBuffer.append(dispatcher.getStaticFieldsManager().addStaticField(staticFieldType, staticFieldName, staticFieldValue));
    	} else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants") + "." + ((ConstantColor) colorVal).getValue().getLiteral());
    	} else {
		throw new IllegalStateException("Unknown color: " + colorVal);
	}

    stringBuffer.append(TEXT_7);
    
	} else if (!hasColor && hasWidth){

    stringBuffer.append(TEXT_8);
    stringBuffer.append(borderClazz);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(dispatcher.DPtoLP(border.getWidth()));
    stringBuffer.append(TEXT_10);
    
	} else {

    stringBuffer.append(TEXT_11);
    stringBuffer.append(borderClazz);
    stringBuffer.append(TEXT_12);
    
	} 

    stringBuffer.append(TEXT_13);
    return stringBuffer.toString();
  }
}
@


1.4
log
@make generated code look more nice - for mgolubev
@
text
@@


1.3
log
@[mgolubev] #148402 Do not create unlimited number of font/color resources.
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + NL + ", ";
d25 1
a25 1
  protected final String TEXT_7 = NL + NL + ")";
@


1.2
log
@Switching to eclipse M6.
@
text
@d21 7
a27 7
  protected final String TEXT_3 = "new ";
  protected final String TEXT_4 = "(null, ";
  protected final String TEXT_5 = ", ";
  protected final String TEXT_6 = ", ";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = ".";
  protected final String TEXT_9 = ", ";
d30 2
a31 14
  protected final String TEXT_12 = "(";
  protected final String TEXT_13 = "new ";
  protected final String TEXT_14 = "(null, ";
  protected final String TEXT_15 = ", ";
  protected final String TEXT_16 = ", ";
  protected final String TEXT_17 = ")";
  protected final String TEXT_18 = ".";
  protected final String TEXT_19 = ")";
  protected final String TEXT_20 = NL + "new ";
  protected final String TEXT_21 = "(";
  protected final String TEXT_22 = ")";
  protected final String TEXT_23 = NL + "new ";
  protected final String TEXT_24 = "()";
  protected final String TEXT_25 = NL;
d50 1
d56 18
a73 1
    if (colorVal instanceof RGBColor) {
d75 1
a75 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d77 3
a79 1
    stringBuffer.append(((RGBColor) colorVal).getRed());
d81 1
a81 1
    stringBuffer.append(((RGBColor) colorVal).getGreen());
a82 10
    stringBuffer.append(((RGBColor) colorVal).getBlue());
    stringBuffer.append(TEXT_7);
    } else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(((ConstantColor) colorVal).getValue().getLiteral());
    }
    stringBuffer.append(TEXT_9);
    stringBuffer.append(dispatcher.DPtoLP(border.getWidth()));
    stringBuffer.append(TEXT_10);
d84 16
a99 1
	} else if (hasColor && !hasWidth) {
d101 1
a101 19
    stringBuffer.append(TEXT_11);
    stringBuffer.append(borderClazz);
    stringBuffer.append(TEXT_12);
    if (colorVal instanceof RGBColor) {
    stringBuffer.append(TEXT_13);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(((RGBColor) colorVal).getRed());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(((RGBColor) colorVal).getGreen());
    stringBuffer.append(TEXT_16);
    stringBuffer.append(((RGBColor) colorVal).getBlue());
    stringBuffer.append(TEXT_17);
    } else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(((ConstantColor) colorVal).getValue().getLiteral());
    }
    stringBuffer.append(TEXT_19);
d105 1
a105 1
    stringBuffer.append(TEXT_20);
d107 1
a107 1
    stringBuffer.append(TEXT_21);
d109 1
a109 1
    stringBuffer.append(TEXT_22);
d113 1
a113 1
    stringBuffer.append(TEXT_23);
d115 1
a115 1
    stringBuffer.append(TEXT_24);
d119 1
a119 1
    stringBuffer.append(TEXT_25);
@


1.1
log
@[mgolubev] 134249 Generate all Figure/Shape properties
@
text
@d47 1
a47 1
    StringBuffer stringBuffer = new StringBuffer();
@

