head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20080731-1520:1.10
	v20061027-1200:1.9
	v20061013-1330:1.9
	v20060925-1700:1.9
	v20060919-0800:1.9
	M1_20:1.9
	v20060904-1500:1.9
	v20060713-1700:1.9
	R1_0_maintenance:1.9.0.2
	R1_0:1.9
	v20060627-1200:1.9
	v20060626-1420:1.9
	v20060616-1200:1.9
	v20060531-1730:1.9
	v20060530-1930:1.9
	v20060526-1200:1.9
	v20060519-1300:1.8
	v20060519-0800:1.8
	I20060505-1400:1.8
	I20060424-0500:1.7
	I20060424-0300:1.7
	M6_10:1.7
	I20060407-1200:1.6
	I20060331-1000:1.5
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.9;

1.9
date	2006.05.25.14.06.33;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.05.02.11.44.18;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.04.14.14.37.44;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.30.22.39.09;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.15.14.44.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.17.36.17;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.graphdef.codegen.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.gmfgraph.util.*;
import org.eclipse.emf.codegen.util.CodeGenUtil;
import java.util.*;

public class FigureChildrenGenerator
{
  protected static String nl;
  public static synchronized FigureChildrenGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    FigureChildrenGenerator result = new FigureChildrenGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void createContents(){";
  protected final String TEXT_2 = NL + "\t\t";
  protected final String TEXT_3 = NL + "\t\tsetFigure";
  protected final String TEXT_4 = "(";
  protected final String TEXT_5 = ");";
  protected final String TEXT_6 = NL + "\t\t";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = ".add(";
  protected final String TEXT_9 = ", ";
  protected final String TEXT_10 = ");";
  protected final String TEXT_11 = NL + "\t}" + NL + "\t";
  protected final String TEXT_12 = NL + "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_13 = " f";
  protected final String TEXT_14 = "; " + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_15 = " ";
  protected final String TEXT_16 = "() {" + NL + "\t\treturn f";
  protected final String TEXT_17 = ";" + NL + "\t}" + NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate void setFigure";
  protected final String TEXT_18 = "(";
  protected final String TEXT_19 = " fig){" + NL + "\t\tf";
  protected final String TEXT_20 = " = fig;" + NL + "\t}" + NL;
  protected final String TEXT_21 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GraphDefDispatcher.LayoutArgs parentArgs = (GraphDefDispatcher.LayoutArgs) argument;
final Figure root = parentArgs.getFigure();
final GraphDefDispatcher dispatcher = parentArgs.getDispatcher();
final ImportAssistant importManager = dispatcher.getImportManager();

final List/*<Figure>*/ fieldsRequired = new LinkedList/*<Figure>*/();
final Stack/*GraphDefDispatcher.LayoutArgs*/ contextStack = new Stack/*GraphDefDispatcher.LayoutArgs*/();
final LinkedList queue = new LinkedList();
final Object marker = new Object();
final NamingStrategy namingStrategy = NamingStrategy.INSTANCE;

class FieldSupport {
	private final Figure myRoot;

	public FieldSupport(Figure root){
		myRoot = root;
	}
	
	public boolean isFieldRequired(Figure descendant){
		return myRoot.equals(descendant.getParent()) || !descendant.getReferencingElements().isEmpty();
	}
}
final FieldSupport fieldSupport = new FieldSupport(root);


    stringBuffer.append(TEXT_1);
    
queue.addAll(root.getChildren());
int figureCount = 0;
while (!queue.isEmpty()){
	Object _nxt = queue.removeFirst();
	if (_nxt == marker){
		parentArgs = (GraphDefDispatcher.LayoutArgs)contextStack.pop();
		continue;
	}
	if (_nxt instanceof FigureRef) {
		throw new IllegalStateException("FIXME: sorry, don't support FigureRef for a while");
	}
	final Figure nextChild = (Figure) _nxt;	
	final String childVarName = "fig_" + figureCount;
	final String childLayoutManager = "layouter" + figureCount;
	final String childConstraint = "layData" + figureCount;
	figureCount++;
	
	// FIXME instantiate - FigureRef - dispatch to 'instantiate' template?
	GraphDefDispatcher.LayoutArgs nextLevelArgs = dispatcher.createLayoutArgs(nextChild, childVarName, childLayoutManager, childConstraint);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(dispatcher.dispatch("instantiate", nextLevelArgs));
    
if (fieldSupport.isFieldRequired(nextChild)){
	fieldsRequired.add(nextChild); 
    stringBuffer.append(TEXT_3);
    stringBuffer.append(nextChild.getName());
    stringBuffer.append(TEXT_4);
    stringBuffer.append(childVarName);
    stringBuffer.append(TEXT_5);
    }
    stringBuffer.append(TEXT_6);
    stringBuffer.append(dispatcher.dispatch("createLayoutData", nextLevelArgs));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(parentArgs.getVariableName());
    stringBuffer.append(TEXT_8);
    stringBuffer.append(childVarName);
    stringBuffer.append(TEXT_9);
    stringBuffer.append(childConstraint);
    stringBuffer.append(TEXT_10);
    
	if (!nextChild.getChildren().isEmpty()) {
		queue.addFirst(marker);
		queue.addAll(0, nextChild.getChildren());
		contextStack.push(parentArgs);
		parentArgs = nextLevelArgs; // go on processing children of new parentFigure
	} 
} // while

    stringBuffer.append(TEXT_11);
    
	final FigureQualifiedNameSwitch fqnSwitch = dispatcher.getFQNSwitch();
	for (Iterator fieldFigures = fieldsRequired.iterator(); fieldFigures.hasNext();){
		Figure next = (Figure)fieldFigures.next(); 
		final String nextClassName = fqnSwitch.get(next, importManager);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(CodeGenUtil.capName(next.getName()));
    stringBuffer.append(TEXT_14);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(namingStrategy.getChildFigureGetterName(next));
    stringBuffer.append(TEXT_16);
    stringBuffer.append(CodeGenUtil.capName(next.getName()));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_18);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_19);
    stringBuffer.append(CodeGenUtil.capName(next.getName()));
    stringBuffer.append(TEXT_20);
    	}
    stringBuffer.append(TEXT_21);
    return stringBuffer.toString();
  }
}
@


1.9
log
@[mgolubev] #139148 Respect gmfgraph.compartment figure
[mgolubev] #143619 Temp fix for misassumption of ParentAssignedViewmap regarding generated getter name
@
text
@@


1.8
log
@[mgolubev] #139139 Compilation error in the generated diagram code if DiagramLabel points to the deep Label
Add getters/setters for each figure that is being used by any diagram element
@
text
@d36 1
a36 1
  protected final String TEXT_15 = " getFigure";
d57 1
d136 1
a136 1
    stringBuffer.append(next.getName());
@


1.7
log
@#135020 remove irrelevant comments from generated figure code
@
text
@d5 3
d22 1
a22 1
  protected final String TEXT_1 = "";
d24 19
a42 4
  protected final String TEXT_3 = NL + "\t\t";
  protected final String TEXT_4 = ".add(";
  protected final String TEXT_5 = ");" + NL + "\t\t";
  protected final String TEXT_6 = NL;
d48 23
a70 4
Object[] args = (Object[]) argument;
List/*<Figure>*/ figureChildren = (List) args[0];
final GraphDefDispatcher dispatcher = (GraphDefDispatcher) args[1];
GraphDefDispatcher.LayoutArgs parentArgs = (GraphDefDispatcher.LayoutArgs) args[2];
d74 1
a74 4
LinkedList l = new LinkedList();
l.addAll(figureChildren);
final Object marker = new Object();
Stack figureVarNamesStack = new Stack();
d76 4
a79 4
while (!l.isEmpty()) {
	Object _nxt = l.removeFirst();
	if (_nxt == marker) {
		parentArgs = (GraphDefDispatcher.LayoutArgs) figureVarNamesStack.pop();
d82 1
a82 2
	final FigureMarker figureMarker = (FigureMarker) _nxt;
	if (figureMarker instanceof FigureRef) {
d85 4
a88 3
	final String figureVarName = "fig_" + figureCount;
	final String layoutManagerVarName = "layouter" + figureCount;
	final String layoutDataVarName = "layData" + figureCount;
d90 3
a92 2
		// FIXME instantiate - FigureRef - dispatch to 'instantiate' template?
		GraphDefDispatcher.LayoutArgs nextLevelArgs = dispatcher.createLayoutArgs((Figure) figureMarker, figureVarName, layoutManagerVarName, layoutDataVarName);
d95 3
d99 1
a99 1
    stringBuffer.append(parentArgs.getVariableName());
d101 1
a101 1
    stringBuffer.append(figureVarName);
d103 10
a112 1
    stringBuffer.append(dispatcher.dispatch("createLayoutData", dispatcher.createLayoutArgs(nextLevelArgs, parentArgs.getManagerVariableName(), layoutDataVarName)));
d114 6
a119 6
if (_nxt instanceof Figure && !((Figure) _nxt).getChildren().isEmpty()) {
	l.addFirst(marker);
	l.addAll(0, ((Figure) _nxt).getChildren());
	figureVarNamesStack.push(parentArgs);
	parentArgs = nextLevelArgs; // go on processing children of new parentFigure
} // if
d122 25
a146 1
    stringBuffer.append(TEXT_6);
@


1.6
log
@Switching to eclipse M6.
@
text
@d20 1
a20 1
  protected final String TEXT_2 = NL + "\t\t// FIXME instantiate - FigureRef - dispatch to 'instantiate' template?" + NL + "\t\t";
d22 3
a24 4
  protected final String TEXT_4 = NL + "\t\t";
  protected final String TEXT_5 = ".add(";
  protected final String TEXT_6 = ");" + NL + "\t\t";
  protected final String TEXT_7 = NL;
d56 2
d59 1
a59 1
    GraphDefDispatcher.LayoutArgs nextLevelArgs = dispatcher.createLayoutArgs((Figure) figureMarker, figureVarName, layoutManagerVarName, layoutDataVarName);
d61 1
a61 1
    stringBuffer.append(dispatcher.dispatch("instantiate", nextLevelArgs));
d63 1
a63 1
    stringBuffer.append(parentArgs.getVariableName());
a64 2
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_6);
d75 1
a75 1
    stringBuffer.append(TEXT_7);
@


1.5
log
@[mgolubev] #134097 Invalid code is generated for the node figure with XYLayout
@
text
@d29 1
a29 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@[mgolubev] #127252 layout support
@
text
@d34 1
a34 1
String parentFigureVarName = (String) args[2];
d46 1
a46 1
		parentFigureVarName = (String) figureVarNamesStack.pop();
d53 1
a53 1
	final String figureVarName = "fig" + figureCount;
d58 1
a58 2
    GraphDefDispatcher.Args dargs = dispatcher.create((Figure) figureMarker, figureVarName);
		GraphDefDispatcher.LayoutArgs layoutAwareArgs = dispatcher.createLayoutArgs(dargs, layoutManagerVarName, layoutDataVarName);
d60 1
a60 1
    stringBuffer.append(dispatcher.dispatch("instantiate", layoutAwareArgs));
d62 1
a62 1
    stringBuffer.append(parentFigureVarName);
d66 1
a66 1
    stringBuffer.append(dispatcher.dispatch("createLayoutData", layoutAwareArgs));
d71 2
a72 2
	figureVarNamesStack.push(parentFigureVarName);
	parentFigureVarName = figureVarName; // go on processing children of new parentFigure
@


1.3
log
@[mgolubev] #127252 layout support
@
text
@d54 1
d59 1
d61 1
a61 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dargs));
d67 1
a67 1
    stringBuffer.append(dispatcher.dispatch("createLayoutData", dispatcher.createLayoutArgs(dargs, layoutDataVarName)));
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d4 1
a4 1
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;
d22 4
a25 3
  protected final String TEXT_4 = ".add(";
  protected final String TEXT_5 = ");";
  protected final String TEXT_6 = NL;
d53 3
a55 1
	final String figureVarName = "fig" + (figureCount++);
d57 1
a57 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create((Figure) figureMarker, figureVarName)));
d59 2
d62 1
a62 1
    stringBuffer.append(TEXT_4);
d64 2
a65 1
    stringBuffer.append(TEXT_5);
d75 1
a75 1
    stringBuffer.append(TEXT_6);
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d4 1
a4 3
import org.eclipse.gmf.gmfgraph.util.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d32 2
a33 4
final ImportAssistant importManager = (ImportAssistant) args[1];
final GMFGraphSwitch fqnSwitch = (GMFGraphSwitch) args[2];
final Dispatcher dispatcher = (Dispatcher) args[3];
String parentFigureVarName = (String) args[4];
d54 1
a54 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create((Figure) figureMarker, figureVarName, importManager, fqnSwitch)));
@

