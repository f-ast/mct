head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080806-1520:1.4
	v20080731-1520:1.4
	v20061027-1200:1.3
	v20061013-1330:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.23;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;

public class LabelAttrGenerator
{
  protected static String nl;
  public static synchronized LabelAttrGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    LabelAttrGenerator result = new LabelAttrGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = ".setText(\"";
  protected final String TEXT_3 = "\");";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GraphDefDispatcher.Args args = (GraphDefDispatcher.Args) argument;
final Label figureInstance = (Label) args.getFigure();
final String figureVarName = args.getVariableName();
final GraphDefDispatcher dispatcher = args.getDispatcher();

    if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getLabel_Text())) {
    stringBuffer.append(TEXT_1);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(figureInstance.getText());
    stringBuffer.append(TEXT_3);
    }
    stringBuffer.append(dispatcher.dispatch("Figure", args));
    return stringBuffer.toString();
  }
}
@


1.3
log
@Switching to eclipse M6.
@
text
@@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d24 1
a24 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d4 1
a4 1
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d26 1
a26 1
Dispatcher.Args args = (Dispatcher.Args) argument;
d29 1
a29 1
final Dispatcher dispatcher = args.getDispatcher();
@

