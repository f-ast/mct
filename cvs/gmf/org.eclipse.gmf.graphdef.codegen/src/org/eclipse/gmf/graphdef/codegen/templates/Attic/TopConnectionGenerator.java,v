head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20080731-1520:1.10
	v20061027-1200:1.7
	v20061013-1330:1.9
	v20060925-1700:1.7
	v20060919-0800:1.7
	M1_20:1.9
	v20060904-1500:1.9
	v20060713-1700:1.7
	R1_0_maintenance:1.7.0.2
	R1_0:1.7
	v20060627-1200:1.7
	v20060626-1420:1.7
	v20060616-1200:1.6
	v20060531-1730:1.6
	v20060530-1930:1.6
	v20060526-1200:1.6
	v20060519-1300:1.6
	v20060519-0800:1.6
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.11.02.21.58.36;	author atikhomirov;	state dead;
branches;
next	1.9;

1.9
date	2006.08.24.15.38.55;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.08.24.13.13.37;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.26.16.49.27;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.05.18.19.12.40;	author atikhomirov;	state Exp;
branches;
next	1.5;

1.5
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.13.17.53.19;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.24.18.50.22;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.gmfgraph.util.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.graphdef.codegen.*;
import org.eclipse.emf.ecore.*;
import java.util.Iterator;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.codegen.util.CodeGenUtil;;

public class TopConnectionGenerator
{
  protected static String nl;
  public static synchronized TopConnectionGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    TopConnectionGenerator result = new TopConnectionGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL;
  protected final String TEXT_3 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_4 = " ";
  protected final String TEXT_5 = "() {" + NL + "\t\t";
  protected final String TEXT_6 = " result = new ";
  protected final String TEXT_7 = "();" + NL + "\t\t";
  protected final String TEXT_8 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_9 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_10 = "() {";
  protected final String TEXT_11 = NL;
  protected final String TEXT_12 = NL + "\t\tsetSourceDecoration(createSourceDecoration());";
  protected final String TEXT_13 = NL + "\t\tsetTargetDecoration(createTargetDecoration());";
  protected final String TEXT_14 = NL + "\t}" + NL;
  protected final String TEXT_15 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_16 = " createSourceDecoration() {";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t\treturn df;" + NL + "\t}";
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_21 = " createTargetDecoration() {";
  protected final String TEXT_22 = NL;
  protected final String TEXT_23 = NL + "\t\treturn df;" + NL + "\t}";
  protected final String TEXT_24 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final GraphDefDispatcher.Args innerArgs = (GraphDefDispatcher.Args) ((Object[]) argument)[0];
final PolylineConnection figure = (PolylineConnection)innerArgs.getFigure();
final GraphDefDispatcher dispatcher = innerArgs.getDispatcher();
final ImportAssistant importManager = dispatcher.getImportManager();
final FigureQualifiedNameSwitch fqnSwitch = dispatcher.getFQNSwitch();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(TEXT_2);
    
//input: [oeg].common.codegen.ImportAssistant importManager 
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher
//input: [oeg].gmfgraph.Figure figure
 
{ //namespace -- use "bfm" (stands for BorderFactoryMethod) to avoid name clashes
	int bfmNextIndex = 1;
	String bfmLastFigureName = "";
	for (Iterator bfmAllCustomBorders = EcoreUtil.getAllContents(figure, false); bfmAllCustomBorders.hasNext();){
		EObject bfmNext = (EObject)bfmAllCustomBorders.next();
		if (GMFGraphPackage.eINSTANCE.getFigure().isSuperTypeOf(bfmNext.eClass())){
			bfmLastFigureName = (String)bfmNext.eGet(GMFGraphPackage.eINSTANCE.getIdentity_Name());
			if (bfmLastFigureName == null){
				bfmLastFigureName = "";
			}
		}
		// XXX [artem] why not do this with ((Figure) bfmNext).getBorder()? 
		if (bfmNext.eClass().getClassifierID() != GMFGraphPackage.CUSTOM_BORDER){
			continue;
		}
		
		String bfmNextImplClass = dispatcher.getFQNSwitch().get(bfmNext, importManager);	
		String bfmNextMethodName = "createBorder_" + CodeGenUtil.capName(bfmLastFigureName) + "_" + (bfmNextIndex++);
		

    stringBuffer.append(TEXT_3);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Border"));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(bfmNextMethodName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(bfmNextImplClass);
    stringBuffer.append(TEXT_6);
    stringBuffer.append(bfmNextImplClass);
    stringBuffer.append(TEXT_7);
    stringBuffer.append(dispatcher.dispatch("customAttributes", new Object[] {bfmNext, dispatcher, "result"} ));
    stringBuffer.append(TEXT_8);
    		
		dispatcher.getAuxiliaryDataStorage().registerData(bfmNext, bfmNextMethodName);
	}
} //end of namespace

    stringBuffer.append(TEXT_9);
    stringBuffer.append(figure.getName());
    stringBuffer.append(TEXT_10);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(dispatcher.dispatch("Shape", dispatcher.create(figure, "this")));
    if (figure.getSourceDecoration() != null) {
    stringBuffer.append(TEXT_12);
    }
if (figure.getTargetDecoration() != null) {
    stringBuffer.append(TEXT_13);
    }
    stringBuffer.append(TEXT_14);
    if (figure.getSourceDecoration() != null) {
	final String className = fqnSwitch.get(figure.getSourceDecoration(), importManager);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(className);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create(figure.getSourceDecoration(), "df")));
    stringBuffer.append(TEXT_18);
    } /*if sourceDecoration != null */ 
    stringBuffer.append(TEXT_19);
    if (figure.getTargetDecoration() != null) {
	final String className = fqnSwitch.get(figure.getTargetDecoration(), importManager);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(className);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(TEXT_22);
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create(figure.getTargetDecoration(), "df")));
    stringBuffer.append(TEXT_23);
    }
    stringBuffer.append(TEXT_24);
    return stringBuffer.toString();
  }
}
@


1.9
log
@[154687] mgolubev - Support scalable polygons
@
text
@@


1.8
log
@[154683] mgolubev - Handle custom borders.
@
text
@d25 20
a44 20
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends ";
  protected final String TEXT_4 = " {" + NL;
  protected final String TEXT_5 = NL;
  protected final String TEXT_6 = "\t\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_7 = " ";
  protected final String TEXT_8 = "() {" + NL + "\t\t";
  protected final String TEXT_9 = " result = new ";
  protected final String TEXT_10 = "();" + NL + "\t\t";
  protected final String TEXT_11 = NL + "\t\treturn result;" + NL + "\t}";
  protected final String TEXT_12 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_13 = "() {";
  protected final String TEXT_14 = NL;
  protected final String TEXT_15 = NL + "\t\tsetSourceDecoration(createSourceDecoration());";
  protected final String TEXT_16 = NL + "\t\tsetTargetDecoration(createTargetDecoration());";
  protected final String TEXT_17 = NL + "\t}" + NL;
  protected final String TEXT_18 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_19 = " createSourceDecoration() {";
  protected final String TEXT_20 = NL;
  protected final String TEXT_21 = NL + "\t\treturn df;" + NL + "\t}";
d46 2
a47 17
  protected final String TEXT_23 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_24 = " createTargetDecoration() {";
  protected final String TEXT_25 = NL;
  protected final String TEXT_26 = NL + "\t\treturn df;" + NL + "\t}";
  protected final String TEXT_27 = NL;
  protected final String TEXT_28 = NL + "}" + NL + "\t";
  protected final String TEXT_29 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_30 = " ";
  protected final String TEXT_31 = " = ";
  protected final String TEXT_32 = ";";
  protected final String TEXT_33 = NL + "\t";
  protected final String TEXT_34 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_35 = " ";
  protected final String TEXT_36 = " = ";
  protected final String TEXT_37 = ";";
  protected final String TEXT_38 = NL + "}";
  protected final String TEXT_39 = NL;
d53 5
a57 6
Object[] args = (Object[]) argument;
PolylineConnection figure = (PolylineConnection) args[0];
final ImportAssistant importManager = (ImportAssistant) args[1];
final FigureQualifiedNameSwitch fqnSwitch = (FigureQualifiedNameSwitch) args[2];
final GraphDefDispatcher dispatcher = (GraphDefDispatcher) args[3];
final boolean isInnerClass = ((Boolean) args[4]).booleanValue();
a58 1
    importManager.emitPackageStatement(stringBuffer);
a59 1
    importManager.markImportLocation(stringBuffer);
a60 5
    stringBuffer.append(importManager.getCompilationUnitName());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(fqnSwitch.get(figure, importManager));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(TEXT_5);
d86 1
a86 1
    stringBuffer.append(TEXT_6);
d88 1
a88 1
    stringBuffer.append(TEXT_7);
d90 1
a90 1
    stringBuffer.append(TEXT_8);
d92 1
a92 1
    stringBuffer.append(TEXT_9);
d94 1
a94 1
    stringBuffer.append(TEXT_10);
d96 1
a96 1
    stringBuffer.append(TEXT_11);
d102 1
a102 1
    stringBuffer.append(TEXT_12);
d104 2
a105 2
    stringBuffer.append(TEXT_13);
    stringBuffer.append(TEXT_14);
d108 1
a108 1
    stringBuffer.append(TEXT_15);
d111 1
a111 1
    stringBuffer.append(TEXT_16);
d113 1
a113 1
    stringBuffer.append(TEXT_17);
d116 1
a116 1
    stringBuffer.append(TEXT_18);
d118 2
a119 2
    stringBuffer.append(TEXT_19);
    stringBuffer.append(TEXT_20);
d121 1
a121 1
    stringBuffer.append(TEXT_21);
d123 1
a123 1
    stringBuffer.append(TEXT_22);
d126 1
a126 1
    stringBuffer.append(TEXT_23);
d128 2
a129 2
    stringBuffer.append(TEXT_24);
    stringBuffer.append(TEXT_25);
d131 1
a131 1
    stringBuffer.append(TEXT_26);
d133 1
a133 40
    stringBuffer.append(TEXT_27);
    
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher
//input: boolean isInnerClass
if (isInnerClass){ /*put fields out of inner class body*/ 
    stringBuffer.append(TEXT_28);
    
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher
for (Iterator allFields = dispatcher.getStaticFieldsManager().allFields(); allFields.hasNext();) {
	StaticFieldsManager.StaticField next = (StaticFieldsManager.StaticField)allFields.next(); 
    stringBuffer.append(TEXT_29);
    stringBuffer.append(next.getType());
    stringBuffer.append(TEXT_30);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_31);
    stringBuffer.append(next.getValue());
    stringBuffer.append(TEXT_32);
    
}

     } else { 
    stringBuffer.append(TEXT_33);
    
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher
for (Iterator allFields = dispatcher.getStaticFieldsManager().allFields(); allFields.hasNext();) {
	StaticFieldsManager.StaticField next = (StaticFieldsManager.StaticField)allFields.next(); 
    stringBuffer.append(TEXT_34);
    stringBuffer.append(next.getType());
    stringBuffer.append(TEXT_35);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_36);
    stringBuffer.append(next.getValue());
    stringBuffer.append(TEXT_37);
    
}

    stringBuffer.append(TEXT_38);
    }
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_39);
@


1.7
log
@[mgolubev] #148402 Do not create unlimited number of font/color resources.
@
text
@d7 1
d9 2
d27 10
a36 10
  protected final String TEXT_4 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "() {";
  protected final String TEXT_6 = NL;
  protected final String TEXT_7 = NL + "\t\tsetSourceDecoration(createSourceDecoration());";
  protected final String TEXT_8 = NL + "\t\tsetTargetDecoration(createTargetDecoration());";
  protected final String TEXT_9 = NL + "\t}" + NL;
  protected final String TEXT_10 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_11 = " createSourceDecoration() {";
  protected final String TEXT_12 = NL;
  protected final String TEXT_13 = NL + "\t\treturn df;" + NL + "\t}";
d38 25
a62 17
  protected final String TEXT_15 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_16 = " createTargetDecoration() {";
  protected final String TEXT_17 = NL;
  protected final String TEXT_18 = NL + "\t\treturn df;" + NL + "\t}";
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + "}" + NL + "\t";
  protected final String TEXT_21 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_22 = " ";
  protected final String TEXT_23 = " = ";
  protected final String TEXT_24 = ";";
  protected final String TEXT_25 = NL + "\t";
  protected final String TEXT_26 = NL + "\t" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic static final ";
  protected final String TEXT_27 = " ";
  protected final String TEXT_28 = " = ";
  protected final String TEXT_29 = ";";
  protected final String TEXT_30 = NL + "}";
  protected final String TEXT_31 = NL;
a82 1
    stringBuffer.append(figure.getName());
d84 25
d110 19
d131 1
a131 1
    stringBuffer.append(TEXT_7);
d134 1
a134 1
    stringBuffer.append(TEXT_8);
d136 1
a136 1
    stringBuffer.append(TEXT_9);
d139 1
a139 1
    stringBuffer.append(TEXT_10);
d141 2
a142 2
    stringBuffer.append(TEXT_11);
    stringBuffer.append(TEXT_12);
d144 1
a144 1
    stringBuffer.append(TEXT_13);
d146 1
a146 1
    stringBuffer.append(TEXT_14);
d149 1
a149 1
    stringBuffer.append(TEXT_15);
d151 2
a152 2
    stringBuffer.append(TEXT_16);
    stringBuffer.append(TEXT_17);
d154 1
a154 1
    stringBuffer.append(TEXT_18);
d156 1
a156 1
    stringBuffer.append(TEXT_19);
d161 1
a161 1
    stringBuffer.append(TEXT_20);
d166 1
a166 1
    stringBuffer.append(TEXT_21);
d168 1
a168 1
    stringBuffer.append(TEXT_22);
d170 1
a170 1
    stringBuffer.append(TEXT_23);
d172 1
a172 1
    stringBuffer.append(TEXT_24);
d177 1
a177 1
    stringBuffer.append(TEXT_25);
d182 1
a182 1
    stringBuffer.append(TEXT_26);
d184 1
a184 1
    stringBuffer.append(TEXT_27);
d186 1
a186 1
    stringBuffer.append(TEXT_28);
d188 1
a188 1
    stringBuffer.append(TEXT_29);
d192 1
a192 1
    stringBuffer.append(TEXT_30);
d195 1
a195 1
    stringBuffer.append(TEXT_31);
@


1.6
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@d6 2
a7 1
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;
d39 13
a51 1
  protected final String TEXT_19 = NL + "}";
d62 1
d103 37
d141 1
@


1.5
log
@Switching to eclipse M6.
@
text
@d50 1
d54 1
a54 1
    stringBuffer.append(figure.getName());
@


1.4
log
@explicit method names for fqn switch to better reflect it's intention
@
text
@d42 1
a42 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.3
log
@[mgolubev] #129362 move runtime-specific fqn out from templates to external switch
@
text
@d47 1
a47 1
final GMFGraphSwitch fqnSwitch = (GMFGraphSwitch) args[2];
d55 1
a55 1
    stringBuffer.append(importManager.getImportedName((String) fqnSwitch.doSwitch(figure)));
d69 1
a69 1
	final String className = importManager.getImportedName((String) fqnSwitch.doSwitch(figure.getSourceDecoration()));
d79 1
a79 1
	final String className = importManager.getImportedName((String) fqnSwitch.doSwitch(figure.getTargetDecoration()));
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d55 1
a55 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx"));
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d6 1
a6 1
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d47 2
a48 2
final GMFGraphSwitch fqnSwitch = new FigureQualifiedNameSwitch();
final Dispatcher dispatcher = (Dispatcher) args[2];
d60 1
a60 1
    stringBuffer.append(dispatcher.dispatch("Shape", dispatcher.create(figure, "this", importManager, fqnSwitch)));
d74 1
a74 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create(figure.getSourceDecoration(), "df", importManager, fqnSwitch)));
d84 1
a84 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create(figure.getTargetDecoration(), "df", importManager, fqnSwitch)));
@

