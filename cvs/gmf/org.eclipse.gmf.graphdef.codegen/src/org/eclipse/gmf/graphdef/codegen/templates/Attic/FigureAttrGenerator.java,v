head	1.10;
access;
symbols
	v20080813-1520:1.10
	v20080806-1520:1.10
	v20080731-1520:1.10
	v20061027-1200:1.8
	v20061013-1330:1.9
	v20060925-1700:1.8
	v20060919-0800:1.8
	M1_20:1.9
	v20060904-1500:1.9
	v20060713-1700:1.8
	R1_0_maintenance:1.8.0.2
	R1_0:1.8
	v20060627-1200:1.8
	v20060626-1420:1.8
	v20060616-1200:1.7
	v20060531-1730:1.7
	v20060530-1930:1.7
	v20060526-1200:1.7
	v20060519-1300:1.7
	v20060519-0800:1.7
	I20060505-1400:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.10
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.9;

1.9
date	2006.07.24.17.38.38;	author atikhomirov;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.26.16.49.27;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.05.17.11.30.53;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.03.31.18.08.35;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.19.04.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.24.15.11.34;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.10
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;

public class FigureAttrGenerator
{
  protected static String nl;
  public static synchronized FigureAttrGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    FigureAttrGenerator result = new FigureAttrGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\t\t";
  protected final String TEXT_2 = ".setForegroundColor(";
  protected final String TEXT_3 = NL + ");";
  protected final String TEXT_4 = NL + "\t\t";
  protected final String TEXT_5 = ".setBackgroundColor(";
  protected final String TEXT_6 = NL + ");";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = ".setPreferredSize(";
  protected final String TEXT_9 = ", ";
  protected final String TEXT_10 = ");";
  protected final String TEXT_11 = NL + "\t\t";
  protected final String TEXT_12 = ".setSize(";
  protected final String TEXT_13 = ", ";
  protected final String TEXT_14 = ");";
  protected final String TEXT_15 = NL + "\t\t";
  protected final String TEXT_16 = ".setMaximumSize(new ";
  protected final String TEXT_17 = "(";
  protected final String TEXT_18 = ", ";
  protected final String TEXT_19 = "));";
  protected final String TEXT_20 = NL + "\t\t";
  protected final String TEXT_21 = ".setMinimumSize(new ";
  protected final String TEXT_22 = "(";
  protected final String TEXT_23 = ", ";
  protected final String TEXT_24 = "));";
  protected final String TEXT_25 = NL + "\t\t";
  protected final String TEXT_26 = ".setFont(" + NL + "\t\t\t";
  protected final String TEXT_27 = ");";
  protected final String TEXT_28 = NL + "\t\t";
  protected final String TEXT_29 = ".setBorder(new ";
  protected final String TEXT_30 = "(";
  protected final String TEXT_31 = ", ";
  protected final String TEXT_32 = ", ";
  protected final String TEXT_33 = ", ";
  protected final String TEXT_34 = "));";
  protected final String TEXT_35 = NL + "\t\t";
  protected final String TEXT_36 = ".setBorder(";
  protected final String TEXT_37 = ");";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GraphDefDispatcher.Args args = (GraphDefDispatcher.Args) argument;
final Figure figureInstance = args.getFigure();
final String figureVarName = args.getVariableName();
final GraphDefDispatcher dispatcher = args.getDispatcher();
final ImportAssistant importManager = dispatcher.getImportManager();

    
Color colorVal;
String colorName;
if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_ForegroundColor())) {
		colorVal = figureInstance.getForegroundColor();
		colorName = figureInstance.getName().toUpperCase() + "_FORE";
    stringBuffer.append(TEXT_1);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_2);
    
//input: [oeg].gmfgraph.Color colorVal
//input: String colorName
//input: [oeg].common.codegen.ImportAssistant importManager 
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher

	if (colorVal instanceof RGBColor) {
		String staticFieldType = importManager.getImportedName("org.eclipse.swt.graphics.Color");
		String staticFieldName = (colorName == null) ? "COLOR" : colorName;
		String staticFieldValue = "new " + staticFieldType + "(null, " + ((RGBColor)colorVal).getRed() + ", " + ((RGBColor)colorVal).getGreen() + ", " + ((RGBColor)colorVal).getBlue() + ")";

    stringBuffer.append(dispatcher.getStaticFieldsManager().addStaticField(staticFieldType, staticFieldName, staticFieldValue));
    	} else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants") + "." + ((ConstantColor) colorVal).getValue().getLiteral());
    	} else {
		throw new IllegalStateException("Unknown color: " + colorVal);
	}

    stringBuffer.append(TEXT_3);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor())) {
		colorVal = figureInstance.getBackgroundColor();
		colorName = figureInstance.getName().toUpperCase() + "_BACK";
    stringBuffer.append(TEXT_4);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_5);
    
//input: [oeg].gmfgraph.Color colorVal
//input: String colorName
//input: [oeg].common.codegen.ImportAssistant importManager 
//input: [oeg].graphdef.codegen GraphDefDispatcher dispatcher

	if (colorVal instanceof RGBColor) {
		String staticFieldType = importManager.getImportedName("org.eclipse.swt.graphics.Color");
		String staticFieldName = (colorName == null) ? "COLOR" : colorName;
		String staticFieldValue = "new " + staticFieldType + "(null, " + ((RGBColor)colorVal).getRed() + ", " + ((RGBColor)colorVal).getGreen() + ", " + ((RGBColor)colorVal).getBlue() + ")";

    stringBuffer.append(dispatcher.getStaticFieldsManager().addStaticField(staticFieldType, staticFieldName, staticFieldValue));
    	} else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants") + "." + ((ConstantColor) colorVal).getValue().getLiteral());
    	} else {
		throw new IllegalStateException("Unknown color: " + colorVal);
	}

    stringBuffer.append(TEXT_6);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_PreferredSize())) {
		Dimension d = figureInstance.getPreferredSize();
    stringBuffer.append(TEXT_7);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(dispatcher.DPtoLP(d.getDx()));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(dispatcher.DPtoLP(d.getDy()));
    stringBuffer.append(TEXT_10);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_Size())) {
		Point p = figureInstance.getSize();
    stringBuffer.append(TEXT_11);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_12);
    stringBuffer.append(dispatcher.DPtoLP(p.getX()));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(dispatcher.DPtoLP(p.getY()));
    stringBuffer.append(TEXT_14);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_MaximumSize())) {
		Dimension d = figureInstance.getMaximumSize();
    stringBuffer.append(TEXT_15);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_16);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(dispatcher.DPtoLP(d.getDx()));
    stringBuffer.append(TEXT_18);
    stringBuffer.append(dispatcher.DPtoLP(d.getDy()));
    stringBuffer.append(TEXT_19);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_MinimumSize())) {
		Dimension d = figureInstance.getMinimumSize();
    stringBuffer.append(TEXT_20);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_21);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.geometry.Dimension"));
    stringBuffer.append(TEXT_22);
    stringBuffer.append(dispatcher.DPtoLP(d.getDx()));
    stringBuffer.append(TEXT_23);
    stringBuffer.append(dispatcher.DPtoLP(d.getDy()));
    stringBuffer.append(TEXT_24);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_Font())) {
		// XXX possible CCE when fonts other than Basic added to model 
		BasicFont font = (BasicFont) figureInstance.getFont();
		String fontName = font.getFaceName();
		if (fontName == null || fontName.trim().length() == 0){
			org.eclipse.swt.graphics.Font system = org.eclipse.swt.widgets.Display.getDefault().getSystemFont();
			if (system != null && system.getFontData().length > 0){
				fontName = system.getFontData()[0].getName();
			}
		}
		
    stringBuffer.append(TEXT_25);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(dispatcher.getStaticFieldsManager().addStaticField(
				importManager.getImportedName("org.eclipse.swt.graphics.Font"), 
				figureInstance.getName().toUpperCase() + "_FONT", 
				"new " + importManager.getImportedName("org.eclipse.swt.graphics.Font") + "(" + importManager.getImportedName("org.eclipse.swt.widgets.Display") + ".getCurrent(), \"" + fontName + "\", " + font.getHeight() + ", " + importManager.getImportedName("org.eclipse.swt.SWT") + "." + font.getStyle().getLiteral() + ")"
			));
    stringBuffer.append(TEXT_27);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_Insets())) {
		Insets insets = figureInstance.getInsets();
    stringBuffer.append(TEXT_28);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_29);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.MarginBorder"));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(dispatcher.DPtoLP(insets.getTop()));
    stringBuffer.append(TEXT_31);
    stringBuffer.append(dispatcher.DPtoLP(insets.getLeft()));
    stringBuffer.append(TEXT_32);
    stringBuffer.append(dispatcher.DPtoLP(insets.getBottom()));
    stringBuffer.append(TEXT_33);
    stringBuffer.append(dispatcher.DPtoLP(insets.getRight()));
    stringBuffer.append(TEXT_34);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_Border())) {
		Border border = figureInstance.getBorder();
    stringBuffer.append(TEXT_35);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_36);
    stringBuffer.append(dispatcher.dispatch(border, new Object[] {border, dispatcher}));
    stringBuffer.append(TEXT_37);
    }
    return stringBuffer.toString();
  }
}
@


1.9
log
@make generated code look more nice - for mgolubev
@
text
@@


1.8
log
@[mgolubev] #148402 Do not create unlimited number of font/color resources.
@
text
@d21 1
a21 1
  protected final String TEXT_3 = NL + NL + ");";
d24 1
a24 1
  protected final String TEXT_6 = NL + NL + ");";
@


1.7
log
@[mgolubev] #140899 gmfgraph.BasicFont should have reasonable default values for faceName, style and height properties
@
text
@d21 35
a55 52
  protected final String TEXT_3 = "new ";
  protected final String TEXT_4 = "(null, ";
  protected final String TEXT_5 = ", ";
  protected final String TEXT_6 = ", ";
  protected final String TEXT_7 = ")";
  protected final String TEXT_8 = ".";
  protected final String TEXT_9 = ");";
  protected final String TEXT_10 = NL + "\t\t";
  protected final String TEXT_11 = ".setBackgroundColor(";
  protected final String TEXT_12 = "new ";
  protected final String TEXT_13 = "(null, ";
  protected final String TEXT_14 = ", ";
  protected final String TEXT_15 = ", ";
  protected final String TEXT_16 = ")";
  protected final String TEXT_17 = ".";
  protected final String TEXT_18 = ");";
  protected final String TEXT_19 = NL + "\t\t";
  protected final String TEXT_20 = ".setPreferredSize(";
  protected final String TEXT_21 = ", ";
  protected final String TEXT_22 = ");";
  protected final String TEXT_23 = NL + "\t\t";
  protected final String TEXT_24 = ".setSize(";
  protected final String TEXT_25 = ", ";
  protected final String TEXT_26 = ");";
  protected final String TEXT_27 = NL + "\t\t";
  protected final String TEXT_28 = ".setMaximumSize(new ";
  protected final String TEXT_29 = "(";
  protected final String TEXT_30 = ", ";
  protected final String TEXT_31 = "));";
  protected final String TEXT_32 = NL + "\t\t";
  protected final String TEXT_33 = ".setMinimumSize(new ";
  protected final String TEXT_34 = "(";
  protected final String TEXT_35 = ", ";
  protected final String TEXT_36 = "));";
  protected final String TEXT_37 = NL + "\t\t";
  protected final String TEXT_38 = ".setFont(new ";
  protected final String TEXT_39 = "(";
  protected final String TEXT_40 = ".getCurrent(), \"";
  protected final String TEXT_41 = "\", ";
  protected final String TEXT_42 = ", ";
  protected final String TEXT_43 = ".";
  protected final String TEXT_44 = "));";
  protected final String TEXT_45 = NL + "\t\t";
  protected final String TEXT_46 = ".setBorder(new ";
  protected final String TEXT_47 = "(";
  protected final String TEXT_48 = ", ";
  protected final String TEXT_49 = ", ";
  protected final String TEXT_50 = ", ";
  protected final String TEXT_51 = "));";
  protected final String TEXT_52 = NL + "\t\t";
  protected final String TEXT_53 = ".setBorder(";
  protected final String TEXT_54 = ");";
d67 3
a69 1
    Color colorVal;
d72 1
d76 18
a93 1
    if (colorVal instanceof RGBColor) {
d95 3
a97 1
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
d99 1
a99 1
    stringBuffer.append(((RGBColor) colorVal).getRed());
d101 18
a118 1
    stringBuffer.append(((RGBColor) colorVal).getGreen());
a119 29
    stringBuffer.append(((RGBColor) colorVal).getBlue());
    stringBuffer.append(TEXT_7);
    } else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_8);
    stringBuffer.append(((ConstantColor) colorVal).getValue().getLiteral());
    }
    stringBuffer.append(TEXT_9);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getFigure_BackgroundColor())) {
		colorVal = figureInstance.getBackgroundColor();
    stringBuffer.append(TEXT_10);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_11);
    if (colorVal instanceof RGBColor) {
    stringBuffer.append(TEXT_12);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Color"));
    stringBuffer.append(TEXT_13);
    stringBuffer.append(((RGBColor) colorVal).getRed());
    stringBuffer.append(TEXT_14);
    stringBuffer.append(((RGBColor) colorVal).getGreen());
    stringBuffer.append(TEXT_15);
    stringBuffer.append(((RGBColor) colorVal).getBlue());
    stringBuffer.append(TEXT_16);
    } else if (colorVal instanceof ConstantColor) {
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.ColorConstants"));
    stringBuffer.append(TEXT_17);
    stringBuffer.append(((ConstantColor) colorVal).getValue().getLiteral());
    }
    stringBuffer.append(TEXT_18);
d122 1
a122 1
    stringBuffer.append(TEXT_19);
d124 1
a124 1
    stringBuffer.append(TEXT_20);
d126 1
a126 1
    stringBuffer.append(TEXT_21);
d128 1
a128 1
    stringBuffer.append(TEXT_22);
d131 1
a131 1
    stringBuffer.append(TEXT_23);
d133 1
a133 1
    stringBuffer.append(TEXT_24);
d135 1
a135 1
    stringBuffer.append(TEXT_25);
d137 1
a137 1
    stringBuffer.append(TEXT_26);
d140 1
a140 1
    stringBuffer.append(TEXT_27);
d142 1
a142 1
    stringBuffer.append(TEXT_28);
d144 1
a144 1
    stringBuffer.append(TEXT_29);
d146 1
a146 1
    stringBuffer.append(TEXT_30);
d148 1
a148 1
    stringBuffer.append(TEXT_31);
d151 1
a151 1
    stringBuffer.append(TEXT_32);
d153 1
a153 1
    stringBuffer.append(TEXT_33);
d155 1
a155 1
    stringBuffer.append(TEXT_34);
d157 1
a157 1
    stringBuffer.append(TEXT_35);
d159 1
a159 1
    stringBuffer.append(TEXT_36);
d171 1
a171 1
    stringBuffer.append(TEXT_37);
d173 7
a179 13
    stringBuffer.append(TEXT_38);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.graphics.Font"));
    stringBuffer.append(TEXT_39);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.widgets.Display"));
    stringBuffer.append(TEXT_40);
    stringBuffer.append(fontName);
    stringBuffer.append(TEXT_41);
    stringBuffer.append(font.getHeight());
    stringBuffer.append(TEXT_42);
    stringBuffer.append(importManager.getImportedName("org.eclipse.swt.SWT"));
    stringBuffer.append(TEXT_43);
    stringBuffer.append(font.getStyle().getLiteral());
    stringBuffer.append(TEXT_44);
d182 1
a182 1
    stringBuffer.append(TEXT_45);
d184 1
a184 1
    stringBuffer.append(TEXT_46);
d186 1
a186 1
    stringBuffer.append(TEXT_47);
d188 1
a188 1
    stringBuffer.append(TEXT_48);
d190 1
a190 1
    stringBuffer.append(TEXT_49);
d192 1
a192 1
    stringBuffer.append(TEXT_50);
d194 1
a194 1
    stringBuffer.append(TEXT_51);
d197 1
a197 1
    stringBuffer.append(TEXT_52);
d199 1
a199 1
    stringBuffer.append(TEXT_53);
d201 1
a201 1
    stringBuffer.append(TEXT_54);
@


1.6
log
@Switching to eclipse M6.
@
text
@d170 8
d185 1
a185 1
    stringBuffer.append(font.getFaceName());
@


1.5
log
@[mgolubev] 134249 Generate all Figure/Shape properties
@
text
@d76 1
a76 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.4
log
@handle size and font attributes of figure
@
text
@d46 1
a46 1
  protected final String TEXT_28 = ".setFont(new ";
d48 25
a72 5
  protected final String TEXT_30 = ".getCurrent(), \"";
  protected final String TEXT_31 = "\", ";
  protected final String TEXT_32 = ", ";
  protected final String TEXT_33 = ".";
  protected final String TEXT_34 = "));";
d145 22
d170 1
a170 1
    stringBuffer.append(TEXT_27);
d172 1
a172 1
    stringBuffer.append(TEXT_28);
d174 1
a174 1
    stringBuffer.append(TEXT_29);
d176 1
a176 1
    stringBuffer.append(TEXT_30);
d178 1
a178 1
    stringBuffer.append(TEXT_31);
d180 1
a180 1
    stringBuffer.append(TEXT_32);
d182 1
a182 1
    stringBuffer.append(TEXT_33);
d184 23
a206 1
    stringBuffer.append(TEXT_34);
@


1.3
log
@[mgolubev] #129328 handle MapMode access in a variety of ways
@
text
@d41 12
d116 27
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d38 3
a40 3
  protected final String TEXT_20 = ".setPreferredSize(getMapMode().DPtoLP(";
  protected final String TEXT_21 = "), getMapMode().DPtoLP(";
  protected final String TEXT_22 = "));";
d49 2
a50 1
final ImportAssistant importManager = args.getDispatcher().getImportManager();
d100 1
a100 1
    stringBuffer.append(d.getDx());
d102 1
a102 1
    stringBuffer.append(d.getDy());
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d5 1
a5 1
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d46 1
a46 1
Dispatcher.Args args = (Dispatcher.Args) argument;
d49 1
a49 1
final ImportAssistant importManager = args.getImportManager();
@

