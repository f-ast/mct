head	1.5;
access;
symbols
	v20080813-1520:1.5
	v20080806-1520:1.5
	v20080731-1520:1.5
	v20061027-1200:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060904-1500:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060626-1420:1.4
	v20060616-1200:1.4
	v20060531-1730:1.4
	v20060530-1930:1.4
	v20060526-1200:1.4
	v20060519-1300:1.4
	v20060519-0800:1.4
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.2
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.5
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.4;

1.4
date	2006.05.18.19.12.40;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.30.13.38.06;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.02.13.16.15;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.5
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.standalone.templates;

import java.util.*;
import org.eclipse.gmf.graphdef.codegen.*;

public class ManifestMFGenerator
{
  protected static String nl;
  public static synchronized ManifestMFGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ManifestMFGenerator result = new ManifestMFGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "Manifest-Version: 1.0" + NL + "Bundle-ManifestVersion: 2" + NL + "Bundle-Name: %pluginName" + NL + "Bundle-SymbolicName: ";
  protected final String TEXT_2 = "; singleton:=true" + NL + "Bundle-Version: 1.0.0" + NL + "Bundle-Vendor: %providerName" + NL + "Bundle-Activator: ";
  protected final String TEXT_3 = ".";
  protected final String TEXT_4 = NL + "Bundle-Localization: plugin";
  protected final String TEXT_5 = NL + "Export-Package: ";
  protected final String TEXT_6 = NL + "Require-Bundle: ";
  protected final String TEXT_7 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_8 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
final Object[] passedArgs = (Object[]) argument;
final StandaloneGenerator.Config config = (StandaloneGenerator.Config) passedArgs[0];
final String[] requiredBundles = (String[]) passedArgs[1];


class ListComposer {
	public String composeList(Collection strings){
		StringBuffer result = new StringBuffer();
		for (Iterator it = strings.iterator(); it.hasNext();){
			result.append(" "); //do not miss required space here
			result.append(it.next());
			if (it.hasNext()){
				result.append(", " + NL);
			}
		}
		return result.toString();
	}
}

final ListComposer listComposer = new ListComposer();

    stringBuffer.append(TEXT_1);
    stringBuffer.append(config.getPluginID());
    stringBuffer.append(TEXT_2);
    stringBuffer.append(config.getPluginActivatorPackageName());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(config.getPluginActivatorClassName());
    stringBuffer.append(TEXT_4);
    
	HashSet exportedPackages = new HashSet();
	if (config.getMainPackageName() != null && config.getMainPackageName().trim().length() > 0) {
	exportedPackages.add(config.getMainPackageName());
	}
	exportedPackages.add(config.getPluginActivatorPackageName());

    stringBuffer.append(TEXT_5);
    stringBuffer.append(listComposer.composeList(exportedPackages));
    
final Set allRequiredBundles = new LinkedHashSet();
allRequiredBundles.add("org.eclipse.gef");
allRequiredBundles.add("org.eclipse.draw2d");
allRequiredBundles.add("org.eclipse.osgi");
allRequiredBundles.add("org.eclipse.core.runtime");
allRequiredBundles.addAll(java.util.Arrays.asList(requiredBundles));
if (config.needsMapMode()) {
	allRequiredBundles.add("org.eclipse.gmf.runtime.draw2d.ui");
}

    stringBuffer.append(TEXT_6);
    stringBuffer.append(listComposer.composeList(allRequiredBundles));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(TEXT_8);
    return stringBuffer.toString();
  }
}
@


1.4
log
@Emitter became top-level entity (TextEmitter), oddness of JetAdapter and Emitter api were cleared.
GeneratorBase lost knowledge about JET.
Parts of gmf.common made internal to avoid possible API issues.
ImportAssistant refactored to know name of compilation unit to avoid problems like #134506.
FigureGenerator's reuse of ImportAssistant removed.
[mgolubev] Tests for #134506 and 142553
@
text
@@


1.3
log
@Switching to eclipse M6.
@
text
@d61 1
d63 1
@


1.2
log
@[mgolubev] #131366 Check generated figures against originating gmfgraph model
@
text
@d29 1
a29 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.1
log
@[mgolubev] #128779 generate figures as standalone plugin
#129362 - respect plug-in dependencies imposed by figure fqn switch
@
text
@d19 7
a25 5
  protected final String TEXT_2 = "; singleton:=true" + NL + "Bundle-Version: 1.0.0" + NL + "Bundle-Vendor: %providerName" + NL + "Bundle-Localization: plugin";
  protected final String TEXT_3 = NL + "Export-Package: ";
  protected final String TEXT_4 = NL + "Require-Bundle: ";
  protected final String TEXT_5 = NL + "Eclipse-LazyStart: true";
  protected final String TEXT_6 = NL;
d55 4
d64 1
a64 1
    stringBuffer.append(TEXT_3);
d77 1
a77 1
    stringBuffer.append(TEXT_4);
d79 2
a80 2
    stringBuffer.append(TEXT_5);
    stringBuffer.append(TEXT_6);
@

