head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	v20061027-1200:1.5
	v20061013-1330:1.5
	v20060925-1700:1.5
	v20060919-0800:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060616-1200:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-1300:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.3
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.11.02.21.58.36;	author atikhomirov;	state dead;
branches;
next	1.5;

1.5
date	2006.04.10.11.53.24;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.10.11.15.21;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;

public class ShapeAttrGenerator
{
  protected static String nl;
  public static synchronized ShapeAttrGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    ShapeAttrGenerator result = new ShapeAttrGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "\t\t";
  protected final String TEXT_2 = ".setFill(";
  protected final String TEXT_3 = ");";
  protected final String TEXT_4 = NL + "\t\t";
  protected final String TEXT_5 = ".setOutline(";
  protected final String TEXT_6 = ");";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = ".setLineWidth(";
  protected final String TEXT_9 = ");";
  protected final String TEXT_10 = NL + "\t\t";
  protected final String TEXT_11 = ".setLineStyle(";
  protected final String TEXT_12 = ".";
  protected final String TEXT_13 = ");";
  protected final String TEXT_14 = NL + "\t\t";
  protected final String TEXT_15 = ".setFillXOR(";
  protected final String TEXT_16 = ");";
  protected final String TEXT_17 = NL + "\t\t";
  protected final String TEXT_18 = ".setOutlineXOR(";
  protected final String TEXT_19 = ");";

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
GraphDefDispatcher.Args args = (GraphDefDispatcher.Args) argument;
final Shape figureInstance = (Shape) args.getFigure();
final String figureVarName = args.getVariableName();
final GraphDefDispatcher dispatcher = args.getDispatcher();
final ImportAssistant importManager = dispatcher.getImportManager();

    
// Most of the properties are set only if corresponding eProperty isSet.
// The difference is in the default values. If default value of eProperty matches d2d one, the setter may be omitted.
// d2d.Shape#fill == true (matches default of gmfgraph.Shape#fill), while d2d.Polyline#fill == false, thus we need additional check.
// Note Polygon in the check instead of Polyline - (it looks like) there's no sense to setFill(true) for polylines in any case. 

    if (figureInstance instanceof Polygon ^ figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_Fill())) {
    stringBuffer.append(TEXT_1);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(figureInstance.isFill());
    stringBuffer.append(TEXT_3);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_Outline())) {
    stringBuffer.append(TEXT_4);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_5);
    stringBuffer.append(figureInstance.isOutline());
    stringBuffer.append(TEXT_6);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_LineWidth())) {
    stringBuffer.append(TEXT_7);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_8);
    stringBuffer.append(figureInstance.getLineWidth());
    stringBuffer.append(TEXT_9);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_LineKind())) {
    stringBuffer.append(TEXT_10);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_11);
    stringBuffer.append(importManager.getImportedName("org.eclipse.draw2d.Graphics"));
    stringBuffer.append(TEXT_12);
    stringBuffer.append(figureInstance.getLineKind().getName());
    stringBuffer.append(TEXT_13);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_XorFill())) {
    stringBuffer.append(TEXT_14);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_15);
    stringBuffer.append(figureInstance.isXorFill());
    stringBuffer.append(TEXT_16);
    } if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_XorOutline())) {
    stringBuffer.append(TEXT_17);
    stringBuffer.append(figureVarName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(figureInstance.isXorOutline());
    stringBuffer.append(TEXT_19);
    }
    stringBuffer.append(dispatcher.dispatch("Figure", args));
    return stringBuffer.toString();
  }
}
@


1.5
log
@Follow-up for #135016 Background colour is not used to fill polygons - most polylines are links, thus, no much sense to setFill(true) for them
@
text
@@


1.4
log
@[mgolubev] #135016 Background colour is not used to fill polygons
@
text
@d52 2
a53 1
// d2d.Shape#fill == true (matches default of gmfgraph.Shape#fill), while d2d.Polyline#fill == false, thus we need additional check 
d55 1
a55 1
    if (figureInstance instanceof Polyline ^ figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_Fill())) {
@


1.3
log
@Switching to eclipse M6.
@
text
@d50 3
a52 1
// PERHAPS, do this with reflection?
d54 1
a54 1
    if (figureInstance.eIsSet(GMFGraphPackage.eINSTANCE.getShape_Fill())) {
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d41 1
a41 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d5 1
a5 1
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d43 1
a43 1
Dispatcher.Args args = (Dispatcher.Args) argument;
d46 2
a47 2
final ImportAssistant importManager = args.getImportManager();
final Dispatcher dispatcher = args.getDispatcher();
@

