head	1.13;
access;
symbols
	v20080813-1520:1.13
	v20080806-1520:1.13
	v20080731-1520:1.13
	R1_0_maintenance:1.13.0.2
	R1_0:1.13
	M6_10:1.12
	I20060407-1200:1.11
	I20060331-1000:1.10
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.4
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.13
date	2006.04.21.17.47.10;	author atikhomirov;	state dead;
branches;
next	1.12;

1.12
date	2006.04.13.15.03.34;	author atikhomirov;	state Exp;
branches;
next	1.11;

1.11
date	2006.04.07.14.49.17;	author ashatalin;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.30.22.39.09;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.14.16.31.47;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.13.17.53.19;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.13.17.25.22;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.27.17.40.11;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.20.12.18.36;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.15.14.44.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.17.36.17;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.13
log
@#137840 uncompiliable code if CustomFigure contains Label  - gmfgen expects getters generated for figure's children; besides, it makes no much sense to keep both Figure.javajet and Shape.javajet, with sole difference in the way they process children
@
text
@package org.eclipse.gmf.graphdef.codegen.templates;

import org.eclipse.gmf.gmfgraph.*;
import org.eclipse.gmf.gmfgraph.util.*;
import org.eclipse.gmf.common.codegen.*;
import org.eclipse.gmf.graphdef.codegen.*;
import java.util.*;

public class TopShapeGenerator
{
  protected static String nl;
  public static synchronized TopShapeGenerator create(String lineSeparator)
  {
    nl = lineSeparator;
    TopShapeGenerator result = new TopShapeGenerator();
    nl = null;
    return result;
  }

  protected final String NL = nl == null ? (System.getProperties().getProperty("line.separator")) : nl;
  protected final String TEXT_1 = "";
  protected final String TEXT_2 = NL + NL + "/**" + NL + " * @@generated" + NL + " */" + NL + "public class ";
  protected final String TEXT_3 = " extends ";
  protected final String TEXT_4 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_5 = "() {";
  protected final String TEXT_6 = "\t" + NL + "\t\t";
  protected final String TEXT_7 = NL + "\t\t";
  protected final String TEXT_8 = NL + "\t\t" + NL + "\t\t";
  protected final String TEXT_9 = " ";
  protected final String TEXT_10 = " = createFigure";
  protected final String TEXT_11 = "();" + NL + "\t\tsetFigure";
  protected final String TEXT_12 = "(";
  protected final String TEXT_13 = ");" + NL + "\t\tadd(";
  protected final String TEXT_14 = ");" + NL + "\t\t";
  protected final String TEXT_15 = "\t\t";
  protected final String TEXT_16 = NL + "\t}" + NL;
  protected final String TEXT_17 = NL + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_18 = " f";
  protected final String TEXT_19 = "; " + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
  protected final String TEXT_20 = " getFigure";
  protected final String TEXT_21 = "() {" + NL + "\t\treturn f";
  protected final String TEXT_22 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFigure";
  protected final String TEXT_23 = "(";
  protected final String TEXT_24 = " figure) {" + NL + "\t\tf";
  protected final String TEXT_25 = " = figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate ";
  protected final String TEXT_26 = " createFigure";
  protected final String TEXT_27 = "() {";
  protected final String TEXT_28 = NL;
  protected final String TEXT_29 = NL;
  protected final String TEXT_30 = NL + "\t\treturn ";
  protected final String TEXT_31 = ";" + NL + "\t}" + NL;
  protected final String TEXT_32 = NL;
  protected final String TEXT_33 = NL;
  protected final String TEXT_34 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean myUseLocalCoordinates = ";
  protected final String TEXT_35 = ";" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean useLocalCoordinates() {" + NL + "\t\treturn myUseLocalCoordinates;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setUseLocalCoordinates(boolean useLocalCoordinates) {" + NL + "\t\tmyUseLocalCoordinates = useLocalCoordinates;" + NL + "\t}" + NL + "\t";
  protected final String TEXT_36 = NL + "}";
  protected final String TEXT_37 = NL;

  public String generate(Object argument)
  {
    final StringBuffer stringBuffer = new StringBuffer();
    
Object[] args = (Object[]) argument;
Shape figure = (Shape) args[0];
final ImportAssistant importManager = (ImportAssistant) args[1];
final FigureQualifiedNameSwitch fqnSwitch = (FigureQualifiedNameSwitch) args[2];
final GraphDefDispatcher dispatcher = (GraphDefDispatcher) args[3];

    stringBuffer.append(TEXT_1);
    importManager.markImportLocation(stringBuffer);
    stringBuffer.append(TEXT_2);
    stringBuffer.append(figure.getName());
    stringBuffer.append(TEXT_3);
    stringBuffer.append(fqnSwitch.get(figure, importManager));
    stringBuffer.append(TEXT_4);
    stringBuffer.append(figure.getName());
    stringBuffer.append(TEXT_5);
    
GraphDefDispatcher.LayoutArgs dispatcherArgs = dispatcher.createLayoutArgs(figure, "this", "myGenLayoutManager", null);

    stringBuffer.append(TEXT_6);
    stringBuffer.append(dispatcher.dispatch("createLayout", dispatcherArgs));
    stringBuffer.append(TEXT_7);
    stringBuffer.append(dispatcher.dispatch(figure, dispatcherArgs));
    
for (Iterator it = figure.getResolvedChildren().iterator(); it.hasNext();) {
		Figure next = (Figure) it.next();
		final String childVarName = "child" + next.getName();
    stringBuffer.append(TEXT_8);
    stringBuffer.append(fqnSwitch.get(next, importManager));
    stringBuffer.append(TEXT_9);
    stringBuffer.append(childVarName);
    stringBuffer.append(TEXT_10);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_11);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_12);
    stringBuffer.append(childVarName);
    stringBuffer.append(TEXT_13);
    stringBuffer.append(childVarName);
    stringBuffer.append(TEXT_14);
    stringBuffer.append(dispatcher.dispatch("createLayoutData", dispatcher.createLayoutArgs(next, childVarName, dispatcherArgs.getManagerVariableName(), "layoutData" + next.getName())));
    stringBuffer.append(TEXT_15);
    }
    stringBuffer.append(TEXT_16);
    
int fc = 0;
for (Iterator it = figure.getResolvedChildren().iterator(); it.hasNext(); fc++) {
	Figure next = (Figure) it.next();
	final String nextClassName = fqnSwitch.get(next, importManager);
    stringBuffer.append(TEXT_17);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_18);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_19);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_20);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_21);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_22);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_23);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_24);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_25);
    stringBuffer.append(nextClassName);
    stringBuffer.append(TEXT_26);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_27);
     GraphDefDispatcher.LayoutArgs childFigureArgs = dispatcher.createLayoutArgs(next, next.getName(), "layoutManager" + next.getName(), null);
    stringBuffer.append(TEXT_28);
    stringBuffer.append(dispatcher.dispatch("instantiate", childFigureArgs));
    stringBuffer.append(TEXT_29);
    stringBuffer.append(dispatcher.dispatch("Children", new Object[] {next.getChildren(), dispatcher, childFigureArgs}));
    stringBuffer.append(TEXT_30);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_31);
    }
    stringBuffer.append(TEXT_32);
    if (false == figure instanceof Polyline) {/*no much sense to define useLocalCoordinates for polyline and its descendants*/
    stringBuffer.append(TEXT_33);
    
// simple heuristic to detect need for local coordinates
boolean useLocalDefaultValue = false;
for (java.util.Iterator it = figure.getChildren().iterator(); it.hasNext(); ) {
	if (it.next() instanceof Polyline) {
		useLocalDefaultValue = true;
		break;
	}
}

    stringBuffer.append(TEXT_34);
    stringBuffer.append(useLocalDefaultValue);
    stringBuffer.append(TEXT_35);
    }
    stringBuffer.append(TEXT_36);
    importManager.emitSortedImports();
    stringBuffer.append(TEXT_37);
    return stringBuffer.toString();
  }
}
@


1.12
log
@#135015 some heuristic to provide valid default useLocalCoordinates.
@
text
@@


1.11
log
@Switching to eclipse M6.
@
text
@d24 1
a24 1
  protected final String TEXT_4 = " {" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate boolean myUseLocalCoordinates;" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d52 1
a52 1
  protected final String TEXT_32 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean useLocalCoordinates() {" + NL + "\t\treturn myUseLocalCoordinates;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setUseLocalCoordinates(boolean useLocalCoordinates) {" + NL + "\t\tmyUseLocalCoordinates = useLocalCoordinates;" + NL + "\t}" + NL + "}";
d54 4
d142 17
d160 1
a160 1
    stringBuffer.append(TEXT_33);
@


1.10
log
@[mgolubev] #134097 Invalid code is generated for the node figure with XYLayout
@
text
@d57 1
a57 1
    StringBuffer stringBuffer = new StringBuffer();
@


1.9
log
@add @@generated tag
@
text
@d50 4
a53 3
  protected final String TEXT_30 = NL + "\t\treturn rv;" + NL + "\t}" + NL;
  protected final String TEXT_31 = NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected boolean useLocalCoordinates() {" + NL + "\t\treturn myUseLocalCoordinates;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setUseLocalCoordinates(boolean useLocalCoordinates) {" + NL + "\t\tmyUseLocalCoordinates = useLocalCoordinates;" + NL + "\t}" + NL + "}";
  protected final String TEXT_32 = NL;
d128 1
d130 1
a130 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create(next, "rv")));
d132 1
a132 1
    stringBuffer.append(dispatcher.dispatch("Children", new Object[] {next.getChildren(), dispatcher, "rv"}));
d134 2
d137 1
a137 1
    stringBuffer.append(TEXT_31);
d139 1
a139 1
    stringBuffer.append(TEXT_32);
@


1.8
log
@explicit method names for fqn switch to better reflect it's intention
@
text
@d37 1
a37 1
  protected final String TEXT_17 = NL + NL + "\tprivate ";
@


1.7
log
@#131550 typed accessor to child figures
@
text
@d61 1
a61 1
final GMFGraphSwitch fqnSwitch = (GMFGraphSwitch) args[2];
d69 1
a69 1
    stringBuffer.append(importManager.getImportedName((String) fqnSwitch.doSwitch(figure)));
d85 1
a85 1
    stringBuffer.append(importManager.getImportedName((String) fqnSwitch.doSwitch(next)));
d105 1
a105 1
	final String nextClassName = importManager.getImportedName((String) fqnSwitch.doSwitch(next));
@


1.6
log
@Adding "setUseLocalCoordinates" method.
Useful for inner shape-figures located outside of compartment.
@
text
@a65 4
    
importManager.addImport("org.eclipse.draw2d.IFigure");
final String draw2d_IFigure = importManager.getImportedName("org.eclipse.draw2d.IFigure");

d85 1
a85 1
    stringBuffer.append(draw2d_IFigure);
d105 1
d107 1
a107 1
    stringBuffer.append(draw2d_IFigure);
d111 1
a111 1
    stringBuffer.append(draw2d_IFigure);
d119 1
a119 1
    stringBuffer.append(draw2d_IFigure);
d123 1
a123 1
    stringBuffer.append(draw2d_IFigure);
@


1.5
log
@[michael.golubev] #128620 Split org.eclipse.gmf.codegen.util.Generator
@
text
@d24 1
a24 1
  protected final String TEXT_4 = " {" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic ";
d51 1
a51 1
  protected final String TEXT_31 = NL + "}";
@


1.4
log
@[mgolubev] #127252 layout support
@
text
@d28 25
a52 20
  protected final String TEXT_8 = NL + "\t\t" + NL + "\t\torg.eclipse.draw2d.IFigure ";
  protected final String TEXT_9 = " = createFigure";
  protected final String TEXT_10 = "();" + NL + "\t\tsetFigure";
  protected final String TEXT_11 = "(";
  protected final String TEXT_12 = ");" + NL + "\t\tadd(";
  protected final String TEXT_13 = ");" + NL + "\t\t";
  protected final String TEXT_14 = "\t\t";
  protected final String TEXT_15 = NL + "\t}" + NL;
  protected final String TEXT_16 = NL + NL + "\tprivate IFigure f";
  protected final String TEXT_17 = "; " + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getFigure";
  protected final String TEXT_18 = "() {" + NL + "\t\treturn f";
  protected final String TEXT_19 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFigure";
  protected final String TEXT_20 = "(IFigure figure) {" + NL + "\t\tf";
  protected final String TEXT_21 = " = figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createFigure";
  protected final String TEXT_22 = "() {";
  protected final String TEXT_23 = NL;
  protected final String TEXT_24 = NL;
  protected final String TEXT_25 = NL + "\t\treturn rv;" + NL + "\t}" + NL;
  protected final String TEXT_26 = NL + "}";
  protected final String TEXT_27 = NL;
d66 4
d89 2
a91 2
    stringBuffer.append(TEXT_9);
    stringBuffer.append(next.getName());
d95 1
a95 1
    stringBuffer.append(childVarName);
d99 2
d102 1
a102 1
    stringBuffer.append(TEXT_14);
d104 1
a104 1
    stringBuffer.append(TEXT_15);
a108 2
    stringBuffer.append(TEXT_16);
    stringBuffer.append(next.getName());
d110 1
a110 1
    stringBuffer.append(next.getName());
d114 1
a114 1
    stringBuffer.append(next.getName());
d120 1
d122 9
d132 1
a132 1
    stringBuffer.append(TEXT_24);
d134 1
a134 1
    stringBuffer.append(TEXT_25);
d136 1
a136 1
    stringBuffer.append(TEXT_26);
d138 1
a138 1
    stringBuffer.append(TEXT_27);
@


1.3
log
@[mgolubev] #127252 layout support
@
text
@d69 1
a69 1
GraphDefDispatcher.LayoutArgs dispatcherArgs = dispatcher.createLayoutArgs(figure, "this", "myGenLayoutManager");
d90 1
a90 1
    stringBuffer.append(dispatcher.dispatch("createLayoutData", dispatcher.createLayoutArgs(next, childVarName, "layout" + next.getName())));
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d6 1
a6 1
import org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher;
d25 23
a47 18
  protected final String TEXT_5 = "() {" + NL + "\t\t";
  protected final String TEXT_6 = NL + "\t\tsetFigure";
  protected final String TEXT_7 = "(createFigure";
  protected final String TEXT_8 = "());" + NL + "\t\tadd(getFigure";
  protected final String TEXT_9 = "());";
  protected final String TEXT_10 = NL + "\t}" + NL;
  protected final String TEXT_11 = NL + NL + "\tprivate IFigure f";
  protected final String TEXT_12 = "; " + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tpublic IFigure getFigure";
  protected final String TEXT_13 = "() {" + NL + "\t\treturn f";
  protected final String TEXT_14 = ";" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprotected void setFigure";
  protected final String TEXT_15 = "(IFigure figure) {" + NL + "\t\tf";
  protected final String TEXT_16 = " = figure;" + NL + "\t}" + NL + "" + NL + "\t/**" + NL + "\t * @@generated" + NL + "\t */" + NL + "\tprivate IFigure createFigure";
  protected final String TEXT_17 = "() {";
  protected final String TEXT_18 = NL;
  protected final String TEXT_19 = NL;
  protected final String TEXT_20 = NL + "\t\treturn rv;" + NL + "\t}" + NL;
  protected final String TEXT_21 = NL + "}";
  protected final String TEXT_22 = NL;
d68 7
a74 1
    stringBuffer.append(dispatcher.dispatch(figure, dispatcher.create(figure, "this")));
d78 4
a81 1
    stringBuffer.append(TEXT_6);
d83 1
a83 1
    stringBuffer.append(TEXT_7);
d85 7
a91 3
    stringBuffer.append(TEXT_8);
    stringBuffer.append(next.getName());
    stringBuffer.append(TEXT_9);
d93 1
a93 1
    stringBuffer.append(TEXT_10);
d98 1
a98 1
    stringBuffer.append(TEXT_11);
d100 1
a100 1
    stringBuffer.append(TEXT_12);
d102 1
a102 1
    stringBuffer.append(TEXT_13);
d104 1
a104 1
    stringBuffer.append(TEXT_14);
d106 1
a106 1
    stringBuffer.append(TEXT_15);
d108 1
a108 1
    stringBuffer.append(TEXT_16);
d110 2
a111 2
    stringBuffer.append(TEXT_17);
    stringBuffer.append(TEXT_18);
d113 1
a113 1
    stringBuffer.append(TEXT_19);
d115 1
a115 1
    stringBuffer.append(TEXT_20);
d117 1
a117 1
    stringBuffer.append(TEXT_21);
d119 1
a119 1
    stringBuffer.append(TEXT_22);
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d6 1
a6 1
import org.eclipse.gmf.graphdef.codegen.Dispatcher;
d51 2
a52 2
final GMFGraphSwitch fqnSwitch = new FigureQualifiedNameSwitch();
final Dispatcher dispatcher = (Dispatcher) args[2];
d63 1
a63 1
    stringBuffer.append(dispatcher.dispatch(figure, dispatcher.create(figure, "this", importManager, fqnSwitch)));
d94 1
a94 1
    stringBuffer.append(dispatcher.dispatch("instantiate", dispatcher.create(next, "rv", importManager, fqnSwitch)));
d96 1
a96 1
    stringBuffer.append(dispatcher.dispatch("Children", new Object[] {next.getChildren(), importManager, fqnSwitch, dispatcher, "rv"}));
@

