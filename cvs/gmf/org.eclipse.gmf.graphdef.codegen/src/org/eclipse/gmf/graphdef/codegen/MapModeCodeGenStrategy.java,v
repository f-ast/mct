head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080807-1333:1.4
	v20080806-1520:1.4
	v20080731-1520:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.4
	v20071214-1111:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070608-1300:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070330-1300:1.4
	v20060316-0600:1.4
	v20070307-0700:1.4
	v20070228-2000:1.4
	v20070208-1800:1.4
	M4_20:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061117-0800:1.4
	v20061027-1200:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060904-1500:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060626-1420:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	v20060530-1930:1.2
	v20060526-1200:1.2
	v20060519-1300:1.2
	v20060519-0800:1.2
	I20060505-1400:1.2
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.11.02.21.58.37;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.11.02.17.38.23;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.05.01.17.26.39;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.24.15.11.34;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@/*
 * Copyright (c) 2006 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Michael Golubev (Borland) - initial API and implementation
 *    Artem Tikhomirov (Borland) - redesigned as enumeration
 */
package org.eclipse.gmf.graphdef.codegen;

/**
 * @@author artem
 */
public enum MapModeCodeGenStrategy { 
	STATIC(""), 
	DYNAMIC("rt_mm");

	private final String token;

	private MapModeCodeGenStrategy(String token) {
		assert token != null;
		this.token = token;
	}

	/**
	 * @@return identifying token of this strategy 
	 */
	public String getToken() {
		return token;
	}
}
@


1.3
log
@moving towards jet-to-xpand switch
@
text
@d18 3
a20 3
public enum MapModeCodeGenStrategy {
	
	StaticIdentity,
d22 13
a34 1
	DYNAMIC,
@


1.2
log
@[bblajer] ##139022 Provide option to choose mapMode for figures
@
text
@d11 1
d15 4
a18 15
import org.eclipse.gmf.common.codegen.ImportAssistant;

public abstract class MapModeCodeGenStrategy {
	public abstract String LPtoDP(int logicalUnit);
	public abstract String DPtoLP(int deviceUnit);
	
	public static class StaticIdentityMapMode extends MapModeCodeGenStrategy {
		public String DPtoLP(int deviceUnit) {
			return String.valueOf(deviceUnit);
		}
		
		public String LPtoDP(int logicalUnit) {
			return String.valueOf(logicalUnit);
		}
	}
d20 1
a20 20
	public static class RuntimeUnspecifiedMapMode extends MapModeCodeGenStrategy {
		public String DPtoLP(int deviceUnit) {
			StringBuffer result = new StringBuffer();
			result.append(getMapModeAccessor());
			result.append('.');
			result.append("DPtoLP(");
			result.append(deviceUnit);
			result.append(')');
			return result.toString();
		}
		
		public String LPtoDP(int logicalUnit) {
			StringBuffer result = new StringBuffer();
			result.append(getMapModeAccessor());
			result.append('.');
			result.append("LPtoDP(");
			result.append(logicalUnit);
			result.append(')');
			return result.toString();
		}
d22 1
a22 26
		protected String getMapModeAccessor(){
			return "getMapMode()";
		}
	}
	
	public static class RuntimeMapModeFromPluginClass extends RuntimeUnspecifiedMapMode {
		private final String myPluginActivatorClassFQN;
		private final ImportAssistant myImportAssistant;

		public RuntimeMapModeFromPluginClass(ImportAssistant importAssistant, String pluginActivatorClassFQN){
			myImportAssistant = importAssistant;
			myPluginActivatorClassFQN = pluginActivatorClassFQN;
		}
		
		public ImportAssistant getImportAssistant() {
			return myImportAssistant;
		}
	
		protected String getMapModeAccessor() {
			StringBuffer result = new StringBuffer();
			result.append(getImportAssistant().getImportedName(myPluginActivatorClassFQN));
			result.append('.');
			result.append("getDefault().getMapMode()");
			return result.toString();
		}
	}
@


1.1
log
@[mgolubev] #129328 handle MapMode access in a variety of ways
@
text
@a16 2
	private final ImportAssistant myImportAssistant;

a19 8
	public MapModeCodeGenStrategy(ImportAssistant importAssistant){
		myImportAssistant = importAssistant;
	}
	
	public ImportAssistant getImportAssistant() {
		return myImportAssistant;
	}
	
a20 4
		public StaticIdentityMapMode(ImportAssistant importAssistant){
			super(importAssistant);
		}
		
a30 4
		public RuntimeUnspecifiedMapMode(ImportAssistant importAssistant){
			super(importAssistant);
		}
		
d58 1
d61 1
a61 1
			super(importAssistant);
d65 4
@

