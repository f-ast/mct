head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	v20061027-1200:1.5
	v20061013-1330:1.5
	v20060925-1700:1.5
	v20060919-0800:1.5
	M1_20:1.5
	v20060904-1500:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060626-1420:1.5
	v20060616-1200:1.5
	v20060531-1730:1.5
	v20060530-1930:1.5
	v20060526-1200:1.5
	v20060519-1300:1.5
	v20060519-0800:1.5
	I20060505-1400:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.11.02.21.58.37;	author atikhomirov;	state dead;
branches;
next	1.5;

1.5
date	2006.03.13.17.53.19;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.15.14.44.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.17.36.17;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.23;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@<%@@ jet package="org.eclipse.gmf.graphdef.codegen.templates" class="NewFigureGenerator"
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.graphdef.codegen.*"%>
<%
GraphDefDispatcher.Args args = (GraphDefDispatcher.Args) argument;
final Figure figureInstance = args.getFigure();
final String figureVarName = args.getVariableName();
final GraphDefDispatcher dispatcher = args.getDispatcher();
final String figureClassName = dispatcher.getFQNSwitch().get(figureInstance, dispatcher.getImportManager());

// PRODUCES instance AND (!) initializes attributes
%>
<%=figureClassName%> <%=figureVarName%> = new <%=figureClassName%>();
<%=args.getDispatcher().dispatch(figureInstance, args)%>
<%=args.getDispatcher().dispatch("createLayout", dispatcher.getLayoutArgsFor(args))%>
@


1.5
log
@explicit method names for fqn switch to better reflect it's intention
@
text
@@


1.4
log
@[mgolubev] #127252 layout support
@
text
@d8 1
a8 1
final String figureClassName = dispatcher.getImportManager().getImportedName((String) dispatcher.getFQNSwitch().doSwitch(figureInstance));
@


1.3
log
@[mgolubev] #127252 layout support
@
text
@d14 1
a14 1
<%=args.getDispatcher().dispatch("createLayout", dispatcher.createLayoutArgs(args))%>
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher"%>
d13 2
a14 1
<%=args.getDispatcher().dispatch(figureInstance, args)%>@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.graphdef.codegen.Dispatcher"%>
d4 1
a4 1
Dispatcher.Args args = (Dispatcher.Args) argument;
d7 2
a8 2
final ImportAssistant importManager = args.getImportManager();
final String figureClassName = importManager.getImportedName((String) args.getFQNSwitch().doSwitch(figureInstance));
@

