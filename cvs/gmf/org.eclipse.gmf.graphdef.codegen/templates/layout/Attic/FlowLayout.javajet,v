head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080806-1520:1.4
	v20080731-1520:1.4
	v20061027-1200:1.3
	v20061013-1330:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060904-1500:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060626-1420:1.3
	v20060616-1200:1.3
	v20060531-1730:1.3
	v20060530-1930:1.3
	v20060526-1200:1.3
	v20060519-1300:1.3
	v20060519-0800:1.3
	I20060505-1400:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2006.11.02.21.58.38;	author atikhomirov;	state dead;
branches;
next	1.3;

1.3
date	2006.03.13.17.53.19;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.16.17.23.51;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.15.14.44.35;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@JET templates for gmfgraph model replaced with Xpand counterparts.
MapMode handling simplified
@
text
@<%@@ jet package="org.eclipse.gmf.graphdef.codegen.templates" class="InitFlowLayoutGenerator"
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.graphdef.codegen.*"%>
<%
GraphDefDispatcher.LayoutArgs argsBundle = (GraphDefDispatcher.LayoutArgs) argument;
final FlowLayout gmfLayout = (FlowLayout) argsBundle.getLayout();
final String layouterVarName = argsBundle.getManagerVariableName();
final GraphDefDispatcher dispatcher = argsBundle.getDispatcher();
final String layouterClassName = dispatcher.getFQNSwitch().get(gmfLayout, dispatcher.getImportManager());

class AlignmentConverter {
	private final String myBegin;
	private final String myCenter;
	private final String myEnd;
	
	public AlignmentConverter(String begin, String center, String end){
		myBegin = begin;
		myCenter = center;
		myEnd = end;
	}
	
	public String convert(Alignment alignment){
		if (alignment == null){
			alignment = Alignment.BEGINNING_LITERAL;
		}
		switch (alignment.getValue()){
			case Alignment.BEGINNING : 
				return myBegin;
			case Alignment.END :
				return myEnd;
			case Alignment.FILL:
			case Alignment.CENTER:
				return myCenter;
			default:
				throw new IllegalArgumentException("Unknown alignment: " + alignment);
		}
	}
}

class AlignmentFacade {
	public String convert(FlowLayout layout, Alignment alignment){
		return getConverter(layout).convert(alignment);
	}
	
	private AlignmentConverter getConverter(FlowLayout layout){
		return layout.isForceSingleLine() ? 
			new AlignmentConverter("ALIGN_TOPLEFT", "ALIGN_CENTER", "ALIGN_BOTTOMRIGHT") : 
			new AlignmentConverter("ALIGN_LEFTTOP", "ALIGN_CENTER", "ALIGN_RIGHTBOTTOM");
	}
}

final AlignmentFacade alignmentFacade = new AlignmentFacade();
%>
		<%=layouterVarName%>.setStretchMinorAxis(<%=gmfLayout.isMatchMinorSize()%>);
		<%=layouterVarName%>.setMinorAlignment(<%=layouterClassName%>.<%=alignmentFacade.convert(gmfLayout, gmfLayout.getMinorAlignment())%>);
<%
if (gmfLayout.isForceSingleLine()){
%>		
		<%=layouterVarName%>.setSpacing(<%=gmfLayout.getMajorSpacing()%>);
		<%=layouterVarName%>.setVertical(<%=gmfLayout.isVertical()%>);
<%
} else {
%>
		<%=layouterVarName%>.setMajorAlignment(<%=layouterClassName%>.<%=alignmentFacade.convert(gmfLayout, gmfLayout.getMajorAlignment())%>);
		<%=layouterVarName%>.setMajorSpacing(<%=gmfLayout.getMajorSpacing()%>);
		<%=layouterVarName%>.setMinorSpacing(<%=gmfLayout.getMinorSpacing()%>);
		<%=layouterVarName%>.setHorizontal(<%=!gmfLayout.isVertical()%>);
<%
} 
%>


@


1.3
log
@explicit method names for fqn switch to better reflect it's intention
@
text
@@


1.2
log
@[mgolubev] uncompilable code using ToolbarLayout
@
text
@d8 1
a8 1
final String layouterClassName = dispatcher.getImportManager().getImportedName((String) dispatcher.getFQNSwitch().doSwitch(gmfLayout));
@


1.1
log
@[mgolubev] #127252 layout support
@
text
@d7 2
d11 10
d27 1
a27 1
				return "ALIGN_LEFTTOP";
d29 1
a29 1
				return "ALIGN_RIGHTBOTTOM";
d32 1
a32 1
				return "ALIGN_CENTER";
d39 13
a51 1
final AlignmentConverter alignmentConverter = new AlignmentConverter();
d54 1
a54 1
		<%=layouterVarName%>.setMinorAlignment(<%=alignmentConverter.convert(gmfLayout.getMinorAlignment())%>);
d63 1
a63 1
		<%=layouterVarName%>.setMajorAlignment(<%=alignmentConverter.convert(gmfLayout.getMajorAlignment())%>);
@

