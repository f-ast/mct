head	1.6;
access;
symbols
	v20080813-1520:1.6
	v20080806-1520:1.6
	v20080731-1520:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.6
date	2006.02.06.18.10.23;	author atikhomirov;	state dead;
branches;
next	1.5;

1.5
date	2006.02.05.23.00.50;	author atikhomirov;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.04.22.34.49;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.01.25.14.02.29;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.07.16.50.43;	author ashatalin;	state Exp;
branches;
next	1.1;

1.1
date	2006.01.06.19.17.28;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.6
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@<%@@ jet package="org.eclipse.gmf.graphdef.codegen.templates" class="ShapeGenerator"
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.graphdef.codegen.Dispatcher java.util.*"%>
<%
Object[] args = (Object[]) argument;
Shape shapeFig = (Shape) args[0];
final ImportAssistant importManager = (ImportAssistant) args[1];
final GMFGraphSwitch fqnSwitch = new FigureQualifiedNameSwitch();
final Dispatcher dispatcher = (Dispatcher) args[2];
%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=shapeFig.getName()%> extends <%=importManager.getImportedName((String) fqnSwitch.doSwitch(shapeFig))%> {

	/**
	 * @@generated
	 */
	public <%=shapeFig.getName()%>() {
<%=dispatcher.dispatch("ShapeAttrs", dispatcher.create(shapeFig, "this", importManager, fqnSwitch))%>
<%
for (Iterator it = shapeFig.getResolvedChildren().iterator(); it.hasNext();) {
		Figure next = (Figure) it.next();%>
		setFigure<%=next.getName()%>(createFigure<%=next.getName()%>());
		add(getFigure<%=next.getName()%>());
<%}%>
	}

<%
int fc = 0;
for (Iterator it = shapeFig.getResolvedChildren().iterator(); it.hasNext(); fc++) {
	Figure figure = (Figure) it.next();%>

	private IFigure f<%=figure.getName()%>; 

	/**
	 * @@generated
	 */
	public IFigure getFigure<%=figure.getName()%>() {
		return f<%=figure.getName()%>;
	}

	/**
	 * @@generated
	 */
	protected void setFigure<%=figure.getName()%>(IFigure figure) {
		f<%=figure.getName()%> = figure;
	}

	/**
	 * @@generated
	 */
	private IFigure createFigure<%=figure.getName()%>() {
<%
String parentFigureVarName = "rv" + fc;
{ // scope
FigureMarker figureMarker = figure;
String figureVarName = parentFigureVarName;%>
<%@@ include file="instantiate.jetinc" %><%}%>
<%@@ include file="FigureChildren.jetinc" %>
		return <%=parentFigureVarName%>;
	}

<%}%>
}<%importManager.emitSortedImports();%>@


1.5
log
@provisional framework that supports (double-)dispatch from templates to
a) avoid lengthy if instanceof elseif checks,
b) solve scope and name visibility issues when extracting common code into jetinc
@
text
@@


1.4
log
@provide option to use importManager
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* org.eclipse.gmf.common.codegen.* java.util.*"%>
d8 1
d22 1
d24 1
a24 7
{
Shape figureInstance = shapeFig;
String figureVarName = "this";
%>
<%@@ include file="ShapeAttrs.jetinc" %>
<%
}for (Iterator it = shapeFig.getResolvedChildren().iterator(); it.hasNext();) {
@


1.3
log
@support Figure.color attributes
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* java.util.*"%>
d4 3
a6 1
Shape shapeFig = (Shape) argument;
d10 2
d15 1
a15 1
public class <%=shapeFig.getName()%> extends <%=fqnSwitch.doSwitch(shapeFig)%> {
d71 1
a71 1
}@


1.2
log
@@@generated comments ws added
@
text
@d19 2
a20 2
Shape shapeFigure = shapeFig;
String shapeVarName = "this";
@


1.1
log
@ some templates to support #114177 (graphical definition model) - with GEF IFigure code as an outcome
@
text
@d8 3
d13 3
d38 3
d45 3
d52 3
@

