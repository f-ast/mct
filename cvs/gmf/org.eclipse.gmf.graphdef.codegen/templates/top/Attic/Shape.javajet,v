head	1.12;
access;
symbols
	v20080813-1520:1.12
	v20080806-1520:1.12
	v20080731-1520:1.12
	R1_0_maintenance:1.12.0.2
	R1_0:1.12
	M6_10:1.11
	I20060407-1200:1.10
	I20060331-1000:1.10
	I20060324-0300:1.9
	I20060317-1300:1.9
	I20060317-1200:1.9
	I20060316-1300:1.9
	I20060309-1300:1.6
	M5_10:1.6
	S20060303-1600:1.6
	I20060227-1730:1.5
	I20060216-1945:1.4
	I20060210-1715:1.2
	I20060209-1815:1.2;
locks; strict;
comment	@# @;
expand	@k@;


1.12
date	2006.04.21.17.47.10;	author atikhomirov;	state dead;
branches;
next	1.11;

1.11
date	2006.04.13.15.03.34;	author atikhomirov;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.30.22.39.09;	author atikhomirov;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.14.16.31.47;	author dstadnik;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.13.17.53.19;	author atikhomirov;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.13.17.25.22;	author atikhomirov;	state Exp;
branches;
next	1.6;

1.6
date	2006.02.27.17.40.11;	author ashatalin;	state Exp;
branches;
next	1.5;

1.5
date	2006.02.20.12.18.36;	author ashatalin;	state Exp;
branches;
next	1.4;

1.4
date	2006.02.15.14.44.35;	author atikhomirov;	state Exp;
branches;
next	1.3;

1.3
date	2006.02.13.17.36.17;	author atikhomirov;	state Exp;
branches;
next	1.2;

1.2
date	2006.02.06.22.21.42;	author atikhomirov;	state Exp;
branches;
next	1.1;

1.1
date	2006.02.06.18.10.22;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.12
log
@#137840 uncompiliable code if CustomFigure contains Label  - gmfgen expects getters generated for figure's children; besides, it makes no much sense to keep both Figure.javajet and Shape.javajet, with sole difference in the way they process children
@
text
@<%@@ jet package="org.eclipse.gmf.graphdef.codegen.templates" class="TopShapeGenerator" 
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.graphdef.codegen.* java.util.*"%>
<%
Object[] args = (Object[]) argument;
Shape figure = (Shape) args[0];
final ImportAssistant importManager = (ImportAssistant) args[1];
final FigureQualifiedNameSwitch fqnSwitch = (FigureQualifiedNameSwitch) args[2];
final GraphDefDispatcher dispatcher = (GraphDefDispatcher) args[3];
%>

<%importManager.markImportLocation(stringBuffer);%>

/**
 * @@generated
 */
public class <%=figure.getName()%> extends <%=fqnSwitch.get(figure, importManager)%> {

	/**
	 * @@generated
	 */
	public <%=figure.getName()%>() {
<%
GraphDefDispatcher.LayoutArgs dispatcherArgs = dispatcher.createLayoutArgs(figure, "this", "myGenLayoutManager", null);
%>	
		<%=dispatcher.dispatch("createLayout", dispatcherArgs)%>
		<%=dispatcher.dispatch(figure, dispatcherArgs)%>
<%
for (Iterator it = figure.getResolvedChildren().iterator(); it.hasNext();) {
		Figure next = (Figure) it.next();
		final String childVarName = "child" + next.getName();%>
		
		<%=fqnSwitch.get(next, importManager)%> <%=childVarName%> = createFigure<%=next.getName()%>();
		setFigure<%=next.getName()%>(<%=childVarName%>);
		add(<%=childVarName%>);
		<%=dispatcher.dispatch("createLayoutData", dispatcher.createLayoutArgs(next, childVarName, dispatcherArgs.getManagerVariableName(), "layoutData" + next.getName()))%>		
<%}%>
	}

<%
int fc = 0;
for (Iterator it = figure.getResolvedChildren().iterator(); it.hasNext(); fc++) {
	Figure next = (Figure) it.next();
	final String nextClassName = fqnSwitch.get(next, importManager);%>

	/**
	 * @@generated
	 */
	private <%=nextClassName%> f<%=next.getName()%>; 

	/**
	 * @@generated
	 */
	public <%=nextClassName%> getFigure<%=next.getName()%>() {
		return f<%=next.getName()%>;
	}

	/**
	 * @@generated
	 */
	protected void setFigure<%=next.getName()%>(<%=nextClassName%> figure) {
		f<%=next.getName()%> = figure;
	}

	/**
	 * @@generated
	 */
	private <%=nextClassName%> createFigure<%=next.getName()%>() {
<% GraphDefDispatcher.LayoutArgs childFigureArgs = dispatcher.createLayoutArgs(next, next.getName(), "layoutManager" + next.getName(), null);%>
<%=dispatcher.dispatch("instantiate", childFigureArgs)%>
<%=dispatcher.dispatch("Children", new Object[] {next.getChildren(), dispatcher, childFigureArgs})%>
		return <%=next.getName()%>;
	}

<%}%>

<%if (false == figure instanceof Polyline) {/*no much sense to define useLocalCoordinates for polyline and its descendants*/%>
<%@@ include file="localCoordinates.jetinc"%>
<%}%>
}<%importManager.emitSortedImports();%>
@


1.11
log
@#135015 some heuristic to provide valid default useLocalCoordinates.
@
text
@@


1.10
log
@[mgolubev] #134097 Invalid code is generated for the node figure with XYLayout
@
text
@a20 5
	private boolean myUseLocalCoordinates;

	/**
	 * @@generated
	 */
a74 6
	/**
	 * @@generated
	 */
	protected boolean useLocalCoordinates() {
		return myUseLocalCoordinates;
	}
d76 3
a78 6
	/**
	 * @@generated
	 */
	protected void setUseLocalCoordinates(boolean useLocalCoordinates) {
		myUseLocalCoordinates = useLocalCoordinates;
	}
@


1.9
log
@add @@generated tag
@
text
@d73 4
a76 3
<%=dispatcher.dispatch("instantiate", dispatcher.create(next, "rv"))%>
<%=dispatcher.dispatch("Children", new Object[] {next.getChildren(), dispatcher, "rv"})%>
		return rv;
@


1.8
log
@explicit method names for fqn switch to better reflect it's intention
@
text
@d50 3
@


1.7
log
@#131550 typed accessor to child figures
@
text
@d7 1
a7 1
final GMFGraphSwitch fqnSwitch = (GMFGraphSwitch) args[2];
d16 1
a16 1
public class <%=figure.getName()%> extends <%=importManager.getImportedName((String) fqnSwitch.doSwitch(figure))%> {
d37 1
a37 1
		<%=importManager.getImportedName((String) fqnSwitch.doSwitch(next))%> <%=childVarName%> = createFigure<%=next.getName()%>();
d48 1
a48 1
	final String nextClassName = importManager.getImportedName((String) fqnSwitch.doSwitch(next));%>
@


1.6
log
@Adding "setUseLocalCoordinates" method.
Useful for inner shape-figures located outside of compartment.
@
text
@a11 4
<%
importManager.addImport("org.eclipse.draw2d.IFigure");
final String draw2d_IFigure = importManager.getImportedName("org.eclipse.draw2d.IFigure");
%>
d37 1
a37 1
		<%=draw2d_IFigure%> <%=childVarName%> = createFigure<%=next.getName()%>();
d47 2
a48 1
	Figure next = (Figure) it.next();%>
d50 1
a50 1
	private <%=draw2d_IFigure%> f<%=next.getName()%>; 
d55 1
a55 1
	public <%=draw2d_IFigure%> getFigure<%=next.getName()%>() {
d62 1
a62 1
	protected void setFigure<%=next.getName()%>(<%=draw2d_IFigure%> figure) {
d69 1
a69 1
	private <%=draw2d_IFigure%> createFigure<%=next.getName()%>() {
@


1.5
log
@[michael.golubev] #128620 Split org.eclipse.gmf.codegen.util.Generator
@
text
@d21 6
d79 13
@


1.4
log
@[mgolubev] #127252 layout support
@
text
@d12 4
d35 1
a35 1
		org.eclipse.draw2d.IFigure <%=childVarName%> = createFigure<%=next.getName()%>();
d47 1
a47 1
	private IFigure f<%=next.getName()%>; 
d52 1
a52 1
	public IFigure getFigure<%=next.getName()%>() {
d59 1
a59 1
	protected void setFigure<%=next.getName()%>(IFigure figure) {
d66 1
a66 1
	private IFigure createFigure<%=next.getName()%>() {
@


1.3
log
@[mgolubev] #127252 layout support
@
text
@d22 1
a22 1
GraphDefDispatcher.LayoutArgs dispatcherArgs = dispatcher.createLayoutArgs(figure, "this", "myGenLayoutManager");
d34 1
a34 1
		<%=dispatcher.dispatch("createLayoutData", dispatcher.createLayoutArgs(next, childVarName, "layout" + next.getName()))%>		
@


1.2
log
@refactor - moved EmitterFactory/Dispatcher infrastructure to gmf.common to enable its use in oeg.codegen
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.graphdef.codegen.GraphDefDispatcher java.util.*"%>
d21 5
a25 1
		<%=dispatcher.dispatch(figure, dispatcher.create(figure, "this"))%>
d28 7
a34 3
		Figure next = (Figure) it.next();%>
		setFigure<%=next.getName()%>(createFigure<%=next.getName()%>());
		add(getFigure<%=next.getName()%>());
@


1.1
log
@major refactoring of gmfgraph codegen utilizing dispatcher infrastructure
@
text
@d2 1
a2 1
	imports="org.eclipse.gmf.gmfgraph.* org.eclipse.gmf.gmfgraph.util.* org.eclipse.gmf.common.codegen.* org.eclipse.gmf.graphdef.codegen.Dispatcher java.util.*"%>
d7 2
a8 2
final GMFGraphSwitch fqnSwitch = new FigureQualifiedNameSwitch();
final Dispatcher dispatcher = (Dispatcher) args[2];
d21 1
a21 1
		<%=dispatcher.dispatch(figure, dispatcher.create(figure, "this", importManager, fqnSwitch))%>
d55 2
a56 2
<%=dispatcher.dispatch("instantiate", dispatcher.create(next, "rv", importManager, fqnSwitch))%>
<%=dispatcher.dispatch("Children", new Object[] {next.getChildren(), importManager, fqnSwitch, dispatcher, "rv"})%>
@

