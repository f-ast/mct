head	1.4;
access;
symbols
	v20080813-1520:1.4
	v20080807-1333:1.4
	v20080806-1520:1.4
	v20080731-1520:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.2
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080528-1052:1.4
	v20080417-1610:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080207-0207:1.3.2.1
	v20071214-1111:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070809-0000:1.3.2.1
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070608-1300:1.3
	v20070605-1400:1.2
	v20070601-1400:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.09.28.18.51.59;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	51ac46fd4d4e4567;

1.3
date	2007.06.08.18.46.19;	author atikhomirov;	state Exp;
branches
	1.3.2.1;
next	1.2;
commitid	23e04669a3fb4567;

1.2
date	2007.06.05.19.16.11;	author atikhomirov;	state Exp;
branches;
next	1.1;
commitid	2c54665b67a4567;

1.1
date	2007.05.28.13.33.47;	author atikhomirov;	state Exp;
branches;
next	;
commitid	3e69465ada3a4567;

1.3.2.1
date	2007.09.28.19.00.13;	author atikhomirov;	state Exp;
branches;
next	;
commitid	5f1c46fd4f3d4567;


desc
@@


1.4
log
@[204940] child accessors to custom figure's internals are not generated correctly
@
text
@/*
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Artem Tikhomirov (Borland) - initial API and implementation
 */

«IMPORT "http://www.eclipse.org/gmf/2006/GraphicalDefinition"»
«IMPORT "http://www.eclipse.org/emf/2002/Ecore"»
«IMPORT "templates"»
«EXTENSION Util»

«DEFINE Top(String packageStmt) FOR gmfgraph::FigureDescriptor»
«IF packageStmt != null && packageStmt.length() > 0»package «packageStmt»;
«ENDIF-»
/**
 * @@generated
 */
public class «compilationUnitName()» extends «EXPAND Runtime::fqn FOR actualFigure» {
«EXPAND body»
«additionalStaticFields()»
}
«ENDDEFINE»



«DEFINE Inner FOR gmfgraph::FigureDescriptor»
/**
 * @@generated
 */
public class «compilationUnitName()» extends «EXPAND Runtime::fqn FOR actualFigure» {
«EXPAND body»
}
«additionalStaticFields()»
«ENDDEFINE»

«REM»«ENDREM»
«DEFINE body FOR gmfgraph::FigureDescriptor»

«EXPAND accessorField FOREACH accessors.select(a | !allCustomAccessors().typedFigure.contains(a.figure))»

«EXPAND Figure::ClassBody(compilationUnitName()) FOR actualFigure»

«EXPAND accessorToField FOREACH accessors.select(a | !allCustomAccessors().typedFigure.contains(a.figure))»
«FOREACH accessors.select(a | allCustomAccessors().typedFigure.contains(a.figure)) AS a-»
«EXPAND accessorToCustom(allCustomAccessors().select(fa | fa.typedFigure == a.figure)) FOR a»
«ENDFOREACH-»
«ENDDEFINE»


«DEFINE accessorField FOR gmfgraph::ChildAccess-»
	/**
	 * @@generated
	 */
	private «EXPAND Runtime::fqn FOR figure» «figureFieldName()»; 
«ENDDEFINE»

«REM»ChildAccess points to figure we've generated, there's a field for it«ENDREM»
«DEFINE accessorToField FOR gmfgraph::ChildAccess-»
	/**
	 * @@generated
	 */
	public «EXPAND Runtime::fqn FOR figure» «accessor»() {
		return «figureFieldName()»;
	}
«ENDDEFINE»

«REM»ChildAccess points to some child of a CustomFigure, need to delegate to it's accessor
Perhaps, should add support for ChildAccess not being generated (in case they are have same name as 
FigureAccessor.accessor
«ENDREM»
«DEFINE accessorToCustom(List[FigureAccessor] fa) FOR gmfgraph::ChildAccess-»
	/**
	 * @@generated
	 */
	public «EXPAND Runtime::fqn FOR figure» «accessor»() {
		return «fa.accessor.first()»;
	}
«ENDDEFINE»@


1.3
log
@copyright blurb
@
text
@d25 1
a25 7

«EXPAND accessorField FOREACH accessors»

«EXPAND Figure::ClassBody(compilationUnitName()) FOR actualFigure»

«EXPAND accessorMethod FOREACH accessors»

d37 4
d42 4
a45 1
«EXPAND accessorField FOREACH accessors»
d49 4
a52 3
«EXPAND accessorMethod FOREACH accessors»
}
«additionalStaticFields()»
d63 2
a64 2
«REM»XXX what happens when childAccess points to figure from FigureAccessor - we don't need field in that case«ENDREM»
«DEFINE accessorMethod FOR gmfgraph::ChildAccess-»
d73 12
@


1.3.2.1
log
@[204940] child accessors to custom figure's internals are not generated correctly - merged into 2.0 maintenance stream
@
text
@d25 7
a31 1
«EXPAND body»
a42 4
«EXPAND body»
}
«additionalStaticFields()»
«ENDDEFINE»
d44 1
a44 4
«REM»«ENDREM»
«DEFINE body FOR gmfgraph::FigureDescriptor»

«EXPAND accessorField FOREACH accessors.select(a | !allCustomAccessors().typedFigure.contains(a.figure))»
d48 3
a50 4
«EXPAND accessorToField FOREACH accessors.select(a | !allCustomAccessors().typedFigure.contains(a.figure))»
«FOREACH accessors.select(a | allCustomAccessors().typedFigure.contains(a.figure)) AS a-»
«EXPAND accessorToCustom(allCustomAccessors().select(fa | fa.typedFigure == a.figure)) FOR a»
«ENDFOREACH-»
d61 2
a62 2
«REM»ChildAccess points to figure we've generated, there's a field for it«ENDREM»
«DEFINE accessorToField FOR gmfgraph::ChildAccess-»
a70 12
«REM»ChildAccess points to some child of a CustomFigure, need to delegate to it's accessor
Perhaps, should add support for ChildAccess not being generated (in case they are have same name as 
FigureAccessor.accessor
«ENDREM»
«DEFINE accessorToCustom(List[FigureAccessor] fa) FOR gmfgraph::ChildAccess-»
	/**
	 * @@generated
	 */
	public «EXPAND Runtime::fqn FOR figure» «accessor»() {
		return «fa.accessor.first()»;
	}
«ENDDEFINE»@


1.2
log
@fix failing ViewmapProducersTest#testAbleToProcessFigureAccessor. ChildAccess should be the sole point to control naming for figure getters, hence NamingStrategy no needed any more. Plus, since ChildAccess always has a reference to figure, we may specify exact class names in ParentAssignedViewmap
@
text
@d1 12
@


1.1
log
@FigureDescriptor with explicit means to access children introduced into gmfgraph
@
text
@d49 1
d54 1
a54 1
	public «EXPAND Runtime::fqn FOR figure» «figureFieldGetter()»() {
@

