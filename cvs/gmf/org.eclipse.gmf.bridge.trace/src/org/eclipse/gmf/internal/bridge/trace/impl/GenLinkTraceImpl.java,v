head	1.4;
access;
symbols
	v20080722-1827:1.4
	v20080716-1642:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.3
	v20070413-1300:1.3
	v20070330-1300:1.2
	v20070208-1800:1.2
	M4_20:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061117-0800:1.2
	v20061013-1330:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060713-1700:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.05.12.03.17;	author ashatalin;	state Exp;
branches;
next	1.3;
commitid	1155466551044567;

1.3
date	2007.04.06.17.25.09;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	a27461682734567;

1.2
date	2006.10.18.14.21.17;	author dstadnik;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.10.18.06.02;	author ashatalin;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.11.12.35.54;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.4
log
@[190990] - Do not use deprecated org.eclipse.emf.ocl.query API in .bridge.trace plugin
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.internal.bridge.trace.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.codegen.gmfgen.FeatureLinkModelFacet;
import org.eclipse.gmf.codegen.gmfgen.GMFGenPackage;
import org.eclipse.gmf.codegen.gmfgen.GenLink;
import org.eclipse.gmf.codegen.gmfgen.TypeLinkModelFacet;
import org.eclipse.gmf.internal.bridge.trace.GenLinkLabelTrace;
import org.eclipse.gmf.internal.bridge.trace.GenLinkTrace;
import org.eclipse.gmf.internal.bridge.trace.TracePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Gen Link Trace</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.internal.bridge.trace.impl.GenLinkTraceImpl#getLinkLabelTraces <em>Link Label Traces</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class GenLinkTraceImpl extends MatchingTraceImpl implements GenLinkTrace {
	/**
	 * The cached value of the '{@@link #getLinkLabelTraces() <em>Link Label Traces</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLinkLabelTraces()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenLinkLabelTrace> linkLabelTraces;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected GenLinkTraceImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return TracePackage.Literals.GEN_LINK_TRACE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenLinkLabelTrace> getLinkLabelTraces() {
		if (linkLabelTraces == null) {
			linkLabelTraces = new EObjectContainmentEList<GenLinkLabelTrace>(GenLinkLabelTrace.class, this, TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES);
		}
		return linkLabelTraces;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void setContext(GenLink genLink) {
		StringBuffer result = new StringBuffer();
		if (genLink.getModelFacet() instanceof FeatureLinkModelFacet) {
			EStructuralFeature feature = ((FeatureLinkModelFacet) genLink.getModelFacet()).getMetaFeature().getEcoreFeature();
			result.append("modelFacet.oclIsKindOf(gmfgen::FeatureLinkModelFacet) and ");
			result.append("(let _feature_:ecore::EStructuralFeature = modelFacet.oclAsType(gmfgen::FeatureLinkModelFacet).metaFeature.ecoreFeature in ");
			result.append(getEStructuralFeatureComparison("_feature_", feature));
			result.append(")");
		} else if (genLink.getModelFacet() instanceof TypeLinkModelFacet) {
			EClass eClass = ((TypeLinkModelFacet) genLink.getModelFacet()).getMetaClass().getEcoreClass();
			result.append("modelFacet.oclIsKindOf(gmfgen::TypeLinkModelFacet) and ");
			result.append("(let _eClass_:ecore::EClass = modelFacet.oclAsType(gmfgen::TypeLinkModelFacet).metaClass.ecoreClass in ");
			result.append(getEClassComparision("_eClass_", eClass));
			result.append(")");
		} else if (genLink.getModelFacet() == null) {
			result.append("modelFacet = null");
		} else {
			throw new IllegalArgumentException("Incorrect gen link passed - Feature/TypeLinkModelFacet should be used");			
		}
		setQueryText(result.toString());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES:
				return ((InternalEList<?>)getLinkLabelTraces()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES:
				return getLinkLabelTraces();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES:
				getLinkLabelTraces().clear();
				getLinkLabelTraces().addAll((Collection<? extends GenLinkLabelTrace>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES:
				getLinkLabelTraces().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES:
				return linkLabelTraces != null && !linkLabelTraces.isEmpty();
		}
		return super.eIsSet(featureID);
	}
	
	public EClass getQueryContext() {
		return GMFGenPackage.eINSTANCE.getGenLink();
	}
	
} //GenLinkTraceImpl@


1.3
log
@[181417] - Update org.eclipse.gmf.bridge.trace/model/trace.ecore to EMF M6 + regenerate the code.
@
text
@a17 2
import org.eclipse.emf.ocl.query.Query;
import org.eclipse.emf.ocl.query.QueryFactory;
d181 3
a183 3

	public Query createQuery() {
		return QueryFactory.eINSTANCE.createQuery(getQueryText(), GMFGenPackage.eINSTANCE.getGenLink());
@


1.2
log
@#161380 simplify feature model facets
@
text
@d50 1
a50 1
	protected EList linkLabelTraces = null;
d66 1
d76 1
a76 1
	public EList getLinkLabelTraces() {
d78 1
a78 1
			linkLabelTraces = new EObjectContainmentEList(GenLinkLabelTrace.class, this, TracePackage.GEN_LINK_TRACE__LINK_LABEL_TRACES);
d115 1
d119 1
a119 1
				return ((InternalEList)getLinkLabelTraces()).basicRemove(otherEnd, msgs);
d129 1
d143 2
d149 1
a149 1
				getLinkLabelTraces().addAll((Collection)newValue);
d160 1
d175 1
@


1.1
log
@#148651 Plugin bridge.trace uses wrong namespace
@
text
@d20 1
a20 1
import org.eclipse.gmf.codegen.gmfgen.FeatureModelFacet;
d89 2
a90 2
		if (genLink.getModelFacet() instanceof FeatureModelFacet) {
			EStructuralFeature feature = ((FeatureModelFacet) genLink.getModelFacet()).getMetaFeature().getEcoreFeature();
@


1.1.2.1
log
@#148651 Plugin bridge.trace uses wrong namespace
@
text
@@

