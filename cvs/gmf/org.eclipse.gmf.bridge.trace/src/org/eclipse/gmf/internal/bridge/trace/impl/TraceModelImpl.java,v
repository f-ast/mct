head	1.3;
access;
symbols
	v20080722-1827:1.3
	v20080716-1642:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.2
	v20070413-1300:1.2
	v20070330-1300:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1
	M1_20:1.1
	v20060904-1500:1.1
	v20060713-1700:1.1.2.1
	R1_0_maintenance:1.1.0.2;
locks; strict;
comment	@# @;
expand	@k@;


1.3
date	2007.06.05.12.03.17;	author ashatalin;	state Exp;
branches;
next	1.2;
commitid	1155466551044567;

1.2
date	2007.04.06.17.12.06;	author ashatalin;	state Exp;
branches;
next	1.1;
commitid	25e846167f654567;

1.1
date	2006.07.10.18.06.02;	author ashatalin;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2006.07.11.12.35.54;	author ashatalin;	state Exp;
branches;
next	;


desc
@@


1.3
log
@[190990] - Do not use deprecated org.eclipse.emf.ocl.query API in .bridge.trace plugin
@
text
@/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.eclipse.gmf.internal.bridge.trace.impl;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.EObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.gmf.internal.bridge.trace.AbstractTrace;
import org.eclipse.gmf.internal.bridge.trace.GenChildNodeTrace;
import org.eclipse.gmf.internal.bridge.trace.GenLinkTrace;
import org.eclipse.gmf.internal.bridge.trace.GenNodeTrace;
import org.eclipse.gmf.internal.bridge.trace.GmfTracePlugin;
import org.eclipse.gmf.internal.bridge.trace.ToolGroupTrace;
import org.eclipse.gmf.internal.bridge.trace.TraceModel;
import org.eclipse.gmf.internal.bridge.trace.TracePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@@link org.eclipse.gmf.internal.bridge.trace.impl.TraceModelImpl#getNodeTraces <em>Node Traces</em>}</li>
 *   <li>{@@link org.eclipse.gmf.internal.bridge.trace.impl.TraceModelImpl#getChildNodeTraces <em>Child Node Traces</em>}</li>
 *   <li>{@@link org.eclipse.gmf.internal.bridge.trace.impl.TraceModelImpl#getLinkTraces <em>Link Traces</em>}</li>
 *   <li>{@@link org.eclipse.gmf.internal.bridge.trace.impl.TraceModelImpl#getToolGroupTraces <em>Tool Group Traces</em>}</li>
 * </ul>
 * </p>
 *
 * @@generated
 */
public class TraceModelImpl extends EObjectImpl implements TraceModel {
	/**
	 * The cached value of the '{@@link #getNodeTraces() <em>Node Traces</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getNodeTraces()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenNodeTrace> nodeTraces;

	/**
	 * The cached value of the '{@@link #getChildNodeTraces() <em>Child Node Traces</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getChildNodeTraces()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenChildNodeTrace> childNodeTraces;

	/**
	 * The cached value of the '{@@link #getLinkTraces() <em>Link Traces</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getLinkTraces()
	 * @@generated
	 * @@ordered
	 */
	protected EList<GenLinkTrace> linkTraces;

	/**
	 * The cached value of the '{@@link #getToolGroupTraces() <em>Tool Group Traces</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@see #getToolGroupTraces()
	 * @@generated
	 * @@ordered
	 */
	protected EList<ToolGroupTrace> toolGroupTraces;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	protected TraceModelImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	protected EClass eStaticClass() {
		return TracePackage.Literals.TRACE_MODEL;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenNodeTrace> getNodeTraces() {
		if (nodeTraces == null) {
			nodeTraces = new EObjectContainmentEList<GenNodeTrace>(GenNodeTrace.class, this, TracePackage.TRACE_MODEL__NODE_TRACES);
		}
		return nodeTraces;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenChildNodeTrace> getChildNodeTraces() {
		if (childNodeTraces == null) {
			childNodeTraces = new EObjectContainmentEList<GenChildNodeTrace>(GenChildNodeTrace.class, this, TracePackage.TRACE_MODEL__CHILD_NODE_TRACES);
		}
		return childNodeTraces;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<GenLinkTrace> getLinkTraces() {
		if (linkTraces == null) {
			linkTraces = new EObjectContainmentEList<GenLinkTrace>(GenLinkTrace.class, this, TracePackage.TRACE_MODEL__LINK_TRACES);
		}
		return linkTraces;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	public EList<ToolGroupTrace> getToolGroupTraces() {
		if (toolGroupTraces == null) {
			toolGroupTraces = new EObjectContainmentEList<ToolGroupTrace>(ToolGroupTrace.class, this, TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES);
		}
		return toolGroupTraces;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public GenNodeTrace getNodeTrace(int visualID) {
		for (GenNodeTrace trace : getNodeTraces()) {
			if (trace.getVisualID() == visualID) {
				return trace;
			}
		}
		for (GenChildNodeTrace trace : getChildNodeTraces()) {
			if (trace.getVisualID() == visualID) {
				return trace;
			}
		}

		throw new IllegalArgumentException("Node trace with id = " + visualID + " was not found");
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public GenLinkTrace getLinkTrace(int visualID) {
		for (GenLinkTrace trace : getLinkTraces()) {
			if (trace.getVisualID() == visualID) {
				return trace;
			}
		}
		throw new IllegalArgumentException("Link trace with id = " + visualID + " was not found");
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public EList<AbstractTrace> getAllAbstractTraces() {
		Collection<AbstractTrace> result = new ArrayList<AbstractTrace>();
		result.addAll(getNodeTraces());
		addNodeChildTraces(result, getNodeTraces());
		
		result.addAll(getChildNodeTraces());
		addNodeChildTraces(result, getChildNodeTraces());
		
		result.addAll(getLinkTraces());
		for (GenLinkTrace trace : getLinkTraces()) {
			result.addAll(trace.getLinkLabelTraces());
		}
		
		result.addAll(getToolGroupTraces());
		return new BasicEList.UnmodifiableEList<AbstractTrace>(result.size(), result.toArray());
	}
	
	private void addNodeChildTraces(Collection<AbstractTrace> collection, Collection<? extends GenNodeTrace> nodeTraces) {
		for (GenNodeTrace trace : nodeTraces) {
			collection.addAll(trace.getCompartmentTraces());
			collection.addAll(trace.getNodeLabelTraces());
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated NOT
	 */
	public void purgeUnprocessedTraces() {
		for (AbstractTrace trace : getAllAbstractTraces()) {
			if (trace.isProcessed()) {
				continue;
			}
			GmfTracePlugin.getInstance().logDebugInfo("Removing unused trace with visual ID = " + trace.getVisualID());
			switch (trace.eClass().getClassifierID()) {
			case TracePackage.GEN_NODE_TRACE: 
				getNodeTraces().remove(trace);
				break;
			case TracePackage.GEN_CHILD_NODE_TRACE: 
				getChildNodeTraces().remove(trace);
				break;
			case TracePackage.GEN_LINK_TRACE: 
				getLinkTraces().remove(trace);
				break;
			case TracePackage.TOOL_GROUP_TRACE: 
				getToolGroupTraces().remove(trace);
				break;
			case TracePackage.GEN_NODE_LABEL_TRACE:
				((GenNodeTrace) trace.eContainer()).getNodeLabelTraces().remove(trace);
				break;
			case TracePackage.GEN_COMPARTMENT_TRACE:
				((GenNodeTrace) trace.eContainer()).getCompartmentTraces().remove(trace);
				break;
			case TracePackage.GEN_LINK_LABEL_TRACE:
				((GenLinkTrace) trace.eContainer()).getLinkLabelTraces().remove(trace);
				break;
			}
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case TracePackage.TRACE_MODEL__NODE_TRACES:
				return ((InternalEList<?>)getNodeTraces()).basicRemove(otherEnd, msgs);
			case TracePackage.TRACE_MODEL__CHILD_NODE_TRACES:
				return ((InternalEList<?>)getChildNodeTraces()).basicRemove(otherEnd, msgs);
			case TracePackage.TRACE_MODEL__LINK_TRACES:
				return ((InternalEList<?>)getLinkTraces()).basicRemove(otherEnd, msgs);
			case TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES:
				return ((InternalEList<?>)getToolGroupTraces()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case TracePackage.TRACE_MODEL__NODE_TRACES:
				return getNodeTraces();
			case TracePackage.TRACE_MODEL__CHILD_NODE_TRACES:
				return getChildNodeTraces();
			case TracePackage.TRACE_MODEL__LINK_TRACES:
				return getLinkTraces();
			case TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES:
				return getToolGroupTraces();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@SuppressWarnings("unchecked")
		@@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case TracePackage.TRACE_MODEL__NODE_TRACES:
				getNodeTraces().clear();
				getNodeTraces().addAll((Collection<? extends GenNodeTrace>)newValue);
				return;
			case TracePackage.TRACE_MODEL__CHILD_NODE_TRACES:
				getChildNodeTraces().clear();
				getChildNodeTraces().addAll((Collection<? extends GenChildNodeTrace>)newValue);
				return;
			case TracePackage.TRACE_MODEL__LINK_TRACES:
				getLinkTraces().clear();
				getLinkTraces().addAll((Collection<? extends GenLinkTrace>)newValue);
				return;
			case TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES:
				getToolGroupTraces().clear();
				getToolGroupTraces().addAll((Collection<? extends ToolGroupTrace>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case TracePackage.TRACE_MODEL__NODE_TRACES:
				getNodeTraces().clear();
				return;
			case TracePackage.TRACE_MODEL__CHILD_NODE_TRACES:
				getChildNodeTraces().clear();
				return;
			case TracePackage.TRACE_MODEL__LINK_TRACES:
				getLinkTraces().clear();
				return;
			case TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES:
				getToolGroupTraces().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @@generated
	 */
	@@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case TracePackage.TRACE_MODEL__NODE_TRACES:
				return nodeTraces != null && !nodeTraces.isEmpty();
			case TracePackage.TRACE_MODEL__CHILD_NODE_TRACES:
				return childNodeTraces != null && !childNodeTraces.isEmpty();
			case TracePackage.TRACE_MODEL__LINK_TRACES:
				return linkTraces != null && !linkTraces.isEmpty();
			case TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES:
				return toolGroupTraces != null && !toolGroupTraces.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //TraceModelImpl@


1.2
log
@[181417] - Update org.eclipse.gmf.bridge.trace/model/trace.ecore to EMF M6 + regenerate the code.
@
text
@a10 1
import java.util.Iterator;
@


1.1
log
@#148651 Plugin bridge.trace uses wrong namespace
@
text
@d55 1
a55 1
	protected EList nodeTraces = null;
d65 1
a65 1
	protected EList childNodeTraces = null;
d75 1
a75 1
	protected EList linkTraces = null;
d85 1
a85 1
	protected EList toolGroupTraces = null;
d101 1
d111 1
a111 1
	public EList getNodeTraces() {
d113 1
a113 1
			nodeTraces = new EObjectContainmentEList(GenNodeTrace.class, this, TracePackage.TRACE_MODEL__NODE_TRACES);
d123 1
a123 1
	public EList getChildNodeTraces() {
d125 1
a125 1
			childNodeTraces = new EObjectContainmentEList(GenChildNodeTrace.class, this, TracePackage.TRACE_MODEL__CHILD_NODE_TRACES);
d135 1
a135 1
	public EList getLinkTraces() {
d137 1
a137 1
			linkTraces = new EObjectContainmentEList(GenLinkTrace.class, this, TracePackage.TRACE_MODEL__LINK_TRACES);
d147 1
a147 1
	public EList getToolGroupTraces() {
d149 1
a149 1
			toolGroupTraces = new EObjectContainmentEList(ToolGroupTrace.class, this, TracePackage.TRACE_MODEL__TOOL_GROUP_TRACES);
d160 3
a162 4
		for (Iterator it = getNodeTraces().iterator(); it.hasNext();) {
			GenNodeTrace nextTrace = (GenNodeTrace) it.next();
			if (nextTrace.getVisualID() == visualID) {
				return nextTrace;
d165 3
a167 4
		for (Iterator it = getChildNodeTraces().iterator(); it.hasNext();) {
			GenChildNodeTrace nextTrace = (GenChildNodeTrace) it.next();
			if (nextTrace.getVisualID() == visualID) {
				return nextTrace;
d180 3
a182 4
		for (Iterator it = getLinkTraces().iterator(); it.hasNext();) {
			GenLinkTrace nextTrace = (GenLinkTrace) it.next();
			if (nextTrace.getVisualID() == visualID) {
				return nextTrace;
d193 2
a194 2
	public EList getAllAbstractTraces() {
		Collection result = new ArrayList();
d202 1
a202 2
		for (Iterator it = getLinkTraces().iterator(); it.hasNext();) {
			GenLinkTrace trace = (GenLinkTrace) it.next();
d207 1
a207 1
		return new BasicEList.UnmodifiableEList(result.size(), result.toArray());
d210 2
a211 3
	private void addNodeChildTraces(Collection collection, Collection nodeTraces) {
		for (Iterator it = nodeTraces.iterator(); it.hasNext();) {
			GenNodeTrace trace = (GenNodeTrace) it.next();
d223 1
a223 2
		for (Iterator it = getAllAbstractTraces().iterator(); it.hasNext();) {
			AbstractTrace trace = (AbstractTrace) it.next();
d259 1
d263 1
a263 1
				return ((InternalEList)getNodeTraces()).basicRemove(otherEnd, msgs);
d265 1
a265 1
				return ((InternalEList)getChildNodeTraces()).basicRemove(otherEnd, msgs);
d267 1
a267 1
				return ((InternalEList)getLinkTraces()).basicRemove(otherEnd, msgs);
d269 1
a269 1
				return ((InternalEList)getToolGroupTraces()).basicRemove(otherEnd, msgs);
d279 1
d299 2
d305 1
a305 1
				getNodeTraces().addAll((Collection)newValue);
d309 1
a309 1
				getChildNodeTraces().addAll((Collection)newValue);
d313 1
a313 1
				getLinkTraces().addAll((Collection)newValue);
d317 1
a317 1
				getToolGroupTraces().addAll((Collection)newValue);
d328 1
d352 1
@


1.1.2.1
log
@#148651 Plugin bridge.trace uses wrong namespace
@
text
@@

