head	1.3;
access;
symbols
	v20081020-0700:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.4
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080425-1959:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.2
	R2_0:1.3
	R4_20:1.3
	RC3_20:1.3
	v20070601-1400:1.3
	v20070330-1300:1.3
	M4_20:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060925-1700:1.2.2.1
	M1_20:1.2
	v20060810-1700:1.2.2.1
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060531-1730:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2006.10.03.14.53.17;	author ahunter;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.54;	author sshaw;	state Exp;
branches
	1.2.2.1;
next	1.1;

1.1
date	2005.08.30.03.16.20;	author sshaw;	state Exp;
branches;
next	;

1.2.2.1
date	2006.08.10.18.39.11;	author ldamus;	state Exp;
branches;
next	;


desc
@@


1.3
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.common.ui.action.ide.actions.global;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.eclipse.ui.IActionBars;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchPart;

import org.eclipse.gmf.runtime.common.ui.action.actions.global.GlobalActionManager;
import org.eclipse.gmf.runtime.common.ui.action.global.GlobalAction;
import org.eclipse.gmf.runtime.common.ui.action.ide.global.IDEGlobalActionId;
import org.eclipse.gmf.runtime.common.ui.util.IPartSelector;


/**
 * This class subclasses GlobalActionManager and includes support for IDE global
 * actions, which include the bookmark action, the open project action, and the
 * close project action.
 * 
 * @@author wdiu, Wayne Diu
 */
public class IDEGlobalActionManager extends GlobalActionManager {

	/**
	 * Static list of action ID strings
	 */
	private static final List actionIdStrings = new ArrayList();
	
	static {
		actionIdStrings.add(IDEGlobalActionId.BOOKMARK);
		actionIdStrings.add(IDEGlobalActionId.OPEN_PROJECT);
		actionIdStrings.add(IDEGlobalActionId.CLOSE_PROJECT);
	}

	/**
	 * Create the singleton.
	 */
	private static IDEGlobalActionManager instance = new IDEGlobalActionManager();
	
	/**
	 * Create the singleton.
	 */
	private static GlobalActionManager globalActionManager = GlobalActionManager.getInstance();
	
	/**
	 * Return the singleton.
	 */
	public static GlobalActionManager getInstance() {
		return instance;
	}
	
	/**
	 * Constructor for IDEGlobalActionManager.  Adds several action ids for
	 * ide actions.
	 */
	private IDEGlobalActionManager() {
		Iterator it = actionIdStrings.iterator();
		while (it.hasNext()) {
			String id = (String) it.next();
			addActionId(id);
		}
	}	
	
	/**
	 * Creates a GlobalAction.
	 * 
	 * @@param page The workbench page
	 * @@param id   The action id
	 * 
	 * @@return GlobalAction
	 */
	public GlobalAction createActionHandler(IWorkbenchPage page, String id) {
		GlobalAction action = null;
		
		if (id.equals(IDEGlobalActionId.BOOKMARK))
			action = new GlobalBookmarkAction(page);
		else
			action = globalActionManager.createActionHandler(page, id);

		// this initialization should be moved to the client to call
		if (action != null)
			action.init();
		return action;
	}


	/**
	 * Creates a GlobalAction.
	 * 
	 * @@param part The workbench part
	 * @@param id The action id
	 * 
	 * @@return GlobalAction
	 */
	public GlobalAction createActionHandler(final IWorkbenchPart part, String id) {
		GlobalAction action = null;

		if (id.equals(IDEGlobalActionId.BOOKMARK))
			action = new GlobalBookmarkAction(part);
		else if (id.equals(IDEGlobalActionId.OPEN_PROJECT))
			action = new GlobalOpenProjectAction(part);
		else if (id.equals(IDEGlobalActionId.CLOSE_PROJECT))
			action = new GlobalCloseProjectAction(part);
		else
			action = globalActionManager.createActionHandler(part, id);

		if (action != null) {
			// this initialization should be moved to the client to call
			action.init();
			
			// the action will only refresh on selection changes in the specified part
			action.setPartSelector(new IPartSelector() {
				public boolean selects(IWorkbenchPart p) {
					return part == p;
				}
			});
		}
		return action;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#createGlobalActions(org.eclipse.ui.IWorkbenchPart, java.lang.String[])
	 */
	public GlobalAction[] createGlobalActions(IWorkbenchPart part,
			String[] actionIds) {
		
		//superclass will handle the ids from actionIdStrings
		//rest are delegated to global action manager
		List forSuper = new ArrayList(), forGlobalActionManager = new ArrayList();
		for (int i = 0; i < actionIds.length; i++) {
			if (actionIdStrings.contains(actionIds[i])) {
				forSuper.add(actionIds[i]);
			}
			else {
				forGlobalActionManager.add(actionIds[i]);
			}
		}
		
		String[] superArray = new String[forSuper.size()], globalActionManagerArray = new String[forGlobalActionManager.size()];
		forSuper.toArray(superArray);
		forGlobalActionManager.toArray(globalActionManagerArray);
		
		GlobalAction[] actions1 = globalActionManager.createGlobalActions(part, globalActionManagerArray);
		GlobalAction[] actions2 = new GlobalAction[0];
		if (superArray.length > 0) {
			actions2 = super.createGlobalActions(part, superArray);
		}
		
		GlobalAction[] allActions = new GlobalAction[actions1.length + actions2.length]; 
		System.arraycopy(actions1, 0, allActions, 0, actions1.length);
		System.arraycopy(actions2, 0, allActions, actions1.length, actions2.length);
		
		return allActions;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#createGlobalActions(org.eclipse.ui.IWorkbenchPart)
	 */
	public GlobalAction[] createGlobalActions(IWorkbenchPart part) {
		GlobalAction[] actions1 = globalActionManager.createGlobalActions(part);
		GlobalAction[] actions2 = super.createGlobalActions(part);
		
		GlobalAction[] allActions = new GlobalAction[actions1.length + actions2.length]; 
		System.arraycopy(actions1, 0, allActions, 0, actions1.length);
		System.arraycopy(actions2, 0, allActions, actions1.length, actions2.length);
		
		return allActions;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#getGlobalAction(org.eclipse.ui.IWorkbenchPart, java.lang.String)
	 */
	public GlobalAction getGlobalAction(IWorkbenchPart part, String actionId) {
		GlobalAction action = super.getGlobalAction(part, actionId);
		return action != null ? action  : globalActionManager.getGlobalActionHandler(part, actionId);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#getGlobalActionHandler(org.eclipse.ui.IWorkbenchPart, java.lang.String)
	 */
	public GlobalAction getGlobalActionHandler(IWorkbenchPart part,
			String globalActionId) {
		GlobalAction action = super.getGlobalActionHandler(part, globalActionId);
		return action != null ? action  : globalActionManager.getGlobalActionHandler(part, globalActionId);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#refreshGlobalActions(org.eclipse.ui.IWorkbenchPart)
	 */
	public void refreshGlobalActions(IWorkbenchPart part) {
		globalActionManager.refreshGlobalActions(part);
		super.refreshGlobalActions(part);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#setGlobalActionHandlers(org.eclipse.ui.IActionBars, org.eclipse.ui.IWorkbenchPart)
	 */
	public void setGlobalActionHandlers(IActionBars bar, IWorkbenchPart part) {
		globalActionManager.setGlobalActionHandlers(bar, part);
		super.setGlobalActionHandlers(bar, part);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.gmf.runtime.common.ui.action.internal.actions.global.GlobalActionManager#unSetGlobalActionHandlers(org.eclipse.ui.IActionBars, org.eclipse.ui.IWorkbenchPart)
	 */
	public void unSetGlobalActionHandlers(IActionBars bar, IWorkbenchPart part) {
		globalActionManager.unSetGlobalActionHandlers(bar, part);
		super.unSetGlobalActionHandlers(bar, part);
	}
}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 1
d108 1
a108 1
	public GlobalAction createActionHandler(IWorkbenchPart part, String id) {
d120 2
a121 2
		// this initialization should be moved to the client to call
		if (action != null)
d123 8
@


1.2.2.1
log
@[132261] gmf_R1_0_maintenance ldamus 060810 Project explorer :  when you scroll using up/down keys, is slow : GMF tree selection change listener takes time
@
text
@a24 1
import org.eclipse.gmf.runtime.common.ui.util.IPartSelector;
d107 1
a107 1
	public GlobalAction createActionHandler(final IWorkbenchPart part, String id) {
d119 2
a120 2
		if (action != null) {
			// this initialization should be moved to the client to call
a121 8
			
			// the action will only refresh on selection changes in the specified part
			action.setPartSelector(new IPartSelector() {
				public boolean selects(IWorkbenchPart p) {
					return part == p;
				}
			});
		}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2005.  All Rights Reserved.                    |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

