head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081021-1810:1.8
	v20081020-0700:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.4
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.8
	v20080404-1111:1.8
	v20080222-1200:1.8
	v20080215-1500:1.8
	v20080215-1200:1.8
	v20080201-2010:1.8
	v20080114-1111:1.8
	v20071108-0000:1.8
	v20071003-0000:1.8
	v20070928-0000:1.8
	v20070915-0000:1.8
	v20070903-0000:1.8
	v20070830-0000:1.8
	v20070809-0000:1.8
	R2_0_maintenance:1.8.0.2
	R2_0:1.8
	R4_20:1.8
	v20070621-0000:1.8
	RC3_20:1.8
	v20070605-1400:1.8
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070330-1300:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.5.2.1
	M4_20:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.6
	v20061013-1330:1.6
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060824-1600:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060810-1700:1.5.2.1
	v20060803-1200:1.5.2.1
	v20060728-0500:1.5.2.1
	v20060721-1130:1.5.2.1
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060519-0800:1.5
	RC2_10:1.5
	I20060505-1400:1.5
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.8
date	2007.06.05.17.06.46;	author crevells;	state Exp;
branches;
next	1.7;
commitid	1d4e466598264567;

1.7
date	2006.11.21.22.48.19;	author ldamus;	state Exp;
branches;
next	1.6;
commitid	29b3456382334567;

1.6
date	2006.10.03.15.04.52;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.05.04.18.16.38;	author sshaw;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2006.02.27.19.36.25;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.25.19.37.57;	author cmahoney;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.51;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.07.17.19.47.53;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.8
log
@[190465] gmf_head crevells 070605 Fill color goes outside the icon when printing
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.internal.graphics;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Stack;

import org.eclipse.draw2d.Graphics;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.printing.Printer;


/**
 * Created on May 8, 2003
 *
 * @@author sshaw
 * @@version 1.0
 * 
 * Overridden to handle printing problem with transparencies.  Specifically,
 * dropshadows print with as a black bar (RATLC00513998)
 */
public class PrinterGraphics extends org.eclipse.draw2d.PrinterGraphics {
	
    private double printScale = 1.0;
    private boolean roundFonts = false;
    private Stack stateStack = new Stack();
    
    /**
	 * @@return Returns the printScale.
	 */
	protected double getPrintScale() {
		return printScale;
	}
	
    /**
	* Creates a new <code>PrinterGraphics</code> with <code>Graphics</code> g, using 
	* <code>Printer</code> p
	* 
	* @@param g <code>Graphics</code> object to draw with
	* @@param p <code>Printer</code> to print to
	* @@param roundFonts the <code>boolean</code> if <code>true</code> indicates that fonts 
	* should be rounded to account for printer font scaling errors.
	*/
	public PrinterGraphics(Graphics g, Printer p, boolean roundFonts) {
		super(g, p);
        this.roundFonts = roundFonts;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.Graphics#dispose()
	 */
	public void dispose() {
		
		for (Iterator it = collapseImageCache.values().iterator(); it.hasNext();)
		{
	        Image img = (Image) it.next();
	        img.dispose();
		}

		collapseImageCache.clear();

		super.dispose();
	}
	
	Map collapseImageCache = new HashMap();

    /**
     * collapseImage
     * This method is necessary to work around a problem with the printer GC that
     * doesn't seem to support alpha channels on Images.  Consequently we collapse the
     * image based on the background.
     * This workaround won't be necessary when Bugzilla 28766 is fixed.
     * 
	 * @@param srcImage Image to collapse the alpha channel of.
	 * @@return Image that has no alpha channel.
	 */
	private Image collapseImage(Image srcImage) {
		Image result = (Image)collapseImageCache.get(srcImage);
		if (result != null)
			return result;
		
		org.eclipse.swt.graphics.Rectangle r1 = srcImage.getBounds();
        Image newImg = new Image( null, r1.width, r1.height);
        
        GC gc = new GC(newImg);
        gc.setForeground(getForegroundColor());
        gc.setBackground(getBackgroundColor());
        gc.drawImage(srcImage, 0, 0);
        gc.dispose();
		
        collapseImageCache.put(srcImage, newImg);
    	return newImg;
    }
    
    /**
	 * @@see org.eclipse.draw2d.Graphics#drawImage(org.eclipse.swt.graphics.Image, int, int)
	 */
	public void drawImage(Image srcImage, int x, int y) {
		Image collapseImage = collapseImage(srcImage);
		super.drawImage(collapseImage, x, y);
    }
    
    /**
	 * @@see org.eclipse.draw2d.Graphics#drawImage(org.eclipse.swt.graphics.Image, int, int, int, int, int, int, int, int)
	 */
	public void drawImage(Image srcImage,
        int sx, int sy, int sw, int sh,
        int tx, int ty, int tw, int th)
    {
		Image collapseImage = collapseImage(srcImage);
        super.drawImage(collapseImage, sx, sy, sw, sh, tx, ty, tw, th);
    }
    
    /**
     * shouldRoundFonts
     * Accessor method to determine if fonts should be rounded to account for printer
     * font scaling errors.
     * 
	 * @@return boolean true if fonts should be rounded, false otherwise.
	 */
	public boolean shouldRoundFonts() {
        return roundFonts;
    }
    
    /**
	 * @@see org.eclipse.draw2d.Graphics#scale(double)
	 */
	public void scale(double amount) {
        printScale = printScale * amount;
        super.scale(amount);
    }

    /* (non-Javadoc)
     * @@see org.eclipse.draw2d.Graphics#popState()
     */
    public void popState() {
        if (!stateStack.isEmpty())
            printScale = ((Double)stateStack.pop()).doubleValue();
        super.popState();
    }
    
    /* (non-Javadoc)
     * @@see org.eclipse.draw2d.Graphics#pushState()
     */
    public void pushState() {
        stateStack.push(new Double(printScale));
        super.pushState();
    }
    
    /* (non-Javadoc)
     * @@see org.eclipse.draw2d.Graphics#restoreState()
     */
    public void restoreState() {
        if (!stateStack.isEmpty())
            printScale = ((Double)stateStack.firstElement()).doubleValue();
        super.restoreState();
    }
    
    /**
     * This should be escalated as a GEF / SWT problem - difficult to reproduce in 
     * logic example though.  The font size needs to scaled down to account for 
     * printer font scaling issues.
     * 
	 * @@see org.eclipse.draw2d.Graphics#setFont(org.eclipse.swt.graphics.Font)
	 */
	public void setFont(Font f) {
       
       Font newFont = f;
       
       if (shouldRoundFonts()) {
           FontData fd = f.getFontData()[0];
           int nAdjustedHeight = (int)(((fd.getHeight() - 0.5f) / getPrintScale()) * getPrintScale());
           if (fd.getHeight() != nAdjustedHeight) {
               fd.setHeight(nAdjustedHeight);    
               newFont = FontRegistry.getInstance().getFont(null, fd);   
           }
       }
       
       super.setFont(newFont);
    }
    
}
@


1.7
log
@[160377] gmf_head dcummin 061121 NullPointerException printing a diagram
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
a102 1
        gc.fillRectangle(0, 0, r1.width, r1.height);
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d69 4
a72 5
		Iterator it = collapseImageCache.keySet().iterator();
		while (it.hasNext()) {
			Object key = it.next();
			Image img = (Image)collapseImageCache.get(key);
			img.dispose();
d74 3
a76 1
		
@


1.5
log
@bugzilla 140212 gmf-head sshaw 060504 SVG images corrupted when print scaling is applied...
@
text
@d2 1
a2 1
 * Copyright (c) 2002 - 2004 IBM Corporation and others.
@


1.5.2.1
log
@[150280] gmf_R1_0_maintenance ahunter 060717 Incorrect copyright in some GMF files
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4
log
@bugzilla 127691 gmf-head sshaw 060227 Labels on connections don't print correctly - very small
@
text
@d18 1
d41 2
a42 1
	
d148 26
d187 1
a187 1
           int nAdjustedHeight = (int)(((fd.getHeight() - 0.5f) / printScale) * printScale);
@


1.3
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@a47 2
    private Graphics g;
    
a59 1
        this.g = g;
d142 1
a142 1
        printScale = amount;
a168 16
     
	/**
	 * setLineWidth
	 * Override to accommodate bug RATLC00514719 (Bugzilla 4853) which states that SWT doesn't
	 * support setting a line style to lines that have a width > 1.  This method should be
	 * removed when there is an appropriate resolution for Bugzilla 4853.
	 * 
	 * @@see org.eclipse.draw2d.Graphics#setLineStyle(int)
	 */
	public void setLineWidth(int width) {
		super.setLineWidth(width);
		
		if (getLineStyle() != Graphics.LINE_SOLID) {
			g.setLineWidth(1);
		}
	}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a25 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
d165 1
a165 1
               newFont = Draw2dResourceManager.getInstance().getFont(null, fd);   
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002 - 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

