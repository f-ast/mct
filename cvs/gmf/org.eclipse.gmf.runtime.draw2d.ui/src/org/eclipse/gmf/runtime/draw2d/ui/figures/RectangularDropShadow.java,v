head	1.4;
access;
symbols
	v20081023-2107:1.4
	v20081022-1925:1.4
	v20081021-1810:1.4
	v20081020-0700:1.4
	v20080911-1728:1.4
	v20080911-1506:1.4
	v20080910-1520:1.4
	v20080910-1510:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.6
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080512-1200:1.4
	v20080503-1740:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080407-2250:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080215-1200:1.4
	v20080201-2010:1.4
	v20080114-1111:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070928-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070830-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.4
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070330-1300:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.4
	M4_20:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060925-1700:1.4
	v20060919-0800:1.4
	M1_20:1.4
	v20060824-1600:1.4
	v20060817-1500:1.4
	v20060810-1700:1.4
	v20060803-1200:1.4
	v20060728-0500:1.4
	v20060721-1130:1.4
	v20060713-1700:1.4
	R1_0_maintenance:1.4.0.2
	R1_0:1.4
	v20060627-1200:1.4
	v20060616-1200:1.4
	v20060609-1400:1.4
	v20060531-1730:1.4
	v20060519-0800:1.4
	RC2_10:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2005.11.25.19.37.57;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.21.27.59;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.42;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@/******************************************************************************
 * Copyright (c) 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.figures;

import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dUIPluginImages;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.widgets.Display;

/**
 * @@author choang
 *
 * Drop Shadow Helper Class to help draw shadow on borders
 */
public class RectangularDropShadow {

	/**
	 * 
	 */
	public RectangularDropShadow() {
		super();
		// TODO Auto-generated constructor stub
	}
	
	//	Images for the border of the shadow border
	private static ImageData alpha_ilb = 
		Draw2dUIPluginImages.DESC_LEFT_BOTTOM.getImageData();

	private static ImageData alpha_irb = 
		Draw2dUIPluginImages.DESC_RIGHT_BOTTOM.getImageData();

	private static ImageData alpha_ir = 
		Draw2dUIPluginImages.DESC_RIGHT.getImageData();

	private static ImageData alpha_itr = 
		Draw2dUIPluginImages.DESC_TOP_RIGHT.getImageData();

	private static ImageData alpha_ib = 
		Draw2dUIPluginImages.DESC_BOTTOM.getImageData();
		 
	/**
	 * Method for determining the width of the drop shadow border will take up on the shape.
	 * @@return int the width of the drop shadow
	 */
	public int getShadowWidth() {
		return alpha_ir.width;
	}

	/**
	 * Method for determining the height of the drop shadow border will take up on the shape.
	 * @@return int the height of the drop shadow
	 */
	public int getShadowHeight() {
		return alpha_ib.height;
	}
	
	/**
	 * draw a shadow around given rectangle @@rect
	 * @@param figure
	 * @@param g
	 * @@param rect the rectangle to draw the shadow around
	 */
	public void drawShadow(IFigure figure, Graphics g, Rectangle rect){
		
		drawBottomLeftShadow(figure, g, rect);

		// bottom
		drawBottomShadow(figure, g, rect);

		// bottom right
		drawBottomRightShadow(figure, g, rect);

		// right
		drawRightShadow(figure, g, rect);

		// top right
		drawTopRightShadow(figure, g, rect);

	}
	
	/**
	 * @@param figure
	 * @@param g
	 * @@param rBox
	 */
	protected void drawTopRightShadow(IFigure figure, Graphics g, Rectangle rBox) {
		Dimension dim = new Dimension(alpha_itr.width, alpha_itr.height);
		Image itr = createImageFromAlpha(figure, alpha_itr, dim);
		Point pt = new Point(rBox.getRight().x - MapModeUtil.getMapMode(figure).DPtoLP(alpha_ir.width),
			rBox.getTop().y );
		g.drawImage(itr, pt);
		itr.dispose();
	}

	/**
	 * @@param figure
	 * @@param g
	 * @@param rBox
	 */
	protected void drawRightShadow(IFigure figure, Graphics g, Rectangle rBox) {
		Dimension dim = getRightShadowDimension(figure, rBox);
		Image ir = createImageFromAlpha(figure, alpha_ir, dim);
		Point pt = 
			new Point(
				rBox.getRight().x - MapModeUtil.getMapMode(figure).DPtoLP(alpha_ir.width),
				rBox.getTop().y + MapModeUtil.getMapMode(figure).DPtoLP(alpha_itr.height)) ;
		g.drawImage(ir, pt);
		ir.dispose();
	}

	/**
	 * @@param figure
	 * @@param g
	 * @@param rBox
	 */
	protected void drawBottomRightShadow(
		IFigure figure,
		Graphics g,
		Rectangle rBox) {
		Dimension dim;
		dim = getBottomRightShadowDimension();
		Image irb = createImageFromAlpha(figure, alpha_irb, dim);
		
		Point pt =
			new Point(
				rBox.getRight().x - MapModeUtil.getMapMode(figure).DPtoLP(alpha_ir.width),
				rBox.getBottom().y - MapModeUtil.getMapMode(figure).DPtoLP(alpha_ib.height) );
		g.drawImage(irb, pt);
		irb.dispose();
	}

	/**
	 * @@param figure
	 * @@param g
	 * @@param rBox
	 */
	protected void drawBottomShadow(IFigure figure, Graphics g, Rectangle rBox) {
		
		Dimension dim = getBottomShadowDimension(figure, rBox);
		Image ib = createImageFromAlpha(figure, alpha_ib, dim);
		Point pt =
			new Point(
				rBox.getLeft().x + MapModeUtil.getMapMode(figure).DPtoLP(alpha_ilb.width),
				rBox.getBottom().y - MapModeUtil.getMapMode(figure).DPtoLP(alpha_ib.height) );
		g.drawImage(ib, pt);
		ib.dispose();
	}

	/**
	 * @@param figure
	 * @@param g
	 * @@param rBox
	 */
	private void drawBottomLeftShadow(IFigure figure, Graphics g, Rectangle rBox) {
		Dimension dim = getLeftShadowDimension();
		Image ilb = createImageFromAlpha(figure, alpha_ilb, dim);
		Point pt =
			new Point(rBox.getLeft().x,
				rBox.getBottom().y - MapModeUtil.getMapMode(figure).DPtoLP(alpha_ib.height) );
		g.drawImage(ilb, pt);
		ilb.dispose();
	}

	/**
	 * @@param figure
	 * @@param rBox
	 * @@return the <code>Dimension</code> representing the right shadow
	 */
	protected Dimension getRightShadowDimension(IFigure figure, Rectangle rBox) {

		int height = Math.max(MapModeUtil.getMapMode(figure).LPtoDP(rBox.height) - alpha_itr.height - alpha_irb.height,
			1);
		return new Dimension(alpha_ir.width, height);
	}

	/**
	 * @@return the <code>Dimension</code> representing the bottom right shadow
	 */
	protected Dimension getBottomRightShadowDimension() {
		return new Dimension(alpha_irb.width, alpha_irb.height);
	}

	/**
	 * @@param rBox
	 * @@return the <code>Dimension</code> representing the bottom shadow
	 */
	protected Dimension getBottomShadowDimension(IFigure figure, Rectangle rBox) {

		int width = Math.max(MapModeUtil.getMapMode(figure).LPtoDP( rBox.width ) - alpha_ilb.width - alpha_irb.width,
			1);
		return new Dimension(width, alpha_ib.height);
	}

	/**
	 * @@return the <code>Dimension</code> representing the left shadow
	 */
	protected Dimension getLeftShadowDimension() {
		return new Dimension(alpha_ilb.width, alpha_ilb.height);
	}
	
	/**
	 * Utility function for the paint routine to create the image that will be displayed
	 * based on a transparency image. 
	 */
	private Image createImageFromAlpha(
		IFigure figure,
		ImageData alphaData,
		Dimension dim) {
		Color foreColor = figure.getForegroundColor();

		ImageData newAlpha = alphaData;
		if (alphaData.width != dim.width || alphaData.height != dim.height) {
			ImageData newAlphaData =
				new ImageData(
					((dim.width + 3) / 4) * 4,
					dim.height,
					alphaData.depth,
					alphaData.palette);
			Image imgNewAlpha = new Image(null, newAlphaData);
			GC gc = new GC(imgNewAlpha);

			Image imgAlpha = new Image(null, alphaData);
			gc.drawImage(
				imgAlpha,
				0,
				0,
				alphaData.width,
				alphaData.height,
				0,
				0,
				newAlphaData.width,
				newAlphaData.height);

			int nDelta = newAlphaData.width - dim.width;
			if (nDelta > 0) {
				gc.setForeground(ColorConstants.black);
				gc.setBackground(ColorConstants.black);
				gc.fillRectangle(
					newAlphaData.width - nDelta,
					0,
					nDelta,
					newAlphaData.height);
			}

			newAlpha = imgNewAlpha.getImageData();

			imgNewAlpha.dispose();
			imgAlpha.dispose();
			gc.dispose();
		}

		Image img =
			new Image(Display.getDefault(), newAlpha.width, newAlpha.height);

		GC gc = new GC(img);
		gc.setForeground(foreColor);
		gc.setBackground(foreColor);
		gc.fillRectangle(0, 0, newAlpha.width, newAlpha.height);
		gc.dispose();

		ImageData filledData = img.getImageData();
		img.dispose();

		for (int i = 0; i < newAlpha.height; i++) {
			filledData.setAlphas(
				0,
				i,
				newAlpha.width,
				newAlpha.data,
				i * newAlpha.width);
		}

		return new Image(null, filledData);
	}

}
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d20 2
a27 3
import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

d44 5
a48 7
	private static ImageData alpha_ilb = Draw2dResourceManager.getInstance()
		.getImageDescriptor(Draw2dResourceManager.LEFT_BOTTOM_IMAGE)
		.getImageData();

	private static ImageData alpha_irb = Draw2dResourceManager.getInstance()
		.getImageDescriptor(Draw2dResourceManager.RIGHT_BOTTOM_IMAGE)
		.getImageData();
d50 2
a51 2
	private static ImageData alpha_ir = Draw2dResourceManager.getInstance()
		.getImageDescriptor(Draw2dResourceManager.RIGHT_IMAGE).getImageData();
d53 2
a54 2
	private static ImageData alpha_itr = Draw2dResourceManager.getInstance()
		.getImageDescriptor(Draw2dResourceManager.TOP_RIGHT_IMAGE).getImageData();
d56 2
a57 2
	private static ImageData alpha_ib = Draw2dResourceManager.getInstance()
		.getImageDescriptor(Draw2dResourceManager.BOTTOM_IMAGE).getImageData();
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d110 1
a110 1
		Point pt = new Point(rBox.getRight().x - MapMode.DPtoLP(alpha_ir.width),
d122 1
a122 1
		Dimension dim = getRightShadowDimension(rBox);
d126 2
a127 2
				rBox.getRight().x - MapMode.DPtoLP(alpha_ir.width),
				rBox.getTop().y + MapMode.DPtoLP(alpha_itr.height)) ;
d147 2
a148 2
				rBox.getRight().x - MapMode.DPtoLP(alpha_ir.width),
				rBox.getBottom().y - MapMode.DPtoLP(alpha_ib.height) );
d160 1
a160 1
		Dimension dim = getBottomShadowDimension(rBox);
d164 2
a165 2
				rBox.getLeft().x + MapMode.DPtoLP(alpha_ilb.width),
				rBox.getBottom().y - MapMode.DPtoLP(alpha_ib.height) );
d180 1
a180 1
				rBox.getBottom().y - MapMode.DPtoLP(alpha_ib.height) );
d186 1
d190 1
a190 1
	protected Dimension getRightShadowDimension(Rectangle rBox) {
d192 1
a192 1
		int height = Math.max(MapMode.LPtoDP(rBox.height) - alpha_itr.height - alpha_irb.height,
d208 1
a208 1
	protected Dimension getBottomShadowDimension(Rectangle rBox) {
d210 1
a210 1
		int width = Math.max(MapMode.LPtoDP( rBox.width ) - alpha_ilb.width - alpha_irb.width,
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

