head	1.8;
access;
symbols
	v20081023-2107:1.8
	v20081022-1925:1.8
	v20081021-1810:1.8
	v20081020-0700:1.8
	v20080911-1728:1.8
	v20080911-1506:1.8
	v20080910-1520:1.8
	v20080910-1510:1.8
	v20080903-1520:1.8
	v20080903-1510:1.8
	v20080722-1827:1.8
	R2_1_maintenance:1.8.0.2
	Root_R2_1_maintenance:1.8
	R2_1_0:1.8
	v20080610-1132:1.8
	v20080603-1553:1.8
	v20080512-1200:1.8
	v20080503-1740:1.8
	v20080501-1739:1.8
	v20080425-1959:1.8
	v20080417-1610:1.8
	v20080407-2250:1.8
	v20080407-0930:1.7
	v20080404-1111:1.7
	v20080222-1200:1.7
	v20080215-1500:1.7
	v20080215-1200:1.7
	v20080201-2010:1.7
	v20080114-1111:1.7
	v20071108-0000:1.7
	v20071003-0000:1.7
	v20070928-0000:1.7
	v20070915-0000:1.7
	v20070903-0000:1.7
	v20070830-0000:1.7
	v20070809-0000:1.7
	R2_0_maintenance:1.7.0.2
	R2_0:1.7
	R4_20:1.7
	v20070621-0000:1.7
	RC3_20:1.7
	v20070605-1400:1.7
	v20070601-1400:1.7
	v20070518-1300:1.7
	v20070330-1300:1.7
	v20070221-1500:1.7
	v20070208-1800:1.7
	v20070202-0200:1.6.2.1
	M4_20:1.7
	v20061218-1200:1.7
	v20061214-0000:1.7
	M3_20:1.7
	v20061013-1330:1.7
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060824-1600:1.6
	v20060817-1500:1.6
	v20060810-1700:1.6
	v20060803-1200:1.6
	v20060728-0500:1.6
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	RC2_10:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.6
	I20060424-0300:1.6
	M6_10:1.6
	I20060407-1200:1.6
	I20060331-1000:1.6
	I20060324-0300:1.6
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.8
date	2008.04.08.02.19.55;	author ahunter;	state Exp;
branches;
next	1.7;
commitid	4ff047fad64b4567;

1.7
date	2006.10.03.15.04.52;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.22.20.43.17;	author sshaw;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.03.22.20.40.58;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.12.15.47.57;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.21.27.59;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.42;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.09.13.16.46.18;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.8
log
@gmf-head ahunter 080407 Remove TODO To change the template for this generated file go to
@
text
@/******************************************************************************
 * Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/
package org.eclipse.gmf.runtime.draw2d.ui.internal.figures;

import org.eclipse.draw2d.Figure;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.ImageFigure;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
import org.eclipse.swt.graphics.Image;


/**
 * A copy of GEF's ImageFigure that takes care of himetric conversion
 * 
 * @@author melaasar
 */
public class ImageFigureEx
	extends Figure {

	private Image img;

	private Dimension imgSize = new Dimension();

	private int alignment;

	/**
	 * Constructor <br>
	 * The default alignment is <code>PositionConstants.CENTER</code>.
	 */
	public ImageFigureEx() {
		this(null, PositionConstants.CENTER);
	}

	/**
	 * Constructor <br>
	 * The default alignment is <code>PositionConstants.CENTER</code>.
	 * 
	 * @@param image
	 *            The Image to be displayed
	 */
	public ImageFigureEx(Image image) {
		this(image, PositionConstants.CENTER);
	}

	/**
	 * Constructor
	 * 
	 * @@param image
	 *            The Image to be displayed
	 * @@param alignment
	 *            A PositionConstant indicating the alignment
	 * 
	 * @@see ImageFigure#setImage(Image)
	 * @@see ImageFigure#setAlignment(int)
	 */
	public ImageFigureEx(Image image, int alignment) {
		setImage(image);
		setAlignment(alignment);
	}

	/**
	 * @@return The Image that this Figure displays
	 */
	public Image getImage() {
		return img;
	}

    /**
     * @@return <code>Dimension</code> that is the size of the image in logical coordinates
     */
    private Dimension getImageSize() {
        if (imgSize.isEmpty() && getImage() != null) {
            org.eclipse.swt.graphics.Rectangle r = getImage().getBounds();
            IMapMode mm = MapModeUtil.getMapMode(this);
            imgSize = new Dimension(mm.DPtoLP(r.width), 
                mm.DPtoLP(r.height));
        }
        
        if (!imgSize.isEmpty())
            return imgSize;
        
        return getBounds().getSize();
    }
    
	/**
	 * Returns the size of the Image that this Figure displays; or (0,0) if no
	 * Image has been set.
	 * 
	 * @@see org.eclipse.draw2d.Figure#getPreferredSize(int, int)
	 */
	public Dimension getPreferredSize(int wHint, int hHint) {
		return getImageSize();
	}

	/**
	 * @@see org.eclipse.draw2d.Figure#paintFigure(Graphics)
	 */
	protected void paintFigure(Graphics graphics) {
		super.paintFigure(graphics);

		if (getImage() == null)
			return;

		int x, y;
		Rectangle area = getClientArea();
        Dimension size = getImageSize();
        
		switch (alignment & PositionConstants.NORTH_SOUTH) {
			case PositionConstants.NORTH:
				y = area.y;
				break;
			case PositionConstants.SOUTH:
				y = area.y + area.height - size.height;
				break;
			default:
				y = (area.height - size.height) / 2 + area.y;
				break;
		}
		switch (alignment & PositionConstants.EAST_WEST) {
			case PositionConstants.EAST:
				x = area.x + area.width - size.width;
				break;
			case PositionConstants.WEST:
				x = area.x;
				break;
			default:
				x = (area.width - size.width) / 2 + area.x;
				break;
		}
		graphics.drawImage(getImage(), x, y);
	}

	/**
	 * Sets the alignment of the Image within this Figure. The alignment comes
	 * into play when the ImageFigure is larger than the Image. The alignment
	 * could be any valid combination of the following:
	 * 
	 * <UL>
	 * <LI>PositionConstants.NORTH</LI>
	 * <LI>PositionConstants.SOUTH</LI>
	 * <LI>PositionConstants.EAST</LI>
	 * <LI>PositionConstants.WEST</LI>
	 * <LI>PositionConstants.CENTER or PositionConstants.NONE</LI>
	 * </UL>
	 * 
	 * @@param flag
	 *            A constant indicating the alignment
	 */
	public void setAlignment(int flag) {
		alignment = flag;
	}

	/**
	 * Sets the Image that this ImageFigure displays.
	 * <p>
	 * IMPORTANT: Note that it is the client's responsibility to dispose the
	 * given image.
	 * 
	 * @@param image
	 *            The Image to be displayed. It can be <code>null</code>.
	 */
	public void setImage(Image image) {
		if (img == image)
			return;
		img = image;
        
        // reset image size
        imgSize = new Dimension();
        
		revalidate();
		repaint();
	}
    
    
}

@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
a10 6
/*
 * Created on Sep 17, 2004
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
@


1.6
log
@bugzilla 132717 gmf-head sshaw 060322 DecorationService is broken when MapMode is set to PIXEL
@
text
@d2 1
a2 1
 * Copyright (c) 2005 IBM Corporation and others.
@


1.6.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2005, 2006 IBM Corporation and others.
@


1.5
log
@bugzilla 132717 gmf-head sshaw 060322 DecorationService is broken when MapMode is set to PIXEL
@
text
@d185 3
@


1.4
log
@bugzilla 110316 gmf-head 051212 Compiler warning count should be 0 - runtime diagram layer
@
text
@d21 1
d25 1
d40 1
a40 1
	private Dimension size = new Dimension();
d86 17
d110 1
a110 1
		return size;
d124 2
d184 1
a184 7
		if (img != null) {
			org.eclipse.swt.graphics.Rectangle r = image.getBounds();
			size = new Dimension(MapModeUtil.getMapMode(this).DPtoLP(r.width), 
								MapModeUtil.getMapMode(this).DPtoLP(r.height));
		}
		else
			size = new Dimension();
d188 2
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@a20 1
import org.eclipse.draw2d.ImageFigure;
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d25 1
a27 2
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

d166 2
a167 1
			size = new Dimension(MapMode.DPtoLP(r.width), MapMode.DPtoLP(r.height));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 10
@

