head	1.1;
access;
symbols
	v20081023-2107:1.1
	v20081022-1925:1.1
	v20081021-1810:1.1
	v20081020-0700:1.1
	v20080911-1728:1.1
	v20080911-1506:1.1
	v20080910-1520:1.1
	v20080910-1510:1.1
	v20080903-1520:1.1
	v20080903-1510:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.2
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080603-1553:1.1
	v20080512-1200:1.1
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080407-2250:1.1
	v20080407-0930:1.1
	v20080404-1111:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080201-2010:1.1
	v20080114-1111:1.1
	v20071108-0000:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.10.16.14.12.15;	author crevells;	state Exp;
branches;
next	;
commitid	2c374714c6be4567;


desc
@@


1.1
log
@[162932] gmf_head crevells 071016 [NoteTextLabel] WrapLabel should use Gef's text layout
@
text
@/******************************************************************************
 * Copyright (c) 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.text;

import org.eclipse.draw2d.TextUtilities;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Font;

/**
 * @@author satif, crevells
 * @@since 2.1
 */
public class TextUtilitiesEx
    extends TextUtilities {

    /**
     * The mapmode to be used for translating measurement units.
     */
    private IMapMode mapmode;

    /**
     * Creates a new instance.
     * @@param mapmode mapmode to be used for translating measurement units
     */
    public TextUtilitiesEx(IMapMode mapmode) {
        super();
        this.mapmode = mapmode;
    }

    public int getAscent(Font font) {
        int ascent = super.getAscent(font);
        return mapmode.DPtoLP(ascent);
    }

    public int getDescent(Font font) {
        int descent = super.getDescent(font);
        return mapmode.DPtoLP(descent);
    }

    public Dimension getStringExtents(String s, Font f) {
        Dimension dimension = super.getStringExtents(s, f);

        // If the font is in italics, this does not always return the correct
        // size and the text can get clipped. See
        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=5190. Compensate for
        // this here until the bugzilla is fixed in SWT by adding an extra half
        // a character space here.
        if ((f.getFontData()[0].getStyle() & SWT.ITALIC) != 0) {
            dimension.width += (dimension.width / s.length()) / 2;
        }

        return new Dimension(mapmode.DPtoLP(dimension.width), mapmode
            .DPtoLP(dimension.height));
    }

    public Dimension getTextExtents(String s, Font f) {
        Dimension dimension = super.getTextExtents(s, f);

        // If the font is in italics, this does not always return the correct
        // size and the text can get clipped. See
        // https://bugs.eclipse.org/bugs/show_bug.cgi?id=5190. Compensate for
        // this here until the bugzilla is fixed in SWT by adding an extra half
        // a character space here.
        if ((f.getFontData()[0].getStyle() & SWT.ITALIC) != 0 && s.length() > 0) {
            dimension.width += (dimension.width / s.length()) / 2;
        }

        return new Dimension(mapmode.DPtoLP(dimension.width), mapmode
            .DPtoLP(dimension.height));
    }

}
@
