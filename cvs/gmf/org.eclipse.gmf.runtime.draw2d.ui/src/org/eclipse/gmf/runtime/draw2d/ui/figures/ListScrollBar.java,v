head	1.9;
access;
symbols
	v20081023-2107:1.9
	v20081022-1925:1.9
	v20081021-1810:1.9
	v20081020-0700:1.9
	v20080911-1728:1.9
	v20080911-1506:1.9
	v20080910-1520:1.9
	v20080910-1510:1.9
	v20080903-1520:1.9
	v20080903-1510:1.9
	v20080722-1827:1.9
	R2_1_maintenance:1.9.0.4
	Root_R2_1_maintenance:1.9
	R2_1_0:1.9
	v20080610-1132:1.9
	v20080603-1553:1.9
	v20080512-1200:1.9
	v20080503-1740:1.9
	v20080501-1739:1.9
	v20080425-1959:1.9
	v20080417-1610:1.9
	v20080407-2250:1.9
	v20080407-0930:1.9
	v20080404-1111:1.9
	v20080222-1200:1.9
	v20080215-1500:1.9
	v20080215-1200:1.9
	v20080201-2010:1.9
	v20080114-1111:1.9
	v20071108-0000:1.9
	v20071003-0000:1.9
	v20070928-0000:1.9
	v20070915-0000:1.9
	v20070903-0000:1.9
	v20070830-0000:1.9
	v20070809-0000:1.9
	R2_0_maintenance:1.9.0.2
	R2_0:1.9
	R4_20:1.9
	v20070621-0000:1.9
	RC3_20:1.9
	v20070605-1400:1.9
	v20070601-1400:1.9
	v20070518-1300:1.9
	v20070330-1300:1.9
	v20070221-1500:1.9
	v20070208-1800:1.8
	v20070202-0200:1.5.2.1
	M4_20:1.8
	v20061218-1200:1.8
	v20061214-0000:1.7
	M3_20:1.6
	v20061013-1330:1.6
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060824-1600:1.5
	v20060817-1500:1.5
	v20060810-1700:1.5
	v20060803-1200:1.5
	v20060728-0500:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.4
	v20060519-0800:1.4
	RC2_10:1.4
	I20060505-1400:1.4
	I20060428-1300:1.4
	I20060424-0500:1.4
	I20060424-0300:1.4
	M6_10:1.4
	I20060407-1200:1.4
	I20060331-1000:1.4
	I20060324-0300:1.4
	I20060317-1300:1.4
	I20060317-1200:1.4
	I20060316-1300:1.4
	I20060309-1300:1.4
	M5_10:1.4
	S20060303-1600:1.4
	I20060227-1730:1.4
	I20060216-1945:1.4
	I20060210-1715:1.4
	I20060209-1815:1.4
	I20060203-0830:1.4
	I20060129-1145:1.4
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.9
date	2007.02.09.20.53.14;	author crevells;	state Exp;
branches;
next	1.8;
commitid	6cc445ccdf3a4567;

1.8
date	2006.12.15.17.31.29;	author mmostafa;	state Exp;
branches;
next	1.7;
commitid	363c4582dbf14567;

1.7
date	2006.12.06.14.37.46;	author crevells;	state Exp;
branches;
next	1.6;
commitid	2b014576d5b94567;

1.6
date	2006.10.03.15.04.52;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2006.06.05.18.20.39;	author mmostafa;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.11.25.19.37.57;	author cmahoney;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.21.27.59;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.42;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.09.13.16.46.18;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.9
log
@[173686] gmf_head crevells 070209 Clients of ScaledGraphics have issues when using setAlpha() and the advanced graphics library isn't present
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.figures;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import org.eclipse.draw2d.Border;
import org.eclipse.draw2d.ChangeEvent;
import org.eclipse.draw2d.ChangeListener;
import org.eclipse.draw2d.Clickable;
import org.eclipse.draw2d.ColorConstants;
import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.MarginBorder;
import org.eclipse.draw2d.Panel;
import org.eclipse.draw2d.SchemeBorder;
import org.eclipse.draw2d.ScrollBar;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.gmf.runtime.draw2d.ui.graphics.GCUtilities;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.DropShadowButtonBorder;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;
import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dUIPluginImages;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Display;


/**
 * 
 * @@author sshaw
 *
 */
public class ListScrollBar extends ScrollBar {

	static private ImageConstants icons = new ImageConstants();
	private Image upIcon, upPressedIcon, upGrayedIcon, downIcon, downPressedIcon, downGrayedIcon;

	private ImageFigureEx upLabel;
	private ImageFigureEx downLabel;

	private static Border dropshadow = new DropShadowButtonBorder();

	/**
	 * Constructor
	 * 
	 * @@param orientation int that is a define from <code>Orientable</code>
	 * @@param insets the <code>Insets> that represents the white space buffer around the scroll bar in 
	 * logical coordinates.
	 * @@param size the <code>Dimension</code> that is the size of the scroll bar end boxes in 
	 * logical coordinates
	 * @@param stepInc the <code>int</code> space to jump when incrementing the scroll bar one step in
	 * logical coordinates
	 * @@param pageInc the <code>int</code> space to jump when paging the scroll bar up or down in
	 * logical coordinates.
	 */
	public ListScrollBar(int orientation, Insets insets, Dimension size, int stepInc, int pageInc) {
		setOrientation(orientation);
		
		Border margin = new MarginBorder(insets.top, insets.left, insets.bottom, insets.right);
		
		setBorder(margin);
		setPreferredSize(size.width, size.height);
		setStepIncrement(stepInc);
		setPageIncrement(pageInc);

		upIcon = isHorizontal()? icons.left : icons.up;
		upPressedIcon = isHorizontal()? icons.leftPressed : icons.upPressed;
		upGrayedIcon = isHorizontal()? icons.leftGrayed : icons.upGrayed;
		downIcon = isHorizontal()? icons.right : icons.down;
		downPressedIcon = isHorizontal()? icons.rightPressed : icons.downPressed;
		downGrayedIcon = isHorizontal()? icons.rightGrayed : icons.downGrayed;
	}


	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.ScrollBar#createDefaultDownButton()
	 */
	protected Clickable createDefaultDownButton() {
		downLabel = new ImageFigureEx(downIcon);
		downLabel.setOpaque(true);
		addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				updateDownLabel();
			}
		});
		Clickable button = new Clickable(downLabel);
		button.getModel().addChangeListener(new ChangeListener() {
			public void handleStateChanged(ChangeEvent event) {
				updateDownLabel();
			}
		});

		button.setFiringMethod(Clickable.REPEAT_FIRING);
		button.setRolloverEnabled(true);
		button.setBorder(dropshadow);
		button.setOpaque(false);
		return button;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.ScrollBar#createDefaultUpButton()
	 */
	protected Clickable createDefaultUpButton() {
		upLabel = new ImageFigureEx(upIcon);
		upLabel.setOpaque(true);
		addPropertyChangeListener(new PropertyChangeListener() {
			public void propertyChange(PropertyChangeEvent event) {
				updateUpLabel();
			}
		});
		Clickable button = new Clickable(upLabel);
		button.getModel().addChangeListener(new ChangeListener() {
			public void handleStateChanged(ChangeEvent event) {
				updateUpLabel();
			}
		});

		button.setFiringMethod(Clickable.REPEAT_FIRING);
		button.setRolloverEnabled(true);
		button.setBorder(dropshadow);
		button.setOpaque(false);
		return button;
	}

	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.ScrollBar#initialize()
	 */
	protected void initialize() {
		super.initialize();
		setPageUp(null);
		setPageDown(null);
		setOpaque(false);
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.ScrollBar#createDefaultThumb()
	 */
	protected IFigure createDefaultThumb() {
		Panel thumb = new Panel() {

			public void paint(Graphics graphics) {
				if (GCUtilities.supportsAdvancedGraphics()){
					graphics.setAlpha(128);
				}
				super.paint(graphics);
			}
			
		};
		thumb.setMinimumSize(new Dimension(6, 6));
		thumb.setBackgroundColor(ColorConstants.button);

		thumb.setBorder(new SchemeBorder(SchemeBorder.SCHEMES.RIDGED));
		return thumb;
	}


	private void updateDownLabel() {
		Image icon = null;
		if (((Clickable) getButtonDown()).getModel().isPressed()
			|| !((Clickable) getButtonDown()).getModel().isMouseOver())
			icon = downPressedIcon;
		if (getValue() >= (getMaximum() - getExtent())) {
			icon = downGrayedIcon;
			getButtonDown().setEnabled(false);
		} else {
			getButtonDown().setEnabled(true);
			if (icon == null)
				icon = downIcon;
		}
		downLabel.setImage(icon);
	}

	private void updateUpLabel() {
		Image icon = null;
		if (((Clickable) getButtonUp()).getModel().isPressed()
			|| !((Clickable) getButtonUp()).getModel().isMouseOver())
			icon = upPressedIcon;
		if (getValue() <= getMinimum()) {
			icon = upGrayedIcon;
			getButtonUp().setEnabled(false);
		} else {
			getButtonUp().setEnabled(true);
			if (icon == null)
				icon = upIcon;
		}
		upLabel.setImage(icon);
	}

	/**
	 * @@author sshaw
	 *
	 */
	static private class ImageConstants {

		private final Image up, upPressed, upGrayed,
						   down, downPressed, downGrayed,
						   left, leftPressed, leftGrayed,
						   right, rightPressed, rightGrayed;
		/**
		 * 
		 */
		public ImageConstants() {
			RGB[] palette2 = new RGB[] { FigureUtilities.integerToColor(new Integer(SWT.COLOR_LIST_BACKGROUND)).getRGB(), new RGB(0, 0, 0), new RGB(0, 0, 0), new RGB(0, 0, 0) };
			RGB[] palette1 = new RGB[] { FigureUtilities.integerToColor(new Integer(SWT.COLOR_LIST_FOREGROUND)).getRGB(), new RGB(0, 0, 0)};

			ImageData image;

			// normal images
			image = 
				Draw2dUIPluginImages.DESC_DOWN_ARROW.getImageData();
			down = convert(image, palette2);

			image = 
				Draw2dUIPluginImages.DESC_UP_ARROW.getImageData();
			up = convert(image, palette2);

			image = 
				Draw2dUIPluginImages.DESC_LEFT_ARROW.getImageData();
			left = convert(image, palette2);

			image = 
				Draw2dUIPluginImages.DESC_RIGHT_ARROW.getImageData();
			right = convert(image, palette2);

			// pressed images
			upPressed = Draw2dUIPluginImages
				.get(Draw2dUIPluginImages.IMG_UP_PRESSED_ARROW);

			downPressed = Draw2dUIPluginImages
				.get(Draw2dUIPluginImages.IMG_DOWN_PRESSED_ARROW);

			leftPressed = Draw2dUIPluginImages
				.get(Draw2dUIPluginImages.IMG_LEFT_PRESSED_ARROW);

			rightPressed = Draw2dUIPluginImages
				.get(Draw2dUIPluginImages.IMG_RIGHT_PRESSED_ARROW);

			// grayed images
			image = 
				Draw2dUIPluginImages.DESC_UP_GRAY_ARROW.getImageData();
			upGrayed = convert(image, palette1);

			image = 
				Draw2dUIPluginImages.DESC_DOWN_GRAY_ARROW.getImageData();
			downGrayed = convert(image, palette1);

			image = 
				Draw2dUIPluginImages.DESC_LEFT_GRAY_ARROW.getImageData();
			leftGrayed = convert(image, palette1);

			image = 
				Draw2dUIPluginImages.DESC_RIGHT_GRAY_ARROW.getImageData();
			rightGrayed = convert(image, palette1);
			
			palette1 = null;
			palette2 = null;
		}

		private Image convert(ImageData theData, RGB[] colors) {
			//theData.palette = new PaletteData(colors);
			return new Image(Display.getCurrent(), theData);
		}
	}
}
@


1.8
log
@[168224]  gmf_head mmostafa 061215 RTL support is broken in 2.0
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
d30 1
a32 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.graphics.GCUtilities;
@


1.7
log
@[110971] gmf_head crevells 061206 Compartment Scrolling Issues
Contributed by: Alex Boyko
@
text
@d32 1
d155 3
a157 1
				graphics.setAlpha(128);
@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d21 3
d25 2
a143 1
		setThumb(null);
d146 20
@


1.5
log
@bugzilla 124976  gmf-head mmostafa 060606 Bad compartment scroller icons on hover
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
@


1.5.2.1
log
@[153901] gmf_R1_0_maintenance tmacdoug 060913 Sweep copyright files for anything changed in 2006
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.4
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@a30 1
import org.eclipse.swt.graphics.PaletteData;
d246 1
a246 1
			theData.palette = new PaletteData(colors);
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d27 1
a27 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
d196 2
a197 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.DOWN_ARROW_IMAGE).getImageData();
d200 2
a201 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.UP_ARROW_IMAGE).getImageData();
d204 2
a205 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.LEFT_ARROW_IMAGE).getImageData();
d208 2
a209 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.RIGHT_ARROW_IMAGE).getImageData();
d213 2
a214 2
			upPressed = Draw2dResourceManager.getInstance().getImage(
				Draw2dResourceManager.UP_PRESSED_ARROW_IMAGE);
d216 2
a217 2
			downPressed = Draw2dResourceManager.getInstance().getImage(
				Draw2dResourceManager.DOWN_PRESSED_ARROW_IMAGE);
d219 2
a220 2
			leftPressed = Draw2dResourceManager.getInstance().getImage(
				Draw2dResourceManager.LEFT_PRESSED_ARROW_IMAGE);
d222 2
a223 2
			rightPressed = Draw2dResourceManager.getInstance().getImage(
				Draw2dResourceManager.RIGHT_PRESSED_ARROW_IMAGE);
d226 2
a227 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.UP_GRAY_ARROW_IMAGE).getImageData();
d230 2
a231 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.DOWN_GRAY_ARROW_IMAGE).getImageData();
d234 2
a235 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.LEFT_GRAY_ARROW_IMAGE).getImageData();
d238 2
a239 2
			image = Draw2dResourceManager.getInstance().getImageDescriptor(
				Draw2dResourceManager.RIGHT_GRAY_ARROW_IMAGE).getImageData();
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d23 5
a34 5
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.DropShadowButtonBorder;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.ImageFigureEx;
import org.eclipse.gmf.runtime.draw2d.ui.internal.l10n.Draw2dResourceManager;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;

a50 3
	private static Border margin = new MarginBorder(MapMode.DPtoLP(1), MapMode.DPtoLP(2),
		MapMode.DPtoLP(1), MapMode.DPtoLP(0));

d52 11
a62 1
	 * @@param orientation
d64 1
a64 1
	public ListScrollBar(int orientation) {
d66 3
d70 3
a72 3
		setPreferredSize(MapMode.DPtoLP(15), MapMode.DPtoLP(15));
		setStepIncrement(MapMode.DPtoLP(10));
		setPageIncrement(MapMode.DPtoLP(50));
d82 1
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

