head	1.6;
access;
symbols
	v20081023-2107:1.6
	v20081022-1925:1.6
	v20081021-1810:1.6
	v20081020-0700:1.6
	v20080911-1728:1.6
	v20080911-1506:1.6
	v20080910-1520:1.6
	v20080910-1510:1.6
	v20080903-1520:1.6
	v20080903-1510:1.6
	v20080722-1827:1.6
	R2_1_maintenance:1.6.0.4
	Root_R2_1_maintenance:1.6
	R2_1_0:1.6
	v20080610-1132:1.6
	v20080603-1553:1.6
	v20080512-1200:1.6
	v20080503-1740:1.6
	v20080501-1739:1.6
	v20080425-1959:1.6
	v20080417-1610:1.6
	v20080407-2250:1.6
	v20080407-0930:1.6
	v20080404-1111:1.6
	v20080222-1200:1.6
	v20080215-1500:1.6
	v20080215-1200:1.6
	v20080201-2010:1.6
	v20080114-1111:1.6
	v20071108-0000:1.6
	v20071003-0000:1.6
	v20070928-0000:1.6
	v20070915-0000:1.6
	v20070903-0000:1.6
	v20070830-0000:1.6
	v20070809-0000:1.6
	R2_0_maintenance:1.6.0.2
	R2_0:1.6
	R4_20:1.6
	v20070621-0000:1.6
	RC3_20:1.6
	v20070605-1400:1.6
	v20070601-1400:1.6
	v20070518-1300:1.6
	v20070330-1300:1.6
	v20070221-1500:1.6
	v20070208-1800:1.6
	v20070202-0200:1.5.2.1
	M4_20:1.6
	v20061218-1200:1.6
	v20061214-0000:1.6
	M3_20:1.6
	v20061013-1330:1.6
	v20060925-1700:1.5.2.1
	v20060919-0800:1.5.2.1
	M1_20:1.5
	v20060824-1600:1.5.2.1
	v20060817-1500:1.5.2.1
	v20060810-1700:1.5.2.1
	v20060803-1200:1.5.2.1
	v20060728-0500:1.5
	v20060721-1130:1.5
	v20060713-1700:1.5
	R1_0_maintenance:1.5.0.2
	R1_0:1.5
	v20060627-1200:1.5
	v20060616-1200:1.5
	v20060609-1400:1.5
	v20060531-1730:1.5
	v20060519-0800:1.5
	RC2_10:1.5
	I20060505-1400:1.5
	I20060428-1300:1.5
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.5
	I20060120-1530:1.5
	I20060113-1700:1.5
	M4_10:1.5
	I20060107-1100:1.5
	I20060105-1630:1.5
	I20051230-1230:1.5
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.6
date	2006.10.03.15.04.52;	author ahunter;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.23.20.28.41;	author mmostafa;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2005.12.12.15.47.56;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.04.21.27.59;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.42;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.49;	author sshaw;	state Exp;
branches;
next	;

1.5.2.1
date	2006.08.02.17.08.00;	author ahunter;	state Exp;
branches;
next	;


desc
@@


1.6
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.figures;

import org.eclipse.draw2d.Graphics;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.LineBorderEx;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

/*
 * @@canBeSeenBy %partners
 */
/**
 * @@author sshaw
 *
 */
public class RectangularDropShadowLineBorder
	extends LineBorderEx
	implements DropShadowBorder {

	// whether the shadow will be painted on this border also
	private boolean drawDropShadow = true;
	
	/**
	 * delegated <code>DropShadow</code> object that has the drop shadow logic.
	 */
	private static RectangularDropShadow dropShadow = new RectangularDropShadow();
 
	/**
	 * Constructs a LineBorder 
	 * of the specified width.
	 *
	 * @@param w  Width of inset for border
	 * 
	 */
	public RectangularDropShadowLineBorder(int w) {
		super(w);
	}

	/**
	 * Constructs a DropShadowLineBorder with the foreground color and backgroud color
	 * of the figure that it is drawing the border for.
	 *
	 * 
	 */
	public RectangularDropShadowLineBorder() {
		super();
	}

	/**
	 * Method for determining the width of the drop shadow border will take up on the shape.
	 * @@return int the width of the drop shadow
	 */
	protected int getShadowWidth() {
		if( shouldDrawDropShadow() == true )
		{
			return getDropShadow().getShadowWidth();
		}
		return 0;
		
	}

	/**
	 * Method for determining the height of the drop shadow border will take up on the shape.
	 * @@return int the height of the drop shadow
	 */
	protected int getShadowHeight() {
		if( shouldDrawDropShadow() == true )
		{
			return getDropShadow().getShadowHeight();
		}
		return 0;
	}

	/**
	 * Method for determining the inset the border will take up on the shape.
	 * @@param figure Figure that will be inset from the border
	 * @@return Insets the Insets for the border on the given figure.
	 */
	public Insets getInsets(IFigure figure) {
		Insets insetsNew = super.getInsets(figure);
		insetsNew.top = 0;
		insetsNew.left = 0;
		insetsNew.bottom = MapModeUtil.getMapMode(figure).DPtoLP(insetsNew.bottom + getShadowHeight());
		insetsNew.right = MapModeUtil.getMapMode(figure).DPtoLP(insetsNew.right + getShadowWidth());

		return insetsNew;
	}

	/**
	 * Method shouldDrawShadow.  Determines if the shadow should be drawn 
	 * on the figure border.   Checks that a drop shadow is the preferred
	 * border, and that the drop shadow can be drawn on this figure.
	 * @@param figure Figure that the border will be drawn on
	 * @@return boolean true if the shadow should be drawn, false otherwise.
	 */
	protected boolean shouldDrawShadow(IFigure figure) {
		
		if (shouldDrawDropShadow()== false)
			return false;
		
		Rectangle rBox = figure.getBounds();

		// check to see if we can draw a shadow on this figure
		if (rBox.width < getShadowWidth() * 2
			|| rBox.height < getShadowHeight() * 2) {
			return false;
		}

		return true;
	}
	
	/**
	 * @@see TransparentBorder#getTransparentInsets(IFigure)
	 */
	public Insets getTransparentInsets(IFigure figure) {
		Insets insetsNew = new Insets();
		
		insetsNew.top = 0;
		insetsNew.left = 0;
		insetsNew.bottom = MapModeUtil.getMapMode(figure).DPtoLP(getShadowHeight());
		insetsNew.right = MapModeUtil.getMapMode(figure).DPtoLP(getShadowWidth());

		return insetsNew;
	}

	/**
	 * Is this border Opaque or not.  
	 * @@return boolean true if opaque, false otherwise
	 */
	public boolean isOpaque() {
		return false;
	}


	/**
	 * Method paintLineBorder.
	 * Painting the line border on the shape without the dropshadow.
	 * @@param figure Figure that the border will be painted on
	 * @@param g Graphics context 
	 * @@param insets Insets value that contrains how the border will be painted.
	 */
	public void paintLineBorder(IFigure figure, Graphics g, Insets insets) {

		// will not paint line border if width is 0
		if (getWidth() > 0) { 
			tempRect.setBounds(getPaintRectangle(figure, insets));
			g.setLineWidth(getWidth());
			g.drawRectangle(tempRect);
		}
	}
	
	/**
	 * Paint the border of the figure with a dropshadow.
	 * @@param figure Figure that the border will be painted on
	 * @@param g Graphics context 
	 * @@param insets Insets value that contrains how the border will be painted.
	 * @@param rBox Rectangle representing figure bounds.
	 */
	public void paintDropShadowBorder(IFigure figure, Graphics g, Insets insets, Rectangle rBox) {

		//Draw the dropShadow.
		getDropShadow().drawShadow(figure,g,rBox);
		
		IMapMode mm = MapModeUtil.getMapMode(figure);
		
		//Draw the line border.				
		if (getWidth() > 0) { 
			//will not paint line border if width is 0
			tempRect.setBounds(getPaintRectangle(figure, insets));
			tempRect.width -= mm.DPtoLP(getShadowWidth());
			tempRect.height -= mm.DPtoLP(getShadowHeight());
			if (getWidth() % 2 == 1) {
				tempRect.width -= mm.DPtoLP(1);
				tempRect.height -= mm.DPtoLP(1);
			}
			tempRect.shrink(mm.DPtoLP(getWidth() / 2), mm.DPtoLP(getWidth() / 2));
			g.setLineWidth(getWidth());

			if (getColor() != null) {
				g.setForegroundColor(getColor());
			} else {
				g.setForegroundColor(figure.getForegroundColor());
			}
			g.drawRectangle(tempRect);
		}
	}

	/**
	 * Overridden method for painting the border on the shape.
	 * @@param figure Figure that the border will be painted on
	 * @@param g Graphics context 
	 * @@param insets Insets value that contrains how the border will be painted.
	 */
	public void paint(IFigure figure, Graphics g, Insets insets) {

		Rectangle rBox = new Rectangle(figure.getBounds());

		// draw drop shadow border
		if (shouldDrawShadow(figure)) {
			paintDropShadowBorder(figure, g, insets, rBox);			
		}
		//draw line border
		else{			
			paintLineBorder(figure, g, insets);
		}		
	}
	
	/* 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.figures.DropShadowBorder#drawDropShadow()
	 */
	public boolean shouldDrawDropShadow() {		
		return this.drawDropShadow;
	}

	/* 
	 * @@see org.eclipse.gmf.runtime.gef.ui.internal.figures.DropShadowBorder#drawDropShadow(boolean)
	 */
	public void setShouldDrawDropShadow(boolean bDrawDropShadow) {
		this.drawDropShadow=bDrawDropShadow;
	}

	/**
	 * @@return Returns the drip shadow iamge.
	 */
	protected RectangularDropShadow getDropShadow() {
		return dropShadow;
	}

}
@


1.5
log
@bugzilla 119065 gmf-head mmostafa 051224 Enahnce the ViewRefactorHelper utility
@
text
@d46 1
a46 1
	 * @@since 2.0
d56 1
a56 1
	 * @@since 2.0
@


1.5.2.1
log
@[148078] gmf_R_1_0_maintenance aboyko 060802 @@since 3.0/3.1 tags in Javadocs in DiagramDocumentEditor class
@
text
@d46 1
a46 1
	 * 
d56 1
a56 1
	 * 
@


1.4
log
@bugzilla 110316 gmf-head 051212 Compiler warning count should be 0 - runtime diagram layer
@
text
@d160 1
@


1.3
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@a18 1
import org.eclipse.gmf.runtime.draw2d.ui.internal.figures.TransparentBorder;
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@a17 1

d20 2
a21 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d97 2
a98 2
		insetsNew.bottom = MapMode.DPtoLP(insetsNew.bottom + getShadowHeight());
		insetsNew.right = MapMode.DPtoLP(insetsNew.right + getShadowWidth());
d134 2
a135 2
		insetsNew.bottom = MapMode.DPtoLP(getShadowHeight());
		insetsNew.right = MapMode.DPtoLP(getShadowWidth());
d177 2
d183 2
a184 2
			tempRect.width -= MapMode.DPtoLP(getShadowWidth());
			tempRect.height -= MapMode.DPtoLP(getShadowHeight());
d186 2
a187 2
				tempRect.width -= MapMode.DPtoLP(1);
				tempRect.height -= MapMode.DPtoLP(1);
d189 1
a189 1
			tempRect.shrink(MapMode.DPtoLP(getWidth() / 2), MapMode.DPtoLP(getWidth() / 2));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

