head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081021-1810:1.3
	v20081020-0700:1.3
	v20080911-1728:1.3
	v20080911-1506:1.3
	v20080910-1520:1.3
	v20080910-1510:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080215-1200:1.3
	v20080201-2010:1.3
	v20080114-1111:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070830-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070330-1300:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.3
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	RC2_10:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.3;
locks; strict;
comment	@# @;


1.3
date	2005.10.14.19.37.51;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.52;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@bugzilla 112685 gmf-head sshaw 051014 Sweep code for creation of Boolean objects
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.internal.routers;

import java.util.HashMap;

import org.eclipse.draw2d.BendpointConnectionRouter;
import org.eclipse.draw2d.Connection;
import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.ConnectionRouter;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PointList;
import org.eclipse.draw2d.geometry.PrecisionPoint;


/**
 * @@author sshaw
 *
 * This router manages the tree routers on a given target.  Potentially multiple trees
 * can exist if they have different semantic types.
 */
public class ForestRouter extends BendpointConnectionRouter implements OrthogonalRouter {

	private HashMap connections = new HashMap();
	private HashMap trunkVertexes = new HashMap();
	
	private class AnchorKey {
    
		private ConnectionAnchor anchor;
		private Object qualifier;
	
		AnchorKey(ConnectionAnchor anchor, Object qualifier) {
			this.anchor = anchor;
			this.qualifier = qualifier;
		}
	
		public boolean equals(Object object) {
			boolean isEqual = false;
			AnchorKey hashKey;
		
			if (object instanceof AnchorKey) {
				hashKey = (AnchorKey)object;
				ConnectionAnchor hkA1 = hashKey.getAnchor();
				Object hkA2 = hashKey.getQualifier();
			
				isEqual = (hkA1.equals(anchor) && hkA2.equals(qualifier));
			}
			return isEqual;
		}
			
		/**
		 * Accessor to retrieve the <code>ConnectionAnchor</code> that is stored as part of the key.
		 * 
		 * @@return the <code>ConnectionAnchor</code> that is used for the key.
		 */
		public ConnectionAnchor getAnchor() {
			return anchor;
		}
	
		/**
		 * Accessor to retrieve the qualifier object that is stored as part of the key.
		 * 
		 * @@return the <code>Object</code> that is designated the qualifier.
		 */
		public Object getQualifier() {
			return qualifier;	
		}
	
		/* 
		 * (non-Javadoc)
		 * @@see java.lang.Object#hashCode()
		 */
		public int hashCode() {
			return anchor.hashCode() ^ qualifier.hashCode();
		}
	}
	
	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.draw2d.ConnectionRouter#invalidate(org.eclipse.draw2d.Connection)
	 */
	public void invalidate(Connection conn) {
		if (conn.getSourceAnchor() == null || conn.getTargetAnchor() == null)
			return;
		
		ConnectionRouter connectionRouter = getSubRouter(conn);
		if (connectionRouter != null)
			connectionRouter.invalidate(conn);
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.draw2d.ConnectionRouter#remove(org.eclipse.draw2d.Connection)
	 */
	public void remove(Connection conn) {
		if (conn.getSourceAnchor() == null || conn.getTargetAnchor() == null)
			return;
		
		ConnectionRouter connectionRouter = getSubRouter(conn);
		if (connectionRouter != null)
			connectionRouter.remove(conn);
		
		super.remove(conn);
	}

	
	/**
	 * Checks for trunk overlap and re-routes to avoid.
	 */
	public void route(Connection conn) {
		if (conn.getTargetAnchor().getOwner() == null ||
			conn.getSourceAnchor().getOwner() == null) {
			PointList points = conn.getPoints();
			points.removeAllPoints();

			Point ref1 = conn.getTargetAnchor().getReferencePoint();
			Point ref2 = conn.getSourceAnchor().getReferencePoint();
			PrecisionPoint precisePt = new PrecisionPoint();

			precisePt.setLocation(conn.getSourceAnchor().getLocation(ref1));
			conn.translateToRelative(precisePt);
			points.addPoint(precisePt);
 
			precisePt.setLocation(conn.getTargetAnchor().getLocation(ref2));
			conn.translateToRelative(precisePt);
			points.addPoint(precisePt);
			conn.setPoints(points);
			return;
		}
		
		TreeRouter treeRouter = getSubRouter(conn);
		
		// remove existing trunk vertex before routing occurs.
		Dimension trunk = treeRouter.getTrunkVertex();
		if (trunk != null) {
			AnchorKey trunkKey = new AnchorKey(conn.getTargetAnchor(), trunk);
			trunkVertexes.remove(trunkKey);
		}
		 
		if (treeRouter != null) {
			treeRouter.route(conn);
		
			trunk = treeRouter.getTrunkVertex();
			Dimension adjustedTrunk = accountForTrunkOverlap(trunk, conn);
			if (!adjustedTrunk.equals(trunk)) {
				treeRouter.setTrunkVertex(adjustedTrunk);
				treeRouter.invalidate(conn);
			}
		}
	}
	
	/**
	 * Makes sure the routed tree doesn't intersect with an existing tree in the "forest".
	 * This is called recursively for each trunk.
	 * 
	 * @@param trunk <code>Dimension</code> trunkVertex value to compare
	 * @@param conn <code>Connection</code> that is connection currently being routed
	 * @@return <code>Dimension</code> new trunk vertex value
	 */
	private Dimension accountForTrunkOverlap(Dimension trunk, Connection conn) {
		if (conn.getTargetAnchor() == null ||
			conn.getTargetAnchor().getOwner() == null)
			return trunk;
		
		AnchorKey trunkKey = new AnchorKey(conn.getTargetAnchor(), trunk);
		
		// check if trunk vertex doesn't exist or if it exceeds a maximum then
		// return.
		int ownerExt = conn.getTargetAnchor().getOwner().getBounds().width / 2;
		int trunkExt = trunk.width;
		
		if (conn instanceof ITreeConnection) {
			if (((ITreeConnection)conn).getOrientation() == ITreeConnection.Orientation.HORIZONTAL) {
				ownerExt = conn.getTargetAnchor().getOwner().getBounds().height / 2;
				trunkExt = trunk.height;
			}
		}
		
		if (trunkVertexes.get(trunkKey) == null ||
			Math.abs(trunkExt) > ownerExt) {
			trunkVertexes.put(trunkKey, Boolean.TRUE);
			return trunk;
		}
		else {
			Dimension newTrunk = new Dimension(trunk);
			newTrunk.expand(10, 10);
			return accountForTrunkOverlap(newTrunk, conn);
		}
	}

	/**
	 * Utility method to retrieve the sub router that manages the individual trees.
	 * 
	 * @@param conn <code>Connection</code> to be routered
	 * @@return <code>TreeRouter</code> that will end up routing the given <code>Connection</code>.
	 */
	public TreeRouter getSubRouter(Connection conn) {
		if (conn.getTargetAnchor() == null)
			return null;
		
		String hint = "base"; //$NON-NLS-1$
		if (conn instanceof ITreeConnection) {
			hint = ((ITreeConnection)conn).getHint();
		}
		
		AnchorKey connectionKey = new AnchorKey(conn.getTargetAnchor(), hint);
		TreeRouter connectionRouter = (TreeRouter)connections.get(connectionKey);
		if (connectionRouter == null) {
			connectionRouter = new TreeRouter();
			connections.put(connectionKey, connectionRouter);
		}
		
		return connectionRouter;
	}
}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d191 1
a191 1
			trunkVertexes.put(trunkKey, new Boolean(true));
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

