head	1.3;
access;
symbols
	v20081023-2107:1.3
	v20081022-1925:1.3
	v20081021-1810:1.3
	v20081020-0700:1.3
	v20080911-1728:1.3
	v20080911-1506:1.3
	v20080910-1520:1.3
	v20080910-1510:1.3
	v20080903-1520:1.3
	v20080903-1510:1.3
	v20080722-1827:1.3
	R2_1_maintenance:1.3.0.6
	Root_R2_1_maintenance:1.3
	R2_1_0:1.3
	v20080610-1132:1.3
	v20080603-1553:1.3
	v20080512-1200:1.3
	v20080503-1740:1.3
	v20080501-1739:1.3
	v20080425-1959:1.3
	v20080417-1610:1.3
	v20080407-2250:1.3
	v20080407-0930:1.3
	v20080404-1111:1.3
	v20080222-1200:1.3
	v20080215-1500:1.3
	v20080215-1200:1.3
	v20080201-2010:1.3
	v20080114-1111:1.3
	v20071108-0000:1.3
	v20071003-0000:1.3
	v20070928-0000:1.3
	v20070915-0000:1.3
	v20070903-0000:1.3
	v20070830-0000:1.3
	v20070809-0000:1.3
	R2_0_maintenance:1.3.0.4
	R2_0:1.3
	R4_20:1.3
	v20070621-0000:1.3
	RC3_20:1.3
	v20070605-1400:1.3
	v20070601-1400:1.3
	v20070518-1300:1.3
	v20070330-1300:1.3
	v20070221-1500:1.3
	v20070208-1800:1.3
	v20070202-0200:1.3
	M4_20:1.3
	v20061218-1200:1.3
	v20061214-0000:1.3
	M3_20:1.3
	v20061013-1330:1.3
	v20060925-1700:1.3
	v20060919-0800:1.3
	M1_20:1.3
	v20060824-1600:1.3
	v20060817-1500:1.3
	v20060810-1700:1.3
	v20060803-1200:1.3
	v20060728-0500:1.3
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	RC2_10:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.3
	v20051030:1.2;
locks; strict;
comment	@# @;


1.3
date	2005.11.04.22.13.08;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.42;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bugzilla#113157 gmf_head cmahoney 051104 Updating tutorial guides and some comments with name changes
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.internal.figures;

import java.util.List;
import java.util.ListIterator;

import org.eclipse.draw2d.AutomaticRouter;
import org.eclipse.draw2d.ConnectionLayer;
import org.eclipse.draw2d.ConnectionRouter;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Rectangle;

import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.FanRouter;
import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.ForestRouter;
import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.ObliqueRouter;
import org.eclipse.gmf.runtime.draw2d.ui.internal.routers.RectilinearRouter;


/**
 * This class provides a hook for the default routers available through the drawing
 * surface.  Specifically, the oblique, rectilinear and tree routers.
 * 
 * @@author sshaw
 * @@canBeSeenBy %partners
 */
public class ConnectionLayerEx extends ConnectionLayer {

	private boolean dirtied = false;
	static private boolean allowJumpLinks = true;
	
	/**
	 * Adds the given figure with the given contraint at the given index.
	 * If the figure is a connection, its connection router is set.
	 * In addition this method override will dirty the jump link
	 * information so that next display update they can be regenerated.
	 *
	 * @@param figure  <code>IFigure</code> being added.
	 * @@param constraint  Constraint of the figure being added.
	 * @@param index  Index where the figure is to be added. 
	 */
	public void add(IFigure figure, Object constraint, int index) {
		super.add(figure, constraint, index);

		dirtyJumpLinks(figure.getBounds());
	}

	/**
	 * Removes the given figure from the connection layer.
	 * In addition this method override will dirty the jump link
	 * information so that next display update they can be regenerated.
	 *
	 * @@param figure  <code>IFigure</code> being removed.
	 */
	public void remove(IFigure figure) {
		super.remove(figure);

		dirtyJumpLinks(figure.getBounds());
	}

	/**
	 * Determines if we should jump links at all in the connection layer.
	 * To address scaleability concerns, we turn off jump links while editing connections.
	 * 
	 * @@return <code>boolean</code> <code>true</code> if the jump links capability is currently
	 * available, <code>false</code> otherwise.
	 */
	static public boolean shouldJumpLinks() {
		return allowJumpLinks;
	}
	
	/**
	 * Method setJumpLinks
	 * This method will set if we should jump links at all in the connection layer.
	 * To address scaleability concerns, we turn off jump links while editing connections.
	 * 
	 * @@param set the current state of the jump links capability based on the <code>boolean</code> 
	 * value passed.  <code>true</code> indicates that jump links is available, <code>false</code>
	 * otherwise.
	 */
	static public void setJumpLinks(boolean set) {
		allowJumpLinks = set;
	}
	
	/**
	 * Method cleanJumpLinks
	 * This method will reset the "dirtied" flag so that we know to redirty
	 * all the connections when the method "dirtyJumpLinks" is called.
	 */
	public void cleanJumpLinks() {
		dirtied = false;
	}
	
	/**
	 * Iterates through all the connections and set a 
	 * flag indicating that the jump link information needs to be updated.
	 * At display time, the connection will regenerate the jump link information.
	 * 
	 * @@param region the <code>Rectangle</code> that indicates the dirty region inside
	 * which the jump links calculations should be regenerated.
	 */
	public void dirtyJumpLinks(Rectangle region) {
		
		if (!dirtied && shouldJumpLinks()) {
			List children = getChildren();
			ListIterator childIter = children.listIterator();
			while (childIter.hasNext()) {
				IFigure poly = (IFigure) childIter.next();
				if (poly instanceof PolylineConnectionEx)
					if (poly.getBounds().intersects(region))
						((PolylineConnectionEx) poly).refreshLine();
			}
			dirtied = true;
		}
	}

	/**
	 * Returns the connection router being used by this layer.
	 *
	 * @@return  Connection router being used by this layer.
	 * @@see  #setConnectionRouter(ConnectionRouter)
	 */
	public ConnectionRouter getConnectionRouter() {
		return getObliqueRouter();
	}

	private ConnectionRouter obliqueRouter = null;
	private ConnectionRouter rectilinearRouter = null;
	private ConnectionRouter treeRouter = null;

	/**
	 * Provides an access point to the oblique router for the entire
	 * layer.  Each connection will contain a reference to this router so that
	 * the router can keep track of overlapping connections and reroute accordingly.
	 * 
	 * @@return the <code>ConnectionRouter</code> that handles oblique style routing.
	 */
	public ConnectionRouter getObliqueRouter() {
		if (obliqueRouter == null) {
			AutomaticRouter router = new FanRouter();
			router.setNextRouter(new ObliqueRouter());
			obliqueRouter = router;
		}

		return obliqueRouter;
	}

	/**
	 * Provides an access point to the rectilinear router for the entire
	 * layer.  Each connection will contain a reference to this router so that
	 * the router can keep track of overlapping connections and reroute accordingly.
	 * 
	 * @@return the <code>ConnectionRouter</code> that handles rectilinear style routing.
	 */
	public ConnectionRouter getRectilinearRouter() {
		if (rectilinearRouter == null)
			rectilinearRouter = new RectilinearRouter();

		return rectilinearRouter;
	}
	
	/**
	 * This method provides an access point to the tree router for the entire
	 * layer.  Each connection will contain a reference to this router so that
	 * the router can keep track of overlapping connections and reroute accordingly.
	 * 
	 * @@return the <code>ConnectionRouter</code> that handles tree style routing.
	 */
	public ConnectionRouter getTreeRouter() {
		if (treeRouter == null)
			treeRouter = new ForestRouter();

		return treeRouter;
	}
}
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d98 1
a98 1
	 * all the connectors when the method "dirtyJumpLinks" is called.
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

