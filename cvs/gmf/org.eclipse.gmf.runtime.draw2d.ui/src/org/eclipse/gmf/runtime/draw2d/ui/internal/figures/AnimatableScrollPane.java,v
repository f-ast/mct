head	1.4;
access;
symbols
	v20081023-2107:1.4
	v20081022-1925:1.4
	v20081021-1810:1.4
	v20081020-0700:1.4
	v20080911-1728:1.4
	v20080911-1506:1.4
	v20080910-1520:1.4
	v20080910-1510:1.4
	v20080903-1520:1.4
	v20080903-1510:1.4
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080610-1132:1.4
	v20080603-1553:1.4
	v20080512-1200:1.4
	v20080503-1740:1.4
	v20080501-1739:1.4
	v20080425-1959:1.4
	v20080417-1610:1.4
	v20080407-2250:1.4
	v20080407-0930:1.4
	v20080404-1111:1.4
	v20080222-1200:1.4
	v20080215-1500:1.4
	v20080215-1200:1.4
	v20080201-2010:1.4
	v20080114-1111:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070928-0000:1.4
	v20070915-0000:1.4
	v20070903-0000:1.4
	v20070830-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.4
	v20070605-1400:1.4
	v20070601-1400:1.4
	v20070518-1300:1.4
	v20070330-1300:1.4
	v20070221-1500:1.4
	v20070208-1800:1.4
	v20070202-0200:1.3.2.1
	M4_20:1.4
	v20061218-1200:1.4
	v20061214-0000:1.4
	M3_20:1.4
	v20061013-1330:1.4
	v20060925-1700:1.3.2.1
	v20060919-0800:1.3.2.1
	M1_20:1.3
	v20060824-1600:1.3.2.1
	v20060817-1500:1.3.2.1
	v20060810-1700:1.3.2.1
	v20060803-1200:1.3.2.1
	v20060728-0500:1.3.2.1
	v20060721-1130:1.3
	v20060713-1700:1.3
	R1_0_maintenance:1.3.0.2
	R1_0:1.3
	v20060627-1200:1.3
	v20060616-1200:1.3
	v20060609-1400:1.3
	v20060531-1730:1.3
	v20060519-0800:1.3
	RC2_10:1.3
	I20060505-1400:1.3
	I20060428-1300:1.3
	I20060424-0500:1.3
	I20060424-0300:1.3
	M6_10:1.3
	I20060407-1200:1.3
	I20060331-1000:1.3
	I20060324-0300:1.3
	I20060317-1300:1.3
	I20060317-1200:1.3
	I20060316-1300:1.3
	I20060309-1300:1.3
	M5_10:1.3
	S20060303-1600:1.3
	I20060227-1730:1.3
	I20060216-1945:1.3
	I20060210-1715:1.3
	I20060209-1815:1.3
	I20060203-0830:1.3
	I20060129-1145:1.3
	I20060127-0900:1.3
	I20060120-1530:1.3
	I20060113-1700:1.3
	M4_10:1.3
	I20060107-1100:1.3
	I20060105-1630:1.3
	I20051230-1230:1.3
	I20051223-1100:1.3
	I20051217-0925:1.3
	I20051208-2000:1.3
	I20051201-1800:1.3
	I20051124-2000:1.3
	M3_10:1.3
	I20051118-1245:1.3
	I20051111-1800:1.3
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.4
date	2006.10.03.15.04.52;	author ahunter;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.19.39.45;	author mmostafa;	state Exp;
branches
	1.3.2.1;
next	1.2;

1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.42;	author sshaw;	state Exp;
branches;
next	;

1.3.2.1
date	2006.07.26.16.04.07;	author mmostafa;	state Exp;
branches;
next	;


desc
@@


1.4
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@/******************************************************************************
 * Copyright (c) 2000, 2003  IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.internal.figures;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Orientable;
import org.eclipse.draw2d.ScrollBar;
import org.eclipse.draw2d.ScrollPane;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;


/**
 * An implementation of an animatable scroll pane
 * 
 * @@author melaasar
 *
 * <p>
 * Code taken from Eclipse reference bugzilla #98820
 *
 */
public class AnimatableScrollPane extends ScrollPane {

	private AnimationModel animationModel = null;
	private boolean expanded = true;
	private static final long delay = 150;

	private void animate() {
		animationModel = new AnimationModel(delay, expanded);
		animationModel.animationStarted();
		while (!animationModel.isFinished())
			this.step();
		animationModel = null;
	}

	/**
	 * Should be called, after which the compoenents can be removed.
	 */
	public void collapse() {
		if (expanded == false)
			return;
		expanded = false;
		animate();
	}

	/** 
	 * Should get called after adding all the new components.
	 */
	public void expand() {
		if (expanded == true)
			return;
		expanded = true;
		animate();
	}

	/**
	 * Sets the scroll pane state as being expanded or not.
	 * 
	 * @@param value the <code>boolean</code> to set the expanded value of.  
	 * If <code>true</code> then the state will be set as expanded, <code>false</code>
	 * if not.
	 */
	public void setExpanded(boolean value) {
		if (expanded == value)
			return;
		expanded = value;
		revalidate();
	}

	/**
	 * Accessor for the expanded property
	 * @@return boolean expanded
	 */
	public final boolean isExpanded() {
		return expanded;
	}

	private void step() {
		revalidate();
		getUpdateManager().performUpdate();
	}

	/** @@see org.eclipse.draw2d.IFigure#isOpaque() */
	public boolean isOpaque() {
		return false;
	}

	/**
	 * @@see org.eclipse.draw2d.IFigure#getPreferredSize(int, int)
	 */
	public Dimension getPreferredSize(int wHint, int hHint) {
		if (animationModel == null) {
			if (expanded)
				return super.getPreferredSize(wHint, hHint);
			return getMinimumSize(wHint, hHint);
		}
		Dimension pref = super.getPreferredSize(wHint, hHint);
		Dimension min = getMinimumSize(wHint, hHint);
		float scale = animationModel.getProgress();
		return pref.equals(min)
			? pref
			: pref.getScaled(scale).expand(min.getScaled(1.0f - scale));
	}
	
	/**
	 * @@see IFigure#validate()
	 */
	public void validate() {
		if (isValid())
			return;
		setValid(true);
		layout();
		
		for (int i = 0; i < getChildren().size(); i++)
			((IFigure)getChildren().get(i)).validate();
		if ((hBar != null) && getHorizontalScrollBarVisibility()!= NEVER)
			getHorizontalScrollBar().validate();
		if ((vBar != null) && getVerticalScrollBarVisibility()!= NEVER)
			getVerticalScrollBar().validate();
	}
    
    
    protected void createVerticalScrollBar() {
        IMapMode mm= MapModeUtil.getMapMode(this);
        int mm_1 = mm.DPtoLP(1);
        Insets insets = new Insets(mm_1, mm.DPtoLP(2),
            mm_1, mm.DPtoLP(0));
        int mm_15 = mm.DPtoLP(15);
        Dimension size = new Dimension(mm_15, mm_15);
        setVerticalScrollBar( new ListScrollBar(Orientable.VERTICAL, insets, size, 
            mm.DPtoLP(10), mm.DPtoLP(50)));
    }
    
    
    protected void createHorizontalScrollBar() {
        IMapMode mm= MapModeUtil.getMapMode(this);
        int mm_1 = mm.DPtoLP(1);
        Insets insets = new Insets(mm_1, mm.DPtoLP(2),
            mm_1, mm.DPtoLP(0));
        int mm_15 = mm.DPtoLP(15);
        Dimension size = new Dimension(mm_15, mm_15);
        setHorizontalScrollBar( new ListScrollBar(Orientable.HORIZONTAL, insets, size, 
            mm.DPtoLP(10), mm.DPtoLP(50)));
    }
    
    public ScrollBar basicGetVerticalScrollBar() {
        return vBar;
    }
    
    
    public ScrollBar basicGetHorizontalScrollBar() {        
        return hBar;
    }



}
@


1.3
log
@bugzilla 115518 gmf-head mmostafa 051108 : ScrollBar figure get created although the Pane set the scroll bar visibilty to NEVER
@
text
@d15 2
d19 4
d128 1
a128 1
		if (getHorizontalScrollBarVisibility()!= NEVER)
d130 1
a130 1
		if (getVerticalScrollBarVisibility()!= NEVER)
d133 34
@


1.3.2.1
log
@[150403] gmf_R1_0_maintenace ylulu 060726  Scrollbar figures are created pre-maturely
@
text
@a14 2
import org.eclipse.draw2d.Orientable;
import org.eclipse.draw2d.ScrollBar;
a16 4
import org.eclipse.draw2d.geometry.Insets;
import org.eclipse.gmf.runtime.draw2d.ui.figures.ListScrollBar;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;
d122 1
a122 1
		if ((hBar != null) && getHorizontalScrollBarVisibility()!= NEVER)
d124 1
a124 1
		if ((vBar != null) && getVerticalScrollBarVisibility()!= NEVER)
a126 34
    
    
    protected void createVerticalScrollBar() {
        IMapMode mm= MapModeUtil.getMapMode(this);
        int mm_1 = mm.DPtoLP(1);
        Insets insets = new Insets(mm_1, mm.DPtoLP(2),
            mm_1, mm.DPtoLP(0));
        int mm_15 = mm.DPtoLP(15);
        Dimension size = new Dimension(mm_15, mm_15);
        setVerticalScrollBar( new ListScrollBar(Orientable.VERTICAL, insets, size, 
            mm.DPtoLP(10), mm.DPtoLP(50)));
    }
    
    
    protected void createHorizontalScrollBar() {
        IMapMode mm= MapModeUtil.getMapMode(this);
        int mm_1 = mm.DPtoLP(1);
        Insets insets = new Insets(mm_1, mm.DPtoLP(2),
            mm_1, mm.DPtoLP(0));
        int mm_15 = mm.DPtoLP(15);
        Dimension size = new Dimension(mm_15, mm_15);
        setHorizontalScrollBar( new ListScrollBar(Orientable.HORIZONTAL, insets, size, 
            mm.DPtoLP(10), mm.DPtoLP(50)));
    }
    
    public ScrollBar basicGetVerticalScrollBar() {
        return vBar;
    }
    
    
    public ScrollBar basicGetHorizontalScrollBar() {        
        return hBar;
    }

@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d14 1
d110 18
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 4
a4 4
/*******************************************************************************
 * Copyright (c) 2000, 2003 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the Common Public License v1.0
d6 2
a7 2
 * http://www.eclipse.org/legal/cpl-v10.html
 * 
d9 3
a11 2
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
@

