head	1.2;
access;
symbols
	v20081023-2107:1.2
	v20081022-1925:1.2
	v20081021-1810:1.2
	v20081020-0700:1.2
	v20080911-1728:1.2
	v20080911-1506:1.2
	v20080910-1520:1.2
	v20080910-1510:1.2
	v20080903-1520:1.2
	v20080903-1510:1.2
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.6
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080610-1132:1.2
	v20080603-1553:1.2
	v20080512-1200:1.2
	v20080503-1740:1.2
	v20080501-1739:1.2
	v20080425-1959:1.2
	v20080417-1610:1.2
	v20080407-2250:1.2
	v20080407-0930:1.2
	v20080404-1111:1.2
	v20080222-1200:1.2
	v20080215-1500:1.2
	v20080215-1200:1.2
	v20080201-2010:1.2
	v20080114-1111:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070928-0000:1.2
	v20070915-0000:1.2
	v20070903-0000:1.2
	v20070830-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.4
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070605-1400:1.2
	v20070601-1400:1.2
	v20070518-1300:1.2
	v20070330-1300:1.2
	v20070221-1500:1.2
	v20070208-1800:1.2
	v20070202-0200:1.2
	M4_20:1.2
	v20061218-1200:1.2
	v20061214-0000:1.2
	M3_20:1.2
	v20061013-1330:1.2
	v20060925-1700:1.2
	v20060919-0800:1.2
	M1_20:1.2
	v20060824-1600:1.2
	v20060817-1500:1.2
	v20060810-1700:1.2
	v20060803-1200:1.2
	v20060728-0500:1.2
	v20060721-1130:1.2
	v20060713-1700:1.2
	R1_0_maintenance:1.2.0.2
	R1_0:1.2
	v20060627-1200:1.2
	v20060616-1200:1.2
	v20060609-1400:1.2
	v20060531-1730:1.2
	v20060519-0800:1.2
	RC2_10:1.2
	I20060505-1400:1.2
	I20060428-1300:1.2
	I20060424-0500:1.2
	I20060424-0300:1.2
	M6_10:1.2
	I20060407-1200:1.2
	I20060331-1000:1.2
	I20060324-0300:1.2
	I20060317-1300:1.2
	I20060317-1200:1.2
	I20060316-1300:1.2
	I20060309-1300:1.2
	M5_10:1.2
	S20060303-1600:1.2
	I20060227-1730:1.2
	I20060216-1945:1.2
	I20060210-1715:1.2
	I20060209-1815:1.2
	I20060203-0830:1.2
	I20060129-1145:1.2
	I20060127-0900:1.2
	I20060120-1530:1.2
	I20060113-1700:1.2
	M4_10:1.2
	I20060107-1100:1.2
	I20060105-1630:1.2
	I20051230-1230:1.2
	I20051223-1100:1.2
	I20051217-0925:1.2
	I20051208-2000:1.2
	I20051201-1800:1.2
	I20051124-2000:1.2
	M3_10:1.2
	I20051118-1245:1.2
	I20051111-1800:1.2
	I20051106-0900:1.2
	v20051030:1.2;
locks; strict;
comment	@# @;


1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.52;	author sshaw;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@/******************************************************************************
 * Copyright (c) 2004 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/


package org.eclipse.gmf.runtime.draw2d.ui.internal.routers;

import org.eclipse.draw2d.AbstractRouter;
import org.eclipse.draw2d.Connection;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PointList;

import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;

/**
 * @@author sshaw
 * @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.*
 *
 * Final router class for routing a specific branch on a connection tree.
 * Package protected - no should be using this router directly.  Use the Forest
 * Router as the top level entry point.
 */
public class BranchRouter extends AbstractRouter {

	private TreeRouter tree;
	
	/**
	 * @@param tree
	 */
	public BranchRouter(TreeRouter tree) {
		super();
		
		this.tree = tree;
	}
	
	/* (non-Javadoc)
	 * @@see org.eclipse.draw2d.ConnectionRouter#route(org.eclipse.draw2d.Connection)
	 * 
	 * case 1: connection has never been routed before and needs
	 * points to be populated.  points.size() < 4 
	 * 
	 * case 2: user moved the trunk vertex of the connection by either
	 * moving the line attached to the target or second last target line
	 * 
	 * case 3: user moved the source or target shape causing a layout
	 * of the connection.  
	 * 
	 * case 4: user moved the source line attached to the source shape. 
	 * 
	 * case 5: connection is being rerouted as a result of an invalidation
	 * from case 2.  
	 * 
	 */
	public void route(Connection conn) {
		Point ptTrunkLoc = getTrunkLocation(conn);
		
		getTree().setTrunkLocation(conn, ptTrunkLoc);
		
		Point ptSourceLoc = getSourceLocation(conn, ptTrunkLoc);
		
		PointList points = recreateBranch(conn, ptSourceLoc, ptTrunkLoc);
		conn.setPoints(points);
	}
	
	/**
	 * getTrunkLocation
	 * Method to retrieve the trunk location in relative coordinates
	 * 
	 * @@param conn Connection being routed
	 * @@return Point that is the trunk location in relative coordinates.
	 */
	protected Point getTrunkLocation(Connection conn) {
		PointList points = getTree().getPointsFromConstraint(conn);
		Point ptTrunkLoc = getTree().getTrunkLocation(conn); // default;
		
		// check valid again based on constraint
		if (getTree().isTreeBranch(conn, points)) {
			if (getTree().isTopDown(conn))
				ptTrunkLoc.x = points.getPoint(3).x;
			else
				ptTrunkLoc.y = points.getPoint(3).y;
			
			if (getTree().isOrthogonalTreeBranch(conn, points)) {
				if (getTree().isTopDown(conn))
					ptTrunkLoc.y = points.getPoint(2).y;
				else
					ptTrunkLoc.x = points.getPoint(2).x;
			}
		}

		return ptTrunkLoc;
	}
	
	/**
	 * getSourceLocation
	 * Method to retrieve the source location where the connection is connected
	 * to the source element.
	 * 
	 * @@param conn Connection to be routed.
	 * @@param ptTrunkLoc Point trunk location in relative coordinates
	 * @@return Point source location in relative coordinates
	 */
	public Point getSourceLocation(Connection conn, Point ptTrunkLoc) {
		Point ptSourceRef = conn.getSourceAnchor().getReferencePoint();
		conn.translateToRelative(ptSourceRef);
		boolean bTopDown = getTree().isTopDown(conn);
		
		int branchOffset = getSourceBranchOffset(conn) + (bTopDown ? ptSourceRef.x : ptSourceRef.y);
		
		Point ref;
		if (bTopDown)
			ref = new Point(branchOffset, ptTrunkLoc.y);
		else
			ref = new Point(ptTrunkLoc.x, branchOffset);
		
		LineSeg line = OrthogonalRouterUtilities.getOrthogonalLineSegToAnchorLoc(conn, conn.getSourceAnchor(), ref);
		return line.getOrigin();
	}

	/**
	 * recreateBranch
	 * Utility method used to recreate the points list for the branch connection given
	 * a trunk vertex location and a source attachpoint location.
	 * 
	 * @@param conn Connection used to do translate points to relative coordinates.
	 * @@param ptSourceLoc Point that is attached to the source node
	 * @@param ptTrunkLoc Point that is the vertex between the line attached to the target
	 * and the "shoulder" line that holds the individual source branches.
	 * @@return PointList that represents the full connection tree branch.
	 */
	public PointList recreateBranch(Connection conn, Point ptSourceLoc, Point ptTrunkLoc) {
		PointList points = new PointList(4);
		boolean bTopDown = getTree().isTopDown(conn);
		
		points.addPoint(new Point(ptSourceLoc));
		
		Point pt2 = bTopDown ? new Point(ptSourceLoc.x, ptTrunkLoc.y) : new Point(ptTrunkLoc.x, ptSourceLoc.y);
		points.addPoint(pt2);
		
		points.addPoint(new Point(ptTrunkLoc));
		
		LineSeg line = OrthogonalRouterUtilities.getOrthogonalLineSegToAnchorLoc(conn, conn.getTargetAnchor(), ptTrunkLoc);
		Point ptTargetLoc = line.getOrigin();
		
		Point pt4 = bTopDown ? new Point(ptTrunkLoc.x, ptTargetLoc.y) : new Point(ptTargetLoc.x, ptTrunkLoc.y);
		points.addPoint(pt4);
		
		return points;
	}
	
	/**
	 * getTree
	 * Getter method for the container tree router.
	 * 
	 * @@return Returns the tree.
	 */
	protected TreeRouter getTree() {
		return tree;
	}
	
	
	/**
	 * getSourceBranchOffset
	 * Utility method to retrieve the branch offset value either as a default
	 * value based on the source anchor or utilizes the constraint to find a 
	 * current value.
	 * 
	 * @@param conn Connection to retrieve the constraint from.
	 * @@return int value that represents an offset from the source anchor 
	 * reference point.
	 */
	private int getSourceBranchOffset(Connection conn) {
		Point ptSourceRef = conn.getSourceAnchor().getReferencePoint();
		conn.translateToRelative(ptSourceRef);
		boolean bTopDown = getTree().isTopDown(conn);
		
		int branchOffset = bTopDown ? ptSourceRef.x : ptSourceRef.y;
		
		// if constraint is valid, then retrieve just the branchOffset (ie the connection
		// location to the source shape from the values.
		PointList constraintPoints = getTree().getPointsFromConstraint(conn);
		if (getTree().isTreeBranch(conn, constraintPoints)) {
			Point ptLoc = constraintPoints.getFirstPoint();
			branchOffset = bTopDown ? ptLoc.x : ptLoc.y;	
		}
		
		return branchOffset - (bTopDown ? ptSourceRef.x : ptSourceRef.y);
	}

}
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2004.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

