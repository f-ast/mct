head	1.13;
access;
symbols
	v20081023-2107:1.13
	v20081022-1925:1.13
	v20081021-1810:1.13
	v20081020-0700:1.13
	v20080911-1728:1.13
	v20080911-1506:1.13
	v20080910-1520:1.13
	v20080910-1510:1.13
	v20080903-1520:1.13
	v20080903-1510:1.13
	v20080722-1827:1.13
	R2_1_maintenance:1.13.0.2
	Root_R2_1_maintenance:1.13
	R2_1_0:1.13
	v20080610-1132:1.13
	v20080603-1553:1.13
	v20080512-1200:1.13
	v20080503-1740:1.13
	v20080501-1739:1.13
	v20080425-1959:1.13
	v20080417-1610:1.13
	v20080407-2250:1.13
	v20080407-0930:1.13
	v20080404-1111:1.13
	v20080222-1200:1.13
	v20080215-1500:1.13
	v20080215-1200:1.10.2.2
	v20080201-2010:1.13
	v20080114-1111:1.13
	v20071108-0000:1.13
	v20071003-0000:1.12
	v20070928-0000:1.10.2.2
	v20070915-0000:1.10.2.1
	v20070903-0000:1.11
	v20070830-0000:1.10.2.1
	v20070809-0000:1.10
	R2_0_maintenance:1.10.0.2
	R2_0:1.10
	R4_20:1.10
	v20070621-0000:1.10
	RC3_20:1.10
	v20070605-1400:1.10
	v20070601-1400:1.10
	v20070518-1300:1.10
	v20070330-1300:1.8
	v20070221-1500:1.8
	v20070208-1800:1.8
	v20070202-0200:1.6.2.1
	M4_20:1.8
	v20061218-1200:1.8
	v20061214-0000:1.8
	M3_20:1.7
	v20061013-1330:1.7
	v20060925-1700:1.6.2.1
	v20060919-0800:1.6.2.1
	M1_20:1.6
	v20060824-1600:1.6.2.1
	v20060817-1500:1.6.2.1
	v20060810-1700:1.6.2.1
	v20060803-1200:1.6.2.1
	v20060728-0500:1.6.2.1
	v20060721-1130:1.6
	v20060713-1700:1.6
	R1_0_maintenance:1.6.0.2
	R1_0:1.6
	v20060627-1200:1.6
	v20060616-1200:1.6
	v20060609-1400:1.6
	v20060531-1730:1.6
	v20060519-0800:1.6
	RC2_10:1.6
	I20060505-1400:1.6
	I20060428-1300:1.6
	I20060424-0500:1.5
	I20060424-0300:1.5
	M6_10:1.5
	I20060407-1200:1.5
	I20060331-1000:1.5
	I20060324-0300:1.5
	I20060317-1300:1.5
	I20060317-1200:1.5
	I20060316-1300:1.5
	I20060309-1300:1.5
	M5_10:1.5
	S20060303-1600:1.5
	I20060227-1730:1.5
	I20060216-1945:1.5
	I20060210-1715:1.5
	I20060209-1815:1.5
	I20060203-0830:1.5
	I20060129-1145:1.5
	I20060127-0900:1.4
	I20060120-1530:1.4
	I20060113-1700:1.4
	M4_10:1.4
	I20060107-1100:1.4
	I20060105-1630:1.4
	I20051230-1230:1.4
	I20051223-1100:1.4
	I20051217-0925:1.4
	I20051208-2000:1.4
	I20051201-1800:1.4
	I20051124-2000:1.4
	M3_10:1.4
	I20051118-1245:1.4
	I20051111-1800:1.4
	I20051106-0900:1.4
	v20051030:1.3;
locks; strict;
comment	@# @;


1.13
date	2007.10.09.14.41.49;	author aboyko;	state Exp;
branches;
next	1.12;
commitid	174e470b932d4567;

1.12
date	2007.09.25.20.16.06;	author aboyko;	state Exp;
branches;
next	1.11;
commitid	602146f96c864567;

1.11
date	2007.08.15.15.35.26;	author aboyko;	state Exp;
branches;
next	1.10;
commitid	255e46c31d364567;

1.10
date	2007.05.17.20.57.46;	author mmostafa;	state Exp;
branches
	1.10.2.1;
next	1.9;
commitid	246c464cc1ca4567;

1.9
date	2007.05.16.19.47.01;	author mmostafa;	state Exp;
branches;
next	1.8;
commitid	24f4464b5fb34567;

1.8
date	2006.12.12.20.58.10;	author crevells;	state Exp;
branches;
next	1.7;
commitid	4524457f17e24567;

1.7
date	2006.10.03.15.04.52;	author ahunter;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.26.21.40.36;	author sshaw;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2006.01.27.20.04.26;	author sshaw;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.04.21.27.59;	author sshaw;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.20.19.04.10;	author sshaw;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.12.21.27.43;	author sshaw;	state Exp;
branches;
next	1.1;

1.1
date	2005.08.30.03.26.52;	author sshaw;	state Exp;
branches;
next	;

1.6.2.1
date	2006.07.25.19.05.22;	author mmostafa;	state Exp;
branches;
next	;

1.10.2.1
date	2007.08.15.15.49.10;	author aboyko;	state Exp;
branches;
next	1.10.2.2;
commitid	3cd646c320764567;

1.10.2.2
date	2007.09.25.20.22.39;	author aboyko;	state Exp;
branches;
next	;
commitid	645946f96e0f4567;


desc
@@


1.13
log
@[205599] gmf_HEAD aboyko 071009 Rectilinear connections between a shape and a diagonal line sometimes look ugly
@
text
@/******************************************************************************
 * Copyright (c) 2002, 2007 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.internal.routers;

import java.util.ArrayList;
import java.util.HashMap;

import org.eclipse.draw2d.BendpointConnectionRouter;
import org.eclipse.draw2d.Connection;
import org.eclipse.draw2d.ConnectionAnchor;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.PointList;
import org.eclipse.draw2d.geometry.PrecisionPoint;
import org.eclipse.draw2d.geometry.PrecisionRectangle;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.gmf.runtime.common.core.util.Trace;
import org.eclipse.gmf.runtime.draw2d.ui.figures.IPolygonAnchorableFigure;
import org.eclipse.gmf.runtime.draw2d.ui.figures.PolylineConnectionEx;
import org.eclipse.gmf.runtime.draw2d.ui.geometry.LineSeg;
import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
import org.eclipse.gmf.runtime.draw2d.ui.internal.Draw2dDebugOptions;
import org.eclipse.gmf.runtime.draw2d.ui.internal.Draw2dPlugin;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapModeUtil;

/*
 * @@canBeSeenBy org.eclipse.gmf.runtime.draw2d.ui.*
 */
public class ObliqueRouter extends BendpointConnectionRouter {

	static public class ArrayListMap {
		private HashMap map = new HashMap();

		public ArrayListMap() {
			super();
		}

		public ArrayList get(Object key) {
			Object value = map.get(key);
			if (value == null)
				return null;

			if (value instanceof ArrayList)
				return (ArrayList) value;
			ArrayList v = new ArrayList(1);
			v.add(value);
			return v;
		}

		public void put(Object key, Object value) {
			Object arrayListObject = map.get(key);
			if (arrayListObject == null) {
				map.put(key, value);
				return;
			}
			if (arrayListObject instanceof ArrayList) {
				ArrayList arrayList = (ArrayList) arrayListObject;
				if (!arrayList.contains(value))
					arrayList.add(value);
				return;
			}
			if (arrayListObject != value) {
				ArrayList arrayList = new ArrayList(2);
				arrayList.add(arrayListObject);
				arrayList.add(value);
				map.put(key, arrayList);
			}
		}

		public void remove(Object key, Object value) {
			Object arrayListObject = map.get(key);
			if (arrayListObject != null) {
				if (arrayListObject instanceof ArrayList) {
					ArrayList arrayList = (ArrayList) arrayListObject;
					arrayList.remove(value);
					if (arrayList.isEmpty())
						map.remove(key);
					return;
				}
				map.remove(key);
			}
		}

		public int size() {
			return map.size();
		} 
	}

	private ArrayListMap selfRelConnections = new ArrayListMap();
	private ArrayListMap intersectingShapesConnections = new ArrayListMap();
	
	private class ArrayListKey {

		private ConnectionAnchor connectAnchor1;
		private ConnectionAnchor connectAnchor2;

		ArrayListKey(Connection conn) {
			connectAnchor1 = conn.getSourceAnchor();
			connectAnchor2 = conn.getTargetAnchor();
		}

		public ConnectionAnchor getSourceAnchor() {
			return connectAnchor1;
		}

		public ConnectionAnchor getTargetAnchor() {
			return connectAnchor2;
		}

		public int hashCode() {
			return connectAnchor1.hashCode() ^ connectAnchor2.hashCode();
		}

		public boolean equals(Object object) {
			boolean isEqual = false;
			ArrayListKey listKey;

			if (object instanceof ArrayListKey) {
				listKey = (ArrayListKey) object;
				ConnectionAnchor lk1 = listKey.getSourceAnchor();
				ConnectionAnchor lk2 = listKey.getTargetAnchor();

				isEqual =
					(lk1.equals(connectAnchor1) && lk2.equals(connectAnchor2))
						|| (lk1.equals(connectAnchor2) && lk2.equals(connectAnchor1));
			}
			return isEqual;
		}
	}
	
	public static final int ROUTER_FLAG_SKIPNORMALIZATION = 1;

	protected int routerFlags;

	public ObliqueRouter() {
		routerFlags = 0;
	}

	/**
	 * Determines whether the router is going to avoid obstructions during the
	 * routing algorithm.
	 */
	public boolean isAvoidingObstructions(Connection conn) {
		if (conn instanceof PolylineConnectionEx) {
			return ((PolylineConnectionEx) conn).isAvoidObstacleRouting();
		}

		return false;
	}

	/**
	 * Determines whether the router is going use the closest distance during the
	 */
	public boolean isClosestDistance(Connection conn) {
		if (conn instanceof PolylineConnectionEx) {
			return ((PolylineConnectionEx) conn).isClosestDistanceRouting();
		}

		return false;
	}

	/**
	 * Check if this connection is currently being reoriented by seeing if the
	 * source or target owner are null.
	 */
	protected boolean isReorienting(Connection conn) {
		if (conn.getSourceAnchor().getOwner() == null
			|| conn.getTargetAnchor().getOwner() == null) {
			return true;
		}

		return false;
	}

	/* 
	 * (non-Javadoc)
	 * @@see org.eclipse.draw2d.ConnectionRouter#route(org.eclipse.draw2d.Connection)
	 */
	final public void route(Connection conn) {
        if (conn.isVisible())
            routeBendpoints(conn);
	}
	
	/**
	 * Route the connection accordingly to the router paradigm.
	 */
	public void routeBendpoints(Connection conn) {
		if ((conn.getSourceAnchor() == null)
			|| (conn.getTargetAnchor() == null))
			return;

        PointList points = calculateBendPoints(conn);
             
        routeLine(conn, 0, points);
		conn.setPoints(points);
	}
	
	/**
     * Return a point list that contains the bend points on the connections
     * clients can override this method to introduce calculated bend points 
     * on the connection 
	 * @@param conn the connection to get the bend points for
	 * @@return bend points as a Point List
	 */
	protected PointList calculateBendPoints(Connection conn) {
        PointList points = new PointList();        
		if (isAvoidingObstructions(conn)) {
            points = RouterHelper.getInstance().routeAroundObstructions(conn);	
		} 
        else if (isClosestDistance(conn)) {
            points = RouterHelper.getInstance().routeClosestDistance(conn);
        }
        else {
            points = RouterHelper.getInstance().routeFromConstraint(conn);
        }
		return points;
	}


	/**
	 * Method removePointsInViews.
	 * This method will parse through all the points in the given 
	 * polyline and remove any of the points that intersect with the 
	 * start and end figures.
	 * 
	 * @@param conn Connection figure that is currently being routed
	 * @@param newLine PointList that will contain the filtered list of points
     * @@return boolean true if newLine points changed, false otherwise.
     * @@throws IllegalArgumentException if either paramter is null.
	 */
	protected boolean removePointsInViews(
		Connection conn,
		PointList newLine) {
		
        boolean bChanged = false;
        
		// error checking
		if (conn == null || newLine == null ) {
			IllegalArgumentException iae = new IllegalArgumentException();
			Trace.throwing(
				Draw2dPlugin.getInstance(),
				Draw2dDebugOptions.EXCEPTIONS_THROWING,
				getClass(),
				"removePointsInViews()", //$NON-NLS-1$
				iae);
			throw iae;
		}
		
		// check whether the method should be executed.
		if (newLine.size() < 3)
			return false;
        
        IFigure sourceOwner = conn.getSourceAnchor().getOwner();
        IFigure targetOwner = conn.getTargetAnchor().getOwner();
		if (sourceOwner == null)
			return false;
		if (targetOwner == null)
			return false;
	
		PointList startPolygon = null;
        if (!(sourceOwner instanceof Connection)) {
            startPolygon = getFigurePolygon(sourceOwner,conn);
        }

        PointList endPolygon = null;
        if (!(targetOwner instanceof Connection)) {
            endPolygon = getFigurePolygon(targetOwner,conn);
        }

		// Ignore the first and last points
		PointList newPoints = new PointList(newLine.size());
		for (int i = 0; i < newLine.size(); i++) {
			
			Point pt = newLine.getPoint(i);
			if (i == 0 || i == newLine.size() - 1)
				newPoints.addPoint(pt);
			else if ((startPolygon == null || !PointListUtilities.containsPoint(startPolygon,pt))
                && (endPolygon == null || !PointListUtilities.containsPoint(endPolygon,pt))) {
                newPoints.addPoint(pt);
            }
            else {
                bChanged = true;
            }
		}

		if (newPoints.size() != newLine.size()) {
			newLine.removeAllPoints();
			for (int i = 0; i < newPoints.size(); i++)
				newLine.addPoint(new Point(newPoints.getPoint(i)));
		}
        
        return bChanged;
	}
    
     protected PointList getFigurePolygon(IFigure owner, Connection conn) {
        PointList polygon = new PointList();
        if (owner instanceof IPolygonAnchorableFigure){
            PointList points =  ((IPolygonAnchorableFigure)owner).getPolygonPoints();
            for(int index = 0 ; index < points.size(); index++){
                Point point  = points.getPoint(index).getCopy();
                owner.translateToAbsolute(point);
                conn.translateToRelative(point);
                polygon.addPoint(point);
            }
        }else {
           Rectangle rect =  owner.getBounds().getCopy();
           owner.translateToAbsolute(rect);
           conn.translateToRelative(rect);
           polygon.addPoint(rect.getTopLeft());
           polygon.addPoint(rect.getTopRight());
           polygon.addPoint(rect.getBottomRight());
           polygon.addPoint(rect.getBottomLeft());
           polygon.addPoint(rect.getTopLeft());
        }
        return polygon;
    }
	
	/**
	 * Helper method for "route" to just do the core routing of this router without any
	 * additional ideology (i.e. no closest distance, obstructions routing).
	 */
	public void routeLine(
		Connection conn,
		int nestedRoutingDepth,
		PointList newLine) {

		// get the original line	
		if (!checkSelfRelConnection(conn, newLine) && !checkShapesIntersect(conn, newLine)) {
			removePointsInViews(conn, newLine);
		}
		resetEndPointsToEdge(conn, newLine);
	}
	
	/**
	 * Checks if source shape and target shape of the connection intersect (only intersect - not one contained in another)
	 * and if they are calculates the bendpoints for the connection. Calculated bendpoints are stored in <code>newLine</code>.
	 * Initially <code>newLine</code> contains the list of bendpoints calculated by the router, however
	 * if for intersecting shapes we have a default connection (i.e. no extra bendpoints), bendpoints will
	 * be calculated and <code>newLine</code> will be cleared and calculated bendpoints will be stored there.
	 * 
	 * Criterias for calculation of bendpoints for connection between 2 intersecting shapes:
	 * 1. No extra bendpoints introduced by user (only source and target anchor points present)
	 * 2. Source and target shapes intersect (one contained in another = do not intersect) 
	 * 
	 * @@param conn connection
	 * @@param newLine list to store calculated bendpoints (contains bendpoints read from the model initially
	 * @@return <code>true</code> if bendpoints were calculated here for intersecting shapes
	 */
	protected boolean checkShapesIntersect(Connection conn, PointList newLine) {
		if (conn.getSourceAnchor().getOwner() == null 
				|| conn.getSourceAnchor().getOwner() instanceof Connection
				|| conn.getTargetAnchor().getOwner() == null
				|| conn.getTargetAnchor().getOwner() instanceof Connection)
			return false;
		
		if (newLine.size() < 3) {
			PrecisionRectangle sourceBounds = new PrecisionRectangle(conn.getSourceAnchor().getOwner().getBounds()); 
			PrecisionRectangle targetBounds = new PrecisionRectangle(conn.getTargetAnchor().getOwner().getBounds());
			conn.getSourceAnchor().getOwner().translateToAbsolute(sourceBounds);
			conn.getTargetAnchor().getOwner().translateToAbsolute(targetBounds);
			if (sourceBounds.intersects(targetBounds) && !sourceBounds.contains(targetBounds) && !targetBounds.contains(sourceBounds)
					|| sourceBounds.equals(targetBounds)) {
				getVerticesForIntersectingShapes(conn, newLine);
				return true;
			}
		} else {
			removeIntersectingShapesConnection(conn);
		}
		return false;
	}
	
	/**
	 * Determines geographic position of the source figure relative to the
	 * connection area
	 * 
	 * @@param connRectangle
	 *            connection area
	 * @@param sourceRect
	 *            bounds of the source figure
	 * @@param position
	 *            geographic position of the connection area relative to the
	 *            union of intersecting source and target figures
	 * @@return geographic position of the source figure relative to the
	 *         connection area
	 */
	private int getSourcePositionFromConnectionRectangle(
			Rectangle connRectangle, Rectangle sourceRect, int position) {
		Dimension diff = null;
		switch (position) {
		case PositionConstants.NORTH_WEST:
			diff = connRectangle.getBottomRight().getDifference(
					sourceRect.getTopLeft());
			if (diff.width == 0) {
				return PositionConstants.EAST;
			} else {
				return PositionConstants.SOUTH;
			}
		case PositionConstants.NORTH_EAST:
			diff = connRectangle.getBottomLeft().getDifference(
					sourceRect.getTopRight());
			if (diff.width == 0) {
				return PositionConstants.WEST;
			} else {
				return PositionConstants.SOUTH;
			}
		case PositionConstants.SOUTH_EAST:
			diff = connRectangle.getTopLeft().getDifference(
					sourceRect.getBottomRight());
			if (diff.width == 0) {
				return PositionConstants.WEST;
			} else {
				return PositionConstants.NORTH;
			}
		case PositionConstants.SOUTH_WEST:
			diff = connRectangle.getTopRight().getDifference(
					sourceRect.getBottomLeft());
			if (diff.width == 0) {
				return PositionConstants.EAST;
			} else {
				return PositionConstants.NORTH;
			}
		case PositionConstants.NONE:
			diff = connRectangle.getCenter().getDifference(sourceRect.getCenter());
			if (diff.width == 0) {
				return diff.height < 0 ? PositionConstants.SOUTH : PositionConstants.NORTH;  
			} else {
				return diff.width < 0 ? PositionConstants.EAST : PositionConstants.WEST;
			}
		}
		return PositionConstants.NONE;
	}
	
	/**
	 * Stores bendpoints for the connection in <code>line</code> based on the
	 * precise connection area, geographic position of the source figure
	 * relative to the connection area and geographic position of the connection
	 * area relative to the union of intersecting shapes
	 * 
	 * @@param connRect
	 *            precise connection area
	 * @@param position
	 *            geographic position of the connection area relative to the
	 *            union of intersecting shapes
	 * @@param sourcePosition
	 *            geographic position of the source figure relative to the
	 *            connection area
	 * @@param line
	 *            list for storing bendpoints (cleared at the start)
	 */
	private void getConnectionPoints(Rectangle connRect, int position,
			int sourcePosition, PointList line) {
		line.removeAllPoints();
		switch (position) {
		case PositionConstants.NORTH_WEST:
			if (sourcePosition == PositionConstants.EAST) {
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getBottomLeft());
			} else {
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getTopRight());
			}
			break;
		case PositionConstants.NORTH_EAST:
			if (sourcePosition == PositionConstants.WEST) {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getBottomRight());
			} else {
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getTopLeft());
			}
			break;
		case PositionConstants.SOUTH_EAST:
			if (sourcePosition == PositionConstants.WEST) {
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getTopRight());
			} else {
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getBottomLeft());
			}
			break;
		case PositionConstants.SOUTH_WEST:
			if (sourcePosition == PositionConstants.EAST) {
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getTopLeft());
			} else {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getBottomRight());
			}
			break;
		case PositionConstants.NONE:
			if (sourcePosition == PositionConstants.NORTH) {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getBottomLeft());
			} else if (sourcePosition == PositionConstants.SOUTH) {
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getTopLeft());
			} else if (sourcePosition == PositionConstants.WEST) {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getTopRight());
			} else {
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getTopLeft());
			}
		}
	}
	
	/**
	 * Transforms width and height of the dimension into absolute values
	 * 
	 * @@param d
	 *            dimension
	 */
	private void absDimension(Dimension d) {
		d.width = Math.abs(d.width);
		d.height = Math.abs(d.height);
	}
	
	/**
	 * Calculates and stores bendpoints (or vertices) for the connection between
	 * 2 intersecting shapes and stores them in <code>newLine</code>
	 * 
	 * @@param conn
	 *            connection
	 * @@param newLine
	 *            list to store calculated bendpoints (oe vertices)
	 */
	private void getVerticesForIntersectingShapes(Connection conn,
			PointList newLine) {
		Object key = getIntersectingShapesConnectionKey(conn);
		int nSelfIncr = 0;
		int nIndex = 0;
		/*
		 * Check if this connection is 2nd, 3rd, ..., or n-th connection between
		 * the same 2 intersecting shapes. If yes, determine what's the index.
		 * (i.e the n>1)
		 */
		ArrayList connectionList = intersectingShapesConnections.get(key);
		if (connectionList != null) {
			if (!connectionList.contains(conn)) {
				intersectingShapesConnections.put(key, conn);
				connectionList = intersectingShapesConnections.get(key);
			}

			nIndex = connectionList.indexOf(conn);
			assert nIndex >= 0;
		} else {
			intersectingShapesConnections.put(key, conn);
		}

		/*
		 * Translate properly the default offset value between multiple
		 * connections connecting the same 2 intersecting shapes. The default
		 * value is in pixels, hence for feedback connection it must stay the
		 * same and translated to logical units otherwise.
		 */
		PrecisionPoint selfrelsizeincr = new PrecisionPoint(SELFRELSIZEINCR, 0);
		boolean isFeedbackConn = RouterHelper.getInstance().isFeedback(conn);
		if (!isFeedbackConn)
			selfrelsizeincr = (PrecisionPoint) MapModeUtil.getMapMode(conn)
					.DPtoLP(selfrelsizeincr);

		/*
		 * Translate bounds of the source and target figures into coordinates
		 * relative to the connection figure. (PrecisionRectangle is used to
		 * avoid precision losses during non-integer scaling) Also calculate the
		 * union of the source and target figures bounds and their intersection
		 * rectangle for further calculations. All geometric figures are
		 * translated to the coordinates relative to the connection figure!
		 */
		IFigure sourceFig = conn.getSourceAnchor().getOwner();
		PrecisionRectangle sourceRect = new PrecisionRectangle(sourceFig
				.getBounds());
		sourceFig.translateToAbsolute(sourceRect);
		conn.translateToRelative(sourceRect);

		IFigure targetFig = conn.getTargetAnchor().getOwner();
		PrecisionRectangle targetRect = new PrecisionRectangle(targetFig
				.getBounds());
		targetFig.translateToAbsolute(targetRect);
		conn.translateToRelative(targetRect);
		PrecisionRectangle union = sourceRect.getPreciseCopy()
				.union(targetRect);

		/*
		 * Calculate the final offset value to space out multiple connections
		 * between 2 intersecting shapes
		 */
		nSelfIncr = selfrelsizeincr.x * (nIndex);

		Rectangle intersection = sourceRect.getCopy().intersect(targetRect);

		/*
		 * Determine the rough connection area and its geographic position
		 * relative to the union of the intersecting shapes. This is the area
		 * around which the connection will be routed. It's rough because it
		 * will be expanded and spaced out from other connections connecting the
		 * same shapes. The rough connection area is the smallest blank
		 * rectangle located within the union rectangle but not intersecting
		 * both source and traget figures bounds. The possible geographic
		 * locations for connection area are: NW, NE, SW, SE.
		 */
		Rectangle connArea = new Rectangle();
		int position = PositionConstants.NONE;
		int minArea = 0;
		Point unionTopLeft = union.getTopLeft();
		Point unionTopRight = union.getTopRight();
		Point unionBottomRight = union.getBottomRight();
		Point unionBottomLeft = union.getBottomLeft();

		if (!unionTopLeft.equals(sourceRect.getTopLeft())
				&& !unionTopLeft.equals(targetRect.getTopLeft())) {
			Dimension diffVector = unionTopLeft.getDifference(intersection
					.getTopLeft());
			absDimension(diffVector);
			int areaTopLeft = diffVector.getArea();
			if (minArea == 0 || minArea > areaTopLeft) {
				position = PositionConstants.NORTH_WEST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionTopLeft.x, unionTopLeft.y);
				minArea = areaTopLeft;
			}
		}

		if (!unionTopRight.equals(sourceRect.getTopRight())
				&& !unionTopRight.equals(targetRect.getTopRight())) {
			Dimension diffVector = unionTopRight.getDifference(intersection
					.getTopRight());
			absDimension(diffVector);
			int areaTopRight = diffVector.getArea();
			if (minArea == 0 || minArea > areaTopRight) {
				position = PositionConstants.NORTH_EAST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionTopRight.x - connArea.width,
						unionTopRight.y);
				minArea = areaTopRight;
			}
		}

		if (!unionBottomRight.equals(sourceRect.getBottomRight())
				&& !unionBottomRight.equals(targetRect.getBottomRight())) {
			Dimension diffVector = unionBottomRight.getDifference(intersection
					.getBottomRight());
			absDimension(diffVector);
			int areaBottomRight = diffVector.getArea();
			if (minArea == 0 || minArea > areaBottomRight) {
				position = PositionConstants.SOUTH_EAST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionBottomRight.x - connArea.width,
						unionBottomRight.y - connArea.height);
				minArea = areaBottomRight;
			}
		}

		if (!unionBottomLeft.equals(sourceRect.getBottomLeft())
				&& !unionBottomLeft.equals(targetRect.getBottomLeft())) {
			Dimension diffVector = unionBottomLeft.getDifference(intersection
					.getBottomLeft());
			absDimension(diffVector);
			int areaBottomLeft = diffVector.getArea();
			if (minArea == 0 || minArea > areaBottomLeft) {
				position = PositionConstants.SOUTH_WEST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionBottomLeft.x, unionBottomLeft.y
						- connArea.height);
				minArea = areaBottomLeft;
			}
		}
		
		if (position == PositionConstants.NONE) {
			connArea = intersection;
		}

		/*
		 * Determine the geographic position of the source figure relative to
		 * the rough connection area. This will help determining the order for
		 * bendpoints list from the precise connection area
		 */
		int sourcePosition = getSourcePositionFromConnectionRectangle(connArea,
				sourceRect, position);

		if (position != PositionConstants.NONE) {
			/*
			 * Determine the value by which the connection area has to become
			 * primary precise connection area. The value is chosen to be such that
			 * connections made from shapes intersecting on the same edge don't
			 * overlap
			 */
			PrecisionPoint translateExpansion = new PrecisionPoint(Math.max(connArea.width,
					connArea.height), 0);
			if (!isFeedbackConn) {
				IMapMode mm = MapModeUtil.getMapMode(conn);
				translateExpansion = (PrecisionPoint) mm.LPtoDP(translateExpansion);
				translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
						0.8);
				translateExpansion = (PrecisionPoint) mm.DPtoLP(translateExpansion);
			} else {
				translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
						0.8);
			}
			translateExpansion.updateInts();
	
			/*
			 * Transform rough connection area to primary precise connection area
			 */
			getPrimaryPreciseConnectionArea(connArea, translateExpansion.x, position);
		} else {
			connArea.expand(selfrelsizeincr.x<<1, selfrelsizeincr.x<<1);
		}

		/*
		 * Transform the primary precise connection area to precise connection
		 * area by accounting for multiple connection between the same 2
		 * intersecting shapes
		 */
		connArea.expand(nSelfIncr, nSelfIncr);

		/*
		 * Calculates the bendpoints for the connection from the precise
		 * connection area
		 */
		getConnectionPoints(connArea, position, sourcePosition, newLine);

		PrecisionPoint ptS2 = new PrecisionPoint(newLine.getPoint(0));
		PrecisionPoint ptS1 = new PrecisionPoint(conn.getSourceAnchor().getReferencePoint());
		conn.translateToRelative(ptS1);
		Point ptAbsS2 = new Point(ptS2);
		conn.translateToAbsolute(ptAbsS2);
		PrecisionPoint ptEdge = new PrecisionPoint(conn.getSourceAnchor().getLocation(ptAbsS2));
		conn.translateToRelative(ptEdge);
		ptS1 = new PrecisionPoint(getStraightEdgePoint(ptEdge, ptS1, ptS2));

		PrecisionPoint ptE2 = new PrecisionPoint(newLine.getPoint(newLine.size() - 1));
		PrecisionPoint ptE1 = new PrecisionPoint(conn.getTargetAnchor().getReferencePoint());
		conn.translateToRelative(ptE1);
		PrecisionPoint ptAbsE2 = (PrecisionPoint)ptE2.getCopy();
		conn.translateToAbsolute(ptAbsE2);
		ptEdge = new PrecisionPoint(conn.getTargetAnchor().getLocation(ptAbsE2));
		conn.translateToRelative(ptEdge);
		ptE1 = new PrecisionPoint(getStraightEdgePoint(ptEdge, ptE1, ptE2));

		newLine.insertPoint(new Point(Math.round(ptS1.preciseX), Math.round(ptS1.preciseY)), 0);
		newLine.insertPoint(new Point(Math.round(ptE1.preciseX), Math.round(ptE1.preciseY)), newLine.size());

	}
	
	/**
	 * Transforms rough connection area into primary precise connection area.
	 * Primary precise connection area is the one that doesn't account for
	 * multiple connections between same intersecting shapes
	 * 
	 * @@param r
	 *            rough connection area rectangle
	 * @@param size
	 *            size used for expansion
	 * @@param positionOfConnArea
	 *            geographic position of the connection area relative to the
	 *            union of intersecting shapes
	 */
	private void getPrimaryPreciseConnectionArea(Rectangle r, int size, int positionOfConnArea) {
		r.expand(size, size);
		if (r.width < r.height) {
			r.height -= size;
			if ((positionOfConnArea & PositionConstants.SOUTH) != 0) {
				r.y += size;
			}
		} else {
			r.width -= size;
			if ((positionOfConnArea & PositionConstants.EAST) != 0) {
				r.x += size;
			}
		}
	}
	
	/**
	 * getStraightEdgePoint
	 * Gets the anchored edge point that intersects with the given line segment.
	 * 
	 * @@param ptEdge Point on the edge of the end shape in relative coordinates
	 * @@param ptRef1 Point that is the first reference in relative coordinates
	 * @@param ptRef2 Point that is the second reference in relative coordiantes
	 * @@return Point that is the straight edge point in relative coordinates
	 */
	protected static Point getStraightEdgePoint(
		final Point ptEdge,
		final Point ptRef1,
		final Point ptRef2) {
		LineSeg lineSeg = new LineSeg(ptRef1, ptRef2);
		
		Point ptProj = lineSeg.perpIntersect(ptEdge.x, ptEdge.y);

		// account for possible rounding errors and ensure the
		// resulting line is straight
		if (Math.abs(ptProj.x - ptRef2.x) < Math.abs(ptProj.y - ptRef2.y))
			ptProj.x = ptRef2.x;
		else
			ptProj.y = ptRef2.y;

		return ptProj;
	}

	/**
	 * Reset the end points of the connection line to the appropriate anchor position on the start
	 * and end figures.
	 */
	protected void resetEndPointsToEdge(
    Connection conn,
    PointList newLine) {
		RouterHelper.getInstance().resetEndPointsToEdge(conn, newLine);
	}
	
	protected static final int SELFRELSIZEINIT = 62;
	protected static final int SELFRELSIZEINCR = 10;

	/**
	 * Method checkSelfRelConnection.
	 * Checks to see if this connection should be routed specially as a self relation.
	 * @@param conn Connection to check if it's a self relation
	 * @@param newLine PointList of the routed points
	 * @@return boolean True if Connection is a self relation, False otherwise.
	 */
	protected boolean checkSelfRelConnection(
		Connection conn,
		PointList newLine) {
		if ((conn.getSourceAnchor().getOwner() == conn.getTargetAnchor()
			.getOwner())
			&& newLine.size() < 4) {
			getSelfRelVertices(conn, newLine);
			return true;
		} else {
			removeSelfRelConnection(conn);
			return false;
		}
	}

	/**
	 * Method removeSelfRelConnection.
	 * Removes the given connection from the self relation hash map
	 * @@param conn Connection to remove from the map
	 */
	private void removeSelfRelConnection(Connection conn) {
		if (conn.getSourceAnchor() == null || conn.getTargetAnchor() == null
			|| conn.getSourceAnchor().getOwner() == null
			|| conn.getTargetAnchor().getOwner() == null)
			return;

		ArrayListKey connectionKey = new ArrayListKey(conn);
		ArrayList connectionList = selfRelConnections.get(connectionKey);
		if (connectionList != null) {
			int index = connectionList.indexOf(conn);
			if (index == -1)
				return;
			selfRelConnections.remove(connectionKey, conn);
		}
	}
	
	/**
	 * Method removeIntersectingShapesConnection.
	 * Removes the given connection from the intersecting shapes connections hash map
	 * @@param conn Connection to remove from the map
	 */
	private void removeIntersectingShapesConnection(Connection conn) {
		if (conn.getSourceAnchor() == null || conn.getTargetAnchor() == null
				|| conn.getSourceAnchor().getOwner() == null
				|| conn.getTargetAnchor().getOwner() == null)
				return;
		Object key = getIntersectingShapesConnectionKey(conn);
		ArrayList connectionList = intersectingShapesConnections.get(key);
		if (connectionList != null) {
			int index = connectionList.indexOf(conn);
			if (index == -1)
				return;
			intersectingShapesConnections.remove(key, conn);
		}
	}
	
	/**
	 * Calculates the key for a connection made between 2 intersecting shapes.
	 * Key is determined from the key of the source and target figures hash
	 * codes, since we want connections made between the same 2 intersected
	 * shapes to be mapped to one value
	 * 
	 * @@param conn
	 *            connection
	 * @@return hash code
	 */
	private Object getIntersectingShapesConnectionKey(Connection conn) {
		return new Integer(conn.getSourceAnchor().getOwner().hashCode()
				^ conn.getTargetAnchor().getOwner().hashCode());
	}

	/**
	 * Method insertSelfRelVertices.
	 * This method will create a routed line that routes from and to the same figure.
	 * @@param conn
	 * @@param newLine
	 */
	protected void getSelfRelVertices(Connection conn, PointList newLine) {
		if (conn.getSourceAnchor().getOwner() == null)
			return;
		
		ArrayListKey connectionKey = new ArrayListKey(conn);
		int nSelfIncr = 0;
		int nIndex = 0;
		ArrayList connectionList = selfRelConnections.get(connectionKey);
		if (connectionList != null) {
			if (!connectionList.contains(conn)) {
				selfRelConnections.put(connectionKey, conn);
				connectionList = selfRelConnections.get(connectionKey);
			}

			nIndex = connectionList.indexOf(conn);
            assert nIndex >= 0;
		} else {
			selfRelConnections.put(connectionKey, conn);
		}

		Dimension selfrelsizeincr = new Dimension(SELFRELSIZEINCR, 0);
		if (!RouterHelper.getInstance().isFeedback(conn))
			selfrelsizeincr = (Dimension)MapModeUtil.getMapMode(conn).DPtoLP(selfrelsizeincr);
		
		IFigure owner = conn.getSourceAnchor().getOwner();
		Rectangle bBox = owner.getClientArea();
		owner.translateToAbsolute(bBox);
		conn.translateToRelative(bBox);

		nSelfIncr = selfrelsizeincr.width * (nIndex / 8);
		newLine.removeAllPoints();

		switch (nIndex % 8) {
			case 0 :
				getCornerSelfRelVertices(conn, bBox, newLine,	nSelfIncr, 1, 1, bBox.getBottomRight());
				break;
			case 1 :
				getVerticalSelfRelVertices(conn, bBox, newLine, nSelfIncr, 1, bBox.getBottom());
				break;
			case 2 :
				getCornerSelfRelVertices(conn, bBox, newLine, nSelfIncr, -1, 1, bBox.getBottomLeft());
				break;
			case 3 :
				getHorizontalSelfRelVertices(conn, bBox, newLine, nSelfIncr, -1, bBox.getLeft());
				break;
			case 4 :
				getCornerSelfRelVertices(conn, bBox, newLine, nSelfIncr, -1, -1, bBox.getTopLeft());
				break;
			case 5 :
				getVerticalSelfRelVertices(conn, bBox, newLine, nSelfIncr, -1, bBox.getTop());
				break;
			case 6 :
				getCornerSelfRelVertices(conn, bBox, newLine, nSelfIncr, 1, -1, bBox.getTopRight());
				break;
			case 7 :
				getHorizontalSelfRelVertices(conn, bBox, newLine, nSelfIncr, 1, bBox.getRight());
				break;
		}
		
		// ensure that the end points are anchored properly to the shape.
		Point ptS2 = newLine.getPoint(0);
		Point ptS1 = conn.getSourceAnchor().getReferencePoint();
		conn.translateToRelative(ptS1);
		Point ptAbsS2 = new Point(ptS2);
		conn.translateToAbsolute(ptAbsS2);
		Point ptEdge = conn.getSourceAnchor().getLocation(ptAbsS2);
		conn.translateToRelative(ptEdge);
		ptS1 = getStraightEdgePoint(ptEdge, ptS1, ptS2);

		Point ptE2 = newLine.getPoint(newLine.size() - 1);
		Point ptE1 = conn.getTargetAnchor().getReferencePoint();
		conn.translateToRelative(ptE1);
		Point ptAbsE2 = new Point(ptE2);
		conn.translateToAbsolute(ptAbsE2);
		ptEdge = conn.getTargetAnchor().getLocation(ptAbsE2);
		conn.translateToRelative(ptEdge);
		ptE1 = getStraightEdgePoint(ptEdge, ptE1, ptE2);

		newLine.setPoint(ptS1, 0);
		newLine.setPoint(ptE1, newLine.size() - 1); 
	}

	/**
	 * Method getCornerSelfRelVertices.
	 * Retrieves the relation points for the self relation given a corner point and direction factors.
	 * @@param bBox Rectangle representing the shape extents to create the self relation around.
	 * @@param newLine PointList of the line to receive the new points
	 * @@param nOffset Incremental offset of the self relation to prevent overlapping relations.
	 * @@param nXDir int Direction (either -1, 1) indicating the horizontal growth direction 
	 * @@param nYDir int Direction (either -1, 1) indicating the vertical growth direction 
	 * @@param ptOrient Point which represents the starting location for the self relation to 
	 * grow from.
	 */
	private void getCornerSelfRelVertices(
		Connection conn,
		Rectangle bBox,
		PointList newLine,
		int nOffset,
		int nXDir,
		int nYDir,
		Point ptOrient) {

		int x = ptOrient.x;
		int y = bBox.getCenter().y + (nYDir * bBox.height / 4 );
		Point p1 = new Point(x, y);
		newLine.addPoint(p1);

		int xNew, yNew;

		Dimension selfrelsizeinit = new Dimension(SELFRELSIZEINIT, 0);
		if (!RouterHelper.getInstance().isFeedback(conn))
			selfrelsizeinit = (Dimension)MapModeUtil.getMapMode(conn).DPtoLP(selfrelsizeinit);
		
		xNew = x + (nXDir * (selfrelsizeinit.width + nOffset));
		Point p2 = new Point(xNew, y);
		newLine.addPoint(p2);

		yNew = ptOrient.y + (nYDir * (selfrelsizeinit.width + nOffset));
		Point p3 = new Point(xNew, yNew);
		newLine.addPoint(p3);

		xNew = ptOrient.x - (nXDir * bBox.width / 4);
		Point p4 = new Point(xNew, yNew);
		newLine.addPoint(p4);

		yNew = ptOrient.y;
		Point p5 = new Point(xNew, yNew);
		newLine.addPoint(p5);
	}

	/**
	 * Method getVerticalSelfRelVertices.
	 * @@param bBox Rectangle representing the shape extents to create the self relation around.
	 * @@param newLine PointList of the line to receive the new points
	 * @@param nOffset Incremental offset of the self relation to prevent overlapping relations.
	 * @@param nDir int Direction (either -1, 1) indicating the vertical growth direction 
	 * @@param ptOrient Point which represents the starting location for the self relation to 
	 * grow from.
	 */
	private void getVerticalSelfRelVertices(
		Connection conn,
		Rectangle bBox,
		PointList newLine,
		int nOffset,
		int nDir,
		Point ptOrient) {
		
		int nWidth = bBox.width / 4;
		
		int x = ptOrient.x - nWidth / 2;
		int y = ptOrient.y;
		Point p1 = new Point(x, y);
		newLine.addPoint(p1);

		int xNew, yNew;

		Dimension selfrelsizeinit = new Dimension(SELFRELSIZEINIT, 0);
		if (!RouterHelper.getInstance().isFeedback(conn))
			selfrelsizeinit = (Dimension)MapModeUtil.getMapMode(conn).DPtoLP(selfrelsizeinit);
		
		yNew = y + (nDir * (selfrelsizeinit.width + nOffset));
		Point p2 = new Point(x, yNew);
		newLine.addPoint(p2);

		xNew = ptOrient.x + nWidth / 2;
		Point p3 = new Point(xNew, yNew);
		newLine.addPoint(p3);

		yNew = ptOrient.y;
		Point p4 = new Point(xNew, yNew);
		newLine.addPoint(p4);
	}
	
	/**
	 * Method getHorizontalSelfRelVertices.
	 * @@param bBox Rectangle representing the shape extents to create the self relation around.
	 * @@param newLine PointList of the line to receive the new points
	 * @@param nOffset Incremental offset of the self relation to prevent overlapping relations.
	 * @@param nDir int Direction (either -1, 1) indicating the horizontal growth direction 
	 * @@param ptOrient Point which represents the starting location for the self relation to 
	 * grow from.
	 */
	private void getHorizontalSelfRelVertices(
		Connection conn,
		Rectangle bBox,
		PointList newLine,
		int nOffset,
		int nDir,
		Point ptOrient) {
		
		int nHeight = bBox.height / 4;
		
		int y = ptOrient.y - nHeight / 2;
		int x = ptOrient.x;
		Point p1 = new Point(x, y);
		newLine.addPoint(p1);

		int xNew, yNew;
		
		Dimension selfrelsizeinit = new Dimension(SELFRELSIZEINIT, 0);
		if (!RouterHelper.getInstance().isFeedback(conn))
			selfrelsizeinit = (Dimension)MapModeUtil.getMapMode(conn).DPtoLP(selfrelsizeinit);
		
		xNew = x + (nDir * (selfrelsizeinit.width + nOffset));
		Point p2 = new Point(xNew, y);
		newLine.addPoint(p2);

		yNew = ptOrient.y + nHeight / 2;
		Point p3 = new Point(xNew, yNew);
		newLine.addPoint(p3);

		xNew = ptOrient.x;
		Point p4 = new Point(xNew, yNew);
		newLine.addPoint(p4);
	}

	/**
	 * @@see org.eclipse.draw2d.BendpointConnectionRouter#remove(Connection)
	 */
	public void remove(Connection connection) {
		super.remove(connection);
		
        RouterHelper.getInstance().remove(connection);
		removeSelfRelConnection(connection);
		removeIntersectingShapesConnection(connection);
	}

	/* 
	 * Added to support GEF's shortest path routing
	 */
	public void invalidate(Connection connection) {
        super.invalidate(connection);
		RouterHelper.getInstance().invalidate(connection);
	}
    
    /**
     * Sets the constraint for the given {@@link Connection}.
     *
     * @@param connection The connection whose constraint we are setting
     * @@param constraint The constraint
     */
    public void setConstraint(Connection connection, Object constraint) {
        super.setConstraint(connection, constraint);
        RouterHelper.getInstance().setConstraint(connection, constraint);
    }
}
@


1.12
log
@[204565] gmf_head aboyko 070925 ObliqueRouter throws IndexOutOfBoundsException when routes connection between 2 intersecting shapes
@
text
@d362 4
a365 2
		if (conn.getSourceAnchor().getOwner() == null
				|| conn.getTargetAnchor().getOwner() == null)
@


1.11
log
@[198455] gmf_head aboyko 070815 [Layout] Connection between 2 intersecting shapes is often drawn within the intersection of the shapes
@
text
@d371 2
a372 1
			if (sourceBounds.intersects(targetBounds) && !sourceBounds.contains(targetBounds) && !targetBounds.contains(sourceBounds)) {
d432 7
d508 14
d686 4
d699 25
a723 14
		/*
		 * Determine the value by which the connection area has to become
		 * primary precise connection area. The value is chosen to be such that
		 * connections made from shapes intersecting on the same edge don't
		 * overlap
		 */
		PrecisionPoint translateExpansion = new PrecisionPoint(Math.max(connArea.width,
				connArea.height), 0);
		if (!isFeedbackConn) {
			IMapMode mm = MapModeUtil.getMapMode(conn);
			translateExpansion = (PrecisionPoint) mm.LPtoDP(translateExpansion);
			translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
					0.8);
			translateExpansion = (PrecisionPoint) mm.DPtoLP(translateExpansion);
d725 1
a725 2
			translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
					0.8);
a726 6
		translateExpansion.updateInts();

		/*
		 * Transform rough connection area to primary precise connection area
		 */
		getPrimaryPreciseConnectionArea(connArea, translateExpansion.x, position);
d741 2
a742 2
		Point ptS2 = newLine.getPoint(0);
		Point ptS1 = conn.getSourceAnchor().getReferencePoint();
d746 1
a746 1
		Point ptEdge = conn.getSourceAnchor().getLocation(ptAbsS2);
d748 1
a748 1
		ptS1 = getStraightEdgePoint(ptEdge, ptS1, ptS2);
d750 2
a751 2
		Point ptE2 = newLine.getPoint(newLine.size() - 1);
		Point ptE1 = conn.getTargetAnchor().getReferencePoint();
d753 1
a753 1
		Point ptAbsE2 = new Point(ptE2);
d755 1
a755 1
		ptEdge = conn.getTargetAnchor().getLocation(ptAbsE2);
d757 1
a757 1
		ptE1 = getStraightEdgePoint(ptEdge, ptE1, ptE2);
d759 2
a760 2
		newLine.insertPoint(ptS1, 0);
		newLine.insertPoint(ptE1, newLine.size());
@


1.10
log
@Fixing Java Doc and Copyright
@
text
@d21 1
d25 2
d35 1
d102 2
d142 1
a142 1

d340 1
a340 1
		if (!checkSelfRelConnection(conn, newLine)) {
d345 347
d693 69
d843 35
d888 1
a888 1

d1109 1
@


1.10.2.1
log
@[198455] gmf_R2_0_maintenance aboyko 070815 [Layout] Connection between 2 intersecting shapes is often drawn within the intersection of the shapes
@
text
@a20 1
import org.eclipse.draw2d.PositionConstants;
a23 2
import org.eclipse.draw2d.geometry.PrecisionPoint;
import org.eclipse.draw2d.geometry.PrecisionRectangle;
a31 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.IMapMode;
a97 2
	private ArrayListMap intersectingShapesConnections = new ArrayListMap();
	
d136 1
a136 1
	
d334 1
a334 1
		if (!checkSelfRelConnection(conn, newLine) && !checkShapesIntersect(conn, newLine)) {
a338 347
	
	/**
	 * Checks if source shape and target shape of the connection intersect (only intersect - not one contained in another)
	 * and if they are calculates the bendpoints for the connection. Calculated bendpoints are stored in <code>newLine</code>.
	 * Initially <code>newLine</code> contains the list of bendpoints calculated by the router, however
	 * if for intersecting shapes we have a default connection (i.e. no extra bendpoints), bendpoints will
	 * be calculated and <code>newLine</code> will be cleared and calculated bendpoints will be stored there.
	 * 
	 * Criterias for calculation of bendpoints for connection between 2 intersecting shapes:
	 * 1. No extra bendpoints introduced by user (only source and target anchor points present)
	 * 2. Source and target shapes intersect (one contained in another = do not intersect) 
	 * 
	 * @@param conn connection
	 * @@param newLine list to store calculated bendpoints (contains bendpoints read from the model initially
	 * @@return <code>true</code> if bendpoints were calculated here for intersecting shapes
	 */
	protected boolean checkShapesIntersect(Connection conn, PointList newLine) {
		if (conn.getSourceAnchor().getOwner() == null
				|| conn.getTargetAnchor().getOwner() == null)
			return false;
		
		if (newLine.size() < 3) {
			PrecisionRectangle sourceBounds = new PrecisionRectangle(conn.getSourceAnchor().getOwner().getBounds()); 
			PrecisionRectangle targetBounds = new PrecisionRectangle(conn.getTargetAnchor().getOwner().getBounds());
			conn.getSourceAnchor().getOwner().translateToAbsolute(sourceBounds);
			conn.getTargetAnchor().getOwner().translateToAbsolute(targetBounds);
			if (sourceBounds.intersects(targetBounds) && !sourceBounds.contains(targetBounds) && !targetBounds.contains(sourceBounds)) {
				getVerticesForIntersectingShapes(conn, newLine);
				return true;
			}
		} else {
			removeIntersectingShapesConnection(conn);
		}
		return false;
	}
	
	/**
	 * Determines geographic position of the source figure relative to the
	 * connection area
	 * 
	 * @@param connRectangle
	 *            connection area
	 * @@param sourceRect
	 *            bounds of the source figure
	 * @@param position
	 *            geographic position of the connection area relative to the
	 *            union of intersecting source and target figures
	 * @@return geographic position of the source figure relative to the
	 *         connection area
	 */
	private int getSourcePositionFromConnectionRectangle(
			Rectangle connRectangle, Rectangle sourceRect, int position) {
		Dimension diff = null;
		switch (position) {
		case PositionConstants.NORTH_WEST:
			diff = connRectangle.getBottomRight().getDifference(
					sourceRect.getTopLeft());
			if (diff.width == 0) {
				return PositionConstants.EAST;
			} else {
				return PositionConstants.SOUTH;
			}
		case PositionConstants.NORTH_EAST:
			diff = connRectangle.getBottomLeft().getDifference(
					sourceRect.getTopRight());
			if (diff.width == 0) {
				return PositionConstants.WEST;
			} else {
				return PositionConstants.SOUTH;
			}
		case PositionConstants.SOUTH_EAST:
			diff = connRectangle.getTopLeft().getDifference(
					sourceRect.getBottomRight());
			if (diff.width == 0) {
				return PositionConstants.WEST;
			} else {
				return PositionConstants.NORTH;
			}
		case PositionConstants.SOUTH_WEST:
			diff = connRectangle.getTopRight().getDifference(
					sourceRect.getBottomLeft());
			if (diff.width == 0) {
				return PositionConstants.EAST;
			} else {
				return PositionConstants.NORTH;
			}
		}
		return PositionConstants.NONE;
	}
	
	/**
	 * Stores bendpoints for the connection in <code>line</code> based on the
	 * precise connection area, geographic position of the source figure
	 * relative to the connection area and geographic position of the connection
	 * area relative to the union of intersecting shapes
	 * 
	 * @@param connRect
	 *            precise connection area
	 * @@param position
	 *            geographic position of the connection area relative to the
	 *            union of intersecting shapes
	 * @@param sourcePosition
	 *            geographic position of the source figure relative to the
	 *            connection area
	 * @@param line
	 *            list for storing bendpoints (cleared at the start)
	 */
	private void getConnectionPoints(Rectangle connRect, int position,
			int sourcePosition, PointList line) {
		line.removeAllPoints();
		switch (position) {
		case PositionConstants.NORTH_WEST:
			if (sourcePosition == PositionConstants.EAST) {
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getBottomLeft());
			} else {
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getTopRight());
			}
			break;
		case PositionConstants.NORTH_EAST:
			if (sourcePosition == PositionConstants.WEST) {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getBottomRight());
			} else {
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getTopLeft());
			}
			break;
		case PositionConstants.SOUTH_EAST:
			if (sourcePosition == PositionConstants.WEST) {
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getTopRight());
			} else {
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getBottomLeft());
			}
			break;
		case PositionConstants.SOUTH_WEST:
			if (sourcePosition == PositionConstants.EAST) {
				line.addPoint(connRect.getBottomRight());
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getTopLeft());
			} else {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getBottomRight());
			}
			break;
		}
	}
	
	/**
	 * Transforms width and height of the dimension into absolute values
	 * 
	 * @@param d
	 *            dimension
	 */
	private void absDimension(Dimension d) {
		d.width = Math.abs(d.width);
		d.height = Math.abs(d.height);
	}
	
	/**
	 * Calculates and stores bendpoints (or vertices) for the connection between
	 * 2 intersecting shapes and stores them in <code>newLine</code>
	 * 
	 * @@param conn
	 *            connection
	 * @@param newLine
	 *            list to store calculated bendpoints (oe vertices)
	 */
	private void getVerticesForIntersectingShapes(Connection conn,
			PointList newLine) {
		Object key = getIntersectingShapesConnectionKey(conn);
		int nSelfIncr = 0;
		int nIndex = 0;
		/*
		 * Check if this connection is 2nd, 3rd, ..., or n-th connection between
		 * the same 2 intersecting shapes. If yes, determine what's the index.
		 * (i.e the n>1)
		 */
		ArrayList connectionList = intersectingShapesConnections.get(key);
		if (connectionList != null) {
			if (!connectionList.contains(conn)) {
				intersectingShapesConnections.put(key, conn);
				connectionList = intersectingShapesConnections.get(key);
			}

			nIndex = connectionList.indexOf(conn);
			assert nIndex >= 0;
		} else {
			intersectingShapesConnections.put(key, conn);
		}

		/*
		 * Translate properly the default offset value between multiple
		 * connections connecting the same 2 intersecting shapes. The default
		 * value is in pixels, hence for feedback connection it must stay the
		 * same and translated to logical units otherwise.
		 */
		PrecisionPoint selfrelsizeincr = new PrecisionPoint(SELFRELSIZEINCR, 0);
		boolean isFeedbackConn = RouterHelper.getInstance().isFeedback(conn);
		if (!isFeedbackConn)
			selfrelsizeincr = (PrecisionPoint) MapModeUtil.getMapMode(conn)
					.DPtoLP(selfrelsizeincr);

		/*
		 * Translate bounds of the source and target figures into coordinates
		 * relative to the connection figure. (PrecisionRectangle is used to
		 * avoid precision losses during non-integer scaling) Also calculate the
		 * union of the source and target figures bounds and their intersection
		 * rectangle for further calculations. All geometric figures are
		 * translated to the coordinates relative to the connection figure!
		 */
		IFigure sourceFig = conn.getSourceAnchor().getOwner();
		PrecisionRectangle sourceRect = new PrecisionRectangle(sourceFig
				.getBounds());
		sourceFig.translateToAbsolute(sourceRect);
		conn.translateToRelative(sourceRect);

		IFigure targetFig = conn.getTargetAnchor().getOwner();
		PrecisionRectangle targetRect = new PrecisionRectangle(targetFig
				.getBounds());
		targetFig.translateToAbsolute(targetRect);
		conn.translateToRelative(targetRect);
		PrecisionRectangle union = sourceRect.getPreciseCopy()
				.union(targetRect);

		/*
		 * Calculate the final offset value to space out multiple connections
		 * between 2 intersecting shapes
		 */
		nSelfIncr = selfrelsizeincr.x * (nIndex);

		Rectangle intersection = sourceRect.getCopy().intersect(targetRect);

		/*
		 * Determine the rough connection area and its geographic position
		 * relative to the union of the intersecting shapes. This is the area
		 * around which the connection will be routed. It's rough because it
		 * will be expanded and spaced out from other connections connecting the
		 * same shapes. The rough connection area is the smallest blank
		 * rectangle located within the union rectangle but not intersecting
		 * both source and traget figures bounds. The possible geographic
		 * locations for connection area are: NW, NE, SW, SE.
		 */
		Rectangle connArea = new Rectangle();
		int position = PositionConstants.NONE;
		int minArea = 0;
		Point unionTopLeft = union.getTopLeft();
		Point unionTopRight = union.getTopRight();
		Point unionBottomRight = union.getBottomRight();
		Point unionBottomLeft = union.getBottomLeft();

		if (!unionTopLeft.equals(sourceRect.getTopLeft())
				&& !unionTopLeft.equals(targetRect.getTopLeft())) {
			Dimension diffVector = unionTopLeft.getDifference(intersection
					.getTopLeft());
			absDimension(diffVector);
			int areaTopLeft = diffVector.getArea();
			if (minArea == 0 || minArea > areaTopLeft) {
				position = PositionConstants.NORTH_WEST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionTopLeft.x, unionTopLeft.y);
				minArea = areaTopLeft;
			}
		}

		if (!unionTopRight.equals(sourceRect.getTopRight())
				&& !unionTopRight.equals(targetRect.getTopRight())) {
			Dimension diffVector = unionTopRight.getDifference(intersection
					.getTopRight());
			absDimension(diffVector);
			int areaTopRight = diffVector.getArea();
			if (minArea == 0 || minArea > areaTopRight) {
				position = PositionConstants.NORTH_EAST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionTopRight.x - connArea.width,
						unionTopRight.y);
				minArea = areaTopRight;
			}
		}

		if (!unionBottomRight.equals(sourceRect.getBottomRight())
				&& !unionBottomRight.equals(targetRect.getBottomRight())) {
			Dimension diffVector = unionBottomRight.getDifference(intersection
					.getBottomRight());
			absDimension(diffVector);
			int areaBottomRight = diffVector.getArea();
			if (minArea == 0 || minArea > areaBottomRight) {
				position = PositionConstants.SOUTH_EAST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionBottomRight.x - connArea.width,
						unionBottomRight.y - connArea.height);
				minArea = areaBottomRight;
			}
		}

		if (!unionBottomLeft.equals(sourceRect.getBottomLeft())
				&& !unionBottomLeft.equals(targetRect.getBottomLeft())) {
			Dimension diffVector = unionBottomLeft.getDifference(intersection
					.getBottomLeft());
			absDimension(diffVector);
			int areaBottomLeft = diffVector.getArea();
			if (minArea == 0 || minArea > areaBottomLeft) {
				position = PositionConstants.SOUTH_WEST;
				connArea.setSize(diffVector);
				connArea.setLocation(unionBottomLeft.x, unionBottomLeft.y
						- connArea.height);
				minArea = areaBottomLeft;
			}
		}

		/*
		 * Determine the geographic position of the source figure relative to
		 * the rough connection area. This will help determining the order for
		 * bendpoints list from the precise connection area
		 */
		int sourcePosition = getSourcePositionFromConnectionRectangle(connArea,
				sourceRect, position);

		/*
		 * Determine the value by which the connection area has to become
		 * primary precise connection area. The value is chosen to be such that
		 * connections made from shapes intersecting on the same edge don't
		 * overlap
		 */
		PrecisionPoint translateExpansion = new PrecisionPoint(Math.max(connArea.width,
				connArea.height), 0);
		if (!isFeedbackConn) {
			IMapMode mm = MapModeUtil.getMapMode(conn);
			translateExpansion = (PrecisionPoint) mm.LPtoDP(translateExpansion);
			translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
					0.8);
			translateExpansion = (PrecisionPoint) mm.DPtoLP(translateExpansion);
		} else {
			translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
					0.8);
		}
		translateExpansion.updateInts();
a339 69
		/*
		 * Transform rough connection area to primary precise connection area
		 */
		getPrimaryPreciseConnectionArea(connArea, translateExpansion.x, position);

		/*
		 * Transform the primary precise connection area to precise connection
		 * area by accounting for multiple connection between the same 2
		 * intersecting shapes
		 */
		connArea.expand(nSelfIncr, nSelfIncr);

		/*
		 * Calculates the bendpoints for the connection from the precise
		 * connection area
		 */
		getConnectionPoints(connArea, position, sourcePosition, newLine);

		Point ptS2 = newLine.getPoint(0);
		Point ptS1 = conn.getSourceAnchor().getReferencePoint();
		conn.translateToRelative(ptS1);
		Point ptAbsS2 = new Point(ptS2);
		conn.translateToAbsolute(ptAbsS2);
		Point ptEdge = conn.getSourceAnchor().getLocation(ptAbsS2);
		conn.translateToRelative(ptEdge);
		ptS1 = getStraightEdgePoint(ptEdge, ptS1, ptS2);

		Point ptE2 = newLine.getPoint(newLine.size() - 1);
		Point ptE1 = conn.getTargetAnchor().getReferencePoint();
		conn.translateToRelative(ptE1);
		Point ptAbsE2 = new Point(ptE2);
		conn.translateToAbsolute(ptAbsE2);
		ptEdge = conn.getTargetAnchor().getLocation(ptAbsE2);
		conn.translateToRelative(ptEdge);
		ptE1 = getStraightEdgePoint(ptEdge, ptE1, ptE2);

		newLine.insertPoint(ptS1, 0);
		newLine.insertPoint(ptE1, newLine.size());

	}
	
	/**
	 * Transforms rough connection area into primary precise connection area.
	 * Primary precise connection area is the one that doesn't account for
	 * multiple connections between same intersecting shapes
	 * 
	 * @@param r
	 *            rough connection area rectangle
	 * @@param size
	 *            size used for expansion
	 * @@param positionOfConnArea
	 *            geographic position of the connection area relative to the
	 *            union of intersecting shapes
	 */
	private void getPrimaryPreciseConnectionArea(Rectangle r, int size, int positionOfConnArea) {
		r.expand(size, size);
		if (r.width < r.height) {
			r.height -= size;
			if ((positionOfConnArea & PositionConstants.SOUTH) != 0) {
				r.y += size;
			}
		} else {
			r.width -= size;
			if ((positionOfConnArea & PositionConstants.EAST) != 0) {
				r.x += size;
			}
		}
	}
	
a420 35
	
	/**
	 * Method removeIntersectingShapesConnection.
	 * Removes the given connection from the intersecting shapes connections hash map
	 * @@param conn Connection to remove from the map
	 */
	private void removeIntersectingShapesConnection(Connection conn) {
		if (conn.getSourceAnchor() == null || conn.getTargetAnchor() == null
				|| conn.getSourceAnchor().getOwner() == null
				|| conn.getTargetAnchor().getOwner() == null)
				return;
		Object key = getIntersectingShapesConnectionKey(conn);
		ArrayList connectionList = intersectingShapesConnections.get(key);
		if (connectionList != null) {
			int index = connectionList.indexOf(conn);
			if (index == -1)
				return;
			intersectingShapesConnections.remove(key, conn);
		}
	}
	
	/**
	 * Calculates the key for a connection made between 2 intersecting shapes.
	 * Key is determined from the key of the source and target figures hash
	 * codes, since we want connections made between the same 2 intersected
	 * shapes to be mapped to one value
	 * 
	 * @@param conn
	 *            connection
	 * @@return hash code
	 */
	private Object getIntersectingShapesConnectionKey(Connection conn) {
		return new Integer(conn.getSourceAnchor().getOwner().hashCode()
				^ conn.getTargetAnchor().getOwner().hashCode());
	}
d431 1
a431 1
		
a651 1
		removeIntersectingShapesConnection(connection);
@


1.10.2.2
log
@[204565] gmf_R2_maintenance aboyko 070925 ObliqueRouter throws IndexOutOfBoundsException when routes connection between 2 intersecting shapes
@
text
@d371 1
a371 2
			if (sourceBounds.intersects(targetBounds) && !sourceBounds.contains(targetBounds) && !targetBounds.contains(sourceBounds)
					|| sourceBounds.equals(targetBounds)) {
a430 7
		case PositionConstants.NONE:
			diff = connRectangle.getCenter().getDifference(sourceRect.getCenter());
			if (diff.width == 0) {
				return diff.height < 0 ? PositionConstants.SOUTH : PositionConstants.NORTH;  
			} else {
				return diff.width < 0 ? PositionConstants.EAST : PositionConstants.WEST;
			}
a499 14
		case PositionConstants.NONE:
			if (sourcePosition == PositionConstants.NORTH) {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getBottomLeft());
			} else if (sourcePosition == PositionConstants.SOUTH) {
				line.addPoint(connRect.getBottomLeft());
				line.addPoint(connRect.getTopLeft());
			} else if (sourcePosition == PositionConstants.WEST) {
				line.addPoint(connRect.getTopLeft());
				line.addPoint(connRect.getTopRight());
			} else {
				line.addPoint(connRect.getTopRight());
				line.addPoint(connRect.getTopLeft());
			}
a663 4
		
		if (position == PositionConstants.NONE) {
			connArea = intersection;
		}
d673 14
a686 25
		if (position != PositionConstants.NONE) {
			/*
			 * Determine the value by which the connection area has to become
			 * primary precise connection area. The value is chosen to be such that
			 * connections made from shapes intersecting on the same edge don't
			 * overlap
			 */
			PrecisionPoint translateExpansion = new PrecisionPoint(Math.max(connArea.width,
					connArea.height), 0);
			if (!isFeedbackConn) {
				IMapMode mm = MapModeUtil.getMapMode(conn);
				translateExpansion = (PrecisionPoint) mm.LPtoDP(translateExpansion);
				translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
						0.8);
				translateExpansion = (PrecisionPoint) mm.DPtoLP(translateExpansion);
			} else {
				translateExpansion.preciseX = Math.pow(translateExpansion.preciseX,
						0.8);
			}
			translateExpansion.updateInts();
	
			/*
			 * Transform rough connection area to primary precise connection area
			 */
			getPrimaryPreciseConnectionArea(connArea, translateExpansion.x, position);
d688 2
a689 1
			connArea.expand(selfrelsizeincr.x<<1, selfrelsizeincr.x<<1);
d691 6
d711 2
a712 2
		PrecisionPoint ptS2 = new PrecisionPoint(newLine.getPoint(0));
		PrecisionPoint ptS1 = new PrecisionPoint(conn.getSourceAnchor().getReferencePoint());
d716 1
a716 1
		PrecisionPoint ptEdge = new PrecisionPoint(conn.getSourceAnchor().getLocation(ptAbsS2));
d718 1
a718 1
		ptS1 = new PrecisionPoint(getStraightEdgePoint(ptEdge, ptS1, ptS2));
d720 2
a721 2
		PrecisionPoint ptE2 = new PrecisionPoint(newLine.getPoint(newLine.size() - 1));
		PrecisionPoint ptE1 = new PrecisionPoint(conn.getTargetAnchor().getReferencePoint());
d723 1
a723 1
		PrecisionPoint ptAbsE2 = (PrecisionPoint)ptE2.getCopy();
d725 1
a725 1
		ptEdge = new PrecisionPoint(conn.getTargetAnchor().getLocation(ptAbsE2));
d727 1
a727 1
		ptE1 = new PrecisionPoint(getStraightEdgePoint(ptEdge, ptE1, ptE2));
d729 2
a730 2
		newLine.insertPoint(new Point(Math.round(ptS1.preciseX), Math.round(ptS1.preciseY)), 0);
		newLine.insertPoint(new Point(Math.round(ptE1.preciseX), Math.round(ptE1.preciseY)), newLine.size());
@


1.9
log
@[187341] gmf_head mmostafa 070516 Rectilinear router does not consider Border Items
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2006 IBM Corporation and others.
@


1.8
log
@[160525] gmf_head crevells 061212 Edges drawn between other edges don't behave properly
@
text
@d26 1
d29 1
a32 1
import org.eclipse.jface.util.Assert;
d198 1
a198 1
        PointList points = new PointList();
d200 13
d222 1
a222 3
        
        routeLine(conn, 0, points);
		conn.setPoints(points);
d266 1
a266 1
		Rectangle startRect = null;        
d268 1
a268 3
            startRect = new Rectangle(sourceOwner.getBounds());
            sourceOwner.translateToAbsolute(startRect);
            conn.translateToRelative(startRect);
d271 1
a271 1
        Rectangle endRect = null;        
d273 1
a273 3
    		endRect = new Rectangle(targetOwner.getBounds());
            targetOwner.translateToAbsolute(endRect);
    		conn.translateToRelative(endRect);
d283 2
a284 2
			else if ((startRect == null || !startRect.contains(pt))
                && (endRect == null || !endRect.contains(pt))) {
d300 23
d443 1
a443 1
			Assert.isTrue(nIndex >= 0);
@


1.7
log
@gmf_head ahunter 061003 Merge 1.0.1 Runtime to HEAD 2.0
@
text
@d246 4
a249 1
		if (conn.getSourceAnchor().getOwner() == null)
d251 1
a251 1
		if (conn.getTargetAnchor().getOwner() == null)
d254 13
a266 7
		Rectangle startRect = new Rectangle(conn.getSourceAnchor().getOwner().getBounds());
		conn.getSourceAnchor().getOwner().translateToAbsolute(startRect);
		conn.translateToRelative(startRect);

		Rectangle endRect = new Rectangle(conn.getTargetAnchor().getOwner().getBounds());
		conn.getTargetAnchor().getOwner().translateToAbsolute(endRect);
		conn.translateToRelative(endRect);
d275 4
a278 3
			else if (!startRect.contains(pt) && !endRect.contains(pt)) {
				newPoints.addPoint(pt);
			}
@


1.6
log
@bugzilla 111075 gmf-head sshaw 060425 AvoidObstructions needs to be nested figure aware
@
text
@d185 2
a186 1
		routeBendpoints(conn);
@


1.6.2.1
log
@[151224] gmf_R1_0_maintenace mmostafa 060725  ObliqueRouter trys to rout hidden/deactivated connections
@
text
@d185 1
a185 2
        if (conn.isVisible())
            routeBendpoints(conn);
@


1.5
log
@bugzilla 125158 gmf-head sshaw 060126 Migrate GMF animation support to use GEF 3.2 infrastructure for animation
@
text
@a14 1
import java.util.Collections;
a15 3
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
a16 1
import org.eclipse.draw2d.Bendpoint;
a19 1
import org.eclipse.draw2d.FreeformLayout;
a23 1
import org.eclipse.draw2d.geometry.Ray;
a27 1
import org.eclipse.gmf.runtime.draw2d.ui.geometry.PointListUtilities;
d196 13
a208 29
		List bendpoints = (List)getConstraint(conn);
		if (bendpoints == null)
			bendpoints = Collections.EMPTY_LIST;

		PointList points = new PointList(bendpoints.size());

		for (int i = 0; i < bendpoints.size(); i++) {
			Bendpoint bp = (Bendpoint) bendpoints.get(i);
			points.addPoint(bp.getLocation());
		}

		if (bendpoints.size() == 0) {
			Point r1 = conn.getSourceAnchor().getReferencePoint().getCopy();
			conn.translateToRelative(r1);
			points.addPoint(r1);

			Point r2 = conn.getTargetAnchor().getReferencePoint().getCopy();
			conn.translateToRelative(r2);
			points.addPoint(r2);
		}

		if (isClosestDistance(conn))
			closestDistanceRouting(points);

		routeLine(conn, 0, points);

		if (isAvoidingObstructions(conn))
			avoidObstructionsRouting(conn, points);

a211 32
	/**
	 * This is option on the router to use the closest distance possible to route the line.
	 */
	protected void closestDistanceRouting(
		PointList newLine) {
		Point ptOrig = new Point(newLine.getFirstPoint());
		Point ptTerm = new Point(newLine.getLastPoint());

		newLine.removeAllPoints();
		newLine.addPoint(ptOrig);
		newLine.addPoint(ptTerm);
	}

	/**
	 * This method will move the line around any obstructions in it's path.
	 */
	protected void avoidObstructionsRouting(
		Connection conn,
		PointList newLine) {
		boolean bSkipNormalization = routeThroughObstructions(conn, newLine);

		int dwSaveRouterFlags = routerFlags;

		// avoid recursion
		if (bSkipNormalization)
			routerFlags |= ObliqueRouter.ROUTER_FLAG_SKIPNORMALIZATION;

		// reroute line
		routeLine(conn, 0, newLine);

		routerFlags = dwSaveRouterFlags;
	}
d332 1
a332 31
		if (newLine.size() <= 1)
			return;

		Point ptS2 = newLine.getPoint(1);
		Point ptAbsS2 = new Point(ptS2);
		conn.translateToAbsolute(ptAbsS2);
		if (newLine.size() == 2)
            ptAbsS2 = conn.getTargetAnchor().getReferencePoint();
		Point ptAbsS1 = conn.getSourceAnchor().getLocation(ptAbsS2);
		Point ptS1 = new Point(ptAbsS1);
        conn.translateToRelative(ptS1);
        
        Point ptE2 = newLine.getPoint(newLine.size() - 2);
        Point ptAbsE2 = new Point(ptE2);
        conn.translateToAbsolute(ptAbsE2);
		if (newLine.size() == 2)
			ptAbsE2 = ptAbsS1;
		Point ptE1 = new Point(conn.getTargetAnchor().getLocation(ptAbsE2)); 
		conn.translateToRelative(ptE1);
        
		newLine.setPoint(ptS1, 0);
		// convert reference points back to relative to avoid rounding issues.
		newLine.setPoint(ptE1, newLine.size() - 1);
		if (newLine.size() != 2) {
			ptS2 = ptAbsS2;
			conn.translateToRelative(ptS2);
			newLine.setPoint(ptS2, 1);
			ptE2 = ptAbsE2;
			conn.translateToRelative(ptE2);
			newLine.setPoint(ptE2, newLine.size() - 2);
		}
a334 221
	protected final static int ROUTER_OBSTRUCTION_BUFFER = 12;

	/**
	 * This method will collapse all the rectangles together that intersect in the given List.  It utilizes
	 * a recursive implementation.
	 */
	protected List collapseRects(List collectRect, int inflate) {
		if (collectRect.size() == 0)
			return new LinkedList();

		Rectangle rCompare = new Rectangle((Rectangle) collectRect.remove(0));
		List collapsedRects = collapseRects(rCompare, collectRect, inflate);
		collapsedRects.add(rCompare);

		return collapsedRects;
	}

	/**
	 * Recursively called method called by collapseRects(List collectRect).
	 */
	private List collapseRects(Rectangle rCompare, List collectRect, int inflate) {
		List newCollect = new LinkedList();
		Rectangle rCompare1 = new Rectangle(rCompare);

		// compare rectangle with each rectangle in the rest of the list
		boolean intersectionOccurred = false;
		ListIterator listIter = collectRect.listIterator();
		while (listIter.hasNext()) {
			Rectangle rCompare2 = new Rectangle((Rectangle) listIter.next());

			Rectangle rExpandRect1 = new Rectangle(rCompare1);
			Rectangle rExpandRect2 = new Rectangle(rCompare2);

			// inflate the rect by the obstruction buffer for the intersection
			// calculation so that we won't try to route through a space smaller
			// then necessary
			rExpandRect1.expand(inflate, inflate);
			rExpandRect2.expand(inflate, inflate);

			if (rExpandRect1.intersects(rExpandRect2)) {
				rCompare1.union(rCompare2);
				intersectionOccurred = true;
			} else {
				newCollect.add(rCompare2);
			}
		}

		rCompare.setBounds(rCompare1);

		if (newCollect.size() > 0) {
			if (intersectionOccurred) {
				return collapseRects(rCompare, newCollect, inflate);
			} else {
				Rectangle rFirst =
					new Rectangle((Rectangle) newCollect.remove(0));
				List finalCollapse = collapseRects(rFirst, newCollect, inflate);
				finalCollapse.add(rFirst);

				return finalCollapse;
			}
		} else {
			return newCollect;
		}
	}

	/**
	 * Helper function for the avoidObstructionsRouting method.
	 */
	protected boolean routeThroughObstructions(
		Connection conn,
		PointList newLine) {
		boolean bRet = false;

		Point infimumPoint = PointListUtilities.getPointsInfimum(newLine);
		Point supremumPoint = PointListUtilities.getPointsSupremum(newLine);

		Ray diameter = new Ray(infimumPoint, supremumPoint);
		Rectangle rPoly =
			new Rectangle(
				infimumPoint.x,
				infimumPoint.y,
				diameter.x,
				diameter.y);

		List collectObstructs = new LinkedList();

		IFigure parent = getContainerFigure(conn);

		// don't bother routing if there is no attachments
		if (parent == null)
			return false;

        // set the end points back to the reference points - this will avoid errors, where
        // an edge point is erroneously aligned with a specific edge, even though the avoid
        // obstructions would suggest attachment to another edge is more appropriate
        Point ptRef = conn.getSourceAnchor().getReferencePoint();
        conn.translateToRelative(ptRef);
        newLine.setPoint(ptRef, 0);
        ptRef = conn.getTargetAnchor().getReferencePoint();
        conn.translateToRelative(ptRef);
        newLine.setPoint(ptRef, newLine.size() - 1);
        
		// TBD - optimize this
		// increase connect view rect by width or height of diagram
		// to maximize views included in the obstruction calculation
		// without including all views in the diagram
		Rectangle rBoundingRect = new Rectangle(parent.getBounds());
		parent.translateToAbsolute(rBoundingRect);
		conn.translateToRelative(rBoundingRect);

		if (rPoly.width > rPoly.height) {
			rPoly.y = rBoundingRect.y;
			rPoly.setSize(rPoly.width, rBoundingRect.height);
		} else {
			rPoly.x = rBoundingRect.x;
			rPoly.setSize(rBoundingRect.width, rPoly.height);
		}

		List children = parent.getChildren();
		for (int i = 0; i < children.size(); i++) {
			IFigure child = (IFigure) children.get(i);

			if (!child.equals(conn.getSourceAnchor().getOwner())
				&& !child.equals(conn.getTargetAnchor().getOwner())) {
				Rectangle rObstruct = new Rectangle(child.getBounds());
				child.translateToAbsolute(rObstruct);
				conn.translateToRelative(rObstruct);

				// inflate slightly
				rObstruct.expand(1, 1);

				if (rPoly.intersects(rObstruct)) {
					collectObstructs.add(rObstruct);
					bRet = true;
				}
			}
		}

		// parse through obstruction collect and combine rectangle that
		// intersect with each other
		if (collectObstructs.size() > 0) {
			Dimension buffer = new Dimension(ROUTER_OBSTRUCTION_BUFFER + 1, 0);
			if (!isFeedback(conn))
				buffer = (Dimension)MapModeUtil.getMapMode(conn).DPtoLP(buffer);
			final int inflate = buffer.width;
			
			List collapsedRects = collapseRects(collectObstructs, inflate);
			collectObstructs.clear();

			// Loop through the collapsedRects list until there are no more
			// intersections
			boolean bRouted = true;
			while (bRouted && !collapsedRects.isEmpty()) {
				ListIterator listIter = collapsedRects.listIterator();
				bRouted = false;

				while (listIter.hasNext()) {
					Rectangle rObstruct = (Rectangle) listIter.next();
					PointList routedPoly = PointListUtilities
					.routeAroundRect(
                        newLine,
						rObstruct,
						0,
						false,
						inflate);
					
					if (routedPoly != null) {
						bRouted = true;
						newLine.removeAllPoints();
						newLine.addAll(routedPoly);
					} else
						collectObstructs.add(rObstruct);
				}

				List tempList = collapsedRects;
				collapsedRects = collectObstructs;
				tempList.clear();
				collectObstructs = tempList;

				if (bRouted && !collapsedRects.isEmpty())
					resetEndPointsToEdge(conn, newLine);
			}
		}

		return bRet;
	}


	/**
	 * getContainerFigure
	 * @@param conn
	 * @@return
	 */
	private IFigure getContainerFigure(Connection conn) {
		IFigure sourceContainer = findContainerFigure(conn.getSourceAnchor().getOwner());
		IFigure targetContainer = findContainerFigure(conn.getTargetAnchor().getOwner());
		
		if (sourceContainer == targetContainer)
			return sourceContainer;
		
		return null;
	}
	
	/**
	 * findContainerFigure
	 * Recursive method to find the figure that owns the children the
	 * connection is connecting to.
	 * 
	 * @@param fig IFigure to find the shape container figure parent of.
	 * @@return Container figure 
	 */
	private IFigure findContainerFigure(IFigure fig) {
		if (fig == null)
			return null;
		
		if (fig.getLayoutManager() instanceof FreeformLayout)
			return fig;
		
		return findContainerFigure(fig.getParent());
	}

d407 1
a407 1
		if (!isFeedback(conn))
d496 1
a496 1
		if (!isFeedback(conn))
d543 1
a543 1
		if (!isFeedback(conn))
d586 1
a586 1
		if (!isFeedback(conn))
d607 2
a608 1

d611 19
a629 7
	
	protected boolean isFeedback(Connection conn) {
		Dimension dim = new Dimension(100, 100);
		Dimension dimCheck = dim.getCopy();
		conn.translateToRelative(dimCheck);
		return dim.equals(dimCheck);
	}
@


1.4
log
@bugzilla 112788 gmf-head sshaw 051104 API: Encapsulate MapMode / HiMetric coordinate system from clients
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2003 IBM Corporation and others.
d22 1
d44 1
a44 1
public class ObliqueRouter extends AnimatableConnectionRouter {
d188 8
@


1.3
log
@Bugzilla 113265 gmf_head tmacdoug 051020 - Oblique router can cause a cycle when dragging a connector off the viewport
@
text
@a30 2
import org.eclipse.jface.util.Assert;

d37 2
a38 1
import org.eclipse.gmf.runtime.draw2d.ui.mapmode.MapMode;
d555 1
a555 1
				buffer = (Dimension)MapMode.translateToLP(buffer);
d706 1
a706 1
			selfrelsizeincr = (Dimension)MapMode.translateToLP(selfrelsizeincr);
d795 1
a795 1
			selfrelsizeinit = (Dimension)MapMode.translateToLP(selfrelsizeinit);
d842 1
a842 1
			selfrelsizeinit = (Dimension)MapMode.translateToLP(selfrelsizeinit);
d885 1
a885 1
			selfrelsizeinit = (Dimension)MapMode.translateToLP(selfrelsizeinit);
@


1.2
log
@Bugzilla 108765 gmf_head tmacdoug 050912 - Update copyrights of GMF and EMFT plugins content to Eclipse copyright (EPL)
@
text
@d397 1
a397 1
		Point ptE1 = conn.getTargetAnchor().getLocation(ptAbsE2); 
@


1.1
log
@Refactoring of the IBM gmf runtime contribution to the org.eclipse.gmf.runtime namespace.
@
text
@d1 11
a11 9
/*
 *+------------------------------------------------------------------------+
 *| Licensed Materials - Property of IBM                                   |
 *| (C) Copyright IBM Corp. 2002, 2003.  All Rights Reserved.              |
 *|                                                                        |
 *| US Government Users Restricted Rights - Use, duplication or disclosure |
 *| restricted by GSA ADP Schedule Contract with IBM Corp.                 |
 *+------------------------------------------------------------------------+
 */
@

