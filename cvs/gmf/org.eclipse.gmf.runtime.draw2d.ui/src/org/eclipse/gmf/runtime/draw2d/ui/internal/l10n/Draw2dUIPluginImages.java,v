head	1.1;
access;
symbols
	v20081023-2107:1.1
	v20081022-1925:1.1
	v20081021-1810:1.1
	v20081020-0700:1.1
	v20080911-1728:1.1
	v20080911-1506:1.1
	v20080910-1520:1.1
	v20080910-1510:1.1
	v20080903-1520:1.1
	v20080903-1510:1.1
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.6
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080610-1132:1.1
	v20080603-1553:1.1
	v20080512-1200:1.1
	v20080503-1740:1.1
	v20080501-1739:1.1
	v20080425-1959:1.1
	v20080417-1610:1.1
	v20080407-2250:1.1
	v20080407-0930:1.1
	v20080404-1111:1.1
	v20080222-1200:1.1
	v20080215-1500:1.1
	v20080215-1200:1.1
	v20080201-2010:1.1
	v20080114-1111:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070928-0000:1.1
	v20070915-0000:1.1
	v20070903-0000:1.1
	v20070830-0000:1.1
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.4
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070605-1400:1.1
	v20070601-1400:1.1
	v20070518-1300:1.1
	v20070330-1300:1.1
	v20070221-1500:1.1
	v20070208-1800:1.1
	v20070202-0200:1.1
	M4_20:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	M3_20:1.1
	v20061013-1330:1.1
	v20060925-1700:1.1
	v20060919-0800:1.1
	M1_20:1.1
	v20060824-1600:1.1
	v20060817-1500:1.1
	v20060810-1700:1.1
	v20060803-1200:1.1
	v20060728-0500:1.1
	v20060721-1130:1.1
	v20060713-1700:1.1
	R1_0_maintenance:1.1.0.2
	R1_0:1.1
	v20060627-1200:1.1
	v20060616-1200:1.1
	v20060609-1400:1.1
	v20060531-1730:1.1
	v20060519-0800:1.1
	RC2_10:1.1
	I20060505-1400:1.1
	I20060428-1300:1.1
	I20060424-0500:1.1
	I20060424-0300:1.1
	M6_10:1.1
	I20060407-1200:1.1
	I20060331-1000:1.1
	I20060324-0300:1.1
	I20060317-1300:1.1
	I20060317-1200:1.1
	I20060316-1300:1.1
	I20060309-1300:1.1
	M5_10:1.1
	S20060303-1600:1.1
	I20060227-1730:1.1
	I20060216-1945:1.1
	I20060210-1715:1.1
	I20060209-1815:1.1
	I20060203-0830:1.1
	I20060129-1145:1.1
	I20060127-0900:1.1
	I20060120-1530:1.1
	I20060113-1700:1.1
	M4_10:1.1
	I20060107-1100:1.1
	I20060105-1630:1.1
	I20051230-1230:1.1
	I20051223-1100:1.1
	I20051217-0925:1.1
	I20051208-2000:1.1
	I20051201-1800:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.1
date	2005.11.25.19.37.57;	author cmahoney;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Bugzilla#113812 gmf_head cmahoney 051125 Deprecating DiagramResourceManager
@
text
@/******************************************************************************
 * Copyright (c) 2005 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    IBM Corporation - initial API and implementation 
 ****************************************************************************/

package org.eclipse.gmf.runtime.draw2d.ui.internal.l10n;

import org.eclipse.gmf.runtime.draw2d.ui.internal.Draw2dPlugin;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.plugin.AbstractUIPlugin;

/**
 * Bundle of all images used by this plugin. Image descriptors can be retrieved
 * by referencing the public image descriptor variable directly. The public
 * strings represent images that will be cached and can be retrieved using
 * {@@link #get(String)} which should <b>not</b> be disposed by the client.
 * 
 * @@author cmahoney
 */
public class Draw2dUIPluginImages {

	/**
	 * The icons root directory.
	 */
	private static final String PREFIX_ROOT = "icons/"; //$NON-NLS-1$

	// Cached images that can be retrieved using the get method. The
	// corresponding image descriptor must be initialized using the
	// createAndCache() method.
	
	public static final String IMG_UP_PRESSED_ARROW = PREFIX_ROOT
		+ "uppressedarrow.gif"; //$NON-NLS-1$

	public static final String IMG_DOWN_PRESSED_ARROW = PREFIX_ROOT
		+ "downpressedarrow.gif"; //$NON-NLS-1$

	public static final String IMG_LEFT_PRESSED_ARROW = PREFIX_ROOT
		+ "leftpressedarrow.gif";//$NON-NLS-1$

	public static final String IMG_RIGHT_PRESSED_ARROW = PREFIX_ROOT
		+ "rightpressedarrow.gif";//$NON-NLS-1$

	// Image descriptors.
	
	public static final ImageDescriptor DESC_LEFT_BOTTOM = create(PREFIX_ROOT
		+ "leftbottom.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_RIGHT_BOTTOM = create(PREFIX_ROOT
		+ "rightbottom.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_RIGHT = create(PREFIX_ROOT
		+ "right.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_TOP_RIGHT = create(PREFIX_ROOT
		+ "topright.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_BOTTOM = create(PREFIX_ROOT
		+ "bottom.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_DOWN_ARROW = create(PREFIX_ROOT
		+ "downarrow.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_UP_ARROW = create(PREFIX_ROOT
		+ "uparrow.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_LEFT_ARROW = create(PREFIX_ROOT
		+ "leftarrow.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_RIGHT_ARROW = create(PREFIX_ROOT
		+ "rightarrow.gif"); //$NON-NLS-1$

	public static final ImageDescriptor DESC_UP_PRESSED_ARROW = createAndCache(IMG_UP_PRESSED_ARROW);

	public static final ImageDescriptor DESC_DOWN_PRESSED_ARROW = createAndCache(IMG_DOWN_PRESSED_ARROW);

	public static final ImageDescriptor DESC_LEFT_PRESSED_ARROW = createAndCache(IMG_LEFT_PRESSED_ARROW);

	public static final ImageDescriptor DESC_RIGHT_PRESSED_ARROW = createAndCache(IMG_RIGHT_PRESSED_ARROW);

	public static final ImageDescriptor DESC_UP_GRAY_ARROW = create(PREFIX_ROOT
		+ "upgrayarrow.gif");//$NON-NLS-1$

	public static final ImageDescriptor DESC_DOWN_GRAY_ARROW = create(PREFIX_ROOT
		+ "downgrayarrow.gif");//$NON-NLS-1$

	public static final ImageDescriptor DESC_LEFT_GRAY_ARROW = create(PREFIX_ROOT
		+ "leftgrayarrow.gif");//$NON-NLS-1$

	public static final ImageDescriptor DESC_RIGHT_GRAY_ARROW = create(PREFIX_ROOT
		+ "rightgrayarrow.gif");//$NON-NLS-1$

	/**
	 * Creates the image descriptor from the filename given.
	 * 
	 * @@param imageName
	 *            the full filename of the image
	 * @@return the new image descriptor
	 */
	private static ImageDescriptor create(String imageName) {
		return AbstractUIPlugin.imageDescriptorFromPlugin(Draw2dPlugin
			.getPluginId(), imageName);
	}

	/**
	 * Creates the image descriptor from the filename given and caches it in the
	 * plugin's image registry.
	 * 
	 * @@param imageName
	 *            the full filename of the image
	 * @@return the new image descriptor
	 */
	private static ImageDescriptor createAndCache(String imageName) {
		ImageDescriptor result = create(imageName);
		Draw2dPlugin.getInstance().getImageRegistry().put(imageName, result);
		return result;
	}

	/**
	 * Gets an image from the image registry. This image should not be disposed
	 * of, that is handled in the image registry. The image descriptor must have
	 * previously been cached in the image registry. The cached images for the
	 * public image names defined in this file can be retrieved using this
	 * method.
	 * 
	 * @@param imageName
	 *            the full filename of the image
	 * @@return the image or null if it has not been cached in the registry
	 */
	public static Image get(String imageName) {
		return Draw2dPlugin.getInstance().getImageRegistry().get(imageName);
	}

}
@
