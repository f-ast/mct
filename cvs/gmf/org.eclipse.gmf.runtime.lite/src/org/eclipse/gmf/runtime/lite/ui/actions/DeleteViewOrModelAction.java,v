head	1.1;
access;
symbols
	v20080722-1827:1.1
	R2_1_maintenance:1.1.0.2
	Root_R2_1_maintenance:1.1
	R2_1_0:1.1
	v20080425-1959:1.1
	v20071108-0000:1.1
	v20071003-0000:1.1
	v20070903-0000:1.1;
locks; strict;
comment	@# @;


1.1
date	2007.08.13.14.11.06;	author bblajer;	state Exp;
branches;
next	;
commitid	660946c066784567;


desc
@@


1.1
log
@1. Don't cache templates if dynamic templates option is on;
2. [199747] Support shortcuts in the Lite diagrams (including notation model update for links between alien shortcuts);
3. Decorations should be visible;
4. TransactionalUpdateManager: more notifications to be dispatched to parents, make it possible to add more in subclasses;
5. On element creation, it should be given an opportunity to contribute its notational update commands;
6. [199749]: Delete from View supported (request, edit policy, command, UI action);
7. Add @@generated tags where they were missing;
8. ChildNotationModelRefresher: if the child feature is derived transient, notation model refresher should listen to containment feature.
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.ui.actions;

import java.util.List;

import org.eclipse.gef.EditPart;
import org.eclipse.gef.commands.Command;
import org.eclipse.gmf.runtime.lite.requests.RequestConstants;
import org.eclipse.ui.IWorkbenchPart;

/**
 * Action that deletes view only for shortcuts and children of non-canonical parents, 
 * and both the view and the model for children of canonical parents.
 */
public class DeleteViewOrModelAction extends DeleteAction {
	public DeleteViewOrModelAction(IWorkbenchPart part) {
		super(part);
	}

	@@Override
	protected void init() {
		super.init();
		setId(ActionIds.DELETE_VIEW_OR_MODEL);
		setText("Delete");
		setToolTipText("Delete");
	}

	@@Override
	public Command createDeleteCommand(List objects) {
		if (objects.isEmpty()) {
			return null;
		}
		if (!(objects.get(0) instanceof EditPart)) {
			return null;
		}
		Command deleteViewCommand = createDeleteCommand(objects, RequestConstants.REQ_DELETE_VIEW);
		if (deleteViewCommand != null && deleteViewCommand.canExecute()) {
			return deleteViewCommand;
		}
		if (objects.size() > 1) {
			return null;
		}
		return createDeleteCommand(objects, RequestConstants.REQ_DELETE);
	}
}
@
