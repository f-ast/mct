head	1.4;
access;
symbols
	v20080722-1827:1.4
	R2_1_maintenance:1.4.0.4
	Root_R2_1_maintenance:1.4
	R2_1_0:1.4
	v20080425-1959:1.4
	v20071108-0000:1.4
	v20071003-0000:1.4
	v20070921-0000:1.4
	v20070903-0000:1.4
	v20070809-0000:1.4
	R2_0_maintenance:1.4.0.2
	R2_0:1.4
	R4_20:1.4
	v20070621-0000:1.4
	RC3_20:1.3
	v20070601-1400:1.3
	v20070525-1500:1.3
	v20070518-1300:1.3
	v20070427-0600:1.3
	v20070420-1000:1.3
	v20070413-1300:1.3
	v20070405-1100:1.3
	v20070330-1300:1.3
	v20060330-1300:1.3
	v20070322-1100:1.3
	v20060316-0600:1.2
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1
	M4_20:1.1
	v20061222-1800:1.1
	v20061218-1200:1.1
	v20061214-0000:1.1
	v20061120-1300:1.1
	M3_20:1.1
	v20061117-0800:1.1
	v20061013-1330:1.1;
locks; strict;
comment	@# @;
expand	@k@;


1.4
date	2007.06.21.14.08.17;	author atikhomirov;	state Exp;
branches;
next	1.3;
commitid	1770467a86514567;

1.3
date	2007.03.16.18.54.19;	author bblajer;	state Exp;
branches;
next	1.2;
commitid	7fc945fae7db4567;

1.2
date	2007.03.15.16.43.32;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	61a145f977b34567;

1.1
date	2006.10.09.17.03.18;	author atikhomirov;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fix copyright years
@
text
@/**
 * Copyright (c) 2006, 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.commands;

import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;
import org.eclipse.emf.common.command.AbstractCommand;
import org.eclipse.emf.transaction.TransactionalEditingDomain;
import org.eclipse.emf.transaction.util.TransactionUtil;
import org.eclipse.gef.requests.ChangeBoundsRequest;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.Node;

public class ChangeBoundsCommand extends AbstractCommand {
	private final Node myNode;
	private final ChangeBoundsRequest myRequest;
	private final IFigure myReferenceFigure;

	private Point myMoveDelta;
	private Dimension myResizeDelta;

	public ChangeBoundsCommand(Node node, ChangeBoundsRequest request, IFigure figure) {
		super("Change node position/size");
		myNode = node;
		myRequest = request;
		myReferenceFigure = figure;
	}

	public boolean canUndo() {
		return canExecute();
	}

	protected boolean prepare() {
		if (myNode.getLayoutConstraint() instanceof Bounds == false) {
			return false;
		}
		TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(myNode);
		if (domain != null && domain.isReadOnly(myNode.eResource())) {
			return false;
		}
		Bounds bounds = (Bounds) myNode.getLayoutConstraint();
		Rectangle original = new Rectangle(bounds.getX(),
				bounds.getY(), bounds.getWidth(), bounds.getHeight());
		myReferenceFigure.translateToAbsolute(original);
		Rectangle transformed = myRequest.getTransformedRectangle(original);
		myReferenceFigure.translateToRelative(transformed);
		myReferenceFigure.translateToRelative(original);
		myResizeDelta = transformed.getSize().expand(
				original.getSize().negate());
		myMoveDelta = transformed.getTopLeft().translate(
				original.getTopLeft().negate());
		return true;
	}

	public void undo() {
		execute(myMoveDelta.getNegated(), myResizeDelta.getNegated());
	}

	public void execute() {
		execute(myMoveDelta, myResizeDelta);
	}

	public void redo() {
		execute();
	}

	private void execute(Point move, Dimension resize) {
		Bounds bounds = (Bounds) myNode.getLayoutConstraint();
		bounds.setX(bounds.getX() + move.x);
		bounds.setY(bounds.getY() + move.y);
		bounds.setWidth(bounds.getWidth() + resize.width);
		bounds.setHeight(bounds.getHeight() + resize.height);
	}
}
@


1.3
log
@EObjects that are not attached to any resource should be treated as not read only
@
text
@d2 1
a2 1
 * Copyright (c) 2006 Borland Software Corporation
@


1.2
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@d49 1
a49 1
		if (domain == null || domain.isReadOnly(myNode.eResource())) {
@


1.1
log
@[160205] bblajer - move and clone elements on diagram
@
text
@d19 2
d48 4
@

