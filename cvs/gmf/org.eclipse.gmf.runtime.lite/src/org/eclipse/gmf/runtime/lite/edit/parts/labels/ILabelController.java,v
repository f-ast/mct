head	1.2;
access;
symbols
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.4
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.2
	v20070903-0000:1.2
	v20070809-0000:1.2
	R2_0_maintenance:1.2.0.2
	R2_0:1.2
	R4_20:1.2
	v20070621-0000:1.2
	RC3_20:1.2
	v20070601-1400:1.2
	v20070525-1500:1.2
	v20070518-1300:1.2
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.05.11.11.39.02;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	79b0464455d54567;

1.1
date	2007.03.15.16.43.32;	author bblajer;	state Exp;
branches;
next	;
commitid	61a145f977b34567;


desc
@@


1.2
log
@Labels with undefined label displayer should not be editable;
Empty label text should always be replaced with default text;
Closing and reopening outline should not lead to "widget disposed" exceptions;
Delete outgoing links before deleting element.
Make it easier to set the default text to display in the outline
@
text
@/**
 * Copyright (c) 2007 Borland Software Corporation
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.labels;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.gmf.runtime.lite.edit.parts.update.IExternallyUpdatableEditPart;

/**
 * Implementors of this interface know how to display and update text. They are typically associated with edit parts.
 */
public interface ILabelController {
	/**
	 * Returns the label displayer associated with this edit part.
	 */
	public ILabelTextDisplayer getLabelTextDisplayer();

	/**
	 * Causes the given text to be displayed in the label controlled by this edit part.
	 */
	public void setLabelText(String text);

	public static class ExternalRefresherAdapter implements IExternallyUpdatableEditPart.ExternalRefresher {
		private final ILabelController myController;
		private final EObject mySource;

		public ExternalRefresherAdapter(ILabelController controller, EObject source) {
			myController = controller;
			mySource = source;
		}

		public boolean isAffectingEvent(Notification msg) {
			if (myController.getLabelTextDisplayer() == null) {
				return false;
			}
			return myController.getLabelTextDisplayer().isAffectingEvent(msg);
		}

		public void refresh() {
			if (myController.getLabelTextDisplayer() == null) {
				return;
			}
			myController.setLabelText(myController.getLabelTextDisplayer().getDisplayText(mySource));
		}
	}
}
@


1.1
log
@[164018] Command generation seperated from Parts for commands that operate with labels;
API to display label text, apply modifications and update after (external) modifications isolated from generated code;
Moved as much common generated code as possible to BaseTreeEditPart;
[165700] Support diagrams in read-only mode: all EMF commands that are not composed of standard EMF commands, but modify EMF models directly should query the editing domain for read-onliness of the resource they operate on.
@
text
@d42 3
d49 3
@

