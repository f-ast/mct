head	1.2;
access;
symbols
	v20080722-1827:1.2
	R2_1_maintenance:1.2.0.2
	Root_R2_1_maintenance:1.2
	R2_1_0:1.2
	v20080425-1959:1.2
	v20071108-0000:1.2
	v20071003-0000:1.2
	v20070921-0000:1.1
	v20070903-0000:1.2
	v20070809-0000:1.1
	R2_0_maintenance:1.1.0.2
	R2_0:1.1
	R4_20:1.1
	v20070621-0000:1.1
	RC3_20:1.1
	v20070601-1400:1.1
	v20070525-1500:1.1
	v20070518-1300:1.1
	v20070427-0600:1.1
	v20070420-1000:1.1
	v20070413-1300:1.1
	v20070405-1100:1.1
	v20070330-1300:1.1
	v20060330-1300:1.1
	v20070322-1100:1.1
	v20060316-0600:1.1
	v20070307-0700:1.1
	v20070228-2000:1.1
	v20070208-1800:1.1;
locks; strict;
comment	@# @;


1.2
date	2007.08.13.14.11.06;	author bblajer;	state Exp;
branches;
next	1.1;
commitid	660946c066784567;

1.1
date	2007.02.02.17.14.34;	author bblajer;	state Exp;
branches;
next	;
commitid	78e045c371794567;


desc
@@


1.2
log
@1. Don't cache templates if dynamic templates option is on;
2. [199747] Support shortcuts in the Lite diagrams (including notation model update for links between alien shortcuts);
3. Decorations should be visible;
4. TransactionalUpdateManager: more notifications to be dispatched to parents, make it possible to add more in subclasses;
5. On element creation, it should be given an opportunity to contribute its notational update commands;
6. [199749]: Delete from View supported (request, edit policy, command, UI action);
7. Add @@generated tags where they were missing;
8. ChildNotationModelRefresher: if the child feature is derived transient, notation model refresher should listen to containment feature.
@
text
@/**
 * Copyright (c) 2007 Borland Software Corp.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    bblajer - initial API and implementation
 */
package org.eclipse.gmf.runtime.lite.edit.parts.decorations;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.draw2d.DelegatingLayout;
import org.eclipse.draw2d.IFigure;
import org.eclipse.draw2d.Locator;
import org.eclipse.draw2d.PositionConstants;
import org.eclipse.draw2d.geometry.Dimension;
import org.eclipse.draw2d.geometry.Point;
import org.eclipse.draw2d.geometry.Rectangle;

/**
 * Decoration manager that places decorations as children of a given figure.
 * The actual position of the decoration
 * is controlled by the {@@link #getDecorationPosition(String)} method.
 * @@author bblajer
 */
public class PaneDecorationManager extends AbstractDecorationManager {
	private Map<String, Integer> myPositionsForKeys;

	public PaneDecorationManager(IFigure decorationParent) {
		super(decorationParent);
		decorationParent.setLayoutManager(new DelegatingLayout());
	}

	@@Override
	protected Object getConstraint(String key, IFigure decoration) {
		return new DecorationLocator(getDecorationPosition(key));
	}

	/**
	 * Returns the {@@link PositionConstants position} where the decorator with the given key
	 * should appear. 
	 * Positions for keys may be installed using {@@link #installDecorationPosition(String, int)}
	 * If the key is unknown (was never installed or was uninstalled), 
	 * the {@@link #getDefaultDecorationPosition() default position} is used.
	 * Subclasses may reimplement.
	 * @@param key the key which is used to install the decorator
	 */
	protected int getDecorationPosition(String key) {
		if (myPositionsForKeys != null) {
			int predefinedResult = myPositionsForKeys.get(key);
			if (predefinedResult > 0) {
				return predefinedResult;
			}
		}
		return getDefaultDecorationPosition();
	}

	/**
	 * Returns the {@@link PositionConstants position} where the decorator with an unregistered key should appear. 
	 * By default, all decorators are positioned to the north-west of the parent figure.
	 * Subclasses may reimplement.
	 */
	protected int getDefaultDecorationPosition() {
		return PositionConstants.NORTH_WEST;
	}

	/**
	 * Registers the given position for the given key. 
	 * @@param key the key which is used to install a decorator
	 * @@param decorationPosition position where the decorator with this key should appear.
	 */
	public void installDecorationPosition(String key, int decorationPosition) {
		if (myPositionsForKeys == null) {
			myPositionsForKeys = new HashMap<String, Integer>();
		}
		myPositionsForKeys.put(key, decorationPosition);
	}

	/**
	 * Unregisters the given position for the given key. Subsequently, decorator with the given key will appear
	 * at the default location. 
	 * @@param key the key which is used to install a decorator
	 */
	public void uninstallDecorationPosition(String key) {
		if (myPositionsForKeys != null) {
			myPositionsForKeys.remove(key);
		}
	}

	private class DecorationLocator implements Locator {
		private final int myPosition;
		public DecorationLocator(int position) {
			myPosition = position;
		}
		public void relocate(IFigure target) {
			Rectangle bounds = getDecorationParent().getBounds().getCopy();
			Dimension size = target.getPreferredSize();
			Point pt = bounds.getTopLeft();
			switch (myPosition & PositionConstants.EAST_WEST) {
			case PositionConstants.WEST:
				break;
			case 0:
			case PositionConstants.EAST_WEST:
				pt.x += (bounds.width - size.width)/2;
				break;
			case PositionConstants.EAST:
				pt.x += bounds.width - size.width;
				break;
			}
			switch (myPosition & PositionConstants.NORTH_SOUTH) {
			case PositionConstants.NORTH:
				break;
			case 0:
			case PositionConstants.NORTH_SOUTH:
				pt.y += (bounds.height - size.height)/2;
				break;
			case PositionConstants.SOUTH:
				pt.y += bounds.height - size.height;
				break;
			}
			target.setBounds(new Rectangle(pt, size));
		}
	}
}
@


1.1
log
@[172664]: Provide audits and metrics for Lite diagrams (including view-based and RCP) + validation decorators + validation markers (for non-RCP case);
Several templates are rewritten with xpand;
lite-specific TextEmitter is back (otherwise importManager is sometimes passed to xpand templates)
@
text
@d14 3
d32 2
d46 4
a49 1
	 * should appear. By default, all decorators are positioned to the north-west of the parent figure.
d54 15
d72 23
@

